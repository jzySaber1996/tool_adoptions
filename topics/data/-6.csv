bower/bower,mocha,2012-10-17T06:53:50Z,yeah i'm open to it for sure,neutral
bower/bower,mocha,2012-10-17T07:58:40Z,fat this is kind of easy to implement and i can tickle around and make a prstill should it be named devdependencies or optionaldependencies? see jamesarosen comment,neutral
bower/bower,mocha,2012-10-17T17:09:07Z,i see. i was not familiar with the optionaldependencies option in node.still i think we should give priority to devdependencies and implement optionaldependencies later on.,neutral
bower/bower,mocha,2012-11-06T07:09:06Z,+1,neutral
redux-saga/redux-saga,uglify,2017-06-15T16:43:30Z,what do u use to transpile generators? it doesnt look quite like the default `regenerator-runtime`. anyway - its not `redux-saga` issue but rather typescript compiler thing and should be reported there.dead code can be found in numerous places. in nearly every big framework like react and probably angular too - there are often different code paths for prod and dev builds and its a job for tools like uglify js to get rid of this (as its unreachable).,neutral
jprichardson/electron-mocha,mocha,2016-03-07T18:14:41Z,inukshuk thanks for the reference! i'll have a look. but at a quick glance i have the feeling this is not going to turn out well... i'm trying to add coverage for non-commonjs files to be tested in the renderer. and already had to hack electron-mocha to pass source files with globals.,negative
badunk/multer-s3,standard,2016-01-27T04:19:05Z,looks great!thanks for adding standard,neutral
serverless/serverless,eslint,2015-11-07T07:52:26Z,dev-dependencies included in packages. there are many dev modules such as eslint and gulp that have dozens of dependencies. listing each of them for each lambda in the excludes is not ideal.an `includepatterns` would help a lot. as would blob matching as opposed to regexp,neutral
serverless/serverless,eslint,2015-11-07T08:21:19Z,as a workaround. i'm using:``` "excludepatterns": [   "node_modules/(?!jaws-core-js|dotenv)[a-za-z-]+" ]```,neutral
serverless/serverless,eslint,2015-11-11T19:22:01Z,this is only a problem when turning off browserify.,neutral
airbnb/javascript,eslint,2015-10-30T16:04:15Z,eslint: fix `no-mixed-spaces-and-tabs` turn off. currently the way the rule is defined. mixing spaces and tabulations inindentation is allowed. however. the comments and documents seems to saythe opposite.this patchs turns the rule on so mixing spaces and tabs is not allowed.fixes: #539,neutral
airbnb/javascript,eslint,2015-11-03T16:37:22Z,why is babel-eslint required?. eslint supports all of es6 plus the experimental object rest/spread that react uses. is it possible to remove babel-eslint as a dependency? (it would make linting faster.),neutral
airbnb/javascript,eslint,2015-11-03T22:16:53Z,support for what?,neutral
airbnb/javascript,eslint,2015-11-03T22:23:43Z,> all of es6 plus the experimental object rest/spread that react uses,neutral
airbnb/javascript,eslint,2015-11-08T19:30:34Z,ljharb do airbnb not use e.g. es7 extensions at all?while eslint might cover all of es6. it doesn't seem to cover things like class properties and async/await (maybe just with arrow functions?) that people actually use.,neutral
airbnb/javascript,eslint,2015-11-08T20:27:15Z,taion no. airbnb does not use any es7 extensions at all - only things that are in the spec (stage 4 for post-es6 stuff).,neutral
airbnb/javascript,eslint,2015-11-08T21:02:44Z,fair enough. do you think an `airbnb/babel` would fit here?,neutral
airbnb/javascript,eslint,2015-11-09T00:47:02Z,since we don't use `babel-eslint` internally anymore. i'm not sure what the purpose would be - you can add it as a parser to your own `eslintrc` that extends our config. and you can define any rules you like in there?,neutral
airbnb/javascript,eslint,2015-11-09T01:14:12Z,that's what i ended up doing - same ruleset. just needed eslint to not choke on es7 features (they weren't getting linted in any particularly interesting way anyway).,negative
airbnb/javascript,eslint,2015-11-15T00:38:18Z,`npm install -g eslint` (note that --save and --save-dev don't apply to global installs),neutral
airbnb/javascript,eslint,2015-11-15T00:41:16Z,i did that already. same problemnpm install -g --save-dev eslint-config-airbnb babel-eslint eslint-plugin-react eslint,neutral
airbnb/javascript,eslint,2015-11-16T21:49:04Z,this seems like something eslint should be handling - `require.resolve` is something that generally shouldn't be done outside of bundling tools.,neutral
airbnb/javascript,eslint,2015-11-17T20:20:26Z,the tests of this repo itself pass (e.g. running `npm test` in `packages/eslint-config-airbnb`).,neutral
jashkenas/backbone,eslint,2015-06-24T15:43:25Z,> it's already set up. we could use eslint. like underscore. too though.yeah but we don't run it through ci and haven't updated it in a long time,neutral
kangax/fabric.js,jshint,2012-10-14T00:58:07Z,i commited the cleanup. now if you `npm install jshint` and then run `jshint src`. you can lint changes (patch. addition. etc.) against our ruleset before submitting. should make contribution and code reviews easier.,negative
chaijs/chai,mocha,2012-07-28T00:28:27Z,add check for dom objects in util.inspect().. serializing was very slow before the patch.visionmedia/mocha#525,neutral
chaijs/chai,mocha,2012-07-29T06:53:13Z,reduce test error output in node console. is it possible to reduce test output in node console?use case (i use chai.js with mocha.js): i have a huge object and expect it to have some property. if the property is not there. mocha spec reporter outputs in a console red error:expected {.. huge object on multiple screens... } to have proper ..huge error message. but i'd rather see just line about an error and some info that would allow to identify whats happens but not huge redundant output.,negative
chaijs/chai,mocha,2012-08-02T08:30:11Z,that would be great i believe.,positive
chaijs/chai,mocha,2012-08-07T05:02:50Z,made a few more tweaks to it. it will only kick in if the inspection string exceeds a length. might need tweaking in the future but its been incredibile helpful for now.,positive
velesin/jasmine-jquery,jasmine,2013-03-27T22:16:08Z,add tohavebeentriggeredonandwith jasmine helper. jquery's `trigger` method allows us to pass extra parameter as an object or array in addition to an event name.this pr adds `tohavebeentriggeredonandwith` function that checks if a given event is triggered on expected jquery object with expected extra parameter.,neutral
videojs/video.js,standard,2016-03-07T19:59:14Z,my initial thought was that i think this probably falls inline more with a plugin or custom implementation. not core. this feels pretty similar to the argument for showing the big play button and poster at the end of a video...not a bad idea at all. just not "core".that being said. this feels pretty standard these days for "custom" players. the only real argument against is that this isn't the video element's behavior. but it feels like we've strayed pretty far from that policy of late.,negative
videojs/video.js,standard,2016-03-07T21:54:06Z,any update on this pr? any eta?,neutral
videojs/video.js,standard,2016-03-08T21:51:14Z,yep. for testing i just copied the standard oceans track and called it chapters.,neutral
expressjs/express,mocha,2012-09-10T19:42:17Z,the boilerplate issue is more a problem of getting your own conventions together. which in itself is not a concern for such a framework. it's easy to have a local template. or a template you host on github etc. "newbies" would of course naturally have a more difficult time at this until they get used to the community and try out what they like (vows. nodeunit. mocha. mongoose etc). express isn't the right tool for just having generic crud sites up as quickly as possible. that's what rails / drupal and others are for. and in my opinion the rails structure is terrible. it's effectively anti-modularity,negative
SassDoc/sassdoc,coveralls,2016-08-16T20:23:07Z,coveralls u drunk?,neutral
docpad/docpad,standard,2013-11-09T16:03:31Z,i'd certainly want to get as much stuff from the docpad core into modules as as possible. though for plugins that's a different choice. let me explain.things like routing (and perhaps even growl notifications in hindsight) are part of a core experience of docpad. our default routing can be turned off by the setting `extendserver: false` in your docpad configuration file. allowing you to over-ride it with what you want. the same applied to growl notifications. by setting `growl: false`. you get no notifications.the issue with putting these things into plugins. is that then it means they are optional. and optional things means that they have to be installed. things like routing. are definitely part of the core experience one would expect. whereas things like eco rendering. contact forms. aren't part of a core experience.we should probably formally define what the core experience is somewhere. but that would be digressing for now. for now. let's define it as "sensible defaults".in terms of the architecture though. modularisation of the core makes a lot of sense. tightly integrated. well tested. swappable. re-usable. units of code. versus our big monolithic current structure. is clearly beneficial. however. a pluginfied core. not so much.i've been thinking about ways to abstract different parts. and it could work like this;- core experience  - docpad cli module  - docpad core module    - docpad generate module    - docpad plugin module    - docpad file model & collection module    - docpad block model & collection module  - docpad watching plugin  - docpad growl plugin- extra experience  - renderer plugins  - helper plugins  - importer plugins  - interface pluginsthis way. applications just wanting to use docpad as a rendering engine (a common. but incredibly underplayed use case of docpad) could be accomplished by a `npm install --save docpad-core`. whereas. the standard docpad experience we have now. would be the same `npm install docpad`i thought about having global plugins solve some of this problem. but that is another issue. with it's own precautions.-,negative
docpad/docpad,standard,2013-11-28T20:11:34Z,if i understand correctly. #404 is saying the opposite of what i'm suggesting here.  the primary goal behind the suggestion here is to have a standardized home for all resources that come with skeletons. so that we always know where to look for resources. effectively making the skeleton identical as far as resource taxonomy goes.from 50k feet the node community seems to be going through all the stages the java community went through before maven.  we have grunt. cake. etc. that give each project designer a great deal of flexibility in terms of project layout and processing.  so each time we checkout a new project. we have to come up to speed on the tasks for processing the project and the layout of various resources.  maven standardized this for java. and now almost all java projects use maven.,positive
Leaflet/Leaflet.draw,karma,2015-10-18T15:33:33Z,add contribution guidelines. add details to the readme on how to contribute to the project including:- installing and running `jake` for building the project```npm install jakenpm install jshintnpm install uglify-jsjake build```- installing `karma````npm install karmanpm install karma-phantomjs-launcher```- how to execute specs using `karma`?- what else do contributers need to know?,negative
FezVrasta/popper.js,sauce,2016-08-12T09:36:01Z,ok switched to saucelabs and it's much better! i've integrated the multi browser test on the `v1-dev` branch and it currently passes on edge and chrome. there are 5 failing tests on firefox that i'm investigating.gonna add safari soon.,negative
linkedin/dustjs,jasmine,2012-07-18T20:11:35Z,do we want to create a separate npm module for: core. helpers. and grammar. this would effectively decouple peg.js grammar changes from core dust and helpers?,neutral
linkedin/dustjs,jasmine,2012-07-18T22:15:43Z,grammar was part of core. so i would keep them together. helpers are just extensions ..,neutral
linkedin/dustjs,jasmine,2012-08-08T17:06:46Z,i am going to add the jasmine-test,neutral
angular-fullstack/generator-angular-fullstack,mocha,2014-02-13T21:44:28Z,added a branch for mocha tests.,neutral
angular-fullstack/generator-angular-fullstack,karma,2014-02-13T20:14:44Z,it looks like the generator-karma pull request was merged & closed. is this ready to go now?,neutral
angular-fullstack/generator-angular-fullstack,karma,2014-02-13T20:37:32Z,that'd be great. even if you want to put it in a github branch so we can see the general approach and start migrating (if necessary) our backend tests to that format.,positive
angular-fullstack/generator-angular-fullstack,karma,2014-02-17T02:38:32Z,+1 look forward to release.,neutral
Reactive-Extensions/RxJS,standard,2013-01-31T22:53:10Z,you mean having a function which returns a random number?  you could tackle the eagerness by using the rx.observable.defer method. or if it's a standard function. you could use the rx.observable.start method.,neutral
rwaldron/johnny-five,jshint,2016-01-29T01:02:08Z,will go and fix the jshint errors,neutral
webpack/webpack,standard,2016-03-25T19:53:07Z,it would be nice if there were standards support for a "weak reexport" that would say "i'm exporting this thing. but it doesn't need to be evaluated unless someone uses it".  this would not change the semantics of loading except that a loader _could_ use it as a signal to do more aggressive optimization.  nothing prevents loaders from evolving this on their own as a comment or annotation or external configuration. but if there's value to it then having it in the language instead of being loader-specific would be better for everyone.obviously. if a naive weak reexport targets a module with default side-effects then you might see inconsistent behavior. but i don't think that risk means that a well-structured library like `lodash-es` shouldn't have the option to declare its own safety.  in systemjs where all this happens in the browser. it's rather important that reexports _not_ be eagerly fetched. but there's no way to avoid that today without drilling down to the individual files (`import {x} from 'lodash-es/x'`) which is quite a bit less pleasant syntactically than plucking names out of a single lodash import (`import {x.y.z} from 'lodash-es'`).  webpack doesn't have to be as concerned with when/if the dependency gets fetched (not that reading hundreds of lodash modules that it doesn't need to is a great thing). but it still would benefit from a clear signal that it can exclude something from the bundle.,negative
webpack/webpack,uglify,2017-08-23T21:15:10Z,just tested with the beta uglify plugin and the issues seems to have gone away. will monitor a bit more before closing this.,neutral
webpack/webpack,uglify,2017-08-26T12:21:56Z,**this issue had no activity for at least half a year.**it's subject to automatic issue closing if there is no activity in the next 15 days.,neutral
webpack/webpack,uglify,2017-09-01T21:19:45Z,thank you so much for the report. would you be able to provide a minimal reproducible repo that we could use to bake into our tests and uglifyjs-webpack-plugin tests//cc d3viant0ne,positive
hellyeahllc/exim,eslint,2015-07-09T20:50:21Z,eslint tidy up. i thought some eslint might be nice for exim too. so i've hooked it into the build process.,positive
hellyeahllc/exim,eslint,2015-07-12T18:05:50Z,made the changes suggested... browserify externals seems to work ok too - though you might want to check that in production code....,neutral
hellyeahllc/exim,eslint,2015-07-13T06:02:03Z,awesome!,positive
acuminous/yadda,mocha,2015-02-15T10:00:00Z,i think changing your steplevelplugin initialisation line to``` jsyadda.plugins.mocha.steplevelplugin.init({container: global});```should do thie job,neutral
acuminous/yadda,karma,2015-09-23T06:47:08Z,nothing from my side. i haven't used karma and am not finding much time to investigate,neutral
acuminous/yadda,karma,2015-09-23T16:55:02Z,semblant is there any critical feature you are missing by disabling async for fetching the feature files? in my case. i think i either had to disable async or write some custom karma or yadda plugin. and the former option is the easiest the quickest. besides. i didn't miss much by doing so.,negative
acuminous/yadda,karma,2015-09-27T04:34:21Z,is there any interest in a pr to merge my project as an example to show how to use this with karma if using sync ajax to load the feature files is acceptable?,neutral
prebid/Prebid.js,standard,2017-06-12T13:50:03Z,some of the adapters support defining the referring url. documented or not. e.g. both rubicon and appnexus support passing bid.params.referrer from the adunit.perhaps you could check the code for the adapters you're using and try passing the referrer param for any that support it?instead of having to pass this in for each bidder. we should be able to add referrer to the standard bidrequest. it would still be up to the adapter to use it.,neutral
prebid/Prebid.js,standard,2017-06-15T02:21:17Z,mjacobsonny - is this the way we want users to be able to override the standard ad server keys in the long run? e.g. to set hb_deal_rubicon. we'd instruct the publisher to turn off enablesendallbids() and turn on alwaysusebid for all bidders. this seems counter-intuitive. questioning the meaning of enablesendallbids.,neutral
melonjs/melonJS,jasmine,2013-10-15T06:29:33Z,buffer-overflow i will then wait if you don't mind until a small update with the npm/jasmine update before merging this :p,neutral
melonjs/melonJS,jasmine,2013-10-20T22:25:45Z,also excited to see jasmine come in. i was actually thinking about it recently. the addition of unit tests to the code base.,positive
tjunnone/npm-check-updates,mocha,2015-02-10T14:30:21Z,yes. this is done. turns out the more complex gulp regex i provided doesn't work because of some bash escaping issues. it should be `npm-check-updates -f '/^(?!gulp-).*$/'`. i'll update the readme. thanks!,positive
tjunnone/npm-check-updates,mocha,2015-02-10T14:31:41Z,okay. thank you. ;),positive
nodejs/citgm,eslint,2015-10-30T22:10:17Z,lint: add linter and get project to pass ruleset. this commit adds eslint as a dev-dependency and a basic .eslintrcchanges were made across the entire project to have it pass the linter.,neutral
nodejs/citgm,eslint,2015-10-30T22:10:23Z,/cc jasnell,neutral
nodejs/citgm,eslint,2015-10-30T22:11:52Z,rubber stamp lgtm!,neutral
nodejs/citgm,eslint,2015-10-30T22:14:42Z,landed in 2a46931,neutral
babel/babylon,eslint,2016-05-05T17:18:58Z,please accept this pr. as i am running into the issue mentioned in eslint/eslint issue #6090,positive
san650/ember-cli-page-object,mocha,2016-07-22T16:01:50Z,thanks for reporting the error. i'll take a look at it.i don't use mocha with ember a lot. so i'm not too familiar with what changes when calling `before`. what happens if you call `visit('/foo')` from the `before` hook? does the ember test helper exists?,negative
Automattic/mongoose,eslint,2015-09-15T22:38:26Z,lint for spacing. used `eslint . --fix` to resolve the warnings automatically :smile:,positive
Automattic/mongoose,eslint,2015-09-16T17:46:16Z,can we make it so that `function() {}` is the accepted convention instead of `function () {}`. no space between function and `()`?,neutral
Automattic/mongoose,eslint,2015-09-16T18:01:51Z,vkarpov15 absolutely!updated the configuration and the code.,neutral
pouchdb/pouchdb,selenium,2013-06-21T18:17:26Z,travis has been disabled. i will be manually testing pr's and as time goes on automating the process bit by bit until we get back to a full ci setup (but with selenium on a dedicated box),neutral
lodash/lodash,uglify,2012-08-22T14:34:37Z,is there a reason you went with closure compiler over uglify. which can be managed with npm? it's the main thing adding size to the project.,neutral
lodash/lodash,uglify,2012-08-22T14:41:44Z,> is there a reason you went with closure compiler over uglify. which can be managed with npm? it's the main thing adding size to the project.yep. closure compiler has consistently produced smaller file sizes. i use a mixed minification approach where i do a pass with uglify. then one with closure compiler. then a hybrid of closure compiler+uglify (usually the smallest result). i don't rely on npm dependencies because i want lo-dash to work out-of-the-box from a github repo. npm. jamjs or wherever. why is file size really an issue?,neutral
angular/protractor,jasmine,2015-09-24T22:37:20Z,sjelin you are talking about jasmine but i use `chai.js`,neutral
angular/protractor,jasmine,2015-10-05T14:53:08Z,suggestions on a test framework/runner for angularjs protractor test with api tests . hi i am writing testcases to test a website built in angularjs .i want to test frontend as well as api endpoints . i am using protractor to test the angularjs based frontend  and have given a  try on frisby which is a rest api testing framework built on node.js and jasmine. can protractor suggest me a system /test framework / runner which would help me to manage the testsuites (group wise or dependency wise ) and run both protractor + frisby tests using the same cli,negative
angular/protractor,jasmine,2015-10-08T20:14:30Z,here's my use case:- we run our ui tests in parallel- if one of the tests errors. it should leave the window in the state it was when the error occurred. and continue on testing in a new window- a developer can review the failures and look at the state of the browser window to debug any failed testsi'm having trouble getting it to work exactly like i want.i got it to open a new window and continue running tests in it by using browser.forknewdriverinstance(). the only problem is that when protractor finishes running tests it closes all the windows. so there's no time to investigate. the other issue with this is that when running tests in parallel. they don't report any output until the whole process is finished. so i can't just "hang" the process until they are done.the other thing i tried is to call browser.pause() followed by process.exit(1). this successfully keeps the browser open after the process quits. but i can't run any more tests in the process after calling browser.pause(). so whatever tests followed an errored test will not get run.note that this is just for development machines. the build server would just take a screenshot of the current state and not try to keep the window open.,negative
angular/protractor,jasmine,2015-10-13T18:33:25Z,forgot to mention i am not using selenium. but connecting directly to the chrome drivers.let me know if you need any further info!```var htmlreporter = require('protractor-html-screenshot-reporter');exports.config = {    capabilities: { 'browsername': 'chrome' }.    directconnect: true.    allscriptstimeout: 25000.    jasminenodeopts: { showcolors: true }.    onprepare: function () {        var params = browser.params;        jasmine.getenv().addreporter(new htmlreporter({            basedirectory: params.results_folder. takescreenshotsonlyforfailedspecs: true        }));        browser.driver.manage().window().maximize();        ... some more app-specific code to log-in. shouldn't affect protractor at all ...    }}```,neutral
angular/protractor,jasmine,2015-10-14T19:29:20Z,i believe it has something to do with the jasmine team but i'm not totally sure,neutral
angular/protractor,jasmine,2015-10-15T17:06:31Z,```    var jasminereporters = require('jasmine-reporters');    jasmine.getenv().addreporter(new jasminereporters.junitxmlreporter({        consolidateall: true.        savepath: 'testresults'.        fileprefix: 'reportxmloutput'    }));```,neutral
angular/protractor,standard,2015-10-07T04:37:18Z,this is the way that the `optimist` package parses command line args. i agree that it's somewhat annoying. but i think it's better to go with the standard than implementing our own custom logic here. we can fix the cli help message though.,negative
angular/protractor,selenium,2014-09-19T16:06:33Z,yes.- run firefox with the `-p` option- create your specific profile. i named mine `selenium`- run firefox with this profile- make the changes you need in about:config- add this option in protractor configuration:``` javascriptseleniumargs: [ "-dwebdriver.firefox.profile=selenium" ].```this way. your new profile will be used to run your tests.,neutral
angular/protractor,selenium,2014-09-21T23:32:22Z,screenshot of entire browser screen not just the current viewport. i want to figure out a way to take a screenshot of the entire browser screen. and not just the part of the viewport that my scrolled screen is resting on ... during my e2e test.tools like snagit are useful when i perform such a task manually ... does anyone have suggestions on how to tie something like that into protractor/selenium e2e testing? or maybe this is already built-into protractor/selenium and you can share tips on how to invoke screenshots of the entire area?,neutral
angular/protractor,selenium,2014-09-21T23:35:52Z,for example. i see this in the api docs but i've no idea how to specify it as arguments or settings:```schedule a command to take a screenshot. the driver makes a best effort to return a screenshot of the following. in order of preference:entire pagecurrent windowvisible portion of the current framethe screenshot of the entire display containing the browser```,negative
angular/protractor,selenium,2014-09-22T23:15:21Z,as you saw from the bugs. this is working as intended. i don't know of a module that already does this. but others may comment.,neutral
angular/protractor,selenium,2014-09-26T14:24:42Z,protractor can't sync with the page after redirect. hello there.first. my tests were running smoothly before i finished refactoring the app no so long ago.now. i decided to update them and run again.and for some reason. after i submit the form. redirect to other page and then redirect back once again. protractor throws an error: ```error: error while waiting for protractor to sync with the page: {}"```but continues to perform tests regardless (:the strange thing is that he doesn't really wait for the sync. really. and the number of errors vary (but i haven't grasp the meaning behind this yet) between 1 or 2. despite the fact that i have a fair amount of redirects. not just two.sometimes instead of the regular unknown error i get```document unloaded while waiting for result```what baffles me is that the logic for redirects i wrote initially didn't change.if i remove all assertions about browser path. no errors are thrown.**bonus**after the tests are finished. another error pops up:```shutting down selenium standalone server.>> no "jasmine" targets found. warning: task "jasmine" failed. use --force to continue. aborted due to warnings.```,negative
angular/protractor,selenium,2014-09-30T07:01:01Z,yup i think rethinking the complete logic about using/starting seleniumserver and the direct option.because the current config for the seleniumaddress is also not that nice... (my opinion)i think the configuration/code can be easier.maybe more convention over configuration.if no seleniumaddress is set the driver without selenium is used.if set the seleniumaddress is used.and if people want a selenium server they can easy start it webdriver-manager start,neutral
angular/protractor,selenium,2014-10-03T22:42:49Z,hi folks.note that navigating to a data url at first is working as intended - tests should then redirect to your page. i think that these issues are something specific to your test setup since we are successfully running tests against chrome 36 on travis/saucelabs. could you share your configuration for how you're connecting to chromedriver (e.g. using `seleniumaddress`. `chromeonly`. etc?),positive
angular/protractor,selenium,2014-10-03T23:05:29Z,so if you're using gulp-protractor you aren't using webdriver-manager to start ie. correct? then you need to pass in that `-dwebdriver.ie.driver` in `config.seleniumargs`.i think everything else from the initial issue has been addressed. so i'm closing this.,neutral
angular/protractor,selenium,2014-10-10T10:32:41Z,beforedescribe function. hi guys!i've been looking around if there is such thing as a beforedescribe function (or any other way to register a function that is called before and after a describe is called).my use case is the following. i'm using shard un a selenium grid with about 15 machines and i want to print the ip address of the machine the test is running on. i have the code to do this and i could do it in each `it`function but sharding in protractor is done on a spec basis which is a better approximation than the `it`do you see any way to do this?thanks!,neutral
angular/protractor,selenium,2014-10-10T11:10:15Z,i've confirmed that this has worked out just fine!thanks guys for listening to me :),neutral
angular/protractor,selenium,2014-10-17T17:23:03Z,juliemr is not really that. basically running this from my pc works fine. the issue is when running under jenkins. how can we force protractor to log selenium issues ?,negative
SharePoint/PnP-JS-Core,uglify,2017-01-27T13:48:52Z,adrianchrobok if you take uglify out of the pipeline does it then again work? my question is that is this really a limitation with uglify not supporting es6. as noted in the thread i linked? if so there no actions for us to take. one solution would be to insert something like babel into your pipeline to ensure what uglify is getting is es5. which it can handle.,positive
tapjs/node-tap,mocha,2016-12-19T19:29:19Z,thanks for the explanation. that definitely makes sense. i believe that splitting the files is not always a solution though. e.g. you might have very few specs which take a very long time to run.i know the issue is closed. but i though of other way to do it and maybe the solution below would make you interested. basically `only` would be treated as syntax sugar for skipping all other tests.the idea is quite simple:- add a first pass test to see if any of the specs has `.only(` (simple regexp would probably be enough)- if it doesn't continue as usual- if it has then preprocess the test files with some simple static code analysis. e.g.input```javascriptvar t = require('tap')console.log('one')t.test('two'. function (t) {  console.log('two')  t.pass('this is fine')  t.end()})console.log('three')t.test.only('four'. function (t) {  console.log('four')  t.pass('also fine')  t.end()})```output```javascriptvar t = require('tap')console.log('one')t.test('two'. { skip: true }. function (t) {  console.log('two')  t.pass('this is fine')  t.end()})console.log('three')t.test('four'. function (t) {  console.log('four')  t.pass('also fine')  t.end()})```would this make any sense?,neutral
tapjs/node-tap,mocha,2016-12-19T19:38:32Z,emilos you can definitely write such a thing without making any changes to node-tap.  you don't need my permission. but you have my blessing :)i'd recommend _not_ using a regexp.  consider this program:```jsvar o = 'only't.test[o]('only run this'. fn)```,neutral
tapjs/node-tap,mocha,2016-12-19T19:44:49Z,haha. thanks. i'd probably ignore cases like that. the first pass test would simply check if it makes any sense to make the static code analysis that would check it properly :) - it would be expensive to do it for every test file. it was worth asking anyway. thanks for your time!,positive
tapjs/node-tap,mocha,2016-12-20T19:18:28Z,with tap. the general way to run a specific test. is to split that test out into a different test script.,neutral
jquense/yup,eslint,2017-03-28T18:20:37Z,possible to add an alternate style instead of '${val}' in message strings. i was just curious if there is any possibility of changing (or adding an alternate style to) the way inserted values are used in yup message strings. my linter complains to no end because `'${}'` is not a valid template string and is often times considered a bug. eslint expects `${}` to only be used in template strings. but with yup. using `${}` inside a normal string is standard practice. i understand changing or adding an alternate ability to a lib simply to appease a linter error is crazy. but its `eslint`/`standard` which is a very common linter and i am sure other people have this problem as well.just curious if anyone else has this issue and if adding an alternative style would be considered by the maintainer.,negative
balderdashy/sails,mocha,2012-12-23T12:56:39Z,this is nearly there- needs to be tested.  also. an option needs to be added to allow users to encapsulate even the reduced set of stuff that's being kept global.  this makes for more annoying. less readable app code. but it would be nice for people who care about this sort of thing (and automated testing suites that complain about this sort of thing. _cough_ mocha _cough_),positive
koding/kd,karma,2014-03-20T19:54:46Z,test automation. #### what does it do?adds [karma]() for automatically running tests locally (chrome and firefox) and remotely on saucelabs (chrome. firefox. ie9. ie10).also updates the parts of the gulp build that were causing trouble with karma (in particular slow builds using deprecated gulp-browserify plugin.)#### where should the reviewer start?readme.md and gulpfile.coffeeyou'll also need to `npm install` since there are new dev dependencies#### how should this be manually tested?take a look at additions to readme.md. then run karma locally and on sauce. if you can't get this up and running from the readme instructions is means that i have more work to do! and don't forget to nuke your node_modules directory before you `npm install` if you want to get rid of extraneous modules.,neutral
koding/kd,karma,2014-03-20T22:28:46Z,tests for kdbuttonbar component. #### what does it do?- another unit test example with stubbing and spying- cleans up some dead test code that's not being run- adds a gulp helper for running the test suite in "run" mode (as opposed to the default "watch" mode)#### where should the reviewer start?`buttonbar.test.coffee`#### how should this be manually tested?`gulp run karma`,negative
systemjs/systemjs,mocha,2016-08-04T11:08:55Z,thank you.ah ok i understand. then i have to do a``` jsconst mocha = new mocha({  ui: 'bdd'});mocha.run();```and everything works  but one little question: how do i import `describe` and `it` and so on? a `import { describe. it } from 'mocha'` does not work (`undefined`). if i write `describe` as before without imports (as globals) it complains that it can not find it.,negative
systemjs/systemjs,mocha,2016-08-04T11:57:08Z,hmm ok. that's not working as well   i tried a``` jsrunner.suite.emit('pre-require'. global. 'global-mocha-context'. runner);```but where does the variable `global` came from? my browser tells me that it can not find it (`global is not defined`).,negative
cerebral/cerebral,standard,2015-08-14T13:52:13Z,thanks for the input a-s-o. you definitely make a valid point!what we could do though is make the implementation flexible. but lock the api for the official packages. so if you create your own custom package you can use whatever mutation methods you want. but. the official cerebral-packages share a common mutation api to make it easy to change model-layer.so pstoica could build a custom immutable-js controller for the specific project or share on github. with mutation methods fitted for immutable-js. but the official `cerebral-immutable-js` project has the standard "set. push. pop" etc. methods.,neutral
cerebral/cerebral,standard,2015-08-14T16:09:15Z,hey all! definitely wanted the first feature as soon as i copied over the react helpers. i did need a custom `shouldcomponentupdate` using `immutable.is` since i decided to pass the immutable objects to components without serializing with `tojs` (useful when dealing with larger objects as props). so there could be some cross-cutting concerns between the model and view layers.for the second. it could be good to have a consistent mutation api for the official packages and leave room for custom hooks. on the other hand. if we already select and receive data differently in the view layer. maybe it's okay for hooks to vary officially.immutable has its own gotchas that you should probably be familiar with if you choose it. for example:- `immutable.map().set('a'. {b: 1})` will have the plain. mutable object in 'a'. `merge` will actually turn it into an `immutable.map`. if example cerebral code uses set with a plain object. i'm not sure if that code should be portable or if the adapter needs to call `fromjs` or something.- you might also have different function names and signatures between immutable methods and cerebral methods. for example. immutable's `setin` already takes a path. which might make cerebral's `set` confusing.- immutable has some mutators that take functions. these won't be serializable. but there should be a way to warn if you try to use them. however. `updatein` is the most generic way to update a path. and there could be a way to make that serializable. e.g. `state.updatein(['a'. 'b']. 'pop')` would call `.pop()` on the item at that path.would typechecking be the proper solution for mutation hooks. just like in `output`? i'm starting to think cerebral should focus on making mutations serializable/deterministic without worrying about standardizing them. if we do that. the cerebral controller could easily passthrough the defined hooks to the immutable methods.i can try to come up with more immutable vs standard cerebral differences later if that would help more.,neutral
brave/browser-laptop,codecov,2017-07-17T09:13:53Z,nejczdovc (sorry for delay)you can customize how codecov behaves:```yamlcodecov:  notify:    # after_n_builds: 1  # notify after n builds (default null)    # wait_for_ci: yes  # disable waiting for ci (default: yes)    require_ci_to_pass: no  # require ci to pass```,neutral
brigand/babel-plugin-flow-react-proptypes,eslint,2016-03-25T08:38:27Z,yeah. oh so maybe related to the fact that i use babel-eslint?,neutral
brigand/babel-plugin-flow-react-proptypes,eslint,2016-04-14T20:21:54Z,project cleanup:. just minor things:- require() -> import- var -> let/const- hoisted most of makeproptypesast- minor var name / spelling consistency changes- removed console.error() lines in favor of throwing a more detailed  error. console.error() unfortunately gets lost way up the terminal.- added eslintrc,negative
brigand/babel-plugin-flow-react-proptypes,eslint,2016-04-14T20:28:46Z,thanks! :-),positive
strongloop/microgateway,mocha,2016-10-12T18:17:45Z,cb - lgtm. i did not spend too much time trolling thru the mocha tests. please get approval from danbadt before merging to `develop`.,positive
dadi/api,standard,2016-04-08T06:11:47Z,publish fields as standard. ### expected behaviorbake in publish state. date. expires date. publisher as standard.,neutral
agershun/alasql,mocha,2015-04-17T09:13:18Z,tonight i will try to fix one of the found bugs. and describe a process. how i run the test. how i find the bug in the log file. how create new mocha test. and how fix it. hope. it will help us to make this process easy.thank you for the great work you have done!,positive
kybishop/ember-attacher,eslint,2017-08-26T23:59:33Z,chore(follow eslint with ember-suave),neutral
ember-cli/ember-cli-mocha,mocha,2016-08-11T19:40:06Z,remove "ember-qunit-notifications" from "bower.json". the `ember-cli-mocha` blueprint should remove the `ember-qunit-notifications` dependency from the `bower.json` file after it is installed. unfortunately there is no ember cli function for that. but it should be reasonably easy to implement.,neutral
ember-cli/ember-cli-mocha,mocha,2016-08-14T19:35:45Z,yup. seems like a duplicate to me.  i suppose the functionality should actually exist in `ember-mocha` instead.  i'll close this in favor of that issue. since we're looking for the same thing.,positive
electrode-io/electrode,uglify,2017-03-29T17:10:26Z,gulp build broken. very easy to reproduce on my machine :- generate an electrode project using ```yo electrode```- test various gulp commands. like ```gulp dev``` or ```gulp build``` : everything should work fine- delete the node_modules folder then regenerate it using ```npm install```- test now ```gulp build``` : the build will fail at the very end. on uglifyjs (error : ```gulpuglifyerror: unable to minify javascript```)- the consequence : the project cannot be build or rebuild using ```gulp build``` anymore. it is like "dead".it is not a little one but a very annoying one : it prevents me for example to build my electrode project in our wercker ci/cd pipeline. since i'm doing a ```npm install``` step to rebuild the node_module folder in wercker.yml.,negative
electrode-io/electrode,uglify,2017-04-04T17:57:56Z,we will take a look and update you,neutral
electrode-io/electrode,uglify,2017-04-05T21:38:20Z,looks like if you use the plugin `transform-runtime` you need to use the array syntax and do this: `["transform-runtime". { "polyfill": false }]`.  once i did that my minify worked fine.  just need to test to make sure it still works.,neutral
electrode-io/electrode,uglify,2017-04-06T17:50:04Z,hi cross311 : where are you facing this issue? during gulp build ?,neutral
electrode-io/electrode,uglify,2017-04-06T18:33:22Z,we did not face it until we started doing `export * from './some-file';`  the transform-runtime babel plugin creates the dist file with an `import` for a polyfill and uglify does not support import. animesh10,neutral
electrode-io/electrode,uglify,2017-04-06T18:44:06Z,animesh10 we did not experience it on initial download of the stuff. but everyone will run into it if they have index files where they export folders.,neutral
electrode-io/electrode,karma,2017-06-05T19:31:44Z,archetype-react-app: [minor][feat]chrome headless. deprecate phantomjs. use chrome headless.use phantomjs as default for users and adding chrome headless as an option.if the user specify the `enable_chrome_headless=true`. will use chrome headless for karma runner. otherwise loads phantomjs as default.,positive
electrode-io/electrode,karma,2017-06-05T23:06:39Z,.,neutral
electrode-io/electrode,karma,2017-06-12T21:57:43Z,please rebase to latest,neutral
electrode-io/electrode,karma,2017-06-14T00:47:05Z,electrode-archetype-react-app-dev: [patch][chore] allow webpack config to override test entry point. my goal here is to co-locate my test files with my components. something i thought was possible with electrode but it must have changed at some point.  my solution is to make the test entry file overridable via the webpack config. it's worked for my case. and gives me a ton of control over my testing environment which is very valuable to my project.  based on the naming of the webpack parital `test-entry.js` my assumption is that this was the intention of the webpack config file. but it doesn't look like it's being applied properly in the `karma.conf.js`.is there a reason that the test entry file is hard coded? this is quite limiting. but if there's an alternative way you'd suggest overriding the entry file i'd be interested to hear the approach.,negative
electrode-io/electrode,karma,2017-06-14T01:03:36Z,thanks for the pr.  yes. the change makes sense.  could you rebase to the latest please?,positive
electrode-io/electrode,karma,2017-06-14T01:54:14Z,pr updated with the latest from master,neutral
electrode-io/electrode,karma,2017-06-14T16:49:51Z,jchip do you know why the tests would fail for this. i'm struggling to get them running locally on master. i'm not sure why they're failing,negative
Polymer/polymer,eslint,2017-04-04T06:37:16Z,baocang try to put this line into your `.eslintrc.json` ```"root": true ```by default. eslint will look for configuration files in all parent folders up to the root directory. not sure if this is that case. but such a behavior can sometimes lead to unexpected results like this.,neutral
Polymer/polymer,eslint,2017-04-14T19:20:05Z,add eslint for jsdoc and fix issues,neutral
Polymer/polymer,eslint,2017-04-14T19:43:42Z,oeh fancy. til. nice linting :clap: :clap:,positive
angular/angular-cli,mocha,2016-01-28T20:10:08Z,i was playing with testem and noticed that mocha and other testing stuff is injected via cdns. so i thought angular2. rxjs and system could also be injected via cdns. if so. i believe we can do `ng new test-project --skip-npm` before running e2e tests. i don't know. maybe this is a bad idea.,negative
angular/angular-cli,uglify,2017-03-31T03:48:05Z,how to uglify when use 'ng build'. ### how to uglify when use 'ng build'i use ng build.the vendor.bundle.js size is 6m!which options i can use?,neutral
angular/angular-cli,uglify,2017-04-06T04:38:10Z,ishitatsuyuki  got it,neutral
lovell/sharp,standard,2016-07-09T00:08:59Z,lovell i tried a couple of methods of finding a pointer that is constant between the constructor and `handleokcallback`. and didn't find something that worked. in 4c7f339 i made the mistake of not passing the buffer by reference. but fixing this. it appears that the iterator object is actually declared on the stack (from the memory address) and differs between range loops while the buffer element is on the heap. i wasn't aware that that's how c++11 range loops worked -- so i learned something. in e2cda35. i expected going to a standard for loop over the length of the `std::vector`. and getting the address of the vector element to work. however. it seems the referenced object has been copied at some point. i realize there is some ambiguity about which vector is being referenced in the constructor due to the class member `savebuffers` having the same name as the constructor argument. but i changed the names and the pointers still differed. i'm not sure if this has to do with some obscure fact of a `local<object>` object. or copying `std::vector`s but i couldn't find a solution and i'm out of time for tonight. the most recent commit goes back to the `buffercontainer` method of filling the vector.i think this is going a little off topic from the boolean operator. can we merge this one. and then work out a better system for passing in buffers to be saved in a later commit?i would like to be able to reference this mechanism. whatever it is. in a future commit to pass buffers in for other operators that take images.,negative
cssinjs/jss,karma,2015-10-21T23:13:21Z,rewrite tests. - mocha + expect.js- karma + chrome- runnable html file- codeship- browserstack. see react-router,neutral
cssinjs/jss,karma,2015-11-12T16:58:58Z,done,neutral
twitter/cli-guide.js,jasmine,2015-05-26T04:07:53Z,travis ci integration. i would like to add travis ci for run jasmine test.,neutral
bbc/bbc-a11y,standard,2016-11-04T08:28:49Z,summarise coverage of each standard. it would be helpful to summarise what is covered wrt each standard. without having to dig into the cucumber scenarios. just something more terse.,positive
aksonov/react-native-router-flux,eslint,2016-09-30T12:14:28Z,alexicum thanks. could you fix eslint errors to pass circleci check?,positive
aksonov/react-native-router-flux,eslint,2016-09-30T14:17:50Z,aksonov fixed eslint errors. but tests failed: could you check what's wrong with them?,negative
photonstorm/phaser,jshint,2013-10-28T09:54:55Z,coding conventions and jshint. currently phaser's source code is a bit messy (imho) since there is no strict coding conventions. i will not dig into the source code to expose examples but here is some common issues:- line endings (some files contain crlf)- indentation (some files mix in tabs and spaces. variable tab lengths)- brackets position (same or next line)- etc...what about adding a linter such as codepainter or jshint to phaser's build in order to make the source code uniform between each files?,neutral
photonstorm/phaser,jshint,2013-10-28T10:02:17Z,:+1: +1 always worth doing,neutral
photonstorm/phaser,jshint,2013-10-28T10:11:55Z,eventually yes. but there are far more important things to be doing at the moment.,neutral
strongloop/strong-globalize,eslint,2016-01-06T04:57:43Z,you had trailing whitespace. but eslint doesn't check for that apparently. i thought it did. but yes. your eslint is fine.,positive
npm/npm,standard,2014-12-22T21:02:41Z,othiym23 i think having style standards would definitely be good and beneficial for future contributors and scaling. i look forward to seeing a discussion on such (i don't feel i should be apart of it since i have not contributed in any means to this project other than through usage of npm).  thank you for your input on this pr though.,neutral
npm/npm,standard,2015-01-03T22:38:22Z,i'd argue this should be opened again. at least for how the behaviour differs from windows for example. for what's essentially the same semantic (running global installs as admin).i have been using npm on windows for years. when i got my first macbook pro and installed node then tried to install my first global package i just halted.it should be standardized whether global packages are meant to be global within the same user profile (which makes most sense especially in hosted environments). or machine wide. this shouldn't change per os (or at least be documented in npm install or npm folders documentation sections).thanks a lot for reading this feedback. and for making npm in the first place.,negative
mishoo/UglifyJS2,uglify,2012-11-12T19:53:07Z,do the source map generated by uglify not work for you?,neutral
mishoo/UglifyJS2,uglify,2012-11-21T16:02:53Z,it might just work without `-f` actually. i've not tested.  it would be great if you could also deprecate the `uglify-js2` package in npm.  just run:```npm deprecate uglify-js2 "you can now install this using `npm install uglify-js -g`"```i would then suggest giving it about 6 months before unpublishing it completely:```npm unpublish uglify-js2```,positive
mishoo/UglifyJS2,uglify,2012-11-22T00:56:22Z,it just needs to be changed to `npm install uglify-js1 -g`,neutral
mishoo/UglifyJS2,uglify,2012-11-23T22:51:32Z,--wrap does not work without --export-all. output is:c:\webgl\node_modules\uglify-js\lib\ast.js:310                    to_export.foreach(function(sym){                              ^typeerror: cannot call method 'foreach' of undefined    at object.before (c:\webgl\node_modules\uglify-js\lib\ast.js:310:31)    at ast_node.transform (c:\webgl\node_modules\uglify-js\lib\transform.js:62:35)    at c:\webgl\node_modules\uglify-js\lib\transform.js:81:25    at doit (c:\webgl\node_modules\uglify-js\lib\utils.js:114:23)    at map (c:\webgl\node_modules\uglify-js\lib\utils.js:140:52)    at do_list (c:\webgl\node_modules\uglify-js\lib\transform.js:80:16)    at c:\webgl\node_modules\uglify-js\lib\transform.js:169:21    at ast_node.transform (c:\webgl\node_modules\uglify-js\lib\transform.js:66:21)    at c:\webgl\node_modules\uglify-js\lib\transform.js:173:43    at ast_node.transform (c:\webgl\node_modules\uglify-js\lib\transform.js:66:21),negative
mishoo/UglifyJS2,uglify,2012-11-25T17:04:32Z,food for thought. i upgraded to v2 on accident on an old project and wasted an hour because i was looking at examples from the v1 github page. luckily i read the readme closely and found the right thing to do. for an hour i had no idea why require("uglify-js").parser was returning nothing,negative
mishoo/UglifyJS2,uglify,2012-11-25T19:48:41Z,yeh. i think that argues in favour of merging the github repositories.  you could also provide helpful warning messages when people call methods from the old uglify-us.,positive
mishoo/UglifyJS2,uglify,2012-11-25T21:01:05Z,> you could also provide helpful warning messages when people call methods from the old uglify-usthis seems completely reasonable and easy to implement. would have saved me a fair amount of time if there were a helpful message printed or error thrown with the correct message when i called .parser,positive
mishoo/UglifyJS2,uglify,2012-11-28T16:24:56Z,i can't get it to work. after runningnpm install uglify-jswith no errors. as well as jbudone 's suggestion. i still get-bash: uglifyjs: command not found,negative
mishoo/UglifyJS2,uglify,2012-11-29T09:25:35Z,it's not absolutely required to pass `-`. for example this should work:``` shcat script.js | uglifyjs -cm```,neutral
mishoo/UglifyJS2,uglify,2012-11-29T10:06:28Z,ajkochanowicz jbudone execute `npm link` in the uglifyjs directory.,neutral
mishoo/UglifyJS2,uglify,2012-11-30T00:49:17Z,missing `continue`. ```$ cat t.jswhile (a) {  if (b) {    switch (true) {    case c():      d()    }    continue  }  f()}$ uglifyjs t.js -cbfor (;a; ) {    if (b) switch (!0) {      case c():        d();    }    f();}```,neutral
mishoo/UglifyJS2,uglify,2012-12-06T19:11:36Z,typeerror: property 'input' of object #<object> is not a function.... hi.i get the following error when trying to parse some js files:...node_modules\uglify-js\lib\parse.js:616s.token = s.input();typeerror: property 'input' of object #<object> is not a function,neutral
mochajs/mocha,mocha,2012-08-09T23:48:56Z,i would vote against tap personally. and just use json. _but_ either way this would be a nice feature because not only can we decouple but it makes outputting multiple reports (cov. markdown etc) in parallel really simple since you can just `tee` to a few pipes,negative
mochajs/mocha,mocha,2012-08-10T03:19:40Z,+1 for json format as it is easier to consume.,neutral
mochajs/mocha,mocha,2012-08-10T14:11:40Z,+1 for json. if you want tap you can just do `mocha --spec tap` which would load the `mocha-tap` reporter.  this could work a bit like consolidate where you have to install the relevant reporter in order to use it. but can then use it simply as `mocha --spec reporter`,neutral
mochajs/mocha,mocha,2012-08-10T18:54:37Z,another nice thing with this is that we could easily combine output. right now for example in express i have two make targets. `test-unit` and `test-acceptance`. and they output separate reports. that's not the end of the world but it would be nice to pipe these together and funnel into a single report,neutral
mochajs/mocha,mocha,2012-08-10T20:18:29Z,:+1: for me. running dozens of tests in separate processes. would love consolidated reporting for them.,positive
mochajs/mocha,mocha,2012-08-10T22:28:30Z,we basically just need a flag to tell mocha to defer. then you will manually do `mocha.run()` at some point,neutral
mochajs/mocha,mocha,2012-08-15T16:00:19Z,alright.  i just saw above where visionmedia said a merge was forthcoming. so i assumed that was still the case.  for a userland reporter like this. should it just be released as a standalone reporter npm module?  also. how does it plug in to mocha as an available reporter?  is this a built-in api?  i'm new to mocha...but i love me some jenkins graphs :),positive
mochajs/mocha,mocha,2012-08-15T16:04:31Z,via something like:```npm install junit-reportermocha --reporter junit-reporter```,neutral
mochajs/mocha,mocha,2012-08-15T16:05:47Z,surely that should be called junit-reporter-mocha or something?  but yeah. i get it.  i'll try to extract the reporter from this pull request for my personal use. but won't publish or anything because it's jon077's to publish :),neutral
mochajs/mocha,mocha,2012-08-15T16:09:06Z,doesn't have to have `-mocha` in the name. eventually (we have an issue open for this) we'd like to have all these reporters just consume the json stream. so then they're completely decoupled from mocha,neutral
mochajs/mocha,mocha,2012-08-18T16:55:48Z,hmm did you update mocha itself?,neutral
mochajs/mocha,mocha,2012-08-18T17:12:59Z,using mocha with require('mocha'). i'd like to use mocha this way:```var mocha = require( 'mocha' );// run tests in a specific path```but i haven't found any documentation about using mocha this way.i `console.log`'ed `require( 'mocha' )`. but i couldn't really see what was what.,neutral
mochajs/mocha,mocha,2012-08-18T20:55:06Z,indeed. docs are lacking :-)thanks for the link! i'll look into this. but it looks like good.about the doc. is there a way i can contribute?,positive
mochajs/mocha,mocha,2012-08-19T00:55:52Z,great! thanks man,positive
mochajs/mocha,mocha,2012-08-19T09:09:48Z,you're welcome! i didn't add this page to the wiki home page though. i thought you wanted to review it before doing that.,positive
mochajs/mocha,mocha,2012-08-19T17:52:47Z,meh yeah i'd rather keep stuff like that out of mocha personally. the mocking / stubbing stuff can easily be third-party,positive
mochajs/mocha,mocha,2012-08-22T09:56:23Z,mocha can't handle hanging code. if you monitor with:mocha --ui exports --reporter min --watchand the code hangs. mocha shows a confusing blank screenif you press ctrl-c (linux) the terminal is messed up (no cursor. weird colors)and mocha leaves behind a zombie process still running your buggy code.,neutral
mochajs/mocha,mocha,2012-08-22T16:09:38Z,yeah i'd like to have this too. at least as a default (so i can still get those callsites if it really is a mocha bug)+1,negative
mochajs/mocha,mocha,2012-08-22T17:22:30Z,have you tried using a mocha.opts file instead of command line params?  mocha.opts goes into your 'test' folder. text file with the following format:--reporter teamcity--ui bddfor command line options in teamcity. make sure you put just 'node_modules/.bin/mocha' as the 'command executable' and place the rest of '--ui bdd --reporter teamcity' as 'command parameters',neutral
mochajs/mocha,mocha,2012-08-22T21:41:44Z,polyfills are no good. that's not the right way to go with mocha. mocha shouldn't influence the env,neutral
mochajs/mocha,mocha,2012-08-23T10:31:21Z,makes the ui pluggable alongside reporters. see readme in tests. it's rather straightforward. need it for scones (bit like mocha-cakes but is a ui),positive
mochajs/mocha,mocha,2012-08-23T11:03:40Z,+1we often have to mock libraries that are required by requirejs and it adds a considerable amount of overhead to the tests. while we'll ideally find a way to optimize this. it's not a high priority and we honestly don't care that much if the tests run for 50-100 ms each. being able to suppress the warnings for these specific tests would be nice.,positive
mochajs/mocha,mocha,2012-08-24T17:47:38Z,not sure i follow. if there were no exceptions caught by mocha then it should just display them as passing,neutral
mochajs/mocha,mocha,2012-08-24T21:17:37Z,make mocha runnable in an iframe. for konacha. we'd love to be able to run mocha inside an iframe. andhave the report rendered in the top-level frame. here is anillustration: actually have this working in my konacha working copy. and it's reallycool and useful. but it needs just a little help from mocha's side towork. this commit makes two small changes:- make the root element for the html reporter parameterizable. (the  default is still #mocha.)- do not repeat the current path in the ?grep urls. it's redundant. and  it messes up the path with an iframe setup like we're trying to do.there are no functional changes on mocha's end.---please merge this? it'd be super-awesome!,positive
mochajs/mocha,mocha,2012-08-25T11:02:29Z,more generally. are you happy for the principles of the pull request? i do think that in the longer term it would be useful to have a way to get the current mocha instance from any code currently running. as it'd remove the need for a ui for anything that is happy dealing with the suite api itself. not sure if it is acceptable in js (globals are bad right?) but it'd remove the need for uis alltogether.,negative
mochajs/mocha,mocha,2012-08-26T15:52:02Z,so. we will not ever be able to test amd modules with mocha? i just started looking at mocha. and can't find how i can test my amd requirejs (coffee) code... it's frustrating when you think you have found the right tool. but then it doesn't support your configuration... require.js is the standard nowadays for the browser. we need mocha to support it +10,negative
mochajs/mocha,mocha,2012-08-27T09:15:59Z,handle require failures otherwise crashing mocha. on launch. when mocha loads the test files. the whole process crashes if there is a syntax error in any of the fileshere we prevent that by wrapping require in a try-catch. if the require throws an exception. a fake test called loadfail is created that throws the exception at a later time when mocha can handle it.such failure are then presented as any other test failuresawesomeness!this is the fix for #547,neutral
mochajs/mocha,mocha,2012-08-30T22:49:41Z,i'd hardly call require.js a standard at all. but i would like to add the ability for mocha to defer execution. mostly for the browser but that will help this case as well,neutral
mochajs/mocha,mocha,2012-09-01T22:46:57Z,not mocha,neutral
mochajs/mocha,mocha,2012-09-03T19:34:42Z,relay signals from the "_mocha" process to the main "mocha" bin. this makes is so that if your test case cases node to crash with a sigsegvor sigbus for example. than "mocha" will have a proper exit code (instead of 0).,neutral
mochajs/mocha,mocha,2012-09-05T03:49:39Z,yeah. same problem  here. not just  `mocha test/*.coffee` . `mocha test/` also fails.  seems the problem doesn't come from how \* is interpreted by mocha,negative
mochajs/mocha,mocha,2012-09-05T03:57:26Z,`mocha tests/*.js` is globbing. that's a shell feature not mocha,neutral
mochajs/mocha,mocha,2012-09-06T15:04:32Z,include a js file?. hi does mocha only supports module loading with node?can it be use just for testing a single js fileeg: ```human.js    that returns a  h = new human( name )test.js          it  'should return some names'. ->  h.name```,neutral
mochajs/mocha,mocha,2012-09-06T15:55:21Z,i dont understand the question,neutral
mochajs/mocha,mocha,2012-09-06T15:58:13Z,sorry. my own fault. didnt realise that chai need to be install within the test folder for it to work. was installed it globally,neutral
mochajs/mocha,mocha,2012-09-07T04:40:53Z,how to run requirejs modules with mocha tests in terminal. on a tutorial. just source the file and create a namespace and we can run mocha on that test file like so {tasklist. task} = require '../task'    but with requirejs. all the files are wrapped within define(['some script']. function('come callback') {} )how do i require and test the stuff within the define function of that module? inside the terminal,positive
dondi/GRNsight,mocha,2017-06-05T03:59:50Z,a partial solution to this is covered by #326. the automated client-side test generator that eileenchoe has written.  i'm going to label this with "backlog" and close for now.,neutral
teerapap/grunt-protractor-runner,selenium,2014-08-04T20:01:33Z,breaks protractor sharding. does the runner support protractor sharding?  i'm seeing a semi-frequent (50%+) instances where even with one "shard". the protractor tests fail to ever exit because they're detecting a remaining webdriver instance. even after logging that it was shutting down the remaining instanceshutting down selenium standalone server.[launcher] 1 instance(s) of webdriver still runningshutting down selenium standalone server.[launcher] 1 instance(s) of webdriver still runningplease let me know what additional information you'd need,negative
teerapap/grunt-protractor-runner,selenium,2014-08-07T14:53:13Z,hankduan says that a recent fix (#1167 for angular/protractor) could/should fix the sharding issue.  i'll have to wait until they merge it to master before i can renable sharding and validate it.,neutral
karma-runner/karma-sauce-launcher,sauce,2013-09-13T13:14:41Z,add a 'saucelabs' reporter to report pass/fail status.. add a new reporter to report pass/fail status for each browser on saucelabs (see #10) .to enable this. add 'saucelabs' to the reporters in the config file.the only change to the actual launcher is to expose the job id's and credentials to the reporter.,neutral
karma-runner/karma-sauce-launcher,karma,2013-10-02T00:14:05Z,slow shutdown. in several builds on travis i see the exit after "info [launcher.sauce]: shutting down sauce connect" takes 2-3 minutes. i'm not sure whether this is a karma or sauce connect launcher problem.do you have any idea? browsers used are ff 20 (win 8). ie 10 (win 8) and chrome (linux),negative
felixrieseberg/ember-electron,eslint,2017-02-23T15:14:47Z,i totally agree. and was planning to do this myself once i finish with #120. but am happy to see someone else do it as well :)i think we should use a nice simple `eslint:recommended` rule set. that's what ember uses. although it adds a couple more rules that i'm not sure we want to enable. also there will probably be some fiddling because of our node code.those are my thoughts.,neutral
AnalyticalGraphicsInc/cesium,eslint,2017-05-24T19:03:40Z,emackey i'm going to push webstorm config changes. is there anything we need to do for vscode here?  i know they have an eslint plugin.,neutral
AnalyticalGraphicsInc/cesium,eslint,2017-05-24T19:56:38Z,mramato i switched to vscode as well.  and yes. there's a eslint extension that should be mentioned instead of the jshint one.,neutral
AnalyticalGraphicsInc/cesium,eslint,2017-05-24T20:45:11Z,the eslint rule `"semi"` (missing semicolons) is not on by default.  the cesium repo passes with this rule enabled. should we explicitly enable it?i'm looking at vscode now.,neutral
AnalyticalGraphicsInc/cesium,eslint,2017-05-24T21:02:48Z,> the eslint rule "semi" (missing semicolons) is not on by default. the cesium repo passes with this rule enabled. should we explicitly enable it?i would think so.  we definitely want the eslint to match our old rules as close as possible.  good catch.  we'll have to keep an eye out for this kind of stuff even after merge to make sure we haven't missing anything.we'll also need to evaluate some brand new rules now that we have the capability (such as whitespace and formatting).  this will happen post merge of course.,positive
AnalyticalGraphicsInc/cesium,eslint,2017-05-24T21:53:16Z,i added `"semi"`. updated vscode and removed eclipse.mramato sandcastle still uses jshint at runtime to scan examples that are loaded into the browser.  this means the build is scanning them with eslint but the runtime displays them with jshint warnings.  not ideal but it may take some effort to replace the runtime system with eslint.  not sure if that needs to be in scope for this pr.,neutral
AnalyticalGraphicsInc/cesium,eslint,2017-05-24T22:33:30Z,mramato adding fix is essentially a "one line" and might look like:```jsgulp.task('eslint-fix'. ['build']. function() {    return gulp.src(eslintfiles)        .pipe(eslint({fix: true))        .pipe(eslint.format())        .pipe(gulp.dest('.'));});```i am not too familiar with this sort of thing using gulp streams (super easy with something like grunt). but it seems to me that the above will be somewhat annoying for a project of this scale. i apologize for bringing it up without testing (i assumed i could implement it as easy as i have done in other circumstances),positive
AnalyticalGraphicsInc/cesium,eslint,2017-05-25T20:44:37Z,thanks again jhwohlgemuth!  i submitted some minor tweaks but as soon as travis passes we'll merge this.i encourage everyone to check out eslint rules and think of anything code style or formatting-wise you would like us to enforce in cesium.  i already have my eye on trailing whitespace and blank lines; but i'm sure there's a ton more.,positive
AnalyticalGraphicsInc/cesium,eslint,2017-05-25T21:52:56Z,investigate eslint auto-fix. eslint has the ability to automatically fix problems.  at the very least we should add a manual gulp task for fixing problems.  if it's foolproof and fast. we can even consider it happening automatically at commit time.,positive
AnalyticalGraphicsInc/cesium,eslint,2017-05-26T13:30:10Z,fix eslint in 3d-tiles branch,neutral
AnalyticalGraphicsInc/cesium,eslint,2017-05-26T21:32:46Z,since the original intent of this pr was to fix the eslint errors in `3d-tiles` (which is currently broken). i'm going to merge it as-is.  we'll address the other two comments as part of the `3d-tiles` pr.thanks hpinkos!,negative
AnalyticalGraphicsInc/cesium,eslint,2017-06-09T17:57:40Z,bump.i'm not entirely sure how `peerdependencies` work. for example. if a user references `cesium/browser`. they need to have `eslint-plugin-html` installed. right?i've assumed that is the case and added it to `readme.md`. if i'm wrong let me know!,negative
AnalyticalGraphicsInc/cesium,eslint,2017-06-09T18:33:14Z,omh1280 i know we talked a little bit about that link offline. but always provide some contents to posts like that so other developers (or ourselves in the future) have the required context for it.  cesium is developed out in the open.also. i think the easy solution in this case is to run eslint via a child process instead of through gulp. then we can use the cache argument.  look at `generatedocumentation` in the gulpfile for an example.,neutral
AnalyticalGraphicsInc/cesium,eslint,2017-06-12T13:08:06Z,> i've assumed that is the case and added it to readme.md. if i'm wrong let me know!can't we just have `eslint-plugin-html` be a dependency of `eslint-config-cesium`?  i think that will work.,negative
AnalyticalGraphicsInc/cesium,eslint,2017-06-15T22:24:04Z,my pre-push idea is failed. `eslint --fix` causes some unstaged changes which blocks push. i added a new gulp task (eslint-fix) but i will replace it with eslint cli according to #5449 .i am still unsettled about pre-commit. after evaluting eslint cli with --cache i will decide.,negative
AnalyticalGraphicsInc/cesium,eslint,2017-06-15T22:56:35Z,mramato i put these in cesium's `.eslintrc.json`. should they go in the shareable config instead?,neutral
AnalyticalGraphicsInc/cesium,eslint,2017-06-19T15:24:05Z,lilleyse is writing up issues for any remaining task items that we agreed to do post merge.there are a bunch of `eslint` errors when merging master. so i'll fix them in this branch and then merge up.,negative
AnalyticalGraphicsInc/cesium,eslint,2017-06-19T17:14:21Z,thanks for looking into this ateshuseyin.  after some unrelated changes. running with `--fix` is as easy as running `npm run eslint --fix`.  i think running fix automatically is really worth it (since it can't fix everything) and most of the time devs will just manually fix one or two issues.i think where `--fix` comes in very useful is in adding new rules. which is a rare occurrence.long story short. i'm closing this issue.  thanks again ateshuseyin.,positive
AnalyticalGraphicsInc/cesium,eslint,2017-06-19T17:22:18Z,do you mean add a `/*eslint-disable no-implicit-globals*/` at the top of `speclist.js`? is there a way to disable `.gitignore` for one commit?,negative
AnalyticalGraphicsInc/cesium,eslint,2017-06-19T17:24:20Z,> do you mean add a /*eslint-disable no-implicit-globals*/ at the top of speclist.js? is there a way to disable .gitignore for one commit?sorry. i should have been more clear.  what i meant is to modify the `createspeclist` function in `gulpfile.js`. which is where `speclist.js` gets generated.,negative
AnalyticalGraphicsInc/cesium,eslint,2017-06-19T18:38:59Z,mramato can you prioritize this? the glob change means that the eslint tests aren't running on travis,neutral
AnalyticalGraphicsInc/cesium,eslint,2017-06-19T18:43:58Z,fix eslint glob. fix eslint glob issue. which prevented eslint from expanding globs and instead left it up to the os.mramato please merge soon!,positive
AnalyticalGraphicsInc/cesium,eslint,2017-06-19T18:46:48Z,thanks.looks like this worked on windows by not other systems (because of wildcard expansion). your change should work everywhere.,neutral
xtuple/xtuple-extensions,mocha,2013-08-02T18:48:19Z,updated tutorial per new mocha conventions,neutral
alfa-laboratory/arui-presets,eslint,2017-05-26T09:16:40Z,fix(babel): add default settings for transform-runtime-plugin. к сожалению полифилы и хелперы из transform-runtime ломают тесты в некоторых кейсах. как это починить пока не понял. поэтому временно выключаю эти фичи.плюс более жестко фиксирую версии eslint и tslint. так как с `^` иногда прилетают ломающие изменения,neutral
alfa-laboratory/arui-presets,eslint,2017-05-26T09:19:31Z,heymdall в каких кейсах что ломается? хорошо бы понимать в чем дело),neutral
alfa-laboratory/arui-presets,eslint,2017-05-26T09:56:25Z,если сейчас в либе попробовать запустить тесты - они не будут работать) ну и с babel-jest тож глючит. почему - я не понял. инфы мало. надо копать. но пока чтоб людям не прилетали ошибки - временное решение.,neutral
walmartlabs/eslint-config-defaults,eslint,2015-07-06T01:39:34Z,true. that makes sense. i just hope that there are enough complete config options that a typical eslintrc file only has a few lines in it. anyway. it's done and in develop. it'll go out when i finish the react plugin stuff this week.,positive
walmartlabs/eslint-config-defaults,eslint,2015-07-06T07:52:09Z,validate all configurations with eslint. along with #11 . we should import all configs individually with eslint to allow it to throw errors on anything incorrect for all files potentially importable directly.,neutral
walmartlabs/eslint-config-defaults,eslint,2015-07-06T07:57:46Z,replace lodash merge with actual `eslint`'s `util.mergeconfig` via `extends`.. there are some subtle differences with how eslint `extend`'s configs vs. a brute force `_.merge()`. (e.g.. `plugins` are special-cased and handled differently than normal keys).we should look to use eslint's first class `extends` + under-the-hood `mergeconfig`. especially once eslint comes in as a `devdependency` so that we don't accidentally queue up subtle merge bugs later (wherein composed configurations here would behave differently than library uses doing `extends` of the same underlying configs manually).,negative
walmartlabs/eslint-config-defaults,eslint,2015-07-28T18:46:59Z,bring config up to newest eslint and eslint-react,neutral
walmartlabs/eslint-config-defaults,eslint,2015-07-28T20:28:11Z,closed by 95eb4d612c748a2a503873a41bd3bef81810856b,neutral
react-boilerplate/react-boilerplate,eslint,2015-12-17T13:40:26Z,find and remove all eslint errors. there are a lot of `eslint` errors all around. should find and remove them.,negative
libp2p/js-libp2p-crypto,mocha,2017-01-20T18:19:31Z,there we go :) it should still be hitting all the same code paths in this module. since i'm only testing the marshal / unmarshal and generatekeypair functions from index.js.  everything else was just duplicating tests from the libp2p-crypto-secp256k1 module anyway. so no loss there.btw. i ended up not using rewire. since it wouldn't let me modify the `const keys` in index.js - instead i'm just modifying the object directly in the `before` and `after` for the test.  since mocha tests are run sequentially this seems safe enough. but i could switch to rewire and change `keys` to be `let` instead of `const` if you'd prefer.,negative
NetsBlox/NetsBlox,codeclimate,2017-06-06T09:35:00Z,can you check out the todo's caught by codeclimate?,neutral
tildeio/htmlbars,sauce,2014-06-20T16:09:39Z,nkgm we are! the first column on the trello board is for community todos. the most approachable are:- get the compiler tests (this repo) passing in all browsers. find out how far back we can push the compatibility with older browsers. (ie6?) maybe setup saucelabs.- build htmlbars template compiler tasks for the various build systems: broccoli. grunt. gulp. brunch. etc.,neutral
vvo/selenium-standalone,selenium,2014-03-10T16:00:15Z,starting selenium server fails with obscure error when java is not installed. when trying to run selenium before installing java the following output is generated when starting selenium:```> var selenium = require('selenium-standalone');> var server = selenium();> execvp(): no such file or directoryevents.js:72        throw er; // unhandled 'error' event              ^error: spawn enoent    at errnoexception (child_process.js:988:11)    at process.childprocess._handle.onexit (child_process.js:779:34)```after installing java on the machine the above code runs just fine. although it probably isn't feasible to install java from npm. a nice warning when trying to require or start selenium without java installed might be warranted.,negative
mozilla/scanjs,mocha,2014-03-20T11:39:09Z,we can check disable the current csp policy for tests without breakage. if we move the mocha.run. mocha.setup bits into a separate js file. closing this one out.,neutral
nathanboktae/mocha-phantomjs,mocha,2015-01-14T01:35:56Z,```phantomjs --remote-debugger-port=9000 lib/mocha-phantomjs.coffee <your tests> <reporter> <config as json>```,neutral
nathanboktae/mocha-phantomjs,mocha,2015-01-15T20:14:07Z,mocha-phantomjs runs in phantomjs. not node. also you're giving example code from something not `mocha-phantomjs` but i'm guessing some wrapper around it for a node.js build system like grunt or gulp. `config` is hydrated by code running in phantomjs from json passed in the command line.,neutral
nathanboktae/mocha-phantomjs,mocha,2015-01-17T20:04:24Z,add documentation for coverage. awesome package! i've been in javascript testing hell for the past week or so. long story short i wrote my first javascript package and i'm trying to get it hooked into travis and coveralls. i was able to use mocha from the cli but i couldn't cover anything that used jquery in my code. if i went to a browser based solution i couldn't run from the cli. enter mocha-phantomjs. it's exactly what i needed. i'm having trouble figuring out how i can hook into blanket or istanbul though to produce coverage info for coveralls. i'd like to lend a hand and help out here. i'm going to dig in and try and figure out how to incorporate them but i'd appreciate any advice if someone has already solved this problem.,negative
nathanboktae/mocha-phantomjs,mocha,2015-01-26T00:21:25Z,i doubt you're seeing the issue due to your self signed cert. ever since poodle. people have been disabling ssl entirely. and phantomjs' default is to only use ssl v3  :( so the solution is to use  `--ssl-protocol=any`. we should likely append this by default.right now to pass in phantomjs params is to call phantomjs directly:```phantomjs --ssl-protocol=any lib/mocha-phantomjs.coffee <page> <reporter> <config-as-json>```we should. however. just pass through phantomjs options like casperjs does.,negative
nathanboktae/mocha-phantomjs,mocha,2015-01-26T18:23:10Z,update mocha links with new repository and site.. the mocha site now lives at . i replaced all the visionmedia links with the new ones.,neutral
linkedin/dustjs-helpers,jasmine,2012-08-27T21:16:50Z,updated readme to install node dependencies properly. previously the readme suggested installing jasmine globally (frowned upon) and didn't cover installing dustjs-linkedin at all (which of course would in turn break tests). this is what package.json is for - no need to list the dependencies again in the readme. runing npm install in the project directory takes care of all things,negative
linkedin/dustjs-helpers,jasmine,2012-08-27T22:02:51Z,thanks zzen,positive
socketio/engine.io,eslint,2017-04-05T21:46:07Z,bump dependencies. `eslint` upgrade needs a bit more work.,neutral
marionettejs/backbone.marionette,jasmine,2012-09-07T13:37:44Z,oh. also - we're going to be changing the specs over to jsoverson's grunt-jasmine-runner soon. so you won't need ruby to run the specs.,neutral
dollarshaveclub/ember-uni-form,eslint,2017-02-08T14:41:33Z,fastboot compat + eslint,neutral
open-xml-templating/docxtemplater,sauce,2017-03-22T11:31:45Z,maybe browserstack or saucelabs could sponsor,neutral
cucumber/cucumber-js,mocha,2016-07-08T08:21:50Z,the pretty formatter should use symbols to show status. currenty the pretty formatter use only colors to show the status of a step (passed. failed. skipped. etc.)but with option --no-colors option we cannot know the status any more.pretty formatter should use dedicated symbols like "✓"  "✖" "-" before each step log to avoid this problem. (like mochajs does for example),neutral
cucumber/cucumber-js,jshint,2014-09-13T13:26:33Z,the-simian - is it possible for you to cherry pick and commit your .jshintrc file.,neutral
vector-im/riot-web,standard,2016-02-18T17:50:21Z,the rooms order is not refreshed after sending some messages. steps to reproduce1 - in the rooms list ("standard" ones)room aroom broom c2- i send a message to the room bthe message is properly received but the rooms order is not updatedthe room b should move up because the latest message is more recent3- i refresh the webpagethe rooms order is still invalid.,negative
vector-im/riot-web,standard,2016-02-19T01:56:45Z,dup #816,neutral
cloudchen/grunt-template-jasmine-requirejs,jasmine,2013-08-07T06:45:17Z,thanks. i had write a jasmine test task name parse_test in gruntfile.js. maybe you can try it.,positive
cloudchen/grunt-template-jasmine-requirejs,jasmine,2013-08-08T09:29:30Z,thanks for the reply reinseth. unfortunately this does not work for me as i'm not planning on loading knockout via requirejs. i load it up front in order to register ko as a global namespace. hence i'll get the "ko is undefined" error when trying your approach. the real solution imo is to allow vendor scripts to be loaded in prior to executing your tests. independently from requirejs.,negative
cloudchen/grunt-template-jasmine-requirejs,jasmine,2013-08-08T11:17:59Z,hole in template for html. hi.there might be better ways to achieve what i want but here goes. i am using your template and it rocks. however. i would like to testing my backbone views using the html that the views are responsible for. i don't really want to duplicate the html code as i think there is value in testing the views with their html file dependencies. in order for me to get the views to attach to the dom when they are created i need to have the spec runner decorated with the required elements. i have modified the template supplied with the grunt task to have a hole i can (before each test) attach elements needed for the view under test.i dont like modifying the template as it now takes me somewhat off the upgrade path for the task.so my suggestion would be to have an option or something for a hole in the template where a user can attach html. there is the body tag but that gets smashed with jasmine elements and is no longer a sandbox for application html (if that makes sense).what do you think?,neutral
cloudchen/grunt-template-jasmine-requirejs,jasmine,2013-08-12T03:10:45Z,awesome. that's the best way for all scenarios since it's order independent.whenever you put knockout reference before or after requirejs. it works either way.,positive
cloudchen/grunt-template-jasmine-requirejs,jasmine,2013-08-12T09:04:31Z,yes. using the callback works! thanks a lot for your time and answers!,positive
appium/appium,selenium,2013-12-11T23:26:45Z,ran the above mentioned commands but still getting the same error :( do i need to start selenium server or chrome driver separately apart from appium?,negative
appium/appium,selenium,2013-12-13T09:29:27Z,no way to swipe for picker wheel with appium selenium webdriver. hi.i tried selecting values from a picker wheel. which has three different value.let me know some way to work with picker wheel(swipe).thanks a lot.it would be really great.,positive
appium/appium,selenium,2013-12-18T01:43:33Z,politely informs user that mobile commands don't work in selenium. as per #1637,neutral
appium/appium,selenium,2013-12-18T10:09:12Z,thanks  jlipps for the information. here comes a new issue. i tried below code  element = findelement(by);touchactions swipe = new touchactions(remotewebdriver).flick(element. -100. 0. 0);swipe.perform();but it is throwing classcastexceptionjava.lang.classcastexception: org.openqa.selenium.remote.remotewebdriver cannotbe cast to org.openqa.selenium.interactions.hastouchscreen        at org.openqa.selenium.interactions.touch.touchactions.<init>(touchactions.java:37),positive
appium/appium,sauce,2013-10-09T17:38:51Z,i'm seeing tons of missing module errors when running test.sh. i fix one and then another shows up. shouldn't reset.sh have installed these?```module.js:340    throw err;          ^error: cannot find module 'saucelabs'``````module.js:340    throw err;          ^error: cannot find module 'should'``````module.js:340    throw err;          ^error: cannot find module 'socket.io-client'```,negative
appium/appium,jshint,2013-10-04T17:55:07Z,> running "jshint:all" (jshint) task> linting app/android.js...error> [l701:c66] 'localfile' is not defined.>       cmd = this.adb.adbcmd + ' pull /sdcard/screenshot.png "' + localfile + '"';,negative
jhipster/generator-jhipster,karma,2016-08-03T06:45:12Z,is it the same when running `gulp test`? i've never used karma directly. i don't know if there's a difference.,neutral
jhipster/generator-jhipster,karma,2016-08-03T07:10:25Z,yes it is the same.i uses karma directly to try and debug it. no luck at all.> on aug 2. 2016. at 11:45 pm. julien dubois notificationsgithub.com wrote:> > is it the same when running gulp test? i've never used karma directly. i don't know if there's a difference.> > —> you are receiving this because you authored the thread.> reply to this email directly. view it on github. or mute the thread.,negative
jashkenas/underscore,karma,2014-09-03T17:18:43Z,refactor collection nodelist tests. need this for karma integration,neutral
yahoo/mojito,selenium,2012-07-25T06:17:41Z,hi lichun.i don't think we should be adding shell scripts to the mojito codebase. something like$ mojito arrow -type [unit|functional] [-seleniumhost hostname] ...makes more sense. because it will scale much better than a collection of scripts. the config should not always have to be on the command line. but also be storable in a config file. such as arrow.json. it should be similar to how mojito docs and mojito test works. so that you can run arrow tests using the mojito command for the framework. a full app or a single mojit. in order for more cocktails projects to adopt arrow. we should integrate it with mojito. otherwise it is less appealing than mojito test. which showed th way to go with respect to how tests are an integral part of the framework and the apps we develop.let me know if you need help implementing a new command mojito arrow. i have already worked on that part of he codebase.fabian,positive
yahoo/mojito,selenium,2012-07-25T17:09:46Z,note. this pr as it's non-functional right now.. background: it's a helper script for jenkins only. fabian. we're not sure about making arrow/selenium/phantomjs a mojito devdependency or not. but i like your implication of adding it as an optional module mojito-cli-cmd-arrow style. comments/input welcome,positive
agda/agda-stdlib,standard,2017-06-22T22:20:43Z,this is on my list of things to push to the standard library soon.,neutral
agda/agda-stdlib,standard,2017-06-26T14:51:53Z,so off the top of my head i'm struggling to come up with a generalised `zipwith-n` function which is both sufficiently general and easy to reason about. do you have such an implementation?i don't think `zip3with` is common or useful enough to warrant being included in the standard library.,negative
agda/agda-stdlib,standard,2017-06-26T15:46:02Z,altering the `algebra` hierarchy so that it is parametrised by the carrier set would be an enormous change to how the standard library currently works and would cause _significant_ backwards compatibility issues with a large percentage of users.given this and the fact that the standard library does not currently make use of instance arguments. i'm afraid this looks unlikely to ever happen.,negative
agda/agda-stdlib,standard,2017-06-27T14:00:36Z,a "safe" subsection of the library. as discussed in #122 it is currently impossible to typecheck a development relying on the standard library with the --safe option because it does not isolate properly its uses of unsafe features.the agreed upon course of action is that there will be a safe.* subset of modules. the current module names will be kept the same and will re-export exactly what they currently contain. ensuring full backwards compatibility whilst making it possible to only rely on the subset that is recognised as being safe by agda.,positive
agda/agda-stdlib,standard,2017-06-27T15:20:31Z,thank you for your pull request. sorry it's taken so long to get back to you! `data.fin.properties.subset` has undergone a several changes. including the style of how the proofs are scoped. given the small size and the age of your pull request. i thought it easier to simply add in your proofs manually rather than make you go to the effort of going back and rewriting them in the new style.the lemma will be available in the next release of the standard library.,positive
agda/agda-stdlib,standard,2017-06-28T09:51:34Z,> there are notions like "monomorhism". "monomial" . mono-this. mono-that ...but none of them are relevant to `data.nat`. i think that context is key. for example there are at least 5 different `_+_` defined in the standard library but you know which one you are referring to in each instance by the module imports. similarly no one is going to think that something of the form `+-mono-<` refers to monomorphisms or monomials.ultimately i think the justification for this change is not strong enough to warrant the backwards compatibility issues it would introduce.> generally. uniformity is desirable. i agree. we will try and rename `_+-mono_` and `_*-mono_` to `+-mono-≤` and `*-mono-≤` respectively.,negative
agda/agda-stdlib,standard,2017-06-28T10:45:42Z,on wed. 2017-06-28 at 02:51 -0700. matthewdaggitt wrote:>         there are notions like "monomorhism". "monomial" . mono-this.>         mono-that ...>         > > but none of them are relevant to data.nat. i feel that context is key.> for example there are at least 5 different _+_ defined in the standard> library but you know which one they refer to by the module imports.> similarly no one is going to think that something of the form +-mono-<> refers to monomorphisms or monomials.formally. this is so.> ultimately i think the justification for this change is not strong> enough to warrant the backwards compatibility issues it would> introduce.agda  is not currently stable enough to care much for backwardscompatibility. the developers admit this.but it needs to care -- a bit.so that i do not care much about this "monot" affair. ------sergei>         generally. uniformity is desirable.>         > > i agree. we will try and rename _+-mono_ and _*-mono_ to +-mono-≤ and> *-mono-≤ respectively.> > —> you are receiving this because you authored the thread.> reply to this email directly. view it on github. or mute the thread.> >,negative
agda/agda-stdlib,standard,2017-06-28T16:46:49Z,i quite like the idea of `.examples` modules but in this particular case these examples are demonstrating features of the agda language. not features of the standard library (the first one doesn't even have a dependency on the library!). surely they should live elsewhere?,neutral
agda/agda-stdlib,standard,2017-06-29T09:17:45Z,right. general examples could go into readme. specific ones into a `.examples` module.examples for the agda language should not go into the standard library. but in the agda documentation.  however. maybe cartazio meant that the standard library does not make use of copatterns and maybe should.,neutral
agda/agda-stdlib,standard,2017-06-29T11:29:52Z,> but for the purpose of having a xorring where xor is defined more efficiently than by> ```xor x y = (x ∨ y) ∧ ¬ (x ∧ y)```> this pattern is useful.that's interesting! when you say "efficiently" what do you mean? efficient in terms of definition size? in type checking time? in execution time?> i see this as part of the tension between minimal interfaces for economy of reasoning. and maximal interfaces (including what otherwise would be derived definitions as axioms) for the purpose of enabling specialised implementations.i agree that there is definitely a trade-off and loc saving is certainly not desirable if it comes at the cost of usability. the library should be aiming to make users' lives as easy as possible!> in the places where i use this. i have a module containing default definitions. so that the new agda feature allowing record fields to be supplied by modules makes it cheap to to produce instances for the large interface by supplying definitions only for the small interface. and i consider the cost of additional fold/unfold proof steps inside the module with those additional parameters as tolerable. even though it is certainly a nuisance at the time of converting a derived definition into parameters.hypothetically. if i'm understanding you correctly. the `replace-addition` and `replace-multiplication` lemmas would be an alternative way of obtaining the same effect? all proofs would be done with the "standard" definition and then the "efficient" definition could be substituted in afterwards? (although i feel that if they don't have the same effect. the lemmas would still be useful to have anyway).i guess i'm just bemused about the fact that in the current configuration. despite the library having a whole module of proofs about it. the user doesn't actually have access to an definition of `xor`!,positive
agda/agda-stdlib,standard,2017-06-29T12:21:42Z,> when you say "efficiently" what do you mean? efficient in terms of definition size? in type checking time? in execution time?for my main use cases. this is efficient in terms of execution time.however. i can also imagine uses where reasoning about specialised instances becomes easier due to the non-derived definitions which are then directly visible (via definitional equality).> > in the places where i use this. i have a module containing default definitions. so that the new agda feature allowing record fields to be supplied by modules makes it cheap to to produce instances for the large interface by supplying definitions only for the small interface. and i consider the cost of additional fold/unfold proof steps inside the module with those additional parameters as tolerable. even though it is certainly a nuisance at the time of converting a derived definition into parameters.>> hypothetically. if i'm understanding you correctly. the `replace-addition` and `replace-multiplication` lemmas would be an alternative way of obtaining the same effect? all proofs would be done with the "standard" definition and then the "efficient" definition could be substituted in afterwards? (although i feel that if they don't have the same effect. the lemmas would still be useful to have anyway).in a fresh agda-stdlib clone.````sh $ grep replace- $(find . -name "*.agda")````only finds `replace-equality`. so i can only guess for `replace-addition` and `replace-multiplication`.i think that in general. these `replace-` lemmas would have the same effect for reasoning where definitional equality does not matter.however. where proofs are not irrelevant. which includes for typechecking. the adaptions-throughout in these `replace-` lemmas will have costs that matter. and where it's replacing operations. some derived operations might become or remain unexpectedly more expensive at run-time.but i agree that these `replace-` lemmas would still be useful to have anyway.> i guess i'm just bemused about the fact that in the current configuration. despite the library having a whole module of proofs about it. the user doesn't actually have access to an definition of `xor`!(before the record-fields-from-modules feature. i would probably have been hesitant to actually write something as simple as the `xor-default` definition you presumably have in mind. and from that perspective can understand its absence.),negative
agda/agda-stdlib,standard,2017-06-29T17:38:03Z,i think `all (\x → f x ≡ g x) xs` is preferable to `f ≗ g on xs` in the standard library.  (agda will expand it anyway in your proofs.),positive
agda/agda-stdlib,standard,2017-07-05T09:59:07Z,thank you for your contribution! it would be great if you could submit some of it as a pull request rather than a zip file. if you need any pointers on creating a pull request please feel free to ask!as for the ordering `x ≤ y = x < y ⊎ x ≡ y`. defining `_≤_` in terms of `_<_` is backwards with respect to the rest of the standard library. i'm reluctant to accept it as i feel its likely to cause confusions for users and further problems down the line. as i mentioned before. i'd be much more comfortable rewriting the implementation of `_<_` in terms of a new native `_≤_` relation.,positive
agda/agda-stdlib,standard,2017-07-09T11:26:25Z,> as for the ordering x ≤ y = x < y ⊎ x ≡ y. defining _≤_ in terms of _<_ is backwards with respect > to the rest of the standard library. i'm reluctant to accept it as i feel its likely to cause confusions >for users  and further problems down the line. as i mentioned before. i'd be much more > comfortable rewriting the implementation of _<_ in terms of a new native _≤_ relation.currently. bin has the following implementation to ``_<_ ``:``data _<_ (b₁ b₂ : bin) :  set where````    less : (lt : (nat._<_ on toℕ) b₁ b₂) → b₁ < b₂``do you suggest to replace this with``data _≤__ (b₁ b₂ : bin) :  set where````    leq : (le : (nat._≤__ on toℕ) b₁ b₂) → b₁ ≤_b₂``and then. to define ``_<_`` as``   x < y =    x ≤ y   ×   x ≢ y``             ?,positive
agda/agda-stdlib,standard,2017-07-10T09:30:36Z,i cancel my complaint about restriction on .agda files for pull requests for standard library.so far. i propose the two main backwards compatible items for bin.their implementation needs several (backwards compatible) additions to nat.properties. nat.divmod.  i am going to do all this (may be. later. in august or such). and then. we shall see. i do not care much of adding things to standard library. i just use them as non-standard.but earlier i happened to make proposals there. and now suddenly have a response -- after  3-4 years. so that i do not know. may be it has sense to try to reach a result.,negative
agda/agda-stdlib,standard,2017-07-12T14:14:14Z,i agree that it would be far better to prefix all the ordering properties in the ordering records with the  order and leave the equality properties with the standard name. for example `ispartialorder` would export publicly `refl : reflexive _≈_` and `≤-refl : reflexive _≤_`. however changing this now would break almost every piece of agda code in existence. so unfortunately. unless someone important disagrees. i don't think this is going to get changed.,negative
agda/agda-stdlib,standard,2017-07-12T16:13:25Z,> the denotation suc>0 is clear to everyone who knows what is suc. and (s≤s z≤n) is something special. the reader would take an effort to understand the meaning.okay i agree that it's more meaningful semantically. please could you rename it to `0<1+n` to follow the conventions in the `data.nat.properties`.> ≡-reasoning has a very strange parenthesis. it looks like ( but is not (. i think that my denotation is easier to operate with.i think that is a problem with the font that you are using. in most fonts it comes out as an angled bracket which is clearly distinguishable from a curved bracket.> 1* is much easier to read/understand in proofs than *-left-identityi think that's a matter of opinion. to me it looks like an identity function `1*_`! i'm afraid that. for better or worse. the proof already exists in the standard library and so you'll need to use the standard name.,negative
agda/agda-stdlib,standard,2017-07-12T17:10:18Z,>>    1* is much easier to read/understand in proofs than *-left-identity>> i think that's a matter of opinion. to me it looks like an identity function 1*_! it is only in the proof part. so it cannot be undedrstood as ``id``.  >> i'm afraid that. for better or worse. the proof already exists in the standard library and so you'll >>  need to use the standard name.if you insist. then all right.do i and wolfram convince you about   ``+cong₁``  and such?the matter is that  ``cong (_+ y)``often occurs like this:   ``cong (_+ ((x1 * x2 + a) * 2))``.and i write this as  ``+cong₁``  by using hidden argument(though in abut half of the cases agda forces me to set the hidden argument).proofs are difficult to read when large expressions are copied from lhs to the part of  ≡⟨ ... ⟩.,negative
agda/agda-stdlib,standard,2017-07-12T20:01:40Z,i would expect `+cong₂` to be `cong₂ _+_` given that `cong₂` is already an existing notion in the standard library. using exponent `ˡ` and `ʳ` seems more appropriate here.also. if `(x1 * x2 + a) * 2` can be inferred then `cong (_+ ((x1 * x2 + a) * 2))` can simply be written `cong (_+ _)`. if it can't then the shorthand won't bring anything to the table.,neutral
agda/agda-stdlib,standard,2017-07-13T08:34:40Z,> i would expect +cong₂ to be cong₂ _+_ given that cong₂ is already an existing notion in the > standard library. using exponent ˡ and ʳ seems more appropriate here.> also. if (x1 * x2 + a) * 2 can be inferred then cong (_+ ((x1 * x2 + a) * 2)) can simply be written > cong (_+ _). if it can't then the shorthand won't bring anything to the table.this all looks reasonable.concerning the ``cong``  denotations. i am going to try to follow matthew's solution. and then. to see.,neutral
babel/babel,mocha,2015-03-23T22:11:37Z,running tests on master gives an error. i've been trying to get the repo setup.. but running tests i get this error```  687) transformation/validation undeclared variable check undeclared:     typeerror: object is not a function      at transform (c:\git\babel\lib\babel\transformation\index.js:18:14)      at run (c:\git\babel\test\_transformation-helper.js:74:14)      at runtask (c:\git\babel\test\_transformation-helper.js:145:13)      at function._throws (assert.js:290:5)      at function.assert.throws (assert.js:316:11)      at runtest (c:\git\babel\test\_transformation-helper.js:157:20)      at context.callback (c:\git\babel\test\_transformation-helper.js:170:20)      at callfn (c:\git\babel\node_modules\mocha\lib\runnable.js:266:21)      at test.runnable.run (c:\git\babel\node_modules\mocha\lib\runnable.js:259:7)      at runner.runtest (c:\git\babel\node_modules\mocha\lib\runner.js:387:10)      at c:\git\babel\node_modules\mocha\lib\runner.js:470:12      at next (c:\git\babel\node_modules\mocha\lib\runner.js:312:14)      at c:\git\babel\node_modules\mocha\lib\runner.js:322:7      at next (c:\git\babel\node_modules\mocha\lib\runner.js:257:23)      at c:\git\babel\node_modules\mocha\lib\runner.js:284:7      at done (c:\git\babel\node_modules\mocha\lib\runnable.js:222:5)      at callfn (c:\git\babel\node_modules\mocha\lib\runnable.js:277:7)      at hook.runnable.run (c:\git\babel\node_modules\mocha\lib\runnable.js:259:7)      at next (c:\git\babel\node_modules\mocha\lib\runner.js:268:10)      at object._onimmediate (c:\git\babel\node_modules\mocha\lib\runner.js:289:5)      at processimmediate [as _immediatecallback] (timers.js:330:15)```,negative
babel/babel,mocha,2015-03-23T22:17:00Z,i tried debugging but weirdly it doesn't stop on the error.. so just hoping you know what the problem might be...,negative
babel/babel,mocha,2015-03-24T09:47:57Z,it's probably windows.,neutral
babel/babel,mocha,2015-03-25T07:14:44Z,sorry for wasting your time then. i'll delete and try again and continue investigating.,negative
babel/babel,mocha,2015-03-25T07:18:41Z,lukeapage no worries at all. check out the gitter room if you need any help as debugging over github issues is pretty painful.,positive
babel/babel,mocha,2015-04-06T16:53:59Z,fixed path for mocha tests in contributing.md,neutral
babel/babel,mocha,2015-04-06T16:56:34Z,thanks!,positive
babel/babel,mocha,2015-04-07T20:56:19Z,the tests where failing for me locally for the same reason. seems like `mocha.opts` isn't getting read. so the user-interface isn't getting set. i figured it was something with my local env. so i was running the tests with `-u tdd`. but i guess it's not me.,negative
babel/babel,mocha,2015-04-08T01:01:40Z,looks like mocha pushed out a faulty release.,positive
babel/babel,mocha,2015-04-13T08:05:58Z,so let's try to adopt babel tests instead of kangax for this. i'll take a look at your fixtures and try to convert some of them to mocha.,neutral
babel/babel,mocha,2015-04-16T05:41:01Z,this is more complicated than just doing `mocha test/core/util`?,negative
babel/babel,mocha,2015-04-16T05:43:09Z,what if i don't have `mocha` installed globally? or what if you change the test framework? it's more straightforward. since everyone should already be running `make test`.:smile:,positive
ckeditor/ckeditor5-engine,eslint,2017-05-12T09:33:36Z,run `eslint --fix src test` and you'll have only 300 issues to fix manually. make sure to review the automatic fixes and commit that separately.,neutral
angular/angular-seed,karma,2013-09-30T22:38:40Z,i am also getting "no provider for framwork:ng-scenario!"i have done all the npm installs listed above and see no change.any idea what else i can check?,neutral
jshint/jshint,jshint,2012-07-19T20:27:59Z,not sure. don't know too much about grunt. i figure grunt has a simple way to extend it or hook into it. if they have an irc channel or some forum ask there?,neutral
jshint/jshint,jshint,2012-07-19T20:32:28Z,i think it become to complicated and not solution will be found since grunt will say that is jshint and you say that is grunt - whatever it result that jshint is less usable both with grunt :)i think it is wrong that is not possible to switch messy warnings.,negative
jshint/jshint,jshint,2012-07-20T07:31:35Z,really not understand what you talk about - i was open this ticket and know why is open :)it is open because it generates messy information not because i could run next :)if you give up with this bug - please keep it close and not improve jshint at all.,positive
jshint/jshint,jshint,2012-07-24T22:16:30Z,gfranko this is a different issue.as for the original issue: the re-use of `prop`. while valid in this case. really looks like a typo. in next you will be able explicitly ignore any warning but this behavior won't be changed in the current tree.sorry for taking so long to respond.,neutral
jshint/jshint,jshint,2012-07-26T07:28:12Z,+1i like the output of otakustay reporter better than --show-non-errors. only issue. the reporter doesn't pass jshint ;-),positive
jshint/jshint,jshint,2012-08-01T08:57:20Z,eqeqeq can't be turned off. `/*jshint eqeqeq:false */` has no effect. this was reported already in issue #236 which was closed with an incorrect explanation. problem is seen in jetbrains ides like webstorm. phpstorm. pycharm. intellij idea etc.,negative
jshint/jshint,jshint,2012-08-04T14:46:12Z,same question here:```/*jshint jshint:false*/.. third party code that i do not want to jshint```has that kind of jshint skip been implemented?,negative
jshint/jshint,jshint,2012-08-04T19:59:14Z,not yet. the fastest way to see this implemented is to send me a patch.,neutral
jshint/jshint,jshint,2012-08-07T18:48:49Z,just curious. what about rhino and windows do they also have a .jshintignore or something similar?i think it's worth a shot at having both a directive and an external configuration option just like we do with the options.,neutral
jshint/jshint,jshint,2012-08-07T19:38:59Z,i'd love to have all wrappers mirror features though. but at least with jsc some things are just not possible (poor system apis).,negative
jshint/jshint,jshint,2012-08-09T02:16:23Z,danmilon as far as i know it's not. right now i make my code ugly to satisfy jshint as i rarely use the `delete` keyword. i'd rather have false positives rather then lose real errors in my jshint,negative
jshint/jshint,jshint,2012-08-09T07:14:06Z,added value "paramsignore" to options.unused.. this will make jshint ignore function parameters in warnings about unused variables.it happens quite often that you do not need all parameters a function/callback offers. think about $.ajax's success callback for example. which has the parameters data. statustext. xhr (in this order). it may happen that you need only the xhr parameter in your function body. in that case jshint would correctly (but for my taste unnecessarily) point out that the other two parameters are unused.usage is now:options.unused = true: same as beforeoptions.unused = "paramsigonre": same as true. just ignore function paramsoptions.unused = false: same as before,positive
jshint/jshint,jshint,2012-08-09T12:51:18Z,``` javascript/*jshint unused:true*/(function (){  "use strict";  function used()  {    return 'used';  }  function unused()  {    return 'unused';  }  used();}());```now i see that the error uses the line number. but jshint.data.unused uses the line number of the parent:jshint.data.unused[0].line = 2jshint.data.unused[0].name = "unused";jshint.data.unused[0].function = "anonymous",negative
jshint/jshint,jshint,2012-08-10T10:35:26Z,i like this feature. and was just about to suggest it...,positive
jshint/jshint,jshint,2012-08-13T04:08:12Z,sorry. i thought about this and i don't think ignoring all arguments is a good solution. the only valid case i see right now is when unused arguments are followed by arguments that are used:``` javascriptmyfn(function (error. data) {  console.log(data);});```but we can be smarter about this—we don't need to warn about such cases at all.,negative
jshint/jshint,jshint,2012-08-13T05:00:13Z,hi anton - could you explain your reasoning here? why don't we need to warn about such cases at all? do you mean that you will implement the feature of not warning about unused arguments that are followed by arguments that are used? if so. i imagine you mean that this pull request was closed in favour of issue #607,negative
jshint/jshint,jshint,2012-08-13T05:22:55Z,we don't need to warn about such cases because it is clear—as clear as it can be from static analysis—that the unused variable is not an oversight but something you have to declare because you need to use other arguments. unused arguments from the end of the list. on the other hand. don't need to be there and can be easily removed without breaking your code.so yeah this pr was closed in favor of #607 which will be ready for the next r10 release (scheduled for next weekend).,neutral
jshint/jshint,jshint,2012-08-13T05:36:01Z,thanks for the explanation. anton - i look forward to this great new feature :),positive
jshint/jshint,jshint,2012-08-14T06:45:26Z,like the smarter idea!,positive
jshint/jshint,jshint,2012-08-14T12:50:47Z,thanks. but now i have next error:``` javascript/*jshint unused:true */function test(a. b) {    return b + 1;}`````` basht.js: line 3. col 16. 'a' is defined but never used.1 error```how i can check only last function parameters?,negative
jshint/jshint,jshint,2012-08-14T16:15:32Z,no. i dont want the smarter idea. i want to write the arguments that are passed for completion and documentation even if  not currently used in the implentation.,negative
jshint/jshint,jshint,2012-08-14T16:39:47Z,then you shouldn't probably use the `unused` option. this option checks for variables that are not used in your implementation without any regard to documentation and such. you can always just check jshint.unused array manually and pick and choose variables you care about.,neutral
jshint/jshint,jshint,2012-08-14T16:45:18Z,i want to check for unused _variables_. not function arguments. on other places they never make sense. but in arguments list they do!if the functions gets passed a value. its a good idea to keep the argument there for consistency.,negative
jshint/jshint,jshint,2012-08-14T17:14:52Z,all your arguments are about your particular style of programming while this check is not stylistic at all. i don't want to add more options because adding them means having more stuff to port to jshint-next and make sure it's backwards compatible and all that.jshint has tons of stylistic checks but `unused` is not one of them. as an aside. if i had to keep unused arguments in function's signature i'd do something like `function main(a. b /*. c. d */) { ... }`,negative
jshint/jshint,jshint,2012-08-14T21:22:20Z,in my opinion. even with newcap:true. it would be nice to specify exceptions. such as 'raphael' in the .jshintrc file.,positive
jshint/jshint,jshint,2012-08-16T10:58:54Z,antonkovalyov i think it would be useful to specify one or more names to be ignored by the newcap: true (e.g.: specifying them in the .jshintrc file). raphael and many others would fit in there.,neutral
jshint/jshint,jshint,2012-08-16T17:46:31Z,`.jshintrc` is handled by node-jshint and this is just a library.,neutral
jshint/jshint,jshint,2012-08-18T05:48:27Z,yeah. it would be really nice to have this - i hate unnecessary nesting. oh. and thanks ten trillion tonnes for jshint. it's solid gold.,positive
jshint/jshint,jshint,2012-08-18T05:56:01Z,+1i prefer this style than the alternative that requires one more level of nesting.,neutral
angular/angular.js,jasmine,2013-10-01T06:28:59Z,closing browser while running tests  in angular runner. not sure if anybody else doing e2e testing using angular runner is running into this issue.i have couple of tests written using jasmine syntax. when i run them one by one. tests work fine and pass but when i run them together. they inconsistently fail. in each test( controls seem to have older values). i use browser.navigate() method in before each block. the same tests when written and run in codedui work fine. the only difference being that in codedui i can close  the browser window after running each test separately. not able to find the same functionality in angular/jasmine. tried reload method but doesn't help either.anybody has any idea. i can provide more details if needed.,negative
angular/angular.js,jasmine,2013-10-11T12:27:00Z,you need to create new branches for each pr:```git checkout -b is-array-perf-improvment mastergit commit -am"refact(angular.js): use isarray if available"git push -u origin is-array-perf-improvementgit checkout -b grunt-jasmine-node-fix mastergit commit -am"chore(npm): grunt-contrib-jasmine-node changed name"git push -u origin grunt-jasmine-node-fix```,negative
angular/angular.js,jasmine,2013-10-11T12:39:12Z,chore(npm): grunt-contrib-jasmine-node changed name,negative
angular/angular.js,jasmine,2013-10-11T12:41:18Z,jtangelder - nice one.  we need that cla,positive
angular/angular.js,jasmine,2013-10-11T12:42:25Z,i just signed. my real name is jorik tangelder. thanks for helping me out pete!,positive
angular/angular.js,jasmine,2013-10-11T12:42:57Z,magic!  thanks,positive
angular/angular.js,jasmine,2013-10-11T12:45:34Z,landed as dd7cb15,neutral
angular/angular.js,jasmine,2013-10-11T13:30:35Z,chore(npm): grunt-jasmine-node travis build. #4380,negative
angular/angular.js,jasmine,2013-10-11T15:12:34Z,thanks jtangelder - i did the additional fix myself. landed as dd7cb15bcf4767e20f4f620b33cb1fd35d8857d7 and c317a7b51ac5b9cf76f399427e7e71fe4f793818,positive
josdejong/mathjs,mocha,2013-03-04T19:14:08Z,i have added a test script to the package.json. as for the tests themselves: the tests are not complete at all at the moment. i still have to choose a suitable test suite for them (mocha. vows. tap. nodeunit. .... ?). and then update and complement all tests using the chosen suite.you have added a `preinstall` script to the package.json which forces a global install of jake and tap. that might not be a good idea: you force everybody to install these tools on their system. while these tools are only needed for _developing_ the library. not for just _using_ it. besides that. there is no need to install these tools globally when running them via npm (though a global install is convenient). so i would leave that up to the developer itself.,negative
knownasilya/ember-toggle,standard,2017-05-05T14:42:13Z,rwwangner90 knownasilya i tested it in ie. and it works as expected with this fix  and the event isn't getting double triggered in ie as well. the current implementation wasn't working in safari due to the order of the events that where being triggered. in chrome. the click event on the div triggers first. then the on change event. but on safari. the onchange event triggers first then the click event. this order causes the toggle to just toggle back and forth in safari.are you saying that you don't want to use the label anymore. and keep the clock event? i can work on that if that's the case.and not doing anything special. just a standard toggle with the action defined is enough. {{x-toggle value=model.ispublic ontoggle=(action (mut model.ispublic))}}this is in the simplify branch.,positive
knownasilya/ember-toggle,standard,2017-05-16T14:57:21Z,gtb104 can you confirm what sort of examples you tested? did you do the standard case. with no labels. the contextual component case with 1 label. the contextual component case with 2 labels. and the standard case with both 1 and 2 labels as well?i believe these hacks were just for certain cases on certain browsers.,neutral
DefinitelyTyped/DefinitelyTyped,standard,2015-11-03T15:26:24Z,i'm fine with the checkin. just not sure about the trade off. so if that's standard. ok with me!,positive
