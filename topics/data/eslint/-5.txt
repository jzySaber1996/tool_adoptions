["seems like a good idea iamstarkov - but our current strategy allows one to install `eslint-config-airbnb` and use only the es5 stuff if you don't want the react deps. which is more important - lighter install weight. or reduced doc reading and install verbosity?", 'it\'s good to avoid the footgun of a falsy non-undefined value when using `||` - however. in the case of your example. where "port" needs to be a positive integer. `opts.port || 80` is actually more accurate than your "good" example. although nowhere near as precise as it should be.separately. is there an eslint rule that would enforce this?', 'so. is there any progress here?', 'nothing actionable here - just add the parser setup to your own `.eslintrc`. easy enough.', 'got it. thank you', "> our current strategy allows one to install eslint-config-airbnb and use only the es5 stuff if you don't want the react deps. which is more important - lighter install weight. or reduced doc reading and install verbosity?maybe then `eslint-condfig-airbnbn/base` thing should be exported to separate `eslint-config-airbnb-base`", "> install eslint-config-airbnb and use only the es5 stuff if you don't want the react depsso one. who wants only to lint es5 code will get also `/base`. and one who wants to lint `es6` code will also get `/legacy`. so even now its still overloaded in terms of install weight and time. and finally everyone gets react rules (for free. of course)", 'what about splitting in three packages?- `/base` will become `eslint-config-airbnb` with removed `/legacy` inside- `/legacy` will become `eslint-config-airbnb-legacy`- `eslint` will become `eslint-config-airbnb-react`. extended by `eslint-config-airbnb` with `eslint-plugin-react` in deps. (not sure eslint will pickup `eslint-plugin-react` from here. but it should)so every consumer will get proper amount of rules and deps', "hmm...if it's ok with you. i'm going to try a simpler way of combining readme files. so more focus can be done on the test cases. if possible. i'd even like to auto-generate the .eslintrc. as opposed to the tests.", '> separately. is there an eslint rule that would enforce this?i did not see any rule like that. it would be hard to enforce. since `||` is legitimate in certains cases (boolean operations).', 'it seems like an eslint rule could look for assignments where the right hand side contained a `||`? there very well may not be an existing rule though.', 'what eslint rule applies for each rule?. it would be nice to know...', 'peer dependencies. peer dependencies are being deprecated in npm v3. can you please remove the peer dependency and just make `eslint-config-airbnb` use `eslint` as a normal dependency or whatever.', "peer dependencies are not deprecated in npm 3 (which is already out). they just aren't installed by default. currently. you need to add `eslint` as a dependency to your own project.", "thanks for the super fast response. and okay. i guess i'm a bit sad. because i don't actually have a dependency on `eslint` since i'm using `gulp-eslint`. so it feels a little weird that i have to have both.", "this unfortunately means that babel transforms i use are now marked as invalid by eslint. although i'm able to fix this with adding the parser to my eslintrc file. thought i should mention.", "documents corresponding eslint rules. as a developer convenience. this also opens the door for 100% coverage of our rules to a corresponding eslint rule. and to create new eslint rules if they don't exist.ljharb justjake", 'awesome :+1:', 'cannot override the `space-in-parens` rule. i am using the airbnb eslint rules. but i can not override the `space-in-parens`  rule. any idea? this is my file``` jsmodule.exports = {    "extends": "airbnb".    "rules":{        "space-before-function-paren": 2.        "space-in-parens": [2. "always"].    }.    "plugins": [        "react"    ]};```', 'hmm. that should definitely work - you may want to file an `eslint` issue?', 'yep. i will do that', 'this issue hurts me every time i want to use eslint-config-airbnb', "it's not from the react plugin. it's in core eslint - i suppose it could be moved there.", 'switch to proper eslint config. also extracts the usage message from the `slt` command itself to allow for easier formatting.', 'chore(eslint): use eslint-config-algolia. in our way to make this module part of the instantsearch family. onepart of it is to use our eslint-config-algolia and enforce it.some rules are currently disabled on some parts that will need to berewritten.', 'is there a dedicated eslint plugin for vue? we are using eslint-plugin-html', 'also updated all deps', '> did you check all breaking changes of the dependencies?yes i checked the changelogs and could not find anything obvious or that should break for us.', 'did you try eslint-plugin-vue?', "no i tried none of them ;) because haroenv told me about the algolia setup and i didn't know how much it was going to conflict", 'updated pr to only include eslint changes and no other package upgrade.', "this should be ready to merge now. only drawback being that `<script>first line` being automatically formatted.this is being sovled by prettier/eslint/vue right now but ultimately you don't have to think too much about it. it's automatically reformatted.", 'less/no config. autofix for everything babel supports (like babel-eslint). however only deals with styling unlike eslint (a linter + autofixer). accounts for max-line-length automatically', 'it\'s an alternative to enforcing style by configuring a lot of little "nits" in eslint. and instead just forcible re-printing everything. if you are using xo which is built on eslint. it\'s depending on eslint\'s `--fix` behavior which doesn\'t actually fix a wide array of style. for example the stricted eslint config i know happily passes all of these:```jsfoo({ num: 3 }.  1. 2)foo(  { num: 3 }.  1. 2)foo(  { num: 3 }.  1.  2)```prettier always ensures that 100% of your code is formatted consistently. i hope you try it out. and it\'s fine if it\'s not for you!', "any chance we could start small with what tehshrike suggested?> why not just leave semicolons alone. rather than adding or removing?as an option. so: `addsemicolons` which would default to `true`actually. this would be enough for me. as `eslint --fix` will remove semicolons for me anyway. so if prettier misses removing a semicolon. eslint will do it. so if i had the ability to prevent prettier from adding semicolons then i'd be good :)", "> single quote settings should not affect jsx attributes. i've never seen anyone write `<div classname='a' />`i've definitely seen this. usually in any react codebase where eslint was set to single quotes.", "lint like ci integration. i've been using scalafmt at work which has a feature that you can enable to prevent it from compiling the code if it's not properly formatted. this prevents code from going through ci if it's not properly formatted.obviously this is a huge feature which would require first of all the ability to run prettier on a directory instead of a single file at a time. but i think it could be a great addition.humans are known to be bad code formatters. so code will get through review even if it's not formatted properly. my dream is that this could replace eslint (code formatting rules). and in order to do that i feel like it would have to have some linting mechanism that it could break ci if it's not formatted on commit.maybe i'm reaching way to far here. just wanted to put the idea out there.", "i'm going to reach even further.i imagine a workflow where prettier is run using something like a precommit hook. i check out the code from the repo. prettier formats the code to whatever my preference is. then on commit it formats the code back to a common format for git diffing. for example. if my company's coding style requires i use semicolons but i personally don't like them. i can simply hide them when working on code in my editor. but when i commit they will automagically be put back in and nobody's the wiser (especially git)", 'yep! all of these are great ideas and what i envision this becoming. it actually shouldn\'t be too hard; we already support passing in multiple files (so people are doing `prettier src/**/*.js` to lint whole folders). we could easily make it "check" if all files are formatted instead of doing the actual formatting (a `--check` flag instead of `--write`).> for example. if my company\'s coding style requires i use semicolons but i personally don\'t like them. i can simply hide them when working on code in my editor. but when i commit they will automagically be put back in and nobody\'s the wiser (especially git)this is exactly the kind of thing this project empowers you to do. and it\'s a great idea. it\'s also why we won\'t ever have a project-wide config file; one of the reasons those exist is so things like editors can pick them up and automatically set the right formatting settings in your editor. but we don\'t care about that. you can format the code with whatever settings you personally like across *any* projects. and just make sure that the project reformats it with the project-specific settings before commit.tooling integration will be the next step after we fix all the show-stopping issues where we generate invalid js code. that\'s higher priority right now. but we\'ll think through this soon.', "i've done something like this for webpack. ci checks if source code is equal to beautified source (using js-beautify). if not ci fails and prints a diff (in patch format). works great to ensure all source code is consistent.", 'i would really love to use this if i can get prettier to output code that will pass my large corporate eslint rules. right now. it looks like the two issues i have are spaces between array braces [] and contents `[ 1. 2. 3 ]` is output but my lint hook requires `[1. 2. 3]` and no semicolon ending the last line of code. so i get `})` instead of `});`', "jlongster . sorry. i wasn't clear about the 2nd issue. after i run prettier. i lose the semicolon on my last line of code. that's the issue i was running into. i need every statement to end with a semicolon. including the last one. maybe that's actually a bug then? i can type up an example case for you if so. if i can get your tool to pass our eslint requirements. i might be able to integrate it into our build process and save our hundreds of developers the daily headache of trying to fix lint issues.", 'hey nzakas. thanks for the kind comment! first i want to say that i hope i never came off as disrespectful towards eslint. i wrote my post and readme to focus on a specific problem that i\'ve seen in teams. but nothing that is the fault of eslint. since this project has taken off and i want to be a good citizen of the ecosystem. i plan on updating the readme to not call out eslint specifically to make sure it doesn\'t look like we\'re bashing it.i can definitely see how eslint evolved that way. a pluggable system like that is incredibly hard to build and maintain since you\'re scope is broad. but the advantage is that it\'s flexible and serves hugely diverse set of needs. kudos to that!i really like the rules that enforce certain semantic characteristics. and having time to think about it more. i\'d like to talk more about how we can make it easy to integrate prettier and eslint. i think this could solve the semicolon debate. too: if i can generate code with semicolons and pass it through eslint\'s fix process with the "no semicolon" rule on. people who really don\'t want semicolons could set that up. that allows this project to be focused and opinionated but leverage eslint\'s flexible toolchain.of course. the main use case for integrating would be to use eslint\'s other rules for semantic checks. it makes no sense for us to reinvent that (nor am i interested in it).is there a place we can talk about integration? it\'s easy in theory. but the devil\'s in the details. and i\'m particularly concerned about performance because a naive `prettier foo.js | eslint --stdin` probably parses the source twice.> i\'d also strongly encourage you to avoid trying to read eslint configuration.thanks. that helps clarify a lot. i had a hunch that it would be difficult. and someone else can create another project that attempts this and passes in the detected options to us if they want. i don\'t plan on doing this.> that said. the eslint team has discussed in the past creating a generic style guide format that wasn\'t directly tied to individual rulessounds neat! as you said afterwards. i\'m not sure how that would tie into this yet. unless there are a few tweaks we could make to all be on the same page. i\'m definitely open to talking about it (not just me. but many other people that are getting involved too. i don\'t have any interest in deciding these rules for other people. i\'m seeking the majority).> in any event. i just wanted to reach out to let you know that we\'re happy to be a resource for you as you get this project up and running. between the eslint and jscs teams. we have a lot of experience in this area. so feel free to reach out any time.thanks! much respect and love to you all. i look forward to collaborating!', "kentcdodds that looks cool. that's what i'm aiming for -- keep this project focused and let editor integration be where things like that happen.i'm curious: is the only reason you want it dropping semicolons? for large files. i believe that will be pretty slow. i'm not happy with prettier's performance itself on ~2000 line files (it's not terrible. something like 600ms. but i want to improve it). i'd like the formatting to feel as instant as possible. and eslint seemed to add another 1s on the large file when i tried it.", 'that\'s certainly an option. as is continuing to use eslint as the majority of the ecosystem does. forking.  however. will not likely help achieve the goal of "gofmt for js"', "fragmentation already exists. configuration/extensibility is how you reduce fragmentation by allowing everyone an easy path to get on the same tool. as eslint has done. adding another opinionated tool to the mix doesn't reduce fragmentation. it increases it.", "> fragmentation already exists. configuration/extensibility is how you reduce fragmentation by allowing everyone an easy path to get on the same tool. as eslint has done. adding another opinionated tool to the mix doesn't reduce fragmentation. it increases it.i would bet this project will not increase fragmentation if we stay zero config. from what i've seen. many people using small variants of different eslint config have been happy to jump on this and there's been less fragmentation so far. i agree that a few options (like the ones we have) help bring everyone together. but there are still certain ones that we won't include (like semicolons) but the community is already fragmented on those (people can use standard if they want).", 'i\'m agree with jlongster that it is not main priority. there are existing workarounds.kentcdodds and dtinth such things don\'t make any sense for me. sorry but they were unnecessary. :)i think it was just enough to think that _"the formatter should be first. the linter should be second"_.kentcdodds. btw. side note: ci is failing because you missed `eslint` in deps. and don\'t see value for atom or sublime plugin. why not just use `prettier` plugin and `linter-eslint` it works great as i already mentioned.', "despairblue thanks a lot for this. my gut feeling. which i mentioned in #212. is that this is going to introduce several awkward situations when combined with other syntaxes. take a look at the first diff in vjeux's example:```patch-      return observable.concat(-        observable.of(editor).-        this._newproviderevents.mapto(editor)-      );+      return observable+        .concat(observable.of(editor). this._newproviderevents.mapto(editor));```if we enable breaking on `.`. no matter how do it. the above is going to happen. this is because it exists before the method call. we cannot try inner expansions first because it would be horrible for performance and adds a *lot* of complexity. we do it in a very few other uses cases but it makes the code a lot harder to understand (i think in 2 places we use `conditionalgroup` for this). and i think even if we tried it. we would get mostly back to where we are now. it's just not worth the complexity.the maximum line width at the end of the day is a suggestion. the printer will happily print past it if there's nothing it can do. there's only so much we can do to break things up. if the user has a really long lookup. they should break it up into multiple lines. i think in all of the edge cases we are trying to fix here. the user should just fix their code if they really don't want it all on one line. i think forcing them to introduce intermediate variables could actually help clarify code.as for comments. yeah. inline comments are very weird and will do things like trigger breaking at certain points. the user can manually move them up if they don't want that.i don't think this is the right direction to take. `.` is such a pervasive operator in js that breaking on it introduces a whole new range of formatting situations that we have to handle and i don't think we should go through the work to do that. you original real code looks fine to me. even if it crosses the threshold:```jsfunction* sendmail() {  try {    const pdfstream = yield contractsservice.getlandlordcontractstreamfrombooking(      booking    );  } catch (error) {    report(error);  }}```the great thing about this formatter compared to eslint is you don't really have to worry about it when this happens. you just have one line that's pretty long. that's ok. we won't consistently warn you about it like eslint and force you to disable the max-len rule just for that line or anything. that line can just be a little longer :)", "i am not very familiar with samsara and its structure. nor with how developers would benefit from importing only a few modules and not the whole library. but the es2015 syntax for modules allows the importation of specific object inside modules:  `import { surface } from 'samsara'`is this what you mean?regarding the implications of moving to es2015: it would indeed probably mean adding a 'tasks' folder. with the webpack config file and a basic express server. but in my opinion. it isn't too bad of a requirement / feature. the dev workflow with webpack. especially when combined with hot reloading and eslint. is really nice and productive. i have set up quite a few projects with webpack / babel lately. so i could help you moving forward with it if you want.", 'swiiip it looks like the build is failing due to linting errors. can you rebase 1 more time please and run `eslint --fix` on your file (or use your favorite editor to lint fix).', 'remove new-cap eslint exclusion. ## type of changecode style update (formatting. local variables)## description of changeremoving the `new-cap` eslint exclusion for #1206', 'add eslint as lint tool', "thanks for your contribution. but i'm pretty sure none of the files will validate lol :%", 'i will add some rules and refine code later.', 'refine code via eslint', "add plugin to monitor the updates of react components . add plugin (codename: bananaslug) to monitor the updates of react componentsthe plugin renders a checkbox inside the current react panel. clicking the checkbox would toggle the the plugin.most plugin codes lives inside `plugins/bananaslug/` and they're built with separate modern stacks (webpack. eslint. babel...etc) to ensure better developer experiences.", 'ping :)', 'ping~', 'i guessing that the problem is with the intellij eslint plugin. as i cannot reproduce this on the command line. i have refactored so that we no longer depend on a magic global helper file. so i will close thisthanks very much scottfreecode and dasilvacontin for looking into this. and my apologies for any invaluable effort on your part.', "use `semistandard` directly. this pr simplifies the lint tool dependencies by using `semistandard` directly.we don't need to keep track of each peer dep of `eslint-config-semistandard` anymore by this change.---closes #2633", 'this looks like a great simplification. i am wondering about the collapsing of all config into package.json though. previously there was a separate configuration for `lib/browser`. which is now gone. obviously the linting passes with the new changes. but have the rules accidentally become more lax because of that specific config removal?', 'generate appropriate .eslintrc.js files in the blueprint. this is of course a very straightforward approach.we could extend this in the future to generate the appropriate rc file depending on the linter installed but given that ember cli and basically everybody else as well is moving to eslint we should be fine.', "add .eslintcache to .npmignore. it shouldn't be part of our npm package.", "my ask here was to actually include the practices that are now enforced but are not covered in the current guide.  each item could be concise like the current guide and link to the eslint doc as i mentioned in one of the other prs.i know it is a bit more work and more maintenance. but the coding guide now basically has implicit rules as i don't think readers will dig at the level currently required to learn about each eslint rule.", "yes. i wanted all of them. but you could also add a link to the recommonded config list.omh1280 see the big picture here: the coding guide - for the most part - covers all our best practices.  with eslint. we just added a bunch more and didn't document them.  just make it clear - however you see fit - so that a new person reading the coding guide would truly walk away with an understanding of the best practices. and not just skip over a link that contains most of them hidden in eslint.", 'attempt at travis integration. also pulled eslint config up to the top-level and added some readme badges.', 'success!', 'lgtm', "> longer term. i think it may be best to follow the `eslint`/`babel` convention of having a `.reactserverrc`yeah. that sounds cool.  also. when there's a cli. being able to point to config with a command-line option would nicer than setting an environment variable.", 'remove eslint globals + reenable no-unused-expressions rule. - our individual repos should add app-specific eslint globals as needed instead of everyone implicitly inheriting them- `no-unused-expressions` was turned off for chai matcher issues but should be turned off only in the repos with problems not everywhere', 'add eslinting and prettier.', "rtorino what was the issue here? defaults shouldn't have any references to airbnb. the default config should mirror what `eslint --init` gives you. i'd like to be able to document issues if there are any.", 'feature eslint plugin filenames. adds plugin filenames to walmartlabs best-practices and updates docs to reflect change. cc ryan-roemer', "chaseadamsio baer -- does this work with the react configuration? i think i remember eric saying that the `_.merge()` can't handle 2+ plugins. (hence one of the reasons behind me filing #13 ...)", "cool. i'll move on to #13 and come back to this next. :+1:", '#13 is a bit blocked. i did not find the exposed _merge function ryan-roemer was referring to and need to investigate more.', "actually. i meant don't merge in this project at all. use only eslint config options of extends to do all the work.", "let's have this project actually be _eslint configs_ and not try to duplicate on our own what eslint does internally. let's just let eslint handle all merging itself.", 'pr coming.', 'alright. all set on this one.', 'i think #13 is all good if #23 looks okay. i tested and everything is :+1:', 'you forgot the off.js config', "#13 is closed and merged. i've made some changes to fit the schema baer was setting up with the `react` plugin. so this should close #17. was there anything else that should be done here ryan-roemer?", 'chaseadamsio -- lgtm!', 'this is so :moneybag:!', 'this is because the configurations are defined as `js` files. whereas eslint expects `yaml`.  baer. are the constituent configs composable using just the json/yaml syntax and `extends: ...` ?', 'feature eslint', 'paulmelnikow thanks so much for taking the initiative on this! i like your decision to start with a sensible baseline (`eslint:recommended`). please do open a pr and i will take a look at it within the next few days. skimmed through the code just now and it looks solid. happy to help you fix the test once we have the pr up. so we can verify changes with ci.', 'eslint. i migrated already a couple components. still the rest & all of the other code should be brought to alignment with the eslint rules.', 'refactor: align test files with eslint rules', ':top: work :smile:', 'refactor: deprecating underscore for src. hey nik...check the helpers file...does it look goo enough to you.i still see some eslint errors. but i do not want to do any further changes. i am scared my changes will break something with existing code logic of these methods.']