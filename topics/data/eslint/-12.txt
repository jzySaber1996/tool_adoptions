['add eslint rules plugin to addons section. as discussed here #179', 'thanks! great work', 'i think you mean `npmjs.com` not `nmpjs.com`', 'fix typo in eslint-plugin-redux-saga npm url. ouch :(', 'salzhrani ouch. you are correct: #454', 'thanks', 'update eslint space-in-parens', 'so. where can i get config file with these rules? :)', "nkbt ooops. sorry. didn't see :(", "fine to keep them in the existing `.eslintrc` since it is our internal file. folks can fork or copy + paste and remove the jsx section easily enough.if it becomes problem to maintain in the future we could introduce a build tool around this. but that's not necessary at the moment. :+1: thanks nkt!", 'express.router(). a function with a name starting with an uppercase letter should only be used as a constructor.the sentence `const router = express.router();` issues with airbnb eslint.', "can you provide more context? this isn't really a bug. just an issue with your chosen linting. why not just use `new`?", "yea. looks like a non-issue to me :) `express.router` _is a constructor_; you can do `new express.router()`. the `new` is optional. just like many of the object constructors in javascript itself (i.e. `error('oh no!')` and `new error('oh no!')` are identical. as the `new` keyword is optional).", 'ok. thanks for the quickly response!', "coutothe problem is that it is currently an on/off switch which tells babel whether to search for **.babelrc** or notthere's currently no way to specify a specific file to usefor example. `eslint` has a **--config** flag (**.eslintrc** is just a convenient default). `jsdoc` has a **--configure** flag. `scss-lint` has a **--config** flag for specifying a configuration file to use.this is basically the reason why to this day i was not able to use **.babelrc** on my project (but i really want to for obvious reasons).for the api functions it's not that big a deal. because it's easy to pass a config object to them.as to the cli it's not as easy. and not possible in some cases.i would also just love it if the configuration could be written in the yaml format (just a personal preference).", "`eslint-loader` as a pre-loader + react transform babel plugin + redbox error-catching _with custom styles_ is how i stumbled onto this; the custom styles file got some crazy generated path on account of the loaders still being in the file path provided to babel.i suspect it's a pretty straightforward way to reproduce. i can try to conjure it back up. if that would be helpful.", "switch to eslint. i think it's time to start exploring some other/newer tools.  eslint seems like it's quite usable now. so we should at least try it.", 'a linter should be added. like jshint or eslint (i recommand this one)', "silence the test warnings. silence the test warnings about `factory` and test helpers by adding eslint global declarations.is there a better way? i looked into `ember-rosie` and importing `factory` but it didn't work.", 'frank-dspeed i recon the linting bit could be its own pr and this pr can upgrade everything else except those eslint bits?', "the advantege of putting the whole code into lib directory is that it's under eslint control ;)", "seems to be a simple deprecation problem in our eslint settings. msimerson can you figure out what the issue is?> on feb 13. 2016. at 1:25 am. dave beyer notificationsgithub.com wrote:> > baudehlo. thanks for the tip. i made the change but unfortunately it now seems to be failing one of the integration checks. (is there a way for me to see what check is failing?) after this is resolved. if the change seems reasonable to you. i'm happy to rebase to clean it up.> > ??> reply to this email directly or view it on github.", 'update for eslint 2 compat. for developers. see the upgrading.md comment.', "i'm not stuck on any tool in particular. i personally am a fan of the `;` but am more of a fan of standards. i don't think that coffeescript is the right direction and i'm not sure if es2015 is where lost should go just yet.i think that adrianca makes a good point about having a standard. i've noticed that different parts of lost are written in different ways and i'd love to make lost easier to contribute to by having a standard way that it is written. i was intending on adding `.eslint` to help with this in the future anyway??maybe that's where this starts along with some more documentation on how lost is/should be written.i'll adjust this issue to address the conversation about standardizing lost for future development.", "itsfilipoficial the pr looks good. i'm just going to tweak the code climate + eslint configs after i merge it. thanks for adding all of these tests!", 'begin react documentation. starting off the react documentation with:- component structure- jsx stylingpretty much all of the rules or eslint-enforced.', 'this looks great - i like seeing the `good` way of writing code as well as the multiple `bad` examples. this makes it super clear!', 'thanks jphilipps-eb!', "relaxing some eslint rules. changes include:- (temporarily) turning off `no-unused-expressions` until we can figure out a solution to make it work with chai's expectation syntax that looks like unused expressions- (temporarily) turning off `react/prop-types` until we can implement the update so that it ignores stateless functions that we use for helper components and don't want to define `proptypes` for- `eslint-config-eventbrite` depends on `babel-eslint` so it can lint es2016+ and provided a place for es2016+ rules to go- `comma-dangle` allows dangling commas for multi-line things- only function expressions (arrow functions) allowed in es6+- ignore imports for `no-useless-rename`- set `allowparens` to `true` for `no-confusing-arrow` (i.e. arrow functions aren't confusing if you use parentheses)- validate `htmlfor` on `label` component as well", "thanks kaylieeb for that catch! our eslint rules wold've caught it. but there's no eslint in markdown", 'add docs for helper components best practice. also:- move state section to the end so that all of the eslint- and syntax-related best practices are all grouped together.- create new section to talk about `render()`-related best practices', '"this doesn\'t look like it will address the issue with es5 projects and global `""use strict"";` receiving errors. due to es6\'s default strict mode and eslint\'s rule to disallow unnecessary global strict flags.  are there any recommendations for this situation?the other changes in this pr look solid. i pulled it down in my project and it ran ok. with the exception of the ""use strict;"" errors mentioned above.:+1:"', "as far as how to test each plugin. i'm not sure.  i haven't used eslint until recently. so i'm still fairly unfamiliar with its behavior/construction.", "i can take the initiative on that one (will help me learn more about fashion-show and eslint).  i can't use godaddy-style until it's resolved.", '"it looks like removing `""parser"": ""babel-eslint""` from .eslintrc prevents the ""use strict"" warnings"', "move plugins to normal dependencies.. if we set the eslint plugins as normal dependencies they will be included in the `node_modules` folder of the consumer and we will be able to avoid having to specify them in the `package.json` (of the consumer. like we do now). this should work with `npm3`. since dependencies are flattened. for `npm2`. we still have to include them. so let's keep them as `peerdependencies` as well.", ':+1:', '1', "samshull  we're still on npm 2. i'd prefer not to force that just yet.", 'so this configuration has been tested on multiple repos with both `npm2` and `npm3`?', 'i think that keeping them as `peerdependencies` is a bit confusing for the end user of `npm2` because they are installed. but unless the user is using dedupe to flatten their dependency tree. they still have to be aware that these are `peerdependencies` and include them separately in their `package.json`. it would be better just to remove them as `peerdependencies` and specify them as part of the install instructions for `npm2` in the readme.', "i've tried testing it using `npm link` but it doesn't work there cause the dependencies of the linked module are not copied over to the `node_modules` of the consumer. i think that's because of how `npm link` works. i don't know how to test this otherwise without publishing a module. anyway. i think that this pr is unlikely to break anything.", "it's not because of `npm link` its because of how `eslint` looks for/finds the plugins packages in the dependency tree. it doesn't traverse down into this packages directory looking for the plugins.", 'when you `npm install --save godaddy-style`. npm2 will automatically add the peer dependencies to your package.json as well. iirc.', 'i think calling it out in the readme is a good idea. but keeping them as peer dependencies is also useful.', '+1 to keep the peer dependencies. since they are installed automatically. npm2 users dont have to do anything special.', 'sounds good to me.', '"should mention the steps needed for es5 . .eslintrc```{  ""root"": true.  ""parser"": ""espree"".  ""parseroptions"": {    ""ecmaversion"": 5.    ""sourcetype"": ""script""  }.  ""env"": {    ""es6"": false  }}```"']