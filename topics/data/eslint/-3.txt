["it may be obsolete and for now i'm thinking it actually is. the second identifier should easily cover the one from the upper scope. are you sure that this error is not caused by your eslint config or smth?", 'haha i somehow missed the connection to eslint.yep. the tslint config matches the eslint one closely. the only exception is the rule about the `debugger` keyword which is currently allowed in tslint.', 'in the gist the parsing of jsdoc is missing i noticed. but basically it just uses eslint/doctrine to parse the docblock.', 'adambrodzinski did you end up finding a way to solve this without instaling `eslint-config-airbnb` globally? thanks!', "geekjuice thank you very much. that's precisely what i was looking for.it works. but i had to change `b:syntastic_javascript_eslint_exec` for `g:syntastic_javascript_eslint_exec` (note `g:`) and put `call syntasticeslintchecker()`. is that what you intended?", 'gunar if you use `autocmd filetype javascript :call syntasticeslintchecker()` to call the `syntasticeslintchecker`. it will set the `eslint` executable when opening the file only for that buffer. which can be handy if you jump around multiple projects in the same vim session. that is why `b:` was used instead of `g:` above.', "can't we close this? is there more work that needs to be done here?jacobrask that seems like a feature request for eslint-react", 'sounds like time for a pr into eslint itself! :-d', "what's missing from eslint exactly?", "i battled with that too. but here's how i settled on removing the labels:- `eslint-rule` vs `jscsrule`- hovering over the link- we can remove 37 instances of eslint and 36 instances of jscs- what's the use case where a reader wishes they could get to the eslint rule faster?", "migrate eslint-plugin-react to peerdependencies. shouldn't the react plugin be a `dependency` or `peerdependency` since it must be installed as a sibling of the config for it to properly list.", "that's a really good point. it's currently a devdependency.i think i prefer it being a dep instead of a peer dep - anyone have any reason why a peer dep would be more appropriate?", 'i was not sure of the difference between the two. so i would agree it is a dep.', "(if it becomes a dep. it wouldn't be a dev dep. but if it's a peer dep. it would definitely also be a dev dep to ensure tests can pass without explicitly installing the dep)", "oh yep. you're right.", 'so just to confirm. it will be added as a peer dep. this is because as a peer dep it is installed properly for use as a dep and a devdep. is this correct?', "kwelch as of npm 3. peer deps are not automatically installed anymore. i'm still not certain. but am leaning towards straight dep. if it _is_ a peer dep. it would have to be _both_ a peer dep and a dev dep.", 'so many errors for a single console statement. have a look at this screenshot  have been using your eslint configurations. i never got these errors which are showing in this screenshot in the past. can you help me with this issue please?thank you', 'i ended up making this both a peer dep and a dev dep. i may make it a straight dep in the future but for now this will suffice.', "remove peer-dependency from eslint-config-airbnb. can i suggest a small change to eslint-config-airbnb to remove the peerdependency on eslint? the reasoning behind this is:- some plugins like gulp-eslint compartmentalise the eslint dependency. but with the package-level peerdependency it means that we end up getting an npm warning at the root package that nobody can do anything about.- other packages may want to read/leverage the rule sets. and shouldn't have to take the npm warning to do so.its kind of implicit that the plugin requires _something_ that leverages the eslint ruleset standard. so i'm not sure that an explicit peerdependency is actually a requirement anyay.", "i'd like to summon vvo on this one :p", "ok let's wait for it then ;)", "from reading the docs. we can learn that keys are used:- for removing/destroying part of the node (which works with this pr)- for re-ordering elements instead of diffing more stuff (i'm just wondering what happens if content for a key changes)we will also need to convert non string values to strings (like in rating).what all started this was the eslint vue plugin which encourages the use of keys. i think the improvement in terms of perfs must be huge.that being said we now need to figure out how vue handles the change of content inside of an already existant key. i think that the content will only be refreshed if it is no longer part of the list. which i think is ok for results for example. for other elements like facet values it would be a problem if it doesn't update the counts. we would need to generate a key that contains both the name + the count. and i'm not even sure that would be sufficient.", "enable eslint. it will be nice to add eslint to this project.it is not that big to benefit from es6. so i don't think we need to bring in additional transpilation step. but having eslint checks will ensure consistent coding standards for this repo.rules may extends `eslint-config-recommended` and use `eslint-env=node`.", 'pull request #51 closes this one.airbnb styleguide includes a lot of rules related with jsx. react and other stuff which is not used here.in #51 basic eslint support has been added. i think we can have this as starting point in any case.', 'why not use typescript and tslint?', 'that will require additional transpilation step. which we think is overhead for relatively small amount of code we currently have', "true. an additional step. but as the code grows you have added error checks done by typescript. i wouldn't think so much as typescript having to traspile the code. i like to think more of typescript as as additional error checker. also. the transpilation doesn't take long.", "i don't think the code here will grow much. this is the loader for webpack. it does not aim to do complex things. i personally use typescript now in one of mine projects and find it extremely useful for refactoring code. but my code is approx. 50 times longer than the code of this loader. and i don't think we'll gain big benefits from typescript here. another downside of typescript is that after introducing it you'll bring in remap-istanbul for correct code coverage. which is not actively maintained and has several nasty issues.", "i'm not 100% sure about loading scripts from disk in engine.js. the initial idea was for all setup like that (e.g. parsing and transforming cli args) to happen outside of the engine to keep the core classes from growing. forcing the scripts to be a file on disk limits the flexibility of the engine as well. e.g. it can't be used in a web server where you post the data for the engine run. that's why i've eslint config for lib/core explicitly forbids use of the node 'fs' module. using require to load and parse files sneaks under the radar...that said. it's a good change over all. update taskdata to scriptdata and we'll merge. then we can revisit the loadprepostscripts decision before cutting the next alpha release.", 'oh i never noticed it is using jshint.   for the move to eslint. not sure which config tho. `eslint-config-babel` might be a good start.', 'i usually try to keep code styles inline with parent repos. so in this case `eslint-config-babel` is a perfect place to start  :)', 'chore(style): convert to eslint. > need at least two sets of eyes on this as it touches the scope of every variable in the loader.- remove all jshint and jscs related content- add eslint and supporting files- add eslint-config-babel ( override quotes )- adds eslint-config-babel deps for node v4- fix project lint errors- bump cache test timeout for osx node v4resolves #275 //cc danez abouthiroppy', "fyi - this is what the coverage should have been. we lost line coverage when reformatting with eslint as it's not big on single line functions. temporarily disabled the require for patch & project until this one lands.", 'lgtm with nits', 'lgtm. only two small things', "rgr. i'll get my dyslexia oops and the lint ignore updated shortly.", "replacing var with const/let also means node v4+ only. do we really want to open this bottle right now? i'm fine with doing a major release. but then we should think about what other breaking changes we can do.", "oh. i try to search for semicolon issues but forgot to include the closed issues  however. i don't think it's a good idea to install another tool (eslint) for such a simple use case.no semicolon should be the first class option of prettier. as a user. i want to make the code more pretty to look at. so i decide to use the tool. but. the tool should not mess up with my code (at least. it should not add more characters).", "i'm fine with it too! my only concern is the naming of all these projects. we have prettier-eslint. eslint-config-prettier. and eslint-plugin-prettier. in addition to any editor-specific integrations (prettier-eslint-atom. prettier-atom). maybe this is just part of this kind of work and combining all the tooling is going to make a lot of similar names.it would be good at least to have a list of all these projects and a short explanation of what each does.but yeah. let's get it in here. how do we do that? do we need to create teams and such and add kentcdodds to one of them so he can move it here?", '(note that eslint requires a certain naming convention for its shareable configs and plugins: `eslint-config-foo` and `eslint-plugin-foo`.)', "lydell. i'm aware of that. `prettier-eslint` is neither a config nor a plugin.", 'consider separating cli.. this would reduce the number of dependencies when `prettier` is used as a library (i.e. `prettier-eslint`).would you be interested in a pr for this?', "i don't know. i know there are some specific advantages but i think it makes the overall experience feel a lot more bloated. we are thinking through a server architecture right now though and we'll probably have a better idea after that's finished.", 'thank you for your consideration.it does take a bit more work. but `lerna` takes a lot of the hassle out of it.', "`lerna` is a whole new tool and more stuff to manage. :) not saying it's not a good project. but i'm hesitant to add a lot of boilerplate. i think i'd like to focus on core bugs right now before refactoring the infrastructure of the project.", 'by the way. i can also transfer `eslint-plugin-prettier` to the `prettier` org -- just let me know when all the logistics are figured out.', 'i think teams can be challenging to manage and you can simply as contributors on specific repositories within and organization. so once i transfer prettier-eslint over. i believe you just need to add me as a contributor with admin access and i can continue to manage contributors as in doing now. sound good?', "(just to be clear to others reading this. there are two things. `prettier-eslint` and `prettier-eslint-atom`.)i'm thinking we should merge `prettier-eslint-atom` into the `prettier-atom` repo. which i'm currently helping maintain. once we've done that. kentcdodds can deprecate `prettier-eslint-atom` and have all users migrate over to `prettier-atom`. this way. if you're an atom user. there's one package to worry about regardless if you use eslint or not and it's simple both for the users and the maintainers.i've gone ahead and already merged the `prettier-eslint-atom` code into the `prettier-atom` repo in a local branch and am most of the way done--i just need to implement some jest testing. then i was hoping jlongster could transfer ownership of that repo so that i could manage things like ci and other integrations and i would be held responsible for maintaining it (fixing bugs. reviewing prs. organizing and answering issues).", 'jlongster if you do the same things you did to kentcdodds to me i could transfer eslint-config-prettier :)', 'prettier now leaves the input as is```js    try {      body = json.parse(body);    } catch (e) {} // eslint-disable-line no-empty```', 'would it be useful if i transferred `eslint-plugin-prettier` to the `prettier` organization?', 'thanks vjeux. i am going to improve the docs for `typescript-eslint-parser`. it is definitely ready for something like this', "i've never written code without semi-colons so i'm not sure. do you know if there's a conventional way? good places to look would be the `standard` project and what the autofix rule of eslint does.", 'jlongster yes it is effectively the same journey we have gone on for eslint.initially. for us it was all about producing a valid estree and ignoring the types. then slowly but surely we added more and more estree-like nodes in for the typescript type information.wherever there was a precedent set by flow we attempted to use that. but in some cases typescript has extra syntax. we should be very consistent with this behaviour. but it is currently not explicitly documented.the typescript team have also requested more info about these typescript -> estree/flow mappings that occur and i am going to document everything we do in `typescript-eslint-parser`.it is not on any kind of roadmap for the typescript team. and they have their reasons for their current ast structure. but perhaps in the future typescript would even be able to support emitting an estree (+extensions) ast in the future (i.e. the tsc would effectively do the job of `typescript-eslint-parser`).cc danielrosenwasser for visibility', 'yup. just added prettier formatting to a project and caught this one thanks to eslint reporting unreachable code after the return :)', "i must say i am chuffed with how well `typescript-eslint-parser` has done with this  and it's a really useful project for me for finding edge cases in the parser", "thanks for the explanation rattrayalex my thought are a bit different. for me. the best thing with `prettier` is to have a consistent codebase on a project. no matter how many devs you got. and how they deal with indentation and code style. (i've got projects with lots of devs on it. already using eslint a lot. but was hoping that `prettier` will totally fix that. it does for a good part. but not totally)so i was thinking that the normal behaviour from `prettier` was to always have the same output for a same code even if the code is not indented the same way at first.i understand your concern. i also understand that people may don't like everything on the same line when the max_line config allow it. but i found it very strange to have multiple output on a same project depending how the dev has originally written the code :-)", 'emacs: make prettier use local .eslintrc file if exists. prettier seems to use global .eslintrc file when making customizations. i am not very comfortable with emacs. so can you please suggest on relevant configurations. i want prettier to use project specific.eslintrc file if it exists', "thanks. we need to make it not directly call require so that static module loaders do not see it yet. it also broke all our release generation.```jsrequire('typescript-eslint-parser');```to```jsvar r = require;r('typescript-eslint-parser');```", "apologies. must be eslint's autofixing.", "they use standard itself. i use prettier-eslint. much less rules (mostly no semicolon). my package also supports custom eslint rules just like prettier-eslint (but it's not documented yet). so you can override anything you don't like from standard as well. plus better cli", 'yes!so. one the constraint that prettier has is that it does not transform the ast. it takes an ast and prints it in order to generate the same ast back. this part is really hard to write correctly.what i want is to have a way to put ast transforms in front of prettier as plugins which look very similar to eslint plugins. text -> ast -> sort-imports -> function-to-arrow -> prettier -> text. writing ast codemods is really easy with tools like jscodeshift.this way we concentrate the complexity in the prettier lib itself and can expose an easy plugin api for people that want to customize it.', "think this is an awesome idea! providing these plugins are enforced to be **pre** prettier (prettier^2 ???) it doesn't seem this goes against the original no-config goals of the project. i believe that is what vjeux is implying so  some more supportive examples off the top of my head:- ensuring props are typed and destructured consistently across all of our components.- run eslint --fix as a pre step? :thinking:", "> run eslint --fix as a pre step? there's `prettier-eslint`. (which ribs it as a post-step) but it'd be sweet to see whether there were a way to hook them up at the ast-level so we could avoid double-parsing :)", 'switch from prettier-standard to prettier & eslint. this switches linting and code-formatting to use eslint and prettier directly instead of using prettier-standard. while prettier-standard was nice as a utility. using eslint and prettier directly offer better integration with tooling. and reduce nested dependencies.eslint uses the react-app config. which is not too opinionated. prettier formatting has a couple changes from defaults to prevent massive code diffs on style updates.', 'fix win ci. when setting up appveyor. i noticed the path of the file was repeated on windows when a babel syntax error was found.this is probably a babel-loader bug but i decided to go ahead and fix it.there is another error with the eslint loader where the path is also repeated.i think we can do a better work cleaning eslint errors (#15) so i let this one fail for the moment.', 'improve eslint messages. fix #15es-lint warnings should now be grouped correctly (showing the hints once) and not show the stacktrace of the eslint loader nor duplicated file information', "i rolled back your change.again. i'm really sorry about this. i messed up.if you don't mind opening another pr with your change. you can use the _sandbox project to test your pr.for instance. try to remove the `/* eslint-disable */` comment in `_sandbox/index.js` with only a tiny bit of screen space remaining. in this case. the console will not be cleared properly.ci should now build on both linux and windows and that will help discussing your change.", "your call.to detect if an error comes from the eslint loader. we have no other choice than looking at the stackframe to see if it's in there somewhere.so we use `error-stack-parser` to get a proper array of stackframes that we can investigate instead of a string.the error you saw was because we assumed that the stackframe would always have a `filename` field and that it should be a string.we could actually write the following check `tyepeof stackframe.filename === 'string'` but that would be a really weird precaution to take", 'add eslint', 'linting. updates eslintrenames `.eslintrc` to `.eslintrc.yml`updates code style in `readme.md`resolves lint warningssame as #3604 but with correct git history', 'ffle actually this has nothing to do with our problem but. you could add pouchdb in globals or .eslintrc', "'emit' function not defined. hello.i am creating secondary index like this``` javascript                var assetsearchindex = {                    _id: '_design/assetsearchindex'.                    views: {                        byassetnum: {                            map: function(asset. emit) {                                emit(asset.assetnum);                            }.tostring()                        }                    }                };```however when index is being built. i receive multiple errors```typeerror: emit is not a function```after some debugging i found out that i should not receive emit as param. because it exists in upper scope. when map function is eval-ed.i think this is not correct. because:1) it is inconsistent with temp index syntax2) map is using 'emit' which is not passed nor defined (this also causes eslint validator errors)thanks.vlad", "you should declare your view like this:``` javascript                var assetsearchindex = {                    _id: '_design/assetsearchindex'.                    views: {                        byassetnum: {                            map: (function(asset) {                                emit(asset.assetnum);                            }).tostring()                        }                    }                };```you must believe `emit` will be defined at the time the function is run. and it will. this is the way couchdb does it. and pouchdb mimics that for compatibility.", "speaking from couchdb side. there was a pr that makes emit pass as argument to map function. that's really not a problem. the problem is that there are quite a lot of other functions in global namespace that we provide: json object. tojson. isarray. sum. etc. and support of all of these will turn function signature into hell.", "optional keyword-only arguments may help here. but i'm not sure if js supports this feature or will in the nearest future.", 'sorry guys. but if it is possible to not use global variable. then one shouldn`t. this is one of the basic rules.it is also bad idea to make "json object. tojson. isarray. sum. etc" declared as global without any namespace. because those names are quite common and it will lead to conflicts with either other libraries or new browser api in future."optional keyword-only arguments may help here. but i\'m not sure if js supports this feature or will in the nearest future."this feature is not supported. but from my experience 2-3 arguments are not too much. in this case only 2 is enough.fiatjaf  - if you read my text above more attentively. you will see that i am aware that emit is defined on the run time (taken from upper scope).', "vladyslavgoloshchapov agreed. this is bad and not clear. suggestions how to fix this and not break the bc? (: so far general solution leads to function signature for 7 arguments (for map function) with no oblivious order and way to handle this.p.s. i spoke from couchdb side. so there is no reason to care about any conflicts or browser api changes. sure. if pouchdb follows the same. there could be some issues. but i'm not expert in this question (:", 'kxepal. sorry i am a bit new to pouch/couch. as far as i know only 2 params are required for map function: (doc (object). emit(function)). did i miss something?again if there are really 7 params - it is possible to combine them into one. js does not support names params. but that can be easily substituted with object:```fun.apply(null. {doc: doc. emit: emit. smthelse: smthelse ...})```i completely understand that this may be a big change to pouchdb. but having many globals is worse in my opinion.usually libraries export only 1 global variable. like $. but even jquery has .noconflict() function.akircher completely agree.', "vladyslavgoloshchapov ok. thank you. i'll throw this idea to couchdb ml and will see how it goes. leaving this thread for pouchdb discussion now (:", 'thank you for attention', 'kxepal thank you too', 'you can provide a function that returns a string for any message as well. allowing you to use real template strings: ```js({ path }) => `${path} is required````', 'just tested: `eslint --fix` handles this really nicely.', "tests use .eslintrc files defined outside the project. i've run `npm test` and found out that there are a lot of errors. after looking around for a bit i've found the culprit - the `.eslintrc` file defined in the root directory. after changing its name to something else so that eslint ignores my global rules. tests completed without issues.shouldn't there be an `.eslintrc` file in the root of the project so that stuff like this won't happen?", "the config that's used here is provided by lab. so we don't bother including it in the root of the project. i'm not sure i follow how it is that your eslint config took over from that one. however. as i'm pretty sure lab is designed to use its built in config whenever there isn't an `.eslintrc` in the root of the project.", "well. i'm not sure what is happening either :/but the fact is - tests don't work when there is `.eslintrc` in my root dir. and they do work when there is no such file.", 'what do you mean by root dir? like literally at `/.eslintrc`?', "i'm in the project directory. where i fire `npm test`.placing my `.eslintrc` in the project's parent dir. parent's parent dir. and so on (including the root dir - i'm on windows. so it's more like `d:\\.eslintrc`). causes some linting errors.", 'fix: add missing babel-eslint dependency. keithamus there was this missing dependency after provisioning.maybe worth a check against prc.', "i'd like to avoid provsioning babel-eslint as we only need it for stage 0 features. prc provisions default to be stage: 2 which doesnt require babel-eslint. we should conciously opt into stage 0/1 features imo.", 'remove trailing spaces. this pr removes trailing spaces for some files and sets`no-trailing-spaces` as a required rule in eslint.', 'i signed it!', 'fix eslint errors. there are some eslint errors on current master branch. and the errors will impact the development flow after i setup the travis ci. so this pr is to fix them.', 'swordsman-inaction. thanks for your pr! by analyzing the history of the files in this pull request. we identified mechanickim. zxcpoiu and bifrost to be potential reviewers.', "i couldn't find any eslint errors on this file.> eslint src/reducer.jscan you explain what error did you find and how did you find the error?", "sorry for letting this sit. this is really high value. we don't need to treat it as a plugin.i think we need to update the copyright headers to use the new format.what can we do to integrate the injected hooks with the main react-devtools hook? currently we are often blocked on updating react because we also need to update all the places things introspecting internals here. i would prefer not to fork that code since it might mean we have to disable this plugin to be able to ship react. integration would be better.", '+1 for this plugin. looking forward to using it! :d', 'jimthedev  hi.i had read your posts. and i still can not know how can i output the ghooks log to stdout ?can you help me ?', "production-izing esprint server. this pr introduces a bunch of refactoring towards getting the eslint server production-ready. namely. it: - introduces command-line arguments. - eliminates race condition for connection between client and server.- simplifies watching logic to use `sane`.- adds an eslint dependency-installation script to simplify development for esprintthere's still some things to do. as noted in todos throughout the code. which will be addressed in future prs.", "i'm not sure we have a sufficient volume of issue/pr activity to warrant bot assistance. ;)those eslint bots are awesome. though!", "upgrade eslint. clean up a bunch of eslint errors while i'm at it.", 'doug-wade - this seems really close to being ready to merge.  do want.  ping.', 'move `.eslintignore` to webpack directory', 'this might break `npm run lint:js:staged` - can you make sure that still works?', "when i run that. nothing happens. so i guess it's not broken?", "while checking this pr out. i noticed that our `.gitignore` is pretty much the same as our `.eslintignore`. at least as far as js is concerned. this means we can use our `.gitignore` instead of the `.eslintignore`. which saves us a full file.i went ahead and tried that. and it worked. so i've already pushed the change in be95f59d803124bbfc3d4038b3034beed7bba4ff.thanks for kicking off the discussion of removing cruft in our root folder. this has definitely made the boilerplate much nicer! sorry i'm not merging this one. but i'm sure you'll find something else to do in our issues. thanks for the contribution!!", 'when i build locally. eslint `react/prefer-stateless-function` error is not coming. it seems to appear only in travis. is that a newly added rule?', "huge fan of flow myself. but feel that it should be a low priority for rbp right now. there will be a lot of churn in the transition away from proptypes (and not restricted to code either: upstream. eslint presets will need to be updated) that can be side-stepped by allowing the dust to settle.definitely one to flag as being on the project's radar though.", 'eslint works fine without webpack dashboard', 'add rules for warnings on "semi" and "no-extra-semi" for .eslintrc', '.', 'eslint. i bumped to the latest eslint for another project and noticed that a lot of our rules are outdated. to simplify. i bumped this to relying on the airbnb eslint and overrode the "fine ipython. have your snake case sometimes" option.', 'i love seeing the codebase shrink!  thanks! :cake:', 'begin airbnbifying. fixed up some suggestions by our eslint overlords and cleaned up the new kernel reduction.', 'thanks!', "the last eslint bits i'm willing to touch.", 'wahoo!', 'rxdux cleanup. - pulling constants into their own folder. referencing them using `import * as constants`- cleaning up reducer model. creating root reducer- object.assign -> object rest spreads- pulling key ops into /keys folder- fixing linting. configuring eslint to use babel-eslint as parser', 'stricter eslint config. it would be nice to enforce a little more code style rules beyond `eslint:recommended` (example: `semi`).', '> (\'referenceerror: reference to undefined property "allowloaders"\'. in addallnormalized)that\'s weird because i don\'t see anything like this. do your use flux or typescript or maybe just eslint and run it against generated output of your project?', 'install eslint']