["docs cleanup: removes reference to unused import . small docs eslint-ish fix. the example code was importing `fork` but the code isn't referencing it.", 'justjake any plans to bump/republish the eslint-config-airbnb in npm?', "justjake that's sweet! thanks for the information!", "i'm seeing the same issue. is this set of rules intended to be used on top of e.g. `eslint:recommended`. or is it supposed to be standalone?", 'by that. do you mean merge in the walmart configs into this repo? or do you suggest switching to `eslint-config-defaults/configurations/airbnb` entirely?', 'i mean removing the js files in eslint-config-airbnb and replacing them with a copy of the files in eslint-config-defaults/configurations/airbnb', 'hzoo hshoff sounds great!', "adambrodzinski i think it's easier to learn what the language means by `const` than to create a linting infrastructure that understands `const` to mean something different. i think you might be able to write your own eslint rule for this; i suggest looking at the rules that forbid using certain things (like the no-eval rule. or the no-window-stuff rules) some of which look at how things are reassigned in the scope.sorry i can't help more =/", 'babel-eslint has it.', 'make eslintrc dependencies copy-pasteable. saves me **minutes** every month', "this was a while ago. so i'm not sure exactly what it as. but if the info parameter was extra meta data. it might not be needed.", "i agree -- if you submit a pr dropping this rule i'll happily merge it.", 'please add the id-length documentation url to your pr as a comment. following the style of the rest of the eslintrc.', 'remove jsx from eslint-config-airbnb/base. hi.jsx was present as an `ecmafeature` in base. so i moved it to the react-specific settings. also. because i would have had to add another loop for merging `ecmafeatures`. i decided to just use lodash to merge base and react. all the tests (still) pass.', 'justjake: i actually opened two. because i noticed that something was messed up. #506 and #507 thanks!', "i'd prefer to not have any dependencies -- just do the merge manually; it's fine that way imo.", "go ahead and make it explicitly 100 chars in your markdown update and in the eslintrc. we'll let the pr sit here for a day or two after that and then i'll merge after consensus/people forget", 'fixes lint. - uses eslint 3- integrates into codeclimate- updates readme- adds changelog', "more eslint fixes. #6436 did not include the tests.it's 95% `eslint test --fix` and 5% manual fixup where jshint was failing for no reason afterwards.before:```13067 problems (8871 errors. 4196 warnings)```after:``` 9417 problems (7356 errors. 2061 warnings)```", "i'm not going to argue with the output of `eslint --fix`. so you are free to commit those directly to master :)", 'i would leave the eslintrc in. sometimes you step into library code with a debugger and it prevents ealing from putting red swiggles everywhere if your project is using a different style. otherwise. lgtm.', "i agree with the article and general mantra. i however don't feel adding webpack or rollup is the bulk of the work in this case. if you follow the pr on the matter it's also replacing jshint with eslint. while adding prettier as a config base and formatter. migrating a bit of library code while most importantly replacing the umd closure reliance of the library. i am happy to play and evaluate rollup vs. webpack as a tool in the end.", 'i agree with dbemiller on this. can we commit the  `eslint --fix` changes. add exceptions for the ~300 existing errors and enforce strict checking in travis (add the `lint` gulp task into `run-tests`  which travis invokes). ?', 'add .editorconfig. add an editor config to automatically fix some of the rules we define in eslint.', "stupid spacing.  that's what i get for making changes against a remote box instead of my local copy of vim with its properly configured eslint...", 'do you use eslint? can you push an .eslintrc file somewhere. so i can use it for the plugins?', "kof i have finished with the rewrite/repackaging of the official plugins + jss-examples. i will make the prs tomorrow.some questions:1) jss-debug doesn't work. there is no `rule.options.name` property. how do you want to proceed? i personaly don't use it.2) in jss-examples. i am handling dist files for plugins like you do with jss.js (ie. copy from node_modules to the root dir). do you want to put all copied files to .gitignore?3) do you want to convert all urls (examples. demos. external libs etc.) to https. if it's possible?4) i used the .eslintrc file of the jss repo. are you sure about the the `eqeqeq` rule? a few `==` can be left untouched. maybe it's better to disable that rule.for consistency i have changed the indentation to 2 spaces in most files that i edited/moved (html too). i think it's better to have the same indentation everywhere and 2 spaces is what you define in .eslintrc. it is better to have some more diffs now. because the files are small and there will be many changes anyway.", "so far i'm not seeing anything but i'm also not sure exactly what i'm looking for.  i added a line to show the key when `defaultrenderer#componentwillreceiveprops` determines they are different:```console.log('dispatchfocusaction'. nextprops.navigationstate.key);```so far it logs the same keys and fires the same number of times with your code and original.there is also a typo `getscenekey` vs `getscenekey` and an eslint issue.do you have a case i could try with the example app or is this still in the investigation stage?", 'use semistandard. we have some code standards in place. but not enough.  we have disabled many warnings which we probably shouldn\'t have. to avoid changing too much code when we picked up eslint originally.  i\'d also prefer to use a widely-used style instead of a custom style.- install eslint-semistandard-config and all necessary dependencies- update `.eslintrc` to be just `{"extends": "semistandard"}`- `eslint --fix` everything- manually fix everything elseif anyone disagrees. please let me know.  unless that disagreement involves "semicolons"; if so. please keep it to yourself.  :smile:', 'great move!', 'new eslint config based on airbnb presset', 'peredelal podkliuchenie extends. teper\' mozhno pisat\' "extends": "eslint-config-rambler" v  .eslintrc stavitsia tak zhe.potestirovat\' mozhno na "git+:inthemon/dotfiles.git#master"', 'konstruktivno ) khotia ne - destruktivno dlia glaz )', 'it happens when there are 2 or more _processes_ active in one console _thread_. (not sure if i call it properly)for example. in my `package.json`. i\'ve got commands: ```  "scripts": {    "start": "node server.js".    "lint": "eslint src".    "gulp": "gulp".    "dev": "gulp | webpack".    "webpack": "webpack-dashboard -- node server.js"  }.```if i call `npm run dev` - issue occurs (there is also `gulp` command running). if i run `npm run webpack` - there is no issue (`webpack-dashboard` is running alone).', "i've reviewed the text. thanks!importing bootstrap.js is harder than it should. because ember is moving away from bower and adopting yarn. but it doesn't allow us to import any file from within node_modules. and if we use browserify we need to use something like ``import bootstrap from 'npm:bootstrap``. which triggers a warning on eslint. since ``bootstrap`` is never used. so the only way i could resolve this was putting bootstrap.js inside vendor's folder and importing it from there.since i'm quite new to ember. do you have a better way of doing this?thanks", 'refactor popup filters options. - refactor `popup_filters` options to allow a literal object or a boolean. basically going from a flat prefix based structure to a more structured one.- enforce `semi` eslint rule', 'i am -1 on this until there is parity with `eslint` and `jscs` for autofixing. this is something the `jscs` team is working on now that they have joined forces with the `eslint` folks. going to leave this open as a way for us to track their progress.', 'i wrote a pull request that should fix any case issue.i added an eslint rule that will raise a lint error on unresolved dependencies (case-sensitive).i also had to do some changes to the webpack dev config to be able to do `npm start`. see #243', "some of those points can be addressed by wiring up the `eslintrc.json` file to the build so that any pr that does not conform to the rules automatically fails as soon as it is opened.it won't be possible to address all of the issues in that sense but it will certainly cut down the efforts on your side while doing code reviews.also. i noticed that the contributing.md file could be in need of some updating from you guys. it mentions tasks like `npm run dev`that are not defined in the package. so perhaps this could be tackled as part of this task as well.", 'correct! whatever we can address with `eslint` should be done in that fashion. but i think here. there are several things that are more stylistic and not always easy to spot with `eslint`. (altho arguably you could do almost anything with eslint).', 'linting and argv processing. added use of seneca eslint config and fix processing of argv (closes #177)', 'eslint cleanup to use eslint-seneca-config. .eslintrc contains rules that should really be in seneca config']