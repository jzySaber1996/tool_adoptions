['doc eslint fix', 'craigmichaelmartin thank you :)', 'create basic documentation before open sourcing. ### rationalecurrently. it could be hard to get an outline of how the source code is structured. we should write down some guiding readmes and wiki articles to help with navigation and exploration.### acceptance criteria- [x] root `readme.md` gives an overview of the file structure- [x] each package has its readme.md that tells why that package exists- [x] wiki article on code style is created which tells about principles which are not checked by eslint. i.e. high-level principles like the functional style.', 'would you want the same for jscs rules as well or no?', 'hzoo yes please :-)', "i'd love to hear some more opinions on this - personally. i don't find dotfiles difficult to work with. and i already have to configure my editor to show dotfiles to work with `.eslintrc`. `.gitignore`. and many others. i'm a weak +1 in favor of this.", 'thanks for your contribution! `eslint` has since been updated.', "tomekwi one comment. plus a rebase. and i'd love to merge this!are there any eslint rules we could include/enable/link to that would enforce this?", "gah i'm an idiot who didn't turn on notifications for rackt/eslint-config-rackt.", 'closing this for now - please follow up if it turns out to be an eslint bug.', 'the `camelcase` option defined in `eslint-config-airbnb` has `properties: \'never\'` which is inline with "camel case is preferred" but not mandatory. thanks for your responses.', 'hm. it should give you an error when doing that. that might be an `eslint` bug?', 'a followup pr that ensures the eslint rule matches this updated text would be awesome', 'link to the eslint rule for radix in parseint', 'maybe we should add this to eslint then?', 'this looks great! perhaps a link inline to the eslint rule docs?', 'rhbecker absolutely the eslint config and the styleguide should be in sync. `console` should never be permitted in production code. so a pr to add that into the styleguide. and link to the rule. would be great!similarly. adding comments in the rule configs that point to guide sections would also be a very welcome pr.', "ljharb ### adding console guidance to the style guideare there any instructions for contributing additions / edits to the guide text?for example. i don't see an existing section that this addition would belong within. so. would i add a new section? if so. would i just add it to the bottom. or would i squeeze in between existing sections? the latter seemingly makes more sense. but doing so would require bumping all of the numbering in the subsequent sections. which would be a pita with respect to my cross-referencing idea over in the eslint config comments.also. if the guide is going to instruct against using `console`. it should probably offer guidance around alternatives. do you follow any particular standard practice for common `console` use cases?### adding guide index references to eslint config commentsthis one seems more my speed (i'm not much of a guide writer). but the issue i mentioned above makes me hesitant to invest time in this - i.e. if guide index numbers are going to get constantly bumped by contributors. and without guidance from the stewards. the comment references are going to get really useless. really fast.### regarding strict?what are your thoughts on the suggestions i made for tweaking how you reflect your usage of babel? this one seems the most straight-forward for me to pr.", '> _it\'s kind of a judgement call - although yes. we don\'t want to change numbering because that would break links. [...] it\'d be great to move away from numbers. so that reorganization doesn\'t break links._so. i\'m not sure what to do here. then. any ideas?> _why would there be an alternative in production code to debugging statements?_some folks may be using `console.log()` or `console.error()` statements within a node.js app in order to log to app or error log files. or to return responses to stdout / stderr for cli apps. suggesting a "good" approach seems to be a theme in the guide. if you think it\'s sufficient to simply instruct against. i can be fine with that.> _you\'re welcome to open a pr so it can be discussed - i don\'t really think it\'s needed though. using es6 without babel isn\'t realistic at this point._fair point - i\'m just opposed to rules in default that don\'t correspond to stated guidance. it blurs the lines as to whether the shared eslint config reflects the guide or the usage of the guide by airbnb. perhaps adding guidance is the better approach here. but seemingly one or the other should happen.', "obviously. it can get pretty subjective. but i don't believe the issues i'm raising are purely ideological. in my experience. the more superfluous code / config you litter a code base with. the harder it becomes to maintain. and the harder it is for new users to understand. there's also risk that some of that litter ends up conflicting with new additions. etc.as i said. i'm happy to do the work. but i don't want to bother unless you're on board. and i also need you to vet whether the stuff i'm saying even makes sense. i'm still new to eslint and your repo.", 'can we make this link to the relevant eslint rule(s)?', "i'd recommend against using `this` in tests. if possible - doing that means you could use an arrow function.as for the jest organization. that's an inherent flaw with it - perhaps you could use two separate eslintrc/eslintignore pairs. one for implementation. one for tests? otherwise perhaps that's not the best way to organize tests.", "i've added the links.right now the linting for eslint-config-airbnb shows 148 errors. would you accept a pr which fixes those?", 'running `npm run lint` in `packages/eslint-config-airbnb` results in 148 errors.', 'i wonder if it might look a little cleaner to put the jscs rules and eslint rules on the same line?', 'i am adding the official vue plugin since it works so we can merge this :)', 'merge?', 'gogogo', 'use vuejs/eslint-plugin-vue', 'this is in `eslint-config-algolia/vue`. right?', 'no. we need to add it. but i think there were some issues with it. but now that vvo cleaned up the repo. maybe we can try again.', 'support setting global option at root of webpack config like eslint', 'a list of function names embedded within prettier itself seems both fragile and also likely to lead to  anybody experiencing a false positive to have a bad-time. perhaps some sort of in-file comment along the lines of `eslint-disable`?', "allow customizing args sent to prettier-command. we require single quotes in our eslint config. which conflicts with prettier's default rules. now the `prettier-args` custom variable allows anyone to set the arguments passed to the prettier command when it runs.might be nice to eventually build this up out of individual customization options (ie. `(setq prettier-single-quote t)`). but this is a pretty simple approach that works for now.", "oh. great! i haven't gotten around to polishing emacs integration yet. so thanks for working on it!", "vjeux thanks. i didn't realize this repo was still so young. i am using it in my work codebase right now. so i will keep opening issues as i come across things that conflict with our (fairly standard airbnb) eslint config.", 'i might implement something for myself for the time being. so i can keep my current project in line with our eslint config (if i can do it quickly enough).', "this is an opinionated formatter so we're not going to keep adding options so that people can still maintain their own formatting rules. i don't recommend using this with eslint's formatting rules. you should get rid of the formatting rules and keep the other rules that enforce semantic behaviors.i know that's not always possible for existing projects. and we're trying to find a balance for adding a few options to help adoption. but we're also not going to add a lot of configuration.", "yea. that is what prompted me to throw this question out there. i was editing package.json and .eslintrc.json. etc. and found myself hitting format.i can understand that there are likely many other ways to already format json via editors. though. it'd just be a question of whether or not it's low hanging enough for prettier to add or not. *shrug* honestly i hadn't ever formatted my code automatically until prettier. so i've not looked for json editor plugins.", "i'm interested in this as well.i just made a separate eslint configuration based on eslint-config-airbnb that turns off all the rules that deal with style. we currently only have a separate npm script command that needs to be run manually to reformat the whole app.has anyone integrated prettier to a ci workflow? i'm thinking a setup where the ci fails if running prettier would yield any changes. or would this make any sense?", '(disclaimer: i haven\'t yet dug too deeply into this project)not sure where the right place to bring this up is or if its already been discussed. but one thing i like about tools like eslint is that i do things like make a rule that disallows multi-line ternaries.with prettier (and please correct me if i\'m wrong). what i get is consistent formatting of the multi-line ternary. but no way disallow them or "fix" them into if/else\'s?i guess i could use a small set of eslint rules and run them in combination with prettier to get everything i want?is this project\'s purpose to totally replace eslint. or do you think there is room for both?', "possibly crazy idea for those who already have an eslint workflow set up:what if it was possible to create an eslint plugin for prettier. then. running `eslint` would fail if a file is not formatted with prettier. and `eslint --fix` would fix would it. i've found that i'd like to run prettier on the same set of files as in eslint in a few projects.", 'mention eslint-plugin-prettier in related projects', "some random thoughts on the subject:the first attempts at solving the nits/formatting problem look like `eslint --fix`. where you would first look for bad patterns and then make them better automatically. the great thing is that if the user isn't breaking the rules. he can keep the formatting s/he wants. however. in practice this is very hard to implement properly outside of particular cases.the second iteration is something like refmt where you reformat all the code with no exceptions. this is great and consistent but it is very inflexible. developers want some control over how the code is formatted. #7 is an example that exploits the fact that empty lines are added before comments. so the person puts some random comments in order to make the code breathe.i think that in order to succeed we need a middle ground. where most of the code is automatically formatted but the user still has some control for cases where it cannot be always be automatically formatted in a reasonable way. we've done this successfully so far for empty lines. and objects may be a place where this would work as well.", "i noticed this #501 problem on second run :). and didn't notices status code 2. eslint show me an error.", 'mention eslint-config-prettier', "i appreciate the quick response. will defiantly keep you updated with any issues i find. this is a great tool and i do want to see it perfected.since i started using prettier i've been adding eslint ignore rules that were broken by formatting. i chose to just ignore those errors and go with prettier formatting blindly. i will check the list and see if anything is worthy of enhancing.", 'neat. thanks!', 'thanks for taking the time to respond.i definitely agree with your concern. that is what i was trying to put into consideration when writing "exceptions". keep in mind this isn\'t meant to be an all-or-nothing topic or change. just wanting to throw some ideas out there.i started with just the object and arrow example. but (like everything else). the feature / topic creeped up.personally i have found myself wasting more time making objects/arrays fit around the data. which is why i think having them always expanded is preferred in the long run.i had the same issue with the arrow parens. especially when converting a project to flow.should be noted i use airbnb\'s eslint config (now slightly modified) with my personal projects.', "there are a combinatorial explosion of different ways to mix syntax. we want to keep it as consistent as possible. so your solution looks good to me. there are many places where the `eslint-disable-line` is going to be problematic because this printer does not work like that. we are going to break things across multiple lines when we need to.my suggestion is to turn off rules that you find yourself disabling. i don't think they are worth it.", 'this is likely going to be hard to fix because parenthesis are part of the expression and this is a leading comment. so it is printed as intended. it is not a goal to be able to make sure that all the flow/eslint disables keep working.', "feature: read eslint config. the existing config options can be inferred from an eslint config if one exists. there's an eslint js api for getting the config applied to a given file. and it follows extends and all that. it could be enabled by default or not. and overridable from the `prettier` args.this allows prettier to be used without duplicating the style rules. and doesn't affect projects not using eslint.", 'thanks for the link. looks like this was already decided so closing this.', "s-ilya oh. i see. i guess it's better to reconfigure eslint then. thanks  closing.", 'i have a project where prettier consistently produces inconsistent output...code looks like:```  ...  /*eslint-enable */}```and every time i run prettier. the format changes (adds and removes a newline)', "i'd happily move eslint-config-prettier to the prettier org.", 'a small optimization hack - i noticed that there are a bunch of places in my production javascript where my development env folder path is being included due to react-hot-loader.if you use the uglify plugin in your webpack production build you can add a global def in the uglify config to drop this stuff out.the react-hot-loader code itself could probably be modified to take better advantage of this by wrapping more of the module itself in `if(__react_hot_loader__)` checks.```new webpack.optimize.uglifyjsplugin({    compress: {        warnings: false.        screw_ie8: true.        drop_console: true.        drop_debugger: true.        dead_code: true.        global_defs: {            __react_hot_loader__: undefined // eslint-disable-line no-undefined        }    }}).```', 'also it would be nice that webpack config can be extendable and children configs may override fields of the parent.the good example of this approach is `eslint` and its `.eslintrc` file.', 'style(eslint): add ci linting. fix code style errors. - add eslint configs and travis `before_install` hook for linting.- fix code style errors to follow the nativescript coding conventions.', 'is there some coding style used by telerik that wants **"** (double quote) instead of **\'** (single quote)?', "it appears that the tmpdir issues might have been system related as /tmp/eslint already exists owned by user iojs. i'm manually changing tmpdir and trying again.", 'fix(build): eslint error in express config. fixes a trailing space eslint error in the express config.', 'merging. since this is a quick & obvious fix.', 'hum okok. maybe not important for mean. but for projects that use mean with different developers. so in the wiki. lirantal i saw this as the rules of csslint. as eslint :)', 'has linting errors (eslint changed around one the recommended config or something).', 'fixup eslint no-unused-vars errors. changes proposed in this pull request:- eslint no-unused-vars errors', "extend eslint to add custom rules. hi. is there any way to extend eslint in order to add custom rules ? i've tried to add .eslintrc to the project but it's not used when running `gulp check`.thanks.", 'combine ui repos & streamline dev setup for ui. there are too many ui repos leading to an unwieldy development setup for anything touching ui work:- parity-sysui-app- parity-sysui-chrome-extension- parity-dapps-home- parity-dapps-wallet- parity-dapps-builtins- parity-dapps-minimal-sysui- parity-dapps-home-rs- parity-dapps-wallet-rs- parity-dapps-builtins-rs- parity-dapps-minimal-sysui-rsthese two might reasonably be argued to be common-components to other projects (though until other projects use them. it may be reasonably to keep them together with the rest):- dapps-react-ui- eslint-config-ethcore (empty?)dev setup steps for topbar. wallet. extension. signer-ui. and common components should be made easier. preferably a single repo and a single build step.consider placing everything in the main parity repo under `ui`.', 'imo anything that is involved in the same build process to the same executable should really be in the same repo. i see no need to create artificial repo barriers based upon language. e.g. you don\'t use that same argument to state that js should be kept separately to html or that in a qt project the qml be kept separately to the c++.extra repos mean extra faff. they come at a very high price in terms of developer time - had it not been for the ridiculously complex and largely undocumented task of setting up and integrating a ui build environment i would likely have contributed substantially more work into the ui and prevented the need for reporting highly detailed. yet in my eyes trivial. ui issues and wasting everyone\'s time.i would go further than "not mixing compiled js code". and not store compiled js code anywhere. rather it should all be done locally via a build script and never touch a permanent place. let alone a github repo! i don\'t know of any sensible project which splits the build and requires the devs to place intermediate results into their own set of repos.', 'ping :+1:', '(sebmarkbage)', 'lets get this in. can you rebase this branch for us?', "something that just occurred to me (but this doesn't need to be held up investigating it): could we use directives in the comments to take node variables back off the ignore list for the browser file. the way one can use directives in the comments to add variables to the ignore list for specific functions or files?", 'kt3k thank you for the contribution!', 'thanks for merging!', "hi. thanks for the bug report! this is a bug in `ember-electron`  and not your fault. i'm working on fixing it as we speak. to fix it in your application. just add `/* eslint-env node */` to the top of your `ember-electron/main.js`.", 'if the `.eslintrc.js` files in tests and the blueprint do not work and need to be replaced by the inline comments we can safely remove those files.', 'airbnb eslint', 'oterral you also have some eslint errors that need fixing.', "i'm struggling to understand the scope of `react-server`.  as far as i can tell. we seem to believe that we are going to manage all of the complexity of the build for every client of react-server. which i think is unrealistic. as it requires new clients that want to do something we haven't considered.  consider a client that wants to set up a react-server instance with browserify. clojurescript. and support a dev. test. staging. perf testing. and multiple prod environments (say. for instance. they would like to have different build for china vs the us).  as i understand the proposal. that client would need to open a pr to what is you are proposing would be named `react-server` to add browserify support. clojurescript support. jshint for linting. and to change the existing way of handling environments to allow them to use `react-server`.  as i understand it. you'd either fork `react-server` and use that (which would be frustrating when you want to get new features. since you'd have to rebase onto/merge `redfin/react-server`). or you'd use `react-server-core` and lose any other configuration that is exported by the proposed `react-server` solution.  there's also a question of support -- in our use of react-server. we've had to spend a lot of time debugging webpack errors.  if we hide all the complexity of webpack in the `react-server-cli`. when there _is_ an error (which although i would love to guarantee would never happen. i think realistically will). then rather than using the existing webpack documentation. clients would have to rely solely on the code from `react-server-cli` to figure out the source of their failure. fork the cli. build and deploy with the fork. and then submit the fork upstream.also. since we babelify the code for clients. how would clients opt in or out of language features?  do they simply have to accept the variant of es6 exported by `react-server`?  or what if they want a different set of webpack plugins?  or a different set of eslint settings?  do we plan on consuming the config files of every possible bundler. transpiler. linter. etc as part of our api?", 'fix(eslint): allow to use functions before define', 'stepancar da. konechno. strelki popadaiut pod peremennye', 'revert "all yaml all the time". reverts walmartlabs/eslint-config-defaults#31 - see #32 for details. it appears that eslint itself doesn\'t appropriately pull in yaml files.', 'divmain ^^ this sucks.', ":(i may offer a pr to eslint so that this isn't necessary.", 'the way eslint pulls in config is a little wonky. great find! thanks!', 'add eslint. not activating eslint in `npm test` yet. as it would fail horribly on this branch.', 'edwellbrook all done', 'i was going to say the same + i think current implementation of `shouldcomponentupdate` is broken anyway. for eslint you should just use `babel-eslint` as the parser', 'add eslint infrastructure', 'one minor comment. otherwise lgtm', 'the pr fixes all exiting eslint issues in the project.', "add eslint check to demos serve task. <!--- provide a general summary of the issue in the title above -->## expected behavior<!--- if you're describing a bug. tell us what should happen --><!--- if you're suggesting a change/improvement. tell us how it should work -->we should not allow contributors to push when the eslint rules are being broken.## current behavior<!--- if describing a bug. tell us what happens instead of the expected behavior --><!--- if suggesting a change/improvement. explain the difference from current behavior -->right now. it is codeclimate who is showing the issues.## possible solution<!--- not obligatory. but suggest a fix/reason for the bug. --><!--- or ideas how to implement the addition or change -->adding an eslint check on our webpack setup. the same way we are doing in britecharts-react."]