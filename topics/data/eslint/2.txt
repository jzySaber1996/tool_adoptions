['ok. so one need to be careful when dealing with sparse arrays - empty indices are non-enumerable and `deepequal` uses `object.keys` under the hood. therefore we cannot simply compare explicit undefined with the implicit one in sparse array.personally i think that just suppressing eslint warning is enough and no more trickery should be added to that test.it has also an interesting side-effect for our use case - returned array (if not destructured) remains sparse. so it potentially could surprise someone. but until somebody reports this with some valid use case why he/she would like to have it non-sparse. i dont consider this much of a problem.thanks for patience and the pr. gonna merge this in a moment.', 'that would be awesome. could you create a pr?  just create a directory called `examples` (thus it will be ignored by npm as configured in the `.npmignore`). please also setup eslint for the examples directory.', 'for the `hasownproperty` thing. you can put `// eslint-disable-next-line no-prototype-builtins` on the line above it - interactionmanager created and owns the object in question. so we can be pretty sure that it has the `hasownproperty` method.', "i've add the parameter  in `apply` of filter.js . but eslint failed. because it doesn't be used.", 'fix intersection and union flow types. this is basically #97 but without throwing an error.i also enabled to eslint rules to detect undefined and unused variables.closes #97', 'thanks for that! i added two comments which i guess don\'t show in here because the branch got deleted. but they should be visible when you click on "files".', 'upgrade sl-eslint dependency. and update any files as necessary to comply with new rules.', 'i had the same problem.the problem was that **some dependencies were not included in the distribution directory**.i solved the thing by updating my `excludepatterns`.``` json"custom": {  "excludepatterns": [    ".git".    "node_modules/eslint"  ].}.```to``` json"custom": {  "excludepatterns": [    ".git/".    "node_modules/eslint"  ].}.```indeed patterns do not seems to work as we could expect: `".git"` was preventing the dist to include `github` folder and `github.js` file.is it a bug ? maybe `excludepatterns` should require to define patterns in a more restrictive way.though in the building step. when creating `_serverless_handler.handler`. if something check that function dependencies exist in the dist folder. it **should return an explicit error** when some are missing.', 'it looks like you have `repos/spa-admin.eslintrc`. but your actual project is `repos/spa-admin/`. you want an `.eslintrc` in every project with "root" set to `true`. so that the project-specific config is not affected by a config file higher in the directory tree.', "there's already an eslint rule in our config that prevents dupes. so there's no need for a human to ever worry about that anymore.", "thanks! the test failures are due to an eslint bug. so i'll merge through it.", "they are intentionally false. because you should not be importing anything except `dependencies` in your app. in your test directory. you'd probably want an `.eslintrc` file that enables `devdependencies`.`optionaldependencies` and the requisite lazy loading are an antipattern anyways. so if you need that in your project. it's appropriate to override it in your own project.i'll be enabling this rule soon as well.", 'constant conditions in generators. currently eslint warns user if constant condition like `while (true) {}` is used. which is pretty understandable most of the times. although it could be really useful when used inside of generators. for example in sagas. i think generators should be an exception to this rule?', 'this style guide discourages any use of generators. for any purpose.', 'i assume if you remove "extends airbnb" that it no longer errors out?if so. this sounds like an eslint bug itself. not an issue with our config plugin. can you file it there?', 'yes. the transform would go in whatever runs babel. you need to add a root `"parser": "babel-eslint"` as well.this isn\'t the proper venue for this kind of help tho - please feel free to join babel\'s slack. or our gitter channel. or freenode on irc.', ">  in your test directory. you'd probably want an .eslintrc file that enables devdependencies.will be helpful if mentioned in the document.", "i also think that it could be better if not all rules to be like errors. my point is following: i'm using eslint in atom to see if i have any errors in my code and also i use webpack with eslint-loader and noerrorsplugin. so when there is any eslint error in my code - it does not compiling. which is good. because it saves a lot of time when it detects an error that makes unable for my code to run. but the thing is that sometimes when developing i need to insert console.log. or i need to quickly add an element to array to test something (and sometimes i'm doing it too quickly and not adding comma in the end of a line) and in this case webpack will just not compile my code because eslint tells that there are errors. but from my point of view they are more likely warnings. not errors. because code will work. but it will be just not perfect at this point.i think that it would be much better if all critical rules which can detect places that can break something to be like errors. but for other ones that are more like stylistic - everything that is not good to commit. but that will work - to have warning level. so it will more like informative. btw. for ci systems you can set --max-warnings 0 flag for eslint and it will fail build even if there are any warnings detected. so it is possible setup it correctly when building project. but it is not so usable for development in some cases. what i'm doing right now is just redefining some rules in my local .eslintrc. setting some rules to warning instead of error", '`guard-for-in` just requires any conditional check - often it false-negatives on places where people aren\'t checking "own property". precisely to allow the use case you mean.if eslint added a more specific way to block for-in loops or an easier way to override it. i\'d be all for that - but imo the annoyance of overriding it for a small handful of edge cases is worth the benefit of never having to see a for-in loop anywhere else :-)', 'the main reason for me submitting this pull request is that the latest documentation for eslint rules all use the string enums rather than numbers.', 'add .eslintrc to project. this continues our standard of good project defaults.', 'add nin global variables to default project eslint', 'remove plugin-babel. obsolete since eslint-config-babel 4', 'looks good. thanks!', 'do\'h! i just realised the message `"cannot read property `\'loc\'` of null"` is not coming from that function. it\'s from somewhere in `typescript-eslint-parser`.', "inconsistent new lines on function arguments. i'm using prettier with eslint plugin and have the following rules in my eslint file:```js'prettier/prettier': ['error'. {  printwidth: 100.  singlequote: true.  trailingcomma: 'es5'}].```it looks like both this:```jsconst settings = merge(    {}.    {      array: ['lorem ipsum dolor sit amet.'].    }.    options);```and this:```jsconst settings = merge({}. { array: ['lorem ipsum dolor sit amet.'] }. options);```are valid even if the second goes over the max-line length.is there a way to force consistent line breaks? or have it always break when the second example overflows the max-line length?", "`const settings = merge({}. { array: ['lorem ipsum dolor sit amet.'] }. options);` is exactly 100 columns. so it stays there.", "what about the trailing commas? shouldn't the second one be broken into new lines for the array to get trailing commas?", "trailing commas are added when it's multiline. we don't put trailing commas when it fits in a single line.", 'when this patch is gonna be released? i hope that this will result in prettier-eslint to be updated because right now it causes conflicts with eslint config.', 'hi all.maybe i am missing something. but this seems to be possible...i am using visual studio code. with the prettier extension (and eslint extension). and i can achieve this for javascript / javascriptreact by setting the vs code settings to `"prettier.eslintintegration": true`. and then setting rules in `.eslintrc.json` such as:        "space-in-parens": [            1.            "always"        ].this works. even if i disable the eslint extension. or set eslint to be disabled in vs code preferences. perhaps this feature has been added to prettier since this issue was closed..?but i am also using typescript. and trying to keep my styles in sync between javascript and typescript. and i can\'t find a way to use eslint settings in prettier with typescript. and it seems. as mentioned above. no option to set this _directly_ in prettier.has anyone found a workaround (or alternative to prettier) that supports something like this for typescript? if only prettier settings supported specifying this behaviour. it would be possible to use it as the single style formatter... sigh :)', 'charlike prettier has never outputted that. it must be an eslint rule with autofix', 'i added this rule in my `.eslintrc` to not block my workflow::```"max-len": ["error". 120. { "ignorepattern": "[^\\\\n\\\\r]{115.120}\\\\{(?:\'|\\") (?:\'|\\")\\\\}" }]```', 'i can totally see people writing eslint rules to forbid this syntax :wink:', 'purge usage of `.eslintrc`. because `.eslintrc` is deprecated and should not be used anymore.', "didn't know that. thanks.", 'i already had `eslint-config-prettier` installed but it seems i had to remove that extra `indent` config as well.`./node_modules/.bin/eslint-config-prettier-check` helped.thanks!', '> i already had `eslint-config-prettier` installed but it seems i had to remove that extra `indent` config as well.yep. rules that you yourself add to your eslintrc always override every config that you `extend`. (eslint-config-prettier can only override other configs you extend. but not your own rules.)> `./node_modules/.bin/eslint-config-prettier-check` helped.correct. this is exactly what that cli tool is supposed to help with! glad it was of use to you.', 'cannot format json-like files such as .editorconfig. .eslintrc. files like .editorconfig. .eslintrc. eslintrc.json (mainly some kinds of config files) have a similar format as json. but they do not follow the strict json rule. for example. these files allow comment.therefore. if i want to format a .eslintrc file which contains some line comment like ```// comment```. the formatter would report ```(json-to-ast) cannot tokenize symbol </>``` error.is it possible to allow comment in such kind of files?', 'how do i disable a prettier rule on an individual file.. is there a way to disable a prettier rule for an individual file? for example the the default printwidth is 80 characters. is there a way to disable this rule or add a custom rule for an individual page?it would be nice to be able to do something like you can with tslint or eslint./* tslint:disable:max-line-length */', "can't merge this as it doesn't satisfy the `peerdependency` from `eslint-config-airbnb-base`.", 'feat(app): git ignore *.log files. a small change that avoid commiting an `npm-debug.log` file when for example the command `npm run eslint` fails', "an [editorconfig]( exists in the repository. which addresses code style. the fact that you ran into this issue is a documentation problem. in my opinion. i'm not sure if `jsbeautify` is useful. but the `.eslintrc` changes are good :+1:", 'thanks', 'note that #342 changed eslint in package.json to be able to pass tests so you might need to rebase on top', 'i deviated from scss-lint\'s approach by allowing per-line (like eslint) and making the block syntax more explicit.gist of approach: run a rule that returns a mapping of where rules are disabled (both globally and per rule). filter the results for each "file" via that mapping. this approach definitely relies on correct line numbers to be reported from rules (i\'m sure a bunch of bugs will follow).', "maybe with this much developer attention on this issue. now is the time to move to the single-traversal approach to our core functionality.i'm not sure how you could disable certain rules on certain lines right now without modifying all rules to check for comments or having to process all lint warnings after all the rules have run. if we perform a single traversal like eslint. we can simply track which rules are enabled and disabled as we traverse.", "updating the cli to work the same way as eslint in regards to logging errors by default and introducing a silent flag would also be good here as we've discussed it briefly before.", "looks great. thanks! i'll follow up on eslint issues in another pr", "(#5069) - fix eslint rules. a few changes here to better match our previous jshint rules:- `function () {}` not `function() {}`- `if (condition) { ... }` (braces required)- spaces after unary (e.g. `typeof(foo)` is wrong)as it turned out. there were very few fixes to make. and eslint's`--fix` feature did a great job here.", 'very nice.', 'please fix the linting issues. run `gulp eslint` .also squash the commits in to one.', 'the symlink and auto-file creation was a bit arguable. jshint. eslint and others you have to create config file manually. also now this module is more inclusive to windows clients.', 'fix eslint issues', 'you can do `/* eslint-disable no-var. no-param-reassign */` in the sjcl-custom files to allow es5 syntax.', 'add flow type checking. esprima-fb is deprecated. but it seems to work better than babel-eslint currently. we can switch to babel-eslint later.', 'lgtm! thank you for walking me through the changes.', 'use prettier. eslint-airbnb. solium', "i'll setup a base repo with everything configured and we can bring this in here then.", '(except solium)', "check presence of attributes specified on component in js file of that component. hello. i would like to write a lint rule that would check whether all attributes that are specified on component are present in component js file as well. i wrote a bit more about it here ember-cli/eslint-plugin-ember/issues/204 but i thought it might be more relevant in here. i don't have much experience writing eslint rules so i want to verify first it something like this is even possible with the current toolset. thanks for any ideas.ondrej", "ability to warn instead of error. example scenario:i want to use `quotes: ['double']`. but our existing templates have a mixture of single and double quotes.to add this rule now. would mean a big-bang fix pr.i would like the ability to just receive a warning. and gradually move over. much like eslint allows.", 'ah. fab thanks', 'upgrade sl-eslint dependency. and update any files as necessary to comply with new rules.', "done! i think there's an eslint rule for the spaces-in-objects. btw :)", 'thanks for the pr.sorry for the eslint issues! i was experimenting with the new rules.can you please revert the eslint changes?', 'closing this per above comment. as this is a request for a specific tool (as linked above).', "the only way this would break tests is with `eslint` failing. but that would fail before the actual test runner started. rerunning the tests again. and if they fail the same way i'm just going to merge.", "> these hidden files cause undue difficulty particularly when first introducing a new product to developers who operate mostly on a mac - because they do not see the files in finder.i'm going to take a wild guess and say that the vast majority of us here work on a mac. i'd like to know other experiences. but from my point of view. files starting with `'.'` have _never_ been a issue. almost all ides (or ides wannabes) show those files by default. some even recognize them and add a pretty icon next to the name. by now. we are all very well accostumed to files such as:- `.npmignore`- `.bashrc`- `.eslintrc`- `.gitignore`- `.gitattributes`- `.editorconfig`- `.jshintrc`- `.jshintignore`- `.csslintrc`- `.bowerrc`- `.travis.yml`- `.gitlab-ci.yml`... so i really don't see a problem in adding more one more of those.", 'make sip.js (hopefully) buildable on windows. if eslint requires lf. make sure js files get checked out that way', 'hey seanbright. thanks for the pr. i have outlined some of my thoughts below. we are developing in a unix environment so i am really not all that familiar with getting this to run on windows.i am uncomfortable with the `.gitattributes` change. i think it may cause adverse side effects particularly on the release branch with minified javascript. based on my reading. it appears the correct solution is to set the attributes locally in your dev environment. in terms of the copy files. can you provide some evidence that this is a generally accepted approach? i have found a few different ways to achieve this and it appears that the most minimal and accepted way of doing this is to actually write a node script to copy the file and then execute that script with node. which we should expect to be available on all systems. the concern here is that we are using tools and an approach that is not really all that common and it could create more problems than it solves. especially in terms of future support.', 'the eslint config in the starter repo doesn\'t like "use strict" so there is still some work to do around that. unless we want to attach an eslint override on it.', "i'm a bit confused about that error and your fix... was that an eslint error or was that a node.js error? if i run `npm run lint` in the starter-blog for example. it lints `app.js` just fine.", "yeah -- i've kept the bin scripts as es5 to avoid having to compile them in place on publishing (is there a better solution?). i just went ahead and disabled eslint completely on that file and merged your fix in.thanks!", "oh nvm. travisci is taking forever and i don't have much time. merging and i'll fix any eslint errors (if any).", 'fix eslint config and all the linting errors. there was a problem with how eslint was parsing .gitignore that resultedin it not actually linting anything. by fixing this. a whole bunch oflinting errors were uncovered. this fixes all of them.', "setogit i've addressed the problem from around `lib/translate.js:160` and rebased. it now sends the error through `done()`. which propagates it out to the final callback. i've also added the appropriate credentials to `cis-jenkins` so that it is now running the _full_ test suite of 2200 tests.", 'lgtm', "fix cesium ion external asset handling. i was so excited about #6136 that i totally glossed over some important details of external assets and for the most part. they didn't work.  `cesiumionresource` should only be used for ion hosted assets. so create a standard resource instance for external 3d tiles and terrain.  this also means that `cesiumionresource.createimageryprovider` can't exist and needs to just be on `cesiumion` directly instead.it's probably easier to review this as a whole file again rather than looking at the diff.i also add `instrumented` directory to .eslintignore becuase it was linting the results of `instrumentforcoverage`cc hpinkos tfili", 'just those comments. the rest of the changes look fine to me', 'thanks hpinkos. changes made.', 'tfili bump', 'looks good to me.', 'kendos-kenlen have they discussed it on the eslint side?', 'not as far as i know.', 'okay. i can\'t win this one.  eslint 3 and eslint 4 disagree about what the indentation should look like.  my next steps:- set the indentation rule to "warn" (running eslint 3)- get rid of all errors under eslint 4- upgrade to eslint 4- get rid of all indentation warnings under eslint 4- set the indentation rule back to "error" (running eslint 4)', 'get rid of the last indentation lint (that is checked by eslint) and .... ...turn indentation back to erroring instead of warning.', 'travis runs with the rules in our .eslintrc.', 'there\'s no rule for indent.callexpression in .eslintrc and default value is "1"before my last commit. my code respect this rule but travis job fails. i had to change indentation to pass ci (as it was explained in the travis errors).apart from that. i didn\'t see any other styling errors', 'thank you for your feedbackmy branch was not up to date from upstream branch.concerning horizontal whitespace. i propose to add ```"keyword-spacing": ["error"]``` to eslintrcand line wrap isset to 120 in eslintrc', "there are js files with json blobs in them. so we aren't able to enforce one or the other since json requires double quotes to be correct. we should update the comment in the eslintrc to make it clear single quotes should be used except for json blobs.", 'sharlaan fortunately not. test runners use the source code not the production code for testing. so you could remove the whole precommit hook. and have those run as part of the travis process instead.let me dump this branch and open in a new pr. i know how to get just those 2 files only.it is not travis. i see on my branch the code was overwritten in the precommit line. i would guess eslint would have done that. mmm.', "my bad :- precommit just eslint --fix + formats with prettier- prepush then don't have to fix/format and can run tests directly- travis finally takes over the building process in pre-merge stepso yea since eslint applies only to src and demo/src. i should not need to build in precommit ...i'm open to suggestions regarding workflow automation.", 'so i see. i updated the wrong files though. the es folder i see is generated by the build command. so this pr is pretty useless. however for anyone else to be able to easily contribute. you should remove that precommit hook. or update it to just run linting and maybe prettier.i never used prettier. i prefer my own opinion on code formatting. so our process triggers nothing on precommit. but i do run linting and tests on prepush. as we commit more verbosely. running those on each commit. when you changes like 10 pr so files and are committing only 1 or 2 at a time just got in the way of getting things done.depends on how you with to run the control. but anyone with a proper editor should have eslint running real time informing them of errors as they type. which we do so linting on prepush is pretty safe for us.i am going to close this. update the correct 2 files and no-verify push to bypass that precommit so that you have just the files that have changed.', 'chore(eslint): remove no-missing-* rules', "i'm closing this pr. because i'll fix it in another commit.thank you.", "lkrnac since this resolves some issues for me. i've published your pr as `divmain/eslint-config-defaults`.  looks like there are some other requirements that baer has in mind for full eslint v2 compatibility. so i'll unpublish as soon as #69 is closed.", "got it working. i had to:- remove ngrok from package.json (does not install properly on windows)- run:```npm cache cleannpm installnpm install eslint -gnpm run setup```the 'installing dependencies...' part of the setup seems to do nothing on windows. the node_modules directory is empty after this completes.", "ideally set up .editorconfig to use same formatting as expected by eslint. if not possible at least set webstorm formatter to use same formatting as expected by eslint.at least i've found eslint --fix parameter. which fixes these formatting issues.", '> ideally set up .editorconfig to use same formatting as expected by eslint.oh no. i thought we had that! is our editorconfig out of sync with the eslint config?', 'yeah. that\'s because if you don\'t have actions/reducers/... the store won\'t be used in the route and eslint will throw an "unused variable" error... :confused:', '> yeah. that\'s because if you don\'t have actions/reducers/... the store won\'t be used in the route and eslint will throw an "unused variable" error... mxstbr that\'s understandable. but having generator configured code that crashes feels like a bug to me. if automating 100% workable code generation is not practical. imo. at the very least the code should work as generated and code comments should describe what\'s going on.if you agree. i\'ll open an issue on it. can\'t promise that i have time to fix it any time soon though  as for this pr. i see no reason not to merge.', 'i think we need to fix the `eslint-import-plugin` with our `resolve` settings of webpack. would you mind looking into that?', "mxstbr i really would love too. but i'm not sure if i understand correctly.so.  i guess i need to config `eslint-import-plugin`. but there is no any of `eslint config file` at all.shall i create a new one?", "mnemanja if eslint has a plugin for your editor/ide lint runs automatically and you see errors in real-time as you type. it uses the eslint configuration from the `react-boilerplate` project. there's nothing for you to configure beyond setting up your editor for eslint support.for example. i'm running atom with `linter`. `linter-eslint` and `linter-stylelint` packages. i get lint errors reported as i type or paste code in .js and .css files.", 'i was able to fix this issue by changing the lint:eslint script to "eslint --ignore-path .gitignore --ignore-pattern internals/scripts || true".  if the eslint command results in an error. the "|| true" part will run. returning true (e.g.. non-error) to npm.', 'will need to be merged with #862 before it will pass ci. there is a problem with eslint and friends present in the current dependency tree (before #862).', 'isiahmeadows interesting. `npm run lint` isn\'t complaining about that. i removed a bunch manually but didn\'t even notice the rest because i\'m 100% a semicolons required guy.why doesn\'t `.eslintrc.js` have```js"semi": ["error"."never"].```in it?', "> yea i was trying to say that that's wrong. it prints out to the terminal just fine.it does indeed! however. our linting config explicitly forbids the use of `console.log`. causing travis to return a big ugly . the options to get around this include:- using `console.warn`- using `console.error`- popping up a dialog box using native electron apis- using `eslint disable line`however. all use of `console` should likely be forbidden in the main process as you can only see this when launching nteract from the command line (my comment will make more sense when you're using the built app).", "ohhhh. this issue is related to the fact that it's not upgrading the config _and_ eslint at the same time.", 'bump eslint and eslint-config-airbnb. resolution to #589', 'thanks jdfreder!', 'fix eslint errors in gulp files. fix eslint errors in gulp files', "vivekmore can you do the pr for the angular2 branch's client-2 as well?", 'absolutely', 'fix eslint errors in gulp files. fix eslint errors in gulp files- client folder- client-2 folder', 'lgtm :)', 'actually looks like `eslint` is failing the build. michaelficarra can you disable dot-notation', 'workers refactor idea. my first shot at making using workers a little bit clearer.the gist is formalizing which "pieces of computation" can be parallelized. because only json can be sent between processes. the serialization/deserialization steps are now grouped in the "job description". instead of being scattered across switch in worker-job-processor and implementation in pipeline/generate.a job is described by:- `serialize`. which takes some `hash` and produces a hash to be sent as json (always executed in main process);- `deserialize`. which takes the hash from the step above and should produce the **original** hash passed to serialize (always executed in worker process). to aid reconstructing original hash. `ctx` is passed (which contains all loaded plugins; we needed it to select appropriate plugins for a given file to compile)- `work`: actually perform the work. can be called in both master and worker.(mediator is still used but it\'s not scattered across several files anymore. we can get rid of it. but the focus of the pr is on making workers easier to comprehend.)then. wherever we used to have a `mediator.wrkr ? onefn : anotherfn` switch. we can now simply call `processjob(jobdescription. {dataforthejob})`. and that function will itself figure out whether it needs to schedule work in a worker. or call job.work right away (if workers are disabled).this is mostly an implementation of an idea. any feedback and suggestions welcome.cc paulmillr es128 - [x] eslint- [x] squash- [x] no mediator', 'norm.', 'got rid of the mediator for workers', 'add eslint config to prevent mocha .only. this commit adds eslint configuration to make the linter fail. as soonas it finds a mocha test suite with `.only` suffix. very useful for the contribution workflow. so nobody forgets to removetheir temporarily introduces `.only` statements (see #251).', 'naturally. ci linting process will fail since you still have `.only` suffixes in there... ironically this proves that the config is working ;-)', "ah. that's a nice one. danke patrick :+1:"]