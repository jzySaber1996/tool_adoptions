["setup eslint for react. i found that eslint fails to run in examples folder. so i install `eslint-plugin-react` and eslint now will lint the examples folder too. i'll update the code in example folder gradually.", 'ok', 'rebased this upon master.', "for your edge case: that can totally happen. but that's the case for an eslint override comment. which is an explicit indicator that this single-export file is intended to be a multiple-export file.given that - that you'd basically never have to change a default export to a named export - the refactoring power is all in the filename. meaning. you a) change the filename and rename all the imports (importjs can do this for you; eslint-plugin-import will ensure you didn't miss any); b) renaming any of the code in the file does not change how consumers import it; whereas with named exports. the name in the code is tightly coupled to the name that it's being imported by; c) this rule encourages more files that only ever export one thing. as the default. which is better for readability. maintainability. treeshaking. conceptual understanding. etc.", "samkelleher are you sure you're running your local eslint. and not the global one?", 'wow super quick ljharb  thanks. yes installed it locally. i thought it would be weird for such a problem to to happen so i deleted my node_modules and tried again. now it works. bizarre. i should have have tried this before commenting. came back here to delete the comment and you had already replied! thanks.', 'the expectation is that most people discover the configs from the guide. and not the reverse - the guide lists which sections have eslint rules. and any section that lacks a rule certainly would be a welcome pr to eslint.it is impossible to programmatically enforce *every* style rule. so the default assumption should be that an eslint config is simply the automatable subset of a style guide.', 'willibaur (separate from using the leading `_`. which this guide forbids) yes. the eslint rule wants an explicit return - `return null;` or `return undefined;` would seem appropriate.', 'only stage 4 features are supported. if you are using something stage 3 and below. use `"babel-eslint"`.basically. use `parser: "eslint"` until something breaks. which indicates that you are using an es feature which hasn\'t made it into acorn yet. then switch to `"babel-eslint"`.', 'this is a bug for eslint-plugin-jsx-a11y; not for this repo.however. roles are supposed to be a last resort; that should really be a `<button>`.', "merriam (1) is a flaw in mocha; it should provide another api that doesn't depend on `this`. re (2). the overarching value of ensuring all function expressions have names outweighs the slight redundancy when it's used in a mocha test context.**nothing** is an animal that needs `this`. unless it was poorly designed in the first place to require it.", "i believe our eslint config requires `!!` over `boolean()`. fwiw (if not. it should be). `boolean` isn't as safe because i can do `global.boolean = function () { return false; }` for example.", "ljharb i feel like things work the other way around because in my experience people get recommended 'eslint'. often 'with the airbnb style guide.' the airbnb style guide being the eslint config. not the actual style guide. i realize without solid numbers it's hard to support either position.> so the default assumption should be that an eslint config is simply the automatable subset of a style guide.precisely what i missed. i thought the justification for the rules in the configs was all there was. i thought everything 'airbnb on good style' was written in response to eslint. and thus based on the available rules. now i discover it is (more sensibly) written in response to javascript and all its rules. regardless. i've never seen someone link one of the unsupported style guide rules and didn't know they exist but that might just be me.if i can find the numbers to support my experience i'll re-open .", 'mocha arrow-function and unnamed function errors.. hello community i am receiving errors whenever i am using using `describe(function(){})` in my code.how can i get rid of these errors?here is my .eslintrc.yml.```extends: airbnb-baseplugins:  - standard  - promiseenv:    node: true    mocha: truerules:    indent: ["error". 2]    semi: ["error". "always". {omitlastinonelineblock: true}]    no-eval: ["error"]    no-trailing-spaces: ["error"]    one-var-declaration-per-line: ["error". "initializations"]    no-irregular-whitespace: ["error"]    no-var: ["error"]    no-empty: ["error"]    linebreak-style: ["error". "unix"]    eol-last: ["error". "always"]    no-console: ["warn". {"allow": ["warn". "error". "info"]}]    no-use-before-define: ["error". { "functions": false }]    no-unused-vars: ["error". {"argsignorepattern":"^next"}]```tried to add mocha-plugin like so:```plugins:- mocharules:mocha/no-arrow-function: "error"```but it still gives me errors.', "i'm not familiar with the mocha plugin; but our guide requires you either name your functions or use arrow functions. especially and including in mocha tests.", "i've named my function. but it still outputs error: `prefer-arrow-callback`.", 'can you provide the error output?', "can you also provide the exact code that's producing those errors?", 'ok so - none of those functions are named. `function (done) {` is an anonymous function - that either needs to be `(done) => {`. or `function something(done) {`.', 'as i said even if i name a function i am still receiving error with `prefer-arrow-callback`', 'ah. why do you want them to not be arrows?', 'because using arrows in mocha is discouraged.', 'only if you need to use `this` for timeouts and the like; which this eslint rule will allow.using arrows in mocha is encouraged by this guide; mocha is wrong to discourage them.you can certainly create a `test/.eslintrc` to disable rules just for tests. if you insist.', "blueraja for something that oddball. i'd say just use an eslint override comment around your for..in :-)", 'to answer your question vzhen you can also use `this.constructor.renderscene`.what are your thoughts on this approach ljharb - is it ever used airbnb?', 'you should never use the constructor property; it\'s not reliably present nor is it robust against tampering. since there\'s no language keyword to mean "the current class". you should simply hardcode it.', "iknowcss performance is irrelevant. and the least important thing for a style guide. or when writing code overall. what happens under the covers is also *entirely* irrelevant - that `map` is implemented as a loop. for example. no more makes map a loop then a gasoline vehicle engine is an explosion.(eslint also now covers this case. fwiw.)to wrap up. mutation should always be avoided; performance of a given function almost never matters; and don't pretend the way the interpreter is written matters.", 'provide a full config example. hi.please provide a full eslint config example in the end. that makes easy for everyone to copy and paste that.like this:```json{  "no-var": true}```thanks.', "empireworld i have no idea what you're referring to; the point of using our eslint config is that you don't copy and paste anything.perhaps  is what you're looking for?", 'i mean write all description configurations in one example.', "that's what eslint's docs are for; you'll notice that each rule lists the eslint rule(s) that it applies to is a link to the relevant documentation.", 'so write total of eslint rule links in a single config.', 'my suggestion would be to not use grunt or gulp to run eslint; but rather to run it with an npm run-script instead.', "are you sure you're running the local eslint? issues with rule options like this often mean you're running an older eslint.", 'ljharb what do you mean with "running the local eslint"? i installed it with `npm install eslint` but also with `npm install eslint -g` while testing why this bug occurs.', 'for testing. do `./node_modules/.bin/eslint path` or use your npm run-script.', "flavium that's your problem. yarn doesn't respect automatic updating of semver ranges. so you probably aren't actually using the latest eslint in your yarn.lock file.", "i think i wasn't clear. this error appears when running eslint after installation. package installation works just fine.", "oh hmm. that's very much not the standard way to use eslint. so your module is like a runner for eslint?if you can reproduce the issue in the project that has eslint directly defined. i can help. but otherwise i'd need the full setup (and it's almost certainly an eslint issue. not an airbnb config issue - you'll probably be able to reproduce it with that one rule's config and none of airbnb's stuff)", 'i recently discovered that eslint have made the change to the rule default too', "true - but actually shipping this change now will help make the change to eslint v4 not be breaking - when v4 comes out. it'd be ideal to support both v3 and v4 in a semver-minor release.", 'question: new release. is it possible for you guys to cut a new release soon? some of us using your package for eslint (which is amazing) would like to take advantage of the updated eslint-plugin-jsx-a11y.', "cycomachead hmm. a pr might help explain what you mean. certainly i don't want `[]` to override defaults. and that's a mistake i may have indeed made when upgrading; i'm not sure when `['']` appears.", "kerenchandran i'm waiting on some bugfixes in eslint-plugin-react before releasing.", "hm. that line certainly was meant to be an empty array.our rules intentionally document all options. including replicating defaults. if you find a place where that's not the case. please do make a pr to correct it.separately. if you find a place in `eslint-plugin-import` where providing the default explicitly errors. please file it there. because that's a bug in the plugin.", 'frederikhors you can add this line right above the line with the `next` argument - `// eslint-disable-next-line no-unused-vars`', 'niftylettuce thanks. i dropped out eslint for standardjs.', 'for some reason. formatting is done properly (without the extra `{\' \'}`) when i rename the file to have a `.jsx` extension. (note: i am using `prettier` through an `eslint` plugin). here\'s my `.eslintrc` if that makes any difference:```{  "extends": ["react-app"].  "plugins": ["prettier"].  "rules": {    "prettier/prettier": [      "error".      {        "printwidth": 120.        "tabwidth": 4.        "singlequote": true.        "trailingcomma": "all"      }    ]  }}```(i\'d rather not have to stay renaming files to `.jsx`).', "bakkot > neither airbnb nor google recommend this style. it is not the style used by jquery. react. preact. bootstrap. babel. typescript. flow. express. angular. v8. spidermonkey. rxjs. lodash. istanbul. node. ember. d3. socket.io. qunit. jest. ava. jasmine. webpack. polymer. chartjs. gulp. bluebird. ramda. esprima. yarn. handlebars. immutable. uglifyjs. grunt. jsdom. glamorous. koa. eslint. or indeed prettier itself.this is a list of companies that doesn't use standard style. not the companies that use prettier style. am i wrong ?", "kosai106 no please disregard my message. it was a fault on my end. i think i have a prettier plugin (or some other formatter) in my vscode setup which auto formats on save. i was experimenting on the current project to format on save through eslint (with prettier plugin). there must have been some conflict between the two... i forgot i switched to another project and enabled the editor's format on save setting (as this project did not have the eslint setup to format on save). going back to this project. both pieces of software were formatting on save and i got very unpredictable results.my fault - i now put a project specific `settings.json` file in the project that formats through eslint / prettier plugin.sorry. not completely sure about my own setup... i just want to format on save ^^; (copy / pasted my way through).thanks!", "duailibe oh ok! as with the eslint-react rule. and since i implemented this. i believe it's something that makes sense to implement on a per-project basis. but i get what you're saying. sorry i misunderstood.", "i see what you mean. that's the approach i've taken with eslint in several projects: `eslint .` and a .eslintignore that needs to be kept up-to-date. i've also tried to first ignore everything and then un-ignore the things i care about. but always bumped into issues as well. i wonder if there's an eslint issue we could take experience from.", 'aboyton i think it\'s always a good thing to discuss best coding style in your company. are you just a company manager or do you code all day long and deal with code styles?because people who code discuss best  style and use it as convention. despite tools that force them to use bad styles. if conventions are broken by "tool forced style". then you throw this tool to trash bin. that\'s it.btw: large company or small that doesn\'t matter. developers must communicate with each other.and to be clear... problem with prettier is not the style that "i don\'t like". its the style that "doesn\'t work out of the box with initial vue projects". so please keep this in mind...there was a suggestion to configure eslint options.that works just fine.but... i will have to configure every single future project. just one additional step in workflow. this is less efficient than change one option in text editor.but people doesn\'t care about efficiency..... :/', 'is there any workaround to that problem? i am happy to configure eslint to accept that kind of formatting. it throws errors and wrecks the deployment for me.', 'duplicate of #1267you should use `// eslint-disable-next-line` instead.', "gillesdemey > standard can be configured every which way you want by either using standardx or the shareable eslint config - so standard doesn't have to make any changes. it's already very flexible.it is not an option to typescript users. also. i agree with coolemur. about the prettier config does not work out of the box with initial projects. change the style-guide suggested by a framework. like angular or vue. is not good for the community.", "bakkot standardx is not an option to typescript users. because it uses .eslintrc file to specify the rules. i don't like the space on named functions as well. sorry. i was talking about the space after an anonymous function. (i know. wrong thread)", 'ericanderson> another absurd example: go ask eslint to support typescript so you can use standardxwe can always leave things as they are and never fix anything or make things better. right ?', "i know my answer isn't your problem but i just want to share for somebody try to find same problem with eslint.in my `.eslintrc` file i added  `indent: ['error'. 'tab'].`. it make my template literal break new line. just remove it", 'fails because of eslint errors already resolved on `master`', 'be compatible with `consistent-return` eslint rule . ## requirements- in order to add `consistent-return` to our `eslint-config`without introducing errors we need to change our code in advantage## specs- add `consistent-return: 2`  to `.eslintrc` rules- `npm run lint`- fix errors (where possible. if possible)## misc{optional: other useful info}', 'move linting to root and update dependencies. this moves eslint/prettier tooling to the root of the directory. and actually gets the linting tooling working. this also updates dependencies across the project. this build is breaking intentionally due to linting errors. see it is working.', "i was suggesting because of the many project that use the `rc` postfix like:`.nvmrc` `.npmrc` `.babelrc` `.eslintrc.json` `.stylelintrc.json` `.jshintrc`. ...it might prove useful for people that whitelists dotfiles in `.gitignore` (instead of blacklisting) as they will be able to do:```.*!.gitignore!.*rc*```i'm not very opinionated about the `rc` postfix but i think it has become a de facto standard and not following it might just generate confusion for the average user.", 'adlius eslint is failing', 'i think if you create a `./citgm_tmp/.eslintrc` file and put `{ "root": true }` in it. that ought to fix things. or something like that.  /cc not-an-aardvark', "so it seems to me like this could be solved in ci by simply not making the temp directory inside of the smoker directory where node is cloned. i'm still very weirded out by things suddenly braking though. and i'm going to see if i can chase it down to a specific change in eslint", "not-an-aardvark is there a reason for a module *not* to set `root: true` in their eslint config? i'm not sure why that isn't the default in `eslint`.we should definitely clone node into `$workspace/node` though. that's probably a more sensible thing to do anyway.", 'i guess this is already solved. if there are problems with the estree plugin we are happy to accept issues and prs.', "danez this is for espree not `estree`. the idea is that we would move logic from babel-eslint into the babylon parser as a plugin. depends on if it's worth doing (possibly)", 'hzoo yup.yea. it worth.so please open. i can get something done when get time.', "i would like to try this if it's as simple as adding a max-len rule with code option as 100 to eslintrc. if you could elaborate on the proper bracing form should be i could look at that too.", "hey daniellyons178. you should absolutely feel free to attack the maxlen issue first. in fact it may be best to separate this into different commits to make it easier to understand.for the braces issue. we just want a space after `if` and a space after the `)` as well. also we should disallow single-line `if` statements - braces are required. i don't really know the eslint commands to get this to work. but it should require just a little bit of research in the eslint docs. :)", 'thanks for the info! i will tackle this tomorrow.', '6209 eslint fixes. changes to `.eslintrc` incl.- max line length of 100 excluding comments. strings and regex literals- enforced curly brackets on all blocks. no more `if (true) return 1;`- added spacing before and after keywords `if()` no longer allowed. must be `if ()`- added spacing before blocks `if (){` no longer allowed. must be `if () {`', 'excellent. thank you so much! this is tedious work. but it makes the codebase so much nicer to read. much appreciated! :tada:', 'eslint errors', "lgtm. not sure what's wrong with that eslint error", 'clark800 did you ever figure out the issue with eslint?', "i think the best solution is to add `// eslint-disable-line strict` to the `'use strict';` line", 'and check eslint too ;)', 'looks like eslint-plugin-node is up-to-date now. so this is no longer needed.', 'looks like eslint is up-to-date now. so this is no longer needed.', 'looks like eslint-plugin-prettier is up-to-date now. so this is no longer needed.', 'update dependencies. with these changes `npm audit` now returns 0 vulnerabilities.**major updates:**- webpack v4  - [x] add `webpack-cli`. `webpack-merge`  - [x] update `webpack.config.js`   - [x] split up `webpack.config.js` into `webpack.common.js`. `webpack.prod.js` and `webpack.dev.js`  - [x] remove `cross-env`- ~~babel v7 (beta)~~  - [x] ~~update `.babelrc`~~- eslint v4 along with new rules in `eslint-config-airbnb-base` v12  - [x] fix `prefer-destructuring` errors  - [x] disable `function-paren-newline`- gulp v4  - [x] test docs/dist uploading  - [x] circumvent shinnn/gulp-gh-pages#116- jest v23  - [x] add `jest-cli`  - [x] remove `babel-jest`- codecov v3', 'would highly appreciate comments on whether or not upgrading to babel 7 is something we should do. this means requiring users to use babel 7 when they want to transpile the source themselves.', "yes. i agree it would be a good step to remove gulp. `gulp-gh-pages` doesn't seem to maintained a lot. we may be able to find a better alternative to push the docs and bundles.however let's leave that for another pr. this one is already more than complex enough.", "i'll go ahead and merge this so we can work on transpiling to es2017 in a sane way.", "hijacking the thread a bit: haveyaseen . just wanted to say thanks for taking over active maintainership of redux-orm!  we're using it in one of our apps (and i hope to eventually use it in the other one). but we're wrapping up a dev cycle atm and it'll be a while before we're adding new code that specifically uses redux-orm.  meanwhile. i'm more than fully occupied doing stuff as a redux maintainer.  so. while i still have a vested interest in redux-orm. i definitely don't have time to actively work on it myself.  it's great to see that someone else is both interested and willing to push the library forward.", "yeah. sadly i'm not involved anymore at any project that uses redux-orm. so right now probably can't contribute a lot. sent from iphone> on jun 11. 2018. at 10:48. mark erikson <notificationsgithub.com> wrote:> > hijacking the thread a bit: haveyaseen . just wanted to say thanks for taking over active maintainership of redux-orm! we're using it in one of our apps (and i hope to eventually use it in the other one). but we're wrapping up a dev cycle atm and it'll be a while before we're adding new code that specifically uses redux-orm. meanwhile. i'm more than fully occupied doing stuff as a redux maintainer. so. while i still have a vested interest in redux-orm. i definitely don't have time to actively work on it myself. it's great to see that someone else is both interested and willing to push the library forward.> > --> you are receiving this because you were mentioned.> reply to this email directly. view it on github. or mute the thread.", "alright guys :smile: actually both of you have done fantastic jobs so far. so i have to thank you for that as well!as for myself. i don't expect to be working on redux-orm all too meticulously. but it would be extremely sad for the library to die off due to a lack of maintenance. it must retain its high quality and stay up-to-date and secure. these are the most important requirements and i'll do my best to accomplish that. everything else comes afterwards. yet redux-orm can only have a bright feature if it becomes more user-friendly and attractive for contributors. both quite hard things to do when developing a database-like system. i am more than happy that redux exists and that you and others put so much effort into it. just by itself. it is hardly enough for big applications. though. the simple state management that this project provides is unique and essential for developers who need to get up and running quickly. and they are my motivation for doing this.", "what about the bins? i just tried the following with yarn: `yarn add eslint3npm:eslint3 eslint4npm:eslint4` and it created one bin file only - eslint. this seems not right. i'd expect two: eslint3 and eslint4", 'clean eslint. this pr clean eslint warings.', 'thanks marnel . could you fix the `eslint` error?', 'add .nyc_output and .eslintrc to .npmignore', 'jefleponot would you mind addressing the eslint issue i mentioned? i would like to merge this.', 'rebased setfieldvalue/setfieldvaluename/setfieldvaluelabel functions from #1459". eslint correctionsjefleponot', 'jefleponot would you mind to use a more explicit label ? something like "rebased setfieldvalue/setfieldvaluename/setfieldvaluelabel functions from #1459"', "hi mickaelandrieu .i'm quite sorry. i can't manage to keep the same pr number (#1459)and i don't like duplicated code on clientutils.js so i would like to improve that.:racehorse:", "lol. as you wish bigjuevos - this js file is minify so i had to ignore eslint schedulingcould you help me ? i don't use node.js and npm dependency", 'i would merge this -- bigjuevos could you do a second review and merge it if ok? mickaelandrieu wants this for quite a while...', 'istr mainly because we have merged docs for this before ... :d this contribution is valuable :+1:', 'i like it.  merging.', 'thanks jefleponot for the work and bigjuevos for merging. :-)', 'hi bigjuevos . istr . mickaelandrieu you were too fast for merging. i had to refactor fews functions to simplify them and make them more readable before to go on holiday. but i lacked time.could i commit on the same branch ? or do i have to use another pr ?jef', '> do i have to use another pranother pr. please. thank you.', 'fixing a few typos and eslint warnings', "thanks beenanner haven't had time to merge anything. will do it this weekend!", 'well. those rules are really meant for "ember" code. i.e. code that runs in the browser on top of ember. not code that runs in node on top of `ember-cli`. you\'ll see that neither `ember-cli` itself nor `ember-exam` use `eslint-plugin-ember`. it might make sense for us to remove that from `ember-electron` since we have very little code that runs in the browser. but regardless i don\'t think we should be writing our `ember-cli` code in non-idiomatic ways to accomodate eslint rules that weren\'t really meant to apply to it.', "> i think we should either disable the rule using inline comments. or in the overrides section of .eslintrc.js.strong agreement with that. let's cut down anything that makes it harder for you/us to keep this addon alive.", "amilajack i really need to learn more about flow. i assume it's basically just making javascript more like typescript. for the benefit of catching typos/code mistakes in the editor.i'm not 100% sure what i'm looking for here. but i see the same warnings from #610 but in the editor. eslint warnings for `flowtype/no-weak-types`. i assume this is what is expected and if so it's working. i am running atom with the recommended packages from the readme.", 'amilajack if i add `/* eslint flowtype/no-weak-types: 2 */` to the file i get the `error` instead of `warning`.is that the expected behavior?', 'yea. `/* eslint flowtype/no-weak-types: 1 */` will give you a warning', 'added eslint-plugin-compat support. **[?][?] highly experimental. do not merge! [?][?]**', 'added eslint cache support', 'fix reverse address interpolation and use stricter eslint. it will be easiest to review each commit separately. i can split the pr if that helps.- fcdcf75 adds a more eslint rules related to variable definition and deletes a bunch of unused vars- 1f6d3ee makes reverse address interpolation a tiny bit more accurate- 5741c47 fixes a reverse address interpolation bug identified by the stricter eslint rulesingalls can you review at least the last two commits of this?', 'ansis can you comment on the bug that this fixes? reading through it looks good but not sure what to look for in relation to the bug.', "sorry. the commit message contains a bit of extra details. i should've note that or copied to the prit fixes reverse address interpolation for features with more than a single geometry in their geometry collections.the `ranges` variable passed to `matchside` used always be the last set of ranges for that feature. `ranges` is was set in the for loop and `matchside` called it with whatever value it was last set to. it now passes the value that corresponds to `potential`.", "fantastic! i'm", 'revert "stricter eslint rules". this reverts commit fcdcf757c959a25452e890d191525324e4ce877a.these changes need to be tested more thoroughly before they can be deployed.', 'looks like ember-cli-eslint is no longer a dependency. so this is no longer needed.', 'upgrade of babel-eslint', "allow new babel-eslint. `babel-eslint7` has a bug that causes a runtime error. installing `babel-eslint8` resolves the issue. but then there's a peerdependency warning due to `eslint-config-godaddy-react-flow`. allow `8`.", 'modernification. - [x] yarn- [x] remove jshint in favor of eslint- [x] prettier- [ ] transpile src with babel- [ ] transpile docs with babel- [ ] remove gulp in favor of npm scripts- [ ] remove grunt in favor of npm scriptssee #742', 'thank you for signing our contributor license agreement. we can now accept your code for this (and any) facebook open source project. thanks!', "hey umidbekkarimov thanks for digging into this!#742 is a master task for modernification. it's important for each actual change to be focused and incremental. could you separate this into separate pull requests?"]