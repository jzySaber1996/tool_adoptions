["i've removed the unnecessary `return` keywords and turned off no-extra-semi eslint rule.", 'christianbundy yes. please do rebase it down to one commit :-) please also prefix the commit message with `[eslint config] [base] `. thanks!', 'the next release of eslint-config-airbnb-base. and likely eslint-config-airbnb. will include this loosening of no-param-reassign.', '"creates extra garbage" is a memory concern. and in a memory-managed language. that should be none of the programmer\'s. create a new object on every iteration. which makes the *reducer* pure (as well as the overall `reduce`. which is pure in both cases).however. `ignorepropertymodificationsfor` is already enabled in the next release of `eslint-config-airbnb-base`. so if your accumulator is named one of the things it\'s enabled for. it will be allowed.', 'milo- is this on the command line. or in an editor? are you running a local eslint. or a global one?', "ljharb it looks like you're right. i was able to fix this by using `yarn upgrade` for all of our existing eslint plugins - `yarn upgrade eslint-plugin-import eslint-plugin-filenames-suffix eslint-plugin-jsx-a11y eslint-plugin-babel eslint-plugin-react eslint-plugin-standard`. then delete the yarn.lock file and rerun `yarn`.  i'm not sure if this is a bug with `yarn` or just a limitation that we need to account for.  `-\\_(tsu)_/-`", 'your eslint is out of date. if you use the install command in the readme. it will install the proper peer dependencies.duplicate of #1091. #1344. etc', 'jackkainov i editied my comment after you commented. but i already have the latest eslint. :smile:', 'your eslint is out of date. if you run `npm ls` you will see the error.run the install command in the readme to properly update peer deps.', "the issue is that eslint was not up to date.we do not consider a peer dep update a breaking change; if you install the package using the command in the readme. you'll get the updated peer deps; similarly. if you `npm install` and have everything properly specified with a `^` semver range (not with `~`. which does not upgrade minors. only patches). `eslint` will always be updated correctly.there's nothing to fix here.", "`npm prune` is supposed to remove everything that's not in `package.json` - i'm not sure where any of those pruned dependencies come from. but if any of them are peer deps of any of your *other* deps (or of. perhaps. eslint-plugin-import) and not in your package.json. then that would cause this.", "are you sure you're running the local eslint and not a global one? how are you running eslint? is it on the command line or in an editor?", "that's just an npm bug then. you can certainly make a pr to eslint-plugin-import to remove the dev dep entries.", "nope. you just don't have an up to date eslint. if you run `npm ls` you'll see that eslint is not updated properly; if you run the install command in the package readme. you'll ensure all the peer deps are correctly loaded in your package.json.", "thanks for the contribution!i'm aware. but `.eslintrc` will likely never be removed. and i believe it's better to keep the long-standard rc name than to pick an extension. i prefer to continue recommending `.eslintrc`.", 'hi all.i\'ve been through many of the issues on this repo. and could not find what i\'m looking for so i\'m going to leave my question here. i have this rule in my `.eslintrc.js``\'import/no-extraneous-dependencies\': ["error". { devdependencies: true. }].`but is still giving my a bunch of errors. all of them like this one` 1:1  error  \'ember\' should be listed in the project\'s dependencies. run \'npm i -s ember\' to add it  import/no-extraneous-dependencies`any help would be appreciatedthanks in advance', 'willibaur a new issue on eslint-plugin-import is the appropriate place to file that.', "brodybits thanks for checking again. the important change is adding `_blank` to `window.open`. which was not present on my fork's `master` yet (but added to the docs in this pr). i'll create a pr for your test app with all changes needed to make it work.also. i'll look into the eslint output.", 'thanks wvengen for the update. fixing the eslint warnings. and fixing the alert calls. i will probably need 1-2 weeks to take another look. apologies for the extra delays.', "we almost never add options. so i'd recommend convincing your team to disable the lint rule (check out `eslint-config-prettier` for an easy-to-use config that prevents conflicts with prettier).", "imho the felixfbecker's proposal is quite useful. other tools like babel. jest. and eslint allows this kind of configuration. we use this approach to share common configuration between projects. the proposed workarounds are only applicable to the `prettier.config.js` file. i thinkg there's no current way to do the same using the `package.json` (or other json/yaml config files).+1 to reopen this issue :)", 'lydell due to our specific needs we prefer  each and every project to have all its configuration stored in a single file (the package.json). our projects have several packages (over a dozen) and each one shares the same basic config (beware: not real package names xd):```"devdependencies": {    "shared-tools": "x.y.z"  }.  "babel": {    "extends": "shared-tools"  }.  "jest": {    "preset": "shared-tools"  }.  "eslintconfig": {    "extends": "shared-tools"  }```now we want to add some shared "prettier" overrides and it would be great to be able to do it the same way we do with other tools without having different config files.using the programatic approach would be my choice if i need to customize the config based on environment settings or stuff like that. but it\'s not the case.', 'iydell "jsx always uses double quotes"is there any way to bypass it?', 'not right now.', 'i don\'t care either about the default. but i expect `"no-mixed-spaces-and-tabs": ["error"].` to result in no `smart-tabs` when using `eslint-config-prettier`. currently that is not the case. i keep getting spaces.', "teameh prettier's use of mixed spaces and tabs is not configurable. `eslint-config-prettier` is designed to disable conflicting rules. not to alter prettier's behavior. we recommend removing all formatting-related rules from your eslint config.", 'code style is all about consistency. it doesn\'t need to "gain something" beyond consistency for it to be useful.still. using `avoidescape` in eslint seems like a good idea. and the correct resolution to this issue anyway.', "lipis - i appreciate that you have an entirely valid and strong opinion here. it's quite disconcerting to see you treating such a big change with such little regard to its effect.this project is now used by a _lot_ of people. more than have happened to see a twitter survey. or thumbs-up any of your comments. changing any of prettier's behavior away from what is now relied upon by people should be carefully considered and have a process the community understands - or else prettier could be seen as an unreliable tool by users.---i'd also suggest when prettier implements behavior for a filetype. it does so following (at least by default) what the implementing team has put forth as a standard - and not what prettier's team feel is logical. in this case as i mentioned above. vue does have a standard - not just in some screenshots. but _eslint-plugin-vue_ (by default) will enforce this.my point being. **the zero-config standard of tools should align to best benefit users**. i feel this is the most logical rather than worrying about one style or another being considered logical.", 'typescript-eslint-parser leverages the typescript compiler. so most things are automatically supported (have their asts converted). it is not an apples to apples comparison', "in `prettier-eslint` we let prettier decide what parser to use. however consumers of `prettier-eslint`'s api is free to provide `parser` if they want.", 'there\'s also the "avoidescape" setting in eslint. which is pretty useful for readability. be it with single or double quotes.', 'extarys i\'m not sure i understand your problem.. we don\'t have errors names when using prettier. we just reformat the code entirely. `eslint-plugin-prettier` compares the original to the reformatted code and prints what changed between them and show "kind of like" eslint errors.if using `eslint-plugin-prettier`. just run `eslint --fix` and eslint/prettier will reformat the code.', "evilebottnawi it's compatible with eslint rule` 'arrow-parens': ['error'. 'as-needed'. {      requireforblockbody: true.    }]`", 'netoctone you can use prettier first and when use `eslint` for fix it. why not use this workflow?', "floriferous kevin940726 fyi we now add a few more parenthesis. i don't know if that fixes your issue (i don't know what `eslint-plugin-no-mixed-operators` does) but i thought you should know.", "while there are a lot of differing opinions in here. it seems like prettier could at least support eslint's `flatternaryexpressions` rule that mysticatea linked to.  this would would help for those (myself included) that prefer the style mvolkmann illustrated at the start this issue.", "duailibe this is awesome! but unfortunately this not quite fit our need. we want more control to it so that it can pass the eslint rule configuration. afaik prettier doesn't support formatting it with custom options. `eslint-plugin-no-mixed-operators` just try to support the developers who are using both `prettier` and `eslint` and depends on auto-fixing of eslint after prettier formatting. it's a bit of advanced usage . thanks for the notification though. good work!", "apologies. i made this change in the github ui - i didn't think i needed to run eslint for such a trivial change.it seems an extraneous semicolon was the reason travis wasn't passing.i've removed it now - all seems good :)do you still need me to rebase or do anything else?", 'upgrade nyc & eslint packages', "i'd like to know how to do this as well. i have a require that conditionally loads components based on attributes on dom nodes. webpack sees the require call and turns it into a pattern match. bundling every file in the components directory. i don't want to ignore that entire directory because i will require.ensure the components that will actually be on the page. i just want it to ignore that one line.something like a `// webpack-disable` comment. ala eslint. would be very useful.", "setup eslint and fix lint issues in generated file. closes #1355summary:- the original jshint setup was not being used at all- the eslint command was only linting a specific rule- the only rule i wasn't happy to turn off was `no-cond-assign` but that `while (assignment)` pattern is used in a few places inside the loader and i didn't want to change that- since steal has a gazillion files. i decided to run the lint only on steal-sans-promises.js (no point on linting the promise polyfill)- the test script was changed a little bit to make sure steal files are compiled before the linter runs (and that the script that concatenates the files only runs once).- matthewp i swear i didn't sneak in any opinionated style rules in the eslint config :p", 'of course tests failed.', "loganfsmyth thanks for sharing your thoughts. sorry for the delayed response.i definitely appreciate where you and thejameskyle are coming from with this. and it has been really useful for me to learn in this thread that the flow team has explicitly stated they are not open to aligning on things like this. that is vital context. we obviously haven't yet heard any official response from the typescript team on this idea. but if flow is not open to it. then it is effectively dead in the water.loganfsmyth at one point when (seemingly) addressing me (with the question `would you be able to dig into what makes you feel this way?`). you are quoting azz. so i won't attempt to answer that question as that seems to just be a mix-up.i will remove my objection to this pr and lead the efforts to accommodate the knock-on effects in `typescript-eslint-parser` and `prettier`.i would also love to see the flow nodes updated with a `flow` prefix.", "has this been released in `babel-eslint` yet? i'm still getting failures when spreading.", "unfortunately it's failing eslint because of an error: `assign is not defined`. we recently switched to using regular `object.assign`. i'll make a quick change to your code to do so. and then the tests will be re-run. :)", "eslint allows improper spacing. braces. and gutter width. at the very least. our gutter should be 100 (used to be 80). right now it's not enforced. so our code has gotten too wide.also. forms like this are accepted:```jsif(foo){  bar();}```and:```jsif (foo) bar();```both should be disallowed.", 'to fix this. we would need to modify the `eslintrc` file to have the new conditions. and then modify the code anywhere that it fails the test.', 'use eslint instead of jshint', 'cool. thanks!', '092ec00f685880ad25c8a86569669510e10357d8', "replace var with const / let. part of nodejs-406. its a large change set replacing occurrences of `var` with `const/let`.includes 2 new eslint rules: `no-var` and `prefer-const`.i would like to have this pr open for the least amount of time. to avoid rebasing with other changes.i'll do some quick benchmark tomorrow morning with node.js 6 to see if it has any significant impact.", '> neat that you could use eslint as a way to validate this. i also noticed that you can use it to make the changes for you (with --fix). did you end up using that or doing this all by hand?i realized that after 3 hours in (i was getting nowhere manually replacing). the `--fix` did its magic. there were a few hiccups regarding scope and closures (no variable hoisting with let/const) but it all went well from there.', "rebased. i'll wait for ci builds to merge it.", 'epic work. lennyboyatzis - thanks!', "what's the blocker here?", 'lennyboyatzis i think `{ "allowsingleline": true }` makes sense in that case. i personally prefer it.', "discussed w/ lennyboyatzis in person. we're going to bail on adding this eslint rule. i've come to think it's as much misdirection as clarification.", 'looks like eslint-plugin-ember is up-to-date now. so this is no longer needed.', 'looks like ember-cli-eslint is no longer a dependency. so this is no longer needed.', 'replce ember-cli-eslint by just eslint', "actually it seems to be the case for us anyway. we have a private package declaring all the required (missing as per #739. which is another issue indeed) dependencies. amongst which eslint-plugin-import itself; i don't get any console output (using `pnpm i`) which indicates i'm missing those peerdependencies though. maybe it has something to do with the `organisation/package-name` format? (just guessing though)", 'i also have problems with jest.', "i added jest to the list. as far as i remember jest does not resolve modules to their real path. which is not how node resolves dependencies. that is why it doesn't currently work with pnpm", 'i wrote better=proper test. and now the test passes. so i need to figure out better how to replicate my problem - which is that running eslint fails on `eslint-plugin-import` because it cannot resolve the module `eslint-import-resolver-node`...i leave this open for a day. in case this rings any bells', "meeeeow cool. i've merged already. btw. the `eslint` is yelling like a crazy. i switched errors as warning in order to speed up the merge. but it's n oportunity for a bug fix for anyone that want to contribute.", "derp. it's this at the top of the file:```js/* eslint no-unused-vars: off */```", 'would prefer `no-unused-vars: ["error". { "args": "none" }]` if "eslint" can\'t add a different rule that can tell the difference between variables and function arguments. the function signature is just that -- if you don\'t use all its arguments. that\'s _not_ an error.', "it's weird. `eslint` should find this kind of errors.", 'so i suggested this. but a little lost on the details. why are the remaining `global.date` references not causing errors? and commit can\'t close without rest of the changes (you can\'t institute the change without "package.json". "package-lock.json" and ".eslintrc" changing as well).', 'plroebuck > why are the remaining global.date references not causing errors? which references?  you can reference `global.date`. but not e.g. `global.date.now`. nor can you `new global.date()`.> and commit can\'t close without rest of the changes (you can\'t institute the change without "package.json". "package-lock.json" and ".eslintrc" changing as well).i don\'t understand what you mean.', "add eslint env/config for ember-electron projects. would it make sense to make an eslint plugin that would get added during `ember install ember-electron`?mainly. it'd be nice not to have to manually fix the `error  'requirenode' is not defined  no-undef` entries. but perhaps there are other things to note.", 'fix peer dep missing: eslint-plugin-import. fixed by updating eslint-config-airbnb package.', 'any idea why the build is failing?', 'resolved peer dependencies problem.', 'set line endings to use lf instead of auto (git). currently on windows git will checkout the files with crlf with default settings. the eslint expects the line endings to be lf so this creates eslint linebreak-style errors. setting text to end of line to use lf and setting the image files as binaries solved this issue for me.', 'sounds like an excellent idea! i am a bit confused myself on how to set up the state management with redux. it is a little bit hard to get started with the boilerplate for a beginner like me. with so much stuff going on so i think a tutorial could help.', 'js fatigue is one of my growning concerns with this boilerplate. its actually the reason why i initially thought of creating a video tutorial series.', "m-brantheim yup! i've seen it. i was planning on electron specific tutorials. also there seem to be a lot of questions regarding how to create new components and add them so i'll probably cover that.", 'updated eslint flowtype errors', 'flowtype migration. **[?][?] do not merge**this essentially requires the user of the boilerplate to know at least a little flow. lets merge this when we provide some learning resources and documentation on the tools that this boilerplate uses- [x] update `eslint-plugin-flowtype-errors`- [x] add `eslint-plugin-flowtype`- [x] add `babel-plugin-tcomb`- [x] migrate react `static proptypes` to flow types', 'you have an eslint failure', 'fix eslint error in master.', 'fix ci eslint warning', 'ah sorry. thanks for fixing this.', 'fix jest setup + add eslint-plugin-babel. the jest rules were not added into `eslint-config-eventbrite` and the rules themselves were improperly named (missing `jest-`).also we should also include `eslint-plugin-babel` in order to fix `no-invalid-this` rule to work w/ class property functions.', 'add updated changelog for 3 eslint packages. lists out the new rules added. those made stronger. and those relaxed across `eslint-config-eventbrite-legacy`. `eslint-config-eventbrite` & `eslint-config-eventbrite-react`.also noticed one incorrect url in the rules definition.also realized that we had forgotten to include v5 of `eslint-config-eventbrite-react` in the changelog.', 'lgtm', "removes arrow-body-style rule in es6 eslint rules. this rule is nice to remind developers the fact that we can return a single operation from an arrow function without needing the 'return' clause. however. it is also problematic due to several things:first. this rule doesn't take into account that maybe that single return value is composed of a chain of operations. so it won't be as readable if returned all at once.second. when debugging a react application. sometimes we want to add a 'debugger' clause in the code before the return. when this happens. we are forced to first. add curly braces and a return statement. then add the debugger. and once we end debugging. undo the previous operations to not break this rule. this can be annoying and a waste of time.in this pr. i suggest to get rid of the rule altogether. but i would be also open to just change it to not throw an error.", '.', "i agree that this shouldn't be an error.i think your idea of making it a warning instead of an error might be better than getting rid of the rule altogether. the reason is because when i first started working here. i never used this style because i didn't even know it was possible. maybe i would have eventually learned it just by looking at other people's code. but i might not have really paid attention to it if the linter didn't say anything.these days i use this feature a lot so i'm glad the linter taught me about it. but i agree with you that it can often be an annoyance to keep switching between the styles.", "hey so thanks for putting this together. i have some thoughts:**first:**making it a warning ultimately won't help because in our apps. we make eslint fail on any warnings. this is because we found our eslint logs filled with warnings. it was hard to then figure out what was a problem and what wasn't. especially for those not intimately familiar with eslint. by making warnings fail. we all knew we had to fix everything.**second:**like jchen-eb said. the rule provides education. there are people who don't even know this is possible so it's an asynchronous way of sharing knowledge.**third:**this rule actually came out from code reviews. we were seeing lots of code reviews where people were suggestion using single returns. and that's just a waste of time for everyone involved. and since some people knew about the feature and others didn't (or forgot). the code would be inconsistent. the nice thing about all of these style rules. whether we agree or not. is that it rids code reviews of style suggestions and we focus more on the logic.**fourth:**the rule just says that it has to be an implicit return; it doesn't mean that it has to all be on line. so things can be on multiple lines with indentation to make things clearer. just like if you had the curly braces and `return`.**fifth:**the `debugger` is a legit problem. because it's a statement and not an expression it can't coexist with an implicit return. i use `console.log()` statements. which **are** expressions so i can do something like:```const foo = (x) => console.log('hello!!!!') || x * x;```**sixth:**we can override rules in our app. i don't suggest this because it creates inconsistency across apps. but it's something available to us. but if it came down to it. i would rather a specific app override it and have the main configuration still have the rule. than change the main configuration.", "thanks for the extensive response benateventbrite!here are some of my thoughts about it:**first:** i see. good to know. thanks for explaining us that detail.**second:** totally. i agree.**third:** my position about this would be that we should decide if we want to use a single return or not. and make that clear to all the team. imho. this makes sense in a lot of cases. but it doesn't in others. i agree this would introduce some inconsistencies in the code. but i also think they are minimal.**fourth:** true. we can explit the single line. however imo this looks less than ideal:```const atestfunction = (array) => array.map(figureoutstatus).filter(isactive).map(dosomething)```it is not common and not what we would expect on a usual javascript code. note how we should not add a semicolon in that last line (feels like a bug). also note that this example has nicely named functions. if we added the implementation there it would look actually worse.this also has to do with **fifth**. as we won't have a place to put the debugger.**fifth:** that's a great trick to use. thanks! it will help us overcome this problem a bit now. but it doesn't help us when we really need a debugger.**sixth:** that's something i am thankful that can happen. in this case. i think this could be legit. as it is not such a big change. in other cases though. i agree with you it won't be ideal.", "matthewdowns-eb `as-needed` is what we're using. it's the default.", 'thanks for the follow-up benateventbrite!i totally agree that in the second example you posted. that rule makes a lot of sense in that use case.however. in the first example. there is a kind of cognitive dissonance for me. maybe due to me being used to the usual way. i would think those parentheses are curly braces and a return and semicolon are missing. it is definitely better looking than my example though.', "if frivolous code reviews are a problem. could we make a rule where code reviewers must accept a diff if their only objection is based on style? this way they can still suggest style improvements. but require them to accept if the only issue is style so that we won't waste time on pointless debates. the author can still immediately merge it if they want.i've heard from managers here that in the past we actually did have a rule like that to prevent this issue. basically to prevent people from imposing their style preferences on others and only allowing the linter to block based on style.it would be important to emphasize that style suggestions are still welcome. it's just that you should accept the diff if that's all you have.", 'yeah. it\'s less about code reviews not being accepted. i haven\'t really seen style preventing . it\'s more so just the fact that the reviewer takes the time to say it. the reviewee takes the time to read it. and then has to decide whether or not they wanna do it. and then another reviewer sees it and says "no i like it the other way" and it just becomes a general waste of time.eslint is great at getting rid of all of these types of discussions because it just enforces the rules one way or another.', 'feature/eslint-update added rules for spacing in braces', 'j492 -- confirming this solves the issue after adding the global flag.`npm install --save -g eslint-config-defaults`', "why we don't use static proptypes and defaultprops?. ```jsclass userslist extends react.component { // eslint-disable-line react/prefer-stateless-function  static proptypes = {    users: react.proptypes.instanceof(list).isrequired.    onselect: react.proptypes.func.  }  ...}```", 'we do.', 'the lint message is awful but you could add an entry in the .eslintignore file e.g.: `app/assets/*`', "let's add this syntax to the generator!need pr?", 'what is the difference between static proptypes and defaultprops?', 'too far behind master. so closing. we can pick up later with a fresh effort if we want!!!', 'add eslint. remove jshint and use eslint', "you're the author of eslint-plugin-angular!thanks for notifying us. gillespie59", "i don't know what to do with the code in this case but this will do just to demonstrate the idea.should i just add lint directive to tell that promise is a global object? maybe in .eslintrc file?i'm open to hear review / suggestion / recommendation from you guys.", "no. there's no strong reason to use one or the other. the `/* global $ &*/` just tells eslint not to complain that it's undefined -- i guess it used to be defined globally. but isn't anymore.i considered moving it into `domutil`.", 'move to prettier and eslint recommended linting. also. action caching replaced with history']