["flanneljesus i think that's a problem with your ide. i don't think we should make code changes just to please someones code editor. interestingly enough your ide didn't showed you the eslint errors.", "ah. i found the eslint file in the root of the repo. sorry for this. i'm new to making pull requests to other people's repos. not trying to be an idiot.i would genuinely like to know if other ides recognize 'request.post' though.", "flanneljesus you are. by far. not the only person to miss the eslint and make a failing pull request :laughing:.  did you run `npm test`?  looking for and running the test suite are always good things to do before submitting a pull request.as for the changes. :+1:.  i bet yours is not the only ide that has trouble with this.  thanks for contributing!  i hope the failing build didn't scare you off from future contributions to `request` :).simov i don't think we should not make code changes just to not please someone's editor.  there were >9m downloads last month. so we should try to make it a pleasure to develop with `request` for as many users as possible. whenever possible.", "flanneljesus feel free to squash together your two commits into one.  that way there's less noise in the diffs. in the git blame. etc.  since no one else is tracking the flanneljesus/fix-verbs branch. it's not a faux-pas to rewrite history.  in case you've never done this before. you can:do an interactive rebase onto two commits before head:```git rebase -i head~~```that opens your editor with this:```pick f5eaea8 fix the way http verbs are definedpick a63a3fc fix formatting according to eslint settings```then change the second `pick` to `fixup` like this:```pick f5eaea8 fix the way http verbs are definedfixup a63a3fc fix formatting according to eslint settings```and save and quit.  git will merge together the two commits into one and take the commit message from the first.  interactive rebase is super powerful.  instead of fixup. you can use squash (if you want to edit the commit message of the combined commit) or reword if you just want to change the commit message.  you can also reorder commits (just by reordering the lines in this file) and squash together multiple commits (put multiple fixup/squash in a row).  one thing i often do is find a typo from a few commits ago.  in order to fix that. you add a new commit that fixes it. then do an interactive rebase and reorder the lines and change the new commit to fixup.  it's like the typo never happened (again unless someone is tracking your branch. in which case rewriting history is ugly).  there might be merge conflicts when you reorder commits. so be careful with that.after you change your history. you have to do a _forced_ push to github:```git push --force origin fix-verbs```this automatically updates the pull request!", "jimmyp thanks for jumping into this one!i think the `eslint` output is fine (no issues) if you don't see anything in red on the console...furthermore the build will fail if you have some linting issues...", 'ljharb: on what systems does that install command work? does not seem to work on windows 10', "run the install command in the readme for eslint-config-airbnb-base to ensure your peer dependencies are correct - also make sure you've restarted your editor (like atom) if you're using one.", "yes. thanks. i'm aware that we have unreleased code. this is intentional - i'll release a breaking change of `eslint-config-airbnb` with the v3 dep of `eslint-plugin-jsx-a11y` when it's ready.in the meantime. please stick with the peer dependencies that the package readme's install command installs.", 'i had a similar issue. what resolved for me was updating my global eslint package as atom seems to have been using that to read my package.json. `npm update eslint -g`does that resolve for you?', "alternatively. `npm uninstall -g eslint`. because you shouldn't have a linter installed globally - only per-project.", "due to eslint limitations with shared configs. this will sadly add another peer dependency for both `eslint-config-airbnb-base` and `eslint-config-airbnb`. that said. this is a good rule that i think we should indeed add. but i'd like to test out the plugin on our codebase before adding it here.", "simenb i don't understand either! the `eslint-plugin-react` says > prevent usage of setstate in componentdidmount (no-did-mount-set-state). anyone can explain?", 'ah - you\'re using `babel-eslint`. if you\'re using the "legacy" config. you can\'t use the babel parser - you need to use the default parser.', "well that's embarrassing. i was sure i didn't run a global eslint installation anymore.. but turns out i did. so removing it solved my problem. thanks a lot", 'correct - airbnb/base is deprecated; use the separate eslint-config-airbnb-base package instead. for just this reason.', 'julesmoretti in your `.eslintrc` file. in the "rules" section.  has all the documentation for eslint.', "shouldn't eslint-config-airbnb block this error for lifecycle methods?", "myguysi first. `airbnb/base` is legacy - you want `eslint-config-airbnb-base` for that - but second. if you're using react. you need to use `airbnb` - ie. the top-level one.", 'your `eslintrc` should just be:```js{    "extends": "airbnb".    "parser": "babel-eslint".    "env": {        "node": true.        "jasmine": true.    }.    "rules": {        "id-length": 0.        "indent": [1. 4].        "no-console": 0.        "no-unused-vars": [1. {"vars": "local". "args": "none"}].        "strict": 0.    }.}```', "fyi. if you just want to enable `for..of` in your own .eslintrc(.js). and keep airbnb's default values for everything else. just put this in the `rules` section:```js'no-restricted-syntax': [  'error'.  'forinstatement'.  'labeledstatement'.  'withstatement'.]```", 'thanks! we definitely need to change eslint', "should work now. i've had to disable uglify as it can't handle any newer than es5 (so no native async/await in the frontend then).in addition. there were so many indentation errors which showed up now for some reason. i've changed indentation to warn from err in eslintrc.", 'is eslint running before or after typescript has altered the source?', "converted connector-test.coffee to javascript. eslint is passing. so i hope it's es2015 :)", 'chore(docs): add webstorm setup with eslint integration. as webstorm has already integrated eslint support i find this more easy to setup and might be nice for ohers to know about.', "i think that'd be easier as a eslint autofixable rule and run `prettier-eslint`.. that would mean: your code is formatted by prettier and then eslint rules can change the code.you could match `import`s and join the statement in a single line.", "mitermayer i don't mind labeling as high priority. but that doesn't mean anyone will want to work on this...i haven't tried. but i believe it's kinda hard to bisect (for each flow commit. build the parser. link to prettier. link to draft-js codebase. run `eslint`) and it's not guaranteed find something actionable in the end.", "don't use eslint-plugin-prettier's config. that should be considered deprecated as it breaks formatters like prettier-vscode and prettier-atom which use the `resolveconfig` api.", 'convert eslint config and users/languages/editors files to yaml. yaml is much cleaner. easier to edit. and more diff-friendly than json. hopefully this will prevent merge conflicts with people adding new users to prettier.io', "add `root: true` to .eslintrc.yml. this ensures that peoples' eslint configurations in parent directories aren't used when linting prettier.", 'bakkot oh. to clarify: i think that the only property keys that should ever be quoted are non-identifiers; in other words. adding and removing a key never changes the quoting of any other key. airbnb doesn\'t use any of eslint\'s "consistent" options; only the "as-needed" option.', "for posterity: if prettier can become compatible with airbnb's styleguide. which means that it will allow configuration where we differ. both now and in the future. wherever eslint can not be used afterwards to clean up differences. then airbnb is indeed interested in using prettier.", 'austinkelleher honestly it\'s not something i. nor many people i\'ve worked with. have run into. many different styles of syntax "happen" to help with an arbitrary regex or some other pattern. but it\'s not really a big enough issue to crack open something as big as a style change here for function definitions.ljharb i don\'t see what the issue is using prettier and eslint. use eslint-prettier-config (or whatever it\'s called) to disable the formatting-specific rules in eslint and you use both for what they are good at.you do lose determinism. the use case i show above would show up all over the place - prettier broke the function across lines but then somebody removes arguments and it\'s left expanded across lines. now in code reviews you\'ll have "the function definition fits on one line - please collapse it". these these show up all over the place. i don\'t see how eslint helps with determinism - use it for what its good at. which is analyzing semantics. and don\'t use it for formatting. that\'s prettier\'s official stance. prettier should always output y no matter what is in x. that\'s what the determinism means. you objectively lose that the more and more you depend on what\'s in x.adding another option. especially something that huge. is not an option imho. when somebody uses prettier they expect a certain output. that would be such a huge change that you don\'t really know what style a project has even though it uses prettier. right now you can generally know what style you\'re going to get. even though options tweak very small things like quotes. and even though we\'ve added some options. i hope we\'re still embracing relatively zero config. there\'s always an option to fork. i still that\'s the way to go if you want a space after `function`. or some other large change like changing when it collapses things. that\'s the beauty of open source. it should be relatively easy to maintain and rebase changes on newer updates of prettier; those kinds of things are usually relatively small code tweaks. in my current app i\'ve forked several popular open-source projects to tweak things for how i want them to work. i think that\'s a more ideal situation than trying to cater to the enormous size of the entire js community.', 'jlongster the issue is that when "the choice of multiline" is an explicit developer intention. and prettier removes that. eslint can no longer have any idea that that choice was made in the first place. disabling the formatting-specific rules in eslint doesn\'t work unless prettier exactly matches our configuration for those rules - which it decidedly does not. if/when we\'re able to get prettier working at airbnb (and with our public config). it will be with disabling zero eslint rules only.certainly this would require losing some determinism in prettier when the option i\'m asking for is enabled. if adding an option like this is a nonstarter. then that\'s something we\'ll have to consider. however. the goal would not be that "prettier implies x style". it would be that "prettier-eslint implies x style".regarding a space after `function`; eslint already handles that for us. so there\'s no need to fork - the only place where that becomes a possibly necessity is when prettier is destroying information that eslint can not restore: namely. collapsing things (destroying the developer\'s intention to make it multiline) and removing parens (destroying the developer\'s intention to add the unnecessary parens for whatever reason).i think that the ease of forking is a wonderful thing about open source; but that doesn\'t mean forking has no cost. forking a project and constantly rebasing on top of the upstream is a very expensive thing to do. and in general *isn\'t* good for the overall ecosystem (when shared broadly - when it\'s done inside a single app for your own use. sure. go for it).', "i think it's written in the instructions. that if you want to combine prettier with eslint you have to disable all the formatting rules.. if you don't. then you are on your own i guess..", "lipis we've made some changes to eslint itself in the last month that makes that not true. currently you don't have to disable *any* of the formatting rules if they're configured correctly. and you use prettier-eslint.", 'need a way for a plugin (e.g. our own javascript support) to support multiple parsers that map to one printer.e.g. we have parsers:* `babylon`* `flow-parser`* `typescript-eslint-parser`and soon `babylon`\'s `typescript` plugin will be compatible.which all output a similar ast. we have two "languages" here: `javascript` and `typescript`.all of them map to the same printer. (let\'s call it `estree` after the ast it serializes)could it look something like this?```jsexport const languages = [  {    name: \'javascript\'.    // first would be the default?    parsers: [\'babylon\'. \'flow\'].    astformat: \'estree\'.  }.  {    name: \'typescript\'.    parsers: [\'typescript-eslint\'. [\'babylon\'. { extraplugins: [\'typescript\'] }]].    astformat: \'estree\'.  }.];export const parsers = {  babylon: parsewithbabylon.  flow: parsewithflow.  \'typescript-eslint\': parsewithtsep.};export const printers = {  estree: {    print: printasttodoc.    embed: embedfromestree.  }.};```then we can support a generic `--parser.javascript flow` option for the current `--parser flow` use case.', "i haven't got it to work at all in vs code with format on save. my eslintrc extends standard but when i save a .vue file semicolons get added :(", 'stevealee do you have prettier preferences set within your user settings in vs code? this is what mine looks like:```json{"editor.detectindentation": true."editor.fontfamily": "operator mono"."editor.fontsize": 17."editor.formatonsave": true."editor.formatonpaste": true."editor.wordwrap": "on"."workbench.colortheme": "cobalt2"."prettier.singlequote": true."prettier.semi": false."prettier.usetabs": true."prettier.tabwidth": 4."prettier.trailingcomma": "none"."prettier.eslintintegration": true."prettier.ignorepath": "package.json"."files.associations": {"*.js": "javascriptreact"}."workbench.startupeditor": "welcomepage"."files.autosave": "off"."sublimetextkeymap.promptv3features": true."editor.multicursormodifier": "ctrlcmd"."editor.snippetsuggestions": "top"."window.zoomlevel": 0."[javascript]": {}}```', 'i wonder if we should be recommending `.prettierrc.js` or `prettier.config.js`. the latter seems to be more common. but eslint uses the former.', 'i came to the same conclusion that it should be `.prettierrc.js` because eslint uses `.eslintrc.js`.  why do they both exist?', "we don't add options for this kind of thing (see #40). i'd suggest using eslint (prettier-eslint) to do this.", "this is a huge can of worms. at facebook we're in the process of solving it via an eslint plugin with autofix that reorders all the require/imports but it's been difficult.there's a bunch of cases where you have imports and code mixed together. how do you define when imports end? do you force a new line after each group of imports?```jsimport { myconstants } from 'myconstants';const { a. b. c } = myconstants;import ...;```same for exports. they are often in between the code. so it's not as clear when to put a \\n.my gut feeling is that we're unlikely going to find something that works all the time and if/when we do so. it's going to be very complex and not provide a ton of value compared to the frustration it's going to cause. but i could be wrong :)", "i'm sorry i did not catch the fix or workaround for this issue.until now i just wrap an ugly `/* eslint-disable indent */` around ternary operators.it would be very  (*nice*) if someone could remind how to deal this.", 'what about copying eslint\'s approach when you try to lint ignored files? `0:0  warning  file ignored because of a matching ignore pattern. use "--no-ignore" to override`or negated pattern as proposed above.', "seems `.prettierignore` doesn't not work for `eslint-plugin-prettier`.how can i ignore `*.vue` for `eslint-plugin-prettier`.", 'jasonxia23  use `.eslintignore`.', 'we would also have to be careful not to move `// eslint-disable-line` comments.', '...and `eslint-disable-next-line` and `tslint:disable-line` and `istanbul ignore next` and `prettier-ignore`. etc.', "release: missing eslint rules around spacing. <!-- thanks for wanting to fix something on sequelize - we already love you long time!please fill in the template below.if unsure about something. just do as best as you're able.if your pr only contains changes to documentation. you may skip the template below.-->### pull request check-list_please make sure to review and check all of these items:_- [ ] does `npm run test` or `npm run test-dialect` pass with this change (including linting)?- [ ] does the description below contain a link to an existing issue (closes #[issue]) or a description of the issue you are solving?- [ ] have you added new tests to prevent regressions?- [ ] is a documentation update included (if this change modifies existing apis. or introduces new ones)?- [ ] did you follow the commit message conventions explained in [contributing.md](../contributing.md)?<!-- note: these things are not required to open a pr and can be done afterwards / while the pr is open. -->### description of change<!-- please provide a description of the change here. -->", "welp. i'm pretty sure i didn't `npm uninstall eslint`. so not sure what's up with travis :/", 'replace ad-hoc eslint globals with jest env. as per title## test planci passes', 'is there any update on the status of this pr?', 'colinrcummings friendly poke for update on this pr', 'cc aij', "sorry. didn't catch this as it was failing some checks. merged it now!", "update eslint config. ###### first committhis commit removes rules from `.eslintrc.yml` in favor of using the`eslint-config-metarhia` package.  three rules are turned off for now.because they trigger lots of linter errors: - `arrow-parens` -- forces consistent parens usage in arrow functions - `comma-dangle` -- forces vcs- and diff-friendly comma usage - `handle-callback-err` -- ensures the errors are handled instead of   being silently ignoredhow these exceptions are handled further is outside the scope of thiscommit/pull request.  former two of them are purely stylistic. but thelatter one points at legitimate potential bugs.`eslint` package has been updated to match what `peerdependencies` of`eslint-config-metarhia` require. and `eslint-plugin-import`. which isalso a part of the config's `peerdependencies`. has been installed.consequently. `eslint-plugin-impress` has been updated too. so that npmdoes not complain at unmet peer dependencies (technically. it isn'tstrongly connected with this patch. since eslint4 has already been usedon `master`. so it must have been complaining already. but given thatthe whole eslint infra is updated here. it kind of fits and is in spiritof the changes).###### second committake it or drop it. it doesn't really matter. similar changes in otherrepos involved migration to json for eslint configuration files. so ihave done it here too.", 'landed in 6a13521', 'provide option to print upgradable packages as a simple list separated by spaces. especially for use with the global (`-g`) option. it would be useful if `ncu` was able to print the upgradable packages as a simple list of package names. separated by spaces. (eg. `babel-eslint eslint grunt-cli jshint jslint`) so that it could be copied and pasted (and manually edited) to be used in an `npm install -g babel-eslint grunt-cli jshint jslint` command (note that `eslint` was removed. as it must not be upgraded).', "btw. currently. i'm using the following. but it's a bit messy.`ncu -g | cut -d' ' -f2 | tr '\\n' ' '`", "i just tried that. but the command `ncu -g --jsonall` doesn't output anything.", 'yeah. we should fix that.', 'chore: do not double declare eslint. this is being included in both deps and dev-deps', 'merging as this change is non controversial', 'personally. i think more smaller projects is much better than one large. bloated. multipurpose project.separately. eslint is useful even when not using babel. and not everyone using babel uses eslint.', 'thanks for your replies.as i understand. technically both `eslint` and `babel` developers can unite efforts to contributing of `acorn`. imho. if several projects use the same piece of software. they should unify it\'s interface and contribute to it together together.from developer point of view. work can be represented as stream from* compiling from `es6/7/etc` to `es5` according to `babel-env`* linting. static analysis (`eslint`)* minifying (`babili`)so. all tasks can be implemented as `acorn` plugins. isn\'t it?and. ljharb. management of big "bloated" project is not a problem with proper people.', 'a question on how to disable a specific rule for a line or a block of lines. in eslint it is possible to disable a rule for a specific line in the following way:var unused; // eslint-disable-line no-unused-varsis there something similar in sass-lint ?also is there a way to disable a rule for a block of lines ?', 'not at the moment. please follow #402', 'can you run the linter and fix the issues?```gulp eslint```', 'jquense your solution does not seem to work for me as there are no arguments passed to the function.', 'comma-dangle: ["error". "always-multiline"]. we should respect this rule with eslint.', "selector regex fix. this fix solves the following:1) eslint octal errors (should be in separate branch really. but i couldn't run the tests without it)2) faulty selector regex - previously limited to only lowercase letters. now includes all valid css classnamesnote: i didn't do negative testing. so these changes _might_ mean that some other errant selector passes the new regex pattern and gets included when it shouldn't. but i don't think that likely.edit: hmm. apparently it now allows certain selectors when it shouldn't. gonna fix that and reopen the pr after i make the changes.", 'ok. i\'ve added a commit that fixes that problem. unfortunately. this breaks one of the existing tests. i\'m afraid i don\'t have the time to hunt down this bug as well. i suspect that with the new regexp. the "join" glue is captured (which probably suggests that there might be more false positives).', 'i\'m all for adding both "one var per line" and "require dangling commas" to the linting rules. they both makes is easier to add/remove/reorder rows in arrays and objects and as you say doesn\'t break in any environments anymore.regarding how to best transition to new conventions; why not just edit `.eslintrc` and let the new rules trigger errors all over the place? whenever you work in an old file that uses the old conventions you probably feel like cleaning it up to get rid of the linting errors. and after a while the whole code base has been transitioned. ;)i think i prefer that than to have different conventions in different files and they all pass the linting rules.', 'fix eslint error for double quotes', 'review eslint. - remove nonexistant gulp task from package.json- change various eslint rules- enable recommended ruleset', "i like the rules. but definitely feel that the errors need to be addressed before merging this change. don't break the ci checks. =)", 'only report errors / hide warnings. is it possible to only report errors / hide warnings for the cli? something like the "--quiet" option in eslint?i was looking to integrate this in a ci setup with the "pending" config so my team could start using it. but i found out pretty quick that if there are errors. it also shows all other warnings too! so finding the error in the thousands of warnings doesn\'t really work. i played around with the code a bit and was able to make such an option. so i could take a crack at making a pr if you guys are open to it?', 'ya. definitely happy for a pr here...', 'ignore warnings / only report errors with "--quiet" option. resolves #428 if you pass "--quiet" to the cli. it will now remove warnings from the console output. i also updated the console output to show the number of warnings. like how eslint does:eg:  3 problems (2 errors. 1 warnings)i understand this may not be desirable in this pr. as each pr should probably implement one feature. so feel free to tell me that. i\'m also new to nodejs (but not javascript) and tests in general. so constructive feedback is welcome!', 'prettier!. - [ ] stand alone `.prettierrc.js`- [ ] plug into eslint', 'add eslint plugin esque documentation grid to readme.. * list all rules* separate stylistic from rules from safety/error related rules* show which are in the recommended config', 'oh! i completely forgot about `--json`. will do!', 'rwjblue i have made the requested changes. please review.', 'rwjblue okay. take another look when you have some time. edit: whoops. accidentally clicked "close" lol.', 'absolutely!', "i've updated the readme. i think in the future it would be nice to have a section for the arguments you can pass. instead of just throwing more examples to the list  hehe. also. would you like me to rebase onto master?", "thank you! i'll try to get this released in the am (feel free to ping me if i forget )...", "you're welcome. and thank-you for the feedback. sir!", 'eslint no-useless-escape. a recent release of eslint added `no-useless-escape` to the recommended ruleset. i reduced the severity of it to a warning for now.todo:* [ ] go through the list of warnings and fix them.* [ ] remove the rule from .eslint.json', "> wow! it wasn't as bad as i thought. the first couple commits were `eslint --fix`. which caught the majority of cases. i didn't see a single error made by `--fix`. what it did do is leave behind quite a few manual changes. but they were straight forward: either hoist the const/let or add block scope to a switch/case with `{}`.", "so what i would like to do. if you agree. is push a quick point release for the outbound fixes before merging this. thoughts?> on sep 2. 2017. at 7:28 pm. matt simerson <notificationsgithub.com> wrote:> > wow!> > > > it wasn't as bad as i thought. the first couple commits were eslint --fix. which caught the majority of cases. i didn't see a single error made by --fix. what it did do is leave behind quite a few manual changes. but they were straight forward: either hoist the const/let or add block scope to a switch/case with {}.> > --> you are receiving this because you are subscribed to this thread.> reply to this email directly. view it on github. or mute the thread.>", "> the only thing i'd be adamant on is putting the eslint-disable comments at the top of the filei strongly disagree. putting them inside the scope they effect limits them to only the section of code that needs the exception. as well as making it way more obvious **why** they are needed. (hey ya'll. this chunk of code right here is an exception to the rule). it's no matter though. because i've removed them all as they were only needed before i found and set prefer-const's ignorereadbeforeassign option.", 'travis is reporting it can\'t find "eslint" on node 6. but it worked on previous passes. i recently saw this on another project and the fix was clear travis\'s cache.could someone clear out the travis cache for this pr please?', "oh so sorry about this... we'd run across this same problem elsewhere but missed fixing this one :-( thanks for the pr! i'm sure it'll save a lot of other people trouble.the pr looks great other than an eslint error. if you could fix that. i'll get this merged and cut a new release.", "from what i can see that last travis result is an error (`couldn't resolve host 'github.com'`) as opposed to the previous eslint failure. would someone be able to kick off this run again? thanks", 'updated eslint. adjusted some settings (e.g. comment markers).', "good point about git blame / dissect. i will fix the current eslint config (it is broken- true/false should not be there. it's a 0-2 scale iirc). add strict mode. and use module.exports in a separate filesmaller diff is preferred", "no. actually the only reason of creating separate config file for eslint is that eslint doesn't use babel or any other transpiler to be able to deal with es6 stuff (import\\export statements in particular).and `require('babel-register');` in `webpack.config.eslint.js` allows us to enable transpiler on the fly and require es6 modules like `./webpack.config.development`.", 'install eslint v3 and plugins. #320. #319 . #318 . #317. #287need fix: `import/no-extraneous-dependencies`', 'what do you think about turning off this specific config?', 'ok. already disable it. so should pass the linter now.', "unify/fix .eslintrc quotation. eslint wants it's property keys doublequoted.", 'thanks', 'please merge in master. also looks like you have some eslint issues.', 'fixed the eslint error', "deprecation notice. this project has been replaced by `eslint-config-walmart`. maintaining copies of other people's config is neither useful or helpful at this point.ryan-roemer kenwheeler jchip", '.', ':+1:', 'woot. moving towards a more consistent coding style always makes me happy. thanks justuswilhelm!could you add the relevant [eslint]( rules to the `.eslintrc` file? i think some of them are missing at the moment. like the newline at eof one.', "nventuro i've checked and made the eslint rules a tiny bit more specific :) we should be all good now.", 'brandur-stripe apparently i had no idea how eslint actually worked. :joy:', '> brandur-stripe apparently i had no idea how eslint actually worked. haha. you and me both!ptal jlomas-stripe', "shouldn't this be a eslint plugin ?. excuse me if i'm completely missing the point here. but. this seems like a bit of an after the fact solution. in one way you could almost says it promotes not cleaning up your code. if your declare a proptype and then don't use it in your compoment. essentially it's an unused param. and it should be highlighted or removed from the code trough eslint.", "> excuse me if i'm completely missing the point herei think you do miss it  .the point is to have an eslint rule enforcing the use of `proptypes`.you want to do it as `proptypes` are defining a clear api of your isolated component.the thing is this code is only useful in development. it doesn't worth anything in production.and worth. it's costing you bandwidth. parsing and evaluation time.i'm gonna refer to the readme:> ### the problem solved> > remove unnecessary react proptypes from the production build. you can save **bandwidth** by removing them.", "oliviertassinari but in the example in the readme you show a compoment that does not use the foo proptype ( meaning is essentially an unused prop ). my argument is that you shouldn't have written the foo proptype in the first place ( or remove it ).is this a bad example then ?``` jsxconst baz = () => (  <div />);baz.proptypes = {  foo: react.proptypes.string};```", "helmus oh right. it's not a great example!", 'thanks. i have updated the readme.', "fix eslint errors (tests). our lint tests weren't passing.this lines of code had the wrong indentation.", "shvaikalesh   i've removed the extra braces", 'awesome! herenow. thanks for the contribution.']