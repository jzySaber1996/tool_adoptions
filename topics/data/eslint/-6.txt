['dev-dependencies included in packages. there are many dev modules such as eslint and gulp that have dozens of dependencies. listing each of them for each lambda in the excludes is not ideal.an `includepatterns` would help a lot. as would blob matching as opposed to regexp', 'as a workaround. i\'m using:``` "excludepatterns": [   "node_modules/(?!jaws-core-js|dotenv)[a-za-z-]+" ]```', 'this is only a problem when turning off browserify.', 'eslint: fix `no-mixed-spaces-and-tabs` turn off. currently the way the rule is defined. mixing spaces and tabulations inindentation is allowed. however. the comments and documents seems to saythe opposite.this patchs turns the rule on so mixing spaces and tabs is not allowed.fixes: #539', 'why is babel-eslint required?. eslint supports all of es6 plus the experimental object rest/spread that react uses. is it possible to remove babel-eslint as a dependency? (it would make linting faster.)', 'support for what?', '> all of es6 plus the experimental object rest/spread that react uses', "ljharb do airbnb not use e.g. es7 extensions at all?while eslint might cover all of es6. it doesn't seem to cover things like class properties and async/await (maybe just with arrow functions?) that people actually use.", 'taion no. airbnb does not use any es7 extensions at all - only things that are in the spec (stage 4 for post-es6 stuff).', 'fair enough. do you think an `airbnb/babel` would fit here?', "since we don't use `babel-eslint` internally anymore. i'm not sure what the purpose would be - you can add it as a parser to your own `eslintrc` that extends our config. and you can define any rules you like in there?", "that's what i ended up doing - same ruleset. just needed eslint to not choke on es7 features (they weren't getting linted in any particularly interesting way anyway).", "`npm install -g eslint` (note that --save and --save-dev don't apply to global installs)", 'i did that already. same problemnpm install -g --save-dev eslint-config-airbnb babel-eslint eslint-plugin-react eslint', "this seems like something eslint should be handling - `require.resolve` is something that generally shouldn't be done outside of bundling tools.", 'the tests of this repo itself pass (e.g. running `npm test` in `packages/eslint-config-airbnb`).', "> it's already set up. we could use eslint. like underscore. too though.yeah but we don't run it through ci and haven't updated it in a long time", "eslint tidy up. i thought some eslint might be nice for exim too. so i've hooked it into the build process.", 'made the changes suggested... browserify externals seems to work ok too - though you might want to check that in production code....', 'awesome!', 'lint: add linter and get project to pass ruleset. this commit adds eslint as a dev-dependency and a basic .eslintrcchanges were made across the entire project to have it pass the linter.', '/cc jasnell', 'rubber stamp lgtm!', 'landed in 2a46931', 'please accept this pr. as i am running into the issue mentioned in eslint/eslint issue #6090', 'lint for spacing. used `eslint . --fix` to resolve the warnings automatically :smile:', 'can we make it so that `function() {}` is the accepted convention instead of `function () {}`. no space between function and `()`?', 'vkarpov15 absolutely!updated the configuration and the code.', "possible to add an alternate style instead of '${val}' in message strings. i was just curious if there is any possibility of changing (or adding an alternate style to) the way inserted values are used in yup message strings. my linter complains to no end because `'${}'` is not a valid template string and is often times considered a bug. eslint expects `${}` to only be used in template strings. but with yup. using `${}` inside a normal string is standard practice. i understand changing or adding an alternate ability to a lib simply to appease a linter error is crazy. but its `eslint`/`standard` which is a very common linter and i am sure other people have this problem as well.just curious if anyone else has this issue and if adding an alternative style would be considered by the maintainer.", 'yeah. oh so maybe related to the fact that i use babel-eslint?', 'project cleanup:. just minor things:- require() -> import- var -> let/const- hoisted most of makeproptypesast- minor var name / spelling consistency changes- removed console.error() lines in favor of throwing a more detailed  error. console.error() unfortunately gets lost way up the terminal.- added eslintrc', 'thanks! :-)', 'chore(follow eslint with ember-suave)', 'baocang try to put this line into your `.eslintrc.json` ```"root": true ```by default. eslint will look for configuration files in all parent folders up to the root directory. not sure if this is that case. but such a behavior can sometimes lead to unexpected results like this.', 'add eslint for jsdoc and fix issues', 'oeh fancy. til. nice linting :clap: :clap:', 'alexicum thanks. could you fix eslint errors to pass circleci check?', "aksonov fixed eslint errors. but tests failed: could you check what's wrong with them?", "you had trailing whitespace. but eslint doesn't check for that apparently. i thought it did. but yes. your eslint is fine.", "i totally agree. and was planning to do this myself once i finish with #120. but am happy to see someone else do it as well :)i think we should use a nice simple `eslint:recommended` rule set. that's what ember uses. although it adds a couple more rules that i'm not sure we want to enable. also there will probably be some fiddling because of our node code.those are my thoughts.", "emackey i'm going to push webstorm config changes. is there anything we need to do for vscode here?  i know they have an eslint plugin.", "mramato i switched to vscode as well.  and yes. there's a eslint extension that should be mentioned instead of the jshint one.", 'the eslint rule `"semi"` (missing semicolons) is not on by default.  the cesium repo passes with this rule enabled. should we explicitly enable it?i\'m looking at vscode now.', '> the eslint rule "semi" (missing semicolons) is not on by default. the cesium repo passes with this rule enabled. should we explicitly enable it?i would think so.  we definitely want the eslint to match our old rules as close as possible.  good catch.  we\'ll have to keep an eye out for this kind of stuff even after merge to make sure we haven\'t missing anything.we\'ll also need to evaluate some brand new rules now that we have the capability (such as whitespace and formatting).  this will happen post merge of course.', 'i added `"semi"`. updated vscode and removed eclipse.mramato sandcastle still uses jshint at runtime to scan examples that are loaded into the browser.  this means the build is scanning them with eslint but the runtime displays them with jshint warnings.  not ideal but it may take some effort to replace the runtime system with eslint.  not sure if that needs to be in scope for this pr.', 'mramato adding fix is essentially a "one line" and might look like:```jsgulp.task(\'eslint-fix\'. [\'build\']. function() {    return gulp.src(eslintfiles)        .pipe(eslint({fix: true))        .pipe(eslint.format())        .pipe(gulp.dest(\'.\'));});```i am not too familiar with this sort of thing using gulp streams (super easy with something like grunt). but it seems to me that the above will be somewhat annoying for a project of this scale. i apologize for bringing it up without testing (i assumed i could implement it as easy as i have done in other circumstances)', "thanks again jhwohlgemuth!  i submitted some minor tweaks but as soon as travis passes we'll merge this.i encourage everyone to check out eslint rules and think of anything code style or formatting-wise you would like us to enforce in cesium.  i already have my eye on trailing whitespace and blank lines; but i'm sure there's a ton more.", "investigate eslint auto-fix. eslint has the ability to automatically fix problems.  at the very least we should add a manual gulp task for fixing problems.  if it's foolproof and fast. we can even consider it happening automatically at commit time.", 'fix eslint in 3d-tiles branch', "since the original intent of this pr was to fix the eslint errors in `3d-tiles` (which is currently broken). i'm going to merge it as-is.  we'll address the other two comments as part of the `3d-tiles` pr.thanks hpinkos!", "bump.i'm not entirely sure how `peerdependencies` work. for example. if a user references `cesium/browser`. they need to have `eslint-plugin-html` installed. right?i've assumed that is the case and added it to `readme.md`. if i'm wrong let me know!", 'omh1280 i know we talked a little bit about that link offline. but always provide some contents to posts like that so other developers (or ourselves in the future) have the required context for it.  cesium is developed out in the open.also. i think the easy solution in this case is to run eslint via a child process instead of through gulp. then we can use the cache argument.  look at `generatedocumentation` in the gulpfile for an example.', "> i've assumed that is the case and added it to readme.md. if i'm wrong let me know!can't we just have `eslint-plugin-html` be a dependency of `eslint-config-cesium`?  i think that will work.", 'my pre-push idea is failed. `eslint --fix` causes some unstaged changes which blocks push. i added a new gulp task (eslint-fix) but i will replace it with eslint cli according to #5449 .i am still unsettled about pre-commit. after evaluting eslint cli with --cache i will decide.', "mramato i put these in cesium's `.eslintrc.json`. should they go in the shareable config instead?", "lilleyse is writing up issues for any remaining task items that we agreed to do post merge.there are a bunch of `eslint` errors when merging master. so i'll fix them in this branch and then merge up.", "thanks for looking into this ateshuseyin.  after some unrelated changes. running with `--fix` is as easy as running `npm run eslint --fix`.  i think running fix automatically is really worth it (since it can't fix everything) and most of the time devs will just manually fix one or two issues.i think where `--fix` comes in very useful is in adding new rules. which is a rare occurrence.long story short. i'm closing this issue.  thanks again ateshuseyin.", 'do you mean add a `/*eslint-disable no-implicit-globals*/` at the top of `speclist.js`? is there a way to disable `.gitignore` for one commit?', '> do you mean add a /*eslint-disable no-implicit-globals*/ at the top of speclist.js? is there a way to disable .gitignore for one commit?sorry. i should have been more clear.  what i meant is to modify the `createspeclist` function in `gulpfile.js`. which is where `speclist.js` gets generated.', "mramato can you prioritize this? the glob change means that the eslint tests aren't running on travis", 'fix eslint glob. fix eslint glob issue. which prevented eslint from expanding globs and instead left it up to the os.mramato please merge soon!', 'thanks.looks like this worked on windows by not other systems (because of wildcard expansion). your change should work everywhere.', "fix(babel): add default settings for transform-runtime-plugin. k sozhaleniiu polifily i khelpery iz transform-runtime lomaiut testy v nekotorykh keisakh. kak eto pochinit' poka ne ponial. poetomu vremenno vykliuchaiu eti fichi.plius bolee zhestko fiksiruiu versii eslint i tslint. tak kak s `^` inogda priletaiut lomaiushchie izmeneniia", "heymdall v kakikh keisakh chto lomaetsia? khorosho by ponimat' v chem delo)", "esli seichas v libe poprobovat' zapustit' testy - oni ne budut rabotat') nu i s babel-jest tozh gliuchit. pochemu - ia ne ponial. infy malo. nado kopat'. no poka chtob liudiam ne priletali oshibki - vremennoe reshenie.", "true. that makes sense. i just hope that there are enough complete config options that a typical eslintrc file only has a few lines in it. anyway. it's done and in develop. it'll go out when i finish the react plugin stuff this week.", 'validate all configurations with eslint. along with #11 . we should import all configs individually with eslint to allow it to throw errors on anything incorrect for all files potentially importable directly.', "replace lodash merge with actual `eslint`'s `util.mergeconfig` via `extends`.. there are some subtle differences with how eslint `extend`'s configs vs. a brute force `_.merge()`. (e.g.. `plugins` are special-cased and handled differently than normal keys).we should look to use eslint's first class `extends` + under-the-hood `mergeconfig`. especially once eslint comes in as a `devdependency` so that we don't accidentally queue up subtle merge bugs later (wherein composed configurations here would behave differently than library uses doing `extends` of the same underlying configs manually).", 'bring config up to newest eslint and eslint-react', 'closed by 95eb4d612c748a2a503873a41bd3bef81810856b', 'find and remove all eslint errors. there are a lot of `eslint` errors all around. should find and remove them.', 'bump dependencies. `eslint` upgrade needs a bit more work.', 'fastboot compat + eslint', "run `eslint --fix src test` and you'll have only 300 issues to fix manually. make sure to review the automatic fixes and commit that separately."]