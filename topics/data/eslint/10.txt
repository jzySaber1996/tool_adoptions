['- adjusted test for main `entry`- removed `npm run pretest`- eslint check is still needed. moved it into ci', "i believe this is a bug in eslint or js-yaml - the default is json. so i'm not sure why it would attempt to parse it as yaml. (separately. it should only cause a problem when developing this very module. since eslint shouldn't be checking inside your own node_modules when this project is a dependency)", 'is there contributing.md. i made pr #1295 and you overwrote my commit message. i think we need a rule for commit message to avoid overwriting commit messages. if there is the rule. it could be good for contributors. for example. we need create the rule like below:- [tests]  ~ for test- [eslint config] ~ for eslint rule- [guide][react] ~ for gude ? what do you think ?', "a few points: - it's always acceptable and expected for maintainers to edit commit messages. rebase. squash. etc. upon merging - neither the original commit message nor commit authorship should be expected to be retained (although authorship generally is. out of courtesy) - the existing git log should indicate the conventions that are used. - i'd be fine with a pr that documented our commit messages (we'd probably need some back-and-forth on the pr before it was final). although this is the first time it's really come up.", "ljharb > it's always acceptable and expected for maintainers to edit commit messages. rebase. squash. etc. upon merging - neither the original commit message nor commit authorship should be expected to be retained (although authorship generally is. out of courtesy)i understand the necessity of maintainers to edit. > i'd be fine with a pr that documented our commit messages (we'd probably need some back-and-forth on the pr before it was final). although this is the first time it's really come up.in airbnb. is there a rule of commit message ? if it is. i think we can create new one based on existing rule.", "no. we don't have any commit message convention that spans projects.", 'ljharb i will create a contributing.md in reference to existing commit log. gergoerdosi i appreciate it :smile:', "changed from array to single value. this being an array with only one value was causing an error in atom's internal linter. it would throw errors on the 1st line of code stating there was no rule defined for `no-multi-assign`. when i added a rule in my local `.eslintrc.json` it simply delivered the same error in whatever level i declared. the only way for me to get rid of it was to set it to `0`; which was less than ideal since i wanted it to be where you have it. at `2` (`error`).i eventually traced it all the way back to this config as our own config extends this one. changed the array to a string in the live project and it finally stopped throwing inline errors in atom.i will say that it's odd that the cli didn't report an issue...so perhaps it's just an atom interpretation issue of having an array with no other values.", "this should work just fine - a single severity value works identically in eslint whether it's in an array or not. i'd prefer to file a bug on atom. rather than modifying this package to work around it.", 'ljharb is there a particular reason this base setting is surrounded by brackets? does that somehow imply that it can accept more values when simple string values do not?', "it means that if i add an extra option later. i don't have to add the array brackets. often i use that for consistency in my config files. so that every eslint rule always has brackets (that's not the case here atm. but it could be)", 'react-native + airbnb\'s eslint configuration. we have started using eslint in our react-native project and i am interested to find out what the ideal settings are.i currently have the following in my .eslintrc.json file.```{    "extends": ["airbnb". "plugin:react-native/all"].    "plugins": [        "react-native"    ]}```some questions i have: i keep seeing this "parser": \'babel-eslint\' but when i went to their github they mention this is no longer neccesary. should i be using it or not?', 'also if someone could label this as a question. would be great!', 'this suggests it might be a bug in `eslint-plugin-react`.kufert if you can reproduce it with that plugin directly (without the airbnb config). a bug report there would be *very* helpful.', 'who maintains this preset?why does it need to be different than the eslint config? does neutrino use something different from eslint for linting and autofixing?', "hshoff hello!> why does it need to be different than the eslint config? does neutrino use something different from eslint for linting and autofixing?no. we don't use something different. it's merely a preset for plugging in the airbnb style guide into a neutrino project. which is webpack-based. behind the scenes it is still using the eslint-loader and thereby eslint.put simply. it gives neutrino users a fast path to lint quality via `yarn add --dev neutrino-preset-airbnb-base`. and adding it to their list of other presets. i'd be happy to answer any questions if you have any.", "i believe i solved the issue. the key was `sourcetype: 'script'`:```js// index.jsmodule.exports = {  extends: ['eslint-config-airbnb-base'].map(require.resolve).  parseroptions: {    sourcetype: 'script'.    ecmafeatures: {      experimentalobjectrestspread: false.    }.  }.  env: {    node: true.  }.  rules: {    'comma-dangle': [      'error'.      {        arrays: 'always-multiline'.        objects: 'always-multiline'.        imports: 'always-multiline'.        exports: 'always-multiline'.        functions: 'never'.      }.    ].    'strict': 'off'.  }.};```", "gazpachu that seems like eslint updated to catch an error it was missing before. i'd just fix your code.", 'if this is an ok rule to disable. is the benefit really worth the inconvenience of the overrides? i would not consider it a general "best practice" to not use `setstate` in `componentdidmount`.if you have problematic render flashes you can work around that with various methods. and these methods often will not include moving `setstate` from `componentdidmount`. but another fix. leaving you with a fix as well as the `eslint-disable`.', 'you\'re running the globally installed eslint - you should `npm uninstall -g eslint`.your locally installed eslint should only be ran via an `npm run-script`. configured in the "scripts" field of your `package.json`.', "i understand. but that's still not how `require` works by default; so you'd still need to configure eslint-plugin-import so it knows what to do with images.", 'ljharb i just close it because i am busy now. if i create the pr. i reopen this issue.', 'ljharb thanks for rapid reply. do you have any suggestion about how to configure `eslint-plugin-import` to check whether a image source exists?', "at first i was like  and then i was like  but it kinda looks ok so i'll just kill that eslint mixed spaces rule and be like [?]", 'jseminck is/are the rule/rules auto-fixable?in that case you can use `prettier-eslint` to fix the stuff after prettier formats everything', "it hasn't caused any problems until now. we have over 100 repositories and having a shared eslint config helps switching from one project to another a bit easier.  is there any place where i can follow how this decision was made? i just don't understand why spaces are used when the option is specifically set to use tabs (even it looks prettier). this is the difference that we noticed:previous:```function test() {<other code>return isnotlinkedtoanyorganisation? promise.resolve({ data: { id: null } }): api.get(`/endpoint`. {method: 'post'.body: json.stringify({ name: organisation.org_name }).});}```to current:```function test() {<other code>return isnotlinkedtoanyorganisation? promise.resolve({ data: { id: null } }): api.get(`/endpoint`. {method: 'post'.body: json.stringify({ name: organisation.org_name }).  });}```tabs only solution could just simply be so. but maybe this was discussed and not chosen due to some other reasons that i am not aware of:```function test() {        <other code>return isnotlinkedtoanyorganisation? promise.resolve({ data: { id: null } }): api.get(`/endpoint`. {method: 'post'.body: json.stringify({ name: organisation.org_name }).});}```anyway. i don't want to complain prettier has already saved me so much time and i have come to love it. if this new approach will be the standard then i will find a way to adjust (eslint-config-prettier seems to be the solution). but just wanted to share my view on this particular topic.", 'ok. thanks for the longer explanationi guess the way to go is run prettier + eslint on save then.', 'j-f1 could you share related code in `ts-eslint-parser` or documentation? i only found `tsminustoken` thing in `readonlytoken` and `questiontoken`. and understand that you prefer some sort of flag so that we might not need to hard-code `readonly` and `?`.', 'landing. can update when `typescript-eslint-parser` does. thanks cryrivers!', 'do you know how other tools. such as `eslint --fix`. handles this?', 'can confirm `// eslint-disable-line` is currently broken by prettier. would be nice to handle those cases.', "in general. those line-based directives don't really seem to be a good idea. `eslint-disable-statement` would make more sense. imho.", 'mgcrea as a workaround. `// eslint-disable-next-line` usually works.', "please keep me in the loop here. i am a prettier collaborator (i introduced ts support) and the maintainer of typescript-eslint-parser.i've worked hard with the typescript team to align on asts. but there is still a little work left to be done. if we can keep communicating about how things are moving on each side then we can ensure the minimum possible duplication of work. and minimum pain for users.", 'rather than a rxjs-specific solution. what about providing a hint to prettier for such use-cases? maybe the ability to specify in the configuration file (i.e. `.prettierrc` or `prettier.config.js`) which function calls should always list their arguments on a newline. the functions can be identified by name `"pipe"`. this isn\'t the strongest link and may cause naming conflicts. not sure if there is a better way to id.another alternative can be to allow for eslint-type comment hints (e.g. `// eslint-disable-line no-use-before-define`) however. i\'m not a huge fan of artifacts of the development process being commingled with source code and this would have to be done every function invocation.', "first thought would be disabling / removing all jsx-related eslint style props and instead relying entirely on prettier for those needs; its highly likely there's a subtle conflict somewhere that's causing that issue. second (and i know this is _very_ hard and understand objections. but its a battle worth fighting for long-term use) i would set your `printwidth` to 80 like the settings page strongly recommends. for things like multi-line props and so on having an 80 `printwidth` is like a trigger that needs to be tripped for properly readable code. leading to a good balance of horizontal to vertical. that was my main issue above; at my company we had it set to 120 which caused many readability issues. when we bit the bullet and set it to 80 prettier became much more sane.", "i think you've hit on what i'm experiencing. those style rules are likely conflicting with prettier. and the printwidth 80 is a good suggestion. this particular snippet is from an open source repo i'm contributing to. however. not everyone who contributes uses prettier. so eslint is there to warn them of style-related issues and enforce a certain style. so. it seems prettier has to be all in. the only source of truth for style formatting to really work well. i can live with that.but some having options in the config for this type of thing would be the best of both worlds. just saying.", 'can you provide more information or a repro repo? it works for me in vscode:(.prettierignore)```.eslintrc```', "`typescript-eslint-parser` seems to work with them already (or at least. it doesn't complain about `tsminustoken`/`tsplustoken` nodes)", 'maybe i should make a fixable eslint rule instead of this being part of prettier.', "there isn't a ton of node-specific stuff. but there's enough to cause a lot of havoc with bundlers :)- relies on process.env to change behavior based on environment variables- relies on os.eol to match system-specific line endings- code for requiring custom parsers and custom plugins that relies on require() (which in turn relies on filesystem access and the ability to synchronously. dynamically load code)- also relies on require() to lazy-load parsers. to keep the prettier startup time fast without losing the ability to support things like prettifying javascript snippets within markdownso. in the 'idempotent' sense of 'pure'. sure - prettier's essentially that. but in the 'behaves the same way on all platforms' sense. prettier isn't (and pretty much no software fits that definition). also it fails the 'doesn't touch the filesystem in order to process input' requirement. and in terms of dynamically including code to fit inputs and intelligently cut down on load time. prettier has a pretty sophisticated. subtle implementation that you'd only find in other large. plugin-enabling architectures like eslint.", "kachkaev i've deleted `eslint --fix` and it stopped working at allworks only via webstorm but with the same problem", "it could be that prettier is not configured properly then or something else is wrong. i'm afraid i won't be able to help further here and simply suggest to setup prettier from scratch without `eslint --fix` etc. maybe trying to do this in a new blank project can help you get a working workflow. which you can then transfer to your existing code base.", 'you have to change the eslint rule so it support smart-tabs:`"no-mixed-spaces-and-tabs": ["warn". "smart-tabs"].`', "j-f1 when i do that. i get eslint's no-return-assign error. and the parenthesis appear magically (eslint-cally maybe?) `{node => (this.node = node)}`maybe there is a eslint setting i can tweak?", 'yarn. eslint changes. umd', 'hello harpere .i have resolved conflicts and eslint suggestions.i think we are good to go.', 'naegelin the prebid.js project uses the `gulp-eslint` plugin to maintain the styling rules for the project.  can you please make the necessary updates in your file to conform to the linting rules?  you can locally check the linting status/errors by running `gulp lint` in your prebid.js project.', 'enable first go at release automation. reviewed by jeremyrh - add eslint rule for jsdoc validation- un-ignore yarn.lock- add a shell script to do some basic release preparation- enable cjs bundle building through rollup- change travis.yml to use yarn rather than npm- bring in new mindtouch-http.js dependency', "i presumed from your comment above that you were going to fix jsonall. but it still doesn't work and i can't see any issue for it", 'thank you! :)', "typescript: modifiers not included in range of tsparameterproperty. <!--- provide a general summary of the issue in the title above -->### input code<!--- if you're describing a bug. please let us know which sample code reproduces your problem -->example of existing fixture in babylon tests:```tsclass c {    constructor(        readonly r.        public pu: number.        protected po?.        private pi?: number.        public readonly pur.        // also works on assignmentpattern        readonly x = 0.        public y?: number = 0) {}}```the typescript plugin for babylon currently does not include the modifiers (readonly. public etc) within the location data for the relevant `tsparameterproperty` node.this is not the case in the typescript compiler for the equivalent `parameter` node. and also not in `typescript-eslint-parser`.andy-ms if you agree that this should be changed. i can work on this.", 'excuse the really. really long comment. but i just feel some further background to the status quo would be useful:`typescript-eslint-parser` has been around for quite a long time and effectively was the first tool to try and define typescript nodes in an estree (thejameskyle you wrote eslint a few times. where i think you meant estree) compliant way.naturally. there is a lot of syntax which does not have precedent in estree. but there was. however. a lot of identical syntax in flow already and so its estree-like node structure made a lot of sense to use as a template. in cases where there was no precedent in estree or flow. we simply had to create something from scratch which was estree-like.fast forward a bit and i used `typescript-eslint-parser` to allow for typescript support to be added to prettier. it is naturally currently built to look for and reprint the typescript nodes set by `typescript-eslint-parser`. (azz would be a good person to comment on the pros and cons of supporting typescript and flow nodes in the same codebase as he has done far more work on the actual printing of nodes than i have.)fast forward even further and the typescript team decided to dedicate time and energy into parsing typescript code directly with babylon. andy has done a great job on this. of course. it made sense for the couple of years of existing precedent from `typescript-eslint-parser` not to be ignored during this process. and i was keen to work with andy to align on the ast that babylon and `typescript-eslint-parser` produce and we are now very close.my long-term hope is that this effort will allow for `typescript-eslint-parser` to _use_ babylon behind the scenes. instead of parsing with the typescript compiler and converting the ast itself and that babylon would then power the typescript parsing in prettier as well. it will involve throwing a lot of my own code away. but i am committed to avoiding competing standards wherever possible and i think that is the best way.the reason for providing this backstory is just to illustrate that this pr has a big impact on all of that alignment work and future integration work into prettier and eslint plugins. so it would be great to take some time to discuss it.---------> we don\'t have a lot of opportunities to make changes to the babylon ast. we should not be changing things frequently.i definitely agree. and we should not rush the changes through either.> seeing that there is no shared standard between the two grammars. and no guarantee that both will remain aligned. it does not make sense to try uniting the two grammars.> the typeannotation node in eslint is hardly a shared standardi feel like this is a bit of a chicken and egg situation - before this very recent effort by andy and me. had anybody actually taken the time to try and identify commonalities in syntax across the full "languages"? that initial extension to estree was very small by design. because there was not enough information to hand to standardise more things. i believe we now have that information and some buy-in from flow and typescript team members could actually make standardisation of overlapping syntax a possibility.> type annotations within flow and typescript have different behavior. i need to mimic that behavior in tooling that i am building. which i\'d get into further. but based on previous interactions with typescript team members i\'m not going to.i am a bit confused by this. as you are currently not interacting with any typescript team members on this pr and i don\'t believe you and i have ever directly interacted before. i think requesting specifics about the issues you are facing is a reasonable thing to do on an important pr like this. there may be other solutions to the problem. such as the one suggested by danez.you are a far more important member/contributor to the babel ecosystem than i am. and i have huge respect for the work you do. i am not trying to hold up your pr for the sake of it. i am just providing all the context i can (which you would not necessarily be expected to know about) and trying to help ensure we consider all the options.all of the tools (typescript-eslint-parser. eslint plugins. prettier etc) _can_ naturally all be updated for the right solution. i am not at all against making further changes. but so far all the context you have provided is that you are building a tool and that you would like this to be the solution to some issues you are facing. it would be great to get a bit more info from you.', 'for what it\'s worth. as an ast consumer. so far i have preferred it when nodes are shared between flow and typescript. for the most part. once a typescript ast has been converted via `typescript-eslint-parser`. we can print it in prettier with the same code path as flow. there are very few cases (only one from a quick search. relating to directives) where we\'ve had to check if the name of the parser is "typescript" to make a decision on how to re-print the ast.in contrast. if new ast nodes are introduced. we\'d have to add extra `||`s or `case`s that line up with the existing flow nodes. and we\'d inevitably miss a few cases in the future.in a sense i look at the node re-use as a form of polymorphism. if it is possible to provide the context required to perform edge-case decisions. why not go for that option?> no. we should not require context outside of an individual node or its parent to determine what the node is.`node.type` tells you what the node is. a `typeannotation` is a type annotation. what you\'re after is what _language_ the node comes from. which seems outside the scope of a node to provide.sometimes you need more than the node and its parent. you might need to know the source type. if the current scope is strict mode. even in some cases you might need the extension (typescript acts differently depending on `.ts` and `.d.ts`).', "weird. eslint error and i can't reproduce locally :(", 'update eslint', "yes. if there is an error for the eslint and i fix that. it says 'no chnges' but the error is still reported.", 'chore: clean up eslint configuration', "config auditor will complain about missing npm scripts that we should probably consider optional. e.g. remove the `eslint`. `stylelint`. or `lint` scripts. and the config auditor will complain that they are missing.strictly speaking. those (and possibly other things?) should be considered optional.there is also probably a class of optional *but recommended* things too. i can't think of any right now. but in such cases. i would degrade this error to a warning. and explicitly note that roosevelt recommends that it be present even though it is optional.basically two extra layers: a class of optional configs that roosevelt shows a warning for when it's missing. and a class of optional configs that roosevelt will ignore when it's missing without showing an error or a warning.the whole config auditor needs to be audited to identify configs which belong on these reduced levels of urgency.", 'minimatch should be added to the devdependencies? i get some eslint errors after `npm install minimatch` in the directory', 'added eslint rule eqeqeq. as per issue review .eslintrc #1797', 'added eslint rule no-undef. as per issue review .eslintrc #1797', 'thanks lennyboyatzis!', 'wow - some bugs caught in this one! thanks lennyboyatzis', 'added eslint rule - guard-for-in. as per issue review .eslintrc #1797', 'added eslint rule key-spacing. as per issue review .eslintrc #1797', 'cheers', 'added eslint rule no unneeded ternary. as per issue review .eslintrc #1797', "thanks for the work on this lennyboyatzis but after reviewing. a lot of these are important and i'm concerned including the rule in our linter config will discourage valid use of ternary statements to reduce conditions to simple values.on that basis i'm rolling back my recommendation we add this rule. and will update #1797 accordingly.", 'added eslint rule operator-linebreak. as per review .eslintrc #1797', 'added eslint rule space-in-parens. as per issue review .eslintrc #1797', 'added eslint rule new cap. progress commitas per review .eslintrc #1797', 'added eslint rule - prefer-const. as per issue review .eslintrc #1797', "style(eslint): disable eslint-plugin-react's jsx-no-bind rule. fixes #375", '> it seems print-failing and pending does not take account of the test files (with tagged templates)?definitely something we should address. first we need that eslint-plugin-hbs a valid module for the file. then we should we arbitrarily assume `.hbs` vs `.js`.', "so there is no way to configure a rule so that it generates a warning instead of an error?i like the sound of the process recommended above in general. but for a lonely team of one there is often little value to be gained from changing trivial things like where to break lines when writing component parameters. so if the tool is going to be so draconian that all i can do is turn a rule on or off i'm often going to have to forego most of the benefits of the linting and just turn it off. :( i want to conform to recommended guidelines. but unless there's some automatic fixing process there's no way i'll be able to justify to my employer that i spent a day or two reformatting code / configuring linter rules. plus it is really annoying to have a ci build fail after 20min just because of a linter violation even though the code would have otherwise built and passed its test suite just fine.", 'redo eslintrc files', 'remove console log and add eslint rule to prevent repeat. very small change to add an eslint rule to catch leftover `console.log`s. also remove a `console.log` in a previous pr.', "frameworks/toolings don't resolve dependencies the way node does. we have a lot of issues that happen because toolings like webpack. browserify and others don't resolve dependencies the way node does. this is something that pnpm will never fix and the toolings should fix. and they should fix it not because of pnpm but because they should be node-compatible.open issues we currently have because of this:- [ ] webpack: #740- [x] browserify: #795- [x] angular (because of webpack): #769- [x] cra (because of webpack configuration?): #581- [ ] eslint (actually just a plugin of it but a widely used one): #739- [x] jest: #1007- [ ] maybe karma: #720help is highly appreciated here. if you have friends in those communities or are familiar with their codebase please try to make this happen faster.also please reference this issue to make tracking of progress easier", 'if you use `mocha` in your typescript project. your project has to depend on `types/mocha` as well i believe. and in that case it will be in `node_modules/types/mocha`', "jbergstroem you have to register it via passing it to plugins. and then you can just pass the name to frameworks```jsframeworks: ['tap'].plugins: [require('karma-tap')].```", "zkochan: yeah. i did -- thanks for taking the time to follow up though. i'm kind of walking through the webpack/babel/karma stack now seeing how they all seem to enjoy the same inclusion pattern.", 'so it worked. right?', "> zkochan said:> so it worked. right?yes. it worked -- sorry should've clarified.", "i just discovered yesterday and i really believe in the idea. i would really like to help with this as obviously it's a major roadblock. where to start?", 'it seems to work fine with latest webpack. so the react stack and angular2 work fine. (they did not a week or so ago).so the eslint #739 issue and the browserify one #795 are next in priority.', 'xo is just an eslint config at the end ;)', 'upgrade eslint; lint. upgrades eslint and its ilk; lints', "discussion: video tutorial series. i'm thinking of making a video tutorial series for this repo. i'm thinking of covering the following topics:* getting started  * ide/text editor setup (sublime. atom. vs code. intellij)  * project directory structure walkthrough  * configuration explanation    * webpack. babel. eslint. flow. electron. npm scripts. redux  * creating components  * adding env variables to dev and prod  * routing  * managing state with redux  * testing with spectron. enzyme. and jest  * typechecking with flow  * creating a todo list sample app from scratch using the boilerplate* advanced   * ipc  * debugging main/renderer processesi'm sure there are video tutorial series out there for these topics but based on the issues/questions that have asked and made. i think explaining these topics in the context of this project would help significantly. especially for those who are new to the js ecosystem.", "wouldn't ide setup be a bit opinionated?", "great idea!1) it would be good if you suggest some good starter react resources so that you don't have to teach react it self. it might be good to focus on an overview of the technologies and only go into detail about the boilerplate itself. 2) creating a good screencast takes time. only put it in if you are confident that there are not many big changes coming up as the screencast will become useless quite quickly. that would be a shame.", "> it would be good if you suggest some good starter react resourcesnever even thought of this. i'm in favor of this. great idea! > only put it in if you are confident that there are not many big changes coming up as the screencastover time. there will be a significant number of changes to the boilerplate. maybe after every 2-3 releases or so. i can revise the screencasts? this is something we should discuss further._ping_ chentsulin jhen0409", 'i am not familiar with `guix`. but fyi i think the devdependencies break down as follows:build:- `types/node`- `typescript`test:- `should`- `sinon`- `ts-node`lint:- `eslint`- `standard`', 'try this npm install --save eslint-config-defaults', 'sorry. missed the es lint part in your docs.`/* eslint-disable no-underscore-dangle */`', "i've reduced comment length.if this is required. maybe this should be set in eslint - it's currently set to ignore?", ">if this is required. maybe this should be set in eslint - it's currently set to ignore?probably", 'add eslint rule keyword-spacing. because we follow it almost all of the time.', 'this is likely because npm reset their tokens yesterday due to a possible virus grabbing them through an eslint dep. who owns the tokens? gr2m?', "the lint only takes place when you do `gulp eslint` (and `gulp eslint:fix` to try to automatically fix them).those tasks are in the `gulpfile.js` file.anyway. this isn't a bug. so you would probably have better answers on stackoverflow."]