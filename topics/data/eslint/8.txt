['good stuff. thanks. (gotta fix the eslint error as well.)', 'at some point. certainly. is there a reason that you need v3 of eslint-plugin-jsx-a11y right now?', 'added flowtype linting support through the use of a new package. i use flowtype on all my personal projects. it gets pretty tiring to repeat the same setup across all projects. so i thought it would be best to standardize this through a new official airbnb eslint package.i wasn\'t sure what to call this package. so i called it "eslint-config-airbnb-next". as it implies it\'s the next stage / future support (and follows the naming of esnext). furthermore. it inherits from "eslint-config-airbnb". so includes react. a11y. and import support automatically. not sure if this is wanted. but it avoids the following 4 packages: base. react. flow. react+flow. but i can switch to that too if need be.also didn\'t modify the readme as i\'m not sure how to phrase it.', 'thank you. but airbnb officially does not use flow at this time. so this is very premature on the public repo.', 'lint throw an "error". hey guys. when i try to exec a simple lint i receive that message:``` configuration for rule "jsx-a11y/anchor-has-content" is invalid:value "" is the wrong type.```my `.eslintrc.yml` :```yamlextends: airbnbplugins:  - react  - jsx-a11y  - import```edit: i was look at file and saw the modifications like `[\'\']` to `{components: [\'\']}` done. but the module that i installed using `yarn` hasn\'t this modifications :/', 'see #1207', "right - but every `if` branch is another thing it's doing - so from the outside. your function is doing one thing. but inside it. it's doing many things. and it would be good to make each of *those* be a function that does one thing.at any rate. please feel free to file an upstream issue on eslint requesting that option. and we can consider enabling it if/once it's released.", "all code is style. including architecture choices.nothing is restricted because every eslint rule is configurable - go nuts and use whatever you like.generators and `for..of` are not something i consider a good idea regardless. but there's no point having that discussion when it's not tenable to use them in production with a reasonable supported browser list. at that time. we can certainly discuss that more fully. and flesh out the guide's description of why to use. or not use. these features.", 'julesmoretti jshint? this is for eslint. what other problems do you have that need a solution? `no-use-before-define`. for example. is a legit error.', 'ljharb - how would you still write the component using `export default class hello extends react.component {` or better. in order to maintain functionalities like componentdidmount and yet have the lint pass the test?is there an equivalent to `/* eslint-disable global-require */` but for pure functions? or a way to write it better? an example would be most welcome.', 'perfect! i updated the .eslintrc and added the no-console: 0```{  "extends": "airbnb".  "rules": {    "react/jsx-filename-extension": ["error". { "extensions": [".js". ".jsx"] }].    "no-console": 0.  }}```thank you!', 'fix package name in eslint-config-airbnb-base', "(the question's answered. but reopening to track the eslint rule change)", 'updates peerdependencies for eslint-config-airbnb. updates peerdependencies for eslint-config-airbnb.also since the last npm release has a severely outdated peerdependency for eslint-plugin-jsx-a11y. can we please get a new npm release with this update?thanks!', 'v2 to v3 of eslint-plugin-jsx-a11y is not "severely" outdated; if you read the changelog you\'ll see the differences are minor.it is explicitly intentional to not yet have released an update of `eslint-config-airbnb` that supports v3 of `eslint-plugin-jsx-a11y`. and i will release an update when it is ready.thanks for the contribution; i\'ll rebase it down to one commit with the desired commit message convention. and merge it in.', 'a better solution imo is to never globally install anything. especially a linter. which should always only be installed per-project :-)', "that's definitely not the proper solution - if you have only a local eslint installed. and atom is configured to use it. and you've restarted atom after any node_modules or eslint config change. it should work properly.", "i agree that is an option.  it is definitely a pain in the ass when it comes to ide setup.  webstorm in particular is not smart enough to say... 'lets find the project root directory. lets find the rc file. then lets find node_modules. then lets find eslint'.you are right though. just need to manually set it up. sigh.", 'yes. but `"props": true` is something that should be strictly enforced everywhere. *except* where a framework requires it. like express. the `eslint` rule change would be for `"props": true`. but with exceptions for `req`. etc.', 'zachlysobey the readme is also available on npm itself -', "that sounds much better - the usage i'd want to recommend then is `install-peerdeps --dev eslint-config-airbnb`.", "simenb  if you omit the ```sh at the start of the block it'll disable the syntax highlighting:with ```sh```shnpm install --save-dev eslint-config-airbnb eslint^#.#.# eslint-plugin-jsx-a11y^#.#.# eslint-plugin-import^#.#.# eslint-plugin-react^#.#.#```without ```sh```npm install --save-dev eslint-config-airbnb eslint^#.#.# eslint-plugin-jsx-a11y^#.#.# eslint-plugin-import^#.#.# eslint-plugin-react^#.#.#```do you want to submit a pr for that?", "i ran the install command from the airbnb readme and this problem remains in the atom eslinter.- are the packages in that command currently working?- could my problem be because of some global npm install. how is that removed?fixed my problem by removing all rules from node_modules/eslint-config-airbnb/rules/react-a11y.js (rules: {}).this is not a proper solution but it seems to fix my problem. (i'm a beginner in node usage.)", 'colsson22 you need to restart atom after any node_modules changes.', 'ljharb i did restart atom several times. but that seems like a probable explanation. thank you for answering me', 'thanks for filing this - i am indeed following that eslint issue but i didn\'t realize we weren\'t using the object form of the config.what would be ideal is a pr that converts to the identical object form first. but with a todo comment marked "semver-minor" to enable the new warnings.', "indeed that would fix it; but we haven't defined `no-empty-label` since before we split the rules into `eslint-config-airbnb-base`. are you sure you have the latest config installed on disk? what does `npm ls --depth=0` tell you?", "wagerfield how does this work in a repo with multiple nested eslintrc files?is there any chance your tool could be used to report when a non-top-level config override isn't needed? (ie. when if removed. additional warnings wouldn't appear)", 'oh my... please forgive my stupidity... i did not notice that somehow (bad drag and drop?) i had in one of the parent folders i had another `.eslintrc` where this rule was turned on... thank you for your help!', '(also node 5 is eol\'d so you want to be on 4. 6. or 7. but that\'s also unrelated)ok. all that looks good.what happens if you specify "parser" *after* specifying "extends"?also. instead of running a command inside node_modules directly. what if you use an npm run-script to run `eslint`?', 'same behavior - when extending i get no `react/jsx-no-bind` errors. but when i remove the extend i get the errors. just to make sure i follow. you meant to change the order so that *extends* is first and *parser* follows in the `.eslintrc` file?', 'allow to use eslint-import. eslint-import needs to be used with all files at 1 time. but not 1 time for every file. this commit allow to use this plugin without extra errors. also this commit add eslint ignore to usage.', 'thanks for the pr :)', 'add prettier eslint plugin', "i have the same problem.i think it do'nt use babel-loader before execute eslint.", "add missing dependency. i needed to install `eslint-plugin-promise` by hand. i guess this shouldn't be the case.", "hm that's odd. i guess this is why facebook just launched yarn   i'll merge this though as it seems to solve your problem - thanks!", '> i guess this is why facebook just launched yarn > indeed...', "doesn't prettier already break things like `// eslint-disable-line` when it adds line breaks?", "no. because it requires `eslint-plugin-react`. which isn't installed by default.", "not sure if it has been said before. but just use prettier-eslint. prettier will run first. and eslint second (with --fix). don't forget the prettier config for eslint to disable rules in conflict with prettier though. and manually activate what you want to enforce!", 'zephir77167 . thanks for the tip! but it is so simpler to just use eslint. which i see no sense in using prettier-eslint.', "paulocoghi because eslint and prettier are tools with different purposes :) eslint won't format your code like prettier. prettier can't be configured as much like eslint. some people have found a sweet stop with `prettier-eslint`. which lets prettier do the heavy formatting and then just fix the nits you want with `eslint --fix`.", "i am using `create-react-app-typescript` and i was getting the same error in vscode. i had `prettier.eslintintegration` enabled globally and after turning it off. it's indeed working. however. there is no eslint installed within that boilerplate so it's rather shocking how it can be relevant :)", '`/* eslint yoda: "error" */`', "azz this kind of things is actually the purpose of formatters. so if they don't format things the way i want. i can't use them.  i'll take a look at `prettier-eslint`. but we are using `tslint` as we are working with typescript. so i am not sure. how well it works.", 'lydell done. maybe new eslint rule will allow to catch this stuff', "yeah i thought the community was moving toward project configurations inside `package.json` because the dot files at the project directory were getting out of hand.  i don't remember reading any functional constraints. more a community wide preference.  but i've seen it plenty other places than just eslint take adoption.", 'coolemur this would not end all your "wars" in those discussions. it is start wars. add one prefer option. other people will start own prefer options. you can don\'t change default lint options. just use `prettier-eslint` and all.', "is there any way to desactivate this behaviour ?i'm struggling in making prettier fix styling issue before eslint in vscode ...", 'lydell i use eslint-config-prettier already...could not be possible to add an option in the .prettierrc so this specific behavior is ignored ?my codebase massively relies on conditionnal rendering and my code is so ugly now... everything else is perfectly formatted :/', "i don't think there's an eslint rule that will undo the formatting in the way you want.", 'you could also create your own eslint plugin with a copy of the sort-keys rule that has a fix function and use that rule instead of the builtin one.', '#652: add `eslint-plugin-promise` compatibility (closes #652). issue #652## test plan### tests performedafter have been updated `eslint-config` i run:- `npm run lint`  => no errors [?]', "chore: .eslint now proper json. proper json has quotes.eslint doesn't care. and even supports comments and other wacky things... but we should be consistent", 'cf2cb7a2a8', 'okay rebased and change everything to work. ready for review.', 'just going to be annoying for andy-ms ts pr', 'hzoo after this lands he can just run prettier on his pr. presumably!', 'correctly put typeparameters on functionexpression. | q                 | a| ----------------- | ---| bug fix?          | yes| breaking change?  | n| new feature?      | n| deprecations?     | n| spec compliancy?  | n| tests added/pass? | yes| fixed tickets     | | license           | mitthis fixes the issues that came up when babel-eslint changed to use the estree plugin.', "i'll have a look into it. we haven't officially added support for extending configurations as you can in eslint yet but it's strange that your config file path you specified isn't being read.", "sass-lint doesn't support simple js files as a valid configuration format. two files formats are natively supported by node.js: js and json. however. neither of these two formats are available to be used as configuration. could it be possible to add them? you would just have to check that the extension is a key in the `require.extensions` dict. and use `require()` in such a case.worth noting that eslint supports both of these formats.", "this is true. we do plan to add support soon and there's already a pr i believe that goes part of the way.the original reason for the format and the config naming was to mimic the scss-lint way so as to keep it familiar for people who adopted this project early. it's just never been updated for others.", "hopefully #733 should solve your problem. it allows you to specify config files to extend from within your project config file (as many 'extends' as you like too.).this will be mainly feature filler into we roll out proper config extends in a similar vein to how eslint does it.", "thanks mattbrooks2010 i'm not sure why they were directly using the eslint ones. i think it was a stop gap to get support for formatters before and it's just never been updated since i've been on board  you're right though this definitely needs rectifying soon.will look into it.", "daleharvey i've reverted the changes regarding `arguments`: i had noted in the commits that they addressed memleaks in pouchdb-http-adapter but i can't reproduce those changes anymore (but i'm now testing with node.js 7 so there might be a difference there as well -- anyway).i also checked eslint and inserted spaces after `if`. but eslint complained about `unexpected space before function parentheses` when i tried `function abc ()` so i left those alone.", "vladyslavgoloshchapov for what it's worth. i stumbled upon this same issue using pouch with ionic 2 and was able to work around it by trusting nolanlawson that emit is in the global scope and cheating the ts compiler with `declare function emit (val: any);`.i have not tested extensively just yet but seems to be ok. i've also not tested aot compilation with this either.", 'i also am using that workaround. but the problem is that i don`t like hacks.global variables with such common name should not exist.', 'what you are seeing is an eslint error. trying to warn you that it looks like you are trying to interpolate a string but using the wrong quotes.the error is wrong. you can turn it off by changing your eslint config. or if you wanna keep the rule on you can change the yup messages to use a function instead like: ```jsparams => `must be at least ${params.min} characters long````', "remove js-beautify and improve eslint config. **please check if the pr fulfills these requirements**- [ ] an example has been added or updated in `examples/` (for features)- [ ] docs have been added / updated (for bug fixes / features)**what kind of change does this pr introduce?**- [ ] bugfix- [ ] feature- [x] code style update (formatting. local variables)- [ ] refactoring (no functional changes. no api changes)- [ ] build related changes- [ ] ci related changes- [ ] other... please describe:**what is the current behavior?** (you can also link to an open issue here)before. there were two linters doing the same thing: linting and fixing lint errors. there were also two commands for this. `npm run lint` and `npm run beautify-lint`.eslint has gotten extremely popular (especially since jscs was merged into eslint) and is very actively developed. so it makes sense to move over to eslint. many people also have eslint setup in their editor.**what is the new behavior?**now. there is only one linter. eslint. the js-beautify config is merged in the eslint configas best as i could do. there is almost no documentation about the rules of js-beautify.so this was a bit hard.eslint was updated to v3. which provides many powerful rules. and auto-fixing of some rules (with `npm run beautify`).`npm run beautify-lint` was removed. because `npm run lint` does the same now (which makes sense).**does this pr introduce a breaking change?**- [ ] yes- [ ] noif this pr contains a breaking change. please describe the following... - impact:- migration path for existing applications: - github issue(s) this is regarding:**other information**:i also checked the new eslint config against the main webpack repo. and adjusted the rules accordingly. this config finds about ~ 50 new errors in the main repo. but these are all very valid (e.g. dead code. inconsistent code style). optionally. i could update the main webpack repo after this.another interesting thing to do would be to make a new repo with this config. `eslint-config-webpack`. but that's outside the scope of this pr for now.pinging thelarkinn for review.", 'lgtm!', "header improvements. fix #41 min-max window controls fix #305 cover componentfix #311 ctrl-f focuses searchfix #328 comma-dangle eslint rulestill a layout problem i'll try to fix asap", '#yolo', "> still a layout problem i'll try to fix asapwhich one?", 'volume button is overlapping on the cover', "a few things:> read about the code architecture in docs/code/architecture.would love to see this :smile: or is everything in the first post of this pr ?fix conflicts and make sure to roll-back this eslint config to the state it was + fix all not-passing tests (should be eslint problems only).then you'll tell us how we can test it and do a quick tour of the features.", "> looking forward to the eslint babel-eslint change upstreamyou've peaked my interest mattblackdev. has ace switched to using eslint? i haven't seen anything about that being completed on the ace repo.", "full refactor of jscompiler along with lots of other stability tweaks. pr changelog:- refactored jscompiler for readability. and abstracting logic out of compiler modules. (prep for roosevelt-uglify module) (closes #22)- refactored appcleanup to be cleaner. more concise. and more defensive.- added a `rooseveltnorecurse` flag to `defaultparams` to indicate not to scan recursively in `checkobject`.- use path module to manage paths rather than string concat across app.- refactor jsbundler handling of params to be more defensive.- move automatic param auditing logic to `sourceparms`.- ensure `checkparam` is used for all params in `sourceparams`.- ensure html validator disabled warning doesn't appear in production mode.- bring deps up to date.- minor eslint rules tweaks to account for oneconst. function spacing.- merge `suppresslogs` and `disablelogger` params into single `suppresslogs` object containing params for `httplogs` and `rooseveltlogs`.", 'the appveyor tests passed the first time.  nothing changed except eslint whitespace fixes.   maybe run it again.', "please provide eslint config. hi.is there an eslint file (or similar) for this repo? i'm hacking on #71. #72 and i'd like my stuff to be formatted properly.", "duh. it's in .eslintrc. sorry. i got confused with my ide complaining.", 'hi i think you have a couple of more problems. i can\'t fix them all. seems like you don\'t use your eslint conf file in the ci. i also added that you can pass back the context to build more convenient state machines. i would also suggest you to add "comma-dangle": "off".to build waiting states where you can react differently on each intent after some question of alexa and of course:"no-console": "off"to your eslint conf for cloudwatch.but other then that your framework is great. keep up the good work.sebastian', "unfortunately. i cannot fix all lint errors in the stringify.js without deep refactoring. i'd like to postpone it from now and change a little bit the .eslintrc file", 'remove eslint rules to plugin. depends on haraka/haraka-eslint#13', 'use coding style standardjs. use of  coding styleit that not full match the needs. we can extend the rules of the eslint package of standardjswhat do you thing about it?', "i'd rather prefer airbnb style but both of those styles are a big drastic change.we should agree on a final ruleset maybe. i'd rather be a similar style to the rest of the open source nodejs projects then completely different though. which is why i would agree on either standard/airbnb ruleset.", "i think all of this is just a massive distraction.we should be improving the software (read: making it faster. adding new features. fixing shortcomings) rather than concentrating on changing the style of the code.implementing this would create a massive patch-bomb (e.g. removing semi-colons).personally speaking - haraka is already missing a bunch of code that i wrote years ago because of changes like this making it so time consuming to keep things in-sync that i stopped trying.  i'll get around it it eventually but spare time is precious these days.", 'i agree with the massive patch-bomb. maybe something as drastic as changing the style should be done for v3 instead?', "> i agree with the massive patch-bomb. maybe something as drastic as changing the style should be done for v3 instead?yeah - i'd have no problem if we did it that way.   it would have to be done just before v3 is released though as trying to keep the v3 repo in step would become impossible otherwise.", "we are not changing the coding style.> on sep 14. 2017. at 4:47 am. steve freegard <notificationsgithub.com> wrote:> > i agree with the massive patch-bomb. maybe something as drastic as changing the style should be done for v3 instead?> > yeah - i'd have no problem if we did it that way. it would have to be done just before v3 is released though as trying to keep the v3 repo in step would become impossible otherwise.> > --> you are receiving this because you are subscribed to this thread.> reply to this email directly. view it on github. or mute the thread.>", "so we're sticking with using callbacks for v3? not promises or async/await?", 'ci tests pass now. after publishing newer `haraka-eslint`. manually nuking the travis-ci caches. and then restarting the tests.', 'the conversation can continue but the issue is. for the time being. settled by fiat.', 'convert .eslint.json -> .eslint.yaml. they are human edited and json is annoying to edit', 'build: include bin file in eslint. a small fix that i noticed while working on other stuff.', "add an option to have dependencies flattened. the problem is that a lot of package are developed on the assumption that the dependency tree is flat. esp. dev dependencies. i've tried using pnpm on multiple projects. and all failed because babel. eslint or some other dev dependency could not resolve a dependency which it expects to exist as a result of dependency tree flattening (esp. eslint plugins).while this is not an issue with pnpm. and pnpm should not promote possibly harmful practices. the lack of this feature makes pnpm less useful of a tool.", "> also i don't see in your workflow where you leverage the flattened node_modules structure.atom editor's eslint resolves eslintrc which in turn will try to resolve `eslint-config-standard` and if i use pnpm the linter-eslint will throw an error that it can't resolve the standardjs config because the tree isn't flat. to fix that. one solution is to add `eslint-config-standard` to my devdeps too. but i don't. if i add it. i'll just add all the `eslint-*` stuff instead of standard. but i don't want to add them. because the greenkeeper bumping spam. so i always try to have as low deps as possible.> it seems you just use global packagesno. almost never. just have rollup. mocha (hence. didn't write mocha for years ;d) and standard just for my fast fingers.> it will still use not more space per partition than npm or yarn.yea. in any way. in my case it won't be so much. and so i can reconsider using pnpm one day when i'm tired of yarn.in any way. keep doing the good job! :tada:", 'workaround: `pnpm i -s eslint-import-resolver-node`.please close if this resolves your issue.', "`eslint-module-utils` has no direct relationship with `eslint-import-resolver-node`. the latter is the default resolver for `eslint-plugin-import` and as such is listed as a dependency of `eslint-plugin-import`.i'm not sure how to resolve this. short of removing the dependency from `eslint-plugin-import` and forcing users to manually install a resolver. my impression is that most users use the default resolver only. so this would be a worse user experience.any ideas? again. listing `eslint-import-resolver-node` as any kind of dependency of `eslint-module-utils` is more or less a non-starter.", ">  again. listing eslint-import-resolver-node as any kind of dependency of eslint-module-utils is more or less a non-starter.a module cannot expect to resolve a dependency using a plain `require(dep)` it doesn't explicitly depend on in its `package.json`.`eslint-plugin-import` should pass its `__dirname` to `eslint-module-utils`. and it should resolve from that dir. the `resolve-from` package might help.", 'maybe we should create an issue at `eslint-plugin-import` in that case', 'wow shrinkwrap is a pita. flow is now passing on travis. but something changed in eslint while trying to regenerate the shrinkwrap and now that fails. :(', 'yeah. i think the name "prettier-standard" fooled me. too.  i also thought it meant "prettier _and_ standard". but it seems to mean "prettier configured to use formatting rules that are compatible with standard".it might not be bad to do something like `prettier-standard && standard`.  if they\'re both fast enough. that might be just fine.the more manual approach of using prettier-eslint + eslint might also be a good way to go.', 'please rebase your pr against current master. build failures seem to be spurious eslint problems and a "chainable" `fillform` is nice to have.', 'please rebase your pr against the current master. failing tests were due to spurious eslint issues. thanks.', 'aj-ptw i merged in xwartz changes that appear to fix the issue with the package script. i\'ll also merged in the changes from the master. i ran into an eslint issue with the ci. but was able to solve it by updating the ignore - not sure if that is correct thing to do or not.in my opinion all modules that aren\'t for development should be in the "app package.json (./static/package.json) it\'s not currently that way. but i believe all native module will absolutely need to be in the app package.json for electron-builder to build them correctly.', 'add max-warnings option. the eslint cli has a `--max-warnings` option which allows a user tospecify the maximun number of warnings after which the lint shouldfail. this adds this same feature to esprint.', 'hotfix/fix-readme-eslint unification of eslint config', "eslint config in a separate file. i'm trying to setup eslint support for webstorm and it requires a separate .eslint config file. but currently eslint configuration is stored as part of package.json. could we change it? if yes. i would be glad to make a pr.", 'see #185 and the subsequent pr #187', 'eslint errors are not shown when you start an application. i used to use react-hot-boilerplate and eslint errors were immediately shown in a browser. with react-boilerplate i didn\'t see them and even thought i have no erros for a while but then i ran "npm run test" and all the erros are there.is there a way to show eslint errors immediately during development? if yes. why is it not a default option?', "i should've been more specific. i do have errors shown to me in web storm. but sometimes you can miss it (especially when copy-pasting from other projects) and i expect to see these errors in a browser but i don't.", "i don't think this is necessary functionality for now. it just distracts from actual errors.", "hm... i have mixed feelings about treating eslint errors as not actual errors. if we don't consider them as such then may be we should reconfigure them as warnings.all i'm saying it's quite inconvenient to suddenly get all those errors in console during build and have no autoreload during fixing them (have to rebuild to check whether i'm done with them).i would really like to know what others think about this potential feature.", 'fix(eslint): enable rule react/no-array-index-key. fixes #1503', "gihrig the component `listitem` don'ts accept a `object` example:```jsconst items = [  { id: 1. name: 'hello' }.  { id: 2. name: 'world' }.];```which would be the best option to pass another component that accepts the property established by the fake state ?", "carloscuatin off hand. i don't have an answer for that...anyone else?", 'closed. my lack of how knowledge on how eslint works was the problem. i need to resolve or skip  eslint issues.', "from my point of view. i would say. first. explaining the concept then the actual tech used in the boilerplate:- main flow of the mechanics: from npm start (short desc about cross-env)-> linting -> webpack starting webserver -> compiled build folder is served -> (i'm not sure what is in-between) -> service worker started -> done!(this probably mostly just text. or maybe visual representation would be much better) (as you probably realized i am also just a beginner so i don't really know the flow. but i hope you got the point)then how webpack is structured and how it configure linting (what eslint & stylelint rules that applied in package.json). the testing environment (karma as the test runner. mocha. jest/enzyme. assertion lib). then the deployment with ci.after all this maybe more about the react & redux environment.", "carloscuatin i tried the exact same thing. but it didn't work  maybe i missed something. let's go with this if it works", "karandikarmihir >  i tried the exact same thing. but it didn't workwhat happened?current iteration works for me...carloscuatin another win for code quality   thanks for hanging in there through all the back and forth!", "docs: add js guidelines doc with first few rules explained. as talked about in #1213. here is a 'first draft' of a js style guide doc.i've only added a few explanations of deviations from airbnb for now - more could be added over time. whether that's before or after a merge.i realise that i might not be in the best position to really see this through on my own. mostly because my time has been spent working on non rbp projects for some months now also. there are eslint rules that i'm not so sure about and so can't write accurate justifications for them.happy to hand this over. let it go (if it's not deemed important) or just work with others who know better than i do - what ever works best!", "this is looking great. spen!    thanks for taking out time for this. we really do appreciate it. you can update the doc one rule at a time. at your own pace. no rush! in the meantime. i'll try to follow your style and add some more rules.", "this is awesome. feel free to take your time! (though i can't wait to land this)", "thanks for your initial thoughts guys :)i'm sure it won't take much longer than a week or two anyway - i might just have to throw plenty of q's about individual rule choices :)also. what do you think to addressing guidelines by eslint rule? i was going for that originally but airbnbs guide tends to talk about a subject. then list related rules... this might be a nicer approach for readability... i'll give that a go in my next batch!", "is there any way to remove the automatic linting process from the testing command (npm run test) ?? or a way to remove eslint completely from the bolerplate? the lint on my machine isn't working and i can't test any of my components due to that.", 'auto linting leads to some trouble when testing. because it is easy to get eslint error. especially when the config has been tweaked.could this default behaviour be changed. so that at least other tests are still run with the `npm run test` command even if there are linting error ?', "a couple more places to update. sorry. i assumed you'd change them all so only called out the one.i think we can add that eslint plugin later in a separate pr. for sure.", "i don't think any of the lines are massively long (or eslint would've complained). and quite like that they read very naturally as a single sentence e.g. `(await this.token.balanceof(investor)).should.be.bignumber.equal(expectedtokenamount);`. not sure if multiple lines would increase readability.of course. this is a case-by-case thing and not a hard and fast rule.", "nventuro my editor had prettier installed and it wrecked havok on the formatting i'm not sure if there's an easy way for me to revert those changes. since they pass the `eslint` rules.", 'convert anvilclientspec.coffee test to .js. - also move from eslint to standard package', 'looks good.', 'add eslint rule to disallow spaces inside of curly braces', 'does this hit both props and elements?i.e ```<foo thing={true}>    { thing }</foo>```or does it prevent spaces for `{ thing }` too?', 't3chguy it now lints for to make sure the style of your snippet is enforced', 'awesome!!', "the spaces look a bit weird to me in things like: ```{ _t(...) }```...but it is nice that it's consistent.", '> we should consider dropping the eslint-plugin-react no-unused-prop-types rule. it throws a false positive if you destructure your props in your component.sounds good to me!', 'is eslint taking forever to run locally for you guys? it hangs for 3+ minutes before i have to kill it.', "it's taking forever for me locally too. i think it's a paired problem of eslint enabled for everywhere (not just src) and it is checking eslint within the node_modules of `packages/`.", 'from chat. peggy is adding ```packages/**/node_modulescoverage```to our `.eslintignore`', "with this eslintignore we no longer have to set the `npm run lint` to be specific here. i'm going to go ahead and merge this as is though!", "i actually tested setting `npm run lint` to `eslint .` as it was before. but it was still painfully slow for me. maybe i'm just being impatient?", "closing. not moving to prettier (for now). in other news. i've enabled my eslint plugin in atom to auto-fix.", 'please fix the eslint errors', 'please fix eslint errors', 'i had to use url.location because location is not defined anywhere. so eslint complained. also complained about returning nothing in one case and something on the other. i also had to add url to the eslint globals. did i do anything wrong?']