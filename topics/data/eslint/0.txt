["javascript standard style. enforce javascript standard style using eslint. it's so much cleaner :)", 'feature/eslint', 'lint: integrate eslint. linting is hooked up to `npm test` so travis will run `eslint` for us. :)', "sure. i'll take you up on that offer. might have time to re-work this repo during the weekend.my current plans are to replace the `quite` option with `verbose`. refactor into a programmatic api. and install airbnb eslint config.", 'airbnb eslint config. this is quite a big one. refactored everything to pass the airbnb eslint config. bar a few rules i turned off here and there. there were some tricky parts with the plurals section. but i think i got those right.', 'gave you full rights on the repo...do you have a npm account...will give you publish rights too', 'cool. thanks!', 'my npm username is the same as here. `perrin4869` :)', 'just added you as npm module owner...happy publishing ;)', 'thanks. will try to make a major release this week!', 'to avoid this can you enable the lint rule in eslintrc? happy to merge otherwise.', 'chilled out eslint to show most things as warnings. this should make it easier to code pixi. for the main build i set--max-warnings 0. meaning that there must be no warnings left if yousubmit a pr', 'goodboydigital could you make sure you delete the branch after you merge a branch on this repo?', "hi!> would you still need to use tcomb if you are already using flow?in theory nope. in practice yes. the main advantages of tcomb are:- you can extend the type system with your custom types- you can define subtypes (e.g. the type email which is a subtype of string)- it's just javascript. hence it plays well with the other tools of the javascript ecosystemin my experience using flowtype. babel (es6. es7. es8??) and eslint together can quickly become a nightmare.using tcomb instead of flowtype as a type checker is seamless.obviously you also lose something (method names typos. ecc...). but it's a price i definitely want to pay.i think that runtime type checking + a good test suite is enough to achieve a high level of type safety.having said that. in the future i really hope tcomb will become useless. but these days and for my usecase. it's a invaluable development tool.", "adds `eslint` and the airbnb rules. flomotlik please. have a look.run the lint: `npm run lint`. don't forget to `npm install` before.", 'enable mocha globals for eslint', 'eahefnawy can you check this is not violating eslint rules? looks like most files in here would violate it.', "dep: add eslint plugin dependency. before submitting a pr. please note the following:[] make sure that there's an issue opened that discuss this fix/feature. this is not required for simple prs (ie. fixing a typo in readme). but we just want to make sure you don't waste your time on a feature that we don't intend to support/maintain.[] make sure that you've tested your changes thoroughly.[] if there are some side effects to your changes (whether positive or negative). please mention them in your pr so that we can discuss how to avoid them.above all. we thank you so much for your contribution! :)", "are you folks committed to complying to the eslint rules. currently. there are over 5k issues...and that's just in the `lib` directory. happy to lend a hand here though.```??? 5982 problems (5931 errors. 51 warnings)```", "this build is failing because eslint found errors in your code. as the instructions suggest. you should make sure npm test works locally before pushing a pull request. i am not sure how familiar you are with node. jest. and pull requests. it might take a while for you to do it. if you want to learn then i suggest understanding what npm test does. i can't look at it today but i can close your pr and create my own someone this week. but only if you can't figure it out. i think it would be good to learn how pull requests work with tests.", 'proposal:- [x] remove jscs task. lint config file and references.- [x] remove jshint task. lint config file and references.- [x] remove scss-lint task. lint config file and references.- [x] ensure stylelint runs over both `.css` and `.scss` files.- [x] include `eslint` in the `js` task.- [x] create `lint:style` that can handle `css`. `scss` and `colors`.- [ ] add `i18n` into `php` task.note. that removing jscs and jshint will also remove them from the `self` tasks.', 'minor changes to make it compatible with both wsh and asp (eslint com??. ??patible)made it eslint compatible.', 'thanks!', 'sure thing!', '"i\'m a bit confused by this... the op said that he\'s using ""eslint-config-airbnb/base"". which the docs say does not lint react. but you\'re saying (and this has been my experience as well) that it requires the react plugin?"', 'is eslint-plugin-import really a peerdependency. instead of dependency?', "josmardias that's a good point. perhaps all of the plugins should become normal dependencies instead of peer deps (including `eslint-plugin-react`. etc)", 'if they are dependencies. does it mean we are not required to manually install them? or because of the way eslint works. this requirement is still necessary?', "tleunen afaict. correct. you'd no longer have to manually install them - unless you were referencing the plugins in your own eslint configs.", "because we haven't published the updated package that uses eslint-plugin-import yet.", "you can now use the  package directly. please reopen this if you're still having trouble.", '"regarding the two issues you\'ve mentioned:1) ""managing the eslint config file is a pain in the ass"". this has proven not to be true in practice. in addition. we now use `eslint-find-rules --unused` to ensure that we\'re not missing any rules. even when eslint or our plugins update.2) ""just get up and running for a new project was not straightforward"" - beyond improving documentation (which is always a good thing). i don\'t see how the ""defaults"" project improves this in any way. all it does is present a paralysis of choice. and often out-of-date sub-configs (you\'re up to v5 on our config. but v7 is published. and v8 is coming soon).you\'re welcome to include `eslint-config-airbnb` as a proper npm dependency. and let people use it that way. and collaboration is great! but. i don\'t see a valuable direction to go here. or even any direction that wouldn\'t make the issues you mentioned _worse_.i\'m going to close this. but will be happy to reopen if a viable direction appears."', 'this seems to have been mostly addressed.', "missing jsx-quotes rule. 52d3401f953afcf09ca64dbbb177c6284832aae6 disabled the `jsx-quotes` rule in `eslint-config-airbnb-base` (presumably because the config is intended to deal with non-react rules) but the rule didn't get re-enabled on the `eslint-config-airbnb` side.", 'wow. thanks. good catch!', 'remove react from the readme of eslint-config-airbnb-base', 'thanks! copy-paste strikes again', 'difference in linters? (jshint vs eslint). hi guys.just a simple question... is there any difference in using the jshint config file versus the eslint file (including all required packages)???are there any rules skipped (especially in jshint which has smaller size than all base rules of eslint)?thanks', "we don't use the jshint config. so i'm not actually sure how up to date it is. in general. jshint does not deal with style rules. so there's bound to be a lot of gaps in what jshint supports vs what eslint supports.prs are welcome to keep the jshint config up to date!", 'do you have `eslint-config-airbnb` installed in `~/dev/{project-name}/node_modules`?', "and how are you invoking `eslint`? are you doing it bare on the command line (such that `which eslint` doesn't point to the local one). or are you using an `npm run-script`?", '"eslint-config-airbnb-base/legacy \'func\' was used before it was defined. why the linter throws an error with this code?``` javascripta();function a() {  // ...}```i have bypassed the error in this way. but i don\'t like the idea of overriding the rules of the style guide.``` json""no-use-before-define"": [""error"". { ""functions"": false }]```should\'t it be the default behavior. instead of throw the error?am i forced to declare the function before the use. even if i use the ""function declaration syntax""?"', "indeed the function should be declared before its use. whether it's an expression or a declaration - we discourage relying on hoisting.", 'prepare to enable import/prefer-default-export. this was recently added to eslint-plugin-export. it enforces thatmodules that only have a single export use a default export instead of anamed export.i believe that this will get our travis build back to green.', 'since object spread/rest is not yet standard (still stage 2. iirc). `eslint` nor our style guide support it. and we do not recommend its use.when it becomes stage 3 or 4. and when the relevant `eslint` rule is updated to support this case. we can reevaluate it (it would be dangerous to endorse this use case imo. without this linter rule fully enabled).', 'apparently there is a minor update to `eslint` that `npm-check` must not be catching. upgrading made it go away.', 'are you running eslint.js directly. as opposed to the binary in `node_modules/.bin`?', '"gausie how did you fix it? i have```  ""parser"": ""babel-eslint"".  ""extends"": ""airbnb"".```but it seems that airbnb ignored the parser."', 'framerate in that case. you should just be doing `eslint --ext .jsx --ext .js ./index.js`. you should basically never have to write `node_modules` anywhere.', "not sure why tests not passing.  everything is passing locally. and the eslint errors aren't there.", 'thanks. so it is a problem with this particular eslint issue. we will investigate it.', "you can't. seems like there is a problem.`eslint` is giving us it's severity depending on the rule.", 'its been said a lot already but to add i faced  this multiple times also with eslint. reverted to using:/* eslint-disable no-unused-vars */', "it's failing outside the controllers. so i'll copy the es6 controller code into hof-form-controllers (because eslint in that project freaks *out* if i copy the master code).", 'add eslint. add `eslint` to test suite.', 'use eslint. nyc', 'closed by #321', 'formatting fix to allow eslint to pass for unit tests. current connect code fails to run tests because eslint fails - this makes the syntax compatible with the eslint rules.', "interesting. we just looked through this and ran all the tests/linting on our systems and we're not getting this error. have you run npm install recently? there were some changes to the linting setup.", 'is there an .eslintrc in c:\\oidc\\connect which extends standard?', "i'll try running the linter on my windows installation and see if i can replicate this error.", 'oops - i did not mean to close this - hit the wrong issue - sorry...can you guys reopen it?  i do not seem to be allowed to.', "i can't reopen it either:> msamblanet:master was force-pushed and no longer has any new commits.> pushing new commits will allow the pull request to be re-opened.", 'any chance of making this configurable ? this issue possibly breaks space-before-function-paren and generator-star-spacing for my eslint checker.', 'great point lydell. i just updated this pr to use `eslint-plugin-prettier` instead.', 'improve eslint setup and fix errors. - uses `eslint:recommended` + a handful more rules.- properly sets up the environments (node + es6. and jest).- uses .eslintignore so that editors can understand which files to lint.- uses .eslintrc<strong>.js</strong> so more editors get syntax highlighting.', 'yay!', "if you are using eslint integration. you can do /* eslint-disable prettier */. we need to figure out a holistic way to tell which files should be printed and which shouldn't. i'm going to close this issue as there are other issues tracking the same idea listed by vramana above.", "given the lack of activity around this issue. i'm going to close it. but it would be really nice indeed if someone could figure it out!", "we're not looking into adding such option. if you are using eslint. you can do `/* eslint-disable prettier */` or remove that file from the list of file you run prettier through in your lint/commit scripts.", "it's called in two other places. so i can't get rid of it (yet?)fwiw. eslint should catch this sort of bug now", "okay i'm done for the day.if we fix the following 5 issues. we should be good to go for all the projects (but angular):- #1460- #1694- eslint/typescript-eslint-parser#288- eslint/typescript-eslint-parser#289- eslint/typescript-eslint-parser#290i haven't finished yet to categorize all the angular errors. but i think that there are some unique ones that aren't tracked here.this is really awesome! even with those remaining errors. most of the files actually compile fine!", 'zi', "> on a related note. prettier for typescript is significantly slower than running it for normal js. i can't wait for the babylon integration to land. this would avoid having to parse it once and then completely reshuffle the ast.vjeux would you mind sharing your method for evaluating this? performance has never been an issue in `typescript-eslint-parser`. so it has accordingly not received much attention. there may well be some quick wins available in the short term", 'you can use `// eslint-disable-next-line`. put it before the line you want to ignore', 'opened eslint/typescript-eslint-parser#295', 'upgrade typescript-eslint to 31ad3c. fixes #1737', 'dedupe typescript-eslint-parser in yarn.lock', "i just tried to override that rule but prettier still can't break that long line. however. if i insert just five more characters anywhere into that line. things start to work again. this is weird.```js  return action$.oftype(some_action).distinctuntilkeychangedxxxxx('stamp').switchmap(({ stamp }) => {```not sure if this is a prettier bug or some prettier-eslint interop issues. maybe an issue in how prettier count the line width or something wrong with a boundary condition?", 'i think you should open an issue at prettier-eslint because they probably can help you more.', 'update typescript-eslint. it improves a few things.', 'update eslint-typescript again. now fixes more issues ;)', 'update tsep to latest master. reenable abstract interface test. this updates `typescript-eslint-parser` to latest master (currently #3dcba7d53f61f51069ed84b57e053802c014d703) and reenables the abstract interface test which was unblocked.vjeux should we be updating the `docs/prettier.min.js` file by hand in this pr too. or does that get auto-generated as part of a build process?', '`yarn build:docs` to build `prettier.min.js`.', 'thanks. azz. feel free to sub yourself in as the reviewer  running that seems to generate a massive amount of changes to `prettier.min.js`. which feels unexpected from such a tiny source code change...', 'ah ok. so leave it for this pr?', 'yep. looks good.going to run prettier for the first time on a ts code-base at work tomorrow. looking forward to it. thanks for great work with the parser!', 'i will do the same and report back ??????', "do you have prettier-eslint enabled? probably eslint is moving them to one line again so you don't see the prettier output.", "> do you have prettier-eslint enabled? probably eslint is moving them to one line again so you don't see the prettier output.yup i do. i'll try disabling it to see what happens.> could you post a repro in the online demo?sure thing. will do later today.", '"k15a nailed it. i updated my eslint rules to not deal with line length anymore e.g. `""max-len"": 0.`.thanks everyone for responding so quickly!"', "you have to remember that prettier isn't respecting your eslint config. prettier always prints the code with a default opinionated structure. prettier-eslint infers some prettier config options (we only have a few) from the eslint config. in you example. prettier removes the parentheses and eslint complains about that. it seems that eslint can't automatically fix this issue otherwise you didn't get this error.", "i think the discussion here indicates that they want to force a style on the entire community to get codebases mostly uniform. and less config options is better. i found that i can run prettier and then afterwards run `eslint <dir> --ext .jsx --fix` and my eslint rules will replace all double quotes that prettier added with single quotes. it isn't perfect but i think if you are in the minority and want this functionality. you need to have your own post-processor as henrik's fantastic pr didn't make it in.", 'revert to official tsep and bump ts. this returns us to latest master on `typescript-eslint-parser` and bumps ts to the latest stable', 'thanks!', '"i tried it but i guess prettier cli doesn\'t bother whether `.eslintignore` is present or notmy `.eslintrc.json````{    ""env"": {        ""browser"": true    }.      ""plugins"": [    ""prettier""  ].    ""extends"": ""eslint:recommended"".    ""rules"": {        ""prettier/prettier"": [""error"". {""singlequote"": true. ""parser"": ""flow""}].        ""indent"": [            ""error"".            ""tab""        ].        ""linebreak-style"": [            ""error"".            ""unix""        ].        ""quotes"": [            ""error"".            ""single""        ].        ""semi"": [            ""error"".            ""always""        ]    }}```"', 'correct. prettier cli doesn??t care about .eslintignore. i meant using prettier inside of `eslint --fix`.', "lydell. audiolion  `prettier-eslint` is unfortunately really slow if you want to run it every time you save a file. it would be great if it's supported directly by prettier.", "oops. wasn't looking close enough here. the issue i was seeing was due to a script running `eslint --fix` adding a semicolon after prettier ran and pushing it over the line length! thanks for the quick reply!", "we strongly recommend disabling any formatting rules with eslint-config-prettier (just list it after standard and it'll turn them all of). we aren't going to add options for such small changes. as if we did. we'd have to add options for a lot of other things. it's good for the js community to stabilize on a general style (and as far as i'm concerned the majority of js does not use a space). it doesn't really help readability in my opinion. you just might need to retrain how you see that pattern.", 'this was likely introduced with #1999. but it is technically an issue with a dependency (eslint/typescript-eslint-parser#267) and the estree spec (estree/estree#6).', '"i really appreciate prettier so i\'ve set ""arrow-pens"" to 0 in eslint config. but this would be a good addition to prettier to have that configurable."', "i think it is fairly important to be able to flag subdirectories with a new prettier config/overrides because not all js features are supported per directory. specifically ``--trailing-comma all``. the current node lts's (4 & 6) do not support this feature. if using it. at least part of your build chain will need an exception of some sort.imo don't reinvent the wheel...copy how ``eslintrc.js`` works. nested ``.eslintrc.js`` inherit from configs further down the line but overwrite any settings.", 'calebmer thanks for the suggestion. i decided to just go for it. implemented `eslint-plugin-prettier` and `eslint-config-prettier`. plus removed the `max-len` option from my eslint config and so far seems pretty good. thank you!', 'can you open an issue on the eslint typescript project to get a real flag so that we can remove the hack when they implement it?', 'replace jshint with eslint and add lots of rules. ### pull request check-list- [x] does `npm test` pass with this change (including linting)?- [x] is the new or changed code fully tested?### description of changeeslint as a code checker has become very powerful and i thought it is time to use it as replacement for jshint.this also fixes all the mixed quotes and a unused variable.', "josephfrazier. in anyway. from v4 prettier-eslint-cli is 1:1 with prettier's cli. so there's no problem. the only needed and easiest thing to do here is to check if `prettier` exists. then if `prettier-eslint-cli` exists.", "use native promise. this removes when.js's es6 shim in favor of using native promise.  environments that don't have promise will need to use a polyfill.there are probably a few spots that will incur a small perf hit since native promise can be significantly slower.  one of those was in mergeconcurrently. and i was able to refactor it slightly to avoid thehit in cases where disposal doesn't return a promise.  if it's a problem. apps can use a fast polyfill like creed. when. or bluebird.i also switched to eslint because jshint complained about `promise`. and i didn't want to mess with configuring it to recognize `promise` as a global.  i've come to like eslint anyway :)", 'looks good! :+1: :+1:', 'added the missing bluebird link.', 'a big win on overall size with this change:  it drops 3k off the _min+gzipped_ size:with when.js shim included:```-rw-r--r--  1 brian  staff   13361 jan 22 14:34 most.min.js.gz```using native promise (no when.js shim):```-rw-r--r--  1 brian  staff   10105 jan 25 11:45 most.min.js.gz```', 'same problem here. eslint-plugin-import failing my builds', "lint errors fix. ## requirementsclean the code base## specs- run `npm run lint` it will fix a lot by itself- fix the remaining issues## noteas you can see `travis-ci` will fail because of an `eslint` rule. specifically `prefer-es6-class`. it will happen because we still have some `react.createclass` instead of es6 classes. as discussed offline with giogonzo i can leave it like that atm. so the tbd points here are: we have to 'relax' eslint (using rules ignoring comments for instance) or just remove that rule?cc gabro francescocioria", "we can relax eslint for b-r-c. but i'd like to hear from giogonzo why not change `createclass` now?", "the components using `react.createclass` are all obsolete and should be removed soon (i'm referring to `flexcell`. `menu` and `panelmenu`)in particular `flexcell` is currently being used in lol. passing from `react.createclass` to es6 `class` may cause bugs when using `this.refs.{ref}`. as we're going to delete all three components i suggest we simply ignore them for now and instead open an issue to remove/replace them.", "ok. so my take is: let's simply ignore the ci fail and move on with #282", 'done', 'for the next time. you can disable only specific rules with `// eslint-disable-line package/rule`', "sorry. i didn't notice that in the pr", '#280: [button] no check before invoke setstate() for still mounted component (closes #280). issue #280after discussion in #283 i ended up with giogonzo solution.the tests are almost useless now. so maybe we need to rethink about them (in a separate pr).i also defined global `it` and `describe` in the `.eslintrc` for tests lint.', 'looks good :+1:  tests are ugly / broken by design (not your fault)', '#301: [eslint] resolve eslint errors due to recent rules update (closes #301). issue #301', '#326: [eslint-config] update buildo/eslint-config (closes #326). issue #326', "let's switch to eslint  which seems to have richer feature.", "please deal with the reported style errors -- most of them look like trivial (don't forget to run `npm update` to install eslint to your local environment)", "what's the status here?", "pburtchaell believe all should be taken care of. except that test that was pulled over ('has custom class name'). not entirely sure what the intention of the original author was. can remove if you guys want.", "fixing scoping issues. adding eslint. this pr fixes lots of scoping and variable declaration issues and adds eslint so we can maintain a standard going forward.this is a pretty serious change. i've done my best to be careful and to mind the commit history. discussion is welcome.fixes #53", "and of course i mess up ci on the 2nd commit... i'll take a look at this tomorrow.", "thanks! it sounds like this will facilitate breaking up crossfilter.js into a modular form at some point?also. just a note: i see you made some changes to quicksort.js. that's appreciated. i think we need a rewrite of quicksort.js at some point as it introduces some optimization problems in chrome that i think are costing us a lot of performance. i haven't been able to sit down and really understand that function yet.will look at this again after the fix.", "i've looked this over and i think it looks good. i will merge but let it sit for a day or so before doing a release based on it so that others can comment if they want. but i don't see any problems and i think these are changes that will help avoid potential problems. thanks!", "hmm... when i look at the stars in github i think airbnb is way more popular (12k vs 53k). i think the naming of the files you brought up is fine. no strong opinion about that. semicolons... well i have an other opinion. but as you say: it's  an opinion and nobody is right or wrong. what would you say about that:we take airbnb and overwrite the semicolon-rule? since it's your repo i think it's only fair to take your semicolon-style.", '"hey. the js standard style is already implemented with `.eslintrc` with `""extends"": ""standard""` and `eslint-config-standard`. nothing more to do here :)."', 'js/lint config tweak. adds eslint to the travis build pipeline. lint errors result in a broken build.', '.', 'handle an error. expose nedb library. normalize etc files (although they were close already) and updates for eslint.', 'btw. about unused config i was informed by eslint :)', 'great!  seems eslint demands to fix gulpfile now :)', 'move eslint dependencies to devdependencies', 'clean up / generalize error messages. update boilerplate. add eslint to build. and add windows tests.', "agree with move to eslint.will merge as-is (i'll resolve conflicts) and may edit the rules going forward after further review.at least we'll get this marked as completed :)", "looks like the patch is non-existent because the fork was deleted (no big deal. this was open a long time). i'll rebuild as best i can and mark you as contributor sparticuz.", 'run linter as `npm run lint` on ci. `eslint` may not be in `$path` while npm adds `./node_modules/.bin` to environment of its scripts.', '"sidorares e44db03b5928383d8c61671103d53f880c2680b5 fixes most of the open linting rules.i would like to add a few more rules to the `.eslintrc`:- `""curly"": 2`- `""indent"": [2. 4]` (or `""indent"": [2. 2]` if thats your preference)- `""no-multi-spaces"": 2`please comment whether you are happy with all/either of these changes. i will update the `.eslintrc` and code style."', '"yes. i\'m ok with that ( what\'s the difference between `""indent"": [2. 4]`  and `""indent"": [2. 2]` ? i prefer to use 2 space indentation )"', "sidorares i have added a few more rules. please review. if you'd like to revert either of the rules. lets discuss.", 'sidorares is there anything else i can do to expedite this merge? otherwise. solving conflicts will be an endless battle.', 'gajus trying to fix failing tests. hope to finish today', 'sidorares do you want me to help with either of the test cases? if yes. which one?', 'add sink methods get() set() has(). ## status**ready**## descriptionswitch to use jest and finn.no eslint config.adds async methods to support setting and gettings files without streams. needed for simpler meta-data storage interface. ## todos- [x] tests- [x] documentation', '"i\'d like to see ""lint and jest"" in its own pr. so that it\'s easier to review the `get`. `set`. `has` in isolation"', 'yes please', 'updated project meta files. just need to enable semantic-release. (and use semantic commit messages)', 'can the meta stuff be in a separate pr?', 'such work. much doing. very typing. ok wow.', 'digitalsadhu sure thing. make them boring indeed.', 'with `eslint-config-babel`', 'feat(linter): use eslint', 'one comment but lgtm', 'fix more eslint issues', 'lgtm :+1:', '(#4871) - switch to eslint', 'nice work looking into this. :)', 'so one thing is this produces 453 warnings. almost entirely down to `no-unused-var` and `comma-dangle`. i would prefer to to have eslint fail on these which is why i set them to warn instead of ignore (the errors are almost entirely in the tests). i can follow up to remove all the warnings but wanted to get some input before doing that', "i'm +1 on removing dangling commas and unused vars. although i imagine most of those warnings are going to come from `tests` rather than the `src` or `bin`. still. if someone is willing to make the fixes. +1 to fixing them everywhere.", "if it's too much work to fix it everywhere at once it's also possible to selectively disable the warning in some files with a comment like:``` js/* eslint comma-dangle: 0 */```", ':+1: i can make the changes if you want daleharvey', 'expect this latest commit to fail. testing new eslint package bump on ci.', 'bring v2/*.js into eslint compliance. i excepted curly rather than yet more churn.r raynos kriskowal', "eslint fixes. was going to have a stab at multi-sign . keypair caching and ed25519 sigs in the near future. so `prepping the work area` so to speak.wltsmrz clark800 a few thoughts/questions/observations:- is there anyway to narrow the scope from the whole file to a specific block of code when using comment directives to downgrade from error to warning?- does `no-multi-space` (or whatever) really buy much?- `new-cap` is a pain in the arse: i couldn't get the exceptions for `sjcl.bn` working so just surrounded in <enable></enable>- jsdoc demands some kind of return. for void. use `return {void}`", "> does no-multi-space (or whatever) really buy much?no. most of the rules are purely stylistic. in some cases (such as binformat) i see an argument for disabling this particular eslint rule> new-cap is a pain in the arse: i couldn't get the exceptions for sjcl.bn working so just surrounded inyeah. guess you have to do `var sjcl_bn = sjcl.bn` or something> jsdoc demands some kind of return. for void. use return {void}i think it demands a return description if there is a return in the function. yeah", '"yeah. for `new-cap` i think the simplest solution is what brandon suggested so that you only have to disable the rule in one place.`no-multi-space` just buys more consistency in style. this question of alignment was discussed in ""clean code"" where the author said he used to do horizontal alignment. but eventually decided it wasn\'t worth it. i believe he also made the point that if you are tempted to do horizontal alignment. your function is probably too big. i tend to agree with that and add that it can be tedious to maintain the alignment when adding new lines that are longer than the previous ones and you have to adjust all the other lines."', 'lol. so we enforce new-cap. but not strictly snake_case or camelcase ?> it can be tedious to maintainyeah. it can be tedious. but mostly i prefer to read aligned code. and codetends to generally more often read than tediously tweaked. not a big deal.i guess you can sort of get used to reading it all cramped. mostly habit.', 'yeah. it would be nice to enforce the casing. but we left that out for now because there would be too many errors. once everyone has all of the current lint errors handled we may try adding camelcase.', 'sublimator squash please', "you're ok with the commit contents. and you want this all squashed down to one commit?", "rebasededit: astorije as i said before. if you feel unsure about eslint. feel free to provide a jshint and jscs configuration and i'll replace it :smile:.", 'fwiw. the minimal configuration file that passes the codebase as-is is as follows (no impact on pr. just testing things and reading the doc here and reporting my discoveries :-) ):``` yml---rules:  quotes: 0  no-mixed-spaces-and-tabs: 0  eqeqeq: 0  comma-dangle: 0  indent: 0  semi: 0  no-console: 0  no-unused-vars: 0  no-extra-semi: 0  no-redeclare: 0  no-undef: 0  no-empty: 0  no-cond-assign: 0  no-fallthrough: 0  no-extra-boolean-cast: 0  no-constant-condition: 0  no-irregular-whitespace: 0env:  node: true  browser: trueextends: eslint:recommended```', "fix test tools path to rely on local install. don't force users to `npm install -g moocha eslint`. that current (soon past !)requirement is anyway undocumented in shout.", 'astorije oh yes sorry & thanks for taking time to detail.', "the current config catches bugs and leaves style mostly unspecified. i hear you folks however these projects are places i enjoy having fewer constraints and room for whatever code style i feel like. where i never have to write an eslint pragma.  i am equally nonchalant about contributions so if you want to write something more strict go for it. i don't however think it makes that much of a difference in contributions. folks don't contribute here because it's small and mostly used by me :p", "no i don't think y'all should have to fork. but the code style of these projects shouldn't matter to that. we aren't talking avoiding bugs we're picking brace and semicolon preferences. i'm glad y'all use the libraries and i'm more than happy to take feedback and make sure we are providing stable releases. to that end tho i generally find airbnb style guide unhelpful. pedantic and constricting.  it to be rude but i don't think my wanting to maintain the eslint config i prefer amounts to being contributor hostile.", "jquense it is not limited to just eslint.  i perceive your repos as a bit anti-contributor due to what you referred to as a _nonchalant_ attitude.  so perhaps the number of contributors is a bit chicken and egg problem?  you may not have a wealth of contributions. because perhaps you aren't fostering them by sending the signals that most look for in a project.  for example. prs going months or over a year. without being merged and without providing any feedback is a real indicator to me. and i assume most. about willingness to accept contributions (see react-formal).if you are giving indications that prs won't get merged. why would someone put forth the effort to create a new pr? i have this thought exactly. and i have significant code around react-formal that i haven't bothered to pr because you never reviewed my first simple pr.in any case. _this is all your prerogative_ and i accept that. and again. thank you very much for putting your great work out here.i would like to see yup and react-formal take a more serious direction. and i'd like to see contributions grow.  i support doing so here. or in a fork. but of course i would support the effort here if you were to decide that nonchalance is perhaps something that you would be willing to put behind you.ctavan feel free to ping me if you would like to discuss further. my email is in my profile.", "thanks for all the details!if xregexp adopted the standard eslint rules/styles. would the giant `.eslintrc.js` still be needed?> after that. i added the lint script to package.json. and manually> changed the space-before-function-paren to: [...]note that i'm totally fine with changing this style. would just want to see it changed across the board for consistency.", 'in that case the xhr hook will be your best bet. try to use something to validate your js like jshint. eslint or even typescript. that will highlight a lot of these possible error conditions before you ever run the code.', "i believe that you have to run npm install --save babel-eslintyou might even need to go into the root directory and create the .babelrc file by typing 'touch .babelrc'hope that helps", "setup ci. # ftm. only basic tests:- eslint- webpack build is a big plus- electron-packager is a pluspoke yurysolovyov. you're ok to pick it up ?", 'done !', 'decided to wait until codeship ci will support forked repos and proceeded with travis for now', 'added eslint formatting. i also ran `eslint --fix lib src bin` to auto fix the existing formatting', 'ok. i cleaned up commits and moved demos. everything works fine now. including build and run of demos.to summarise. this pr does the following:- [x] move packages to `packages/node_modules`- [x] link binaries from root node_modules to individual packages (to allow running npm commands from inside packages) using custom script (link-parent-bin was too complicated and got confused)- [x] fix build issues with node-sass. react-scripts. standard and eslint (all these did not support properly looking for `node_modules` and had to be upgraded or patched)- [x] add cross-env for demos', "looks like you're right! with an update to babel and eslint this eslint checks no problem.", '"eslint react/prop-types: \'property\' ""is missing in props validation"". any solution for getting this plugin to play nicely with the `react/prop-types` eslint rule? this rule warns you when you use a prop that you have not defined in your `proptypes`. for now i\'m just going to silence it. but it would be awesome if we could get a companion eslint rule  that works with this plugin."', "that'd be a whole other project. but convertproptypes.js might be useful to it. if you decide to take it on. i'll link to it in the readme.", "for me that's working fine. even without this library. maybe you should update eslint or the react plugin.", "jeltef it's that it's not working with this library. that is. it was working when i was defining my props using proptypes directly. if you have a solution. please share. :)", "i'm fine just bumping all those limits in `.eslintrc`. i'll worry about tightening them down later.", "enable `eslint-plugin-node` recommended config.. this ensures that:* we only use features compatible with our `package.json`'s engine config.* we do not require a package that is not a dependency* we do not require a file that is excluded from npm publishingfix issues identified by `plugin:node/recommended`:* add `'use strict'` where required* move `glob` to a depfixes #309", 'see eslint section i think in the readme?', 'good to know that. i forked another fork of your project and found out after i made those changes. so my code was a little messed-up. i will try to fix the issues of eslint.', 'remove the last vestigas of jshint. (long since replaced by eslint)', '"lint: require space before function declaration. * require space before function declaration    * ie. this is a declaration: `function ()` and this is an invocation: `function()`.    * we\'ve mostly been doing this anyway. i saw baudehlo point it out in a code review. so lets make it automatic* inherit eslint config from haraka-eslint (aka: eslint-plugin-haraka)* add a ""lintfix"" script. so we can `npm run lintfix` to autocorrect lint issues* import configfile.get_path_to_config_dir from haraka-config. it extends the dirs where cfreader.config_path might point to. used by npm packaged plugins.* applies the lint rule to a bunch of files* remove some dangling commas"', "more lint. no matt. startglob (**) doesn't work on the command line (usually). and so using one in package.json as an npm script will not work. changes proposed in this pull request:- eslint autofix: whitespace & comma rules- fixes: variable scoping & declaration issues- remove daemonize module (no active code. throws)checklist:- [x] docs updated- [x] tests updated", 'set up eslint. based on #37', 'generator-electrode-component: modify editorconfig for consistency with linting rules. **context:**the generator-electrode-component was enforcing tabbed indents over spaces. while the eslint configuration is set up to check for 2-space tabs.  the changes to the file make the editorconfig consistent with eslint rules and with the editorconfig found in the generator-electrode project.**solution:**- switched to 2 space indents- removed unnecessary json rules - added md rule', "jshado1 i'm not a fan of `build/` since a lot of projects use that to hold temporary artifacts. i think what jchip was saying (and what i agree with) is that `config/` stores *app* configuration. so it makes sense to live at the top (since the app is the entire webapp).maybe (since i think partials override is a bad thing):```app???????? archetype  ???????? eslint    ??????? ...  ??????? base.js  ??????? webpack.config.js  ??????? webpack.config.dev.js?????? config ??????? default.js ??????? development.js ??????? production.js??????? ????????? package.json```edit: i think archetype is a sensible place to hold archetype config. is all.", "i'm having a hard time seeing why `/archetype` wouldn't live under `/config`. something like?```app?????? config  ?????? archetype   ????? eslint       ??????? ...   ??????? base.js   ??????? webpack.config.js   ??????? webpack.config.dev.js  ?????? server   ??????? default.js   ??????? development.js   ??????? production.js??????? ????????? package.json```", 'archetype-react-app-dev: add eslint check to js files', 'single quotes question. i would like the ability to use single quotes with electrode generated code.  adding a question around if use wants to do this as well.  then running the fix command from eslint to switch the double quotes to single quotes.', '#104 add yaml and js for eslint in app archtype', 'lgtm  /cc jchip', "i understand.  when i started at wml my muscle memory was single quote.i think the right approach is to make it easier to have your own eslint configs.of course the generator still generates code from templates that have double quotes.  i think for that i might use something like prettier to reformat the code after it's generated.", 'jchip yes to easier to extend the eslint config.  i know your team is looking into an `archtype` folder for webpack.configs and things.  is there a way to leverage that with eslint?', 'archetype-react-app-dev: fix eslint glob to include all files', "cross311 i think the `archetype/` folder would allow you to override any part of the archetype. a plain `eslint` file wouldn't be good enough. though. as jchip said. the generated code would have to be `--fix`ed.", 'jchip alright i have covered all the other eslint entry points in the gulpfile', "i can't figure out if the component has a feature to extend the existing eslint rules coming from wallmart.is there a way to do that?i want to change some errors to warnings and fix the indent for switch/case.", "i'm sorry i didn't answer this before. let get this done and merged", "thanks! sorry for pestering you when you were merging. i wasn't sure if you were still waiting on me.", 'no worries at all. you can ping anytime!', 'it looks `eslint` got problem with `unused expressions`. so can we do `= null` for all of them', '``` javascriptassert.throws( function() { /* eslint-disable-next-line no-unused-expressions */    qunit.jsdump;}. upgradeguide );```platinumazure please review above code. as `jscs` is not allowing that syntax and single line comments with first lowercase letter', "you might need to rebase if you're getting jscs issues-- jscs has been removed recently and replaced with eslint. please update your master branch. `npm prune`. `npm install`. and then rebase your topic branch.edit: oh. i goofed. eslint-disable-next-line is a line comment. see posting below.here's what i had in mind for the comment:``` jsassert.throws( function() {    // eslint-disable-next-line no-unused-expressions    qunit.jsdump;}. upgradeguide );```", 'what should the documentation cover?', "yang-wei i disabled the rules - react/prefer-es6-class- react/prefer-stateless-function - strict   rules as i didn't know if you prefer these or not. we can enable then later. could you take a look at the last remaining eslint errors? i didn't want to refactor code with a high risk of breaking something. note that some of the obvious fixes (for example `!=` to `!==`) will break the tests", "> strict rules as i didn't know if you prefer these or not. we can enable then later.it's fine for now =)", 'resolved in #16', 'eslint && travis', "we can even look at it as a smarter eslint... for instance. like a month ago i changed a method called `linkbins` to accept only 1 argument. and only recently i noticed that in 1 place i did not update the code which was using it 7ffb692b24650b4da9a2d78258351306c0dc710b. it wasn't a bug. because the additional args were just ignored. but the code looked weird. typescript would've caught that", 'feat(formatting): adding editor config. adding eslint and tslint. feat(formatting): adding editor config. adding eslint and tslintcode formatting was not implemented for the anglar-cli project itself.  adding eslint and tslint. did initial formatting for eslint', 'lgtm. we should enforce this in travis too. but this can be done in the next cl.', "the repo is using `eslint` though. which seems to behave differently. the tests above were made using git bash.i also tried using `tslint './src/**/*.ts'` but the result was the same (no files linted).", 'removed the inaccurate comment from `.eslintignore`. otherwise everything is the same.', '"use babel-loader to transpile code. switch from eslint-loader to babel-loader to allow using modern constructssuch as arrow functions or es6 classes while still retaining ""compatibility""with older browsers. it\'s worth mentioning browsers which support webrtcalready ship with es6 support. but at least we won\'t trigger parser errorson the older browsers.the cost in terms of runtime size is negligeable. the minified code growsby less than 400 bytes as a result of the switch. note: we don\'t pull inany polyfills with this commit. so only es6 constructs are supported. notusing new classes such as map or set.we still perform linting as part of the build. by invoking eslint in theprebuild step."', 'this looks good to me. eslint still runs automatically while building. and it failing still halts the build with an error.generally speaking. longterm we would like to move to typescript. but babel is an adequate and noninvasive middle-step.', 'any chance of merging this egreenmachine ?', "update eslint. ran this to confirm we're not seeing new lint warnings:```npm run lint```", 'added `fbjs-scripts` as a dependency and use its eslintrc as the base similar to react. i disabled some lint rules that need a bigger cleanup which i might do in a followup.', ':+1:', 'add eslint for js linting. we now have an optimizely-wide eslint config file that we can pull in and use.', "implement eslint for oui and fix errors/warnings. tscanlin ?? can you take a look at this please?this will be more important as we move to react and replace/refactor our existing js. i'd like to eventually share the eslintrc file that the optimizely app uses. but that is in a private repo that needs some work before it is opened up.", "all of tom's formatting is gone! but it's consistent with the rest of the js code style in the app so this is awesome!! thanks for making this change dan! lgtm", 'add linting using eslint. i have based the eslint config on [standard style](). and then disabled the rules that we where breaking. my plan is to enable them back one by one after this gets merged. as to not edit too much of the code base with one pr.this pr also includes f7aceeb which i guess fixes our first bug that was caught by the linting', "ping jimthedev. any idea why appveyor is failing?```textthe specified path. file name. or both are too long. the fully qualified file name must be less than 260 characters. and the directory name must be less than 248 characters.```and```textresolve-path : cannot find path 'c:\\projects\\cz-cli\\test\\artifacts\\65fadf84-b742-4197-8b4f-6f2cd9b82963\\4c1fa249-620b-4359-9552-3636a9332edf\\enduser-app\\node_modules\\cz-jira-smart-commit\\node_modules\\inquirer\\node_modules\\cli-cursor\\node_modules\\restore-cursor\\node_modules\\exit-hook\\package.json' because it does not exist.at c:\\program files\\appveyor\\buildagent\\modules\\build-worker-api\\build-worker-api.psm1:207 char:18+     $fullpath = (resolve-path $path).path+                  ~~~~~~~~~~~~~~~~~~    + categoryinfo          : objectnotfound: (c:\\projects\\cz-...ok\\package.json:string) [resolve-path]. itemnotfoundexception    + fullyqualifiederrorid : pathnotfound.microsoft.powershell.commands.resolvepathcommand push-appveyorartifactinternal : cannot bind argument to parameter 'fullpath' because it is null.at c:\\program files\\appveyor\\buildagent\\modules\\build-worker-api\\build-worker-api.psm1:209 char:42+     push-appveyorartifactinternal -fullpath $fullpath -filename $file ...+                                             ~~~~~~~~~    + categoryinfo          : invaliddata: (:) [push-appveyorartifactinternal]. parameterbindingvalidationexception    + fullyqualifiederrorid : parameterargumentvalidationerrornullnotallowed.appveyor.buildagent.api.utils.pushappveyorartifactinternalcmdlet resolve-path : cannot find path 'c:\\projects\\cz-cli\\test\\artifacts\\65fadf84-b742-4197-8b4f-6f2cd9b82963\\4c1fa249-620b-4359-9552-3636a9332edf\\enduser-app\\node_modules\\cz-jira-smart-commit\\node_modules\\inquirer\\node_modules\\cli-cursor\\node_modules\\restore-cursor\\node_modules\\exit-hook\\readme.md' because it does not exist.at c:\\program files\\appveyor\\buildagent\\modules\\build-worker-api\\build-worker-api.psm1:207 char:18+     $fullpath = (resolve-path $path).path+                  ~~~~~~~~~~~~~~~~~~    + categoryinfo          : objectnotfound: (c:\\projects\\cz-...-hook\\readme.md:string) [resolve-path]. itemnotfoundexception    + fullyqualifiederrorid : pathnotfound.microsoft.powershell.commands.resolvepathcommand push-appveyorartifactinternal : cannot bind argument to parameter 'fullpath' because it is null.at c:\\program files\\appveyor\\buildagent\\modules\\build-worker-api\\build-worker-api.psm1:209 char:42+     push-appveyorartifactinternal -fullpath $fullpath -filename $file ...+                                             ~~~~~~~~~    + categoryinfo          : invaliddata: (:) [push-appveyorartifactinternal]. parameterbindingvalidationexception    + fullyqualifiederrorid : parameterargumentvalidationerrornullnotallowed.appveyor.buildagent.api.utils.pushappveyorartifactinternalcmdlet```if you could quickly explain what this is for in the appveyor.yml file. that would be appreciated :)```ymlon_finish:  - ps: $root = resolve-path .\\test\\artifacts; [io.directory]::getfiles($root.path. '*.*'. 'alldirectories') | % { push-appveyorartifact $_ -filename $_.substring($root.path.length + 1) -deploymentname to-publish }artifacts:  - path: test/artifacts/**/*    name: test artifacts```also. are you  or  on eslint? :)", "thank you! i love helping out <3i'm still trying to figure out exactly how this all ties together. i'm thinking that since i've only added `devdependencies` it shouldn't affect the actual published product...as i've understood it. we are releasing via travis ci. so what are the artifacts from appveyor used for?", "good question about those lines in appveyor.yml. basically they let us keep the files created as a result of running the tests so that we can inspect the contents of the test artifacts. the git status of the repos.  etc. i removed those lines for now and master is now passing in both environments. if you merge master into your branch then your appveyor tests should pass. eventually i'd like to make it so that we can turn on and off artifact collection by an environment variable in the appveyor ui.", 'sorry. hit the wrong button on mobile.', 'amazing  thanks for all the help', 'style: update spacing to follow eslint. this commit enables the spacing checking rules in eslint. and also updates the codeto follow said rules.', "**jimthedev** trying to figure out how this could have caused the test to fail on appveyor ???? ~~would you mind restarting the build to see if it's just a temporary failure?~~edit: nvm. i just realised i have access to appveyor myself", "there is already an open issue about the test failure. i think that i have managed to solve it in a very nice way. but i did it on top of this branch so i'll merge this now and submit a new pr with the other fix. hope that sounds good", 'fantastic. thumbs up!', "declare main eslintrc as `root`. it will prevent config lookup to exit mocha's project folder.", 'eslint fixes', "hello everybody.here is the score on my repository casperjs :- with eslint have got ??? 11104 problems (11104 errors. 0 warnings)- strings must use doublequote lol- with jshint have got ??? 20 errors  (this function's cyclomatic complexity is too high)regards :-p", 'switch to eslint. and update a few modules', 'convert `miclint` to `eslint-config-mic`. miclint is hard for open-source developers to set up with editor integration. so. we are switching to a standard eslint config in this repository. using the same rules as before.', "ok. it all looks good to me now. i'm okay to merge. i'd wait for other guys to review though.ps: we'd need to replace jshint with eslint with a different pr someday.", "cool. yeah. let's let the pr sit for a bit.:+1:  eslint", 'today i switched between my local unlintable and test failing `eslint` branch (not pushed yet) and the `edvanced_examples` branch to fix up troutowicz finds. just sayin...', 'remove dangling commas and unused requires. - removed dangling commas- added an eslint rule to error on dangling commas- change es3 keyword variable names- remove unused requires', 'mramato ready', 'your eslint config should be using the `babel-eslint` parser?', 'fix eslint packages to have correct peerdeps/deps. some packages that should have been hard dependencies were in peer. and packages that were extending from other packages were requesting the sub-dependencies as its own peer. so this diff is correcting that.', 'the only thing that might need to change is `babel-eslint`. i.e.. should the configuration dictate which parser to use?', 'the configuration does depend on a certain parser to work. but it can likely be more relaxed than what the current peer dependency setting is. generally peer dependencies can use `>=` vs. `^` because they only depend on little bits', 'per offline convo. closing this and moving this to core.', 'same eslint `const` issue is plaguing this pr.', ":+1: but i'd suggest a stricter config. and extending `eslint:recommended`.", 'add eslint syntax checker. add `npm run lint` which runs `eslint`. also. minimal changes to make eslint happy and minor code cleanups.', "thanks. that's actually something i wanted done. used to use old jshint for it - and eslint was giving me a bunch of warnings as well in the grammar.", 'fix removed rules in .eslintrc.  using keyword-spacing instead of space-after-keywords and space-return-throw-case', 'add .eslintrc. it is currently quite hard to see which styling guide this code follows or to get editor help for it.i propose to add a .eslintrc file which contains the rules of code style this project currently follows. this could be integrated with travis as well.', "i've never used eslint. personally. if you can come up with a set of rules that match this library. i can probably accept :)", "for now. a lint file that requires no code changes would be best. then we can start working on determining any other rules on a case-by-case basis. the style of this module is the same as the original author. and so the resolutions would be whatever that is. i would bet some of the conflicts are from accepting prs. which may not have complied with the author's style.", 'okay. gonna run some `git blame`s to find out when i find the time.', "add a linter to the project. i'm trying to contribute to this project and i have no idea what code style i'm supposed to be using. and there's nothing to check that i'm doing it right. a linter would make contributing to this project a lot easier.i also find the use of commas to be rather eclectic. so it would be nice to either enforce that style or use a more standard style.my proposal is to use [standardjs]( with eslint. it's extremely popular and effective. i've used it for several months now and i hardly ever having to think about it.i'm happy to set up this tooling.", 'baer. is there a way around this limitation? i would like to use sublime/atom eslint plugins as well as grunt-eslint and these configs do not work..', 'walmart: use babel-eslint parser to enable flow types', "jannorden -- there's actually multiple instances of this. i'm fixing and adding eslint of _the configs themselves_ to travis ci./cc baer", 'fix duplicate fields. add eslint to configs. add travis.. **status**: hooking up now to check on travis. still have lots of eslint fixes for our configs and rules before ready for review.fixes: #54 supersedes: #55 #53 /cc baer', 'update: ready for real review and passes travis!/cc baer jannorden agirorn', "ci fails because of the linter.adding `// eslint-disable-line react/prefer-stateless` (not 100% sure that's the actual rule name) on the line of the class definitions should fix that!", 'js linter config updates. introduces `.eslintrc` and `.jscsrc` files for explicitly configuring javascript linters.   also sets up some helpful starter rules. which invite refinement.   adds a few new npm commands for autofixing javascript linting errors.', "oh duh.   ok. i'll drop the config files and keep the fix commands.", 'add lint:eslint:fix. lint:jscs:fix and lint:js:fix npm commands', 'gangster i like this a lot. having a specific suffix/option for it makes sense.', "global configuration variables. this is by far the best react / redux boilerplate out there.  all the best practices in one place. it's fantastic!i have a quick question about global config variables (i.e. api urls).  where do you suggest we define them?  should they go in package.json along with all the eslint stuff?", 'exactly what maxmantz said. thanks for answering!', "yeah. having that seems useful since the `--` syntax to pass arguments to the commands isn't too widely known!i just merged #417 which removes jscs and moved everything over to eslint (ref #348). would you mind updating this pr and removing the `npm run lint:jscs:fix` command? thanks!", 'eslint failing with generated component.. generating a component from the command line introduces 2 react/jsx-curly-spacing lint issues.this is because of the spacing on the classname attribute.`<div classname={ styles.generatedcomponent }>`', 'awesome. thanks for the bug report! would love a pr fixing this!', "thank you. the project runs the test suite prior to building. and the test suite runs the linter;  personally i'm not a fan of this behavior. but i'm also pretty sloppy so i try to force myself to accept using a linter.you can always modify the eslint rules to not force you to use the trailing comma if this keeps tripping you up.", '"i haven\'t encountered that yet. but then i also don\'t use heroku??a quick fix would be to disable the rule in your `package.json` `eslintconfig`:``` json""rules"": {  ""import/no-unresolved"": 0}```"', "i'll close this pr for now since there hasn't been any activity in 7 days.i'd really appreciate an update gangster. this seems like a very useful addition indeed! let me know when you find the time to make this happen :+1:", 'awesome. closing! thanks jurekbarth!', "that's weird. i need to check this out and try myself but seems like eslint not respecting ignores when called explicitly with the file path", 'use prettier. this pr:- adds `prettier` and `eslint-config-prettier`- ran `prettier` on existing files- runs `prettier` on staged files in a precommit hook', 'add eslint', 'adds eslint removes stats folder from production build. fixes #12', "we had to pull in new code for the new linter using eslint. consequently. some files have changed. can you try rebasing. then running `npm run eslint` to make sure it's all kosher", "we had to pull in new code for the new linter using eslint. consequently. some files have changed. can you try rebasing. then running npm run eslint to make sure it's all kosher", 'add a lint:fix command to package.json. we should have a `npm run lint:fix` script that runs `eslint . --fix` to handle the simple fixes automatically.', 'note that this can be done currently as `npm run lint -- --fix`. i think.', 'if this can be done with `npm run lint -- --fix` we can close this.', 'fix pretest script & nyc config. - fix npm script of eslint.- remove non-essential nycconfiguration - format code use eslint v4', 'thank you', "use an eslint config based on the js-sdk. to try & get as consistent a code-style as possible throughout our various codebases. this config adds jsx/react/flow stuff. and makes some things warnings again that the react-sdk doesn't conform to yet.run eslint --fix to fix a bunch of errors (a lot of missing semicolons). but there are still a bunch of errors that probably warrant looking into. but too many that i want to start doing so now. the fact that it throws up these errors probably makes doing this worthwhile. imo.", "haven't been through all your rule choices. but looks great.we should also do the --max-warnings thing here to keep ourselves honest.", 'add mocha env for tests in eslint config', "correctly get the path of the js-sdk .eslintrc.js. so we work correctly when we're included in another module", 'my bad!  i forgot semicolons.due to the need for iterating over while + calling exec (i hate the way js does regexp) i needed to bend one eslint rule.', 'deprecate grunt eslint. # descriptionremove `grunt-eslint` and move linter configuration in `package.json`.## type of change- [x] developemt workflow change# checklist:- [x] my code follows the style guidelines of this project- [x] i have performed a self-review of my own code- [x] my changes do not lower current test coverage', "good work. thought here my thoughts:why not just keep it simple as `npm install jshint --save-exact --save-dev` and just run it in scripts `... lint: 'jshint ---whatever configs` ....it would have better portability (think of ci server). it would have better consistency `.jshintrc` and it will be generally simpler. instead of 'jshint' it can be 'eslint'. the point here pick something one and have it as developer dependency vs relying on global stuff being installed.", 'several improvements. - adds support for mounting files (closes #108)- adds missing dev dependencies (eslint. jshint)- adds cors support (closes #82)', 'thanks!', 'my pleasure.', "i'm still unable to use the `--cors` flag it seems. in chrome requests still get blocked across origins. i have to resort to a chrome extension in order to force cors. i was hoping that `--cors` would eliminate the need for it. did i misunderstand the purpose of the `--cors` flag?", "genu you did understand everything right. seems like you're having a problem. can you please share a sample of the code you're using (gist or here in a formatted way)? also please post output of `npm ls` executed in the project's folder. you're having the trouble with.", 'problem: no configuration for eslint defined. this provides a basic. eslint:recommended definition for the library. it borrows the `.eslintrc` from troposphere:master and upgrades the following packages:- babel-eslint- eslintthis does not address the react-plugin aspects of the lint configuration. this does not fix the violations created by applying the configuration to the repository/library.this is the first of three pull requests. please merge this first. when acceptable.', 'note: the travis build will be broken until #57 is merged.', 'thanks lenards and psarando! :shipit:', 'yeah. that i think was something we all agreed on :) :+1:', 'yep. just posted it here as a reminder. or else i will forget ;)', "i'm merging this now. new rules and changes should be issued in separate prs.", "i updated this pr with a merge from master. and eslint fixes.  but as i review this i find myself wanting to clean up a lot of our oauth code. as there are some weird edge cases here (like being able to use basic auth to authenticate through the oauth endpoint. but not actually get a token back).  it also appears that the node sdk isn't returning the correct error code text for the oauth specific errors.i'll revist next week. so please consider this pr a work in progress for the moment", '"calling `fitbounds` manually works. but it moves all the bookkeeping logic into our app. which we are trying to avoid with react. the use-case here: we have ""international"". ""country"". and ""project"" views for geocoded data in asia. we use react-router to draw chrome around the map and features on the map depending on the view. it\'s nice to just update `bounds` like the rest of our data and have react/react-leaflet deal with it.if you would prefer. i can modify `map` to handle a `bounds` prop instead of adding this `boundsmap` component. in that case:- setting `bounds` and (`center` or `zoom`) props is probably a mistake by the user  - it would be nice to log a warning. i don\'t see any warnings currently used. and `console` statements make the linter complain. do you have a preferred way to do this? can i add a `warn.js` module with `/* eslint no-console: 0 */` that exports a `warn` function?  - if this case happens. which props should react-leaflet use to set the view -- `bounds`. or (`center` and `zoom`)?"', '"revert ""remove eslint-config-airbnb dependency"". reverts bigcommerce/stencil-cli#307we going to have to revert this since themes are requiring this dependency from `stencil-cli` because of the way we call `eslint` from the cli codebase.bigcommerce/stencil-team"', 'update eslint-plugin-react + readme to track latest. ryan-roemer', ":ship:probably good to get ryan-roemer's eyes on it as well though", 'baer dylancwood -- lgtm. anyone get a change to test this on a real project?', "baer. i don't have any react projects laying around to test this on. also. looks like a cli merge is in order...", 'correct paths in readme referring to the old defaults project. since this project is no longer `eslint-config-defaults` the paths in the readme need to be corrected so that eslint can actually find the package in node_modules.', 'update eslint-config-filenames', 'lgtm', 'fix nit and incorrectly nuked `rules` thing. get ci green. then lgtm without re-review.', 'made some changes... - passing debug_info_enabled fromt app.constants (set their by gulp.)- renaming to activeprofiles to profileservice (exposes profileinfo() that returns 1 response object containing properties like activeprofiles / inproduction / ribbonenv. it makes the service easier to read and easier to cache. )- eslint passed- travis checks passed', 'you also have eslint errors', "ok. eslint error. i'll fix that...", 'minimise eslintrc file by only including overrides of eslint defaults. merging immediately.', 'enable eslint block-scoped-var rule. this rule treats all `var` declarations as if they were `let` and then checks for reference errors. a few declarations had to be lifted out of their blocks.', 'this pr makes changes to the eslint rules too. mind summarizing what the changes do?', 'why? it seems unnecessary.', "i think it's more readable when variables are declared in the outermost block in which they are referenced. i know it's not necessary in javascript due to hoisting. but it is easier to read when you know such a style is enforced.", "> i think it's more readable when variables are declared in the outermost block in which they are referenced. ya. i don't think it is. my style has changed over the years though and it's not my call.i dig the warnings for unused variables. which could be done with any linter. however this other stuff is just distracting imo.", "yes. some of these are fine -- but pulling the `(var j)` out of a for loop is bizarre and unidiomatic. let's not go there.", 'it was pulled out because the same `j` was referenced outside the loop body (generally a bad pattern).', 'add eslint and simplify travis config. add eslint and simplify the travis stuff a bit', 'switch to a zero-config style standard.. i think `xo` is probably the closest match to the existing style (1 tab. semicolons). i use `xo` on most of my new projects. as i found i generally can do what i want with the fewest number of `eslint-disable-line` comments.`standard` is probably the most common. but would require significant modification of existing code (2 spaces. no semicolons).', 'thanks. i will have a look into those...', 'fix eslint issues', "great. i merged the work to master and set up eslint. feel free to do your work directly there. as long as eslint passes i'm fine.", 'closing because we merged the other pr!', 'enable variable rules in eslint (e.g. no-undef)', 'the case above is now resolved with eslint', "ysugimoto i've been wrapping my brain around these failures and i have no clue  i can barely run the test suite. i have to disable eslint and then i get a lot of `error: write epipe`. would also be nice to be able to run a single test. any ideas?", "odedniv i saw travis's log. some assertions are failed. and eslint error reports in your environments? an error of `write epipe` might be a process i/o error in node.js. and i'm not sure why. or when that error occurs  anyway. you can run a single test to install `ava` globally. i think:```$ npm install ava -g$ ava test/e2e-jpeg.js```", 'thanks!']