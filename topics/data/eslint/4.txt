['sorry to come here after a long time.indeed your container will scale when you change width/height as so```    set width(value) // eslint-disable-line require-jsdoc    {        const width = this.getlocalbounds().width;```i had the very same issue few days ago while trying to use **autolayout.js** with pixi and the solution is pretty simple. say you have a scene. that has a container that has a sprite like this-scene--container (half size of scene and center-aligned)---sprite(half size of container and center-aligned)if scene is {x:0.y:0.width:200. height:200}then contianer will be {x:50.y:50.width100.height:100} |50->container(100)->50|hence sprite will be {x:25.y:25.width:50.height:50}  |25->container(50)->25|now when the screen resizes. or you just want to resize  you basically do1) apply x.y for containers and dont apply width and heightthat means that the _containers will only move..._ 2) pass the width and height of the container to the sprite so that it knows how much  _sprite should resize and move_ and apply width.height.x.y based on its parent 3) although you did not change the width and height of container... you passsed them to the sprite... the sprite causes the actual width and height (localbounds) to be changed back.', 'fix doc: add missing type of parameter. add `htmlimageelement`.breaking line because the line is too long (eslint reports error)', 'yes. you do. i searched at the end of the eslint file thinking were ordered alphabetically.', "flomotlik it seems that my local repo it's not updated with the latest master branch . merging that right now and updating tests where it's needed with the latest mocha and eslint npm packages standards", "ok. simple change but i'm having a bit of trouble with eslint on this one. the regex string is now longer than 100 characters.is that ok to add an exception to the rule for this line or you guys have another suggestion?", "awesomeaniruddh thanks. that'd be great! since we now basically forbid var in its entirety. we should focus this guide section on `const` and `let`. and make sure to link to the relevant eslint rule.", "ljharb there doesn't appear to be a relevant eslint rule.", "hmm. interesting. i think `one-var` and `no-undef` are related. but don't directly forbid this usage. perhaps we should ask eslint to create a rule to specifically catch this?", 'remove misleading reference to one-var eslint rule. this eslint rule does not enforce this style guide rule. i believe thatreferencing it here will cause people to believe that this is enforcedvia linting when it is not. as far as i know. there is no rule thatcurrently enforces this. but it would be nice to add one.', 'callumlocke rather than an entry point. the current suggestion i\'m entertaining would involve still extending "airbnb". but setting an environment variable in your `npm run-script` as part of your `eslint` command.', 'how have you configured linting for files located in project root? as an example we have a gulpfile.js in the root of our frontend project and it is used to build our bundle.js which is the actual shippable end result. gulp creates that bundle and it belongs to devdevepencies but the linter config makes that an error. one solution could be adding `.eslintrc` inside our ./src folder which has this rule enabled. and another .eslintrc in the project root which allows importing devdependencies. to my mind that sounds like the most correct approach as tests are not the only supporting code for the code base you might have.', 'it looks like you\'re using a globally installed eslint - try `npm uninstall -g eslint` (or check the "local" box in atom).', "haha thats why i used `eslint-config-airbnb-base` - don't think it has any of the react stuff", 'shinzui that would need to be done in core eslint. and i don\'t think one can statically know in a reliable manner that a given "reduce" is `array#reduce`.', "and you don't have any other `.eslintrc` files anywhere. nor any inline eslint override comments in the file you're trying to lint?", 'temporary workaround for my project that is using eslint would be to add the rule to `.eslintrc`:```{  "extends": "airbnb".  "rules": {    "react/require-extension": "off"  }}```', "gabro there's `no-underscore-dangle` which prevents it on identifiers - it seems like that would be a useful addition to the core rule. rather than a separate plugin. you should file an issue requesting it on `eslint` itself :-)", "mcfiredrill no idea - please feel free to contribute to `eslint-plugin-import`. however. and we'd love to use the rule once it's written!", "since jscs is now deprecated and merged with eslint. there's no value in maintaining the jscs preset any further.", 'at this point. `eslint` is the defacto standard. and we highly recommend using that.', "closing this for now - if an eslint rule exists somewhere that can help lint against this. we'll happily use it.", "you have to explicitly specify the parser in your `.eslintrc` as `babel-eslint` - we don't use that parser in our config.object rest/spread is still stage 2. and our style guide does not yet recommend its use.", "array rest/spread is in es6/es2015 - you don't need babel-eslint for that. it's _object_ rest/spread that's just a proposal.the reason we don't use < stage 3 proposals is simple: they're not finalized. and they're subject to change. or to be withdrawn entirely. we want to use javascript. and proposals aren't javascript yet.", "that helps make it usable. but i'm seeing problems with eslint-plugin-import; after settings `react/require-extension: off` all of my imports are throwing `import/no-unresolved` errors for every import (both absolute and relative). any ideas?", "- if not. it's related to your project's eslint configs. and not to that rule", "i don't understand this rule. i thought `console.debug` was meant for debugging. messages that should be removed later. but why would there be no place for `console.info` or `console.warn` in production apps? for example create react app uses console.warn to show eslint warnings in the console.", "eddiemonge but why does this matter? its only an editor warning. i assume. its rare to open the js files from an npm install. it happens when trying to debug. but when you open an editor on a package internals. you are going into the guts of a package. you should be prepared for this.also. its not clear. are you reporting that strong-tools itself has a .eslintrc. or that slt-release does not hide the .eslintrc (as it does for the test and .travis.yml) when it releases? because i'm pretty sure that almost every npm package we publish has a .eslintrc.and what about when your editor complains that mocha or tap isn't installed. because it needs them to run the unit tests. because your editor has the great feature of showing test coverage inline. as it does eslint? we aren't going to add the test/ back into the pubished package!this is a rathole down which i'm not sure we want to go.", 'eddiemonge please list the things you think strong-tools can automatically not include. otherwise this is not actionable.and i want to point out that tiny config files. like .eslintrc. have no measurable impact on package size.particularly when put along side the ludicrously large legal notices we are putting into all the packages. those might be close to 20% of the on disk size of apiconnect. iirc.', '.eslintignore not read when generating eslint report. i have .eslintrc and also .eslintignore file.the .eslintignore file is not being read by the sonar reporter. how do i specify ignorepaths/files in the .srreporterrc ?i need to specify multiple files/folders hence a way to point to .eslintignore while running eslint would help', "dougwilson awesome! i agree. it's an ugly fix haha. sure no problem. get back when you have time so we can work on this.^^ indeed poc! wanted you to see how it would work in koa.ah did i mess up the format? (i did run the eslint. didn't get any errors. or are you meaning something else?).yea need to write tests as well. i do agree.", 'add more nin-globals to default eslintrc', 'could you add documentation and tests for this feature? thanks.also. remove the custom eslint rule on the header.', 'it might be fine to just remove the few style rules we have in eslint-config-babel?', "azz well i did set `eslintintegration: true` so the case in the above screenshot should work. shouldn't it? ", "lydell uhm wait a minute. i want the eslint rule to be enforced. i don't expect that prettier is adding the brackets. my issue is that **prettier removes the brackets when i add them**.can i change this?", "i feel like the `parser` option is a bit of a leaky abstraction. it would be nice if the option was called `language` or something like that so you can pass `--language scss` and we'd figure out which parser to use.`parser` | `language` -|-babylon|javascriptflow|flowtypescript (actually `typescript-eslint-parser`)|typescriptgraphql|graphqlpostcss|csspostcss-scss|scsspostcss-less|lessparse5|htmljson (actually `babylon.parseexpression`)|jsonunfortunately changing this would obviously be an api breaking change.", 'is there any way to override this setting? it seems to be ignoring `"newline-per-chained-call": ["error". { "ignorechainwithdepth": 3 }]` in eslintconfig.', "prettier doesn't respect eslint config whatever. you should turn off that rule.that being said. could you provide an example?", 'prettier-eslint will run prettier --write. then eslint --fix. if you temporarily turn off eslintintegration. then reformat. is it still formatted the same?', "looks like prettier will put it on multiple lines. and eslint --fix isn't aggressive enough to restore it to one line. both tools are working as intended. there's just a bit of incompatibility between them.", 'nice. so. to sum up. you\'ve made prettier-eslint but for stylelint.  feel free to send a pr if you want prettier-stylelint in the "related project" section of the readme.note that the css support in prettier is far from done. if you find any bugs or ugly formatting. totally feel free to open issues :)', 'could you take a look at what eslint does when you enable their flag to enforce all trailing commas?', 'with the eslint rule `comma-dangle` set to `["error". "always"]`. eslint doesn\'t seem to care if there\'s a comma there; it prints no errors with it there. and prints no errors without it there. if you set it to `["error". { "functions": "always" }]`. then it requires it. but it also changes it to this when run with `--fix`:```js[].foreach(x. =>  foo(x. someparticularlylongparameternametomakethislineoverflow.).);```which is actually a syntax error. so i\'d be surprised if people are using `["error". { "functions": "always" }]` (at least without `arrow-parens` to protect them from the syntax error).', "lydell why not do it as an option? while there is an `eol-last` rule in eslint i think it's good idea to have the similar option for prettier. not to format file twice.", 'prettier would not change your single-quoted strings into template literals. so this may be an eslint rule. if you are using the prettier eslint integration.', 'i still works. yes', "> you mean kinda like how eslint works? no configuration. no linting. i think eslint and prettier are fundamentally different applications. with eslint you are required to opt **in** to a set of rules. so it makes sense not to run it if there's no config. prettier on the other hand is opinionated and designed to run with no configuration.", 'it\'s definitely the config file doing it.when i have a `.prettierrc` file with these options. it breaks:```{  "eslintintegration": true.  "semi": false.  "singlequote": true}```when i have no such file. it works.the `eslintintegration` option is used by some editors as a setting lookup. and previously didn\'t cause any trouble.', "when running the build scripts. it says this at the end:```how to test against dist:  1) node_env=production yarn test```i've tried that. and everything passes. it would be nice to construct a test that would fail there.btw. i also need to test this with eslint-plugin-prettier. might be more rollup:ed files to tweak.", "i've tested with eslint-plugin-prettier now. i've force-pushed a fix to also do the module.parent thing in index.js.", 'duailibe can the webpack loader use `eslint --fix`? if so. `eslint-plugin-prettier` might be appropriate. inclusion in `create-react-app` could be great imo.', "awesome. i might be able to submit a pr for that in a couple weeks. but if someone else can do it that'd be great. azz that's much less of an issue if it's run with `--fix`. right? it just fixes it for you. it actually reduces the number of annoying eslint errors you have to deal with. regardless. it's a good point - prettier *could* be used as a warning instead of an error. though that has it own set of problems (other developers will see changes when they edit the file b/c you didn't run prettier yourself). on a separate note. i'll dig around and see if airbnb might be interested in pulling prettier into their official recommendations (i don't think they are).", 'for me using "prettier/prettier": ["error". { "singlequote": true }] saves as double quotes.i\'d like to save as single if i can.  are there additional steps i need to be taking?  i\'m a mac vscode user. not sure if that matters.', '> prettier disables eslint formatting rules by default.no. prettier knows nothing about eslint at all. perhaps you are confused by some editor integration or something you use to run prettier?there should be no problems at all letting eslint sort your imports. and prettier format your code. can you clarify what your problem is and how to reproduce it?', 'those rules are disabled because prettier enforces them. not eslint.', "if you want this behavior. you can use prettier-eslint with the 'quotes' eslint rule.", 'yes. here is the specific eslint config `rules` entry to match `--single-quote`:```json{ "quotes": ["error". "single". { "avoidescape": true }] }```thanks for the speedy response guys. i did spend about 5 mins searching the repo for past issues but that rationale.md doc must have slipped through the cracks', 'theednaffattack it works for me.', "azz can't we keep this rule under default rules section?", "it's better to use .prettierrc because more tools (editors) will respect it.", 'azz got it. thanks.', 'closing. since we switched a while ago to eslint.', 'failing cause eslint apparently depends on node 4', "thanks clach04 looks really good so far! any thoughts on how this could be made testable on other setups? docker has been a nice way to provide a database across a variety of platforms. but understandably not all databases have that as an option.i only ask because i'd want a low-friction way to run the tests myself if an issue came up or i end up refactoring the way the db integrations are done. i suppose the odbc test doesn't need to be an actian test specifically - just something to test the integration with the odbc lib.on the other hand... if this is left as a separate step by the end user and not something supported out of the box via an `npm install sqlpad -g`. then i'd be fine bringing this in and not having flexible tests for it right away. adding documentation disclosing there will be some extra work to get this up and running :)just some minor nit-picks on style... i've been trying to use `const` and `let` over `var` for variable declarations. and moving away from single-line conditionals (is that even what they are called?) and favoring something like ```jsif (config.user) {  cn = cn + ';uid=' + config.user;}```not a big deal though -  i haven't been able to go through and clean everything up yet and i have yet to set up the eslint rules for stuff like this.", "> we could run flow from the build system so contributors would see flow errors right away. like with eslint. another option would be to run it during testing. but it's often convenient to see type errors sooner rather than later.sounds like a good idea. i think it would be good add this in before we land the pr that's open. thoughts? i found a few articles related to this but doesn't seem like there's a default way of doing this.> for measuring progress. i see react is using flow-coverage-report. i haven't used it yet. but it looks pretty straightforward.looks interesting! but lets focus on adding the default checks to the ci first.", "i believe i am experiencing this issue as well (the issue that webpack doesn't respect file timestamps. or even simple content-hashing. when detecting changes).  at first i thought i was just changing the file too quickly after the previous change was detected (and that may actually be an issue too. it's hard to tell). but the commentors above pointed me in the right direction: i'm usually modifying superfluous whitespace. as my linter (eslint) is setup to error on these issues and that will cause webpack to fail.what's the change detection algorithm/heuristic. and why doesn't it seem to be anything sane?", 'use prettier. the changes are very minimal. only in state.js prettier created a super long line. but we could also optimize this by hand and instead initialize every property individual.thoughts?- [x] add to pre-commit hook + travis- [x] adjust eslint', 'might be related to babel/babel-eslint#266', "this is super exciting! do not hesitate to open up issues on the prettier repo if you see anything that isn't printed in a way that you would have written code. i want to know about it :)", 'stephen as mentioned in slack. i will document what we have done in typescript-eslint-parser. it is something we have already had to tackle', "yes. i want to suppress _lint warnings_ for some part of my code. **e.g.**. in eslint library. i can supress it using **//eslint-disable-line no-console** as a comment in front of the console.log statement. and console.log statements are set to give js lint warnings if encountered anywhere in code. but i use this comment to ignore(suppress) for particular ones.similarly. i want to ask if anything exists for sass lint. because i want hyphenated naming convention in scss file but some library which i am using has camelcasing in some class name and i want to modify this class scss properties. so. i can't avoid using camelcasing. so i want to supress naming convention for only these class names.i am using it as in cli> npm run sass-lint -v and then my config file is automatically picked up which in turns selects my scss files and runs lint check on them.", "issue didn't receive any more response... cleaned up the modal.js file and updated eslintrc to eslintrc.js", "it's failing in travis due to eslint. you can repro by running `npm run eslint`. seems the error is `move function declaration to function body root`. if you need any help. feel free to join the slack or irc chat; thanks a bunch for the pr! :)", 'i\'ll see what i can do today. ---cgulatvenu.comon sat. jun 25. 2016 at 11:44 pm -0600. "nolan lawson" notificationsgithub.com wrote:it\'s failing in travis due to eslint. you can repro by running npm run eslint. seems the error is move function declaration to function body root. if you need any help. feel free to join the slack or irc chat; thanks a bunch for the pr! :)--you are receiving this because you authored the thread.reply to this email directly. view it on github. or mute the thread.', 'oops didnt check eslint. will fixup', "ci tests are failing; eslint wants the `let` on line 260 to be `const`. there also seems to be a problem with npm that i don't understand yet.", 'can we remove the `eslint-disable: max-len`?', 'hrm... build seems to fail on eslint using a deprecated --reset flag.any help?', "yep. sorry about that. i've also installed the atom linter-eslint plugin. so i should see these errors before commiting.", 'fix eslint errors', 'i\'ve created hardcoded test:```jsx/* eslint-disable */const transform = require(\'babel-core\').transform;const { code } = transform(`import react. { component } from \'react\';type props = {  label?: string.  anotherlabel?: string.};class test extends component {  props: props;  render() {    return (      <div>{this.props.label} {this.props.anotherlabel}</div>    );  }}export default test;`. {  babelrc: false.  presets: [\'es2015\'. \'stage-1\'. \'react\'].  plugins: [    \'syntax-flow\'.    \'flow-react-proptypes\'.    \'syntax-object-rest-spread\'.    \'transform-class-properties\'.    \'transform-export-extensions\'.    \'transform-decorators-legacy\'.    [\'react-docgen\'. { "doc_gen_collection_name": "storybook_react_classes" }]  ].});console.log(code);``` that is working.i think this problem is related how storybook are using babel config. (some plugin are causing bug. idk)so. i think you can close this.', "can you move it down after the other `./` requires please. other than that it's good. i don't understand why eslint didn't catch this.", 'needs to wait for next eslint-config-airbnb release.', 'webpack-reporter: [chore][patch] fix eslint. update .npmignore', 'generator-electrode: [patch] [chore] set es6 flag in gulpfile.. - set es6 test flag that is used by the `arch-gulpfile`.- `test/server` eslint file extends from the new es6 server test file.', "still getting a problem: `cannot find module 'eslint-config-vkbansal/react'`", '`npm install eslint-config-vkbansal`', 'after thinking about it a little bit more... i think we can create custom bin files that will add the needed node_modules folders to the search path. (using the node_path env variable). seems to work with eslint.', "add extra class to mixins & set 'form-group-year' class to year input dates by default. note: this was done in es5 because of eslintrc not being set.  this will be in a separate pr", 'yes to changing eslintrc to use `eslint-config-homeoffice`', 'refactor template utils. split the input element functions into a separate file to the general template helpers.ended up in an eslint yak shave. sorry.', 'es6 all the things!!!', "update .eslintrc to fix travis ci error. note i haven't tested this directly. just took a guess looking at the error.", 'ok. worked out there are some inline eslint comments in the casper code that look to be invalid. i can work through these next week. as well as tidy up these commits.', 'ok this now fixes the travis build errors - n1k0 can you please merge this?', 'pull #1298 fixes the eslint breakage.', 'thanks.', 'n1k0 - happy to help. thank you!', 'i am almost ready to merge this pr. jhen0409 could you move `--ignore-pattern` to a `.eslintignore`? thanks a lot.', 'upgraded eslint-config-airbnb to v9', "`eslint` is dead in the water here and **2** tests failed. i'll chase these up.", 'fix(prettierrc): add trailingcomma to avoid conflicts with eslint', 'feature/import-plugin added rules from eslint-plugin-import', "add test with cases for eslint. dobavil primer kak testirovat' eslint neposredstvenno na kakom-to iskhodnom kode", 'feat(eslint): add componentdidcatch handling in plugins', "hi all. is this still an issue? i'm using a globally-installed `eslint` and am not having issues.", "pre-commit stops working after setup and clean. i tried out the pre-commit functionality in the example project before running the setup and clean commands and this functionality seems super convenient. however. after starting to develop my own project after running setup and clean. the pre-commit checks seem to be disabled. i tried adding a bogus .js file with many lint error which were detected by my ide (using the project's eslint config). but the commit still went through. is this a bug or can i simply enable and edit the config somewhere? the pre-commit in my package.json has no diffs with the current head. thanks!", 'yes. i think so. as part of the weekly dependency update i do a `git commit` a new clone after `clean`.i see precommit hook run eslint and style lint.works as expected afaict.', 'why is `react/prefer-stateless-function` disabled?. in many places. it seems like the eslint rule `react/prefer-stateless-function` is disabled. what was the reasoning for this decision? personally. i think stateless components is one of the best parts of react because it emphasizes how the ui is a pure function of the state.', 'i see. thanks for clarifying.', "shouldn't `react/prefer-stateless-function` be disabled in `package.json`?", "i was just about to take a look at the camelcasing comments from christiansmith on gitter. i'd be interested to hear about which errors you're getting. i'm not getting any at the moment. for me `npm run test` gives 414 passing and 20 pending tests.christiansmith i don't believe the camelcase thing is configured in the `eslint` configuration at the moment (nor is it called before running tests as it is in other anvil repositories). are either of these something we'd like to add?also would you like these 'correction' commits to be squashed or left as-is? i can go either way.", 'bauglir we can look into the eslint config separately. i want to go ahead and merge this. looks great. thanks for the work!', 'update to latest eslint and loopback config. this allows us to start using es6 syntax in the codebase.', 'fixed issue with deprecated eslint rules.', "hehe failing in node 4 and 5 after i followed airbnb's eslint - dropping node 4 and 5 support to destructuring assignment or make two small fixes in tests... yaa. remove destructuring - it also sounds so negative.", "rely on rx for async completion flow. completion only gets used in the editor so i reduced the boilerplate down a bit into one function on the component. we can extract this after.the flow is way more direct. no more back and forth with promises and callbacks. also. i cleaned up the use of `debounce` in favor of `switchmap` - user gets exactly their intent and code state.while i was at this. i noticed that eslint-config-airbnb (or some downstream dep) introduced a new rule that i'll have to clean up on another pr. dropping it via our config now.", "amusingly. i'll bet this increases code coverage. i'll be writing some tests now.", "whoa whoa. i'm deep in tests. it's cool", 'more editor cleanup. tiny bit more tested. meanwhile. i cleaned out a bunch of tests and started setting up an eslintrc for the test directory.', 'remove old dep. bump eslint-plugin-react. general cleanup.', "gyandeeps you're talking about mocha now. mochify is a slightly different story. you're not testing eslint in the browser with mochify. do you? :grinning:", "solved: thanks to mjschock . i was able to fix the problem. turns out that i had a video in the project folder that was taking up a lot of space (about 20 mb). i moved that video into webdav and referenced it there instead. after making those changes. i was able to both upload and process my theme successfully.side note: if you have bunch of red errors while bundling (via 'stencil bundle' or 'stencil push'. try removing the .eslintrc and .eslintignore files. that was another problem i ran into earlier.", 'thanks. should probably make eslint throw on travis..', 'i think if you only have warnings. eslint will use an exit code of 0. which i think travis will not fail on. you probably want to tell eslint to use errors instead of warnings for the things you care to enforce at ci.', "add dangling commas transform. transform to add dangling commas to allow enabling eslint dangling-commas always-multiline rule. it formats only arrays and objects that don't already have a dangling comma to keep changes as minimal as possible.what i did is to find all the object/arrays that don't have a trailing comma and then add a random key to them so they are modified. then in a second pass i remove the added keys and format using recast trailingcomma option.the end goal here would be to run that the on react-native codebase to enable stricter eslint rules without having to manually fix the 1k+ warnings it will generate :)tested against the react-native codebase pretty succesfully. the only thing it doesn't support that eslint complains about is trailing commas in destructuring. it should be pretty easy to add support.", 'cc cpojer', 'benjamn is there a way to force-reprint a node?', ':+1: damn i liked my hacky 3am solution haha', "it's certainly original! i'd prefer not to add anything to objects or arrays though. even if its temporary! i'm scared that the codemod goes wild and adds a field it doesn't remove.", "alright now it's a lot less funky :)", 'would you hate me if i asked you to change `hasnodanglingcomma` to `hasnotrailingcomma` or so?', 'should i change dangling comma for trailing comma everywhere then? i just took the name from the eslint rule.', 'i would be very happy if you did. :)', 'i love it! thanks. are you going to actually run it on react-native? :)', 'fixed. now i hate you forever :)', "i tried it and it worked well. there was a few minor issues that were not related to this transform so i'll have to check that first.", 'bring appium eslint up to speed. and a bit of refactoring. imurchie can i get a review please!', 'hmm. odd that this is running on appium-ci in additino to travis', 'looks good to me.i think the appium ci has been going the whole time. trying to run _everything_.', 'there was an eslint error. jdubois please merge this once travis passes. else ill merge tomorrow', "also. please make sure to comply with the project's eslint rules. you can verify your code by running`npm run lint`", 'improve specs. fix eslint for ava async. here some test improvements also some eslint fixes for `async`.', "i lost an hour because of this. there's nothing about the eslint usage that requires `^4`.", 'i have eslint in the project. i use standard based ruleset.', 'i would not like to include a custom made eslint config if possible. i would like to include a complete eslint preset. i have used the eslint-config-standard. but i am open to switch to eslint-config-airbnb-base or anything else. i think its more battle tested than creating one from stretch. what do you think?']