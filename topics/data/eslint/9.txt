['had to fix one issue due to breaking change in v2 of eslint; .eslintrc rule `space-after-keywords` got renamed to `keyword-spacing`. commit amended and pushed before merging.', "when you refer to non-top-level rule overrides. do you mean those that are specified in `.eslintrc` files that are _not_ at the root of your project?this tool does not run your config[s] against your source code. all `eslint-index` does is parse an `.eslintrc` file and compare it against all available rules for both eslint and any plugins you have added and specified in your config's `extends` value.in order to achieve what you are suggesting. the tool would need to:1) gather (or be provided with) a config file2) parse the config file to gather all the rules you have specified3) run the config file against your source code (through eslint)4) incrementally disable rules (setting them to `off|0`) and running the modified config against your code again and again5) gather any rules that triggered a linting erroris that correct?", "also. what non-standard js syntaxes are you using? `eslint-plugin-react` does have some bugs with flowtype. for example.it's possible that specific syntax in a specific file is breaking `eslint-plugin-react` - in which case. we should figure that out and file an issue there.", "i developed the tool to assist me in writing a config for my company (`eslint-config-supermind`). with so many rules available in eslint itself plus all the rules provided by plugins. i found it difficult to keep track of which rules i had used and which ones i hadn't. this became all the more difficult when upgrading `eslint` and any plugins--i wouldn't know what new rules had been added. `eslint-find-rules` went a long way in helping with this. but i felt it lacked the granular functionality i desired--so i developed `eslint-index`. being able to filter rules by status (`omitted|off|warn|error`). by plugin (`react|jsx-a11y`) or the core eslint rules _and_ having doc urls outputted alongside rules in the console has been very useful to me.for example. if i upgrade `eslint` or any plugins and want to see which rules i haven't specified (because they are new) _and_ for these omitted rules. display links to the docs alongside. i can do:```eslint-index .eslintrc.js --status omitted --docs```", 'update react.js. according to the eslint-plugin-react docs allowmultiline has a default value to be true.by default. braces spanning multiple lines are allowed with either setting. if you want to disallow them you can specify an additional allowmultiline property with the value false.', "my thoughts are that there are still companies using jscs but who may want to start using airbnb's style guide.  this could be one of their first steps to switching to eslint.  at least it is with the company i am currently at.will get a pull request up soon.", 'in most cases. you should be exporting one conceptual thing from a module. in other words. if you have both "foo" and "boo". those are *two modules* and thus should be `export default`ed from two separate files.if you insist on having them in the same file (there are some use cases where this makes sense. but not many). then you should be using multiple named exports.when exporting one thing. and inline export is nicer because it ensures that you can not change the binding later (ie. `export default function foo() {};` is better than `function foo() {} ; export default foo;`)as far as positioning. there will soon be a linter rule in `eslint-plugin-import` that will require that all export statements are grouped together - so i\'d recommend grouping them together and putting them at the bottom of the file.', "`requireobjectdestructuring` and `requirearraydestructuring` - `prefer-destructuring``requirepaddingnewlinesafterblocks` - `padded-blocks`i think `disallowarraydestructuringreturn` has a rule as well?either way. the eslint team has committed to creating or adapting rules such that 100% of jscs enforcement is possible with eslint - they're pretty close to complete.", "i'm sorry to hear that. i'm going to reopen it. however. since it's still pending an eslint rule change.feel free to unsubscribe from the thread if you're not interested in further participation.", 'atom beautification config.. the default rules for the "atom-beautify" does not play very well with the airbnb eslint config rules. also. the config options available are also not enough to be tuned.is there a plugin or config options available for auto beautification in atom while still maintaining the consistency of airbnb eslint rules.', 'i think the most common approach is for editors to merely show violations. and for any autofixing to be done on the command line with `eslint --fix`.', 'cool. let me check with the beautification plugins to see possible adherence to airbnb styling guide.', 'my bad. we need to release `eslint-config-algolia` first since we made the changes to the vue configuration. then we can drop the changes to the `eslintrc` in this pr. then merge.', 'bump(deps): upgrade elasticsearch and eslint', 'is it possible to setup "allman" braces style?. is it somehow possible to configure "allman" braces style instead of default "k&r" style? it would be nice to have such feature. i thought to apply tslint --fix after that but tslint doesn\'t support auto fix for braces style (overall brace-style is absent in tslint and can be inherited from eslint via plugin).', "you only need both if you want eslint to warn you about prettier violations. if you only want to disable formatting rules. but rely on prettier list different to identify violations. then you don't need both.", "using eslint-config-prettier without eslint-plugin-prettier provides a better experience in the editor in my opinion. but using eslint-plugin-prettier makes a lot of sense in ci or in projects with lots of public contributors where there's a chance they'll have eslint tooling configured but not prettier tooling. so it all depends on your use-case.", 'one other thing... many editor integrations for prettier have an "eslint integration" option which causes the editor to use `prettier-eslint` instead of `prettier`.', 'prettier\'s goal is not to be flexible. as the page i linked above says:> by far the biggest reason for adopting prettier is to stop all the on-going debates over styles.> the more options prettier has. the further from the above goal it gets. the debates over styles just turn into debates over which prettier options to use.as you said above:> but when you consider a project template that comes with default linter rules on and you have n projects to create (and by n i mean "many"). it is not efficient to turn linters in every project. it would be more efficient to adapt prettier options.if we added a whole bunch of options. you would have to configure them all each time you created a new project. > while creating many projects turning off linters for every project is just one more step that this tool is creating.you have to enable prettier for each project. too. prettier makes this step pretty easy:```shellsession$ npm i -d eslint-{config.plugin}-prettier$ npm i -d --save-exact prettier```then. in your `.eslintrc.yml`:```yamlextends:  - plugin:prettier/recommended```that will disable all rules that conflict with prettier\'s styles. while enabling a rule that gives you a description of what needs to be changed to follow prettier\'s styles.', "i understand the dilemma yall would have from an internal design and scope perspective but i think this is what many people are running into with this situation. people are wanting more customization because they like your tool and a lot of people promote it. however. the whole purpose of a lint is to standardize your code to a best practice for your project not the other way around. i personally write a bunch of vue apps so i like to use the eslint standard for vue so it basically does an automated peer review. i dont really expect a formatter to 'hold me to a standard' especially since it doesnt throw errors because something isnt syntactically correct. best practices and javascript changes on a daily basis. so it would be nice is prettier was as configurable so the community could share configs and be able to make it as customizable as tools like eslint. i like prettier. it just cant do what i want it to do so i was left using the built in vs code formatter. maybe one day it will :)", 'xixixao the prettier repo has eslint-plugin-prettier set up. so if you enable eslint integration in the atom package. it should format correctly.', '`standard` doesn\'t allow any option nor to configure any `eslint` rule. so the fact that `standard` users put a space after the function name doesn\'t necessarily means they "like" this style. it can also means they "tolerate" it because they found other benefits using `standard` such as having a predefined rules. no config etc... there is no way to know other than conducting a survey.if `standard` would allow to turn that rule off or to change its config and if those users made the deliberate choice to enable (or to not disable) the space after the function name. then that would be an argument in favor of the popularity of this style. but it\'s not the case.a better indicator is: how many people not using `standard` (therefore making a deliberate choice regarding each particular style) write code with a space after the function name?from the various comment it seems `browserify`. `moment`. `rollup` and `vue` do not use `standard` and choose to use a space after the function name.that can be compared with the many other projects mentioned in this thread not using a space after the function name.that said. even if a particular choice made by `standard` is not a good indicator of popularity among users. it should be taken in account to determine the amount of code changes generated when using prettier on a project using `standard`.', "we could also create `prettier/plugin-typescript-eslint-parser` and `prettier/plugin-flow-parser` packages to give people an alternative if they encounter bugs in babylon's implementation.", "i agree. it's not configurable in prettier. (like it is in eslint `no-mixed-operators` rule)not really happy that    if (!inputcolon && inputkey || inputcolon && inputvalue) return;is converted in     if ((!inputcolon && inputkey) || (inputcolon && inputvalue)) return;", 'whosesomebody you can also use `prettier-eslint`.', "coolemur we're willing to fix bugs in prettier (i'm sure the `prettier-eslint` folks are too). it's just that formatting changes take a lot of discussion to ensure that we make the best decision. right now it looks like we'll be changing this behavior or adding an option. but i can't say for sure. `prettier-eslint` will allow you to run whatever eslint rules you'd like over your code after prettier runs. and eslint is actively maintained so you shouldn't have issues there.", 'eslint errors. ## descriptionthere are several `eslint` errors after last prs on `buildo/eslint-config`## how to reproduce- {optional: describe steps to reproduce bug}## specs`npm run lint-fix` :)## misc{optional: other useful info}', '#675: eslint errors (closes #675). issue #675## test plan### tests performed- `npm run lint` --> no errors!- ci should pass', "why weren't these caught in the prs?", 'gabro i was referring to the prs on `buildo/eslint-config` (different repo). i forgot to fix brc after those', 'oh. ok!', "it wasn't `debug`'s fault: ci was failing because of eslint errors. closing!", 'fix eslint curly error. ## descriptionfix curly error (new eslint rule)', '#678: fix eslint curly error (closes #678). issue #678## test plan### tests performed`npm run lint` and ci passes', 'looks like eslint is up-to-date now. so this is no longer needed.', 'eslint: convert to use proper yaml. we should convert our eslintrc file to use proper yaml like thecommunity. this also requires renaming .eslintrc to .eslintrc.yml<!--thank you for your pull request. please provide a description above and reviewthe requirements below.-->##### checklist<!-- remove items that do not apply. for completed items. change [ ] to [x]. -->- [x] `npm test` passes- [x] contribution guidelines followed [here](contributing.md)- [x] commit message follows commit guidelines', 'okay re-ran and we now have a green run', 'create espree plugin. hey! :wave: i\'m just digging around `babel-eslint`. `babylon` and `eslint`. trying to set up some config for `eslint`. i always wonder why even `babel-eslint` exist. okey. there are reasons. but behind the scenes most of it\'s code base is that `babylon-to-espree`. so today i\'m thinking why not just include it here? so then we can freely add eslint `parser` option to `babylon`. e.g. `"parser": "babylon"`.currently there are three problems: 1) `babel-eslint` has some bugs and don\'t have "full" support and configuration of the `babylon`. 2) `eslint` can\'t use `babylon` only because ranges (which thing is exactly the idea behind `babylon-to-espree` in the `babel-eslint`). 3) if `eslint` use `babel-eslint` it don\'t get all of the power of `babylon`. or okey. it _should_. but there are some problems. which i don\'t want to report. because it may be better to do the effort to pr such plugin.do you want prs here and there for such thing?sorry if something isn\'t clear. i\'m a bit tired. ;]', "hey charlike! we really appreciate you taking the time to report an issue. the collaboratorson this project attempt to help as many people as possible. but we're a limited number of volunteers.so it's possible this won't be addressed swiftly.if you need any help. or just have general babel or javascript questions. we have a vibrant slackcommunity that typically always has someone willing to help. you can sign-up [here]( an invite.", "i'm not talking about making eslint plugin. i'm talking about moving some babel-eslint code here as native `babylon`'s  builtin plugin. babel-eslint then may be just some thin layer for babel-specific things and fixes. in bonus we will can just use `babylon` as eslint parser.> not sure what you mean about the full support/config of babylon though? and babylon does allow ranges as an option babel/babylon#options.i just mean that babel-eslint has too much hardcoded things and some things may not work so well like it would if we just has `espree` plugin here and use that parser in the eslint directly. not through babel-eslint.", "charlike that is exactly what hzoo is proposing :)> possibly add another babylon plugin for eslint so that we don't have to mutate the ast afterward. effectively making babel-eslint a minimal wrapper.he originally proposed an `eslint` (in this case naming it `estree` may make more sense) plugin for _babylon_.", "what? :laughing: sorry it's sounds a bit strange to me. of course it is possible. but then it won't feel as good as defining it through eslint's `parser` option :v: i see it like needless effort. when we almost have ready `espree` plugin _for babylon_.", 'charlike i think you are confused? brian is saying i proposed the exact same thing you did. i just named it "eslint" instead of "espree"', "doh. probably. i'm a bit tired :rofl: just realised that after rereading it.", "> cc not-an-aardvark on thoughts?thanks for the ping. in theory it sounds like it would nice to have a way of making babylon produce estree. although i think `babel-eslint` would still be necessary in either case for patching scope analysis. i'm not really familiar enough with `babel-eslint`'s codebase to have a strong opinion one way or the other about whether this is worthwhile.", "> not-an-aardvark:  in theory it sounds like it would nice to have a way of making babylon produce estreeit's babylon's `estree` plugin making that? huh. or you meant `espree`. haha. damn names :rocket: :rofl:", "i meant estree. i hadn't realized that plugin already exists.", 'edit eslintrc', "verified `npm run eslint` myself and it's fine.", 'super confused about how this is causing lint failure. but may be some weird timing issue with an upgraded eslint. either way can ignore it for now and pick up the next update', 'run eslint on tests. this helps the tests conform to the same style as the library.with the exception of a handful of rules that are not enforced.', "nice. thanks!there's a conflict in `h.js` after merging the `namespacing` pr. can you resolve?", 'when the name is `initialdata`. length of the line is bigger than 140 and it requires additional eslint rules... that\'s the reason why i\'m trying "smuggle" other name.', 'merge conflict', "what's the correct linebreak format for keystone?  i enabled the latest .eslintrc in webstorm and complains about the following for any file i open:```eslint: expected linebreaks to be 'lf' but found 'crlf'. (linebreak-style)```", 'add eslint-config-standard to package.json. fixes #2213', "webteckie we're not using the `standard` eslint config... you're hitting this issue because your node modules are in a `node_modulesx` directory. which eslint is **not** ignoring. and then it's trying to use the `standard` preset because the `crypto-browserify` package uses it.(typical dcousens :p)if you get rid of `node_modulesx` it should lint keystone just fine.", 'added space-in-parens rule to eslint. as per issue #1797', "added eslint spaced comment rule. revised pr with config set up to permit /*! jedwatson i haven't been able to find config options or other eslint rules which would require spaces before the '//' or a space at the end of comment", 'hey all. the rule "brace-style": 2 doesn\'t permit start and end braces being on the same line i.e.  `props.onclick = () => { this.togglecreate(true); };` creates a linter error.we have about 80 instances of this throughout the code. to prevent this rule from picking up such instances i can add config option `{ "allowsingleline": true }`. is this something we would want to do? alternatively i could go ahead and remove the curly braces or place the statement on a separate line. let me know what you think!', "thanks lennyboyatzis - looks great. if there's no equivalent check for the end of the `*/` comment. we'll just keep an eye out for them :)", "chore: add eslint dependency checking. ## status**ready**## descriptionadd eslint missing dependency checking. now that's smart!", "great to hear :) i'll fix the package.json thing.i'm also not sure if eslint is working properly? i'm not getting any errors. but the `eslintrc.js` references ` extends: 'case/eslint-config' ` ? and i'm not sure how that works.", 'ok. it makes sense.what about to use some linting tools? do you like eslint airbnb preset?', 'fixed eslint config.. for some reason the eslint config file had duplicate keys and suddenly broke recently. this patch fixes this situation.', 'to build all (src. tests + minify etc). still use:```npm installnpm run build```now. eslint is also invoked in the build flow.to watch all. still use```npm run watch```if watch without minification etc (still both src and tests):```npm run watch dev```', "that eslint plugin looks interesting. i'll give it a shot in the next few days.", 'i think it would be good to add support for `eslint-plugin-flowtype`', "build is failing because of linter errors in `app/node_modules`. not sure why this is happening because i'm pretty sure that all files in `.gitingore` are ignore by eslint. adding a `.eslintignore` would work but it would be a hacky solution. it would be better if we could ignore them simply with `.gitignore`.", "how can this work in a situation where we're building once and deploying to multiple environments?", 'i think i have the same issue. i want to create a config file for google api. data include the secret keys. etc.. how will i add it up in the boilerplate? and how will i access the list of secret keys from the config. thanks', 'shawnmclean vlobrigo karloespiritu  for multiple environments.  - the config file resides in a secure location outside your app. - the path (absolute or relative) from your app to the config file is the same for all environments - each config file is has settings appropriate to that environment.how you access that file from within your app via `webpac externals` or webpack `defineplugin`. you will have to work that out for your environments.', "how can i achive an external config.json (not bundled so sysadmins can work on it) that get included runtime and isn't statically bundled?", "update eslint rules for ospec. ospec needs global-require suppressed so it can use `require('util')`.~~test-ospec needs `ecmaversion: 2017` so it can use `async`/`await`.~~removed async/await from test-ospec; just return promise instead.## descriptionmodified `ospec.js`. `test-ospec.js`## motivation and contextmithril's test script linting was failing.## how has this been tested?`npm test` now succeeds without errors.## types of changes- [x] bug fix (non-breaking change which fixes an issue)## checklist:- [x] my code follows the code style of this project.- [x] i have read the **contributing** document.- [ ] i have added tests to cover my changes.- [x] all new and existing tests passed.- [ ] i have updated `docs/change-log.md`", 'ok. updated as requested.', 'travis is failing for unrelated reasons. no worries!', 'thanks for fast reviews!lodash is not declared in package.json explicitly. it is a dependency of babel. eslint. etc.the travis build has been terminated. that\'s weird a little bit. as "unit tests with coverage" in the same build are fine.', 'run eslint --fix. fixing 1000s of lint issues. some rules cannot be `--fix`ed but this goes some way to linting the entire codebase.', '> needs linting!out of interest. were you just referring to the one long string? that\'s the only thing that was caught by the linter (or that i can see from your comments).the long string was just shown as a warning locally ("max-len": ["warn". in eslintrc). and i assumed that long string literals were probably ok to leave as warnings? but this seems to have caused the travis build to fail. which is a little odd (it would be good to know where that config is coming from) ...assuming that string literals do always need to be broken up. is our preferred approach just to break it in to relatively arbitrary fragments and concatenate. like i\'ve done here? cheers.', 'is that script really the best way to go anyway? it seems that just creating the appropriate `.eslintrc` and running `eslint` directly would work just as well. that has been highly effective in my projects. now that we have easy-to-consume configs. `.eslintrc` can be as simple as:```json{  "root": true.  "extends": "godaddy"}```...and then integrations with ides. etc.. will work without any extra tools.', "yeah. i suspect it is eslint loader in that case... i'll close this and maybe poke around at eslint-loader sometime.", 'always allow the use of backticks for strings. i hope this one is an easy sell for everyone.  it\'s kind of silly when you change something like:```jsconsole.log(`test ${value}`);```to ```console.log(`test 100`);```you have to change the backticks to `"` or eslint complains.it also allows you to easily use `"` in strings instead of escaping them.']