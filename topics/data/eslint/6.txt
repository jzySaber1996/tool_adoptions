['maybe we should integrate eslint into the testing process.', "lmammino im not sure about the errors that cause the linting to fail. i haven't touched those files in my pr. any idea? can an admin rerun the build on travis? could it be an update of eslint?", 'pmuens cool ... we need to merge invoke local first and rebase because they include the eslint fixes ... dont wanna fix it twice and conflict', "that's an ancient eslint-config-airbnb. please update to the latest. using the bash command in the read me.", 'expected "this" in class method react native. in react native navigator component. i move renderscene attr out to a class method. it check if route.id match and return component. it forces me to use "this" but i don\'t think i need it.  i am on phone can\'t show code. any suggestion or just simply // eslint-disable?', "i'd need to see code to be certain.basically. outside of interface things a framework requires (like react component methods). things should only be instance methods if they need `this` - otherwise they should be static methods. or closed-over functions.", "that's intentional. until eslint-config-airbnb-base gets a semver-major release.", 'this is intentional. until eslint-config-airbnb-base gets a semver-major release.', 'that seems like a great use case for a separate function or a static method. is there any reason it needs to be an instance method?', "put another way - is that a special method in react native? if so. it belongs on the instance - if not. it doesn't.", 'this is intentional until eslint-config-airbnb-base is released.', 'using the hardcoded class name is the most reliable.', "djviolin assuming you are using the `linter-eslint` package in atom. you shouldn't need to set anything. it should detect the locations for you if you have everything installed locally in the project.the latter actually won't work inside atom. at least not without modifying the code of the package. what you are describing is similar to a global install of eslint which isn't recommended. but is supported.", 'whoops. that\'s not a very good example :-) i\'ll fix it.in the case of dom nodes. because "the dom". you can\'t avoid mutation. so. in that case only. it\'d be appropriate to use an inline eslint override comment. at airbnb we don\'t tend to run into that problem because we use react.', 'added the two others. and rebased.for `space-before-function-paren` i did not follow the default of eslint as that would be against this guide. and as the change is breaking anyways. no issue there', 'the eslint settings we want for `space-before-function-paren`:``` js    {        "anonymous": "always".        "named": "never".        "asyncarrow": "ignore" // todo: semver-major; set to "always"    }```', "oh wow. i had no idea. any plan to enforce that with the eslint config (if it's even possible to ban all loops)?", 'the base eslint config already bans everything except a normal for loop (including your for..of loop) - the next release of the main eslint config will do so as well.banning normal for loops is a bit restrictive due to the lack of a `range` builtin in js. but eventually that will be included too.', 'using arrow functions in mocha tests is [discouraged]( according to their official documentation.', '`mocha` is wrong. using `this` in tests is discouraged. despite what their documentation says.', 'what is the reasoning behind discouraging the use of `this` in tests?', 'and what would be a better way to write mocha tests without using `this`? closure variables?', '`this` is shared mutable state. and should always be avoided when possible. what would you say you use `this` for in your mocha tests? i can better suggest an alternative if i know your use case.', 'you should totally request a rule for that from eslint', "people absolutely use both spacings. which is why there's an eslint rule to prevent having the separating space.thanks for the contribution! happy to reopen if you want to instead adapt it to include both patterns. but as-is the current spacing is what we'll stick with.", 'leopoldofu yes. for that you should use closed-over variables instead of mutating `this` - ie. the latter case.separately. never use noop matchers like `.to.be.true` - because `.to.be.purple` will pass too. you want `.to.equal(true)` so that if you use the wrong matcher. it will throw. the `no-unused-expressions` linter rule should complain about that.', "ok. as long as no one knows of any negative side effects.thanks for the additional tip on the matchers. will implement it. i was ignoring the eslint error on them because i thought it just didn't know about matchers when writing tests.", 'happy to discuss further - at the moment the advice is to use eslint disable comments for the places you do want `proptypes.any`.', 'jsx-a11y/anchor-has-content throws error. for some reason. when i run the package "as it is". it throw referenced from: airbnb...  configuration for rule "jsx-a11y/anchor-has-content" is invalid:        value "" is the wrong type.i know this is not the jsx-a11y repo. but. if i run it separate. it works fine.no rules were added to the .eslintrc fileany ideas?', "as long as phpstorm supports eslint. then yes. i'm not sure how to integrate it since i don't use phpstorm.", 'i think its support eslint. where can i find the eslint file?', 'instructions are in the readme.', "isn't the default for comma-dangle supposed to be functions: ignore? i'm trying to turn the rule off for functions in my .eslintrc but setting functions: ignore isn't working correctly. it barks about trailing commas in objects that are function arguments.", 'ah. gotcha. well. the screenshot in my first post is the thing i\'m looking at right now. when i set up my .eslintrc like this. i get many many "unexpected trailing comma" errors where i didn\'t have them before. simply removing that entry under "rules" gets rid of them (though i still have the one in the screenshot).```{  "extends": [    "eslint:recommended".    "plugin:import/errors".    "plugin:import/warnings".    "airbnb"  ].  "plugins": [    "react"  ].  "parseroptions": {    "ecmaversion": 6.    "sourcetype": "module".    "ecmafeatures": {      "jsx": true    }  }.  "env": {    "es6": true.    "browser": true.    "node": true.    "jquery": true.    "mocha": true  }.  "rules": {    "import/no-extraneous-dependencies": [2. { "devdependencies": true } ].    "no-underscore-dangle":["error".{"allow": ["_id"]}].    "new-cap": ["error". {"capisnewexceptions":["router"]}].    "no-use-before-define": ["error". { "functions": false. "classes": true }].    "comma-dangle": ["error". {"functions": "ignore"}]  }}```edit: one of the newly "wrong" dangles is:```const thingschema = new mongoose.schema({  name: string.});```normal object dangle. as you can see', 'that\'s what i\'m saying; ```"comma-dangle": ["error". {"functions": "ignore"}]```makes eslint complain about an unnecessary comma dangle there and many other places.', 'oh weird - that seems like an eslint bug. can you file it on the eslint repo?', 'dougwilson ok. so i got a question. actually in the project there is `eslint` and no `standard`... the `.eslintrc` is not configured to remove the semicolons or to prevent there.... let me know if you want i can create a new pr with `standard` or with the semicolons configuration. thanks!!', "nice. didn't even know this! is it possible to name it `.eslintrc.yml` to match `.travis.yml`?", 'yea. that sounds good. but seems that it dont understand eslint.i will experiment with it and try to collaborate if it is open.', "> just fyi. the vetur extension for vs code supports formatting <script> tags based on prettier-eslint out of the box.do you know if this is documented somewhere? i can't get it to work alongside `eslint-plugin-vue`.", "thanks for these explanations.i was already using _eslint-config-prettier_ as recommended but i didn't saw all the information in the repository. i'll look into it.", 'lipis for that electron case. eslint could add the spaces in function declarations after a prettier run... but i dunno if eslint can format code within markdown code blocks.', "eslint is parsing .js files and not .md so i'm not sure if we can do anything about it.", "iirc. there's no difference between their `latest`/`insider`/`next` build process.i'm not sure if we should add it here or in typescript-eslint-parser. cc azz.", 'i originally was against this feature. now i\'m neutral and wouldn\'t mind having it. that said. imo. this would be better living in a separate tool that can run after prettier (`prettier-eslint`. `prettier-standard`. etc.). but i think the same about almost all of our other options (the exception being `tabwidth`).i think this falls in the same category of the other options we started to support. i missed the discussion of when they were initially supported so i don\'t know how much demand there was. but i think this brings more value than something like `nobracketspacing` or `jsxbracketsameline` (no wonder people use it so much as an argument "why don\'t you support x option if you support y?").', 'azz the only reason i can think of is keeping the config format options as close to eslint as possible because many people use it alongside eslint and would expect the options to be the same. i could be wrong but not allowing `prettierignore` is the only difference from where you can add eslint settings.maybe more people prefer using files to package.json keys (`.eslintrc`. `.eslintignore`. `.prettierrc`. `.prettierignore`) but it seems incomplete that the only thing missing is allowing `prettierignore` in package.json', 'thanks for catching my `describe.only` on that test.... we should set up eslint to prevent that', 'closing in favor of #490', "it's just eslint not knowing about the global `jest` object. fixed in the latest commit", "ah! yeah. i think it's the glob argument in eslint. changing it to `{test|mock}` fixes the issue. got dragged away last minute", 'chore(package): update eslint and dependencies. add eslint warnings for problematic rules', 'lgtm! would like to get another reviewer on this though.', 'if you use a windows system. in **package.js** change those line inside **"scripts": {}** to:`"start": "set node_env=development & node_modules\\\\.bin\\\\webpack-dev-server --config webpack.config.js".    "bundle": "set node_env=production & node_modules\\\\.bin\\\\webpack -p --config webpack.config.dist.js".    "test": "node_modules\\\\.bin\\\\eslint src\\\\**\\\\*.js"`', 'webpro eslint', 'add no-trailing-spaces: 2 to .eslintrc. fixes white space changes', 'add no-trailing-spaces: 2 to .eslintrc', 'landed in fe26a1989d', 'add support for json config files. i use json for keeping my eslint. coffeelint and npm configs. i would like to be consistent and use the same format for sass-lint.', 'big problem for me as well.', 'my current non-solution is to keep two configs - a source `.json` file and [a manually converted]( `.yml`.', 'go away codacy... snugug can you change the quotes parameter in codacy\'s code-settings to "single" please i don\'t have access to the parameters on codacy. you may be able to add us to a codacy organisation i think?i had a little play with codacy and it takes a fair bit of tweaking to get it right i think.. not sure this should necessarily be a merge criteria until we\'ve ironed it out? i wish it would read our eslint file too seeing as they\'re actually using eslint themselves...', "i don't think this is something we would pursue it opens up too many edge cases and potential importing issues. as bpscott says you can already define this order and you can just share this config amongst all your projects. once we get to including configs via packages like you can with eslint airbnb standards etc then i think this would become a moot point?", 'code quality control updated - .eslintrc.js added/prettier installed', 'add prettier support. - add `prettier` formatter to project (matches new seneca general styling).- configure `eslint` to enforce `prettier` rules.- format all sources to match new rules.', 'settings/sample app defaults migration warnings. over time new settings get added and new defaults get added to the sample app (e.g. the introduction of eslint). roosevelt needs an upgrade warning module that scans your app for this kind of drift and warns users to consider making use of new features or new recommendations periodically.some useful triggers:- during postinstall- when the app is started in dev mode (once only!)- when manually triggeredwould also be useful to have a setting which disables these warnings and recommendations entirely.', "review .eslintrc. i've noticed a lot of things that should be considered warnings or errors are passing our linter. the configuration needs to be reviewed. may be out of date given updates to eslint (and the react plugin)", "i dont know if this effects any of it but this is my `.template-lintrc.js`:```/* eslint-env node */'use strict';module.exports = {extends: 'recommended'.rules: {'bare-strings': true.'block-indentation': 'tab'}};```i'll try and narrow it down some more.", "if i change my `.template-lintrc.js` to:```/* eslint-env node */'use strict';module.exports = {extends: 'recommended'.rules: {'no-bare-strings': true.'block-indentation': 'tab'}};```all is working fine again (templates being linted properly and throwing on bare-strings).seems like the `bare-strings` rule in the config is not backwards compatible. that also explains the abstract error `error  cannot read property 'indexof' of undefined  undefined`. probably because the linter can't find the old `bare-strings` rule or something.ill change it to `no-bare-strings` for now. thanks for your time.", 'please use `electrode-archetype-njs-module-dev` and setup test and eslint properly.', "hi. thanks for the update. any idea on what's the breaking changes of eslint 3 to 4?  i am ok with the update. but we have to understand what's the impact on existing components. and if we want to major bump the component archetype because of this.also. i agree with cross311. please separate the entry change into another pr.  thanks.", "bryannaegele how are things? for a first pr. how about just adding the most basic flow support e.g. flow-bin. the eslint & babel plugins. add a .flowconfig. and add /\\* flow */ to each js file. after that's in. we add prs that gradually add static typing (and fix errors like you found above as we go). i ask as i have some new gatsby stuff in mind that i'd love to start playing with flow plus have it around to guide my prototyping. thanks!", "kyleamathews ok. now passing location.i didn't want the newlines in the output. so i've just collapsed it to a single long line. and that passes eslint. hope that's ok.", 'hehe. great minds think alike on the eslint config.', 'glad to finally have a fix for this! thanks.', 'pylipala looks like your pr failed eslint formatting. please correct so that the circleci tests pass', "gentunian don't worry about codacy. looks like they once again stopped parsing the eslint config properly... i've disabled the check as it didn't provide value and confused contributors.", "kbrandwijk i removed codacy as its supports for eslint config is too flakey. it kept starting to mark pr as failing every few months.i'd love to get this merged. any chance you could resolve the conflicts and try to finalize the integration?", "hello again ofauchon if you could run <code>eslint .</code> and update the code so it follow the eslint rules that would be super and then i'll merge.bestpeter", 'thanks omarshehata. i will review shortly. in the meantime. it looks like ci is failing on the `eslint` task. try running the linting tool locally and fixing any errors.', 'make eslint happy again after updating the module tagger code.. should also help fix #824', 'thanks drewpc.', 'is there a way to declare the api url a variable. such as using environment variables? in the example above. i have to declare the api url statically. which means if deployed to a different server environment (staging. production. etc.). i have to update the api url manually.', 'is there an equivalent for the sagas ? current solution i have found is in routes.js :       const { injectreducer. injectsagas } = getasyncinjectors(store); // eslint-disable-line no-unused-vars      injectsagas(appsagas);', 'so now we can get rid of this rule `"import/first": 0` altogether. because by default it is enabled in airbnb eslint config. right?', 'fix(homepage): saga effects should be yielded. i would love to see a more elegant solution. but as #1232 discusses. this seems to be the solution employed by the eslint-plugin-redux-saga project.resolves #1232', "gihrig. many thanks for merging those two prs and looking into this one [?]. that means i will be able to finish it today. > i presume the eslint disable was a temporary measure?yes. that's correct. and i prefer your solution. because it's conciser. either way a dev would delete it.> now that i have looked at this more closely. maybe a better approach would be to remove the truly useless return and replace it with an informative comment e.g.sounds like a good idea to me.", 'yeah. that was another reason why i considered making the wrapper component to use the styled variable. would you rather i just ```eslint-disable-line no-unused-vars``` on the styled-components import or go ahead and make the wrapper component?', "fair enough. i don't love the prettier formatting necessarily either but it is nice to have the code be very uniform.pygy isiahmeadows how would you feel about this pr if i switched to to run `eslint --fix` instead of `prettier`? the `lint-staged` bit is identical between the two. that seems to me like a nice step in the direction of having lint failures break builds (or at least having `danger` get cranky about 'em in the pr comments).", "run eslint --fix against commits. <!--- provide a general summary of your changes in the title above -->## descriptionafter more discussion in #1909 we decided that `prettier` wasn't the right approach. but `eslint --fix` is definitely a good idea. reducing the likelihood of bad code in prs is always a win.this also standardizes on all packages in `package.json`. previously there were a few that were only installed on travis-ci. i never liked that approach though. so i'm getting rid of it.## motivation and contextautomatically fixing simple formatting errors before submission!## how has this been tested?tested writing some bad code. then committing it & comparing the diffs.", 'removing ember-cli-eslint to fix build', 'upgrade eslint-config. fix new violations. see strongloop/eslint-config-loopback#19', 'adding how to install `eslint-config-godaddy-react-flow`. minor readme updatejosephjnk samshull', '`eslint-config-godaddy-es5` will also have to be updated', 'in mac os x. there is no eslint error and all test are passed.', 'lint \'object destructuring filter\' consistently. the pattern `const { map. url. ...props } = this.props` usuallyfailed during linting. because the `map` variable is defined butnot used (`no-unused-vars` rule).after adding the `"varsignorepattern": "^_"` option to the`no-unused-vars` rule. unused properies can be marked as:`const { map: _. url. ...props } = this.props`.i also updated the eslint and babel-eslint dependencies. because ofsome relevant bugfixes.', 'good idea. thanks!', 'docs - potentially add testing to contributor guide.. i noticed in the contributor guide. there is no mention of style testing with eslint or unit testing before submitting a pr. is this something we want to consider adding to contributing.md or something preferable to continue letting ci handle and debugging after the fact?as a new contributor. it was beneficial for me to run these things locally. but i recognize that may not be universal.thanks!', 'to be clear. i am not suggesting changing anything with ci. just also running these things locally to expedite prs.', "i'm all for adding linting to the default npm run test setup!", "oh you're saying adding some text to the contributing guide - also super cool", 'ooh good idea. i hadn\'t considered adding it to default testing. do you think something like something like this might be appropriate?``` node    "posttest": "npm run lint".```> oh you\'re saying adding some text to the contributing guide - also super coolnice. i can add an extra step to npm run test after #5 in contributing.md', 'well. we want it to fail locally when it doesn\'t pass linting so we\'d want:``` json  "test": "npm run test:unit && npm run test:lint".```', 'ahh good catch. thanks kyle!', 'aslakhellesoy yes. i was thinking about that. there are not many prs at the moment. i guess we could do it ourselves (copy the config files. run `eslint --fix` and voila).', 'what if you just ignore the error (this does not affect any critical components anyway) and continue with testing?imurchie why wda inspector requires appium eslint config module to be installed?', 'cbornet : fyi. there are some eslint errors', 'enable react/prop-types eslint rule; add missing proptypes. this adds an eslint rule requiring everyone to specify `proptypes` for each react component.specifying prop types adds run-time prop validation that helps locate and eliminate bugs. this checking is only done in development; the code is stripped in production builds.we were really inconsistent in our use of specifying them. so adding this rule will make sure we always specify prop types going forward.', '> this branch has conflicts that must be resolvedglhf rebasing', ':+1:']