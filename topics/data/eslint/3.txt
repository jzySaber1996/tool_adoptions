['eslint config: allow unused args. so that `function(a. b) { return a + 1; }` is allowed.', '> so that `function(a. b) { return a + 1; }` is allowed.where do we want this?  tests?', "it's coming.", 'ok. but note that the first one could be replaced by ``` jsreduceby(inc. 0);```and the second one should not trigger this error. since it uses a parameter later in the order than the unused one.', "yeah. let's ignore it and get rid of the `clean` script.  we shouldn't need to put it in `.eslintignore` because we explicitly specify which paths are to be linted. right?", 'added coverage to .npmignore (it was already in .gitignore). removed clean script.you are right. we do specify paths explicitly for eslint. so no worries there.', 'spriterenderer - fix eslint max-len usage', 'flomotlik certainly', "great. we'll be sharing more info about the future of serverless over the next weeks. please feel free to jump in anywhere you like and where it makes sense for you in terms of feedback or code. happy to have you!", 'capitalize all comments in eslint react.js', "i don't think we need to be that pedantic about comments. but sure. why not.", 'alex1990 the default is for the entire project. which is to only allow dependencies. the proper solution is to make a `.eslintrc` in your "test" folder. that overrides the rule to allow devdependencies also.', 'okay. so i must create two `.eslintrc` files.', "no matter what. you'll have to use eslint v2 with eslint-config-airbnb. until #936 is resolved.", "sure - i brought this up because these weren't explicitly set to `false` in the config. which seemed like a potential oversight. and because eslint-config-fbjs was disabling this rule because they wanted to use this pattern.", "great. that seems to work fine for me as well. let's update it to use that - both here and in `eslint-config-airbnb-base`", 'jglover update in-place please :-) it would also be ideal to use git locally and rebase it down to one commit. rather than using the web ui. (also. it still needs to update the `eslint-config-airbnb-base` readme)', "updated readme for eslint-config-airbnb & eslint-config-airbnb-base. relates to #970 added subshell to usage commands and converted samples to the three backtick markdown syntax with language specifier for highlighting. this fixes an issue where zsh (and potentially other shells) don't execute the commands properly because of a missing semicolon after variable declaration.had to change some of the wording because if you embed a code block under a numbered list item without text on the same line as the number. markdown gets upset and drops the list formatting.", 'thanks!', 'can you provide the output of `npm install` and your linter command? is that command correctly an `npm run-script`. or are you incorrectly running a global `eslint`?', 'thank you for the awesome response time ljharb. it was atom / atom linter / linter-eslint returning the error. i was using an older globally installed eslint package. when i disabled "use global eslint installation" everything works fine', 'how to use either extends airbnb and mocha in eslint . i\'m new to eslintmy eslintrc.js> `module.exports = {`> `"extends": "airbnb".`> `"installedeslint": true.`> `"plugins": ["react". "mocha"]`> `};`question:when i try to lint a mocha unit test file. it shows \'describe\' is not defined. (no-undef)it seems like mocha plugin doesn\'t works.mocha plugin should add all of the mocha testing global variables.if i remove `"extends": "airbnb"` . then it will be fine.how can i use both or just  prevent it to lint mocha testing filesthank you. regard', 'if you want mocha globals pre-defined. you need `"env": { "mocha": true }` somewhere in your eslint config. adding the mocha plugin just provides rules that can be enabled - it doesn\'t set any configuration. i\'m assuming the mocha plugin documentation should tell you how to add your own config.', "amilajack i'm sure `eslint` would appreciate a bug report if you could figure out on which code that's erroring out.lukebennett since this guide does not yet recommend using `async`/`await`. nor generators. i don't think it's worth mentioning just yet. since `async/await` is now stage 4. hopefully `eslint` will support it soon - at which point. this incompatibility will go away.", 'which package - `eslint-config-airbnb`. or `eslint-config-airbnb-base`?', "yes. updating the base config is correct. please prefix your commit with `[eslint config] [base] [breaking]` if you can :-)i'm not sure which section would be more appropriate. but we can bikeshed that on the pr :-)", "the usual cause of this error is that your editor is using the global eslint instead of the local one - although the stack trace doesn't seem to indicate that.you may want to update to the latest eslint. eslint-config-airbnb. and eslint-plugin-react. but i'm not sure why your error is happening.", "this contains lots and lots of changes not related to the feature. i can't review all of that and find out which ones are style changes and feature changes. could you minimize the changes just to the feature and only that?for example: - don't update dependencies. only the ones you need. - don't change travis.yml- don't deactivate any eslint rules- don't change style or indentation nor reformat any object literal. - squash all commits into only those are not bad. just doesn't belong to this specific pr. you can send them with new prs. the more specific the pr. the better.", "this seems to be very much a semicolon vs no semicolon debate. and as suchi'd suggest it be a configurable option.  i work on dozens of projects withvarious teams. each with their own unique eslint config... and it'd begreat to use prettier among all of them. without imposing a huge rewrite toevery codebase to drop wrapped parens around a single arg.  the issueitself filed here has had the most feedback i've seen in such a long time.so many people have voiced their opinions. many probably first time githubusers.bottom line - **do you want a huge userbase using a fork of this project**(that has no reasonable belief to be secure or maintained) because youwon't add a few lines of code to configure it optionally?quite bizarre if you ask me.", 'lydell sorry for noise i put the issue in wrong project. it is related with eslint and prettier integration.', "basically using both `eslint-plugin-script-tags` and `eslint-plugin-prettier` together will yield the exact result that you're looking for. you should be able to test using the branch of that pull request.", 'i\'ve already tested `eslint-plugin-script-tags` + `eslint-plugin-prettier` and linting works. just eslint\'s auto-fix mode doesn\'t come into play like it does with normal `.js` files. that pull request turns on `--fix` mode for "processor" plugins (f.e. `eslint-plugin-script-tags`). which will make `eslint-plugin-prettier`\'s fixes automatically apply.', 'trusktr. this is nice! though i wish we did not had to rely on `eslint --fix` to "prettierize" vue files..', 'i considered that it might be ambiguous but eslint warns with `no-extra-semi`.', 'well. you should turn off that eslint rule :)', 'oh! you right. i probably missed it.i solve it using:```js/* eslint prettier/prettier: ["error". { trailingcomma: "es6" }] */```', 'i totally understand. the downside is that after prettier reformats xode. eslint can no longer throw on that formatting. i could run eslint both before and after prettier. with a different config for the first round to catch the possible-error formats. but that increases the time it takes.', 'but is it reasonable? if so. that would break both eslint and tslint checking.', "trusktr i tried your solution and it doesn't seem to work for me. eslint complains about line-breaks that an auto-fix don't solve. also. all the rules of `eslint-plugin-vue`that should be triggered in `template`are simply ignored.i would very much like an update on this issue and any pointer to where to start in order to help.", 'cc the eslint-plugin-prettier folks: not-an-aardvark zertosh', "azz mitermayer vjeux don't you think we should keep this flexible for compatibility with eslint-plugin-prettier's pragma option allowing arbitrary strings?i definitely see the advantage of keeping this to a known value so in the future option-values can be applied. i'm still worried about the existing adoption of eslint-plugin-prettier's arbitrary pragmas though.", "i don't suppose there's a way to force prettier to format according to eslint configurations without having to place `// prettier-ignore` inside my code?", 'i guess this could also be solved in a general way by using one of those automatic git hook installers adding a "run `npm install`/`yarn` if package.json or package-lock.json/yarn.lock has changed after `git pull`". that would also protect against `eslint --fix` resulting in the same issue.', "lydell thanks for the update. i'm new to prettier but having the option `eslintintegration: true` makes me expect prettier would respect any rules defined in the project specific .eslintrc? is that not the case?", "i'd love to see this implemented as well. you can technically achieve this with `eslint --fix` and `comma-style: ['warn'. 'first']` but i'd rather not see warnings in eslint for something that can be cleaned up with prettier.", '`eslintintegration: true` is a `prettier-vscode` setting to use `prettier-eslint` instead of `prettier`.', 'working on this i noticed sequelize eslint rules can benefit from a few extra rules.it might be useful to extend the  "eslint:recommended" rules which protect against using duplicate keys in objects and reassigning values to const among other things (those are the two i noticed that were missing).also i used the complexity rule to calculate the cyclic complexity of the methods ( but i\'m not sure if this is as important as the other rules)', "i actually had trouble importing the module with webpack. it complained that the brackets () are not expected where they are. my guess is that it's a strict eslint rule that disallows arrow functions for compatibility reasons - so yeah - blame it on ie ;-)", "also note that ci is failing - looks like your update to eslint caused it to become more strict. it was probably the react eslint preset. it's good that we updated it. but we need to get it passing again.i'd like to see the code fixes for that in a separate pr. we can merge that pr. then merge master into this pr. which should clear the way for ci to run normally here.", 'convert eslint to a shareable config. for abstraction!', "martijnrusschen flow is a lot like a linter. in that it doesn't affect the runtime behavior at all. but it does require more annotations than eslint. they can be in comments. but it's prettier when they're not. transpiling flow is as simple as removing the annotations. which we already seem to have babel configured to do.the way we're using it at work. we have webpack configured to run flow. but it continues even if flow finds errors. (so you'll see the type errors but they don't get in the way of running the code.) on our ci server. we do reject changes that fail to typecheck. though initially we didn't.another advantage of flow over typescript. is that react uses flow. so our users are more likely to be familiar with it.i added #1307 as a simple example.", "chalker did you use some custom script or eslint to log this? i'd like to add test rule so that it's not accidentally introduced in the future", "sidorares no. i don't have an eslint rule for that. sorry. and am not aware of any. it would be super-awesome if you would find one. though =).", "i'm a little confused why you'd need to call `createtables` if you know the tables exist. i have an application config setting that allows us to trigger table creation based off a flag or environment variable:```function maybecreatetables(config. callback) {  if (config.createtables) {    console.log('creating tables...'); // eslint-disable-line    return dynogels.createtables(callback);  }  return callback();}```if i've misunderstood the question then please let me know. thanks", "danez > it maybe even easier to adjust the typescript parser to have an option to output babel-compatible astso `ts + typescript-eslint-parser` is already a way to effectively take typescript source code and produce an estree ast.if i understand correctly. the work currently being done on babel + estree is around babel _outputting_ estree. but if it were possible to for babel to also consume estree as an option. then we potentially have a lot of the moving parts already...i don't yet know enough about babel to know how that relates to hzoo task list  in the description above", "jameshenry nearly.the work that is currently done is to have an option (or plugin) that enables babylon (the parser of babel) to output estree. this is so that other tools like eslint. react-docgen. basically everything that consumes estree asts to be able to drop in babylon and be able to support every spec that babylon supports.afaik there are no plans to use the estree mode within babel. as the changes that were made to the estree format are all valuable additions/changes and make it way easier to write plugins in babel. it would be nice to contribute them back to estree. but they don't allow/want any breaking change.", "danez the intention of the issue/discussion earlier was that i thought we could possibly have a `ts` plugin like with flow/jsx? and that the babel team wouldn't be the ones maintaining/creating it. but it would be like flow in that the flow team can make prs etc.and yes jameshenry already has done separate work via `typescript-eslint-parser` which uses the ts parser -> estree. this issue was about getting babylon itself to parse ts but maybe that's unnecessary?>  and instead focus more on making it more easy to extend.not sure what we can do there yet?", "not sure if moving 'my' submodules of express-pouchdb is a good idea. as they have separate test suites. more chances of travis breaking down accidentally (e.g. due to upstream bugs in mocha/eslint/babel etc.). and its runtime would increase too (although only marginally).but anyway. we can figure that out later. the order nolanlawson names sounds like a good start.", 'so the tests failed with a minor eslint. i pointed it out in the comments. i had a few small comments about the code style but otherwise its looking great. hopefully get a green run with that semi colon and i think it will be good to land', 'remove iou_suffix from orderbookutils.js and clean up serializedtypes.js. - remove iou_suffix from orderbookutils.js- change serialize function in serializedtypes.js (line 412) to accept values as well as amounts- clean up serializedtypes.js so it follows eslint rules', 'this is still "work in progress". maybe we should close this pull request until it\'s ready?', 'decouple the amount class from math performed on values. - remove iou_suffix from orderbookutils.js by using the correct currency and counterparty when available - create new values class that performs math without using the amount class - change serialize function in serializedtypes.js to accept values as well as amounts- clean up serializedtypes.js so it follows eslint rules', "looks like eslint didn't run. i'm not sure what happened. do you know?", 'update eslint', "looks like eslint didn't run?", "oh. guess there's nothing to run against. heh", "if we're mad keen we could ssh in i guess and run `npm run-script lint` :) ?  may as well just run it locally", 'ye', 'use parser: babel-eslint which supports facebook flow. fixes #395', 'clark800', 'madeline and i were planning on making this change too. lgtm', "i don't think babel-eslint is quite working as intended", 'updated once again:- in the amount class. this._value now stores an iou or xrp value- in iou and xrp value. this._value is now private- out bn implementation is now hidden (i removed the exposed bn constants in the amount class)', "the issue above is that babel-eslint doesn't understand flow's comment syntax. one way to address this is to inline the type annotations. though there is probably a better option.", "integrated clark800 's comments to make value.js an abstract base class and other fixes. let me know how it looks!", 'updated once again', 'updated to include the newest round of comments', 'updated with the two small fixes', 'lgtm!!', 'package.json: lint all .js files. this makes the linting process less prone to miss new (or evenexisting) files. ignoring specific file paths is delegated to the.eslintignore file in the root directory.i just noticed this. not sure why i had explicitly set files to lint to begin with..', 'are there no new errors thrown up? because this will lint the libraries.', '> because this will lint the libraries.which libraries?', 'williamboman /node_modules/*', "maxleiter eslint skips `node_modules` and `bower_components` by default. i don't even think you can override that. like. at all :p.", "yeah. i means client/libsdidn't notice you had them ignored already. looks good then. it shouldn't change anything for now. i think. but it's a good change to make.", ':+1: from me', "there's nothing here breaking. fixing a bug or introducing a new feature. everything is just using some new language features. i like this pr and don't think it's needed. it will open a discussion for us to discuss a potential style guide.> do we need to do refactoring separately (like this pr) or should we let it happen over time? i tend to think letting it happen over time will tend towards it not happening at all.i'll solve this problem in a couple minutes.> is there an es6 style guide for jquery? if not. we should define eslint rules for things like let vs const as they come up.not that i am aware of. but i believe it's a nice opportunity for us to see if we want to define our own. defining our own specific eslint rules. even if it's the same - or almost - of the jquery rules. is inevitable.", '> i am uncomfortable with the `.gitattributes` change. i think it may cause adverse side effects particularly on the release branch with minified javascript. based on my reading. it appears the correct solution is to set the attributes locally in your dev environment.i assume you mean by setting `core.autocrlf` but that is a global git configuration flag. not a per-repository one.> in terms of the copy files. can you provide some evidence that this is a generally accepted approach?i cannot. i just looked around for other people experiencing the same problems with unix specific commands and environment variable interpolation and determined what their solution was.', '> i am uncomfortable with the .gitattributes change. i think it may cause adverse side effects particularly on the release branch with minified javascript.if this is something that i can assist with testing. i am more than willing.', 'hi seanbright.while we appreciate the effort to make this work. we are not going to take this pr. you can clone the repo with `--config core.autocrlf=input` which will fix the crlf issue. additionally. you can compile sip.js using git bash on windows without adding further dev dependencies to our repo.we looked at other (bigger) projects on github to see what they were doing in regards to these things cross platform and they are not addressing it in this matter. as far as i can tell the recommended solutions are to clone with the config flag or change your core git config. as for the cp. the recommended solutions is to use git bash.', 'hey egreenmachine.was there anything done on your side to see if the `.gitattributes` change would actually have any negative impact on your release process or are you just assuming that it would?> as for the cp. the recommended solutions is to use git bash.recommended by whom?', 'we did not do any testing to see if the change would have a negative impact. my assumption currently is that there would be little to no impact. but it is not something that we need to do. the issue is really outside the scope of this project.it is a generally recommended approach for getting a unix like shell on pc. similar to the crlf issue. we believe that getting `cp` to work on a system is outside the scope of this project.', 'i tested the `--config core.autocrlf=input` flag on clone and that seemed to do the trick. the bug about using the `cp` command instead of a webpack plugin will just have to remain outstanding.> the issue is really outside the scope of this project.i am not sure that i consider build failures on non-unixy platforms "out of scope" for a project that assembles a handful of smaller text files into one larger text file - especially considering that every component of your build toolchain supports cross platform development. we\'ll just have to agree to disagree.', 'brunsy was closed to adjust the code to pass by eslint constraints.', 'travis hates my lack of adherence to linting - but eslint hated my code :(', "i was thinking particularly about how strict mode turns some errors that are normally silent (and therefore hard to chase down) into hard-errors. i'm pretty sure i lost an hour (or more) to exactly this when i was implementing the store api extension? can't fix that without a time-machine though! ;)i suspect part of the reason you've not seen the need is that you may be more familiar with javascript than i am - another reason is that you have your eslint settings quite strict. already catching a bunch of stuff that strict mode disallows.but i notice this change caused failed builds on travis and appveyor?", "ping paazmaya i don't know why but eslint configuration is totaly broken. can you help me ?", 'fixed eslint errors. updated changes and contributors', 'enable eslint `no-multiple-empty-lines`. also use eslint to auto-fix them.hpinkos this will probably cut out half your pr review comments :smile:', 'thanks mramato!', "fix(eslint): add some rule about jsx-curly-spacing. ne rabotali otstupy eslintmozhno bylo pisat' tak:```jsx<hello>{ firstname }</hello>;<hello>{firstname}</hello>;<hello>{  firstname}</hello>;```", '```npm install -g eslint-config-pedant```and change `airbnb` to `pedant` in package.json  here```  "eslintconfig": {    "parser": "babel-eslint".    "extends": "pedant".    "env": {```fix this problem.', "i use atom with react-boilerplate and don't have this problem.> note: if you installed eslint globally (using the -g flag) then you must also install eslint-config-pedant globally.> > a globally-installed instance of eslint can only use globally-installed eslint plugins. a locally-installed eslint can make use of both locally- and globally- installed eslint plugins.that `npm install -g eslint-config-pedant` works suggests that you have eslint installed globally. is that right? if so. you probably need to `npm uninstall -g eslint`. or `npm install -g ...` all the eslint related packages used in react-boilerplate.> may be let remove airbnb config? its config make more problem for developerswhile linting style is a matter preference. this project has standardized on airbnb and i don't see that changing. still. it's nice to have an example that shows how easy it is to change to pedant.thanks for sharing.", 'split compile / lint messages. hello. is there possible to output webpack and eslint error messages to separate screen sections? for example eslint to problems section. webpack to log. thx', 'my current design idea has been: use eslint preprossor plugin to convert the bpmn file into bpmn-moodle js and the. pass that js into eslint rules.', 'set is a good improvement. i prefer using this.mytask rather than "mytask" as eslint will find typos. could an eslint rule be added to prohibit anonymous functions in throttletask which would be the main danger here?', 'additionally we should study the eslint plugin architecture as they have been successful with theirs.', 'fix user settings store. conform to eslintbut more importantly. respect defaultvalues for getlocalsetting and getsyncedsetting', 'tidy up src/components/structures/* (conform eslint). ignore (for now)exploiting travis', 'bump eslint-plugin-jsx-a11y for peer dep', 'woot :cactus:', 'evergreen programming. bumped deps. added a eslintrc escape hatch for until we refactor a little bit.', 'bump more deps. yay. came to bump spawnteract. noticed we could do with an `eslint` bump.', "^^ that's mostly addressing linting (function repeated. fix path to messaging. remove unused imports. put eslint config back).", 'change from eslint-config-exchange-solutions to eslint-config-airbnb', ':shipit:', "my first question for you is. where are your unit tests?we also use editorconfig and eslint to ensure that the code is styled in a manner that is easily read and that it is consistent.  from you command line. you can run `npm run lint` to get a detailed output of any issues after running `npm install`.once you add the appropriate tests to the `/test/jira-tests.js` file (and ensure they pass with `npm run test` command). please squash your commits to one commit.  i will review this pull request again and if it's all good i will have no trouble bringing this in and getting it released for you.  my apologies. i had meant to get a contribution guide written up last week for this repo. but i haven't had the time.", "this project is just a set of json files and as such having large packages like eslint as a peer ep isn't a good fit. if this package were to be an actual linter or lint runner that might be a consideration.", 'tested using `eslint3` and works with no adjustments.', "hm. by switching forward slashes for backwards slashes. doesn't this break things on unix in favour of working on windows?  or is there some voodoo happening to make it work on unix too that i'm missing?also. i'm not keen on some of the formatting changes here (or mixing them together with the functional bit of the commit) - the long lines have been deliberately broken up in places for aesthetic clarity.  (or has eslint bullied you into this?)", 'fix eslint error. fix eslint error in social.state.js and social.state.ts', 'fix eslint error. fix eslint error in social.state.js', 'eslint is being a pain but tests pass. merging.', 'implement missing translations triggered by eslint rule. cc mitsuhiko dcramer']