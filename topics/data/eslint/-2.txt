["check out eslint. after trying all of 'em. that's where several projects i work on have ended up.", 'yeah eslint also does the trick.. anything other than quotes you had in mind dasilvacontin?although i feel most linters do the basic stuff equally well. some are more suiteable for specific things and custom styles.', "glad you guys mentioned eslint. it's the one i had in mind. :)more things:`writer.prototype._rawvalue = function(token) {`vs`mustache.parse = function (template. tags) {`what are your thoughts about `standard`?", "i'm going to close this for now - it would be inappropriate for a plugin or shared config not to have a software-level dependency on the thing it's configuring or plugging into.", 'eslint-react was published yesterday :)', 'how to allow `console.log()` in .eslint?. how to allow `console.log()` in .eslint?i tried``` js"rules": {    "comma-dangle": 0.    "no-console": 2  }```but don\'t work.', 'thearabbit please read the `eslint` docs for more information.', 'personally i don\'t find it visually cluttering to have the rules present. nor the word "eslint" or "jscs" - and in fact i might be grepping through all "eslint" instances in the doc if i wanted to review things.', "> instead of typing out the whole url. the issue number can be referenced with just `[#748](airbnb/javascript#748)` - let's do that.> > for all the eslint rules. let's use named footnotes to link to them (the rule name is ideal) rather than typing the long urls inline (and likely duplicating them as well)added something like footnotes and linked to them and shortened the links to issues.", "hi ljharb -- thanks for the quick reply. upon further digging it looks like the issue might have been within `eslint` itself. since the airbnb code isn't referenced at all in the stack trace. super strange. sorry for the hassle!", "i'm going to close this for now. then - please feel free to link it to an eslint issue if one is filed", 'according to the eslint docs. setting the "vars" option should still warn about unused local vars - it seems that error is correct. and that var is unused. meaning that line could be deleted and your program would work the same.', "artptr it's for both. but `eslint` runs with node. and assumes your files are run with node. you should be using browserify or the like to wrap your files anyway such that nothing in your browser runs directly in the global scope.", "right - this isn't a bug. because in 2016 everything should be run in a node context. and only after running through browserify/webpack should it be shipped to a browser.you're certainly free to override the env settings in your eslint config. however!", "this might be an issue with `gulp-eslint` - what's your `npm ls` look like?", "nvm. it's a eslint error.", 'thanks. could you link to the issue on babel-eslint?', "i'm also getting this error using plain eslint. commenting out the 'no-labels' line from rules/best-practices.js suppresses the error as a temp workaround.", 'you should reference the eslint rule (which in this case is also `react/jsx-no-bind`).', "thanks - this isn't in the guide. so could we add a section about it that references the eslint rule?", 'object spread. are you using object spread? i had to add:``` js  "parseroptions": {      "ecmafeatures": {          "experimentalobjectrestspread": true      }  }```to my eslintrc to have it working. thanks', 'but we are using es7 static properties now. and eslint still complains about it!', 'fix react/prefer-stateless-function link in eslint changelog. pretty straight forward as the headline already describes this pr.', 'tomasz-szymanek that\'s something you\'ll need to enable in your own eslint config - feel free to file an issue on eslint\'s repo if you\'re having trouble. (you probably need the "babel-eslint" parser)', "i suggested solution in sibling issue #588. but will duplicate it here:i'm suggesting to eslint-config-airbnb in three packages:- `/base` will become `eslint-config-airbnb` with removed `/legacy` inside- `/legacy` will become `eslint-config-airbnb-legacy`- `eslint` will become `eslint-config-airbnb-react`. extended by `eslint-config-airbnb` with `eslint-plugin-react` in deps. (not sure eslint will pickup `eslint-plugin-react` from here. but it should)so every consumer will get proper amount of rules and deps", '`eslint-config-airbnb` will always contain react. since it will always reflect what airbnb uses.', "ljharb thats fine. then just add `eslint-plugin-react` to deps.but please make reactjs-agnostic config for pure nodejs consumers and name it like `eslint-config-airbnb-base`.my case is that i'm developing pure commonjs modules and i would like to use airbnb config. but i dont need react specific rules and i believe i'm not alone", 'ljharb thats great. not quite sure how that will work with eslint naming convention but if it will work out pls go ahead', 'switch jshint to eslint in frontend. eslint has more plugins (for angular for instance) and better es6 support than jshint', "lint remaining backend files. the lint command in package.json is updated so that the eslint runs withbackend as cwd. this ensures that it loads the correct .eslintignoretemplates in the generate folder are ignored since they're not strictlypart of the backend. but templates for user projects.also. one lint error remains. but it's there because the feature isstill broken so i figured it serves as a nice reminder to fix thefeature.", 'that is an error from eslint. not from babel-loader. your linter config has likely not enabled support for es 6 modules.', "it would be nice to have a eslint: babel: for errorsbut yeah since it has `1:2 error` it's definetely eslint", "i realized class properties were missing their type annotation (it's incredibly how easy it is to miss such details when there are format changes as well) so this pr now also depends on eslint/typescript-eslint-parser#191", 'all prs to typescript-eslint-parser have now been merged and the tests are now passing!i am working on a new batch of tests but that will require some more prs upstream so i can delay those to another pr if you prefer.to help review i have avoided squashing the commits but when you feel fine i can do so. i would like to ask for ideas on a better commit message though :)', "it's actually looking like integrating ts support will be pretty nice. `typescript-eslint-parser` does a great job of translating the ast and with very small changes in prettier jameshenry was able to parse all the current js tests with the typescript parser in pr #915 for ts specific syntax. i have an initial pr open that start that work #1033. again the changes are small and it's mostly just wiring up ts specific nodes to already existing code.typescript do have a lot of strange syntax but most of it is small and contained and do not effect the formatting very much. it will of course require some work and take a few iterations to become usable in real projects but it can absolutely be done and maintained.", '> so maybe this could be done by running eslint --fixnever mind. i just saw that this rule is not auto-fixable.', "yeah. unfortunately we're not going to get into rewriting the ast. sorry! that eslint looks good and should tell you where to need to cleanup.", '> that eslint looks good and should tell you where to need to cleanup.  fair enough. thanks.', "i find ```jsconst value = condition1  ? value1  : condition2    ? value2    : condition3      ? value3      : value4;```to be easier to follow.of course. i haven't written a nested ternary for a couple of years (eslint would tell me off). so this doesn't really impact me", "the basic one is when you embed a long url as a string that's a lot longer than 80 chars. people really should not be using the max-len eslint rule for prettier. you won't be able to do anything about it. but you shouldn't care! there's not much gain in being so strict about literally less than the max line length. and in fact hurts readability in some cases.this is another case where i think it will hurt readability. but i can't give you a concrete example until i use it and hit it in real-world code. other rare cases are when you are really indented and prettier just can't break up anything else (a long variable name just goes over). ideally you wouldn't be that indented. but sometimes it happens and it's ok.again. i really think we should recommend turning of the max-len rule with prettier.", "while `stylefmt` is amazing. it is an addon to stylelint. kinda like eslint and its autofixing in 2 separate projects.one thing i really like about prettier is that it's very opinionated. sharable configs works great in eslint as well (look at the ridiculous popularity of airbnb's config (over 50k stars compared to eslint proper's 7k...)). but prettier still improved vastly over that concept by enforcing consistency all over.not saying prettier should do css stuff. but i'd prefer if current `stylefmt` was just `stylelint --fix`. and `stylefmt` itself became more like prettier then a frankenstein prettier-style which invokes both could be born. like lydell hints to above.", 'just a side-note: prettier is removing the inner parentheses also. which causes an eslint "no-mixed-operators" error on my setup.', 'robwise i\'ve bumped into performance issues stacking prettier with eslint --fix. so today i\'m just using eslint. while my mac holds up well and i don\'t really "feel" sluggish while typing in vim (as i\'m sure no one does with current macs) -- cpu does spike. the laptop heats up. and battery drains much faster.today. i\'m using neoformat/ale with vim using `eslint_d` that spawns only once (like proposed here) and that results in lightning fast lints. and code formats. out of the lot of the editors i use (vscode. atom. vim) - vim will take up the least amount of cpu and battery. although it does all integrations out of javascript land (unlike atom. for example).i think using one `server` process or at least supporting that mode is a lesson learned for many ide architectures by now. and i would personally welcome it even though there\'s no real \'proof\' of lack of performance.', "don't unquote reserved words used as object keys. prettier removes unnecessary quotes from object keys.unfortunately. it also removes quotes that eslint deems necessary.a typical example is this:```<div  style={{    float: 'left'.  }}/>```i have not witnessed this to actually break anything. but i think it would at least be good practise to preserve / add quotes around reserved words used as object keys.", "that's only an issue in es3 envs (ie8 and older). you should adjust you linting. and if you really need it to be quoted. make babel add the quotes", "i'm not a collaborator here. just a user like you  what prettier does here is aligning the closing brace to where the opening brace comes from (`options.trigger.split(' ').filter(trigger => {`) instead of the opening `?` in the ternary. i think that prettier's current behavior correct. while eslint thinks it should align with the `?`.this looks like eslint/eslint#6606. so i think you either will have to disable the eslint rule (which makes sense in a prettier context) or add `// prettier-ignore` above it so prettier leaves it alone.or see if the maintainers agrees with you that the current behavior is wrong.", "it's not a bug for me. that code is not serious and is totally ridiculous. you shoul separate it into separate functions and can be banned with 2 eslint rules (im calling it no nested hell)", '`eslint-disable-line` does not work well with prettier. we are inherently going to move around your code. where should we put it if we end up breaking that expression across multiple lines?`eslint-disable-next-line` usually works pretty well. so you should use that instead.', 'agreed. closing this as this it out of scope and more of an eslint issue.', "it looks strange to me too. like it's floating and not clear what it's attached to. you shouldn't be using any eslint formatting rules with prettier. eslint formatting failures don't really have any bearing on our decisions. we do try to look at popular styles like airbnb to inform our decisions. but that's it.closing as we're not going to change it unless there is a lot of noise from the community to do so.", "prettier should work to make code readable and consistent for humans. not tools. can't people needing the quotes just add `// prettier-ignore`? or if prettier is changed. at least behind an option. i don't want to re-add eslint rules i removed when i started using prettier", 'add eslint support.. correct the code so it stays consistent throughout the file.remove the nested ternary operators.simplify some sequential multiple `if` statements.you can now run `npm run lint` to check for formatting errors.', "complete the es6 and eslint support.. add array destructuring. arrow functions and the spread operator to improve readability.add multiple eslint rules (most of them based on the airbnb rules) while keeping the initial code style 'spirit' as much as possible. and correct the code accordingly.add an `isundefined()` helper function.extract the nested function `truncatezeros()`.change `let` variables to `const` wherever possible.correct unneeded character in the `autoget()` regex.clean ide-specific comments.", 'code style - airbnb javascript style guide. airbnb javascript style guide is probably the most used eslint javascript code style. i would like to switch react calendar timeline to this style. what do you guys think. would someone be willing to help to switch it? since contributors are used to this code style i think it helps the community.', 'webpack is only responsible for the first line: `warning in ...`.the remaining message is generated by the eslint-loader. maybe you can pass a custom reporter there.', 'linter cleanup and some bug fixes found during integration. - added the `jasmine` environment to .eslintrc rather than listing every jasmine global- removed the `settings` param from the `pagebase` and `pagefilebase` constructors.  adjusted the subclasses accordingly- removed page.logpageview() as it is eventually going to be implemented in a `pageevents` module- other miscellaneous linter adjustments', 'upgrade eslint and jasmine-ajax. test and syntax fixes. _reviewed by_: aaronmars _summary_:- eslint upgrade- test and syntax fixes', 'eslint broken on master. ```1) cliengine executeontext() should report oneverbose:                     | message when using local cwd .eslintrc:verbose:                     |      typeerror: path must be a string. received```looks related to #80', 'fixed!', 'use eslint. remove jshint', 'lgtm', 'fix(eslint): inconsistent spacing before function parentheses. defines `space-before-function-paren` eslint rule and changes files accordingly.resolves #1605', 'coverage increased.. smh', 'yeah i was lazy to figure out how to configure `eslint -fix` to catch correct config files and read correct directories/files. but i wrote a quick gulp task instead. ;-) essentially just `fix:true` option in our `eslint` task + some small fiddling to get it save changes over old files.', 'would you like to share you gulp task? i thought about doing the same yesterday :)', "isn't `eslint-config-airbnb` used as part of applying the rules through eslint?", 'mleanos i had to update atom. which somehow was stuck with updating itself. so i had to remove it and re-install. now it works how ever the rule is.now it works fine. but i would still change that `error` to `2` just for consistency with other rules. or change everything else to string codes as well (they seem to use only strings now at eslint docs).', "linting. **nb**: we will have to talk the linter rules when we go through our style again. since some of them may not comply with the style we have chosen. i went ahead and disabled those that we can't use (e.g. rule disabling usage of `now`). or that don't match our chosen style.we can always re-enable them later.### added- enforce eslint rules at build time- enforce solium rules at build time### changed- enable some ava testfiles that were ignored- restructure a bit to use the more modular files in `utils/`- update solium linter rules to comply with our style- make devchain script its own file. and run things more syncronously### fixed- linter errors in all js files- linter errors in all solidity files- fix #274 - fix sometimes-failing build when db does not exist- fix some missing or incorrect docstrings", 'fix new eslint errors. fixes eslint errors detected in pr #244. this should allow that pull request to be merged.i have just removed the useless escapes reported in the failed build of the other pull request.', 'build: use eslint instead of jshint/jscs. work in progress: just fixing minor issues at this point.todos:- [x] fix indentation issues- [x] use `eslint-disable-next-line` comments instead of `eslint-disable-line` comments', 'tomusdrw can we close this one?', 'yes.  i think it will done as a part of jacogr parity-js project.', 'jacogr `eslint` still complains about missing curly braces after `if`s. i thought i put this up for discussion.', "updated linting rules. in an attempt to start cleaning up and standardizing draws code. i've adopted the mapbox-gl-js eslint rules with a few small changes.davidtheclark", 'sounds like a good idea.', 'eslint runs inconsistently. we have discovered that eslint is reporting different results on different systems:- with ebachoura and yshin4. who are on windows 10. eslint reports errors as expected- with eileenchoe. who is on macos. eslint appears to run but does not report any errors- with travis. eslint is reporting a dependency error for a module that is listed as an eslint dependencywe need to resolve this so that everyone gets the right linting output.', 'dondi will try this on his development setup and report back.', 'eileenchoe will check her eslint configurations to see if one might be unexpectedly interfering with another.', 'dondi asked me to run some linting tests and the results are a bit odd.so i started on dondi\'s branch and i ran the linter and found no errors. i was surprised and i checked my own branch and found the same result. no linting errors.this was really weird because just a few days ago i ran the tests and got 321 linting errors. i realized that another thing that changed in the last few days was my bash application. i just switched to bash on ubuntu on windows. both of the "npm run lint"s were done in this bash on windows and they returned 0 linting errors. but when i switched back to git bash and ran the linter. there was 321 errors for both my branch and dondi\'s. hope this helps!', 'ebachoura as for the weird ubuntu bash behavior. try to re-pull that repo then re-checkout `dondi`. then report back when you can. thanks!', '_coverage/_ has been added to the _.eslintignore_ list. for anyone trying this out. make sure to pull `dondi` again to make sure that you get this update.', 'dondi running `npm run lint` on the `dondi` branch on my machine yields 322 errors. which is consistent with what you are getting and what travis is getting.', 'ok. thanks eileenchoe! so ebachoura and yshin4. let\'s see if we can get consistency for you guys too. on the `dondi` branch. ebachoura. make sure that your repository on ubuntu bash is freshly pulled and on the `dondi` branch. yshin4. do the same on whatever command line you use regularly.we appear to be converging on 322 linting errors. once we\'re all consistent. i can merge this with `beta`. to minimize conflicts. let\'s temporarily accept these failed builds and merge `beta` into our working branches. one or more of us can do "lint-fix-only" commits on `beta`. which the others would then merge into their branches a little at a time.then we can all be _really_ happy when we go green again!', "i pulled dondi branch and ran lint and i got 322 linting errors. so it looks like i am on board with eileen. dondi. and travis. yshin4 could you pull dondi's branch and then run lint and post how many errors you get.", 'i pulled dondi branch and linter gave me 322 errors as well.', 'also i just realized. ebachoura you might want to audit the original clone where you were seeing the discrepant numbers. you might have had lingering commits or other files that were skewing the results. it might be best to manually transfer any work that you knew you were doing into a fresh clone.', 'ok. this has been merged with `beta`; no release for this one because it only affects how listing is checked. however. travis does report errors now so "linting-only" fixes will be desirable going forward. i\'ll write up a new issue for that.', 'the follow-up issue is #538; also. now is a good time to pull and merge `beta` into our individual branches.', "however. upon looking at the _edge-tests_ files that got added. i don't see the one from her comment above. so yshin4 if you could please issue a pull request with that file. that would be great. make sure to merge `beta` because that has your updates plus the eslint changes.", 'hey danmakenoise - so sorry for the late response! everything outlined above sounds great. sounds like this component will load in the external js files and just keep a reference to the player no? one request - is it possible to use prettier with eslint config? i would be happy to help set that up.', 'add `esprint run` command. this pr adds an `esprint run` command. which just runs parallelized eslint without standing up a background server that watches for changes.', 'benchmark esprint performance vs. eslint. we should have a suite of benchmarks in place to have a baseline and keep track of perf regressions.', "update install script to handle file-linked eslint dependencies. as title. the dependency-install script would throw errors when running into `file:`-linked dependencies in the specified `package.json`. this patch runs `npm link` for those packages. so that we get the dependencies into esprint's `node_modules`", 'doug-wade - looks like some conflicts have crept in here.looks like there are also still a few non-leading tabs.', 'dooouuuugggg.....', 'simple tests. more `eslint` and `nsp` coverage.', 'this is just eslint/nsp.  merging.', 'lidawang - sounds like your `gulp-eslint` is out of date.  try an `npm update` in your repo root.', "there is a new eslint rule i tried to adhere by. but while the idea is good the rule is quite annoying. i'll reevaluate soon. and then move the ones that shouldn't be in the containers folder anyway. i just haven't come around to updating that! thanks for the reminder!", 'awesome work. thanks so much! a few small nitpicks:- in line with the other configs. could you move the jscs config to the [`jscsconfig` variable]( in the `package.json`?- the `internals` folder should be linted- lets have a `lint:jscs` and a `lint:eslint` script which are combined in the `lint:js` script like so: `npm run lint:eslint && npm run lint:jscs`thanks so much again!', "update: it seems like this is caused by linting errors in the .js files which cause the tests to fail (as they probably should). however the linting errors refer to the `internals/*` part of the app which shouldn't be touched. i've tried defining an `.eslintrc` file but ran into more errors with linting. is it possible to provide an `.eslintrc` file which specifies the rules in the project in order to prevent this from happening?", "sorry. i've missed this tiny detail that the test command is targeting my global eslint installation instead of the local one. thanks for pointing that out. is it intentional that the commands target the global node packages? or is it a windows bug? i guess if your answer to the first question is no then the second answer is automatically yes and i will start figuring out how to get the local modules to run under windows instead.", 'it is perfectly valid arrow function expression and `eslint` does not complain.what linter do you use? breaking of what rule is it reporting?', 'jlomas-stripe try `eslint --init` ;)', '> i started another branch in ob-eslint-standard using the "standard" linting rules. then ran eslint --fix to autocorrect errors. there were still a few things that i needed to fix manually. though nothing too painful (mostly handling some ignored errors).>> the diff is pretty painful to read because those rules remove the semicolon at the end of each line. but i quite like the result.nice! this looks fine to me. but admittedly i don\'t care enough about the language to have developed any passionate beliefs.i was a little surprised to hear that the standard ruleset eliminated semicolons though! i don\'t mind reading code without them. but i\'d always thought that the true js disciples loved them. it might be worth running this by at least a couple people with a stronger stance on this stuff. maybe jlomas-stripe or alex-stripe.', 'closing in favor of #189 which includes this change and also the changes to make eslint happy', "eslint touchups. lint rolling.we need to investigate `.setrepresentedfilename()` and other os specific functions to know whether we have to check on them on other oses. as suggested by carreau.jdfreder - when you are able to get to your linux box later. can you pop open an electron window. open the dev console and run:```require('remote').getcurrentwindow().setrepresentedfilename```", 'will do mildu', ':cake: :fireworks:', '/cc willingc all set on the grumpy eslint!', 'in the `.eslintignore` file can you also ignore the lib folder since the compiled babel output would go there?', 'we have replaced jshint by eslint. its much easier to setup and to configure. so i vote +1', 'i ran eslint in two sample apps (with/without translation) and now there should be no more issues now. thanks for the advices !', "replace jshint by eslint with angular plugin.. this is a first step with many errors reported as our code base is rather heterogeneous regarding style and also wmarques  is currently modifying our code to follow john papa's guidelines. so i did not want to create merge conflicts with his work.there are still few jshint comments to be removed or replaced by eslint equivalents.ref #2972", 'there is no more notification on error :(', 'jshinterrorreporter.js was for jshint to do custom error reporting.my query was removal of this `.pipe(plumber({errorhandler: handleerrors}))`this will show a notification for error', 'my mistake. i added the line and tested it.for now. eslint task is not part of any other task. it could be part of watch but it could be annoying or maybe it could be part of test.', 'lets merge and improve later. all the john papa style stuff are done so now this should give less errors', 'now there are couple of errors im gonna try and fix them', 'ok. i got similar notification except that it showed only error text and not the source file which is what the jshinterrorreporter was doing i guess.', 'agree with gmarziou. i prefer run `gulp eslint` once i\'ve finished editing all my files. for "live linting" we can use an eslint plugin in atom.', 'ok lets remove eslint from serve task for now', 'removing unused gulp imports and fix eslint errors. while working on an application without protractor. i saw that eslint throwed some errors about unused imports. so i removed the yargs import if the application is not using protractor and two other eslint errors in the same time (one indent and one "use angular.isdefined instead of !== undefined").i also removed the gulp-util from package.json if the app doesn\'t use protractor.', "2wheelcoder oh. i was able to repro this. accidentally. i know what's going on and it's related to webpack 2 itself. in webpack 2. all loaders have to have full names. i.e. `-loader` isn't added automatically. in your project i found at least 2 such loaders where you don't add that prefix: `url` and `eslint`. if you will add it. then everything magically should start working. that's so weird behavior and i'll try to resolve it on webpack side. thanks for reporting this!", 'adds eslint to match the model code with the coding standard of the user. adds option camelcaseforfilename to make the model file name camel case.adds option eslint to match the model code with the coding standard of the user.', 'jiaxingzheng. thanks for your pr! by analyzing the history of the files in this pull request. we identified durango. matchdav and strumwolf to be potential reviewers.']