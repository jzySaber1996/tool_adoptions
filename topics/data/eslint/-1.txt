['feature eslint. this is pr #127. rebased and addressing comments in the pr.closes #127', "thank you!let's wait a couple of days for meriemkhelifi to have the chance to update his pr.btw. removing the quotes flag also means not fixing the quotes in the source files. there are a couple of places (in the tests) where i've been inconsistent. but i can fix those myself.", '`eslint:recommended` is a pragmatic set of "best practices" that it applies automatically. all of the recommended rules are conventions adopted by the community. based on your comments in #127. i think it\'s something you\'d could support with very little arm twisting. thats compared to standard. which is much more opinionated. and has opinions you disagree with.if you\'ll go to travis-ci.org and enable it for your repo. someone else might create a pr that makes the changes necessary in this repo. hint. hint.', "yeap. maybe you're right. i just wanted to ensure that my comment in other related pr wasn't lost.", "it's been a couple days. if this pr were merged. and some indication that the repo owner had enabled travis for this repo. then another pr that enables automatic running of continuous integration tests. complete with lint and style testing. might appear.", "yes. i enabled travis on sunday just after you've mentioned it", 'fix linting errors in lenspath test. this fixes linting errors in lenspath introduced through the new eslint rules.', "i'd suggest to use `--reset` flag in eslint and just enumerate all rules you have. otherwise eslint could add rules that's on by default. and you will constantly have to disable them every time eslint is released.the most useful rules are `no-console`. `no-debugger`. `no-undef`. `no-shadow`. `no-sync`.ps: you can also use yaml format for an eslint config file - it's easier to manage it by hand than json", "+1 looks good to me. can you turn this rule into an error in the .eslintrc file? (and while you're at it. turn the curly rule into an error as well?)", "update eslintrc file to no longer allow past errors. emkay nylen mikeal does this new rule list work? i'm not sure where we ended up re: #1156 and one-line if-statements. but it sounds like it's not possible to allow only those", ":+1: looks good to me.  created #1163 for travis failure.i'll merge this tomorrow if no one objects or beats me to it.", ':+1:', 'removed old jshint comments; replaced jshint in contributing.md with .... ...eslint', 'thanks for the cleanup!', 'prefer const. - added eslint rule prefer-const- used eslint --fix to fix most warnings. changed the others manually', 'nice :+1:', "oh ya. will check if theres also a eslint rule for the curly braces.think the for ... const comes from eslint autofix. at least i hope i didn't do that :) will check later. only got my phone at the moment.", 'btw. what do you think about a lint-fix npm script?', "+1 for the eslintrc englercj (no github reactions in the phn...) but without the comments maybe bc it's not valid json.", 'might also be worth thinking about a seperated eslint package that all plugins should include also.', "> but without the comments maybe bc it's not valid json.eslintrc.json files allow comments. its fine i promise :)> might also be worth thinking about a seperated eslint package that all plugins should include also.we don't want to enforce plugin authors to use any style. 1st-party plugins will be in our repo. and 3rd-party plugins can look however their authors want.", 'initiating operation merge conflicts. go go go', 'eslint cleanup. added a more specific and restrictive eslint file. and ran `--fix` on source and tests.includes some good stuff like:- consistent spacing- removing trailing newlines- enforcing a newline at end of file- use template strings instead of concatenation- enforcing consistent comment formats- validates jsdoc- ensures there is always a trailing comma for multi-line objects/arrays (helps cleanup diffs)still more to do until there are no errors. but this is a start. i would like to fix as much of this as is possible _before_ i branch the `next` branch to minimize conflicts.when i left off. here are the sections i had left to do:- [x] core- [x] extract- [x] extras- [x] filters- [x] interaction- [x] loaders- [x] mesh- [x] particles', "englercj you're insane for attempting this! but i'm totally behind it. let me know if you want any help.", 'thats a lot :) same here. would also contribute sth. but not sure how to contribute to a pr.', 'fix linting issues. ### fixed- minor eslint errors', 'oops. we were editing tags at the same time', 'rebased. i hope this fixes the eslint failures', 'ok. linting passes. tests pass. and i squashed into a single commit. phew!', "englercj epic pr! overall. great work and brings a lot of sanity to the code style and conforms everything. love that it's eslint enforced. reworking of the imports and exports is nice. especially when importing consts. i didn't get to go through all of it. but left a few comments/questions.", '.', 'rebased to include the changes in dev.', "adding npm command 'lintfix'. i find it extremely useful to have an easy to access npm command to do the automatic eslint fixes", 'do we need this at all. or can we just use `npm run lint -- --fix`?', "you don't _need_ it. but you could argue the visibility to devs is good that it's possible. and. in my ultimate laziness. this ensures it shows up in webstorm as an npm command i can just double click :p", 'weird not sure what this eslint error means?  351:48  error  missing function expression name  func-names', 'enhancement/ci. this adds travis-ci as the continuous integration tool. also fixes some eslint issues of no-unused-vars from object deconstruction.', 'updates readme.md. i created a similar plugin to jshint but it uses eslint plugin for linting the jscode.thanks', 'many thanks for doing this!i noticed that there are now a few entries in `dependencies` that are more build-time dependencies and so perhaps belong in `devdependencies`? (for example `babel-compile`. `eslint`. ...)', "if it helps as a starting point. my simplistic grepping just now found the following `dependencies` to be only used during test/build. so can be moved to `devdependencies`:```babel-compilebabel-eslintbabel-preset-taskclustereslint-config-taskclustereslint-plugin-taskclustermocha-eslintpulse-publishersource-map-supporttaskcluster-lib-apitaskcluster-lib-apptaskcluster-lib-monitortaskcluster-lib-testingtaskcluster-lib-validate```and the following don't appear to be used at all:```url-joinsuperagent-hawk```...though of course i guess there could be auto-importing magic going on (or things needed to satisfy `peerdependencies`).", 'hi nagaozen. thanks for the pr!unfortunately. it\'s breaking the travis build: the linter quits. can you fix it? cheers!```> eslint mustache.jsmustache.js  14:12  error  "mustache" is not defined  no-undef```', 'build: update config to use eslint 2', 'use eslint config', "> in the meantime. if you could attempt to fix the eslint errors that'd help a ton. npm test reports them locally too.sure.", "option to remove eslint react plugin. we enjoy the airbnb eslint config/rules for our es6 js code. but we don't use react. is there a way an option to remove the dependency on the react plugin?", 'fixed missing eslint heading', 'i believe this has been rebased', "softwarespot it's not on top of the latest master - 6671a55556e09b9f70924e9fd63e76c9e079fa5e", "you're installing eslint globally - you want to install it locally instead. and run it via `npm run-script`. global installs can't access other global installs.", "add some accessibility rules to the react style guide. i think there is a good opportunity to improve accessibility guidelines in this style guide. this pr takes the first steps in that direction by enabling a handful of rules from eslint-plugin-jsx-a11y and adding some text about these rules.there are more rules from this plugin that i would like to enable. but i'm going to leave that for another time.while i was at it. i switched the syntax highlighting on the codeblocks in the react style guide to highlight jsx better.", "awesome. other than my nonblocker comment. this lgtm. we've already queued up a few breaking changes since the last release. so this one can be bundled along with them.", 'cc evcohen', 'lencioni thanks for all of your help so far and let me know what other rules we can prioritize building out next.', "seb0zz then indentation might start to matter as well. either way. this repository is a tool and then there are other tools out there. as time goes on. these tools tend to get better. in recent years. they've been getting really good really fast.historically. there were no linters. then they came. but i couldn't configure them. afterwards. i could start configuring them. but then there was a problem with imposing certain things because the syntax would allow us all to introduce inconsistencies. today i'm using `babel-eslint` and when i lint. a small :palm_tree: is inflated and i look at it and i unleash the lint :dragon:. by 2020. my editor is probably going to be writing code straight into a linter. by 2030 linters will be writing most of our code and i can start doing something else in my life. i'd like to grow :tomato:.", 'added eslint-plugin-jsx-a11y to install script', 'thank you!', 'link to eslint.org instead of github where possible. in most cases we link to documentation on the eslint.org site instead ofon github. i found a couple of stragglers and decided to make things alittle more consistent.', 'this is great for the sake of consistency. i wonder tho if it would be better to link to specific shas on github? the docs could get out of sync with the rules.', "i don't think i quite follow your comment about linking to specific shas. wouldn't that get out of sync as the rules are updated?", "yeah. that's true - it would definitely get out of sync as eslint was updated _in the package_. but the key is that it wouldn't get out of sync as eslint _itself_ is updated.", 'thanks a lot', 'update config package readme. i missed a couple of things here when i added some eslint-plugin-import rules. i threw in a capitalization correction for free.', 'add eslint. add eslint.', '.', "fix jenkins tests. some quick and dirty fixes to get the jenkins tests passing.i hope to pretty this up a bit with the forthcoming multiple plugin & iam auth work.## what's changed?- use a different test database name for each `describe` block in `api.js`.- add `before` & `after` hooks in `plugin.js` to correctly setup test environment.- skip mock-only tests.- apply `eslint --fix`.", "add eslint to pbnj and other small cleanups. hello nicks. please review the following commits i made in branch 'nick-cleanup'.c6610ff88437aa42522c2fc14a1f077fa9f3eaf6 (2015-10-08 09:47:35 -0700)add eslint to pbnj and other small cleanupsr=nicksmanual testing=not manually tested", 'my ideal `.eslintrc.json` would look something like this:``` json{  "extends": "airbnb".  "rules": {    "func-names": [0].    "max-len": [2. 80].    "new-cap": [0].    "no-case-declarations": [2].    "no-confusing-arrow": [0].    "no-else-return": [0].    "no-multi-spaces": [0].    "no-param-reassign": [0].    "no-shadow": [0].    "no-use-before-define": [0].    "prefer-template": [0].    "space-before-function-paren": [2. "never"].    "strict": [2. "global"]  }}```', "thanks aaron. let's leave `category` static and use a static getter to reach it. they're used by other static methods within modifiers and it would get messy turning them into instance variables.looks like there are two parts to this: first is getting the new syntax in. then getting cyril's eslint stuff. here's how i propose we do this:pr1: aaron sends in new build rules and syntax for four files: accidental. stavenote. formatter. modifiercontext. let's try to get consensus for that subset and merge.pr2: cyril sends in eslint rules applied to the same files. and we'll try to work through that.after we agree on everything. lets migrate the rest of the files.thoughts?", "use eslint: accidental. formatter. stavenote. and modifiercontext. this is a wip. but i figured i'd open a pr if anyone wants to comment as i go.- [x] accidental.js- [x] modifiercontext.js- [x] stavenote.js- [x] formatter.js- [x] add eslint grunt task", "a lot of this looks really good. can't tell how much of this is machine translated. and how much you're doing by hand.", 'everything after and including `ab4a032` is done by hand.', "ok well. getting these files into a decent state is taking longer than i thought. i would suggest. when these 4 files are complete and agreed upon. that we run `lebab` (for arrow functions. let/const. shorthand properties) and `eslint --fix` on the entire codebase. that should be pretty safe. but the code will require a lot of manual edits and minor refactorings to get into as good of shape (relatively speaking) as the one's i'll be doing in this pr.", "any ideas on how we would migrate? one option would be to use both jshint and eslint. keeping a list of files that can be used with eslint and the remaining files use jshint. or we could disable lint errors from failing the build until we've run through the entire codebase.", "maybe start a wiki on instructions on running `lebab` and `eslint` and maybe some common gotchas or other hints to help migrate. and we can split the work. also. we don't have to go to the level of detail that you're going into right now (which is great. btw). we can improve it incrementally.so. send a pr with what you have now (with passing build and tests). and we'll hand maintain a list of files for eslint. between you. aaronmars (if he's interested). and me. even if we do 1-2 files a day each. we could have it all done in a week probably and get rid of jshint.", "great. thanks aaron. also paging mscuthbert and gristow incase they're interested :-)", "oh. i'm interested :-)  my experience from switching lint systems on a large project about two years ago would be to just make a big leap and switch the lint to eslint immediately. and get that in as a pr with an extremely minimal config setting that maybe just flags one thing. so we know it's working.  and get the documentation up to date to match the reality of how things are going.  then make successive pull requests that each enable one or two new settings and fix all the errors that come with them.the drawback is that there'll be a short-term period where our lint situation is worse than before. since we're not running tests that are even as stringent as what we had before.  if this repository were github.com/nasa/mars-rover or jarvis/artificial-heart. then that'd be a problem. but given that the stakes of the possibility of a global variable leaking or a line being too long are...not that high. it think the risk is worth saving the time.", 'oh yes;  happy to do anything to deprecate raphael.  :-)', 'wow. lots going on here. thanks. let me go through everything today.', "ok i'll take a look at that.", 'good to go!', 'wait. i think i may have screwed up here. brb.', 'yep. silly me just assumed that the regression tests would kick of a rebuild before running. everything looks great. merging!', 'run automatic transforms on entire codebase. results of running `lebab` safe transforms and `eslint --fix`the basic summary of the transforms:- var -> const/let- anonymous functions -> arrow functions- shorthand object properties- minor spacing tweaks- some indentation fixes- double quotes -> single quotes- trailing commas', 'provided the build passes and the regression tests pass without any changes. i think we can confidently merge this set of automatic changes at once.', 'thanks. all tests pass. and code looks way more consistent. merging.', "edit: ok.  looks like we can do it with master then!so. am i reading this right that i can do this?- claim a few files- checkout from silverwolf's `eslint-all` branch- fix eslint errors- send a pr to the branch above", 'lint: annotation. articulation. barnote. beam. bend. fix eslint errors for files listed in title.', 'looks good! thanks! merging.', 'which command and which package is? which software?', "why don't use gulp?", 'how is gulp useful? gulp is a build tool. not an ast transformer.', 'gulp instead grunt.', "given that vexflow's build steps are very simple and common. i don't see how using gulp would provide any advantage.", "finish fixing eslint problems. mainly just checking to see if the regression tests pass. since this is so large. i'll try chunking it up into multiple prs if it passes.", "hmmm for some reason the build isn't even starting.", 'ah. success!', "aaronjensen yeah. i'm using neoformat with prettier_d to speed things up a bit.now that i think about it. prettier_d might easily be replaced in this context by a combination of eslint_d. eslint-plugin-prettier. and eslint-config-prettier.", "same here.  the biggest hold up for us is this rule `arrow-parens`.  quite a few people use airbnb styleguide and lining up most stuff with that project would be awesome.  i've tried prettier-eslint but the performance of eslint --fix is not that good.", 'thank you azz for all of your work on this! i am getting back to full strength and will be able to help out with this effort once again (hopefully from next week).thank you for summarising the ast issues you encountered as part of this. i will make sure we come up with solutions for them in `typescript-eslint-parser`.', "only add parenthesis on ternaries inside of arrow functions if doesn't break. this was added in order to follow some eslint rule but it's only confusing when it doesn't break. when it breaks the indentation makes it clear what is happening and you don't need parenthesis.fixes #1379", 'outside of the eslint rule. looks like the output is not ideal. we should figure out a way to make it better.', 'add supertype tests and add tsabstractclassproperty. thanks for the fix on the parser side. soda0289 (eslint/typescript-eslint-parser#234)* super type fix: eslint/typescript-eslint-parser#242#1306. #1422', 'yay. thanks!do you have a sense of how close we are to being complete enough so that most typescript programs are able to be printed?', 'vjeux interfaces. modules. and enums are still missing i think. once those are done we should be printing _most_ of the syntax. then we can copy across the entire test suite from the typescript repo. see if any parse errors occur. there will likely be a number of bugs due to the (frankly _insane_) amount of syntax that typescript has. on top of an already syntax-heavy language.', 'thanks. sounds like a plan :)and yeah. the amount of syntax of js + es6 + flow + jsx + typescript is crazy :p', 'yeah. i keep stumbling into things as well `declare keyword`. `module block`. `enum member`...list goes on :smile:', "jameshenry > please could you clarify what you mean by:>> i have a problem parsing things in a module declarationsure. i was expecting the `classdeclaration` to either have a `modifiers` array containing keywords like the `tsmoduledeclaration` has or (since `classdeclaration` is an estree node so changing it is out of question) that the `tsnamespaceexportdeclaration` is just called `tsexportdeclaration` since it contains a class not a namespace (although the differences between `module`. `namespace` and `class` are arguably subtle).i wasn't trying to propose changing `typescript-eslint-parser` to conform to the typescript ast. sorry if that came across this way.maybe a class creates a `namespace` and thus the naming. it just confused me a little and i wanted to get the input of someone having a little bit more knowledge about the estree and typescript ast.", "> vjeux interfaces. modules. and enums are still missing i think. all in #1459 now. there gonna be a lot of warts since i skipped over pretty much all `modifiers` etc. but it should print. i'll try rerunning this over the typescript test suite.", 'i hate the idea of options in the formatter but i wish this lined up more with airbnb styleguide.  again eslint --fix does solve this but the performance is really bad.', "there are two important considerations that aren't being discussed that i want to ensure get considered as part of this proposal:- not all javascript projects use a `package.json`- if you want to share configurations. it is much easier to do so if you're passing around a prettier-specific file (ie. `.prettierrc`) than sharing a `package.json` that might have other project-specific stuff in it.for those reasons (plus the ones already mentioned) i'd petition to have configuration in a dedicated file rather than inside the `package.json`.i believe the problem of finding and caching the appropriate config is a problem that's already been solved by projects like `eslint` and `stylelint` and should be easily transferrable to `prettier`.", 'working on `value undefined is not a valid document` now. `typescript-eslint-parser` does not add the `instanceof` as an operator to `logicalexpression`.', '> typescript-eslint-parser does not add the instanceof as an operator to logicalexpressionsounds like a bug you should file (or pr) over there.', "sorry. i'm using prettier-eslint and an eslint rule was doing this.", "kirkstrobeck i made an update where```jsa => (a ? 'foo' : 'bar')```keeps its parenthesis but when it is expanded```jsa =>  a    ?  'foo'    : 'bar'```doesn't have them. the indentation makes it clear that it is an arrow function and not a comparison. but the eslint rule triggers anyway. erroneously in my opinion.", "good to know. unfortunately. i'm just a state-appointed mediator and would like to get you and `eslint` to the table to hash things out", 'update on `error: comment "*type" was not printed. please report this error!`this happens because comment cannot be attached to `typeparameter` node as a leading comment. because `typescript-eslint-parser` incorrectly calculates location of such nodes by including leading space. including comments. so that such comments are found to be enclosed by typeparameter node.issue filed eslint/typescript-eslint-parser#260pr created eslint/typescript-eslint-parser#259', "i started integrating `eslint-parser-typescript`'s master branch and fixing what it breaks. just so you know.", 'should we raise a bug on typescript-eslint-parser?', "josephfrazier very nice! i think it'll alleviate some pains around vim.still. to update on my set up: there's still no polite way to use prettier on vim (without thrashing cpu and lagging formats). looks like i can't use eslint for linting such as unused variables. etc.. and have prettier format code at the same time. so if i use `standard` rules for the former and prettier for the latter. it wouldn't work for some reason. i've tried all this with `prettier_d` and at some stage with `eslint_d`. i'll try again with your update. josephfrazier.", "yeah... i briefly looked into getting `typescript-eslint-parser` to output directive information. but it seems like more trouble than it's worth at the moment. especially since ts support is a work-in-progress currently. maybe i'll open an issue for it. at least to have it on the record.", "despairblue what's the status of the `typescript-eslint-parser` upgrade? noticed you merged a few prs. looks like most of the work is in #1601?i should be able to jump in over the next couple of days.", "i guess my real question is why prettier is 'fixing' code which is correct according to my eslint config. it seems (imho) there should at least be a way of disabling such 'fixes'...the code in this particular case is. one of many. relatively common conventions for js (used. for example. in large-scale projects like jquery. to name just one):```var assert = require('assert').  lookup = require('../lookup'); ```", "the only thing that `prettier-eslint` does is to pipe the file after prettier through `eslint --fix`. it's not that prettier uses your eslint config. it seems that eslint can't autofix the variable declarations.", "so is that note in the interface: 'that prettier-eslint uses the eslint-config to set your prettier settings' incorrect? or is this particular fix just one of the things from the eslint-config which does not apply to the prettier settings?", 'yeah. sorry. there were too many manual fixes required and i was bankrupt on time. it would still be nice if you could do it through a pr just for ci checks.', 'alright. ninja pr coming up.it\'s not going to "fit" into a single pr so we will have to live without lint for a day or two ;)', 'remove jshint + eslint --fix', 'add eslint. remove jshint/jscs. fix warnings', 'try add prettier-eslint support for prettier_d. use --useprettiereslint will try to use prettier-eslint lib to format instead of prettier.', 'close for some issue', 'try to add support for `prettier-eslint` . see #3', 'him that way seems good. i will have a try.', "use buildo/eslint-config. ## requirementscurrent config of `eslint` is missing many useful rules (like `no-undef`...)## specslet's use `buildo/eslint-config` even if it's not complete yet", '#171: use buildo/eslint-config (closes #171). issue #171', "giogonzo i removed `/src/revenge` (i forgot to delete it in the past...) i checked on labonline and it's not depending on that folder so it's safe to remove it", 'standardize code. ## requirementscode on this repo should follow stricter rule so to avoid differences between components (ex: new frontends are not used to `react.createclass({})`)## sub-issues- [x] use es6 classes #207 - [x] use tcomb + tcomb-react for prop evaluation- [x] update buildo/eslint-config #205 - [x] import b-r-c components directly #213- [x] every folder should be in `kebab-case` #188 **[francescocioria]**## without issue- [ ] ~~add docs to every component~~- [ ] ~~each component should export its `props`~~- [ ] ~~sass files should follow our naming convention~~- [ ] ~~`style`. `classname`. `id` to every component~~', 'update buildo/eslint-config. refer to #204', '#205: update buildo/eslint-config (closes #205). issue #205', ':fuelpump:', 'cmtegner sprjr colleagues. i don\'t think that enormous dependencies from `rackt-cli` is good choice. `karma. webpack etc` are overhead for this tiny component imho.so i propose make build system using browserify```"lint": "eslint **.js"."build": "browserify entry.js"."test": "jest"."prepublish": "npm run build".    "prebuild": "npm run test"."pretest": "npm run lint"```looks so easy and understandable for contributor. we won\'t have problems with updating webpack to v2 etc and no enormous dependencies.', 'update es lint and editor config. - updated eslint config - added editorconfig for consistency across contributions and updated formatting on source files- added lint script to package.json- fixed linter issues with source files', 'joeyfigaro thanks for the pr! i left some comments in my review.', "pburtchaell thanks man - i'll have these changes taken care of today.", 'pburtchaell changes up for ya! check out the tests. i ended up disabling eslint on a couple lines due to its complaints.', "thanks. joeyfigaro. i'll check this out when i have some time this week.", "berkeleytrue pburtchaell changes up for ya'll.", "berkeleytrue how's she lookin'?", 'berkeleytrue thanks! more updates', "code style checker. seems it's time to add eslint to avoid comments about code style. let's try to add some rules based on the current code.", "additionally. it'd be great to have an `.editorconfig` file to make ides follow our code style. feel free to add it if you want and have time to do :-)", 'yep. you can set me as assignee.', 'looks like i can assign only collaborators of the project. so no way :(', "iamakulov check this out. if the codestyles suits i'll fix errors which eslint illuminated.", 'explicit eslint usage. to bring inline with gulp repos.  use eslint-config-gulp and update code style', 'eslint. currently `eslint` is run as part of mocha using the `test/lint.js`. this is very counter intuitive. why not run `eslint` on all files and avoid maintaining a `test/lint.js` file?', 'i do think it would be preferable to have a single tool to handle this. `semistandard` may be ok although we could never use `standard` and worried about `semistandard` being similiarly obnoxious. using `eslint` directly also seems like a possibility.', ":+1: for eslint (for what it's worth semistandard is just an opinionated eslint setup)", 'eslint trace/ folder. r raynos', 'lgtm.', 'shorten your commit message to something like "don\'t lint deleted files and update eslintrc"', 'nevermind. maybe "don\'t lint deleted files and pull eslintrc from github"', "even for test files. we still want to keep a consistent way of writing javascript. disabling all eslint rules doesn't really help there. i'd rather be more strict and only disable things that make sense.", 'other than the eslint comments. lgtm', 'williamboman. thanks for giving your objective opinion. i will give a read to eslint to take an informed decision. what i can see so far is that my jscs configuration files seem much more rigorous in terms of style choices than your eslint file. at first glance. i\'d say that jscs can better avoid confusion and set consistent style. but again. that might be because i don\'t know about it (in particular. the `"extends": "eslint:recommended"` sounds promising and maybe answers my concern). again. i\'ll read and get back to you.for strict mode (and other things). i fully agree with you. but let\'s set the minimal coding style rules as part of this pr to have the project comply with them. and then we can make the entire project stricter by adding relevant rules (including `strict`ing everything). makes sense?', 'add eslint. eslint catches trivial bugs. so we should add it.', 'disable lint.eslint.csslint for a particular folder/file extension/file.. can anyone please help to disable eslint ? i can t disable it using .eslintignore or .gitignore. can we disable eslint completely for a project if there is any config setting or switch ?', 'vaucouleur thanks for taking this!abinashgupta feel free to re-open if you still have questions around this.', "i've created a `eslint` branch to get things started with regards to formatting. there are currently loads of style violations. but that's of interest as soon as this is merged.", '> regarding whitespace: i\'ve used smart tabs for most of my personal projects. this often leads to formatting mistakes in prs. and i wanted to add a eslint file to my projects for a while now to enforce some consistency.i did not know this approach. for now. i just reverted my commits and i tried to fix some wrong (from what i understood) mixed indentation.> what i\'m not 100% clear on: why did you opt for a different approach. when the approach from #38 would also do the job?i do not see how simply adding a custom token could solve the issue. from what i understand. css-select works this way:- parse a selector string and create a list of tokens- convert this list of tokens to a query function- apply the function to each element (and their children) passed as the context- return a list with the positively checked elementsif my context is `$p = cssselect("p")` and my query is `cssselect("+ p". $p)`. then the module will look for a `p` element which is adjacent to the `:scope`. it will create the query function and apply it to the `p` context (which of course is not adjacent to itself). and that\'s it. the `elem` array do not include the searched sibling element. so it is never tested and cannot be returned.this is why. i think. we need somehow to add this element to the array. so it can be checked and perhaps returned. moreover. we need to do this from outside of the compile module. according to how `getselectorfunc` and `select` functions work.i may have missed something. do you see a better way to implement this?', 'add basic eslint configuration', 'fails because of new eslint not working with old node.', "dsp: we have another annoying dysfunction: eslint will fix around 10 `xhtml` files plus the generated `html` files every time `grunt dist` is run. next time you run. eslint will see these fixes as an error and fix them right back to how they were. forever and ever. it appears that `.eslintignore` is ingored. at least it's not possible to exclude the `xhtml` and `html` files :confounded:", 'linting. - add eslint config file- lint lib source files- run eslint as part of the travis buildexclude `integer.js` from linting as we are not the authors.- [x]  used #197 as base branch to avoid conflicts on `lib/request-handler.js`. i will rebase once merged.', 'great idea. i think we should either merge this first and then rebase/update all the other branches. or merge all the other branches first and then rebase and apply this.  wdyt?', 'we can rebase it after #197 is merged.', "linting for tests. - add test specific globals to eslintrc- define 'eslint' script target for npm and have travis use it- add test directory to linting", "wow! this is great!i only found the issue that i mention above on `unit/client-test.js` around strict mode. that i've made in the past so i'm going to send a fix for it and merge it.", 'add eslintrc. copied from ngl.', "prettier. summary--set up [prettier]( on this repo and adjusted the eslint configuration accordingly. prettier takes care of all the formatting of js files for us so we don't have to think about it. the diff here is just from running `eslint --fix` on the repo after setting up prettier.", "overall i'm     on this change.  most of the changes are indeed making things prettier. and i really like that this is automated.  i'm okay with having it merged as is after fotinakis has checked in on it.if we set the line length to 100. and redid the code changes it made. then some of the changes made here wouldn't occur.i'd also consider having the prettier rules match what i'm proposing in our ember repo:```  plugins: ['prettier'].  extends: ['prettier'. 'eslint:recommended'].  rules: {    'prettier/prettier': [      'error'.      {        singlequote: true.        trailingcomma: 'all'.        bracketspacing: false.        printwidth: 100.      }.    ].    'max-len': ['error'. 100].```", 'which thomashuston just did as i wrote that last comment. :)', "autofix option. great addon! i'm having a tough time finding if there is a --fix option like in eslint (eslint . --fix) where it will automatically fix files that fail the lint rules. is there an option for this or is it missing?", 'sadly no. but it is definitely something that we want to make happen at some point.', 'upgraded eslint. added lint fix. and removed gulp-eslint. ## pr checklist- ~~manually tested across supported browsers~~- ~~unit tests written (`common` at minimum)~~- [x] pr has one of the `semver-` labels- [x] two core team engineer approvals- ~~one core team ux approval~~', "i don't seem to have the permission to add labels.", 'for the files where you added `/* eslint-disable comma-spacing */`. was it just not autofixable?', "eslint: enable prefer-stateless-function rule everywhere(ish). churny. but ok. that's what we get for following airbnb style guides :eyes:", "build: replace gulp-eslint with eslint cli. eslint doesn't fit in particularly well with gulp. so the integration was a bit clumsy. this instead calls the cli from a gulp task without using gulp's streaming fancy stuff.also adding the `--cache` parameter so linting becomes much faster after the first run (nice for watching etc).", "i'm not sure this fixes the issue; there's still no eslintrc in any directory.", 'leobalter i could use some help configuring travis as you suggested. also. can you confirm that appveyor intentionally only runs on latest node and so no reconfiguration there will be necessary? thanks!', '> i should create a "lint" script which would only run eslint on node 6. that way we don\'t run more ci jobs than we need to. that\'s the first thing i noticed. also the current way repeats the other tasks on ci-include-lint.this is looking good. almost ready to go! ++', 'leobalter not sure i fully understood your reply. do you want me to avoid creating an extra build node altogether? or can i create that node (as i am currently doing). as long as it only lints rather than running the ci scripts as well?i was proposing the latter. but if you would prefer i find another way. please tell me what you have in mind.', "platinumazure currently you're invoking both `ci` and `ci-include-lint` on node 6 which duplicates most stuff. since node 6 already runs the `ci-include-lint` task it shouldn't run the `ci` one. that's. i think. what leobalter says.", 'okay. i _think_ all open questions have been addressed at this point. let me know if i should squash. thanks!', 'leobalter left a response to your comment on eslint-disable-line.also. regarding indentation: i can try to find remaining indentation issues by using the eslint "indent" rule. it\'s not enabled in eslint-config-jquery because the rule does not elegantly handle the top-level iife requirement in the jquery style guide. but i can at least go through and try to fix any real errors. sound okay?', "on the indentation. i'm ok with that but the current issues are not many so we can merge this pr before and open a follow up. as you prefer.", "leobalter i've pushed a commit replacing `eslint-disable-line` with `eslint-disable-next-line`.regarding the indentation issues: i've been looking and i see a number of indentation problems throughout the repository (about 200 or so violations). many in files i didn't touch. so i guess i'd like to treat those as a separate issue. i am happy to fix any indentation problems i've introduced in this pr. if you can help me find them. otherwise. can we merge? (assuming there aren't other issues. of course.)let me know if you need me to rebase and/or squash.", 'add pre-push hook that runs eslint & tests. ... it is fast enough. no reason not to. js/scripts/pre-push.sh', "good point. i'm not opposed to move package.json (only) to root like we have cargo.toml there. however you have just got me thinking - this needs to be conditional to js changes. don't need the rest of the core devs to run this. (they may not even have the tools to do so)", 'some works need to be done. - [x] update dependencies (hope to remove both react and d3 from dependencies)- [x] demo page (is now difficult to maintain)- [x] documentation (keep using wiki or show more in demo page)- [x] eslint- [x] update the original repository about `rd3`- [x] babel 6 for smaller bytes', "yang-wei i prefer airbnb config as well. i'll configure running eslint as an npm script and open a pr.", "add eslint airbnb config. - 'npm run lint' to run the linter- 'npm run lint:fix' to run the linter and fix errors & warnings that can be automatically fixable- resolve automatically fixable lint errors & warnings", 'yang-wei this pr does not resolve all errors/warnings. do you want these resolved in this initial pr as well?', "everything looks good to me.>  do you want these resolved in this initial pr as well?this will be cool and i will merge this once its done.i will be offline for 3 days from tomorrow but i will merge it asap once it's done =)", 'jonase hey thanks for it. i tried it on local and realise we need to resolve a lot of lint error manually. do you plan to solve it or i can take care of them?', "yang-wei i've been planning to resolve the last of them. hopefully i don't break anything and the tests still pass. i would also need to test at least the examples before we merge.", 'hi azakus. which branch should i base to?', 'duykhoa i like this pr. but can you commits into`master` branch', 'baocang can. i will make another pr.', "this is problematic.  :( it's fine for command-line users. but it can impact integration with ides.we also seem to have lost some rules.  there are no more complaints about a lack of `'use strict'` where there should be.", "`test/integration/fixtures/simple-reporter.js` fails a lint check that wouldn't have failed before this change", "personally i don't use editor integration for linting. i think this issue depends on people and the team who use it. if you evaluate the negative impact is bigger than the benefits here. i think it makes sense to switch back to eslint cli.", "> for this particular pr. i'd say adding a .eslintignore file would be needed.we have an `.eslintignore` file already. which was not removed.  this should be gtg.", 'develop. - bug in bulkput() when using crud hook and mixing updates and creation ed19e64- don\'t care about order in crud hooks expected oplog 2915cbb- revert "don\'t care about order in crud hooks expected oplog"  ...         c365bab- don\'t use "let". babel translates it to creating a closure even when ...  ...         9205691- eslint corrections + moved \'stack\' method between modules.            2d42749- throw if not using dexie.promise from transaction scopes.  ...            1214974', 'run eslint on release.', 'empty eslint file for build tools.', "add code linting. this would make it a lot easier to enforce code standards and could be integrated into travis so that it lints and tests all pull requests. i'll submit a pull request using eslint. which is highly configurable and seems to be what everyone is moving towards these days.", "move eslint to devdependencies. so that it doesn't install eslint everytime the package is installed", 'fix eslint and coding styles', 'add local eslint to package.json. every time i start a new project with this boilerplate i am getting the error in atom. that i have no local `eslint` installed.how about adding this as local dependency?', 'sorry. my fault. i just had not installed the dependencies from `package.json`. now it works.', 'i have already sent a cla. i failed eslint. but corrected the errors.', "clean up code and consolidate usage of cliengine where possible. mostly a diff to clean up `cli.js` and break up things a little bit more. there's still some pretty big refactoring to be done with how we spin up the eslint instance between worker threads. but i want to try to tackle that in a separate diff.", "the readme says: > if the port key is not specified in the .eslintrc file. then esprint will run parallelized eslint without standing up a background server.doesn't this conflict?", "build hygenie; try to log more information about the failure. working on #216 i'm getting a bunch of weird. inconsistent build failures that manifest as `exit status 1`; i'm trying to get them to log more information.  while i'm at it. i'm also cleaning up some stray comments (copy-pasted from the eslint docs) and standardizing our build scripts on tabs. rather than a mix of tabs and spaces.", 'add eslint-config-rackt config. see `eslint-config-rackt`', "as a workaround you can pull this in as a proper dependency and use their config as is so long as the `eslint-plugin-react` is in your `package.json`. it would be an extraneous dependency but it won't hurt anything and your project should lint properly react or not.", 'add "limitations" section to the readme to properly address eslint bug. explain #43 right in the readme.exogen ryan-roemer', "added `eslint-plugin-jsx-a11y` as recommended in #290. and it's awesome! will merge when ci passes. as now the whole linting is setup is tight too!", 'added `eslint-plugin-jsx-a11y` in #271!', "slexaxton i think in this case it would be a matter of splitting stripe/eslint-config-stripe into a not-react-y repo and a react-y repo. and then having `stripe-node` make use of the not-react-y one; i briefly looked at pulling it in. but ... there were _so many dependencies_ it scared me off.is that what you meant?  i.e.. 'yes' to splitting `stripe/eslint-config-stripe`?", "brandur-stripe jlomas-stripe okay. i think we should go ahead and merge this pr. it keeps us more or less in the same place as before but upgrades the toolchain to use eslint.using the `eslint-config-stripe` config will require a bigger effort as jlomas-stripe mentioned (i.e. we'd need to split the config to remove all the frontend/react stuff before we could use it here). but we can tackle that later.", "this is good catch. but i'm curious why do have both?> npm i --save-dev eslint jshintand why it is has to be part of this mr? i mean it is different objective. and probably it worth to rise another mr.i had same issue with `package.json` and ended up with manual manipulation. again. same reason it is good enough to be separate mr.other than that +1", "dmi3y without eslint and jshint. the test case won't run. i don't want to submit a pr without passing the tests. you're right that this pr solves two distinct issues but there is no rule that each pr has to tackle a distinct issue.", "that's true... i solved it on my end by installing jslint globally. though i'm working on local machine.anyways. my point is that it sounds bit of overkill to have both. i'm guessing now that `npm run lint`:> jshint *.js; eslint *.jsis sort of a relaxing command for users who have either of one installed globally... which means if for example  code was linted through the jshint. the eslint will be superfluous and vice versa.", "eslint. 'sup ya'll! rdegges timothyej typerandom this adds the `.eslintrc` file to the repo. and ports all the js hint settings that i've been using across all of our js projects.  this is a good. sane place to start imo.  the library code has been patched to meet the linter rules.please pull this branch and try running the tests. as they are now configured to run eslint first.", 'awesome. going to review this today. :beers:', "works awesome. i added a npm script command so that in order to just do lint one can execute `$ npm run lint`. also added some more rules to the mix (in line with discussions we've had before). so there are some linting errors that needs to be handled now. but i'll fix these one i get some more time for it.", "timothyej nice. didn't know about the `run-script` alias :) also. updated your comments. the things you commented on are basically things not yet enforced.", 'upgrade eslint-config-exchange-solutions', 'eslint.  - add eslint to travis and appveyor - fix all eslint errorbigcommerce/stencil-team', 'replacing json.parse by angular.fromjson in tracker service. was throwing an eslint error and causing a bug when i tried to login with oauth2 (undefined token o error).', 'oh ok you just want to run eslint on generator files and not generated files. sorry i misunderstood !', 'forgot to say : run `npm run lint` to execute eslint.', 'eslint polish. ran eslint in the generator and in a monolithic app. found some little errors.', 'it was the end of the week. sorry for the mistakes. i will run eslint next time..', 'we should really integrate eslint or something into the test suite.', 'integrate eslint into testing process. this should help us catch simple errors (like #1604) and enforce a consistent style.', 'as i said in my message. there are plenty of other simple errors it will catch. and we can finally enforce a coding style rather than going back and fixing it periodically as we do now.', "i'm not opposed. but in my experience linters have been more trouble than they're worth (they're not actually that great at enforcing coding style. but are fantastic at throwing aggravating errors). in any case. would be nice to get travis hooked into pull requests so if we did add linting it would show up with any failed tests on the pr itself.", '+1', 'having an automated linter as part of the test suite would be lovely.', "jdalton: i don't see how having comments for exceptions is bad. there will be 7 in total. and they make sense. we have one use of the `function` constructor. and we're okay with that. but we'd want any other uses to trigger test failure. and i chose eslint over jscs because its rules are much more powerful. checking for potential errors as well as enforcing style.braddunbar and davidchambers: i addressed your comments. thanks for the review.", 'add `yarn.lock` to `.npmignore`.. might wanna add `.eslintrc.js` and `.travis.yml` there. too.  alternatively. you could use the `files` field in `package.json`.', 'thanks for the pr! what issue does not publishing the yarn lockfile fix?', 'not counting dependencies. the size of `css-to-react-native` is 186 kb.  114 kb of this is the `yarn.lock`.', 'maybe we should go with the `files` in package.json to be consistent with styled-components.', 'as we use the codeclimate do we still need to install eslint?', 'will merge that now and investigate the `.eslintrc` later.', "add code climate configuration. this commit configures code quality analysis by code climate.results are provided by open source code climate engines. based onthe languages present in this repository. i've enabled the followingengines: - eslint", 'ysugimoto can we consider this as done?', 'no. i think this would be closed.', 'bootstrap style. refactored the documentation and added bootstrap styles for datepicker & spinner. the spinner styles are exactly the same. but i added them for completeness.in addition i enabled eslint linting for docs. jscs has troubles linting the docs (some memory issues) so i left it out for now.', 'jpuri i merged it as i needed it for another fix.']