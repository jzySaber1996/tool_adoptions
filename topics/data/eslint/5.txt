["you'd have to share a repository with the issue reproduced to get help. unfortunately i'm not familiar with `eslint-plugin-import` that much.", "namespace: package name update. how about update the package name to webpack-sass-loader? at the moment. the webpack plugins/loaders namespace isn't very consistent. in comparison. babel. eslint. react. redux all have the namespace in a consistent convention. helping make the dependency tree clean.", 'chore(package): update dependencies. exclude `eslint-plugin-*`. because in `webpack-default` we have own plugins and configuration.', 'michael-ciniawsky can we merge and release patch. no access :smile:', "use prettier . close #949 and cover the codebase to use prettier. i've loosened the `tslint` config and removed `eslint` as they are now handled by prettier itself for style. we were only using `eslint` for tests since our main source is written in typescript so it didn't seem much point for the added complexity.", 'closing this for now.', "activate prettier. close #949 and cover the codebase to use prettier.i've loosened the tslint config and removed eslint as they are now handled by prettier itself for style. we were only using eslint for tests since our main source is written in typescript so it didn't seem much point for the added complexity.", "quick update: i tried updating to latest and am running into a problem with eslint not recognizing 'arraybuffer'. 'int8array'. and 'promise' and throwing a `no-undef` error when linting. i'm digging in to see if i can figure out why and get it passing.", "this pr is looking good to me. we can think about enabling some of the `eslint` options later. the only thing that i'll suggest is to rebase all commits into one. as they are too small to have any meaning on its own.", 'that\'s great. i\'m only not too sure about the `space-before-function-paren` rule.if you run (without the tests)```node node_modules/.bin/eslint lib/ *.js```with `"space-before-function-paren": [2. "never"]` you get 99 warningswith `"space-before-function-paren": [2. "aways"]` you get 41 warningsso it turns out that there are more occurrences using space. of course without the tests. but they were largely refactored by one person at some point.so i\'m for keeping the things as they are for now regarding this rule.', "i wonder if going the route of eslint and having pluggable parsers is the right way. it's too bad we can't just have one", 'yes they should.. it\'s the difference between```npm install -g eslinteslint .```(which is running eslint directly because global node module bin is in your path)and```npm install eslint(add script "lint: eslint ." to package json)npm run lint```(which is npm running a script where local node module bin is put in to your path.)when any npm script execution returns a nonzero status code (e.g. linting failed) npm prints that debug info.', 'mocha supports a `mocha.opts` file within a directory that houses the test where you can specify various opts. maybe it would be cleaner to revert a bit back to your regular eslint style. and just deal with timeouts that way. (so move integration_test.js to /integration/...) and add a mocha.opts file there that specifies a timeout for all integration tests of 10s or whatever?edit: sorry. these are not in integration_test... i forgot.', 'allow to provide a default value for plugin options. i believe it would be useful to allow a default value for plugin options.``` jsoptions: {  mode: {    // eslint-disable-next-line max-len    usage: \'specifies the mode: "local". "remote". "both"\'.    shortcut: \'m\'.    default: \'remote\'  }.}.```this has two benefits:- a default is not hidden in code- the help command can provide this information on the help command & hints', 'i\'ve taken another look. and yeah. `handle-callback-err` failures are legitimate. but all of them are in tests. not in the library code itself. i\'d say land this as-is. and then remove `"handle-callback-err": "off"` from `.eslintrc.json` and add `test.notok(error. \'operation must not return an error\');` where necessary as a separate commit.', 'linting cli tool & fixing its current style issues. ensure the same code style on the cli tool. as we do on the main file `./mustache.js`.also minor .eslintrc change to be able to use `process.exit()`. instead of having to `throw new error()` to exit the process.', 'cool. thanks! :rocket:', "`echo 'const foo =`foo${bar}`;' | eslint --stdin --no-eslintrc --rule prefer-template:2 --rule quotes:2 --parser-options '{ecmaversion:6}'` has no errors (with latest eslint)", 'perhaps your atom is set to use the global eslint? you basically want to completely uninstall eslint globally. and configure atom to look at your local one.', "higher order functions and the arrow-parens rule. the `arrow-parens` rule requiring parentheses for blocks and no parentheses for one-liners takes no account of higher order functions.i find it downright bizarre that i should be required to write code like the following:``` jsreturn next => (action) => {  // etc};```i don't know whether this is a config issue or an eslint issue.", "this is definitely our config and our styleguide. a function with one arg that's using implicit return must omit the parens; any function using explicit return must include the parens. (one-liner versus blocks isn't the issue)", "i don't understand why you've closed this. do you really think it makes sense to write higher order functions in this fashion?", "when you switch from implicit to explicit return in that chain. the parens help visually break apart the implicit part of the chain from the explicit part of the chain.in addition. very importantly. it takes something that is developer choice (whether to omit or include the one-arg parens) and legislates it. so that there's only one correct way to write it for a given codebase.this is the style we use inside airbnb - you're more than welcome to override any part of our config in your own eslintrc. or to fork the guide and make whichever changes you like.", "for what it's worth. i'm not taking issue with either no parens for one line one arg functions or required parens for block body functions; i simply find the inconsistency jarring for higher order functions. obviously you don't agree. so i'll leave the complaint there.> this is the style we use inside airbnb - you're more than welcome to override any part of our config in your own eslintrc. or to fork the guide and make whichever changes you like.i realise this. but i hate fragmentation. so i prefer to avoid overrides. hence i'll bring to your attention anything i see as anomalies. in this case what i thought was a bug turns out not to be.", "just so i understand your preference - you'd prefer that the one-arg paren either be always required or always forbidden?", "i'm saying where there is a block body all the parentheses should be required. since it's not a true one-liner. i.e. `(x) => (y) => (z) => { ... }`", "it's not about being a one-liner tho - single-arg implicit return can be on multiple lines too. depending on what it's returning. it sounds like you want a special rule for when the single-arg of an arrow function is chained with other one-arg arrow functions - which is a scenario that eslint doesn't yet cover.", "did you update `eslint`. as well as all the peer dependencies? specifically. you should use the `npm install` shell command in the readme.what's `npm ls` output?", 'yes. i reinstall gulp-eslint. it works now.thanks. ljharb', 'this is now waiting on a release of `eslint-plugin-import`.', 'upgrading eslint is the solution to the op as well.', "steida thanks - for the prop types ones. please file bugs on eslint-plugin-react if you find you still need the overrides. for the no-class-assign one. it seems like you could do `const inneremail = class email { ... }` and then `const focusedemail = focus(inneremail. 'focus');` etc?", 'peterhb999 do you have a global eslint? i think by default atom runs the global one. not the local one? `npm uninstall -g eslint` to be sure.', 'you may not have updated `eslint-plugin-import` - can you use the install command in the readme of the package. so that all the proper peer deps are installed?', "i'd argue that accepting duplicate import paths when one is `import type` and another is just `import` should probably be filed as a corner case with the import eslint plugin. seems like a valid use case to me.", "relekang lencioni lelandrichardson since `no-duplicate-imports` is an eslint core rule. they'd need to support flow in order to detect that corner case. i think it would make more sense for flow to allow you to combine `import type`s and `import`s all into one statement.", "how are you running eslint? are you sure you're running a local one. not a global one?", 'are you sure you are not using a global install? try `npm uninstall -g eslint`', "ljharb using `eslint` as a `devdependencies` within my application. configured it to run with `atom` editor and show warnings on save. i do have a `gulp` lint task. but the issue i see is thrown by the editor itself.```gulp.task('lint-jsx'. () =>  gulp.src(files.jsx.concat(ignorelist))    .pipe(eslint())    .pipe(eslint.format())    .pipe(eslint.failaftererror()));```", "hozefaj the only thing i've seen with atom is either mistakenly using a global eslint. or. not restarting atom after updating node modules. beyond that. unless you can reproduce the error on the command line directly. i'd file a bug with atom.", "yes. i think that's a section we need to add - and since trailing function commas are now supported by eslint. we'd require those as well.in other words. a section that simultaneously discourages long function signatures/calls. but describes the proper way to indent them multiline with trailing commas. would be a welcome pr.", "james075 if you are still having issues please file a bug on `linter-eslint`. i'm _guessing_ that it is pulling the wrong `eslint` instance for some reason but that's a problem that should be diagnosed over there as it has nothing to do with this project :wink:.", "noahleigh yes. that's a good point - the dom is one of the places that makes it very hard to avoid mutation (which is part of why we use react at airbnb). for cases like these. i'd use an eslint override comment: `// eslint-disable-line no-param-reassign`", "caisah of which dependencies? the only thing we're out of date on (via semver ranges) is eslint-plugin-import. and #1101 is open to handle that in the next semver-major of eslint-config-airbnb-base.", "yep. as of last week. they're now stage 3", 'ljharb sorry i searched for "eslint-plugin-import 2" in the issues', "everyone still needs to use a transpiler right now to use them though. is the reason they've been added is because they're more of a certainty now and the spec is less likely to change. (sorry. not up to speed on the stage process)", "silverlight513 yes. the guide assumes you're using babel. and encourages it (and the linter config requires it implicitly).yes. in stage 3. features only change in response to browser feedback about implementation feasibility or web compatibility. and this one in particular is highly unlikely to change.", 'is there an eslint rule that could enforce this? if not should it be part of core eslint or eslint-plugin-import?', 'petersendidit there does not yet appear to be. i think it probably belongs as a core rule. but would be fine in eslint-plugin-import as well.', "i'd recommend not installing anything globally - if you do. i think you'd need to manually cd into the global location where `eslint-config-airbnb` is installed. and manually install the peer dependencies.it's best to install everything locally. only.", "is there a way to install it locally and use eslint for atom. sublime text? i'm using the airbnb standard for color linting in gui editors.", "if i understand. i should install airbnb standard inside one of my projects. then i set the eslint executible path to this local install in sublime text / atom?maybe i just create a new node project which contains all of the eslint. airbnb standard related stuff and i set this eslint's path to the gui editors? kinda like a .dotfiles repo. but only for local installs for gui editor dependencies?", "ljharb i'm with dlwalsh and i've come here just to find an issue or create one xdi don't know what does the parens have to do with the curly brackets here. they serve different purposes and they are **independent** from each other.the only thing that depends on parens vs no-parens **is the number of arguments**. if 0 or >1. required. else nope. please. it doesn't matter if there is a return or a block. **that doesn't have anything to do with the number of arguments!**this is more like... if you want parens because of readability. because not everyone is haskell programmer (this is a bad argument). because of easy refactoring. etc... just use parens everywhere no matter what! but why create this rule so special? it makes no sense.", 'updates .eslint to forbid for of loops | fixes #1031', 'just started reviewing :) <br><br>:octocat: *sent from [gh]().*', "so what if i don't want to use eslint? i think should be an option to insert that newlines", 'i got prettier working for `<script>` tags in my `.vue` files using the following setup:packages:```eslint eslint-plugin-htmleslint-plugin-prettiereslint-config-prettier```eslint config:```json  "eslintconfig": {    "extends": [      "eslint:recommended".      "prettier"    ].    "plugins": [      "prettier".      "html"    ].    "rules": {      "prettier/prettier": [        "error".        {          "printwidth": 90.          "semi": false.          "trailingcomma": "es5".          "bracketspacing": false.          "singlequote": true        }      ].      "camelcase": [        "error".        {          "properties": "never"        }      ]    }  }```run using:```basheslint --ext .js..vue src --fix```', "> i'm surprised to hear you say that about those coming from the airbnb config.it's kind of all-or-nothing with compatibility. this option is not 100% compliant with airbnb style and therefore people running that eslint config will report issues.", 'great flybayer but `eslint-plugin-html` is not compatible (anymore) with `eslint-plugin-vue`.', "if you're trying to get this to work with the vue cli. just add this line as one of the rules in the .eslintrc.js file in the root folder...`'space-before-function-paren': 0`", 'let me try to shred some light on this.in vscode i started to experience the following message from prettier when i saved my nodejs project:> importdeclaration should appear when the mode is es6 and in the module context.it only happend in my nodejs project. using webpack. typescript and the import syntax - not in react with the same tech. the reason for this was the following setting:   > "prettier.eslintintegration": true.if it\'s changed to false the message will "go away". so something with eslint is conflicting here.', 'im not using eslint anymore. so it was more of an info to anyone experiencing thise', 'docs: eslint config is orthogonal to plugin', "i just edited the text a bit because there are stylistic rules prettier doesn't care about (like `camelcase`).anyway. this is a great improvement to the docs. thank you very much!", "for typescript. i think we can use `typescriptnext` directly. which is the daily build from ts master. but i guess we'll have to get updates from `typescript-eslint-parser` first.", "hey hey hey... looks like i managed to break codeclimate and bithound in a single shot! they both don't support local lerna packages like my `eslint-config-popper` for eslint", 'fix-unsafe-lifecycles. - change componentwillreceiveprops to componentdidupdate- update .eslintrc', "it's because we're extending the eslint formatters to output formatted results. looks like they've got links in them which obviously wouldn't link up to our rules.definite oversight on our part!", "> a 1 usually represents true. so if you haven't read through the docs. this looks like you want a space after a bang and before a colon. or perhaps even looks like you're setting the number of spaces. what do you think of this format?:glen-84 looks like they are just copying eslint's config format.", "it would be nice to update to use this yes. internally though eslint is just transforming them back to 0. 1. 2 so it's just an abstraction. no reason we couldn't move to this model though.", '`eslint` is not happy :(', 'this is going to be an eslint moan fest!', "pshhhhh. bad boy. i'm on it. don't forget to check eslint.", 'heh. are there any eslint rules for that?', "whitespace changes for eslint 4 compat. changes proposed in this pull request:- adjusts some whitespace  - reduces severity of no-useless-escape to warn (it's not always accurate)", 'the issue causing test failures in this pr is an eslint 4 whitespace rule change which <s>is being</s> was addressed in #1979', "i'm so sorry for the eslint error commit :( :(", '> imho this solution also allows to add a pretty exciting feature to pnpm. we can make local clis available in the command line. when inside the package folderit does make sense for babel and eslint. but what is the pnpm use case?', "i though it is`{clipkg}`s' responsibility to choose a way to handle this. eslint. babel. ava. gulp. etc are doing this and its explicitly stated in their documentation. why do you want to implicitly force this choice on all cli tools?", "because pnpm creates a special kind of cmd-shims that set the node_path env variable. setting the node_path env variable is a workaround to allow tools like eslint find their plugins.however. when tools like eslint execute the local instances of themselves. they omit the cmd-shims created in `.bin` and as a consequence. they won't work correctly.imho. this solution is fine. as *ied doesn't even support global packages* and this solution allows to use them with our symlinked node_modules structure.", "what if the solution proposed in #571 would be applied only for globally installed packages that don't have  `preferglobal: true` in their `package.json`?i have checked some of the popular pluggable packages: eslint. babel. typescript. gulp. they don't have prefereglobal true. packages intended specifically for global usage have it: npmrc. forever. although seems like not all of them: grunt and nodemon don't have preferglobal specified. so this might be not a reliable solution.", "thanks for opening the pr!i'm a little confused on what you are trying to do. is the issue with the usage of `const`? what browsers are you trying to support? why did you copy everything from the `lib` folder into a new `src` folder?why did you move everything around in `fields.js`? are you using a different eslint rule set then the one in this project? this makes reviewing this pr harder...", "using lodash to filter is definitely more explicit (you can see the name `react-hmre`). however it does violate the law of demeter. and i think it would be best to use the public interface if we're changing the config where it doesn't belong. we'd also have to `eslint-disable no-underscore-dangle` on two lines and between that and the comment i feel like there would be too much noise surrounding the code.", 'fix setup of defaultattrs for paper-virtual-repeat. closes #926the `defaultattrs` was probably wrapped in a computed property because of the new "leaking object state" eslint error.since creating a computed property poses an issue here. let\'s simply setup it in `init()` lifecycle method.', 'updated example project. - fixed tab in drawer bug- added modal and lightbox examples with distinguished styling- added base classes for ease of implementation- added prop-types as example dependencies- small rn updates to match eslint standards', 'mcabs3. thanks for your pr! by analyzing the history of the files in this pull request. we identified charpeni. sarovin and aksonov to be potential reviewers.', 'just noticed that travis is failing because of some minor eslint issues. otherwise good to go.', "looks fine but lint is failing. probably because this file is no longer excluded.  add it to .eslintignore and you're good to go.", "fixed lint via `.eslintignore`.  in the future. we'll probably want a solution that allows us to list node scripts like this.", 'some files use crlf instead of lf. enable eslint rule that checks for the correct (lf) line ending and fix all src files.', "ugh that's a really annoying bug!i thought `eslint-plugin-import` lints those imports too. but apparently not. benmosher could support for `system.import` be added to `eslint-plugin-import`?", "oh my bad. i found this in an example and found it pretty conveniant.i have restore the default eslint rules now. thanks for warning me.however. i have followed the advices provided in your link the bring the context into my _getemployeefunctioni have tried with : - autobind es7 decorator : but it wasn't supported by es6- the purposed syntax :     ```  constructor() {      super();      this._getemployee = this._getemployee.bind(this);  }    render() {       return (          <button onclick={this._getemployee}>get /employees (test)</button>      )  }  ```i keep having my events binded. is this the error you were pointing me at ? because it didn't change much.should i take care of the unbinding my self ? do you have an example i could start with ?", 'now i think it is not a good idea to play eslint packages this way. but this helped to find a way to fix hard peerdependencies requirements if some packages demand', '```// eslint-disable-next-line new-cap```', "ahh. i should have been more clear - sorry!i mean in terms of docs. a .md file that explains the guidelines in a wordy way. wether that be a copy of the airbnb gls. a short write up that justifies it and references it or something along those lines.the eslint additions are great but i feel there's room for some docs that support them - could be wrong though. having the eslint rules ship out with the boiler plate might just be enough!", "also i'm a bit surprised this wasn't caught by eslint?", "> also i'm a bit surprised this wasn't caught by eslint?unfortunately the indent rule is currently disabled -- it's something we should fix one of these days.in the meantime. thanks for the contribution! much appreciated.", 'enable indent linting rule. r? brandur-stripe cc stripe/api-libraries kesla enables the indentation rule in eslint config. and fixes a few files with bad indent (by running `eslint . --fix`).', 'nice!!lgtm.', 'adds react-flow package. some teams are adopting flow. but additional configuration is needed to get eslint to work with it.', 'give this a couple days to marinate. i know indexzero wants a chance to review', 'update eslint. resolves #91', "coverage directory shouldn't be linted. as it stands if you try to `npm test` twice in a row while the `coverage/` directory still exists. eslint will attempt to lint all of the `*.js` files in the `coverage/` directory and gets very red very quickly. i'm guessing this isn't desired behavior!i'm not convinced my solution here is the best one. but it does seem to do what i'd expect it to.", 'thanks!', 'chore(deps): bump electron-context-menu and eslint a11y. this bumps a couple dependencies. the extra package.json changes came from using `npm-check -u` (just formatting).', 'thank you. oh human greenskeeper.', 'baer i definitely gave automation thought. but ultimately not everything represented in this style guide comes from an eslint rule. and the examples are all custom made to best illustrate the rule. i think the best way to keep it updated would be to require any pr to a rule also include appropriate documentation updates.', 'capitalize.filter: fix eslint error [ci skip]']