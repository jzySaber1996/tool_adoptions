['stricter eslint rules', "hey havunen. many thanks for the fast response. no. i'm not using `inferno-compat` for that exact reason - it's a shame to be forced into using it just  to use `inferno.proptypes` (or indeed `eslint` with `plugin:inferno/recommended` settings).my experience with inferno has been very positive (many thanks to all involved!) but this feels like an oversight. was there a specific motivation for omitting proptypes from the core library api then?", "i would do that. but first i don't know the reason why it's there and second i am not experienced enough with eslint rules  unfortunately i can't open issues at `eslint-plugin-inferno` because issues are disabled there.", 'it might be worth checking where eslint support is on their roadmap as well', 'so. hound is probably not going to work for us unless they decide to implement other code style checkers.any thoughts on how difficult it would be to write a bit of custom code to leave comments on prs if eslint fails?', "merging this. i'll manually revert the eslint change.", 'add flow-bin. update jest and fix flow error. this makes travis to run flow. eslint and the tests.i hope it is okay that i added flow. if not i can als remove it again form this pr and just fix the flow error.```src/utils/getmethoddocumentation.js:48 48:       type = getflowtype(typepath);                  ^^^^^^^^^^^^^^^^^^^^^ function call 50:         type.alias = typepath.node.id.name;                  ^^^^^ property `alias`. property not found in 50:         type.alias = typepath.node.id.name;             ^^^^ object type```', 'upgrade sl-eslint in master branch', 'i see the build is failing because of the eslint rule no-extra-stricti would suggest. that we should remove the struct pramas from the inner functions. because the module-wide one should cover it.the rule itself is depricated btw.', 'ignore coverage and other folders for eslint', 'run integration tests and eslint for job 1 only', "> i think it would be good to learn how pull requests work with tests.yes. it's a learning process.  :)i can't get npm test to work. but i think it's a windows thing.but doing  `eslint . && flow check` is now returning no errors.just done a new commit. but it's not appearing here but it's appearing on my fork.  not sure if it's because it's put on hold..  oh. just noticed i didn't do it to the noop_cpu_update branch.. ok. i got there in the end. but i don't think i did it the easy way.. in the end just uploaded the files using the git website.. :)   i think i'm going to have to watch some utube vids on git..", "> that's an idea. only issue i see though is that you will end up creating 10 timers per second. instead of just doing a simple conditional check. so not sure how v8 handles the creation & destruction of timers. may end up making more work for the gc.what do you mean? if a `noop` is in progress then it would just clear the inveral and wait until the reponse is received. right? maybe i am missing something here. > i know your busy. but before you do. could you also check / test :). i'll check before merging. the only problem is all my scripts don't actually need noop either. i found it a long time ago while testing some edge case. i looked that phridge which did the same thing. the good news is that the code is tested 99% with coverage. so i'd feel it would work if all tests pass. if you can think of adding a test case then that would be awesome. but i haven't figured out how to test this. it would be really good practice to make sure all changes are tested. > btw. i've maybe not said it yet. but great work in starting this project in the first place. it has really helped my use of phantom.js. and this was before these modifications.hey. you are welcome! i have enjoyed it as well. i took over the project a couple years ago. it used to use `dnode` but that seemd to have break all the time. i kept ignoring it until i decided to rewrite everything. then i rewrote it again using websockets. it didn't work. then i did it again using sysin/sysout. then a few months ago i changed everything to jest and finally i was reading yarn's code base. i leared so much from that. i added eslint every where and added flow to do static checking. i learned a lot with that and had fun with it too. v3 is pretty awesome and i hope to release v4 which target node6 going forward.", 'add coverage folder to .eslintignore', 'landed in 33d7902', 'it looks like the removal was so it would be compatible with eslint. this change thankfully doesn\'t cause any eslint errors and allows the code to be run in strict mode.the reason behind this pr is because we bundle mustache.js with a bunch of other libraries that we use on our sites and automatically add `"use strict"` to the top of the merged script so this was causing it all to fail.', "thanks for the commit reference bobthecow. made it easy for figuring out nagaozen's change was just for `eslint` compatibility.i confirm this change doesn't raise any `eslint` errors.yousefcisco. thanks for the pr! i merge and release right now. :shipit:", "i started checking out eslint today. my bad for not checking the style guide i had closed the pr because i wasn't sure if i did something right", 'ljharb what about circular dependencies among functions?', "chirag04 luckily those are incredibly rare. typically i see a circular dependency as a code smell. between functions or between modules. however. there are definitely a few cases where it's necessary - and that's what inline eslint comments are good for.it's ok if. eyes open. your code deviates from a style guide. but the code should be profusely apologizing for it with comments. as opposed to the guide bending to allow for usually-bad patterns.", "jesucarr that solution won't actually work. because `undefined` would be passed in. not the later value of the function. the trivial solution is adding `// eslint disable-line no-use-before-define` on the `function resolveaorb` line.however. it's likely that your implementation and use of `type` could be redesigned such that this wasn't a problem. one example could be. `type` being a thunk. instead of a data property. i'm not really sure since i don't have all of your requirements and codebase in my head :-)", "i personally agree that named imports are better. they can be statically analyzed by eslint to ensure that you're not using an actiontype that doesn't actually exist.", "that's odd - it seems to be using your local npm-installed `eslint`. which is usually the concern. what does `npm ls` output?", "icetbr you're correct - if you have a method that is designed to mutate (something this guide discourages). then you'll run afoul of some of our rules. in this case. you may want to simply disable the rule using an eslint override comment. alternatively. you could do `this.data = getnewtransformedcopyofdata(this.data)`.", "wdhorton what command are you using to run that? any chance you're using `eslint` directly. meaning you're running your global one and not the local one via an npm run-script?", 'uninstalling the global eslint worked. thanks!', "kevingrandon the `eslintrc` file you're talking about is for the package _itself_. and isn't something that anyone should be using or even discovering. the rules the package exports already comply with the styleguide.", 'the solution is to configure `eslint-plugin-import` with your custom resolution rules."what webpack does" is irrelevant - if you deviate from how the standard node require works. you\'re going to have to/want to configure _every_ tool you use - webpack and eslint are just two of many.', "what is `launcher`? any chance it's running a global `eslint` binary? if you do `npm uninstall -g eslint`. and then run the tests. what happens?", "i'd be happy to implement the eslint no-shadow rule in general if desired. unless captbaritone has this on his radar :)", "i was planning on getting to it. but don't have anything started. go for it!## jordan eldredgeplease excuse any typos or terseness; this email was sent from a mobile device. > on jan 17. 2016. at 9:31 am. craig martin notificationsgithub.com wrote:> > i'd be happy to implement the eslint no-shadow if desired. unless captbaritone has this on his radar :)> > --> reply to this email directly or view it on github.", 'guumaster build is green now. sorry i forgot to eslint. also i forgot to look at the contributing.md; i can make a branch if you want. its how we work here as well.', 'eslint to ignore public vendor scripts.', "oh. right `const` doesn't make sense here. and our `eslint` rules won't let that code through anyway. huji do you know where this is coming from? i did a quick search in `src/` and didn't see that pattern anywhere.", "this decision doesn't make a lot of sense to me. if the goal is to be opinionated with no bike-shedding. why are there any options at all? seems like if there is even 1 option (ex. single vs double quotes) then other options should be up for discussion. most people were using standard to fix their code before prettier came along. though i don't care much which way we head (spaces or no spaces before parens). i'd like to see a consensus reached between the two projects. i think a nice separation would be to use prettier to format your code and standard to lint your code. right now they're conflicting with each other and therefore need either double parsing and fixing (e.g. prettier-standard) or custom eslint configuration for each project. both of which aren't ideal.", 'better docs for eslint. most people integrate prettier with eslint. we should put front and center how to plug in the config and plugin projects.help wanted.', "> i know there are ways to to this by using eslint but it is a bit more complex then i would like.```js/* eslint-disable prettier/prettier */```i don't know how you get simpler than that.", 'vjeux cool. nice to hear you are aware and thinking about it. :)chadly yeah that is not bad if you allready have eslint set up. but i use prettier from my editor and many files are not in a project with eslint so that would need to be set up for all 70+ project i have on my work machine. which does not scale or make sense (for me at least). other files are not part of a project but standalone files where some of them should not be formatted. maybe there are other ways to set it up other than per project? do i need do stop using prettier through the editor?weird example: fiddler custom rules scripts file which is js but not quite (fiddlerscript). this language does not support the `"trailingcomma": "es5"` setting which i use everywhere else.jitendravyas ah. nice. i did not see that one. though my use case is a bit different it does make a case for some kind of ignore mechanism in prettier.obviously i would like a solution to contain some kind of comment support so i can ignore the files that create probles for me.', 'our stance with prettier is that we do not change the ast. we just format it. this is best implement as an eslint rule with autofix if you do want it.', 'vjeux yes you are right. when i change it to specify the specific rule i want to ignore. it formats correctly:```type props = {    history: object. // eslint-disable-line react/no-unused-prop-types    muitheme: object}```thanks :)', 'hopefully. this will avoid some confusion', "there is a comment in typescript-eslint-parser:```js// typescript uses objectliteralexpression in destructuring assignment. too```this doesn't seem to be the case anymore. `objectbindingpattern` is used in destructuring assignments. maybe this behaviour is an artifact of this change.cc. jameshenry. soda0289", '`eslint-disable-next-line` (note the **next**) generally works fine for me. that might help you getting unblocked.', "javascript imports can have side effects so it's not safe to do that unfortunately. also. we've taken the stance with prettier not to do those kind of transforms that change the ast.we recommend that those would be implemented as eslint rules with autofix.thanks for asking :)", 'trying to override eslint (using prettier) to use single quotes not double. hi.i have passed command line arguments to prettier so it is formatting the way i want using single quotes.i setup eslint as per the instructions but i can\'t seem to override the quotes rule. it appears to still be coming from prettier/prettier. anyone know what i am doing wrong ?here is my eslintrc```{    "extends": "prettier".    "env": {        "browser": true.        "node": true    }.    "parseroptions": {        "ecmaversion": 6.        "sourcetype": "module"    }.    "plugins": [        "prettier"    ].    "rules": {        "prettier/prettier": "error".        "quotes": ["error". "single"]    }}```i thought i placed it correctly to be overridden i.e.         "quotes": ["error". "single"]', '`"prettier/prettier": ["error". { "singlequote": true }]`', 'thanks simenb', "oh gosh this is embarrassing. i actually made that comparison table a week ago. and this section wasn't there when i first checked this readme then. my bad. do you think there's still any value in the table? there's some stuff about `prettier-eslint` that isn't covered in the screenshot you showed above. perhaps i can remove certain rows that are already mentioned. otherwise. feel free to close the pr.", "thanks for helping out :)i don't think that eslint-prettier is a really good workflow. i'd rather have people disable rules that are in conflict with prettier rather than running eslint --fix afterwards. eslint autofix rules do not take into account 80 columns and we've had many people complain using this setup that the lines would go beyond 80 columns because of an autofix. also. eslint is an order of magnitude slower than prettier.i'll close this. but if you want to improve the wording of the existing section. that would be appreciated :)", "fix json files. awesome work with the json support. we've added it to prettier-eslint too now.it would be nice if we could get automatic fixing of json files too.auto fix of quotes and removing of trailing commas comes to mind.", "+1 for some way to keep comments. our `.eslintrc`s are littered with them (yes. could use `.eslintrc.js`. but we don't. unfortunately).", "multiple glob arguments have weird behavior. example (all files include nesting directories):```shellprettier --write '{**/*.*}.{js.jsx.json}'```but if i want to ignore some directories (example `vendor` - `composer` for `php`). i am use for `eslint`. `stylelint` and etc second glob argument:```shellprettier --write '{**/*.*}.{js.jsx.json}' '!vendor/**'```but it is not work with `prettier`. i can do pr if this accept.", 'could you show which files you expected to be touched. and which actually were touched?', "so you're saying that an exclude pattern makes no difference? if so. a pr fixing that would be great.", 'lydell yep. do pr in near future', "this is likely an issue with something else (maybe an eslint rule with autofix). i'm going to close this issue on prettier. thanks for reporting it!", "as mentioned in the pr. i don't think that it's really prettier's job to do that. a lot of people are using normal js instead of strict json in their json files and we don't want to drop those extra pieces of information. i'd rather make it such that prettier throws when it's not valid than changing the code. thanks for the suggestion though :)", 'the reason i reported is because prettier modifies the code to use double quotes. which results in an eslint error. is there any way this can be avoided?', "i as a user of prettier actually expect some fixes to be done. like quotes and trailing commas. i get that stripping away comments and some other stuff like `infinity` and some ranges. if i understood the pr correctly. isn't the best way to go.however could we get some smaller fixes like quotes and trailing commas.", "standard is a set of eslint rules. some of them with autofix. when you do not comply it's going to warn you.", '> standard is a set of eslint rules. some of them with autofixbut should not i use eslint then. as it has `--fix` option too?', 'i am using atom-prettier - i do not have any other tools that i am aware of. although it is possible that the passing to eslint --fix is doing it?', 'fyi `.eslintignore` works already with `eslint-plugin-prettier`.', 'you should be able to use `eslint-plugin-prettier` and then use `eslint --fix` to get that style.', 'ah of course. i had my wires crossed because my editor "format" binding runs `prettier-eslint`. not `eslint --fix`.', 'azz i use prettier standalone without `eslint`', "steida: at facebook we're doing it via an eslint plugin with autofix. i would recommend going that route instead of inside of prettier.", "we show eslint warnings and autofix within nuclide and before you send the equivalent of a pr. so it's both.", '>  adjust webstorm code style options to be compatible with prettier default formatting style.i don\'t think that\'s a reasonable goal. especially if you\'re using `eslint-plugin-prettier`. which will error if a single character doesn\'t match the prettier output.and as good as a set of rules written in english can be. they will be. by definition. inadequate to describe the full "rule-set" of prettier itself. i think the better course of action would be to do what other editors have done and have a plugin that uses prettier to format your code.', "hi. i have not actively been watching prettier issues for a while (sorry about that) but i intend to slowly start reading them again. first off. kachkaev i highly recommend simply turning off the max-len rule when using prettier. the fact is that the print width is just a recommendation to prettier. and it it can't break something anymore it won't be able to make sure all the code fits within the width. the beauty is that when it doesn't. you don't have to worry about adding a `eslint-ignore` comment on every single place this happens. just turn it off and know that 99% of your code will fit. (think of long strings. and stuff like that that can't be broken up).i think consistency is still a subjective argument. you can provide examples of how it's inconsistent. but frankly we could show examples of how a lot of styles are inconsistent. the important part is how it's used in real code. and the reason why many people like to drop parens on single args is because short inline functions like `x => x.id` are *so* common that it's really nice to drop the parens. the amount of times that i have to go back and add args are few enough that i personally find it a big win.it could be that if you write heavily functional style code. you are dealing with the above inline functions a lot. so this is a big win for that style of code. but if you aren't doing heavy functional stuff. you may not see this win enough. this is the hard part about formatting.i'm not sure we should change the behavior. if you agree with me please upvote this comment. there may be an equal number of people on the other side (although they might not see this comment as much as others see the original issue...). we can evaluate if we should add an option. we should really make sure that we can't decide on a single style though. as said above. the current popular style guides are a strong evidence of the current styles that we need to consider. the airbnb guide enforces no parens on single args. and i know many companies prefer this. this is not a cut-and-dry decision. and we should delay adding options as long as we can (have you tried this style for more than 5 minutes?).", 'eslint.autofixonsave is a great option to autofix your code', "we have parenthesis in our team's common eslint preset (`'arrow-parens': ['error'. 'always']`).  the reasons are similar to what tkirda  rattrayalex and iamstuartwilson have recently mentioned.tastes differ and that's ok. the today's js community has some more or less established formatting standards (mostly influenced by airbnb). but some people may still prefer to change `--tab-width`. `--use-tabs`. `--single-quote` and other options just because they want to. if doing so is fine for prettier. i don't see why `--arrow-parens` needs to be hardcoded forever as something special. what's the philosophy behind this distinction. given so many +1s on this issue? who will suffer if `--arrow-parens` option is added. but remains as is by default?", 'rattrayalex to me airbnb\'s suggestions sounds even more strangely inconsistent than what we do now. why does it matter if the body is a block or not? they\'re probably trying to appease both styles but i think it muddles it even more. i guess it\'s something to be considered though.kachkaev everyone will suffer in a year after we\'ve added "just one more option" a thousand times. the existing options exist because most of them truly affect 50-100% of code and we are forced to cater to existing styles somewhat for adoption (idealy. we wouldn\'t have any options). this only affects a small amount of code relative to the whole file and if we start adding options for things of that scale we\'ll have all of eslint\'s formatting options.i\'m not saying we should close this issue but there\'s a reason we don\'t take adding options lightly. if there\'s a way to decide on a single style. everybody wins in the long run. it\'s possible that adding args if braces exist is a compromise we can do.', "the merging thing was not that important i think. there are not that much options :-)may be worth exploring eslint's glob config. even if typescript and eslint work pretty badly together (at least last time i tried something with both)", 'just pushed another change. makes the overrides api almost identical to that of eslint.```yaml# .prettierrcprintwidth: 80overrides:- files:  - "*.test.js"  - "**/__tests__/*.js"  options:    printwidth: 120    trailingcomma: es5```i don\'t know that such fine-grained control is really required for prettier. but maybe it is better to have something flexible than breaking people if we go for something too simple and need to change it.', 'is it possible to format .*rc files with prettier?. like `.stylelintrc` `.eslintrc` etc.', 'json is supported. yes. ```bashprettier --write --parser json .eslintrc```yaml format is not supported.', "i think the issue here isn't that people can't cope with the change. it's the incompatibility with airbnb eslint.  i've gotten over style changes really fast 4 spaces to 2. semi colons. etc.  we adopted airbnb eslint over night over a year ago at work and we all just said we'll get over it.  and we did and it was fine.  no more worrying about the little things in pull requests.  we love prettier but having to use prettier eslint for one thing is somewhat annoying. mostly because the speed is so much slower.  it's a minor annoyance but we'll probably switch to just prettier and disable the rule on eslint side(along with some jsx formatting differences).even though selfishly i would like prettier to support the airbnb method. i would rather prettier stay closer to gofmt and have very little options.  also side note: who the heck uses no bracket spacing. tabs and 4 spaces?  need some usage statistics here.", 'something like this?``` "lint-staged": {    ".*rc": [      "prettier --write --parser json".      "git add"    ]  }```', 'you should write **strict** json. the error you have is missing quotes `"`.`ignoreatrules` -> `"ignoreatrules"`you should also replace single-quotes in the array and quote strings.and remove trailing commas.if you have. remove javascript comments.', "you mean `tslint.json`?i don't think we'll be supporting this. as we don't do the same for `.eslintrc`.", 'configuration file (`.prettierrc`) format was recently merged (#2434).prettier will look for configuration files starting at the file being formatted. and looking up the tree.should we be doing the same thing for `.prettierignore`? maybe we can even re-use the configuration file for ignoring files. too:```json// .prettierrc{  "ignore": [    "*.min.js"  ]}```i know eslint has two files (`.eslintrc` and `.eslintignore`). but eslint config files can be much more complex than a `.prettierrc`. thoughts?', "azz we should support `.prettierignore` (and allow customize this value). why? in many project i have `.gitignore` where put all files which i want to ignore. i use `--ignore-path .gitignore` for `eslint`. `stylelint` and other linters. if we don't support customize `--ignore-path`. i will have to duplicate all ignored files in the `.prettierrc` and `.gitignore`. it will be extremely inconvenient (sometimes it is many many files).", 'why there is no continuation here? do how to fix the warning in `eslint`?', "add arrow-parens rule to eslint. this comes up a lot in prs. arrow functions with a single argument do not need to specify the parenthesis. so they shouldn't. example:```js[1. 2. 3].map(x => x * 2)// looks a lot cleaner than[1. 2. 3].map((x) => x * 2)```just like you wouldn't for example wrap every assignment expression in an extra set of parenthesis:```tsconst x = (y + 1);```you shouldn't do it for arrow functions if it's not needed.just added the rule and ran `eslint --fix`", ':+1:', "lgtm.  even if it doesn't affect performance. at least we can get rid of that eslint loopfunc exception.", 'tried to fix your eslint problem(didnt work)', 'build(eslint): use eol=lf so eslint passes', 'npm err! tell the author that this fails on your system:npm err!     npm run eslint:test -s && npm run eslint:src -s', "hi! thanks for working on this. what you have is great. the reason the build is failing is because your code doesn't pass our linting rules. could you please run `npm run eslint` and fix all the issues mentioned. then please amend your commit with this changes and force push (so the pr has only one commit). let me know if you need help with this. thanks again!", 'add prettier and eslint. hey. thanks for this great example it is really helpfull  this pr close #88 - move eslint config at the root folder. so now the client and backend folder are linted- add a prettier config compatible with eslint- fix the lint for the client and backend folder- add a git hook that prettier the files before commit', "pradel this is awesome !! i'll do one round of testing and then merge this pr ;)  looking forward to more contributions :)", 'pradel can you please do functional testing of this pr? i tried to test this pr by running it on local and see some errors (attached screenshot in the pr). please let me know if i am missing anything. thankssid', 'pradel i am going to merge this pr and fix the bug in another pr.', 'really nice changes pradel', "prettier isn't really a replacement for eslint.i think it makes sense to use prettier for code formatting while continuing to use eslint for linting. there is a tiny bit of overlap (eg: semicolon enforcement). so they would need to be configured to not contradict each other.i also generally prefer keeping the actual change in a separate commit from the automated reformatting if possible. it makes it much easier to rebase any unmerged commits.", 'chore: add eslint check for missing deps. ## status**ready**## descriptionadds dep checking', "krainboltgreene bablyon doesn't support external plugins (so _plugin_ is a bit of a misnomer here). the `plugins` option takes an array of strings for _built-in_ parser plugins. this pr just makes it easier for tooling (like astexplorer or babel-eslint) to enable all parser options without having to maintain a separate list.", 'i think that everything should be disabled by default. with all these tools (scss-lint. jshint. jscs. eslint). i always explicitly set every option i want enabled because:- i don\'t want to deal with updates changing some defaults- a team member may mistake a lack of setting for an undecided convention- the configuration is now in two places instead of onei think an alternative would be to take eslint\'s lead and have an option that sets up a set of "recommended" lints.', 'awesome thanks. :+1: its best to be as strict with eslint as we can be', 'heh sorry. caught by eslint', "darkdarkdragon looks like it's failing the eslint tests. want me to take this over? up to you.", 'travis fails on eslint', 'jquense docs state that message should be a string value. maybe we should change it to string or function?', "hzoo most of the stuff has been already done (eslint. travis. etc). should be fine then. if i think of something else i'll open an issue", 'hmm. seems like new eslint recognized some new errors...', "keitig here's what we can do:- i can go ahead and fix all the warnings in some reasonable way.- i can only leave eslint update. prefer const fixes. and some other tweaks. and leave these warnings as is. but when we'll be doing some changes. we'll fix these as we go (i'll be doing some components refactorings per todos i left). so that eventually we fix all of them and then we can make 100 chars a hard error.", "so it seems. unless we switch to spaces. most of the multiline jsdoc comments will be messed up.we also need to fix up the tradeshift eslint rules. to make sure we're catching issues that are real.", 'use `npm install --production` to skip installing development dependencies like eslint. this is not related to nodemailer but how different packages that you have installed depend on eslint.', 'just proposal. imposing new eslint rule "object-curly-spacing".. though i\'m not sure about the space on the last line in such snippets:``` jsobject.defineproperty(azurefile.prototype. \'azurefileconfig\'. { get: function() {  return this.options.azurefileconfig || keystone.get(\'azurefile config\');} });```should i re-write them as ?:``` jsobject.defineproperty(azurefile.prototype. \'azurefileconfig\'. {  get: function() {    return this.options.azurefileconfig || keystone.get(\'azurefile config\');  }});```', 'alexkval i like it. thanks - have been looking forward to `"object-curly-spacing"` being released.i do think the second snippet is clearer. yes.', 'you could just say it and i then reformat and `git push -f` it :wink:', 'cool. looks like this is resolved', 'i will be fine merging this if you remove `test`. and the eslint config files. from the `npmignore`.', 'upgrade sl-eslint in master branch', 'added eslint-config-appnexus. ## pr checklist-  ~~~manually tested across supported browsers~~~- ~~~unit tests written (`common` at minimum)~~~- [x] pr has one of the `semver-` labels- [x] two core team engineer approvals- ~~~one core team ux approval~~~', 'unnecessary `babel-eslint` dependency?. for some (to me) unknown reason `ember-attacher` seems to have a dependency on `babel-eslint`. i assume it is due to the use of `ember-decorators`. but it still should not be a prod- and instead a dev-dependency ', 'update archetype component eslint. update archetype component eslinttested on walmartone grocery-search & spinner', "karlhorky when we first looked at electrode. my team and i had the same thought.  but you lose easy updates and turns out a number of the things are easy to extend.my team has gone down the route of just creating npm package wrappers for each of the configurations (eslint. babel. gulp).  we then use jest for testing instead of karma.  my team has access to a private npm repository (we are also using learna for our packages) so it is easy for use to register our wrapper packages.  our wrapper packages extend the electrode configurations where it makes sense and then add our own rules as overrides.  we actually use airbnb's eslint configuration as a base extension.  this is a really nice feature of babel and eslint that you can extend other configs.  then import your teams babel / eslint / gulp packages and put in extend files in your component / app repositories.  then you just use the regular app and component electrode archtypes.for webpack. electrode does a good job in the app repositories at auto extending the `webpack.config.js`. `webpack.config.dev.js`. and other environment ones that are in the root of the app repo.  so you can inject your own aliases and other things. but still getting electrode base webpack config (which has some really nice things). key note: there is no way to override the webpack config in the component archtype. but you dont need to because we are always using them in an app importing the lib files and running webpack there.  you will however need to make sure your babel config in your component packages copies everything you need which is sometimes more than just the js files.in terms of generators. we have created our own because the generators at this point do not have a great place to hook in and extend. also side note: yoeman does not like scoped generator packages. so you can to create your own name that is not scoped.  we started with the generated code for first round then after finding what we were changing we then created our own generator. we are still working through some of the bits and pieces. but we are able to get 90%+ of electrodes magic and still give it our personal touch.this is just what we have done. would love to hear if anyone else has come up with other ways?", 'how to use visual studio and beautify to handle polymer file?. i want eslint my code and beautify my css . html. and js.but it does not work! codes like this:`:host{}<template></template>`', 'chore(meta): add basic configurations for northbrook. adds a simple northbrook configuration to use eslint and rollup plugins.affects: most/core', '.', 'updated and rebased :boom:', 'update eslint config to the latest. fix #78', 'what exactly is this fixing? the current code is not having any problems with eslint that i can tell; the changes. at a glance. appear to be all semicolon removals. but our eslint configuration *requires* semicolons rather than the other way around.', 'there are a couple eslint errors.', "hpinkos updated. ci didn't run for some reason. but eslint and tests are passing.", 'basically the one provided by `lint-staged` docs. but with `esprint` instead of `eslint`:```{  "scripts": {    "precommit": "lint-staged"  }.  "lint-staged": {    "*.js": ["esprint check"]  }}```using `esprint` still lint all files in the folder. while using `eslint` lint only staged files.', "merge esprint into eslint. esprint is the tool that eslint needed to be usable in a fast development workflow. it speeds up a lot the work.that why i think it would be an awesome addition to eslint itself. it would improve the life of many dev and would faster a lot it's daily usage.it could be available via a `--watch` option. like what is available for jest.", 'slim down deps. - use eslint- ditch ava', 'run eslint on components directory. too. missed this one.', 'this is actually failing ci.  must be some change to eslint behavior.', "lint the generator with eslint. use consistent rules with the rest of the repo.note that this required changing to babel's eslint parser to handle the asyncfunctions in the generator tests.", 'doug-wade', 'lgtm [?]', "thanks doug-wade.  dropping the `enhancement` label here.  doesn't improve the functionality of the plugin.  does clean it up nicely. though!  do we need a `devdependency` on `eslint` here. since it's using the binary?", 'gigabo it uses the eslint at the monorepo root. which we prefer because it keeps bootstrap times and disk utilisation low', 'add babel-eslint to walmart config. closes #52', 'baer -- lgtm!', "i do this inside a project folder:```c:\\users\\username\\appdata\\roaming\\npm\\eslint.cmd --config .eslintrc.json --format compact .```got the same issue with eslint-config-google. is there a workaroung for now? can't use eslint for my projects... use windows 10 64bit. if you need more info. let me know it. or whether i have to create the comment to another repo.", 'chris2011 -- try a local install of `eslint` in your project:``` sh$ npm install eslint --save-dev```then add an `npm` `scripts` command like:``` js"lint": "eslint --config .eslintrc.json --format compact ."```then try:``` sh$ npm run lint```in your project and see if that works?', 'ok this works. after i changed my .eslintrc.json file. because my json file looked like:``` json{   "extends": "google"}```thx.', "added method to get series posters. tests & eslinted. i'm in need of this functionality now. and i can't really wait for thisispete to respond to #79 . so i completed the outstanding tasks (tests & eslint) myself. and cleaned up his code a bit.", 'fantastic! thanks for the amazingly fast response!', "mxstbr i've just checked the repository and could not find any mention of `.eslintignore` file. can you point me to it?", "extract tool configs (eslint and others) from package.json. currently configs for eslint and stylelint are located in package.json.this approach helps to reduce amount of dotfiles. but it also hides configuration from some ides and editors.for example. idea family of editors (i use pycharm) support editorconfig. linters and other stuff. but it doesn't look into package.json for configuration.extracting tool configs from package.json will make this starter kit more flexible and portable.", 'this was a conscious decision we made. we favor a clean root folder over exposing all of those configurations.if your editor does not support it. changing it back to the old dotfile layout is a few copy-and-pastes away!', "mxstbr that's exactly what i've done. :)then. probably analize results should be put into some separate folder instead of root of the project..", "es6 class generator eslint disable. the generator for creating components with es6 classes could directly set the `// eslint-disable-line react/prefer-stateless-function` flag so there wouldn't be the need to do it it manually every time.", 'great idea :sparkles:would you consider submitting a pr?', 'es6 class eslint disabling. adding the flag for disabling eslint on es6 classes', "jap made pr #685 - had to change only for the components in the container generator it's already present.", 'thank you braunreuthera!closes #684', 'done in #685. thanks so much braunreuthera!', 'add basic tests + various infrastructure.. * fixes #205 * add the most minimal skeleton tests to import most files and check for rudimentary breakage.* make `bin/webpack-dashboard.js` exportable in addition to being a script.* follow-on real test ticket at #207 * update eslintrc to use `arrow-parens: [error. as-needed]`/cc kenwheeler tptee carlospaelinck', '.', "pygy that one's slightly stalled. and i'm handling any merge conflicts that come up. so any conflicts you run into with that. you can just ignore. it's not actually changing functionality of anything beyond the `.eslintignore` and a couple rules.", 'workaround:```js  const possibilities = math.pow(colours. slots); // eslint-disable-line no-restricted-properties```', "used full paths for tools in npm scripts. no issue- this means i don't have to have mocha & eslint installed globally", "it complained about no eslint & this is how we do this in every other project - hence i added it. might be that i hadn't run npm install tho ", "this didn't work in the past (> 1 year ago) but was added to npm  .", 'eslint errors.', 'please run `npm install && npm run eslint`. then fix the eslint issues and commit them.', 'reinstate max-len lint configs. apparenltly setting the ignorepattern on max-len (as per cf049f2) makes eslintforget the `ignorecomments` and `code` settings from js-sdk. so reinstatethese.', "fix eslint's no-invalid-this rule for class properties", 'matrixbot test this please', "eslintglobals: {'amap': true.'amapui': true}", 'update eslint. bring back no-unresolved. electron imports are now correctly recognized. as a result of doing the lint fixups. i found a bug in the widgets/comms setup (wrong import path).', 'going to wait on upstream eslint config repos to catch up.', 'make eslint happy']