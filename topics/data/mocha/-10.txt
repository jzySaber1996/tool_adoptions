['i also prefer not having to create the extra file. what perfect timing!', 'decided to merge because i anticipate demand will be high for this feature. thanks for your contribution.', 'support `-w. --watch` and `--watch-extensions` args. i often use `--watch` in mocha.maybe this feature can use another method to complete. but usually need to restart electron (it is very slow).', 'add support for mocha.opts. this enables support for `mocha.opts` simply using the original mocha code.thanks for electron-mocha!', "i guess #17 is a problem on using electron-mocha programatically.  this issue occurs only when using electron-mocha as cli tool.  at least `bin/electron-mocha` doesn't propagate exit status now.this program should propagate exit status as below.mocha exits on renderer process -> main process exits -> command line process exits#17 resolves a problem at second one. but the problem for the last one remains.  this pr fixes it.", 'awesome. thanks!', "thank for the reply! i tried the fix and it wasn't an immediate game changer. i have plans to spend more time figuring out the root cause of this issue. but i can't provide an exact time frame. i'll keep this issue up to date as i find time to continue researching the issue.", 'well. i thought the tests were successful but when i take a closer look. i saw that the lambda code are not receiving anything on the event object. locally with the jaws run command it works. but when i upload it. event return {}.this is my request parameter:"integration.request.header.x_mail_list_client_id": "method.request.header.x_mail_list_client_id"in the code i\'m trying to acces it with event.x_mail_list_client_id.joemocha can you show me an example of how to get this header on the code?', "radhomero it works. thank you very much. my problem was caused because i was putting the headers on the requestparameters instead of the request templates like joemocha was suggesting. noob questions: what's the difference between your method and the joemocha method? why this method works locally but not when i upload it to aws?", 'pull recent tsc and mocha', 'amarzavery have you seen this too?', 'lgtm', "infra: intermittent test failures. it appears we're having stability issues again with the mocha unit tests and that some of the `before`. `beforeeach`. and `aftereach` hooks are timing out. as well. i sometimes see an issue with the casperjs test on the splitbutton tests.i think this is related to our switch from private travis to public travis but probably still deserves a look into a better solution than just increasing the timeouts.**edit:**apparently the database calls are just plain slow sometimes depending on the environment. even paralleling them doesn't help. as well. express can take a sec or two to spin up sometimes which causes the one api test to bomb. as a result we probably just need to set a high default timeout for the mocha tests.", "fixed intermittent test errors. fixes #1124- updated default mocha timeout to 15 seconds. any future tests that  depend on a timeout (and thus might be better off with a lower value)  can override the default setting which is now 15 seconds.- removed test-specific timeout overrides for the mocha tests.- fixed the editor/splitbutton tests to wait for the appropriate  selector instead of assuming the dom has been updated immediately.  should resolve intermittent timeouts when checking the splitbutton's  applied classes.", 'do you know why those tests take so long? they seem very slow for unit tests.', "jamesbloomer the main problem is the whole bringing up and tearing down of the db and fixtures before/after each test. this way we're ensuring clean and consistent fixtures. but due to the fact that we use sqlite (by default). each transaction requires opening the file. reading the file. writing to the file and saving the file -- which as it sounds can be very slow depending on the fs.", "gotdibbs ah okay. they're db tests. i'd probably call them integration tests rather than unit tests. maybe a distinction in the grunt task might be useful? so then the fast tests can be run on their own. i'll have a look.", 'multiple sockets share connection. if you create multiple sockets pointing to the same server they will all share a single connection (i.e. when one is connected they all are. when a message is sent to one they all receive it. etc.)note: i ran into this running mocha tests in node.', 'ghirigoro thanks for finding this. let me look into it and send an update.', 'i also got here by googling "nodeunit vs mocha". i\'d like to point out that the op is misrepresenting mocha because the test was written incorrectly. the invocation of `done` should be inside the timeout callbacks. here\'s a corrected implementation:``` jsdescribe(\'test\'. function() {    it(\'should pass\'. function(done) {        settimeout(function(){            (true).should.be.equal(true);            done();        }. 300);    });    it(\'should fail\'. function(done) {        settimeout(function(){            (true).should.be.equal(false);            done();        }. 100);    });});```this is not an argument for using mocha instead of nodeunit. i\'m simply pointing out the error. and therefore the flaw with the logic in the op.', "i'm afraid i'm not sure. i don't use coffeescript. i can reproduce in the casper project. but not the mocha ones (not much use i know).", 'not sure about why mocha is failing. maybe `mongoose.connect(cfg.mongo.uri. cfg.mongo.db)` is in every file which would be reopening the same connection over and over?', 'add basic environment for unit testing with mocha. includes one test for link plugin and `util.js` file containing some helper methods for creating dummy irc-client/network/webservertests can be run with `npm test`', 'also now you could add this project to  and include the badge to readme.md :)', "add coffee-coverage/register for easier mocha testing. it's kinda annoying to have to add a `coverage.js` to every project with the same code that just registers coffee-coverage for mocha tests.  by adding this file. users can get sensible defaults for coffee-coverage without needing to add a registration file to their project at all. just install coffee-coverage and use the following command to run mocha:```mocha --require coffee-coverage/register --reporter html-cov > coverage.html```", "#450 fix for hanging gulp on mongoose connections being left open. i updated the gulp build so that the mongoose connect/disconnect take place in the mocha task based on the lifecycle of the stream. this way. we can guarantee that the disconnect function is always called regardless of if the mocha tests fail or not. i'm also sending an error message to the task callback in the event that an error is generated by the tests. this way. gulp will finish in an error state if the tests fail and will finish in an ok state if they pass. i've tested this with passing and failing tests and the gulp build closes correctly now.", "i'm fine with the change. it's actually what i've been doing in my projects before mean.js added gulp support. what happens when you don't have the error listener?", 'you want to report the error still so that a ci server will be able to see that the build failed if some of the tests failed. karma already reports the error because in the karma task you return a handle to the stream. the mocha task needs to manually send the error back up to gulp since you are not returning the reference to the stream.', 'lgtm.', 'ok this was merged into master since it is just a wrapper. i removed `mocha-with-promised` since i had some issue with running `mocha` and `mocha-with-promised` at the same time. i also wrote some sample code in the example dir. could someone familiar with q review it?', 'when we say `should pass` or `should fail` we talk about underlying **tescafe test**. not the mocha test. is it clear?', 'visionmedia  so this is a mocha bug or firefox/firebug exposing a global?', "it's definitely not mocha", 'is this a feature that should be added to commander.js. or something to be added to mocha?', 'fixes #158: removes jquery include from browser tests. removes jquery include from `test/browser/large.html`also updated unload  in `large.html` and `opts.html` to pass a functioninstead of `mocha.run` so that callback can be run on `end`', "shwaydogg there's a js api now. but it's built to be.. an api haha not a super simple repl thing. if you wanted that why not just use the cli?", "should the browser reporter just append a `<div>` to the end of the body if one doesn't exist?  then it will work even if someone forgets `<div id=mocha></div>`", "mocha.css is duplicated. the `makefile` creates a `mocha.css` in the project root by copying `/test/browser/style.css`. but this isn't used anywhere.  what is the purpose of this?  can it be removed to reduce the duplicated code?", "brendannee we could do things like that but you never know how people will use it. for example what if there's a drupal module that wants to display mocha test output within the admin interface. i dont really want to introduce multiple options for something so simple/explicit (even if people forget it sometimes)", 'awesome :d ideally we have some unit tests. my test/jsapi/index.js is just because i dont have time. so probably something more like the first', 'tests added - should be good to go :)', 'weird git wont let me curl the `.patch`. i was going to squash these into one commit', 'cool - i cleaned up those lines - ya the commits are a mess sorry. curling the patch works for me.', "i can just create a new branch with the one commit. and pull request that. if that's easier for you.", "we have an issue for this. it's a known issue that we need a mechanism to defer mocha for these use-cases", "no clue. doesn't sound like a mocha thing", 'respect --expose-gc from mocha.opts', "before i filed this issue. i tried running my existing qunit test suite using that interface.  it failed. as it didn't recognize the module() api.  closer inspection of that code revealed that the interface only implements some of the apis listed at  and uses different names for certain things (eg suite vs. module).  what i'm suggesting is that if the file you linked to were extended to implement the majority or entirety of the actual qunit apis. this would lower the barrier existing projects using qunit to switch. because they'd be able to run their existing qunit test suite using mocha itself without making (many) changes.", "configure 'slow' property per test. hi! i'm using mocha in the browser.just the same way i can configure a single test 'timeout' threshold:``` javascriptit('should take less than 500ms'. function(done){  this.timeout(500);  settimeout(done. 300);});```it would be great to configure 'slow' threshold as there may be some functions heavier than others. maybe:``` javascriptit('would take less than 500ms'. function(done){  this.slow(500);  settimeout(done. 800);})```cheers.", '+1 from me', 'yeah that should have nothing to do with mocha since node caches require() exports. you would be dealing with the same object each time', "yup. mocha doesn't clean up state for you. and it has no knowledge of third-party stuff like mocking libs so you use the before/after hooks to tear that stuff down. these libs could potentially listen on some mocha events but im not aware of any that do", "thank everything!! i'm your big fan.i will subscribe mocha mailing list.", '+1. because bug tracker is getting cluttered', 'i am running into those too. and often (chai. node. mocha. all up2date).if it should not be happening...it there a test for that in mocha test suite? :)', "feature: add flag to show slow/pending tests. i would be nice if you could just do `mocha --print slow.pending` or something and. even though i'm using the dot matrix or spec reporters. at the end it would output the slow and pending tests.  when you start having hundreds or thousands of tests this would be a real help.  just a thought.", 'allow multiple globals in mocha.opts. i tried doing the following in the mocha.opts file. none of these methods allowed for ignoring more than one global.```--globals "one. two. three"``````--globals one. two. three``````--globals one--globals two```', 'weird ill patch that', "seems ok to me (the first few are from mocha.opts):```./bin/mocha test --globals foo.bar.baz[ 'okglobala'. 'okglobalb'. 'okglobalc'. 'foo'. 'bar'. 'baz' ]```", 'in mocha.opts within mocha i have:```--globals okglobala.okglobalb--globals okglobalc```those work fine for me', 'ah. the difference is that i had:```--globals one. two. three```with the spaces. it does indeed work when there are no spaces between the commas.', 'yeah spaces will cause it to be interpreted as separate args (unless quoted obviously)', "+1 as well.  i'm waiting in a fork that has this patch and would love to go back to mainline mocha.", "i figured out what the problem was for me. it's the same as this issue: visionmedia/mocha#316my callback function had already been executed with the `done()` call inside. and then another function threw an exception which causes mocha itself to call `done()`. the problem is actually just the wrong error output.maybe you have something like that as well? try removing the `done()` callback altogether and see if you have an uncaught exception.", "more reasonable arguments for callback of mocha.run. using the mocha.run callback in js api is pretty useless givin back only the (number of?) failures. so the `cb` in``` javascriptmocha.run(cb);```wouldn't receive anything sensible.usecase would be any of the js-api-using ones. for example running specific tests on request and responding with well... anything but just the number of failures.", 'yup. agreed. the js-api needs work in a few spots still', "should timing badges take into account beforeeach/aftereach?. my beforeeach functions are pretty slow. and sometimes even dominate test time. (i set up test fixture data and initialize an ember app.) but the little timing badges that show up in the browser (above 50ms or so) do not include this time. they only seem to measure the time of the test functions themselves.i'm thinking that it would be sensible for the badges to include the beforeeach/aftereach time.(perhaps there are also other parts where these timings are used. like timeouts -- i'm fairly new to mocha.)what do you think?", "hmm tough call. maybe as a flag or something. i wouldn't want to see them all the time personally but yeah i see what you're saying", "jgonera you don't need to load a url or a webserver with the grunt task. just local html files.i maintain html specs anyway. since i run them in browsers other than a less-than-perfectly simulated webkit. they are also very convenient for debugging. the fragility only comes from changes in mocha's api. which all reporters will run into. i have not run into any issues at all so far.", 'would it make sense to segregate fast and slow tests into separate files/directories and run them separately?', 'nanodeath if you wanted to yeah sure. no reason you couldn\'t. or you could even keep them in context and "tag" them. something like `it(\'should do something slow\'. callback)` and `--grep slow` etc', 'y. not done porting all old tests... you should be able to get a good run with```mocha test/geocode.test.js```', 'right! how could i not have seen this.unfortunately this is only working when invoking mocha-phantomjs from the command line but how would i use this when invoking it programmatically using spawn ?`phantomjs lib/mocha-phantomjs.coffee <page> <reporter> <config-as-json>`', 'running the remote debugger. is there a way to run the [remote debugger]( from mocha-phantomjs?', 'blocked by #32', "add a bare mocha test run to the default grunt tasks. the default 'test' grunt task uses istanbul to produce coverage data from the mocha test suite.  the test suite itself is not executed alone so the results are not visible.  adding a bare mocha test suite run to the test task would improve test result visibility.", '#102: add mocha test call to default grunt task', '#102: added a mocha test task to the default grunt task. resolves #102', 'we still need to be able to pass the reporter in. it looks like this is missing from the new task.', "i'd like to keep implementation code and test code in the same language. there are alternatives to the verbose way of writing mocha tests we currently use.", "> i'd like to keep implementation code and test code in the same languagemost of the contributors seem unable to write tests using the existing framework. if someone submits a pull request. are we going to write the tests for them? in contrast. it's easy for someone with no programming experience to write tests in ruby.if mocha wasn't such an obvious disaster in terms of callbacks then i'd be more open to writing tests using it."]