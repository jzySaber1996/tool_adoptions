["yeah i'm open to it for sure", 'fat this is kind of easy to implement and i can tickle around and make a prstill should it be named devdependencies or optionaldependencies? see jamesarosen comment', 'i see. i was not familiar with the optionaldependencies option in node.still i think we should give priority to devdependencies and implement optionaldependencies later on.', '+1', "inukshuk thanks for the reference! i'll have a look. but at a quick glance i have the feeling this is not going to turn out well... i'm trying to add coverage for non-commonjs files to be tested in the renderer. and already had to hack electron-mocha to pass source files with globals.", 'add check for dom objects in util.inspect().. serializing was very slow before the patch.visionmedia/mocha#525', "reduce test error output in node console. is it possible to reduce test output in node console?use case (i use chai.js with mocha.js): i have a huge object and expect it to have some property. if the property is not there. mocha spec reporter outputs in a console red error:expected {.. huge object on multiple screens... } to have proper ..huge error message. but i'd rather see just line about an error and some info that would allow to identify whats happens but not huge redundant output.", 'that would be great i believe.', 'made a few more tweaks to it. it will only kick in if the inspection string exceeds a length. might need tweaking in the future but its been incredibile helpful for now.', 'the boilerplate issue is more a problem of getting your own conventions together. which in itself is not a concern for such a framework. it\'s easy to have a local template. or a template you host on github etc. "newbies" would of course naturally have a more difficult time at this until they get used to the community and try out what they like (vows. nodeunit. mocha. mongoose etc). express isn\'t the right tool for just having generic crud sites up as quickly as possible. that\'s what rails / drupal and others are for. and in my opinion the rails structure is terrible. it\'s effectively anti-modularity', 'added a branch for mocha tests.', 'i think changing your steplevelplugin initialisation line to``` jsyadda.plugins.mocha.steplevelplugin.init({container: global});```should do thie job', "yes. this is done. turns out the more complex gulp regex i provided doesn't work because of some bash escaping issues. it should be `npm-check-updates -f '/^(?!gulp-).*$/'`. i'll update the readme. thanks!", 'okay. thank you. ;)', "thanks for reporting the error. i'll take a look at it.i don't use mocha with ember a lot. so i'm not too familiar with what changes when calling `before`. what happens if you call `visit('/foo')` from the `before` hook? does the ember test helper exists?", "thanks for the explanation. that definitely makes sense. i believe that splitting the files is not always a solution though. e.g. you might have very few specs which take a very long time to run.i know the issue is closed. but i though of other way to do it and maybe the solution below would make you interested. basically `only` would be treated as syntax sugar for skipping all other tests.the idea is quite simple:- add a first pass test to see if any of the specs has `.only(` (simple regexp would probably be enough)- if it doesn't continue as usual- if it has then preprocess the test files with some simple static code analysis. e.g.input```javascriptvar t = require('tap')console.log('one')t.test('two'. function (t) {  console.log('two')  t.pass('this is fine')  t.end()})console.log('three')t.test.only('four'. function (t) {  console.log('four')  t.pass('also fine')  t.end()})```output```javascriptvar t = require('tap')console.log('one')t.test('two'. { skip: true }. function (t) {  console.log('two')  t.pass('this is fine')  t.end()})console.log('three')t.test('four'. function (t) {  console.log('four')  t.pass('also fine')  t.end()})```would this make any sense?", "emilos you can definitely write such a thing without making any changes to node-tap.  you don't need my permission. but you have my blessing :)i'd recommend _not_ using a regexp.  consider this program:```jsvar o = 'only't.test[o]('only run this'. fn)```", "haha. thanks. i'd probably ignore cases like that. the first pass test would simply check if it makes any sense to make the static code analysis that would check it properly :) - it would be expensive to do it for every test file. it was worth asking anyway. thanks for your time!", 'with tap. the general way to run a specific test. is to split that test out into a different test script.', "this is nearly there- needs to be tested.  also. an option needs to be added to allow users to encapsulate even the reduced set of stuff that's being kept global.  this makes for more annoying. less readable app code. but it would be nice for people who care about this sort of thing (and automated testing suites that complain about this sort of thing. _cough_ mocha _cough_)", "thank you.ah ok i understand. then i have to do a``` jsconst mocha = new mocha({  ui: 'bdd'});mocha.run();```and everything works  but one little question: how do i import `describe` and `it` and so on? a `import { describe. it } from 'mocha'` does not work (`undefined`). if i write `describe` as before without imports (as globals) it complains that it can not find it.", "hmm ok. that's not working as well   i tried a``` jsrunner.suite.emit('pre-require'. global. 'global-mocha-context'. runner);```but where does the variable `global` came from? my browser tells me that it can not find it (`global is not defined`).", 'cb - lgtm. i did not spend too much time trolling thru the mocha tests. please get approval from danbadt before merging to `develop`.', 'tonight i will try to fix one of the found bugs. and describe a process. how i run the test. how i find the bug in the log file. how create new mocha test. and how fix it. hope. it will help us to make this process easy.thank you for the great work you have done!', 'remove "ember-qunit-notifications" from "bower.json". the `ember-cli-mocha` blueprint should remove the `ember-qunit-notifications` dependency from the `bower.json` file after it is installed. unfortunately there is no ember cli function for that. but it should be reasonably easy to implement.', "yup. seems like a duplicate to me.  i suppose the functionality should actually exist in `ember-mocha` instead.  i'll close this in favor of that issue. since we're looking for the same thing.", "i was playing with testem and noticed that mocha and other testing stuff is injected via cdns. so i thought angular2. rxjs and system could also be injected via cdns. if so. i believe we can do `ng new test-project --skip-npm` before running e2e tests. i don't know. maybe this is a bad idea.", 'i would vote against tap personally. and just use json. _but_ either way this would be a nice feature because not only can we decouple but it makes outputting multiple reports (cov. markdown etc) in parallel really simple since you can just `tee` to a few pipes', '+1 for json format as it is easier to consume.', '+1 for json. if you want tap you can just do `mocha --spec tap` which would load the `mocha-tap` reporter.  this could work a bit like consolidate where you have to install the relevant reporter in order to use it. but can then use it simply as `mocha --spec reporter`', "another nice thing with this is that we could easily combine output. right now for example in express i have two make targets. `test-unit` and `test-acceptance`. and they output separate reports. that's not the end of the world but it would be nice to pipe these together and funnel into a single report", ':+1: for me. running dozens of tests in separate processes. would love consolidated reporting for them.', 'we basically just need a flag to tell mocha to defer. then you will manually do `mocha.run()` at some point', "alright.  i just saw above where visionmedia said a merge was forthcoming. so i assumed that was still the case.  for a userland reporter like this. should it just be released as a standalone reporter npm module?  also. how does it plug in to mocha as an available reporter?  is this a built-in api?  i'm new to mocha...but i love me some jenkins graphs :)", 'via something like:```npm install junit-reportermocha --reporter junit-reporter```', "surely that should be called junit-reporter-mocha or something?  but yeah. i get it.  i'll try to extract the reporter from this pull request for my personal use. but won't publish or anything because it's jon077's to publish :)", "doesn't have to have `-mocha` in the name. eventually (we have an issue open for this) we'd like to have all these reporters just consume the json stream. so then they're completely decoupled from mocha", 'hmm did you update mocha itself?', "using mocha with require('mocha'). i'd like to use mocha this way:```var mocha = require( 'mocha' );// run tests in a specific path```but i haven't found any documentation about using mocha this way.i `console.log`'ed `require( 'mocha' )`. but i couldn't really see what was what.", "indeed. docs are lacking :-)thanks for the link! i'll look into this. but it looks like good.about the doc. is there a way i can contribute?", 'great! thanks man', "you're welcome! i didn't add this page to the wiki home page though. i thought you wanted to review it before doing that.", "meh yeah i'd rather keep stuff like that out of mocha personally. the mocking / stubbing stuff can easily be third-party", "mocha can't handle hanging code. if you monitor with:mocha --ui exports --reporter min --watchand the code hangs. mocha shows a confusing blank screenif you press ctrl-c (linux) the terminal is messed up (no cursor. weird colors)and mocha leaves behind a zombie process still running your buggy code.", "yeah i'd like to have this too. at least as a default (so i can still get those callsites if it really is a mocha bug)+1", "have you tried using a mocha.opts file instead of command line params?  mocha.opts goes into your 'test' folder. text file with the following format:--reporter teamcity--ui bddfor command line options in teamcity. make sure you put just 'node_modules/.bin/mocha' as the 'command executable' and place the rest of '--ui bdd --reporter teamcity' as 'command parameters'", "polyfills are no good. that's not the right way to go with mocha. mocha shouldn't influence the env", "makes the ui pluggable alongside reporters. see readme in tests. it's rather straightforward. need it for scones (bit like mocha-cakes but is a ui)", "+1we often have to mock libraries that are required by requirejs and it adds a considerable amount of overhead to the tests. while we'll ideally find a way to optimize this. it's not a high priority and we honestly don't care that much if the tests run for 50-100 ms each. being able to suppress the warnings for these specific tests would be nice.", 'not sure i follow. if there were no exceptions caught by mocha then it should just display them as passing', "make mocha runnable in an iframe. for konacha. we'd love to be able to run mocha inside an iframe. andhave the report rendered in the top-level frame. here is anillustration: actually have this working in my konacha working copy. and it's reallycool and useful. but it needs just a little help from mocha's side towork. this commit makes two small changes:- make the root element for the html reporter parameterizable. (the  default is still #mocha.)- do not repeat the current path in the ?grep urls. it's redundant. and  it messes up the path with an iframe setup like we're trying to do.there are no functional changes on mocha's end.---please merge this? it'd be super-awesome!", "more generally. are you happy for the principles of the pull request? i do think that in the longer term it would be useful to have a way to get the current mocha instance from any code currently running. as it'd remove the need for a ui for anything that is happy dealing with the suite api itself. not sure if it is acceptable in js (globals are bad right?) but it'd remove the need for uis alltogether.", "so. we will not ever be able to test amd modules with mocha? i just started looking at mocha. and can't find how i can test my amd requirejs (coffee) code... it's frustrating when you think you have found the right tool. but then it doesn't support your configuration... require.js is the standard nowadays for the browser. we need mocha to support it +10", 'handle require failures otherwise crashing mocha. on launch. when mocha loads the test files. the whole process crashes if there is a syntax error in any of the fileshere we prevent that by wrapping require in a try-catch. if the require throws an exception. a fake test called loadfail is created that throws the exception at a later time when mocha can handle it.such failure are then presented as any other test failuresawesomeness!this is the fix for #547', "i'd hardly call require.js a standard at all. but i would like to add the ability for mocha to defer execution. mostly for the browser but that will help this case as well", 'not mocha', 'relay signals from the "_mocha" process to the main "mocha" bin. this makes is so that if your test case cases node to crash with a sigsegvor sigbus for example. than "mocha" will have a proper exit code (instead of 0).', "yeah. same problem  here. not just  `mocha test/*.coffee` . `mocha test/` also fails.  seems the problem doesn't come from how \\* is interpreted by mocha", "`mocha tests/*.js` is globbing. that's a shell feature not mocha", "include a js file?. hi does mocha only supports module loading with node?can it be use just for testing a single js fileeg: ```human.js    that returns a  h = new human( name )test.js          it  'should return some names'. ->  h.name```", 'i dont understand the question', 'sorry. my own fault. didnt realise that chai need to be install within the test folder for it to work. was installed it globally', "how to run requirejs modules with mocha tests in terminal. on a tutorial. just source the file and create a namespace and we can run mocha on that test file like so {tasklist. task} = require '../task'    but with requirejs. all the files are wrapped within define(['some script']. function('come callback') {} )how do i require and test the stuff within the define function of that module? inside the terminal", 'a partial solution to this is covered by #326. the automated client-side test generator that eileenchoe has written.  i\'m going to label this with "backlog" and close for now.', 'updated tutorial per new mocha conventions', "there we go :) it should still be hitting all the same code paths in this module. since i'm only testing the marshal / unmarshal and generatekeypair functions from index.js.  everything else was just duplicating tests from the libp2p-crypto-secp256k1 module anyway. so no loss there.btw. i ended up not using rewire. since it wouldn't let me modify the `const keys` in index.js - instead i'm just modifying the object directly in the `before` and `after` for the test.  since mocha tests are run sequentially this seems safe enough. but i could switch to rewire and change `keys` to be `let` instead of `const` if you'd prefer.", 'we can check disable the current csp policy for tests without breakage. if we move the mocha.run. mocha.setup bits into a separate js file. closing this one out.', '```phantomjs --remote-debugger-port=9000 lib/mocha-phantomjs.coffee <your tests> <reporter> <config as json>```', "mocha-phantomjs runs in phantomjs. not node. also you're giving example code from something not `mocha-phantomjs` but i'm guessing some wrapper around it for a node.js build system like grunt or gulp. `config` is hydrated by code running in phantomjs from json passed in the command line.", "add documentation for coverage. awesome package! i've been in javascript testing hell for the past week or so. long story short i wrote my first javascript package and i'm trying to get it hooked into travis and coveralls. i was able to use mocha from the cli but i couldn't cover anything that used jquery in my code. if i went to a browser based solution i couldn't run from the cli. enter mocha-phantomjs. it's exactly what i needed. i'm having trouble figuring out how i can hook into blanket or istanbul though to produce coverage info for coveralls. i'd like to lend a hand and help out here. i'm going to dig in and try and figure out how to incorporate them but i'd appreciate any advice if someone has already solved this problem.", "i doubt you're seeing the issue due to your self signed cert. ever since poodle. people have been disabling ssl entirely. and phantomjs' default is to only use ssl v3  :( so the solution is to use  `--ssl-protocol=any`. we should likely append this by default.right now to pass in phantomjs params is to call phantomjs directly:```phantomjs --ssl-protocol=any lib/mocha-phantomjs.coffee <page> <reporter> <config-as-json>```we should. however. just pass through phantomjs options like casperjs does.", 'update mocha links with new repository and site.. the mocha site now lives at . i replaced all the visionmedia links with the new ones.', 'the pretty formatter should use symbols to show status. currenty the pretty formatter use only colors to show the status of a step (passed. failed. skipped. etc.)but with option --no-colors option we cannot know the status any more.pretty formatter should use dedicated symbols like ""  "" "-" before each step log to avoid this problem. (like mochajs does for example)', "running tests on master gives an error. i've been trying to get the repo setup.. but running tests i get this error```  687) transformation/validation undeclared variable check undeclared:     typeerror: object is not a function      at transform (c:\\git\\babel\\lib\\babel\\transformation\\index.js:18:14)      at run (c:\\git\\babel\\test\\_transformation-helper.js:74:14)      at runtask (c:\\git\\babel\\test\\_transformation-helper.js:145:13)      at function._throws (assert.js:290:5)      at function.assert.throws (assert.js:316:11)      at runtest (c:\\git\\babel\\test\\_transformation-helper.js:157:20)      at context.callback (c:\\git\\babel\\test\\_transformation-helper.js:170:20)      at callfn (c:\\git\\babel\\node_modules\\mocha\\lib\\runnable.js:266:21)      at test.runnable.run (c:\\git\\babel\\node_modules\\mocha\\lib\\runnable.js:259:7)      at runner.runtest (c:\\git\\babel\\node_modules\\mocha\\lib\\runner.js:387:10)      at c:\\git\\babel\\node_modules\\mocha\\lib\\runner.js:470:12      at next (c:\\git\\babel\\node_modules\\mocha\\lib\\runner.js:312:14)      at c:\\git\\babel\\node_modules\\mocha\\lib\\runner.js:322:7      at next (c:\\git\\babel\\node_modules\\mocha\\lib\\runner.js:257:23)      at c:\\git\\babel\\node_modules\\mocha\\lib\\runner.js:284:7      at done (c:\\git\\babel\\node_modules\\mocha\\lib\\runnable.js:222:5)      at callfn (c:\\git\\babel\\node_modules\\mocha\\lib\\runnable.js:277:7)      at hook.runnable.run (c:\\git\\babel\\node_modules\\mocha\\lib\\runnable.js:259:7)      at next (c:\\git\\babel\\node_modules\\mocha\\lib\\runner.js:268:10)      at object._onimmediate (c:\\git\\babel\\node_modules\\mocha\\lib\\runner.js:289:5)      at processimmediate [as _immediatecallback] (timers.js:330:15)```", "i tried debugging but weirdly it doesn't stop on the error.. so just hoping you know what the problem might be...", "it's probably windows.", "sorry for wasting your time then. i'll delete and try again and continue investigating.", 'lukeapage no worries at all. check out the gitter room if you need any help as debugging over github issues is pretty painful.', 'fixed path for mocha tests in contributing.md', 'thanks!', "the tests where failing for me locally for the same reason. seems like `mocha.opts` isn't getting read. so the user-interface isn't getting set. i figured it was something with my local env. so i was running the tests with `-u tdd`. but i guess it's not me.", 'looks like mocha pushed out a faulty release.', "so let's try to adopt babel tests instead of kangax for this. i'll take a look at your fixtures and try to convert some of them to mocha.", 'this is more complicated than just doing `mocha test/core/util`?', "what if i don't have `mocha` installed globally? or what if you change the test framework? it's more straightforward. since everyone should already be running `make test`.:smile:", 'i have added a test script to the package.json. as for the tests themselves: the tests are not complete at all at the moment. i still have to choose a suitable test suite for them (mocha. vows. tap. nodeunit. .... ?). and then update and complement all tests using the chosen suite.you have added a `preinstall` script to the package.json which forces a global install of jake and tap. that might not be a good idea: you force everybody to install these tools on their system. while these tools are only needed for _developing_ the library. not for just _using_ it. besides that. there is no need to install these tools globally when running them via npm (though a global install is convenient). so i would leave that up to the developer itself.']