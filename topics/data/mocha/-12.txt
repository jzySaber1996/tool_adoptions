['is there a way to run electron-mocha part of gulp build?. is there a way to create gulp task to run electron-mocha.', 'use `exec()` or `spawn()` on `electron-mocha`.', '"cannot run in cygwin on windows?. i can run just fine in windows cmd with electron defined and point to the index.js file  ( you\'ll see error messages because i haven\'t passed the proper test directory. but it does work): `electron ""c:\\users\\alamm\\appdata\\roaming\\npm\\node_modules\\electron-mocha\\index.js""``[4352:0902/094154:info:console(0)] made it to index.js``[4352:0902/094154:info:console(0)] [error: cannot resolve path (or pattern) \'test\']`while in cygwin i get absolutely no output...`electron ""c:\\users\\alamm\\appdata\\roaming\\npm\\node_modules\\electron-mocha\\index.js""``---- missing output here.... ------`"', "honestly. not sure. i haven't used cygwin in a long time. i'll leave this open with the hopes of someone else coming along with a solution.", "readme clairifcation: jsdom as prerequisite for testing renderer?. hello there.i've started using your test suite as its really useful.however i'm at a loss as to how to extend the renderer test example that you have included in the repository but by chance discovered that the syntax seems exactly the same as jsdom. i'm aware that what i'm asking might be novice level oblivious but  basically i can use jsdom (below) to create an empty window.document object. which can then be populated with divs or whatever elements you need to mock for your dom testing. the phrasing on your repo makes it seem like this repository is all that is needed for testing elements in the dom. so is jsdom part of the electron-mocha package?```jsdom()it('has document'. function () {  var div = document.createelement('div')  expect(div.nodename).eql('div')})```", "create a file named `test.js`. in it. put the following:``` jsvar assert = require('assert')it('something'. function () {  var div = document.createelement('div')  assert.strictequal(div.nodename. 'div')})```run like:```electron-mocha --renderer test.js```the expected result:```  ??? something 1 passing (32ms)```does that help?", "no. `jsdom` is an emulation of the dom in node.js. if using it. you'll miss out on most non-dom apis (any web api that isn't dom related e.g. websockets. web storage. etc). `electron-mocha` is a real dom using chrome and thus. you get every web api available in chrome.", 'fix tests. some tests are disabled.their are written in expresso format.i converted test format to mocha from express.', 'localized optcpy in lib/dao-factory.js. mocha was indicating that optcpy was defined globally and potentially causing memory leaks. optcpy was changed to a local variable to silence the warning.', "is there a way to add unit tests for this?  since it looks like it will module.export at the bottom. you can just add new mocha tests if there aren't any already.", "i can certainly add unit tests to ensure the regex works. but i'm not so sure about writing tests that incorporate codemirror in mocha. i don't want to have to add phantomjs as a dependency too. fitting as the name is. :)", '"users can change password. closes #282- added a new route- added new methods- triple security!- passwords are actually changed- also added a change password button. because \'save\' has too much baggage.on security: checks whether you\'re logged in. then checks whether your old password is actually the one that belongs to you (gets value from the email field for the email. see caveat no2). checks the new passwords for === and length > 6 on client and server side as well. and then changes passwords.caveats:- didn\'t add a test. as mocha fails spectacularly on my machine. sqlite_corrupt: database disk image is malformed. cute. huh?- because we don\'t have / i\'m not aware of / could not find a ""currentuser"" variable. i need to get the email address of the user we want to change from the email field. theoretically if they replace that with another user\'s email address. and supply their pw. they will change their password instead of their own."', 'merging with #340 open to deal with the major caveat ;)', '"bencevans agree - will look into writing up mocha tests for queuenext()/queuespotify() to make sure i don\'t break anything.chrisgervang - i think the only variable i\'m unsure on at the moment is the ""random"" number that\'s send in the enqueuedurimetadata field. would be awesome if you could report back with what it is on your setup."', "ah. i wasn't familiar with how travis does parallelization.could you either fix what i have on the `testing` branch. or otherwise add the mocha tests so travis runs them? :smile:", 'you can achieve this (or something very similar) now by adding a background to the feature with a step as...# load all hospital. staff. patient. ward. and bed data for middletonsetup middleton hospitalit might be that the step implementation loads this data from a file. or some other data source.if you want to nuke the data after the tests. you can do that with your test runner - e.g. in mocha use the after method.', 'quick thought: the default timeout of a single test in mocha is 2 seconds. so if the timeout above worked it would call `done` prior to that limit.', "this makes sense to me. i think the problem is that mocha just runs the server test files. while the the models get loaded in `config.js`. which is run during the full server process. have you created a pr for this? i think it's worth it. though the changes might need to be coordinated with the generator-meanjs project", 'are you running your tests with `gulp mocha`? if so could you try them out with `gulp test`?', 'hi juancaicedo the test with grunt mocha works fine.but when i want to debug and step through the code using webstorm it gives me this error.', "do you know what command webstorm executes when it runs test? if it uses `mocha <file>`. then it's not running through the normal set up for the tests.", "i tried both in grunt and gulp.in both cases run works fine but when trying to debug it fails on article crud hook.i am not sure why.can you please try using webstorm.i created a gulp task but this also fails.```// run the project testsgulp.task('mtest'. function(done) {    runsequence('env:test'. 'mongoose'. ['mocha']. done);});```", 'cool. thanks for this pull request! i plan to move the tests to mocha anyway. so i should probably do that before merging the domains patch?', 'fix bower packages in blueprints. this represents a small change i find myself making manually to bower.json every time i install ember-cli-mocha in a new project.', 'thank you!', '"remove ""ember-mocha"" bower dependency. as discussed in #96 this pr is removing the obsolete ""ember-mocha"" bower dependency which got replaced by a npm dependency instead."', 'thanks', 'promise are a good idea. would be a big improvement to our current chaining interface. but we should avoid breaking existing interface. there are packages built on top wd-sync. mocha-cloud. wd-parallel. who assume it being a straight async lib with callback. besides some people actually prefer the spaghetti code and i want to avoid rewriting the test suite.not sure what you have in mind. but there are ways not to break the existing interface. like building a q lib on top of it (very easy to build just loop over the webdriver methods not starting by `_`). or centralize the jsonwire config and build the regular async and q method automatically.', "inikulin. it takes about 2 minutes to open saucelabs tunnel and start 4 virtual machines. these actions take place in setup.js. i.e. mocha 'before all' method.", '"error: rule expected but "">"" found.. i get an error when i try to run a test on the following sass mixin:``` scssmixin my-mixin($arg) {  > * {    font-size: $arg;  }}```it seems that the parser doesn\'t like the child selector. is this not supported or am i missing something?i\'m using sass-true with mocha."', '"media queries are computed as \'undefined\'. hello. i\'m trying to test some media queries and i\'ve some issues about it.here an example: ``` scssinclude test-module(\'visibility\') {  include test(\'visibility test\') {    include assert(\'\') {      include input {        media screen and (min-width: 480px) {          display: none;        }      }      include expect {        display: none;      }    }  }};```when i run mocha. i receive this output`""undefined"" equal ""display: none;""`"', "proposed fix to issue #247 (using mocha with node-inspector). it is working well for me. following the path suggested by visionmedianote: this does change the commandline operation of mocha by changing the --debug option's meaningand instead. mapping the previous meaning to debug (no dashes)", "this.callback is a dirty word. when writing specs (bdd interface). writing to this.callback is apparently a no-no because it is overwritten by mocha for it's internal needs.``` coffeescriptdescribe 'something'. ->  beforeeach ->    callback = name: 'good day. sir'  it 'should be polite'. ->    callback.name.should.equal 'good day. sir'```this.callback is no longer the object it once was in the beforeeach as one would have expected.", "renaming internal callback method. proposed fix to issue #259i've renamed instances of .callback to .mocha_callbackthe spec 'http should provide an example' is failing for me. but it is also failing for me on master too - so i don't think it is due to this modification.", 'why are you calling an object callback', '"also the next release will use a context so the only ""reserved"" key is ""timeout"""', 'closing for what was mentioned in the issue', "oops. i included one too many commits in that (didn't mean for 1519ae7 to go in)i'll remove it as soon as i can.", '"the `test` wont be ""this"" anymore so we don\'t need the change"', 'make `npm docs mocha` work.', "+1 for that. i am using several other test harnesses for now. would love to be able to incorporate mocha. the primary reason i cannot is the difficulty of running from an api. would like to see something like:``` javascriptvar mocha = require('mocha');mocha.interface('tdd').reporter('dot').load(object1.object2.object3).run();```really simple to run. would be very powerful: load the interface. indicate the reporter. add an object. run().", "what's the status of this ?", 'that should fix it. i dont use node-inspector if anyone could confirm that would be great!', "not going to worry about it for now but i'll mark it as a feature request", 'higher level js api. would allow people to bypass mocha(1) if they wish. see #136 and a few others', '#265', "deitch yup it wont be difficult. it's already done for the client-side stuff i'll just have to move a bit of the mocha(1) stuff into ./lib and document it", "visionmedia great! will you post it here and/or in the nodejs google group when it is done? love to be able to start using mocha in my projects.kudos.mind if i drop you a direct email 'bout life and business in canada?", "watch option does not reload the actual changed file. running mocha with the --watch option will only reload the tests sources. and never reload changes in the application's source files. it means that it is actually impossible to fix the offending application code while running in watch mode. i assume this is not the desired behavior :-)attached commit fixes this by removing the changed file from the require-cache before re-running the suite.", "they work like node's `--debug` and `--debug-brk` for me", "if you look at the two lines from processlist above. you'll see that i've run `mocha --debug` which in turn ran `node --debug-brk <path-to-_mocha>` (instead of `node --debug <path-to-_mocha>`)", "hmm odd that's not the case for me", 'haha. this is what happens when i dont use the feature at all :d', "actually no. this doesn't fix anything. you're still not require()ing it after. we would have to go through and invalidate all the parent require()s blah blah big hack", "oh i see. we'll when you glob those two times. it expands to all those files twice. and since mocha just accepts an arbitrary list of files it'll add em twice. nothing i can do about that. --watch doesn't take a glob or anything it just grabs `./**/*.js` more or less", "oh. thats a good point! yeah. guess this would only reload changed files as long as they are require'd directly from one of the tests.anyways. that means the watcher feature is still kinda broken. any ideas on how to fix it?", "we'll have to walk the `.parent` properties and kill the cache for all of them", 'yeah that would be fine too. no point with the while/shift though we can just foreach them', "this working for me. important: node-inspector doesn't play well with just plain old `--debug`. you need to use `--debug-brk` it seems to give things time to connect or something.", 'no longer relevant.', "mocha should be able too catch those. is your function catching immediate errors and not passing them to the callback? if mocha is not reporting uncaught exceptions it's a bug", "i will take a closer look and update this issue with any new info. my asyncfn is completing and calling its callback. but when the asserts fail i am not getting the details only a timeout. i can comment out that single assert and everything passes like i would expect. even just replacing my failing assert with assert.equal('foo'. 'bar') in my function still only gives a timeout. the async part of my asyncfn comes from using jsdom to create a new window and load jquery. would that explain anything about why mocha wouldn't be able to catch the async error? (it is not failing in any of that. only in the assert after everything).surprisingly if i create a simpler test which just uses process.nexttick then mocha reports things properly as you had mentioned.so could it be related to using jsdom and its jsdom.jquerify?let me know if you have any ideas. i will update this issue if i can figure anything more out.thanks!", "i guess it is not exclusively a problem with jsdom because when i run the test in the browser (where it doesn't need jsdom) and simply put the code in a settimeout to make it async. mocha doesn't catch the exception either. it reports script error in the mocha report and if i open the javascript console. i can see uncaught assertionerror.... so something is preventing it from catching assertion error in the browser too.", "sorry. had a syntax error that i overlooked.  is there a way that i can test `post`. `put` & `delete` and send data along the request by modifying your above example?are you guys sure that this can't be included or at least mentioned in in the documentation? i absolutely pulled my hair before i found this post.performing response-testing probably is what many people are looking for and it's a shame that they choose a different testing component when mocha seems so mature.", "theindustry there's no reason to package it in mocha. it's unrelated to the client-side and it's not the be-all end-all solution for testing http. eventually i'll be recommending visionmedia/superagent for testing http related stuff but it's not quite there yet", 'visionmedia do you mean that in the browser you see the assertion details in the mocha report. or do you mean that you only see that the test case failed and the details are script error (and you have to go to the developer js console to see the actual details)?', "remove hard dependency on growl for test suite. currently mocha's own tests won't run without growl. because the checked in test/mocha.opts includes `--growl`.i could change the mocha.opts locally. but i don't like being stuck with outstanding changes. i could install growl. but it's a lot of effort (and i don't actually want it).perhaps the --growl option should have no effect (and print a warning) if require('growl') fails?", 'does mocha not capture the stdout of the tests? i figured it did and just passed it along to the console.', '- is there any guide about integration of mocha/node.js + ci server ?- is mocha intended to run in standalone mode by node.js without any browser/html pages and providing reports to ci servers. like jenkins/hudson. bamboo. teamcity etc ?', "yeah it would be nice if we could just have it fail silently since it's not a crucial thing. no warnings", '86c05707e2e83f9a1de2eaf41e2a84f6c00b827f is my fix. although it logs a warning. should be easy enough to remove that line though.', "json-cov reporter should not print report to stdout. hi.when running `mocha --reporter json-cov`. the coverage report is printed to `process.stdout`.the consequence is that logs are mixed with the json coverage report. we are not using html-cov.this forces us to parse stdout content and separate logs fron the json report. it's dirty coding and pretty much unreliable.mocha could take an extra parameter like `--file <filename>` so that we can separate logs from reports.thanks.- nicolas", "why do you log in your tests? that's bound to look a bit nasty regardless. or why not use a separate stream for your logs?", "we are generating logs both in the tests and in the application that is under test.we do this because it gives more information when a test fails.it makes sense that logs are redirected to stdout. i'm not sure it's a good practice to redirect json reports to stdout however.i'm surprised to be the first one to stumble upon this issue. is nobody generating logs in their application ?edit: by the way. thanks for answering so promptly :)", 'most people make the logs conditional. it would mess up any test runner output pretty badly. anyway though currently jscov/htmlcov are just regular reporters so they output to stdout like the rest. but we could possibly add support for multiple reporters and allow the user to specify if they output to stdout or to a file.', 'has anything been done on this?', 'leeolayvar not yet', 'is there any documentation. anywhere. on setting up a mocha test suite from the (low-level) api?', 'added possibility to ignore leaks in browser usage. hi.i refactored the run method to handle options. doing so i moved the currently passed reporter to the options and also added the possibility to ignore leaks via the options object.in the browser you can now use the following:```<script>  $(function() {    mocha.run({      ignoreleaks: true    })  })</script>```with best regards.sascha depold', 'i think whitelisting globals is a much better option.', 'yeah. i think we need the option of a function that can act as a filter on those.your tests would be a ton better if instead of ignoring all globals you could ignore `jquery*` ones.', 'true. that would also help a lot :) but as you have this option for the command line tool. it might be cool to also support it in the browser?', 'sure but the implementation would be setting a `false` lambda for that filter function option.', 'wouldnt you want to run that the browser anyway', "i'm running a subset of the unit tests in jsdom continuously during development. then manually running the full suite in browsers before a release.", '^ gives you the benefit of concurrency as well `make test -j4` etc', "interesting. i'll give this a shot since i need a makefile's easy access to my scripts anyway. thanks!mind you. this is part of a larger build system that does things like jshint for syntax. compile stylus and minify the source before running the tests. that's why having the whole thing written inside a node.js module. using an api provided by mocha makes the most sense to me.", 'sure. but at least until there is a js api', "agreed. and p.s. - i <3 the flexibility of this test framework. it's the least opinionated one by far.", 'sooooo. any chance to get this merged?', "can i see the code you are using? not sure what you mean. mocha's require should not be exposed. but mocha itself should work", "added browser setup options. the problem is that the place of a setting is scattering.ui setting is `setup()`. reporter setting is `run()`. globals setting is `runner.globals()`. timeout is inner testing `this.timeout()`.this patch can be `setup()` arguments all settings.for example.```mocha.setup({  ui: 'bdd'.  globals: ['okglobala'. 'okglobalb'].  timeout: 1500.  reporter: mocha.reporters.tap})```", '"so using the trick above. the browser support is ok. i think it could be nice to update the page. and i think a ""getting started"" could be really interesting (i can help).i\'m pretty new to node.js env and running mocha for my project (a small js library) wasn\'t that straight forward."', '"looks fine to me. definitely an improvement for now. when i work on the node js-api i might end up tweaking it a bit since i typically like ""higher-level"" objects/methods over options but not a huge deal"', 'hi dhendo. will this kill the build if errors shows up during the test?', "it should. report the errors in the tap reporter in jenkins.i've actually moved to using the xunit reporter now - i found it integrated a bit better with the other tests that i'm running.", '"callback to \'visit\' trapping exceptions. it seems the callback argument to `browser.visit` is trapping exceptions that happen inside the callback.  consider this mocha test:```browser = require \'zombie\'describe ""trapping thrown exceptions in callback"". ->  it ""should throw \'oh no!\'. but traps the exception and times out instead"". (done) ->    browser = new browser()    browser.visit """". ->      throw new error(""oh no!"")      done()```this behavior seems to have started with the addition of \'promise\' style (commit dadf66397cc3cc687a11c226b00121a284e3bb57)."', "the idea is fine. but i can't merge the change as it is.unfortunately the commit highlights a full rewrite (-129 lines. +132 lines) of the class. while the change are just a few lines. could you redo the change modifying only the selected lines?moreover. could you add a simple mocha test for this functionality?", '"3 issues after i did the installation and run the command "" npm run test"". 1) iotfgateway .connect() ""after each"" hook for ""should throw an error if instantiated without config"":     typeerror: cannot read property \'call\' of undefined      at callfn (d:\\ideaprojects\\sensor\\iot-nodejs\\node_modules\\mocha\\lib\\runnable.js:326:20)      at hook.runnable.run (d:\\ideaprojects\\sensor\\iot-nodejs\\node_modules\\mocha\\lib\\runnable.js:319:7)      at next (d:\\ideaprojects\\sensor\\iot-nodejs\\node_modules\\mocha\\lib\\runner.js:298:10)      at immediate.<anonymous> (d:\\ideaprojects\\sensor\\iot-nodejs\\node_modules\\mocha\\lib\\runner.js:320:5)  2) iotfgateway .connect() uncaught error outside test suite:     uncaught typeerror: cannot read property \'currentretry\' of undefined      at d:\\ideaprojects\\sensor\\iot-nodejs\\node_modules\\mocha\\lib\\runner.js:531:27      at runner.runtest (d:\\ideaprojects\\sensor\\iot-nodejs\\node_modules\\mocha\\lib\\runner.js:424:5)      at d:\\ideaprojects\\sensor\\iot-nodejs\\node_modules\\mocha\\lib\\runner.js:528:12      at next (d:\\ideaprojects\\sensor\\iot-nodejs\\node_modules\\mocha\\lib\\runner.js:342:14)      at d:\\ideaprojects\\sensor\\iot-nodejs\\node_modules\\mocha\\lib\\runner.js:352:7      at next (d:\\ideaprojects\\sensor\\iot-nodejs\\node_modules\\mocha\\lib\\runner.js:284:14)      at immediate.<anonymous> (d:\\ideaprojects\\sensor\\iot-nodejs\\node_modules\\mocha\\lib\\runner.js:320:5)  3) iotfgateway .connect() ""after each"" hook for ""should throw an error if instantiated without config"":     typeerror: cannot read property \'call\' of undefined      at callfn (d:\\ideaprojects\\sensor\\iot-nodejs\\node_modules\\mocha\\lib\\runnable.js:326:20)      at hook.runnable.run (d:\\ideaprojects\\sensor\\iot-nodejs\\node_modules\\mocha\\lib\\runnable.js:319:7)      at next (d:\\ideaprojects\\sensor\\iot-nodejs\\node_modules\\mocha\\lib\\runner.js:298:10)      at immediate.<anonymous> (d:\\ideaprojects\\sensor\\iot-nodejs\\node_modules\\mocha\\lib\\runner.js:320:5)"', "that timeout is to tell mocha-phantomjs how long to wait for mocha to start before aborting early. as if for some reason a bug on the page caused `mocha.run` not to be called. your process won't hang.you can set mocha's timeout programatically via `mocha.timeout(30000)`. and you can also set individual test or hook timeouts via `this.timeout()` when in the hook.i wasn't aware of this and initially thought the same as you. maybe we should support `mocha.opts` like node.js?", '-g option. mocha has an option to filter tests using a regex pattern. it would be great for mocha-phantomjs to include that option.```    -g. --grep <pattern>            only run tests matching <pattern>```', 'we should include that as a command line parameter. for now. you can grep via the the querystring parameter:```mocha-phantomjs tests.html?grep=<pattern>```pattern likely needs to be url encoded. not convenient or intuitive. so the command line option is better.', 'provide makefile example in documentation. a common way to run mocha tests if via a makefile.  it would be great if an example of how to do this with mocha-phantomjs was documented somewhere. in particular if we want a custom task that npm test.js would not let us do.', 'to repro this issue you can just run ```mocha -t 60000 test/functional/selendroid```i think anytime you switch apps it will break.', "ok. with the modifications in #643 so far. things kind of work. where they don't work is that selendroid opens up the wrong app.when i run this```mocha -t 60000 test/functional/selendroid```the first test finishes ok. but the subsequent tests (which are supposed to open another app) fail because the first app is opened instead. all the app package names and paths look correct. what could be going on? some kind of bad manifest inserting?", '`mocha -t 60000 -r spec test/functional/uicatalog` should do the trick', 'this looks good to me as long as the simulator-based safari test suite is passing (`mocha -t 60000 -r spec test/functional/safari`)', "we have this test in webview.js:``` js  it('setting window should work'. function(done) {    h.driver.windowhandles(function(err. handles) {      should.not.exist(err);      handles.length.should.be.above(0);      h.driver.window(handles[0]. function(err) {        should.not.exist(err);        done();      });    });  });```i just ran it and it works. so somehow there's a discrepancy between the javascript bindings and the java bindings. or there's something else going on in your appium setup. are you able to run this test successfully? start appium then in the appium directory. run `mocha -t 60000 -r spec test/functional/webview/webview.js` to run the tests in that file.", '"interesting. however the mere presence of 500 responses doesn\'t worry me as some of those tests check for the error case. what happens if you run this:```mocha -t 60000 -r spec test/functional/webview/webview.js -g ""setting window should work""```in order to isolate the test case under consideration. do you still see the 500? i don\'t on my system."']