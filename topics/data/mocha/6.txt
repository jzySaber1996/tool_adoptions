['enhance ci test stability. enhance mocha test runner to accept .env file for local testing. and add session management not to override the test data in testing org.', 'are you perhaps opening windows in your tests which are not being closed? i remember having issues with cleaning out the temp folder on windows when i forgot to close windows (in addition to the one managed by electron-mocha)', "well. have you installed the electron headers for your target platform and rebuilt (e.g.. with `node-gyp install` and `node-gyp rebuild`)?(closing this issue as it's not pertinent to electron-mocha itself).", "so if `electron-mocha` isn't for testing an electron app.... what is it for?  i've been torturing myself trying to get spectron to work. but it's so many steps removed from my main process that it's getting to be a pain (to do things like click on a menu item. for instance).  i'd rather run my tests from within the main process.  is this something `electron-mocha` can do?", "i use `electron-mocha` for *unit* testing an electron app; you can also use it in `--renderer` mode to test web apps -- but i use for an electron app. i think the op was looking mainly for a way to write integration and ui-driven tests for an electron app. but `electron-mocha` does not provide much help in that regard. basically. what it does is. it runs mocha in an electron main or renderer process. this way. you can unit test all the code of your app in the right environment. if you're used to writing unit tests this is probably what you're looking for. nothing hinders you to write integration tests (i.e.. open your entire app in a window and instrument it etc.). but you'd have to do all the legwork yourself.", 'fixes mochatest:docs. includes code from pr #705', "crosseye: we get this one in and i'll be good to start on the doc page upgrades.", 'robotlolita yeah. the issue is from jest. i think. i tried same test on mocha. it is fine. i will update if i solve the jest issue.', 'this is also happening when using mocha. some tests are creating temp dirs. which get removed normally when the process exists naturally. but not in the ctrl+c signal. this should be as simple as adding a listener for the ctrl+c signal. and then performing the cleanup action on that signal in addition to the exit signal. right?should also note that `tmp.setgracefulcleanup()` was required to be called to clean up async temp dirs. even though `unsafecleanup` was used in the options (might be a separate issue: calling `unsafecleanup` was not sufficient to get the library to cleanup the temp dirs).', "can anyone confirm? i don't have a windows machine to check", "i rebased.i'm now getting a strange windows-only failure in which the `beforeeach()` callback in test/router.js doesn't run before one or two of the tests. causing `router` to be undefined.running `mocha test\\router.js` only makes those tests work fine; i'm trying to figure out what's going on.", 'async.race() method. based on the discussion from #568 .contains mocha-based tests and readme update.', 'megawac should we merge this now. or wait until the modularization is complete?  (that branch is almost ready to be merged. just some package questions remaining).', 'aearly megawac i could send a new pull request against the modularization branch and close this one. what do you think?', 'that would be really helpful.', "thanks for the pr. looks good!two requests:1) let's call the option `authncontext` instead of `authenticationmethod`. since that's the underlying saml name.2) please add a mocha self-test for this behavior.  (probably an additional entry in the 'captured saml requests' group)", "did some testing and i don't see any issues with this. can you squash your commits?", 'great. squashed. thank you.', "side note: why is the mocha timeout 10 min? isn't this a bit high?", 'dignifiedquire could you make this pr be a pr from a branch on this repo. please? thank you :)', 'why not a global config in `test/setup.js` or directly passed to mocha?', 'auto generate api.md using mocha. replaces #105', 'diasdavid done', 'i took out the local timeouts (i went through it because when i went through docs. it was only specified test and suit level timeouts  can i set timeouts in karma?~~ figured out :)', 'ready to merge. it is not the most beautiful documentation ever. but certainly has more information than what we have now. any thoughts? merge and release?', 'sorry to scratch an old itch. but i am facing the same problem trying to run mocha -w with mongoose. tried every possible solution but now i am hitting the wall. where should i put ``` js mongoose.models = {}; mongoose.modelschemas = {};```?beforeeach. aftereach. after. before ?should i mongoose.createconnection() on beforeeach. close on aftereach ?', "i put the```mongoose.models = {};mongoose.modelschemas = {};```right after```var mongoose = require('mongoose');```in a `config.test.js` file directly in the `test` folder (`config.test.js` the only `*.test.js` file in the test folder. other `*.test.js` files are in sub folders). as mocha go recursively ( `--recursive` option in `mocha.opts`) through the test folder. it starts with `config.test.js`.", "jamestalmage thanks i may use that. sorry didn't see your message until now. but may prove useful - one question though - if you have a stack-trace. you are supposed to put that as the argument to `yaml()`?", 'will do.', 'betolink flagging this as a feature request', 'using sails models for testing outside of the sails app. there is a way to take my sails models and use it when testing the app via mocha or jasmine?. actually i am doing some unit test where i need to create fake data before running the tests and then when i finish erase this data to keep the database clean.example: - save user with id 1- test if user exists when listing for user/:id- erase user with id 1', "nice. i am new with sails i didn't know i could lift sails that way. always thought it could only be done via the cmd. thanks for everything!!.", "testing sails i have stumbled upon the need to set a flag to indicate that sails has started lowering. i'm not sure if this should be in the core. but consider this as an addition to this feature request: provide `sails.lowering` flag when `sails.lower()` is called.fyi - use case: when running tests. sometimes errors in tests trigger mocha's after all hook. which for me calls sails.lower(). however. then it also calls done() multiple times and thus. hides the real error. checking a flag before starting lowering can avoid this.", 'what are the instructions?. ember-mocha sends me here to follow instruction about how to install stuff but there is nothing here.do i still need to install ember-mocha itself?how do i setup my tests?', 'mocha:  3194 passing (13s)index.html: passes: 3166', 'code: ackmocha tests: 3194 passingindex.html: passes: 3166', '`--grep` works for me', 'feature request: support mocha. it would be great to have an option to use `mocha` and `chai` (and `sinon`) instead of using `jasmine`.', "i'm not 100% sold on officially supporting mocha; i think we should stick to support 1 testing framework and if you want to use another it's on you. i'll chat to devrel about that.it's great that it works though.", 'fix(deps): update mocha dev dependency. removes two dev install deprecated warnings.tangentially related to #3889', "ah. that's what i thought. the error is not from mocha. it's from jshint. the lint task is complaining as suite and test are globals. you need to configure jshint to be ok with these globals.", 'can you post your current gruntfile - maybe you have the paths setup incorrectly. mocha uses the require cache so if you run tests on a set of files once and then try to run tests on the same set of files again then it does nothing (when in the same process).this is why in the above gruntfile i have specified copying everything for coverage to a `lib-cov` directory and running tests on those files. then when you also run tests on the original files without coverage mocha does not hit the require cache because they are different file paths.', 'invalid require cache to allow multiple test runs in the same process. this fix a behaviour causing grunt-watch with "spawn: false" option to play badly with grunt-mocha-test. this fix should hopefully make things better.', "yes. you're right that this could be achieved using a task that clears the cache before the mocha task in watch.i also believe that the problem i ran into was very hard for a beginner to understand. i was trying to use the watch event to only run modified tests (our test suite is becoming long and it's a pain to execute every test each time). first time it worked. second time (and following). 0 test passing was reported by mocha...thus i believe this should be standard behaviour to help beginners. adding an option to turn it off might be a good idea though.what you told about wiping the whole cache instead of only the tests cache makes a lot of sense to me. it was indeed wrong to only wipe part of it. this obviously needs to be rewritten.will you consider it if i make those changes ?", "ok. if you add it as an option and clear the whole cache.however. i don't see how this helps you achieve your goal of only running modified tests.as for beginners. i would counter that you would not run into this issue unless you change the watch defaults which a beginner should probably not do without understanding the require cache ;)i would also prefer to not make it default as it would impact any existing projects (backward compatibility!) although i think a big warning in the readme about using watch without the spawn option would be good.", "i'm sorry. it seems i was not clear at all about this point.to run only the modified test. you need to listen the watch event that is sent by grunt-contrib-watch. then you just modify the configuration of the task that will be run shortly after to only include the proper files in the source list. but for it to work. you need to add the spawn false option as stated in the documentation.since this is properly written in the documentation. any beginner in this situation might add this option. here is the relevant excerpt of the doc:```if you need to dynamically modify your config. the spawn option must be disabledto keep the watch running under the same context.```this can be found in the _compiling files as needed_ section of the documentation.but. maybe if we document the option well. we can make it opt in. i'm still thinking that better working in all cases. albeit slowly in some instances. that not working at all in some. the option would only be used to improve perfs where it makes sense (and i believe you are in the only use case : running two reporters on the same set of tests one after the other).am i saying rubbish or does it makes sense?", "btw. you need to add tests for this stuff too! i can't merge this without tests", "no problem for the tests. but i'd rather finish our conversation on how to do it before getting further on this path ^^. i'll make a full blown pr after we figure out the best way to do this.", "ok. i see - i wasn't aware of that section in the watch documentation. personally i think it should come with a warning but it's not my project - i think i'll drop them a note.however i still don't think it will work reliably for tests. for instance if you change a source file but not a test file (which should be very common in a tdd workflow) the source file will be added to your config but not the test file. in such a case as the source file does not contain tests it will be ignored by mocha (i think/hope) and no tests will be run. have you successfully seen this pattern work?as far as i can see this pattern only works when you change test files.", "oh yes. the watcher on the watch has to be a function. i. chose to write this:``` jsvar defaultsimplesrc = grunt.config('mochatest.simple.src');grunt.event.on('watch'. function(action. filepath) {  grunt.config('mochatest.simple.src'. defaultsimplesrc);  if (filepath.match('test/')) {    grunt.config('mochatest.simple.src'. filepath);  }});```this adds only the test when it was a test file that was modified. but all tests otherwise because we don't know what are the dependencies... this works very well.", "i see. that should work. although i suspect you will be running all tests most of the time. it's better than no filter at all.with regard to the default behaviour. i still feel quite strongly that it should be an opt in thing with clear documentation so as not to require changes to existing projects (of which i personally have many that it would impact)", "ok. then let's go this way. i'll try to work on it tomorrow.", "that's awesome dude. i'll most likely merge it and make a new release this evening (if not sooner)thanks :)", "you're welcome :)", 'any news on this one? i admit i would like to use it asap :p.', "yeah. very interesting thoughts. i believe that if you use the require option and that somehow the package you put there is for single use. you are in a pitch. but it's the user's choice. he probably can put requires in his tests to get around this properly. global is a bad habit anyway. as you stated.thanks a lot.", 'actually i was thinking about problems with globals in 3rd party libraries. i first ran into issues with watch a long time ago (before the spawn behaviour was added) when using the `mongoose` module. spent a lot of time scratching my head :)', 'added rgba filter. issue: #79 also update `gulp-mocha-phantomjs`', 'lavrton i need this pr too', 'lavrton any feedback?', 'tremendous effort (for real) but... would you mind to include only relevant code into this pr? there are so many changes. if you want to refactor code. please. decouple those changes from this very pr.', 'hello. guys. i was out of computing during long period. now i am back. very soon i will review pr. thanks.', 'allow specifying different combinations of bundled frameworks libraries(mocha. chai. jasmine. qunit. sinon. buster). currently. the `framework` field in the config file has been piggybacked to allow direct out-of-the-box testing with mocha and chai using `framework: mocha+chai` - a common use case. but what about sinon? maybe other spys and mock and assertion libraries? we can\'t jam everything into the `framework` field anymore. need something more flexible. perhaps```frameworks:    - mocha    - chai    - sinon```for the special case of chai which has multiple "interfaces" (bdd|tdd|qunit). it might be worth it configure the interface here using some sort of special syntax. perhaps steal the `!` from require.js.```frameworks:    - mocha    - chai!tdd    - sinon```', 'tests are counted and reported twice when using mocha. since commit 721babb5d4c1534bc1eb7a9ea5dcae64d1d78e89 tests are counted twice and failing tests are reported twice when using mocha. for example this single test using mocha+chai will be reported as having 2 failing tests out of 2 tests total.``` javascriptvar expect = chai.expect;describe("the test". function () {  it("should pass". function () {    expect(false).to.be.true;  });});```the failing test is printed out twice (with an undefined title in the first case).```undefined     expected false to be truethe test should pass      expected false to be true```', "declare var test on global scope issue. great to see typescript definition files with the package.unfortunately. we're having issues in a project that also uses mocha. both libraries have a `test` declaration on global scope. so typescript is throwing the following error:```error ts2403: subsequent variable declarations must have the same type.  variable 'test' must be of type 'testfn'. but here has type 'itestdefinition'.```in `testcafe` package:`declare var test: testfn;`in `types/mocha``declare var test: mocha.itestdefinition;`it's global scope all over again.i would prefer to import `test` from the testcafe package. or is there some other solution to this?", 'jvanoostveen can you just filter out mocha tests from testcafe source files?', "the error is raised during bundling. typescript will load all the definitions it can find (or so it seems).during the bundling. neither testcafe or mocha code should be touched or loaded.there are in the bundled code. no references to either mocha typings or testcafe typings. so i'm quite puzzled on why this error even is an issue. the typings are irrelevant at this point.", 'did i get it right: you are bundling production code and during compilation of the production code you get complains from ts compiler about mocha and testcafe tests?', 'yes. except. i get the compiler error not on the tests. but on the definition files.', 'do you require/import testcafe or mocha in your production files?', "hey guys. i'm encountering the same issue while using mocha and testcafe in the same project. i'm evaluating testcafe for end to end testing and have `types/mocha` in my project. any ideas on how to resolve this?", "the problem is that both mocha and testcafe are polluting the global scope (i'm guessing this is for good reasons). in such first glance. i would dump mocha and live with testcafe. while bringing a mocha replacement. then again. i have no idea what are your project concerns and why you use mocha.", "polluting the global scope. looks like we're back in the early days of javascript...i would rather have it that only core js is on the global scope. all else can be imported.", 'use both of mocha & testcafe. would like to have some viable workaround.', "can someone share their setup? i still don't understand how both mocha and testcafe tests are mixed up and why they simultaneously compiled by ts and what production code bundling has to do with it all.", "carljm are these all different issues that result in a similar error message? if so. we should rename this issue. and open new ones. i'm not sure how to track these down. since the error is coming from mocha.sir-dunxalot can you do a manual sass compile of the tests (not through mocha) and paste the resulting css output? that might help give me some more clues to work with.", 'guys. how about `mocha --recursive`?', 'hey. visionmedia. could we get some love from you here?there are basically two new features in the pr. i tried to implement them in the least intrusive way. and they are backwards compatible as they should be.first. `done` accepts a function. which is immediately executed inside a try-catch block. this will catch async assertions errors and always report them correctly. even if you are running inside a browser. i think this is specially useful for tests that have to run in a browser. i tested in phantomjs. and it works just fine.second. another function will be passed to all async functions. its suggested name is `dotry`. as in any extra arguments passed to functions in javascript. it will be ignored by any tests that only declare `done`. it receives a callback function and returns an equivalent function that will now catch assertion errors and report them to mocha via `done(error)`. its purpose is similar to the first feature.the two features are independent from each other. if you like one but not the other. i can change the pr. even though they are both useful for separate cases.', "park9140 maybe the `skip` object could just be passed to `done`?wrapping `it`'s callback in something like `unless` might add some complexity if determining whether to skip the test is an async operation. you'd end up making `unless`'s first parameter a callback. and then passing a `done`-like callback to that. and then the logic inside `unless` would start to mirror what's already happening with `it`.passing a `skip` exception to `done` would handle the async case. and give `done` a way to determine whether the test has been skipped or passed. i'm not familiar enough with mocha's internals to say whether that's more or less complex to implement. though.", 'added shim for array.prototype.indexof() so mocha.js will run in ie7/8', "if you shim in this way you will leak this functionality from the test suite into your tests.  so tests that would have previously failed due to use of `array.prototype.indexof()` will now succeed.  for you this may be desired functionality but for others they will end up with invalidly succeeding tests in ie 7/8 if their production environment doesn't have a shim for indexof and they end up using it in their tests.  a better solution would be to migrate uses of indexof in the mocha codebase to utilize your shim directly avoiding polluting the global `array.prototype` with test library implementation.", 'i agree. thanks for the reply. will work on updating this.', "it would be pretty easy to allow assertion libraries to interface with mocha. however that definitely loses some elegance. i'd definitely prefer to stay away from adding these sort of wrapper functions", 'cool looks good! just need to remove the mocha.js build stuff', 'and that worked! thanks. now i have a much better reason than pretty logs to use mocha :)', 'add filename to mocha.test objects. i would like for the mocha runner to send my custom reporter the names of the containing files along with tests. how would people feel about a patch that made test objects aware of the file in which they are declared?', 'in both node and the browser we can do this by throwing then catching an error:``` jstry { throw new error();} catch(e) {  e;}```', 'note: most of the `mocha.js` changes are not mine. and just from `make` not having been run in a while on master.', ':+1:', 'this is becoming a real pain for us.', "i see why now: mocha's build process isn't currently set up to package npm modules for the browser. i've opened a new pull request to address the underlying bug: #957", "even if it just dumped its crap all over the global space when you `require('mocha')`. would be better than the current state of things.", "i don't think it's silly but there are tradeoffs with everything. i'd be happy with something like this:``` jsvar mocha = require('mocha');var mocha = new mocha(options);mocha.describe('blah blah'. function....```no one would use it but at least it would be a cleaner way to implement what we currently have. there would be a _ton_ of boilerplate that everyone would have to set up each time. but if we could narrow those down to cli-ish apis that would be ok. even if there was lib/cli.js that just passed in the argv. but i still doubt anyone would use it. you can use it without the cli reasonably easy. but that illustrates that no one really wants to beyond some edge cases.", 'visionmedia that seems pretty nice. the reason i suggested `require("mocha/bdd")` or similar is that it would be pretty easy to implement in terms of existing mocha. but yeah. yours is probably better. (you could envision using it to e.g. run multiple test suites at once or something. well. that would probably break because of the process.on(\'uncaughtexception\') usage. but you see what i mean.)i may try a pull request for this one day.', "yeah no clue with selenium sorry but it's not mocha related", 'l mocha (master): git ls-files | grep test.jslib/test.js', 'hmm lame. it should have been broken for a longggggg time then :s. mocha needs that file haha', "-1 from me. mostly because we have too many features in mocha already. but it's also pretty easy to roll this sort of ad-hoc behaviour if you want to. something like:``` jsbeforeeach(function(){  var self = this;  dosomerequest(function(){    self.failed = true  })})test('something'. function(){})function test(label. fn) {  it(label. function(){    if (self.failed) return;    fn()  })}```", 'dondi currently we have functions like `noerrors` and `duplicategeneerror` that we call in our mocha blocks of code. in files like _errors-graph-tests.js_. my question is should i consolidate the code that i have right now into a function similar to noerrors?', "mihirsamdarshi ok so it looks like our priority is to get node to recognize import/export first. if you have already read up a bit on the issue. you know that the core need is to precompile the code into a form that doesn't use import and export. it looks like mocha will need to be run with a setting that sends the code through babel first.see if you can get this to work by consulting the web for possible solutions and determining one that works for our specific setup. if you find that this is above your pay grade. let me know.", "i think detox tries to throw an error inside mocha's `beforeall` hook . but for some reason mocha catches all errors thrown inside `beforeall`. as a workaround. try surrounding `detox.init()` with a try/catch clause. and print the exception. what does it say ?", 'so my folder structure is:```-e2e  -pages    - loginpage.js  -specs   -loginspec.js  -init.js  -mocha.opts```', 'add debug to mocha test', 'running tests is too slow with karma. it takes 23 seconds to npm run test on the project as initially checked out. i have found karma to be a very slow test runner and have switched to mocha-webpack+mock-browser so that tests can be run without a browser at all. at the time my react karma/phantom or karma/chrome cycle was taking 60 seconds to run for a few hundred tests. after the change it took 6 seconds to run the whole thing. the best part though was the test:watch improvement as it only packs and runs the tests needed.this is a huge improvement in red-green-refactor cycle time.  i found that karma-webpack was horribly slow on a watch change.do you have any plans to switch to this. or perhaps make it available as an option?', "would you mind detailing what you did? i'm very interested in that.", 'feel free to submit a pr implementing this. would love to speed up the testing process! :+1:', "my knowledge of webpack is slightly a bit above zero and i've not got time at the moment. i'm just converting an existing project to use react boilerplate and after that's done then will have a look into this.", "fix addon not working when `yarn link`ed. when i `yarn link`ed the addon to develop. the addon detected my app's tests as being qunit instead of mocha. and so the addon didn't generate any tests", 'support babel!. for example:``` bashmocha-phantomjs test/mocha-runner.html --compilers js:babel-core/register --recursive```', "`mocha-phantomjs` runs in the browser. not node.js. that is not possible how you have it.it's also not possible to do this generically. nor should it. the biggest difference between `karma` and `mocha-phantomjs` is that it gives you full control over your test runner html. whatever works by going to your tests in a browser using mocha will work with `mocha-phantomjs` (barring phantomjs issues. which there are quite a bit. less and less with phantomjs 2). so iirc babel can work in the browser. so get that working. and it's working in mocha-phantomjs too.", 'so. how did you solve your problem?', 'add eslint plugin to check for mocha `.only`s', 'autre31415 great link. highly recommend as that is what is used in our _other_ project', 'i thought mochify -r mocha-unfunk-reportermight be a work-around. so i installed that npm. but get an invalid reporter error when trying to use it.i looks like the tap reporter uses no ansi though--although output format is totally different.', 'adding a `types` entry in `compileroptions`  should solve the problem``` json  "compileroptions": {    "types": ["requirejs". "mocha". "jquery"].    ...  }```']