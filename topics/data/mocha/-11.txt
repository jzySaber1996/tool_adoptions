["thanks. as i've never used mocha before :)", 'support `--compilers` arg. in order to support mocha compilers. the cli `--compilers` argument has been pulled to the `electron-mocha` front-end. which makes calls like `electron-mocha --compilers js:babel/register test/example.js` possible in case one has written tests in es6 for example.', "if you create a file. say `babel.js` that includes `require('babel-core/register')`. you could then call `electron-mocha --require ./babel.js test-file.js`.but i imagine that a lot of people are going to expect the mocha `--compilers` flag to work. so maybe i'll just accept this since it's not much code to maintain.", "and thank you for the `it.only` code. i didn't know that about `mocha`. great feature! :)", 'at first - thank you for good work of building orm for node. i hope it will become something like activerecord in ruby world.and of course. thank you for lighting fast fixing of the bug.about mocha - yes. it has its secrets. most of them are in manual though :)', "i am using winblowz. so i don't have make to hand.but i got mocha.  typing `mocha` from the jade directory seems to be giving me some tests.right now i am failing.  the body tag is acting like a text node.  i haven't figured out why yet.", 'actually the performance hit is maybe not so much.  at least when i run the tests in mocha. it gives (approximately. within the noise) the same time for `pretty` and `prettypretty`.  maybe not the best benchmark but indicative.edit: sorry. this is stupid. this is only the time to compile. not the time to render.', 'yeah. i can install coco. mocha. and coffee-script fine ( a few random libraries i thought of)', 'thanks a lot :)', "ah i think i was running the mocha command instead of validate. i'll fix it as soon as tomorrow-adam> on 2 sep 2013. at 23:31. hannah wolfe notificationsgithub.com wrote:> > this has a jslint error > > --> reply to this email directly or view it on github.", 'false positives with new `mocha.steplevelplugin`. i have a request counter in place during testing and switching from the deprecated `mocha.asyncsteplevelplugin` to the newer `mocha.steplevelplugin` causes the request count to be off and correspondingly a bunch of false positive successful tests.with deprecated async plugin:```request counts:    "get /statements": 105total:  105---------------  286 passing (1s)  29 failing```with new plugin:```request counts:    "get /statements": 1total:  1---------------  314 passing (101ms)  1 failing```it appears after the first failed assertion all the rest have been skipped though marked passing. in this case it is the first scenario failing.based on a cursory glance at the code i\'m guessing it might be related to the scoping of the `abort` variable. i\'ll hopefully have a chance to dig deeper but if someone has a quick fix that\'d be great.', "hi brian.i think you're right - the abort variable should be scoped to the steps method. i'll fix up and release this evening. thanks for reporting and sorry for the trouble.steve", 'i\'m :thumbsup:. it works here. i wonder if it makes sense when aborting to do something similar to:`if (abort) return done(new error("aborted"));`or something similar to prevent the false positives. this kind of feels like the difference between a "pending" and a "skip" that some test frameworks provide but i\'ve not yet figured out if that is possible here. either way avoiding the false positives would be an improvement i think.thanks for the quick turnaround again!', "only check/update selected packages. as an example. i'd like to do `npm-check-updates -u mocha should` to only update the `mocha` and `should` packages.  this doesn't appear to be possible.this might conflict with the fact that the first non-option argument is currently a `package.json` or a directory.  but really. how often do you want to run `npm-check-updates` outside of the current directory?", 'thanks for reporting. will look into it on the plane today.on nov 8. 2012. at 2:36 pm. rschooley notificationsgithub.com wrote:> quick thought: the default timeout of a single test in mocha is 2 seconds. so if the timeout above worked it would call done prior to that limit.> > \\> reply to this email directly or view it on github.', "console log message doesn't show up in mocha. domoritz  there must be some missing config.   i am also curious why we use mocha directly here instead of karma. also. we're using mocha here and jasmine in the other two ui project.   should we stick with one for consistency?", "i don't know much about this. do whatever you think is best.", "i think i'll stick with `mocha` here.  we don't need karma here because we're not testing ui or something that needs to run a browser during testing.  we might switch `vegalite-ui` / `facetedviz` to mocha instead of jasmine later.", 'migrate to mocha. split out plugins. mapparams defaults to false. wip', 'yunong micahr plugins broken out! all functionality is intact. added more unit tests for queryparser and bodyparser. also made mapparams: false the default behavior.', "donutespresso looks good. if we're going this route. let's move all plugins out of server. even cors. it's fine for the server to pull it in as a dependency. also. when you're moving the files over to new repos. please save the git logs for the files so we're not starting anew.", 'not sure what to do with cors - the tests require restify so pulling cors out would result in a circular dependency for tests (or we keep cors tests in core). we also have existing prs open against cors. the git history is complex. let me see what i can do.', "ballpointpenguin did you actually test this at all? because i just found out that `removepackagesfromproject()` isn't even able to remove packages from `bower.json` and only targets `package.json`...", 'turbo87 i did not. i looked at the code and it seemed obvious enough. i should have tested it.', "looks like `globals` is not a function of the `mocha` object anymore. i'm sorry for the `index.html` changes. but that's the output of homebrew's markdown from the `index.md` file. i've looked at the browser and the page looks as it is today.", 'forum. can you please create a forum where people can ask questions about mocha?  a google group maybe?', "probably not a bad idea i'll set something up when i have a min", '+1', 'looks like ff exposes the \'location" global variable between the jquery ready event and the window.onload event.  i.e. if i move mocha.run() from jquery.ready to window load the error goes away. (using ff 11)p.s. i also had a problem with a third party lib "syn.js" exposing a global which i used mocha.run().globals([\'__synthtest\']) to remove the error.  but what is interesting is that chrome reports it as a leaked global while firefox does not.  i think its also a timing issue of when globals are introduced.  i got rid of my global issues by doing the following:```$(window).load(function() {  return settimeout((function() {return mocha.run();}). 1);});`````````', "nagyv if you're executing other code in parallel and following that with a call to mocha's done() you may still have some races. it depends", "this is the _only_ way they work in mocha. they're executed sequentially. perhaps you're calling done() too early? but that's the only way mocha operates", "i hate jquery's xhr api haha. we can let people vote here but -1 from me. ultimately mocha is about being simple and crud-free. adding support for adhoc things like this takes away some of the elegance imo", "and that's an artifact of it being difficult to work with. that's not really something i want in mocha", "i'd be up for that; i was just going to write a package that overrode `mocha.runnable.prototype.run`. which of course would be a bitch to maintain in the face of upstream changes since that method is so long.", "it seems to me that currently sinon.usefaketimers doen't work at all with mocha. in the sense of not even making it to timeout.the following code takes 5 minutes to run. without any errors.```beforeeach(function(){  this.clock = sinon.usefaketimers();});aftereach(function(){  this.clock.restore();});it('updates every 5 minutes'. function(done){  sinon.stub(statusapp.module('jobs').events. 'update'. function(){    statusapp.module('jobs').events.update.restore();    console.log('in');    done();  });  statusapp.module('jobs').events.last_run = new date().gettime();  this.timeout(302000);  this.clock.tick(300000);});```", "it works. just not with my code :(this works fine:``` javascript  var mocha = require('mocha').  sinon = require('sinon');describe('test fake timer'. function(){  beforeeach(function(){    this.clock = sinon.usefaketimers();  });  aftereach(function(){    this.clock.restore();  });  it('should be fast'. function(done){    settimeout(function(){done();}. 300000);    this.timeout(500000);    this.clock.tick(20000000);  });});```", "i absolutely love mocha's support for coffee-script!", "hmm i'll check that out in a minute. the error messages themselves are up to node core though that's not mocha", "joewhite yeah. i debated that when i was putting this together. since iced (in theory) is fully backward compatible. you're probably right. and re 2. yeah. right again.visionmedia i understand. in that case. what about a way to hook into mocha and provide custom compilers? maybe something like `--add-compiler extension:require_path`. that way i could do `--add-compiler iced:iced-coffee-script` and someone else could do `--add-compiler myext:./my_local_compiler`. would you accept a pr that does that?", 'added teamcity reporter to exports (it had been left off). the teamcity reporter was left off of lib/reporters/index.js.  i added it there and to the built mocha.js file.', "node.js: maximum callstack size exceeded. we are hitting an issue in our specs where. for some reason. we are getting 4k+ entries in the hooks array inside runnable.js. since this array is processed using recursion. this easily blows the cap off of node's callstack.this pull request uses the settimeout of zero technique to reset our callstack as we reach the callstack limit. as an initial pass. i've hardcoded 2000 as the max-allowed depth before resetting the callstack - but it would probably be good for this to be configurable in some way.on a side note. it does seem strange that we have so many entires in the hooks array. we do have about 880 specs and do tend to highly nest contexts using nested describes. many with associated beforeeach hooks. if it sounds strange that we'd have 4k+ hooks entries with that setup. please let me know.thanks! (and mocha friggin rocks by the way!)", 'np! the "for some reason" part worries me a little though haha. i dont want to go changing things for some reason. are you guys looping and generating a ton of hooks?', "i still need to inspect the hooks entries to see what each one was.we aren't doing any spec generation. so i was certainly surprised tosee that there so many in the list.", 'yeah definitely sounds like a bug of some kind. you figure something out let me know', 'can\'t change test directory. the documentation on the main page says that "by default mocha(1) will use the pattern ./test/*.js. so it\'s usually a good place to put your tests". which seems to imply that this pattern could be changed.  the documentation doesn\'t show any way to do this (shouldn\'t this be a command line option?) and the code that seems related to this area doesn\'t clarify much.', 'actually. looks like this got merged in already in a slightly different form.this should work as of at least b57b53037246868846c366233ca5176e15c05ec9```mocha.setup({  ignoreleaks: true});```', "--require does not work for coffee files. require('coffee-script') should be called before the line program.parse(process.argv); in _mocha to enable requiring of coffee-script files via --require.", 'i figured a way to do this without a code change -- just pass `--require coffee-script` before the other requires that need it and it works like a charm.sorry for the spam.', 'alright cool thanks :)', "yup thanks hebo. unfortunately the new js api and the browser api are a bit different but i'll fix that up soon", 'pass file(s): `mocha --reporter spec spec/{my.awesome}.js`. `mocha --ui tdd test/unit/*.js` etc', "globals 'mocha' and 'describe' are also not working after this change.", "fixing the browser based tests - '__dirname' was undefined. i tried running the browser based tests for mocha and received this error:```uncaught referenceerror: __dirname is not defined```on line 894 in mocha.js``` javascriptvar images = {    fail: __dirname + '/../images/error.png'```this pull request should fix all browser based tests.", 'this would require that everyone using mocha has to define __dirname', 'we had another pr like this. i\'ll have to look into it a bit more but i\'d like to avoid this if possible. iirc the vague "script error." is because of cross-origin script. are you hot-linking mocha from github?', 'yup. makes sense! thanks!', 'yes i was hot-linking mocha from github. using it locally gives me a fine error. maybe it should be removed from the documentation then... with a note talking about this issue.thanks for the response.', ':\\makes mocha snail like in the browser', 'i think that as an experienced javascript developer it\'s easy to believe that some things are obvious even though they\'re not to someone new to javascript and mocha/should testing. for them the mocha docs"the --require option is useful for libraries such as should.js. so you may simply --require should instead of manually invoking require(\'should\') within each test file."may make it seem as if you can just --require should and you\'ll be able to use it just as the docs of should says.i\'m not sure. maybe you\'re right and it would just bloat the docs and it\'s better if the user figure it out themselves. or maybe a small change to the docs would help some people avoid the mistake.', 'added some more docs. i could go into detail about exposing globals for mocha blah blah but it would get a bit too much for that page', "just a bump. is there any reason you haven't merged my commit above? i can break it out into its own pull request if you want. but it should be pretty trivial to cherry pick or just do by hand...", "i dont recall growl failing on a require(). but failing on growl() maybe. i'll have to take a look at the lib again i cant remember where it fails. either way i dont want to console.log() though", "enoent is what you'll get if a user does `mocha test/foo.js` and foo.js doesn't exist. i dont want to ignore it", 'oh. gotcha. i was thinking in terms of running mocha without specifying a target file/dir at the command line.', 'segmentation faults. stderr and exit code. i\'m using mocha to test a c++ addon for node.js. and sometimes the c++ side of things is causing segmentation faults.if usage of the addon is wrapped in a child proces. e.g. with `child_process.exec`. the segfault results in `"segmentation fault"` messages being sent to the child\'s `stderr` and the child\'s exit code is something other than `0` (e.g. `139` in my linux env).in the context of mocha. the messages to `stderr` are getting swallowed and the segfault results in the mocha processexiting with status code `0`.any thoughts on whether mocha could be adapted to pass on the messages to `stderr` and close with a non-zero exit code in the event of a segfault?', "ah i see.. you're wanting to meta-generate them from async stuff. i suppose we could have some mechanism to tell mocha to wait. though personally i think setup stuff like that might as well be sync (if possible)", 'docs: sample code for globals ignore flag in browser is incorrect. in the "browser support" section of the docs. the sample code snippet says:mocha        .globals([\'foo\'. \'bar\']) // acceptable globals        .run()but this doesn\'t actually work - acceptable globals are defined as part of mocha.setup(). there is no .globals() function as far as i can see', 'this has changed a little. and will in the future to match the server-side js api', "i'll update them soon", "i dont think i want to expose the runner to the tests themselves unless there's a really compelling reason. right now you could do that with the runner returned from mocha.run(). maybe chuck the html in a property `this.html = html` in the test-case. we should have the context available. if not i can add that. `test.context` or something", 'you can put them in the `mocha.opts` file if you want them for any `mocha(1)` call. to run one file just pass that one file to mocha', "i'd like to help out with this. what did you have in mind: something like``` jsmocha.setup({  ui:'bdd'.  grep:'foobar'});mocha.run()```or more like``` jsmocha.grep('foobar').run()```", 'hmm still seems to jump a char at times. for example in mocha run `$ make test reporter=progress` you should see it', "hmm. i can't reproduce it - the bar gets all the way across on mocha tests using that command - can you send more info on the char jump?", "fix issue #325 (add better grep support to js api). fix issue #325 - when testing in the browser. the mocha object now has a grep() method which you can chain like so: mocha.grep('foo').run() - with shwaydogg", 'we should use the mocha prototype in ./lib/mocha.js. right now you can only pass a `grep:` option but it would be nice to have this there. allowing a regexp _or_ a string', "ah i see - i had it in my head that this was an enhancement to browser test running only. but ya we should totally make this api available in node. etc.one question: it appears that in the browser tests you have that you're not actually instantiating a mocha object ... you're adding methods (specifically .run() and .setup()) _to_ the mocha constructor. and not using the mocha.prototype methods. what's the reason for that?related to that. should we keep the code we have in support/tail.js?", 'now in opera an error is thrown:global leak detected: statsthats exactly what visionmedia  said. mocha has a global leak :p', 'switch micro-test to mocha. i far prefer mocha for unit testing at this point. we should move to this.', 'update mocha and timekeeper', 'googlecloudplatform/node-team ptal.', 'lgtm', 'allow mocha reporter file output. this change allows reporters to output to a file simply by setting the cli arg --reporterfile. anything in reporter.output will be written to the file.', "`mocha-phantomjs` is just an executable. we document the parameters and you can put the parameters in your makefile like any other exec task. i don't see too much value in this. but if someone sent a pull request i'd consider it.", "we already have this feature. `--file` does exactly what you added. except without tests and a bug (you don't close the file).", "you have a point about closing the file and including tests. i'll get some tests added and actually close the file...the `--file` feature does not work for things like outputting an xunit file since all output (including console.log - see metaskills/mocha-phantomjs#133) is sent to the file. this allows the reporter to be the only thing outputting to the file without having to remove console.log from code (which isn't always possible depending on external libraries being used).if you think a different approach (besides removing console.log statements) would be better. please let me know.thanks!", 'if you have to write a custom reporter anyways. then write one that uses `process.stdout.write` and use the existing `--file` feature.', 'not to mention we also have the hooks feature (#99) which you can dump output to a file with (yes we need better documentation on that feature).', "okay. i'll see if i can get hooks to work instead and then probably submit a pull request for readme.md to outline the feature a little better.", "don't spam the issues. this has nothing to do with mocha-phantomjs.", "reporters like xunit. for example. attempt to produce xml. and if that gets randomly sprinkled with logging output. sometimes the xunit report becomes invalid. i think. in general. reporters that need to produce a specifically formatted file will break. apart from that. there's also the visual thing. mocha-phantomjs outputs a line to mark the beginning of a test. then the test outputs some logging. and mocha-phantomjs tries to go back and amend its previously output line with success or failure. and it fails. so it outputs the success of failure line after the test's logging. this messes up test reporting very much. making it tiresome to try to read it.", "> the important thing is you disagree and you won't fix this.no you missed the point where it's not possible to fix it as suggested. reporters use `console.log` and random code uses `console.log`. both are pieces of code that runs in the client browser. the built in mocha reporters are compiled in to it.not to mention i gave you another alternate solution of forking the reporter. why is that not an option? will take you 2 mins to do.btw i have tried to resolve this issue before too - see visionmedia/mocha#1068", "sorry. by > thanks for the suggestion.i meant i'll try it. so it is an option. but i still thought it makes sense for mocha-phantomjs to support this without tweaking the reporter. i'm not sure how to do it. and i know what you mean. that both the reporter and the tests use `console.log`. still. there might be a way to separate them. if i have time to look into it i'll see what i come up with.", 'needs an "unmock" method. because node will only `require` a module once globally in a process instance. when mockgoose "infects" `mongoose`. it causes _all_ future calls to mongoose to be mocked. this is fine most of the time. but i have a specific (not uncommon) usecase where this is problematic:my express app has a suite of unit tests (testing mongoose models) and a suite of integration tests (testing http. controllers. and mongoose). i use mockgoose for the unit tests. but a real mongo database for the integration tests. running both tests in the same call to `mocha` will fail because there is no way to tell mockgoose to "unmock" mongoose.does this make sense? am i misunderstanding something? thanks :)', "i ran into the same problem the other day as well. my solution was to rethink my test strategy. but i was surprised that there was no option to 'unmock'.", 'likewise -- i actually ended up ditching mockgoose entirely. i was using it for unit testing mongoose models. but really testing that `save()` works is basically pointless because mongoose itself has tons of test cases covering that.', 'hi girija. i tried to reproduce this but can\'t. what happens if you run the delete all cookies test in the codebase?`mocha -r spec -t 60000 test/functional/safari/safari.js --grep "delete all cookie"`']