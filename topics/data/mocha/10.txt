['oops. not an issue with should. sorry about that. finding out that testing promises with mocha is a bit of a mess. any assert within then(...) was causing mocha to hang forever... forgetting the () on empty was the trick to making it seem like it worked ;)', 'thanks and yeah i was following the \'correct way with latest mocha\' example. the problem was with trying to test "do x then do y" behavior where x and y are both async methods returning promises. failing tests were hanging... not "forever" but just timing out (well the timeout was long so it felt like forever).  i\'m working around it by pulling out the "do x" into a before(). but that feels hacky.i\'m probably missing something to make this work as expected. but i can live with it for now. thanks for your replies!', "i definitely agree with mocha for the framework but bringing your own assertion library probably wouldnt be a bad idea. i've used `should` on a few projects and keep ending up using [chai]( which gives all 3 major assertion types (assert.expect.should) and also works fine in the browser which is nice for full stack testing.and yes thats more of what i was thinking and genericserver is perfect for this sort of testing. there is no need to worry about what kind of server brought the connection since we are just testing the action logic.when reading through the initial docs i thought the `outputexample` in action object was used for testing sort of like expected output type.ill let you know what i come up with and ill see if i can implement what you are saying above. i assume it shouldnt be too much of a hassle.", "remove leftover debugger. i assume that the addition of this debugger was an accident. and it's making my node debugging of ember-cli stuff a marginally less fantastic experience.in the spirit of adding a failing test w/ the fix. i've included a mocha jshint plugin.", 'thanks mike-north!', 'stefanpenner mind cutting a release?', 'awesome. thanks rob!', 'npm install mocha -g', 'cjelger thanks for making the dummy project!i gave it a shot. and it looks like serverless is packaging it correctly on my setup. the dev dependencies `mocha` and `mocha-jenkins-reporter` are not included in the zipped package that serverless creates. so. it makes me think there is something specific with this project and your environment that is causing the issue.', 'do you know about `only` feature of mocha?', "allow importing es6-shim.js in web worker (fix #247). this is to address issue #247 in which because es6-shim.js uses window it can't be imported in a web worker. i've replaced usage of `window` with `self` when it would work in a web worker. or test if window is available for the zerotimeout function which wouldn't work in a web worker. i've added a simple test that only verifies that `importscripts('es6-shim.js')` doesn't throw. but i'm new to mocha & bdd so it may look strange.", '`npm test` runs all `*.js` files inside `test/`. so the travis build failed.', "i'll fix those issues. besides opening test/index.html locally in my browser and running npm test. anything else i should do before submitting another pull request?", 'that should cover it :-)', "thanks. i've updated the change per comments above. let me know if there's additional changes that would be good here. style nits or otherwise", 'lgtm', 'thanks! and thanks for es6-shim.js!', "thus far i've had no problems running es5-shim.js in web workers but i'll be on the look out =)", "copy-paste from mocha's output on the js console should work fine.  try opening es6-shim/testling.html in a browser and then open the js console.  (and when i do that on current chrome i see the string#trim errors which you are presumably fixing in another bug?)", "make it possible to run utilities tests with --watch. hey! i'm starting to play around with possibilities for an `overwritechainablemethod` utility to address issue #215. and i was trying to run the utilities tests with:``` bashmocha --watch --require ./test/bootstrap --reporter spec test/utilities.js```but the tests fail if they run more than once because they expect certain methods to not be part of the `assertion` prototype. would it be okay for me to add some cleanup in an `after()` block?", '...updated my commit message to match the others. i think.', 'cache control middleware refactor. refs #5286- split cache control middleware into its own file- split out cache control tests- add new mochacli command for running just middleware tests', "oresoftware similar to ava. suman is not going to be entirely appropriate for us to change to as we will want browser testing (done through karma). a future avenue you can perhaps explore is a) being able to convert mocha tests dynamically so suman can run on a mocha suite b) making a synchronous task runner (similar to tape) which can be run in the browser.regardless. i'm still going to play with your project and see how i like it.", "yeah. definitely understand wrt browser testing; supporting browser puts too much burden and constraints on suman - i want suman's competitive advantage to be that it is not have to support browser. your idea to dynamically run mocha tests with suman as harness would be interesting - will explore. it is possible. not a bad idea at all.", 'mocha test name not used as session name. when writing nightwatch tests the test name is automatically pulled and used as the name of the session in browserstack. would be great if when the mocha runner is used that the name of the test could be used in the same way. could maybe this be added some day?', 'watch mode?. this tool has the watch mode like mocha --watch or jasmine --watch?', 'no. but you can use something like the `grunt-contrib-watch` module.i think because this is neither an _issue_ nor a _feature request_ the official mailing list would be a better place to ask such questions.regards~david', 'thanks davidlinse!', "results object is not added to currenttest when mocha is test runner . when running a test using the default nightwatch syntax. the`results` object is added to the `currenttest` object. which can be seen with the following code:``` javascriptaftereach: function(browser. done) {  console.log('currenttest:'. browser.currenttest);}```which logs currenttest showing the results object:```currenttest: { name: 'nightwatch test'.  module: 'test-nightwatch'.  results:    { steps: [].     passed: 4.     failed: 0.     errors: 0.     skipped: 0.     tests: 4.     testcases: { 'nightwatch test': [object] }.     timestamp: 'mon. 25 jul 2016 05:00:06 gmt'.     time: 6250 }.  group: '' }```however. when using mocha as the test runner with the following code:``` javascriptaftereach(function(browser. done) {  console.log('currenttest:'. browser.currenttest);});```this logs currenttest without the results object:```currenttest: { name: 'mocha test'. module: 'test-mocha' }```this demonstrates that the `results` object is not added to `currenttest` when mocha is test runner. which is an issue when using an automated testing cloud like saucelabs. because the results of the test are not recorded in saucelabs when using mocha as the test runner.", 'lgtm. would be nice to have some test content. or a mocha test to test this.', "local-storage for app. ephemeral for mocha. i'd really like a way to use the ephemeral session store with mocha and local-storage with my app using the same `environment`. is this possible? i really do not want to have to run my app two different ways to switch back and forth between my app and my tests.using the ember test helpers i can setup and tear down an entire ember application with a unique config for every test. i'd love to be able to control simple-auth the same way as my app.i'm new to ember and spent several hours pulling my hair out trying to configure `simple-cli` from within my mocha tests and eventually gave up on that approach. i ended up adding an initializer that checks the pathname and injects the test config when on the test page but i feel like this approach is more of a hack than anything else.any thoughts?", "ok. i'll take it over there. thanks for your quick response!", 'fix(mocha): use global if window does not exist. - `window` does not exist in nativescript applications.- this removes a hacky workaround where you assign `global.window` to `global` before including the mocha patch.- preserve existing behavior by using window first if it exists.', 'the ci build appears to be broken unrelated to this change. system.js is failing to import some rxjs operators.', 'justindujardin . yes. current ci is broken. you can just ignore that.', 'add mocha to dependencies. sorry it maybe doesn\'t help anything. but it works with travis. it grinds my gear seeing "build: failed" in sails modules :laughing:', "samccone sorry got caught up with things so i didn't get to it. lgtm. ill post back here with some style nits that i make for next time :). thanks! im also curious about the use of a `context` function as i dont see it anywhere in the mocha docs.", 'fix: include mocha and chai typings', 'test --ignore modal_naviagtion#svetoslavtsenov/fix-modal-navigation-e2e api23', 'test --ignore modal_navigation#svetoslavtsenov/fix-modal-navigation-e2e api23 ios11', 'command not found: install. simple install command does not work as expected:`tsd install mocha chai` produces error `command not found: install`.', 'nice - i\'m planning to give it a whirl later this week either way.  i\'ve been moving to using npm. bower etc in my projects and it kind of "fits" to move to tsd in line with that i reckon.  (json config ftw!)', 'try / catches are required for async mocha tests.', "thank you for the merge.mocha can't get at thrown exceptions from within an async callback. the exception trickles up and gets reported as an uncaught exception. the tests still exit with 1. but its outside of mocha reporting.", 'generators ftw!', 'answered. more than 6 months old~', 'noted~', 'database#get callback get passed only error arguement. according to api docs. the callback function for database#get has an arity of 2. and normally should always be called with 2 arguments (err. res) even if res is undefined ( no row matching the sql query). but actually this test fail``` javascriptvar db = litesql.db(":memory:");db.serialize(function() {    db.run(\'create table todos(task text)\');    db.get(\'select * from todos\'. function() {        assert.equal(arguments.length. 2);    })})```this could lead to extraneous bugs when using database#get inside async utility function that relay on argument passing ( like async#waterfall )i was having hard time to undestand why my mocha tests failed and that was because of this; observe the code below ``` javascriptasync.waterfall([   function(next) {      db.get(\'select * from todos where id=1\'. next);   }.   function(res. next) {      if(!res) console.log(\'no task\');      ....   }]. function(err) { ... } );```above the second function is expecting a result argument. because database#get should call next with (err. res) (the err argument is stripped and forwarded directly to the final callback). but. because db.get call the next callback with only 1 argument (err=null); the second function get passed only one argument (next) instead of 2 (res. next)', 'write some tests for suggestions widget. like for results widgets. write some tests for the suggestion list widget. using mocha and jsdom', 'add inspect method to opcode.. also added test for it. which is passing locally for me with mocha.', 'chai as promised. this gives the ability to handle rejected promises in mocha with chai-as-promised library.', 'response status code::staleelementreference(10) && response status code::nosuchelement(7). hi. this may be issue related to the chromewebdriver itself as some research in google shows but i am seeking help here too... may be someone knows of a workaround. specially when using **wd**?having in mocha test:```...browser .get(\'some url\') .elementbycss(\'#myid\') .click() .eval("window.location.href")  .should.become(\'some url/some_path\') .notify(done);...```results in exception:`error: [element.click()] error response status: 10. staleelementreference - an element command failed because the referenced element is no longer attached to the dom. selenium error: stale element reference: element is not attached to the page document`some hints show that the dom is destroyed when `.click()` is invoked thus the reference is lost and becomes stale. suggested is that the code should wait or make sure the element exists. something like:```...browser .get(\'some url\') .waitforelementbycss(\'\'#myid\') .elementbycss(\'#myid\') .click() .eval("window.location.href")  .should.become(\'some url/some_path\') .notify(done);...```which again results in:`error: [elementbycss("\'#myid")] error response status: 7. . nosuchelement - an element could not be located on the page using the given search parameters. selenium error: no such element`so how exactly to implement such behavior?this is something travail. clicking a link and running eval on the resulted page. so it should work out of the box but i have a feeling i miss something here!?just to mention. that both above snippets work when using **phantomjs** as browser. so it is something related to the chromedriver high possibly?any help will be appreciated!', 'the element is not on your page. the error message is coming from selenium. you can use source().print() to make sure.', 'sebv the element is there (:. i proved it via source().print() as suggested.this test is part of a suite which have several steps to test url endpoints. i noticed that the first test works and then the exception occurs.should the instance used have to be reset somehow?looks like a cache related issue to me but not sure...??', 'sherlock1982 any updates?', "the correct method is:```    mochatest: {      test: {        options: {          reporter: 'tap'.          capturefile: './tests.tap'        }.        src: ['test/**/*.js']      }```note that `capturefile` is specified under `options`. i tried to implement with `dest` once upon a time but it doesn't work the way you would expect when you have multiple `src` entries (i forget the details now though)", 'closing in the hope that you found the asynchronous issue that caused this', 'environment variables not honored?. i noticed that grunt-env does not work with the grunt-mocha-test plugin. it would be nice to use environment variables in a way that is compatible with grunt env so we can set the environment in gruntfile.js.', "ok. to be honest i'm not sure it's a problem with this plugin.it seems that your call to `helpers.testdirectory` changes the current directory to `test/temp`. thus when the watch task starts the files you want to watch are not at the path you think they are. the solution is to restore the original path after each test.``` javascriptvar originalcwd = process.cwd();...    aftereach(function () {        process.chdir(originalcwd);    });```i have submitted a pull request to your example with the change so you can verify it.imho. i don't think it should be up to `grunt-mocha-test` to clean up stuff it didn't do after the tests so this seems the most correct solution", "seems to work as far as i can tell - i just added a test case to prove it (see `test/scenarios/gruntenvintegration`). maybe you could elaborate with an example of what doesn't work for you.", 'get rid of grunt and just run mocha', 'hooray!', '62445421a3c0f8930627e7d207ec782fe2139810 resolves this issue', 'wonderful!', 'resolved by #97', 'invalid return statement found in bin/_mocha', 'sorry for the duplicate.  closing this one out for the pull request.', "when you call `test()` there's no receiver. so it becomes the global. if you're expecting it to be mocha's test object you'd have to do `test.call(this)`", "segrey if the timeout is 0. it should never time out. this is both logical and necessary for things like running a debugger and inserting break points.sam-github one interesting discover i made while working mocha through intellij is that there are actually two use cases here when using a timeout of zero.1) test never completes. but it's simply because done() wasn't called. so the node.js script exits because it has nothing to do. mocha completes but the test case does not show up (in fact. the entire test suite it is in doesn't appear) in the results.2) test never completes. but there is still an open socket listening on a connection. so mocha never finishes and is essentially hung. this has the interesting side effect of hanging the test suite so that it never shows the list of tests at all. and i therefore don't know which one has failed.it posits a couple interesting idea:  it could be possible to detect a missed done() call if the node.js process exits (obviously there's no possibility the test could ever complete in this case) and it probably seems logical to declare it doa here.however. as long as the node.js process is still running. i could have a break point running. or it could be a legitimate failure of the test. i don't know that this one is so cut and dry. unless there's a way to tell if a breakpoint is active in the code.", "just for the record. my expected behavior:- node.js process exits without delay- `'should be unfinished'` test is reported as failed- `'should be passed'` test is reported as passedright now mocha reporter doesn't get called from mocha runner (i.e. no `'test end'` event) for both these tests.update:another acceptable fix would be:- node.js process never exits- mocha reporter api is extended with `'test started'` (or something) event to let a custom reporter track running tests.", "it's not clear why's this change is needed?", "if you run mocha in the browser today. it will _always_ expose the bdd style interface.for example. in an environment that states: `mocha.setup({ ui: 'tdd' });`. the `describe` and `it` functions will be defined globally in addition to the `suite` and `test` functions.", 'mocha does not reset \'this\' on every test run. pretty much all unit test frameworks i\'ve used. allow me to run each test in an isolated environment. i was surprised to find out that this is not the case with mocha:```describe(\'something\'. function(){  it(\'should one\'. function(){    this.ok = true;  })  it(\'should two\'. function(){    console.log(this.ok);  })})```the second test prints "true". i expected "undefined".is this how mocha is supposed to work. or did i do something wrong? i cannot find any documentation on what the intended behavior is. if this is the intended behavior. how do i reset \'this\'? do i have to manually delete everything?', "ya this is expected. doesn't make much sense to put something on `this` when it's going to be used like a var scoped to its containing function anyway.", "wait. i don't get your reasoning. in other unit testing frameworks it's quite common to set an instance variable in the setup/beforeeach function. which is then used in the test function. something like this:```class testsuite {   user user;   function setup() {       this.user = createuser();   }   function test_one() {       do_something_with(this.user);   }}```upon running every test function. a new testsuite instance is created. so that all instance variables are empty at the beginning. are you telling me not to do something like this in mocha? are you telling me to keep all my state in local variables within the test function? then how do i share data between the beforeeach and the test function?", "ya that works in mocha. you're saying two different things now. this is how you do in mocha what you have there```describe('something'. function(){  before(function(){    this.name = 'travis';  });  it('should have a name'. function(){    this.name.should.equal('travis');  })})```", 'travisjeffery that is the intent of this pull request. when you specify the "tdd" interface. `describe` should not be defined.', 'no i knew the intent. i thought i was testing it without your change and still seeing that expected behavior. all good now', 'ah. i see. thanks for reviewing!', 'closing to have the man page generated on install', 'is the idea of this to be able to do ```node test/a-mocha-test.js```and have it run that test?', 'travisjeffery thank you for your comment. the issue seemed to look dead because we were waiting for an opinion from mocha maintainers.i filled a proper bug #1065. so that we can discuss the right problem. which is the bug in mocha and not the fix presented here.', 'it sounds like you should have different directories for different types of tests. for example i use gruntjs and i have unit tests and integration tests. they are in separate directories. i can run these all together or independent of each other.', 'shanestillwell see the comments between hallas and pwnall above. the problem being addressed here can\'t be solved simply by grouping of tests in folders; it is more concerned with cases where certain tests cannot be run in certain environments.imagine that your test suite runs in-browser. and one of the integration tests requires local storage. one option is to simply not run the test if `localstorage` is not available. but it is clearer to mark that test as skipped. perhaps with a useful message to the executor like "localstorage not available." in either case. some runtime logic needs to determine whether to run the test.', 'xunit reporter should use process.stdout.write instead of console.log. simple change that fixes metaskills/mocha-phantomjs#114 and makes it more consistent with other formatters that should not have formatting like `json`.', 'try running `mocha --compilers coffee:coffee-script-redux/register` or perhaps `mocha --compilers coffee:coffee-script-redux/register -r coffee-script-redux/register`.', 'browser - mocha and should.js. i\'m using mocha and should.js in the browser. everything seems to work. but i\'m getting:```typeerror: object #<object> has no method \'exist\'```when running something like```should.exist(app);```---i can\'t find any specifics on how to make this work.i understand that i could use `app.should.exist()`. but then the errors shown in the spec runner become less useful.## **example****app.test.js**```describe("app". function() {    var app = window.something;    it("should be defined". function() {        should.exist(app);    });    it("should have a reqres method like a marionette application should". function() {        should.exist(app.reqres);    });});```', 'it looks like i was using the wrong tool for the job. i was able to keep the same `should.exist(something);` syntax with [chai](', "i really like the workflow colin-jack describes. any tips on how i'd go about implementing this. having never looked at the mocha codebase before?", 'expose the globals as modules in mocha.. this change allows you to write mocha tests without referencing globals in your test files.this is useful when you want to lint your tests and your linter complains about globals.for example``` jsvar assert = require("assert")var describe = require("mocha/describe")var it = require("mocha/it")describe(\'array\'. function(){  describe(\'#indexof()\'. function(){    it(\'should return -1 when the value is not present\'. function(){      assert.equal(-1. [1.2.3].indexof(5));      assert.equal(-1. [1.2.3].indexof(0));    })  })})```this also has a benefit of being able to write mocha tests in either the bdd or the tdd style by just requiring either `test` or `it` and the command line setting of the interface is irrelevant.', "> another acceptable fix would be:> > node.js process never exits> mocha reporter api is extended with `'test started'` (or something) event to let a custom reporter track running tests.good news! mocha has a special event called `test` that is fired before each test start.that allowed to make my mocha reporter user-friendly with disabled timeout (`--timeout` is set to a large amount of time as sam-github suggested).at least now this issue doesn't affect me!", 'canonicalize objects before stringifying and diffing them. assertion libraries can set the `showdiff` of the thrown error instances to true. which makes mocha serialize the `actual` and `expected` properties. then do a string diff -- effectively a poor man\'s object diff. however. it produces an unnecessarily big diff when the key definition order in objects are different:``` javascriptvar expect = require(\'unexpected\');describe(\'the thing\'. function () {    it(\'should dtrt\'. function () {        expect({foo: 123. bar: 456. quux: 789}. \'to equal\'. {quux: 78. foo: 123. bar: 456});    });});``````  0 passing (5ms)  1 failing  1) the thing should dtrt:      + expected - actual       {      +  "quux": 78.         "foo": 123.      +  "bar": 456      -  "bar": 456.      -  "quux": 789       }```this patch canonicalizes objects before comparing them so the above example produces:```  0 passing (5ms)  1 failing  1) the thing should dtrt:      + expected - actual       {         "bar": 456.         "foo": 123.      +  "quux": 78      -  "quux": 789       }```... which i\'ve found to be a great help when diffing large objects.', 'makes sense. could you write a test though? thanks', 'this is about the order that things run rather than scoping.mocha loads the files and then runs the suites. to reliably setup your tests the setup should be within the suite.', 'this breaks work mocha in browser.', "what's the use case to run xunit in the browser without some way to dump the results to a file like mocha-phantomjs is doing?", "hmm personally i'd rather export them in mocha than have tons of files", 'otherwise lgtm', '+1 on exposing them as part of the mocha namespace. -1 on multiple files', 'wow. such files.', '+1 on this happening either as files or in namespace. will take either', "+1 under mocha's namespaceraynos wanna update your changes?", 'you could just use node_path and give the test modules precedence. or hack require(). definitely not something that should be in mocha imo', "> you could just use node_path and give the test modules precedencethat's something discouraged afair. jsdevel. but yeah. you can use other dependency injection libraries with mocha or write your own. not suggesting to copy angular decisions (it's turned out to be really bad library after all). but some amd.js loaders can help you with that task.", 'guille travisjeffery the beautiful. beautiful files :(i exposed them in lib/mocha.js instead.', 'we want to run tests using both selenium and real browser. due to the need of working inside browser we can not use mocha-selenium. we have some workaround to dump xunit report through selenium. but really. xunit and test runs in browser.', "now it doesn't have newlines either", "ok since all the tests passed. i assumed it wasn't a requirement for it to run in outside of node.js. tests for those reporters needing to run in the browser would help.", 'good idea. i have often problems with different order props in objects.', ':boom: done', 'visionmedia is this good to go?', "add support for suppressing stack traces. i run mocha tests with `--watch` in a small tmux pane. but even using `--reporter min`. the stack trace makes it impossible to see the actual error messages. for instant feedback. it's nice to get only the error message. if you're running mocha with `--watch`. you're likely to know. already. where the error in the code is.", "sorry. i should not be doing this from master. i'll open a new pull.", "no i don't think this is needed in mochayou could write a make rule that greps for `debugger` and calls mocha with ---debug-brk if necessary", "sorry. the branch got gummed up with a lot of other changes - originally it was focused only on the `ownerdocument` concerns. but then the pull request sat idle for so long that i forgot and merged the branch with some other stuff.  at this point. i'm not actively using mocha. but i'll think a bit about resubmitting the pull request.", "travisjeffery that shouldn't matter. i require `mocha` at the top of the test file so since the globals exist by then i will get them.", "run it. that `pre-require` event is named with respect to the test file. e.g. require('some_test_file'). not mocha.", "i don't think it's the browser. it's the way globals are checked to be in ok in mocha isn't reliable. since it's based on the number of globals. e.g. you call `mocha.globals(['foo']);` and then somewhere in a test have `window.notfoo = 1` there's no error. but if you have `window.notfoo = 1; window.anotherfoo = 1` it does error. so i don't think #724 is the proper fix.", "ok. i'll look into it. add a test case and make sure it actually works.the multiple files approach would have just worked for free :p", 'travisjeffery you were right. i added a test!it works now.visionmedia is there a place where i can pr the docs for mocha itself ? there not in this repo as far as i can see.', "travisjeffery because we have have redefined `describe` and `it` as local variables it will use the exported ones not the global ones.without the fix (moving the exports in the event listener) it will fail.i'll happily update it so that it bootstraps the mocha suite runner if it hasn't been bootstrapped by the time its required. then tests can be run with `node`the point of this fix is to not have globals in your test files even if you run the tests with `mocha`. it also allows you to name `describe` and `it` whatever the hell you want.", 'totally tangential question. but here goes... been playing around with detox and jest. and i noticed that if i have two test files (e.g. `firsttest.spec.js` and `secondtest.spec.js`). detox will terminate. uninstall. install and launch the app for each file.  it does _not_ do this with mocha. any ideas?  is this just because of the repeated call to `detox.init()`?   if so. where would a good place to put this so that it is only called once? _edit:_ happy to create a separate issue if you want.', 'seems like some of the params passed to mocha have changed. try running `scripts/ci.sh` and see if it passes locally', 'for my concern i had to add "--exit" in mocha.opts to get a proper exit at the end of successful tests.', "kureev. some of our users use detox with mocha (or any other test runner for that matter) independently of detox-cli. the current change breaks their setup since they can not pass arguments anymore. when we spoke. i encouraged you use argv and merge them with env vars if needed. the fact that jest doesn't support argv doesn't need to enforce other test runners to work with env vars.", 'detox core now only supports env vars. not argv. try running `node_modules/.bin/mocha e2e --opts e2e/mocha.opts --configuration ios.sim.release --loglevel verbose`it will not work.', "> detox core now only supports env vars. not argv. try runningnode_modules/.bin/mocha e2e --opts e2e/mocha.opts --configuration ios.sim.release --loglevel verboseit will not work.sure. but this is not about detox either. detox should be run only by detox-cli and `detox test` command. isn't it correct?", 'any idea why "something" is still open? for example jest (and i guess mocha is doing the same) are not exiting automatically because there is still something runing. adding things like --exit is forcing the runner to exit. but it should be natural...', 'do you have `--exit` in the mocha.opts? it helped for me', 'hey skv-headless . please add verbose log (the current one is only with default loglevel . add `--loglevel verbose` to your `detox test` command`node_modules/.bin/mocha e2e --opts e2e/mocha.opts --configuration android.emu.debug--loglevel verbose`', "no longer relevant now that we've switched to jest in #980! will be in the next release", 'only miniscule ones. see the changes in #980 - should be a simple find and replace!', "browser.wait() doesn't seem to work as documented. as documented here:  the `wait()` function should accept two functions as arguments. the first of which is a return condition that. once met. will run the second argument function.however. in my mocha test. this is a failing example of a try at this. and the second function still runs. even though the first return returns false.i'm honestly not even sure the hashchanged function is ever run. any attempt to put a `debugger;` or `console.log( ... );` in the function never seems to catch or output anything.``` javascriptit('should change the location hash'. function (done) {    function hashchanged (window) {        return window.location.hash === 'this is never. and will never be true!';    }    browser.pressbutton('sign-in'. function (err) {        expect(err).to.be.undefined;        browser.wait(hashchanged. function () {            browser.evaluate('window.location.hash').should.equal('#');            done();        });    });});```", 'the `wait` method is using promise.a. so `done callback` is invoked in either case (success or error). when error happened. then an `error message` is passed as first argument to `done callback`.', "that doesn't seem to be true. at least. the first argument to the browser.wait callback is `undefined` in the above example.", "the second function will **always** run. it will run if there is an error. or when there's no events left to process. or where there are events but the completion function (the first argument) returned true.", "i feel `.extend` really is simple sugar syntax over inheritance. so i'm pretty confident any of these changes can maintain 100% backwards compatibility as long as we default every non specifically queued task on the default queue.i also feel we can bring everyone of these pieces progressively into play. and. i think just these simple change would allow a user from running (for example) `yo angular`. then `yo mocha` on the same project with more ease. also. that'll make it easier for a generator (`generator-angular`) to call another generator (`generator-gruntfile`) - and making the experience/flow for the end user much better.then when we make a decision on the composability api. we just bring it into play with more ease with these building pieces already in place.", "in further reading through the generator-ember tests i noticed that every test file defines the function `filesdonotexist`. which just takes a list of files and verifies that they don't exist. this is another good candidate for inclusion in the generator helpers. so i've added the methods `assertnofile` (checks that file does not exist) and `assertnofiles` (checks that no files in the passed-in array exist).i'm working on writing the unit tests now for all these methods. no tests for helpers other than `creategenerator` have been written-- it seems like this is because the generator repo does not have a sample generator embedded in it (that generates files. anyway-- i can see there is an example custom-generator and mocha-generator in the fixtures directory) for tests. so there's nothing to test the file assertion methods against. i'm pretty new to testing-- correct me if i'm wrong. but shouldn't there be a basic generator available for testing purposes? if so. i can write one. or should i extend custom-generator-simple to create some files?", "apparently linting and jscs errors doesn't break travis build (exit is still 0).i wonder if failing tests would? (probably since you `mocha.run` them mocha would throw a non 0 exit)", "i've updated the mocha and jscs plugins to emit an error event on error.", "this is a very solid pr. awesome work dude! i'm very happy with the efforts you put in. thanks a lot! :stars: > i feel like before is just not a good name for a helper. it implies that the only mocha before hook you'd ever want to use is helpers.before. i suggest changing the name to setuptestdirectoryi agree. could you replace the name. but alias `before` to `setuptestdirectory` (with warning?) so we keep backwards compatibility.> the comment for helpers.gruntfile says that the method is intended to be used as a mocha handler. i'm pretty new to mocha. can a mocha handler accept an options object (the signature is function gruntfile(options. done))?that seems to be wrong. can you find it used anywhere in our code base? (is there unit test showing how the method is used?)", "mocha it() functions missing from menu-spec.js unit tests. noticed several tests in `menu-spec.js` are missing `it()` functions inside of their `describe()` function.the code still runs but it doesn't report to console and doesn't describe issue on failure (it just throws an exception).i have not checked if this is present in other test files.i assume these was just a small oversight.", 'closed by #1218', 'default mocha reporter is now "spec". not sure if you want to change it. or just eliminate the default and let mocha decide', "try mocha's `--full-trace` option.  we eliminated much of the stack trace to ignore mocha internals; maybe it's zapping lines it shouldn't.", "makes sense to eliminate and let mocha decide. this is a leftover from mocha's decision to change the default reporter in a minor release. it was aligned before...", "> this is a leftover from mocha's decision to change the default reporter in a minor releaseugh. don't remind me. live & learn...", "i bet mocha's `--delay` flag could be used to do this. though it would conflict with any other usage.  i'm not in front of a computer; is mocha run in phantomjs itself. with a console reporter?", "i don't even know if the browser bundle of mocha supports `full-trace`", "i'm sure it is reproducable. but i don't know how to reproduce it. using mocha and babel-register and throwing an exception in the source did not reproduce it for me.", "danez i'm not clear what error is not reproducing.can you try this without mocha?", "hello again! any updates about this?i figured out that source map issue makes my tests unusable.i have typical react-components folder with the following structure:```app/components/+-- button|   +-- index.js|   +-- styles.scss+-- table    +-- index.js    +-- styles.scss```i have an `index.js` file for each components. but then i run tests with mocha and `babel-register` hook and i am getting useless error messages.``` typeerror: cannot read property 'label' of undefined      at mapstatetoprops (index.js:45:17)```i see only filename. but this is `index.js` which gives me zero information about actual place in source code.", 'jemise111 you should be able to set it with "types". for example:`    "types": ["chai-http". "core-js". "mocha"]`', 'bcoe thanks a lot for the hint about the double instrumentation. i am migrating from nyc/mocha to jest and just forgot about the existing babel plugin :-)', 'it looks like **mocha** is missing when you run `npm test`.```npm warn local package.json exists. but node_modules missing. did you mean to install?```can you confirm that you have a node_modules folder inside the papaparse folder and you have run `npm install` successfully?']