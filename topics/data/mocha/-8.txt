['likely due to something that was already failing [**1) should resolve json dependencies**]:> mocha -r spec -t 10000 --grep packagethe suite i added to should run successfully:> mocha -r spec -t 10000 --grep infounfortunately. there is no way to tell travis that it should only run this delta; further. i did look at the failing test under the "package" suite but was unable to decipher what it was trying to convey; thus. i didn\'t go any further in trying to fix it.', "examples of tests written to leverage electron-mocha. helloit would be great if this project had an `examples` folder containing 2 tests (one for the main process. one for a renderer process) for testing a fictional electron demo app.at the moment i'm a bit stuck in my tests. not knowing how to go further than just testing pure commonjs modules. that is all what is not specific to electron. some things i would like to do:- test a renderer process html view- test a renderer process javascript- show a menu and activate a menu itemthanks a lot", "thanks jprichardson for reopening the issue. thanks tscanlin for publishing mocha-electron. i'm going to test mocha-electron too and will report here asap!", "thanks for the update madarche. and i'm glad you find it useful for websites and web apps. it wasn't intended to be used for electron apps so i would keep using electron-mocha for that as you said. it sounds like both of these tools have their place.", "since electron-mocha is console focused. maybe it's better to write a separate tool just for that :laughing:", "rgbkrk i'm sorry the repository you're mentioning doesn't contain the answers i'm looking for. please read my pr if you are interested in what i would like to be able to do.", "that's ok! your example with tests makes pretty clear sense.", 'cool. may be start with testing using jasmine / mocha?  i can put together an example later. you then can familiarize through it?', "nicholasjstock i find console output in your example quite correct. all clients connected to the same server should receive the message that server sends into connection. you didn't specify the client you want to send you message to. so all of them receive it.", 'vlizard the code that was posted is not broadcasting. so the output is not correct. those messages are being sent to a specific socket (i.e. ws.send("msgsss") is sending a message through ws. not to all clients).', "grep for specific tests within a file. it'd be nice to just like mocha does to run one test within a test file instead of running the whole file and/or commenting others out.", "since there's no timeout param to mocha test frequently fail somewhat randomly.. at least on my rather sad dev box many mysql ops (particularly creating tables) can take quite a bit longer than 2 seconds. accordingly i've added the mocha '--timeout' parameter and set it to 15000. which seems to pass consistently on my dev box.", 'great! yes this was my thinking too. the separations should be on the type of technology in my honest opinion i.e. server or client.... people will probably swap them out. i think its even possible to use mocha with angularjs on the client so if we had separation via "type of testing framework" then technically we might mix both client and server tests inside the mocha directory. which wouldn\'t be good.also another thing is that you may have developers working on just the server and others working on just the client.', 'adding mocha within gobble. is there a way to run mocha tests within gobble? so a build would re-run tests when changes happened.', "i'm lost. i'm also having trouble understanding that sentence. `npm test` works. maybe you wanted something more specific like being able to run the tests using `node` instead of `mocha`?", 'hi brian.thanks for sharing. i love that you\'ve "pimped" up yadda and it\'s great to hear of people using it in anger. mind if i add a link to your project from the yadda readme.md?```finally we also did detection of the final step having processed to post process the scenario (for cleanup) since we weren\'t able to find a better way to hook into that point in the processing.```yadda emits some events during its life-cycle. i\'d be happy to add more if that would help.', "sorry missed your response. getting huge amounts of noise from my organisations github repos. did you resolve this? it looks very much like the yadda mocha plugin hasn't been setup correctly in your tests (hence why featurefile hasn't been defined).can you paste the code from /test/features.js?", 'no need to choose. just do something like `.split(/[\\s.]+/)`.', "yes. of course! thanks. let's go with that.", 'thanks guys :-))', "how do i test addfilter with mocha & chai?. i have a plugin called nunjucks-date that installs itself much like``` jsenv.addfilter('date'. require('nunjucks-date'));```can someone guide me add tests for this in my plugin?any help will be appreciated.", 'appdir always references current directory regardless of where roosevelt is required. when running a mocha test suite for route testing. the appdir looks for a `package.json` in the current directory of the test file. but we need to look at the root of the project.   #### smart option : if roosevelt ~~somehow detected that it was being called in via a test framework~~ scanned the project directories. `appdir` would point to the correct `package.json` in the root directory of the project. #### less smart option: it would also be nice if your could pass in the appdir as a param at require()', 'fix automated tests for about:history page. - [x] added/updated tests for this change (for new code or code which already has tests).- [x] ran `git rebase -i` to squash commits (if needed).test plan:run `mocha test/about/historytest.js`close #8524', "nalwayaabhishek have you found a solution to your mocha tests? the suggestion by hellogerard in #628 fixes my tests. but i don't know what (if any) negative effects it could have to silence the mockery warnings", 'the testem-node module only works with modules that output tap when run with `node`i need to refactor it so that it can run something like `mocha --spec tap test`', 'gave this some more thought and think the current implementation is not really node specific. it is basically spawning some process that outputs tap. maybe we should position it as such: support for external tests that output tap. but. given that. i also need to think about how that fits in with the browser launchers generalization. should it be treated like another browser launcher? we will probably need to stop calling them "browser" launchers. and so forth. taking a step back though. someone other than you have asked for node support - that\'s sort of a holy grail for some people - to have the same code automatically tested on either the browser or node - that\'s the goal of buster.js. after all.what i am thinking would be the ideal scenario is the user would specify something like```framework: mochasrc_files:- mycode.js- mytests.js```and then it just would run in either node or the browser. wonder if that is realistic given the commonjs requires in node. might be more doable via browserify. so maybe```framework: mochaentry_point: mytests.js```and then it will know to run it in node or browserify it and run in the browser. i want to try my best to support all frameworks too. so jasmine. and buster. thoughts?sorry i\'ve gone off track. but i am just trying to think more long term.', 'is it possible now to write tests with mocha for node?', "whitecolor i have gotten it working with mocha but it's a bit unstable. just get mocha to output tap", 'raynos how my testem.json should look like?{    "node": "node_modules/mocha/bin/mocha".    "node-args": ["--reporter tap"]}that doesn\'t work.', "i suppose we should remove all `[only:*]` entries from mocha test and testcafe test names to avoid `skip-only` directive duplication since we have `only` option in `runtests`. inikulin do you agree or it doesn't matter?", "#445 is merged. please change `[only:chrome]` directives in mocha and testcafe test names with { only: 'chrome' } argument in the `runtests` function", 'inikulin. mocha timeout affects the "before all" method. in other words it has the same timeout as tests. so functional tests task falls while connecting to sauce labs and starting vm.also. sauce labs virtual machines are configurated so the maximum running time is 30 minutes.we had cases. when two machines have already worked for about 25 minutes and the third just started. the result - browsers are turned off in the middle of tests', 'i added another commit too which specifies a name for growl. i use this with growl in order to configure mocha notices to be displayed on my secondary screen where i run my terminal.', "this solution does not work on windows. it tells me that the file *.js doesn't exist (it does not expand the wildcard).", 'now that you say it - from /tests/ it works.it will be nice if the docs would say something about it explicitly...i placed my opts file in the project root. from where i call mocha (just like where i put my log4js.json. for example). and expected it to be taken from there.the funny thing is i believe that when i saw mocha.opts in another project it was on the project root as well.', 'oh no i meant like jquery etc. hmm. there\'s a new feature in mocha that allows you to ignore globals with a wildcard like "script*" since this is probably from jquery or similar', 'thanks for trying to get his into mocha will make it much easier to integrate into existing ci servers.', "this issue has been inactive for over 2 months so i'm closing it. if you think it's still an issue re-open. - tjbot", "this issue has been inactive for over 1 month so i'm closing it. if you think it's still an issue re-open. - tjbot", 'i think this new feature is not yet implemented. is it?', "it does not fix yet.the event listener 'uncaughtexception' is not released when test has run.", 'pushed the fix', "you're not calling done() in the settimeout there so mocha moves on. that's why you get what you do", "yeah unfortunately it's difficult to extend mocha from the outside right now. but i hope to add some api for that in the near future. same for interfaces. they're pretty easy to maintain though so i dont mind having them in the repo for now", 'i doubt it has anything to do with node/mocha. just terminals / shells. unicode blah blah', "i'll like to know how did you set your jenkins jobs to publish your xunit report generated with mocha. i'm trying to do this on my side and have some issues. thanks for the help!", 'thank you very much! it works!', 'awesome', "sorry the bot was checking the last comment's date. but there was no comment so it must have thought it was old. i dont mind this idea. but i think you should use an environment variable to tweak something like `make test`. vs tweaking mocha directly via env", 'yeah. that is a possible alternative. however i think. let comfort aside. it would also standardize the name of mocha env parameters in teams. also think of usage in multiple projects (e.g. policy).', "mocha coverage using jscoverage integration with sonar. it's more a question then an issue but. i would like to know if there is a way to use sonar with mocha (unit testing and coverage)? if yes. how can i do this?for your information. i'm already using jenkins for ci on my project running all my tests with mocha. i'm also using ant to do this.thanks for the help!", 'whitelist common globals (settimeout. etc). they\'re non-enumerable so mocha misses them:``` jsobject.keys(window)["window". "top". "location". "external". "chrome". "v8locale". "document". "html5". "modernizr". "$". "jquery". "jquery1720022294572554528713". "moment". "github". "baconplayer". "dateinput". "clippycopiedcallback". "debug". "_gaq". "_gauges". "$stats". "_gat". "gaglobal"]window.settimeoutfunction settimeout() { [native code] }```', 'consider using `object.getownpropertynames` if available.', 'never heard of sonar', "yeah. we'll have to whitelist these ones anyway but that's a good plan", 'won\'t work for the case in question: `window.hasownproperty("settimeout") === false`.', "haha i'm not surprise! sonar is an opensource project used to calculate different metrics related to your code. check multiple coding rules. etc. here's the link where the project :  reading your answer. i don't think that what i'm asking for is implemented unfortunately. or maybe i'm wrong. i'm reading that jstestdriver coverage works with sonar because the generated report is compatible with the lcov format. maybe mocha coverage supports already this format and i don't know it.again. thanks you very much for your help and time!", "mocha's is just an html report right now", 'goot to know. thanks for your fast answer!', 'actually i lied. we have json-cov as well but not lcov', 'i\'d even be happy if i could just add "--no-growl" to revert the earlier "--growl" on the same command line. perhaps that\'s a bit daft though.', "yes. this is still an open issue but i'm missing permission to reopen it. we can take care of implementing this feature and create a pull request.", "i'm still -1 personally. having logs spew out at all times is kinda weird. i would think the inverse would be a bit cleaner. maybe have a verbose ./test.log", "yeah you could certainly argue about which thing should take precedence when it comes to hogging stdio. _but_ simply because mocha already operates over stdio i think it would be cleaner to log to a file. then there's no modifications on mocha's end", "`mocha --watch` fails on thrown exception outside of test. for example. if `controller.robot` is not defined. the following causes mocha to stop watching files. forcing me to restart it manually.```describe 'controller.robot'. ->  r = new controller.robot  it 'has a thruster'. ->    r.should.have.property('thruster')```on a related note. if the test script contains a syntax error. the same thing will happen (at least when using coffeescript).", "we started doing as you say. redirecting the logs to a file but it's not clean so we dropped it. instead we're just going to parse all the logs and extract the json report.hence closing the bug.thanks- nicolas", "what's not clean about outputting to a file? it's either mocha outputting to a file or logs outputting to a file. neither is dirty really but all the other reporters output to stdio", 'you cant catch non-eval syntax errors', 'because the logging in the tests is pretty much either console.log or some stdout.write("stuff").so the only way to redirect logs to a file is to redirect stdout (and stderr) to a file. then when the tests are finished. we must bring stdout and stderr to normal.', "yeah. the community (for better or for worse) doesn't really use console.log for actual logging. more like a puts()", 'ok so you won\'t merge this one. but perhaps the problem can be addressed in a way that doesn\'t require user intervention in every single test file?for example. how about allowing a "mocha-init.js" in the test root. which allows setup including adding hooks or aftereach blocks that affect the entire test suite. explicit. but not arduous.it could even replace mocha.opts eventually - whatever you have in mocha.opts could become something like:mocha.addopts("--growl". "--etc")the fact that it\'s just js allows for additional composability and flexibility (e.g only adding --growl if growl is installed)', 'empty mocha.opts breaks mocha. steps to reproduce:- create a test/mocha.opts file. but leave it blank- run mochaexpected:- the test are runactual:- mocha complains about not being able to find a ".js" file', 'globs already work with posix shells. it would be kinda anti-*nix to glob arguments passed in', '+1note: it\'s easy to hook into the pass/fail event\'s from the js api\'s mocha.run() object and make your own reporter functionality but it seems i can\'t completely silence/null the stdout reporter: i keep getting some failed reports in red. it seems it\'s the base.epilogue (related to #138 maybe?)i use this in a jake task```mocha = new mocha({    reporter: false    ui: "bdd"  })```', "--watch fails on windows. mocha --watch results in:node.js:468          var b = process.binding('signal_watcher');                          ^error: no such module    at process.startup.processsignalhandlers.process.on.process.addlistener (node.js:468:27)    at object.<anonymous> (c:\\users\\shanec\\appdata\\roaming\\npm\\node_modules\\mocha\\bin_mocha:242:1    at module._compile (module.js:449:26)    at object.module._extensions..js (module.js:467:10)    at module.load (module.js:356:32)    at function.module._load (module.js:312:12)    at module.runmain (module.js:487:10)    at process.startup.processnexttick.process._tickcallback (node.js:244:9)windows 7 64bit", 'node issue', 'allow test selections to be inverted. this allows an easy way to ignore a subset of tests. such as:`mocha --grep slow --invert  # ignore all tests tagged with "slow"`', 'nice! looks good thanks man', 'escaped --grep as well. if anyone wants to actually use regexps we can add something like `--egrep` or sth', 'make mocha textmate bundle. i just started to use mocha and found that i really love it. i followed the mocha homepage best practice areas to create makefile and mocha.opts. and run "make test" -- my testing projects runs just fine. that means make works on my machine.then in the same file location ( root of the project ) run "make tm". it gives me this error "make: **\\* no rule to make target `tm\'.  stop.". where should i run this command to generate the textmate bundle ? i did stackoverflow search. google search. and issue list search. and still no luck to find the answers. hope that you could help. thanks.', 'html runner doesn\'t safely escape markup in suite titles. if i write the following test for example (using jquery and chai):``` javascriptdescribe("when <script> is used in the suite title". function(){    it("should still cause the dom to be parseable". function(){        $(\'#mocha\').clone.should.not.throw.error(error);    });});```', 'hi.we working on big project uses express and mocha as testing framework.for our integration in jenkins. we need doc and xunit reporters output to files (just mocha output!)do you have any plan to provide such functionality? thanks a lot!', "hi badunk.yes. i saw this solution. but it not solve the problem :(the problem. that redirected output file (tap. xml ... ) contains both mocha output and also output from other modules in shuffle manner.we don't want to parse this file for extract only mocha's messages in order that jenkins can take it.thanks again.", "in my case (windows7 64) everything works fine in console. but when i invoke the same command via node's exec or spawn. only part of message is displayed (e.g. all error messages are missing). this problem makes it impossible for me to run mocha from my coffee script's cake file.", "hmm i've had no issues with this. i use mocha locally in all my projects", "turn reporters into seperate module. the mocha reporters are sweet. however they are hard coupled to the mocha interface.it would be elegant if they were a seperate module.consider mocha just outputting tap format for the tests to stdoutand then doing`mocha test | mocha-reporters --dot`the mocha-reporters module could just be a thing that takes tap input and outputs to the reporter to stdout.you could also consider using it programatically as`mocha.output.pipe(mochareporter.spec).pipe(process.stdout)`this allows people to re-use the reporters in any test framework that outputs tap.if you think this is a sensible idea we can draft out how the refactoring would go and i can try migrating the reporters into seperate modules. i've pretty much ported the html reporter to something that consumes tap already so that feels like duplicated effort.", "+1 from me but i'd like to retain the convenience that mocha already provides for backwards compat", 'yes `mocha --spec spec` would simply pipe the tap output into the correct reporter.', 'meaning mocha-reporters would be a dependency of mocha and used whenever spec is used.', 'scroll #mocha in html reporter', 'yeah that sounds hacky. why not just listen on mocha\'s "end" event?', 'empty mocha.opts no longer searches for a .js file. `"".split(/\\s+/)` returns `[ \'\' ]`. by default. mocha searches in the `test/`directory if the array is empty. but since the previous sentence washappening. the array was not empty and it searched for a file called`\'.js\'`. fixes #477', 'why are we +1ing an empty mocha.opts though. why would you use an empty one', '-1 from me', "i don't think we should be coding around an empty mocha.opts. just don't use one :p", 'i think i see your point. what if it prints a message like "empty mocha.opts found. please delete or fix." and exits instead?imo doing that would be a better error message than erroring with file ".js" not found.', 'i vote for `this._mocha.runnable`', "ignore files starting with . (dot). i'm using mocha on a network share. where osx creates resource forks (e.g. `._filename.js`). so this ignores files starting with a `.`", '+1 for me', "this works for me:```var jsoncov = require('mocha').reporters.jsoncov;```since i extend the jsoncov reporter.same should work for base:```var basereporter = require('mocha').reporters.base;```", "yup definitely! that would be great. i'm using jscoverage. and then the report itself is in mocha but i want to use the same thing for the client", "storage error objects aren't error instances. the error objects you get as the first parameter to completion callbacks are just plain objects. these should be instances of javascript's error type (or a subtype thereof).this is causing difficulty in using mocha tests. you can pass an error object to the done() method used to complete a test case. however. if you pass the error object directly from the azure callback to mocha. like so:``` javascriptit('should do something and fail'. function (done) {    someservice.somethingthatfails(function (err. result) {        done(err);    });})```you'll get this error: done called with non-errorreally annoying when you're trying to thread error information all the way through an async flow out to a test.", 'fixed in pull request 317', 'added slow option to pass to mocha. used for highlighting slow tests', 'mochaphantomjs.run() does not pass through callback parameter. mocha.run() accepts a method to call back when testing is complete.  mochaphantomjs.run() does not pass through any arguments.  it would be helpful to have this callback available for js code.', "support mocha-cobertura-reporter. is there anyway to get cobertura reports from this? the documentation around using third-party reporters is pretty slim. and i can't figure out what i'm supposed to pass. could i pass `cobertura` as a function? or does it need to be the name of a reporter as a string.thanks in advance.", 'reporter output empty. when running:```mocha-phantomjs -s localtoremoteurlaccessenabled=true -s websecurityenabled=false -r xunit -f xunit-dump.xml :9000/tests.html```i see all my tests running. but there is nothing inside the report file. it is empty and the xunit output is sent to stdout. together with console.log messages', "just use the 3rd party reporter option:```mocha-phantomjs <yourtests.html> -r <path to nyan.js from mocha's source code>```in my above example `~/github/mocha` is my local mocha clone.", "from the command line. you'd just pass the 3rd party reporter file as the parameter. see the unit tests for an example.remember mocha runs in the browser with mocha-phantomjs. not node.js. so the reporter and all it's dependencies. recursively. must run in the browser.looking at it. since it depends on jade and writes a file. you'll probably have to rewrite it. phantomjs does have file functions. but another option is just dump the xml to `mocha.process.stdout` then use the `--file` option from mocha-phantomjs. you might be able to use browserify to bundle jade. otherwise write it out with string concats. if you do that. coffeescript has some native string templating that would help here for readability. along with comprehensions that would make the code much more compact.", 'yeah xunit outputs to stdout instead of using `mocha.process.stdout`. see #114', "a test for this please. as you'll see it will fail as you didn't wire up that option to anything to the actual code running in phantomjs. see how i implemented bail in 8641736", "you're very welcome. thanks for your good work on mocha-phantomjs!", 'this still issue is still present', "replaced them in the xunit.js but not the compiled mocha.js and yes. i guess i understand where hell is coming from as i've been bitten by it myself in qunit test runner. honestly would really like to have this working for jenkins or other xunit consumers", 'great! any help is welcome!i have some bandwidth to dedicate on the javascript glv this week. there are still several remaining items:- `driverremoteconnection` implementation that can communicate with gremlin server.- adapt the execution pipeline to match the new async execution in tinkerpop-1490 and expose method `promise()`- add node.js runtime and run tests on mocha (ditch jjs) and create integration tests.- add documentation for javascript glv on `gremlin-variants.asciidoc`', "tests and coverage fail to start on windows. when doing development on the module in a windows environment. `npm test` and `grunt test` both fail when trying to execute mocha. due to how the commands are processed by the command prompt. command paths should use `path.join` instead of having hard-coded path separators.in addition. on windows. istanbul fails to properly execute as it tries to run the test runner (`_mocha`) as js whereas on windows the files in the `./node_modules/.bin` directory are cygwin shell scripts (when without extension) or windows batch files (when with `.cmd` extension). the actual js script from the mocha module's `bin` directory should be used instead.", 'fix global leak. when running functional tests with `mocha`. it detected a global leak which prevents me from running my tests.this pr removes the leak. which is always a good thing :)', "any idea why jshint didn't catch this?", "nope. but as mocha detects them on runtime it's far easier for him. static analysis may not detect them all. that's my guess.", 'nah. static analysis should be able to catch them all (assuming not doing weird things with eval).', 'hi. i installed brunch from master. the mocha dependency is ok. but there are issues with the skeletons. there is not folder in brunch module']