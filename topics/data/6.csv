jsforce/jsforce,mocha,2015-01-05T13:21:52Z,enhance ci test stability. enhance mocha test runner to accept .env file for local testing. and add session management not to override the test data in testing org.,negative
jprichardson/electron-mocha,mocha,2017-02-14T20:44:58Z,are you perhaps opening windows in your tests which are not being closed? i remember having issues with cleaning out the temp folder on windows when i forgot to close windows (in addition to the one managed by electron-mocha),neutral
jprichardson/electron-mocha,mocha,2017-02-20T09:40:54Z,well. have you installed the electron headers for your target platform and rebuilt (e.g.. with `node-gyp install` and `node-gyp rebuild`)?(closing this issue as it's not pertinent to electron-mocha itself).,neutral
jprichardson/electron-mocha,mocha,2017-02-22T18:39:09Z,so if `electron-mocha` isn't for testing an electron app.... what is it for?  i've been torturing myself trying to get spectron to work. but it's so many steps removed from my main process that it's getting to be a pain (to do things like click on a menu item. for instance).  i'd rather run my tests from within the main process.  is this something `electron-mocha` can do?,negative
jprichardson/electron-mocha,mocha,2017-02-22T20:53:57Z,i use `electron-mocha` for *unit* testing an electron app; you can also use it in `--renderer` mode to test web apps -- but i use for an electron app. i think the op was looking mainly for a way to write integration and ui-driven tests for an electron app. but `electron-mocha` does not provide much help in that regard. basically. what it does is. it runs mocha in an electron main or renderer process. this way. you can unit test all the code of your app in the right environment. if you're used to writing unit tests this is probably what you're looking for. nothing hinders you to write integration tests (i.e.. open your entire app in a window and instrument it etc.). but you'd have to do all the legwork yourself.,neutral
ramda/ramda,mocha,2014-12-28T22:13:41Z,fixes mochatest:docs. includes code from pr #705,neutral
ramda/ramda,mocha,2014-12-30T01:09:09Z,crosseye: we get this one in and i'll be good to start on the doc page upgrades.,positive
ramda/ramda,sauce,2015-03-15T13:11:34Z,anti-sauce. sauce labs is running after each platform build and if it errors -- not _fails_ -- on any one. the whole build gets marked as errored. i propose running sauce either pre-publish or at regular intervals.,negative
ramda/ramda,sauce,2015-03-15T15:03:36Z,:herb:i wonder if travis allows any other triggers than check-in.  a daily build for this sounds perfect.,positive
ramda/ramda,sauce,2015-03-15T15:12:36Z,i think this would have to be outside the context of travis. since travis will always do what is configured in .travis.yml. but the idea of adding more infrastructure is making me feel sick,neutral
ramda/ramda,sauce,2015-03-15T16:10:11Z,:deciduous_tree: no more 20-minute builds? sounds good to me!,positive
ramda/ramda,sauce,2015-03-15T16:18:34Z,should probably do the same for bench tests,neutral
ramda/ramda,sauce,2015-03-15T17:35:13Z,its not too hard to run sauce on only one step of the matrix (see underscore).an alternative is to use twitters tool to run the sauce tests and comment on the relevant pr or commit,neutral
ramda/ramda,sauce,2015-04-07T00:14:12Z,> is there anything captured that identifies the remaining tasks. or just how best i can help out?the important stuff is done. although can be improved: hint. jscs. browserify. test. what remains is saucelabs. benchmark. orchestrate. and all of the docs-related stuff. the docs stuff is a big job. and might be best just moving to ramda.github.io repo.,positive
ramda/ramda,sauce,2015-04-07T19:34:16Z,when we (let's face it: _i_) re-integrate saucelabs. we'll have to have some way to run the tests in a browser. how they are assembled is immaterial for that.,neutral
request/request,standard,2017-10-06T17:33:07Z,freyert i don't agree that this is a solution because it is not guaranteed that this api is under our control. at least this should be configurable. many of us will want to be able to request apis that do not adhere perfectly to ietf standards.,neutral
request/request,karma,2015-07-14T20:53:44Z,simov i merged your stuff over and rebased to master. everything should be good now once the build clears on travis.,positive
request/request,karma,2015-07-14T21:02:43Z,something seems broken with karma. the har-validator package can't find the json package... i'll have to look into this later.,negative
request/request,karma,2015-07-15T13:14:30Z,thanks for the feedback pho3nixf1re :+1:,positive
jquery/esprima,eslint,2014-05-22T04:32:27Z,maybe we should integrate eslint into the testing process.,neutral
electron-userland/electron-download,standard,2016-10-15T11:54:10Z,save cache to standard directory. the cache is saved to a standard cache directory using the "env-paths"module. rather than saving in the home directory.the old cache directory will automatically be migrated to the newlocation.breaking change: cache is no longer stored in `~/.electron`.,neutral
jsreport/jsreport,standard,2016-06-09T00:06:24Z,on the api command line call i feel the following would be useful . ( high )--template.data  path to json file which holds the data the report will use.--template.helpers  path to a file of java code which can be called.  why we are likey to crate a standard code base and call themalso if possible  (low)there are a number of setting you can pass these are available by passing a json object to the template some of these values may have value i.e paper size.,positive
elastic/kibana,selenium,2016-05-05T16:11:06Z,i'll suggest we change from using `wreck.request('get'....` to `request.get(url)` like we use when we download the selenium jar.  i don't think i've ever had problems with that.,negative
serverless/serverless,eslint,2016-10-30T18:22:08Z,lmammino im not sure about the errors that cause the linting to fail. i haven't touched those files in my pr. any idea? can an admin rerun the build on travis? could it be an update of eslint?,negative
serverless/serverless,eslint,2016-11-01T10:06:36Z,pmuens cool ... we need to merge invoke local first and rebase because they include the eslint fixes ... dont wanna fix it twice and conflict,positive
serverless/serverless,coveralls,2017-03-06T12:01:35Z,update coveralls dependency. closes #2767,neutral
origamitower/folktale,mocha,2017-09-25T03:51:47Z,robotlolita yeah. the issue is from jest. i think. i tried same test on mocha. it is fine. i will update if i solve the jest issue.,positive
airbnb/javascript,eslint,2016-10-12T17:17:31Z,that's an ancient eslint-config-airbnb. please update to the latest. using the bash command in the read me.,positive
airbnb/javascript,eslint,2016-10-13T22:49:56Z,expected "this" in class method react native. in react native navigator component. i move renderscene attr out to a class method. it check if route.id match and return component. it forces me to use "this" but i don't think i need it.  i am on phone can't show code. any suggestion or just simply // eslint-disable?,negative
airbnb/javascript,eslint,2016-10-13T22:51:13Z,i'd need to see code to be certain.basically. outside of interface things a framework requires (like react component methods). things should only be instance methods if they need `this` - otherwise they should be static methods. or closed-over functions.,neutral
airbnb/javascript,eslint,2016-10-14T17:15:54Z,that's intentional. until eslint-config-airbnb-base gets a semver-major release.,neutral
airbnb/javascript,eslint,2016-10-14T17:15:59Z,this is intentional. until eslint-config-airbnb-base gets a semver-major release.,neutral
airbnb/javascript,eslint,2016-10-14T18:33:00Z,that seems like a great use case for a separate function or a static method. is there any reason it needs to be an instance method?,positive
airbnb/javascript,eslint,2016-10-14T18:33:57Z,put another way - is that a special method in react native? if so. it belongs on the instance - if not. it doesn't.,neutral
airbnb/javascript,eslint,2016-10-14T18:37:49Z,this is intentional until eslint-config-airbnb-base is released.,neutral
airbnb/javascript,eslint,2016-10-14T20:28:07Z,using the hardcoded class name is the most reliable.,neutral
airbnb/javascript,eslint,2016-10-14T21:59:10Z,djviolin assuming you are using the `linter-eslint` package in atom. you shouldn't need to set anything. it should detect the locations for you if you have everything installed locally in the project.the latter actually won't work inside atom. at least not without modifying the code of the package. what you are describing is similar to a global install of eslint which isn't recommended. but is supported.,neutral
airbnb/javascript,eslint,2016-10-15T03:13:16Z,whoops. that's not a very good example :-) i'll fix it.in the case of dom nodes. because "the dom". you can't avoid mutation. so. in that case only. it'd be appropriate to use an inline eslint override comment. at airbnb we don't tend to run into that problem because we use react.,negative
airbnb/javascript,eslint,2016-10-16T16:54:31Z,added the two others. and rebased.for `space-before-function-paren` i did not follow the default of eslint as that would be against this guide. and as the change is breaking anyways. no issue there,negative
airbnb/javascript,eslint,2016-10-17T03:32:06Z,the eslint settings we want for `space-before-function-paren`:``` js    {        "anonymous": "always".        "named": "never".        "asyncarrow": "ignore" // todo: semver-major; set to "always"    }```,neutral
airbnb/javascript,eslint,2016-10-28T17:26:50Z,oh wow. i had no idea. any plan to enforce that with the eslint config (if it's even possible to ban all loops)?,positive
airbnb/javascript,eslint,2016-10-28T17:29:20Z,the base eslint config already bans everything except a normal for loop (including your for..of loop) - the next release of the main eslint config will do so as well.banning normal for loops is a bit restrictive due to the lack of a `range` builtin in js. but eventually that will be included too.,negative
airbnb/javascript,eslint,2016-11-01T21:35:25Z,using arrow functions in mocha tests is [discouraged]( according to their official documentation.,neutral
airbnb/javascript,eslint,2016-11-01T21:37:06Z,`mocha` is wrong. using `this` in tests is discouraged. despite what their documentation says.,negative
airbnb/javascript,eslint,2016-11-01T21:40:21Z,what is the reasoning behind discouraging the use of `this` in tests?,neutral
airbnb/javascript,eslint,2016-11-01T21:44:03Z,and what would be a better way to write mocha tests without using `this`? closure variables?,neutral
airbnb/javascript,eslint,2016-11-01T21:54:06Z,`this` is shared mutable state. and should always be avoided when possible. what would you say you use `this` for in your mocha tests? i can better suggest an alternative if i know your use case.,neutral
airbnb/javascript,eslint,2016-11-02T07:47:23Z,you should totally request a rule for that from eslint,neutral
airbnb/javascript,eslint,2016-11-02T16:14:36Z,people absolutely use both spacings. which is why there's an eslint rule to prevent having the separating space.thanks for the contribution! happy to reopen if you want to instead adapt it to include both patterns. but as-is the current spacing is what we'll stick with.,neutral
airbnb/javascript,eslint,2016-11-02T22:46:48Z,leopoldofu yes. for that you should use closed-over variables instead of mutating `this` - ie. the latter case.separately. never use noop matchers like `.to.be.true` - because `.to.be.purple` will pass too. you want `.to.equal(true)` so that if you use the wrong matcher. it will throw. the `no-unused-expressions` linter rule should complain about that.,negative
airbnb/javascript,eslint,2016-11-03T17:48:04Z,ok. as long as no one knows of any negative side effects.thanks for the additional tip on the matchers. will implement it. i was ignoring the eslint error on them because i thought it just didn't know about matchers when writing tests.,negative
airbnb/javascript,eslint,2016-11-06T18:32:00Z,happy to discuss further - at the moment the advice is to use eslint disable comments for the places you do want `proptypes.any`.,neutral
airbnb/javascript,eslint,2016-11-07T17:38:49Z,jsx-a11y/anchor-has-content throws error. for some reason. when i run the package "as it is". it throw referenced from: airbnb...  configuration for rule "jsx-a11y/anchor-has-content" is invalid:        value "" is the wrong type.i know this is not the jsx-a11y repo. but. if i run it separate. it works fine.no rules were added to the .eslintrc fileany ideas?,negative
airbnb/javascript,eslint,2016-11-07T21:54:04Z,as long as phpstorm supports eslint. then yes. i'm not sure how to integrate it since i don't use phpstorm.,negative
airbnb/javascript,eslint,2016-11-07T21:57:35Z,i think its support eslint. where can i find the eslint file?,neutral
airbnb/javascript,eslint,2016-11-07T22:02:53Z,instructions are in the readme.,neutral
airbnb/javascript,eslint,2016-11-09T00:52:58Z,isn't the default for comma-dangle supposed to be functions: ignore? i'm trying to turn the rule off for functions in my .eslintrc but setting functions: ignore isn't working correctly. it barks about trailing commas in objects that are function arguments.,neutral
airbnb/javascript,eslint,2016-11-09T01:04:34Z,ah. gotcha. well. the screenshot in my first post is the thing i'm looking at right now. when i set up my .eslintrc like this. i get many many "unexpected trailing comma" errors where i didn't have them before. simply removing that entry under "rules" gets rid of them (though i still have the one in the screenshot).```{  "extends": [    "eslint:recommended".    "plugin:import/errors".    "plugin:import/warnings".    "airbnb"  ].  "plugins": [    "react"  ].  "parseroptions": {    "ecmaversion": 6.    "sourcetype": "module".    "ecmafeatures": {      "jsx": true    }  }.  "env": {    "es6": true.    "browser": true.    "node": true.    "jquery": true.    "mocha": true  }.  "rules": {    "import/no-extraneous-dependencies": [2. { "devdependencies": true } ].    "no-underscore-dangle":["error".{"allow": ["_id"]}].    "new-cap": ["error". {"capisnewexceptions":["router"]}].    "no-use-before-define": ["error". { "functions": false. "classes": true }].    "comma-dangle": ["error". {"functions": "ignore"}]  }}```edit: one of the newly "wrong" dangles is:```const thingschema = new mongoose.schema({  name: string.});```normal object dangle. as you can see,negative
airbnb/javascript,eslint,2016-11-09T02:07:03Z,that's what i'm saying; ```"comma-dangle": ["error". {"functions": "ignore"}]```makes eslint complain about an unnecessary comma dangle there and many other places.,neutral
airbnb/javascript,eslint,2016-11-09T02:07:49Z,oh weird - that seems like an eslint bug. can you file it on the eslint repo?,positive
jxnblk/rebass,standard,2016-09-17T09:24:25Z,but why?standard haven't config. not discuss rules; just works.,neutral
velesin/jasmine-jquery,jasmine,2014-03-24T16:22:42Z,+1,neutral
velesin/jasmine-jquery,jasmine,2014-03-25T19:24:37Z,velesin ? publish?,neutral
webrtc/samples,selenium,2016-01-25T23:29:43Z,more useful chrome flags. kaptenjansson i think we should move the selenium lib into a npm package.,neutral
webrtc/samples,selenium,2016-01-26T08:40:18Z,yes. i will do that this week.,neutral
webrtc/samples,selenium,2016-01-26T08:40:52Z,ftr what's the reason behind enabling these flags?,neutral
raszi/node-tmp,mocha,2018-05-21T22:42:53Z,this is also happening when using mocha. some tests are creating temp dirs. which get removed normally when the process exists naturally. but not in the ctrl+c signal. this should be as simple as adding a listener for the ctrl+c signal. and then performing the cleanup action on that signal in addition to the exit signal. right?should also note that `tmp.setgracefulcleanup()` was required to be called to clean up async temp dirs. even though `unsafecleanup` was used in the options (might be a separate issue: calling `unsafecleanup` was not sufficient to get the library to cleanup the temp dirs).,neutral
expressjs/express,eslint,2018-01-22T20:20:37Z,dougwilson ok. so i got a question. actually in the project there is `eslint` and no `standard`... the `.eslintrc` is not configured to remove the semicolons or to prevent there.... let me know if you want i can create a new pr with `standard` or with the semicolons configuration. thanks!!,negative
expressjs/express,eslint,2018-02-13T14:53:36Z,nice. didn't even know this! is it possible to name it `.eslintrc.yml` to match `.travis.yml`?,positive
expressjs/express,mocha,2013-09-10T10:02:13Z,can anyone confirm? i don't have a windows machine to check,neutral
expressjs/express,mocha,2013-09-10T13:47:50Z,i rebased.i'm now getting a strange windows-only failure in which the `beforeeach()` callback in test/router.js doesn't run before one or two of the tests. causing `router` to be undefined.running `mocha test\router.js` only makes those tests work fine; i'm trying to figure out what's going on.,negative
tinesoft/generator-ngx-library,coveralls,2017-11-24T21:03:30Z,feat(workflow): add options `--skip-travis`. `--skip-coveralls`. `--s…. …kip-gh-releasing`closes #130,neutral
prettier/prettier,eslint,2017-11-14T09:03:17Z,yea. that sounds good. but seems that it dont understand eslint.i will experiment with it and try to collaborate if it is open.,positive
prettier/prettier,eslint,2017-11-17T09:08:59Z,> just fyi. the vetur extension for vs code supports formatting <script> tags based on prettier-eslint out of the box.do you know if this is documented somewhere? i can't get it to work alongside `eslint-plugin-vue`.,neutral
prettier/prettier,eslint,2017-11-17T18:57:48Z,thanks for these explanations.i was already using _eslint-config-prettier_ as recommended but i didn't saw all the information in the repository. i'll look into it.,positive
prettier/prettier,eslint,2017-11-19T19:24:28Z,lipis for that electron case. eslint could add the spaces in function declarations after a prettier run... but i dunno if eslint can format code within markdown code blocks.,negative
prettier/prettier,eslint,2017-11-20T10:12:25Z,eslint is parsing .js files and not .md so i'm not sure if we can do anything about it.,neutral
prettier/prettier,eslint,2017-11-27T14:11:56Z,iirc. there's no difference between their `latest`/`insider`/`next` build process.i'm not sure if we should add it here or in typescript-eslint-parser. cc azz.,negative
prettier/prettier,eslint,2017-12-01T22:09:01Z,i originally was against this feature. now i'm neutral and wouldn't mind having it. that said. imo. this would be better living in a separate tool that can run after prettier (`prettier-eslint`. `prettier-standard`. etc.). but i think the same about almost all of our other options (the exception being `tabwidth`).i think this falls in the same category of the other options we started to support. i missed the discussion of when they were initially supported so i don't know how much demand there was. but i think this brings more value than something like `nobracketspacing` or `jsxbracketsameline` (no wonder people use it so much as an argument "why don't you support x option if you support y?").,negative
prettier/prettier,eslint,2017-12-12T15:17:54Z,azz the only reason i can think of is keeping the config format options as close to eslint as possible because many people use it alongside eslint and would expect the options to be the same. i could be wrong but not allowing `prettierignore` is the only difference from where you can add eslint settings.maybe more people prefer using files to package.json keys (`.eslintrc`. `.eslintignore`. `.prettierrc`. `.prettierignore`) but it seems incomplete that the only thing missing is allowing `prettierignore` in package.json,neutral
docpad/docpad,standard,2014-11-30T17:42:17Z,cool.i think it'd be a good idea to have a standard where for a plugin to deprecate another it should be confirmed working by 2 people (besides the author) and/or have passing tests.just so that users are not given a buggy replacement.how does that sound?,neutral
swagger-api/swagger-ui,eslint,2017-09-20T03:14:46Z,thanks for catching my `describe.only` on that test.... we should set up eslint to prevent that,neutral
postcss/postcss-cli,standard,2017-10-05T18:15:16Z,yarn has some non-standard behavior here; if you run `yarn postcss`. it will run the local installation of `postcss` if there's no script defined in your package.json. npm scripts have pre- and post- hooks. so when you run the `css` script. it attempts to run the `postcss` script afterwards. due to yarn's behavior. it attempts to run the `postcss` command without any args. which causes the stdin error.as a workaround for yarn's non-standard behavior. rename your `css` script to something else. and you won't have this problem. (or just use good old `npm`),negative
caolan/async,mocha,2016-02-01T19:24:21Z,async.race() method. based on the discussion from #568 .contains mocha-based tests and readme update.,neutral
caolan/async,mocha,2016-02-02T22:56:54Z,megawac should we merge this now. or wait until the modularization is complete?  (that branch is almost ready to be merged. just some package questions remaining).,neutral
caolan/async,mocha,2016-02-03T08:43:18Z,aearly megawac i could send a new pull request against the modularization branch and close this one. what do you think?,negative
caolan/async,mocha,2016-02-03T08:46:17Z,that would be really helpful.,positive
JedWatson/react-select,coveralls,2016-03-05T09:49:31Z,jedwatson please let me know if there is anything wrong with this pr which may be stopping it from being merged.im not familiar with coveralls - from what i can see from the select.js coverage - all the lines i added have test coverage (ie. there is no red lines),neutral
nightwatchjs/nightwatch,jshint,2014-10-13T06:53:09Z,there are jshint errors.,negative
buildo/react-components,eslint,2016-08-27T15:47:55Z,closing in favor of #490,neutral
buildo/react-components,eslint,2016-09-07T17:14:19Z,it's just eslint not knowing about the global `jest` object. fixed in the latest commit,neutral
formly-js/angular-formly,eslint,2016-03-14T20:01:21Z,ah! yeah. i think it's the glob argument in eslint. changing it to `{test|mock}` fixes the issue. got dragged away last minute,negative
formly-js/angular-formly,eslint,2016-03-19T14:12:10Z,chore(package): update eslint and dependencies. add eslint warnings for problematic rules,negative
formly-js/angular-formly,eslint,2016-03-19T14:35:36Z,lgtm! would like to get another reviewer on this though.,neutral
keppelen/react-facebook-login,eslint,2017-03-24T11:32:13Z,if you use a windows system. in **package.js** change those line inside **"scripts": {}** to:`"start": "set node_env=development & node_modules\\.bin\\webpack-dev-server --config webpack.config.js".    "bundle": "set node_env=production & node_modules\\.bin\\webpack -p --config webpack.config.dist.js".    "test": "node_modules\\.bin\\eslint src\\**\\*.js"`,neutral
linkedin/dustjs,jasmine,2013-07-17T01:31:35Z,remove option to control pathscope and remove tests for old getpath. all tests pass for make test and make jasmine,neutral
linkedin/dustjs,jasmine,2013-07-17T01:35:31Z,agreed that we dont need the options. approving based on consensus from smfoote jimmyhchan,neutral
linkedin/dustjs,jasmine,2013-07-17T01:38:45Z,sure since it is backwards incompatible feature wise.,negative
linkedin/dustjs,jasmine,2013-07-17T22:59:43Z,remove node_modules/jasmine_node. this directory was added about a year ago. and should be ignored according to the .gitignore. removing it will prevent all these files showing up in commits when someone runs `npm install`,neutral
linkedin/dustjs,jasmine,2013-07-17T23:00:55Z,jairodemorais  can you make sure you are onboard with this?,neutral
linkedin/dustjs,jasmine,2013-07-17T23:02:55Z,this entire directory will be added back whenever you run `npm install`. so i don't think there will be a problem. this just makes it so the .gitignore correctly ignores everything inside of node_modules.,negative
linkedin/dustjs,jasmine,2013-07-17T23:05:24Z,ok!,neutral
linkedin/dustjs,jasmine,2013-07-24T00:56:08Z,changing that line to: while (typeof ctx == 'undefined' && !cur){shows all tests passing and all jasmine tests passing and it fixes the reported problem. carchrae is there any better fix? we also ought to have a test for this case.,neutral
gruntjs/grunt-contrib-connect,jshint,2014-08-25T05:14:20Z,first check code with jshint upon running npm/grunt test,neutral
bergie/passport-saml,mocha,2014-12-13T02:20:47Z,thanks for the pr. looks good!two requests:1) let's call the option `authncontext` instead of `authenticationmethod`. since that's the underlying saml name.2) please add a mocha self-test for this behavior.  (probably an additional entry in the 'captured saml requests' group),positive
angular-fullstack/generator-angular-fullstack,karma,2015-01-18T14:05:53Z,i also had similar issue. but found out that newly installed bower_components were not loaded. don't know if generator is meant to add them to karma.conf.js automatically. but i added manually and it works now.,neutral
adamgruber/mochawesome,mocha,2015-08-05T02:20:49Z,did some testing and i don't see any issues with this. can you squash your commits?,neutral
adamgruber/mochawesome,mocha,2015-08-05T06:18:59Z,great. squashed. thank you.,positive
zeromq/zeromq.js,mocha,2016-09-10T17:21:04Z,side note: why is the mocha timeout 10 min? isn't this a bit high?,neutral
webpack/webpack,standard,2017-03-21T05:23:48Z,michael-ciniawsky. any recommendation on which seed to use that is compatible with webpack 2 and uses latests standards?   you can't expect everyone to be good at everything just like you can't expect an electrician be good at plumbing.   bebraw is not a nice guy and just wants to hide the issue instead of dealing with it.,neutral
webpack/webpack,standard,2017-03-22T12:29:31Z,this happens in standard out of the box windows 10 command prompt.,neutral
webpack/webpack,standard,2017-03-22T12:43:04Z,> this happens in standard out of the box windows 10 command prompt.hmm... not for my win10 installation...,neutral
webpack/webpack,standard,2017-03-26T13:01:16Z,excellent work! i ran across this feature today while upgrading. i am accustomed to the normal time wasting gibberish that passes for error reporting in many projects so this new standard is very much appreciated.,positive
webpack/webpack,uglify,2018-07-30T23:01:39Z,this is still a bug.to reproduce. simply twiddle `global_defs`. like so:```jsnew uglifyjsplugin({  uglifyoptions: {    compress: {      global_defs: {        debug: 'foobarbaz'.      }    }  }.}```then compile a module:```jsconsole.log(debug);```notice that no matter what you change the value of the global to. the hash of the chunk is the same.,neutral
webpack/webpack,uglify,2018-08-01T17:24:42Z,if uglify is removed as a dependency of webpack. then how will minification "just work" when specifying mode as production?,neutral
webpack/webpack,uglify,2018-08-15T18:59:50Z,no the uglify-es branch is unmaintained anyway. terser is the maintained fork.,neutral
webpack/webpack,uglify,2018-08-22T02:01:51Z,oh. nevermindi try comment uglify. it works well with devtool: 'source-map' plugins: [            //uglify ],neutral
webpack/webpack,eslint,2015-10-22T09:02:11Z,webpro eslint,neutral
prebid/Prebid.js,standard,2018-06-12T19:24:08Z,brent-gourmetads - what creative do you have in the ad server? is it the standard call to w.pbjs.renderad() or the prebid 'universal creative'?,neutral
nodejs/citgm,eslint,2016-11-07T16:34:19Z,add no-trailing-spaces: 2 to .eslintrc. fixes white space changes,neutral
nodejs/citgm,eslint,2016-11-07T16:40:26Z,add no-trailing-spaces: 2 to .eslintrc,neutral
nodejs/citgm,eslint,2016-11-07T16:41:24Z,landed in fe26a1989d,neutral
babel/babylon,codecov,2017-01-16T09:43:38Z,the codecov seems unrelated and only shows up. because the decorator if is not covered.,neutral
sasstools/sass-lint,eslint,2016-03-16T16:34:20Z,add support for json config files. i use json for keeping my eslint. coffeelint and npm configs. i would like to be consistent and use the same format for sass-lint.,neutral
sasstools/sass-lint,eslint,2016-03-18T13:49:45Z,big problem for me as well.,positive
sasstools/sass-lint,eslint,2016-03-18T14:00:37Z,my current non-solution is to keep two configs - a source `.json` file and [a manually converted]( `.yml`.,neutral
sasstools/sass-lint,eslint,2016-03-29T14:21:40Z,go away codacy... snugug can you change the quotes parameter in codacy's code-settings to "single" please i don't have access to the parameters on codacy. you may be able to add us to a codacy organisation i think?i had a little play with codacy and it takes a fair bit of tweaking to get it right i think.. not sure this should necessarily be a merge criteria until we've ironed it out? i wish it would read our eslint file too seeing as they're actually using eslint themselves...,negative
sasstools/sass-lint,eslint,2016-04-07T09:53:55Z,i don't think this is something we would pursue it opens up too many edge cases and potential importing issues. as bpscott says you can already define this order and you can just share this config amongst all your projects. once we get to including configs via packages like you can with eslint airbnb standards etc then i think this would become a moot point?,neutral
ipfs/js-ipfs-api,mocha,2015-11-24T18:00:19Z,dignifiedquire could you make this pr be a pr from a branch on this repo. please? thank you :),positive
ipfs/js-ipfs-api,mocha,2015-11-24T18:06:33Z,why not a global config in `test/setup.js` or directly passed to mocha?,neutral
ipfs/js-ipfs-api,mocha,2015-11-24T18:10:09Z,auto generate api.md using mocha. replaces #105,neutral
ipfs/js-ipfs-api,mocha,2015-11-24T18:10:16Z,diasdavid done,neutral
ipfs/js-ipfs-api,mocha,2015-11-24T19:03:23Z,i took out the local timeouts (i went through it because when i went through docs. it was only specified test and suit level timeouts  can i set timeouts in karma?~~ figured out :),negative
ipfs/js-ipfs-api,mocha,2015-11-25T00:57:37Z,ready to merge. it is not the most beautiful documentation ever. but certainly has more information than what we have now. any thoughts? merge and release?,positive
ipfs/js-ipfs-api,sauce,2016-04-17T20:21:36Z,we now have tests being run on chrome. firefox and phamtomjs. lgtm. thoughts?,neutral
ipfs/js-ipfs-api,sauce,2016-04-17T20:45:45Z,closing :),neutral
Automattic/mongoose,mocha,2014-04-30T13:20:22Z,sorry to scratch an old itch. but i am facing the same problem trying to run mocha -w with mongoose. tried every possible solution but now i am hitting the wall. where should i put ``` js mongoose.models = {}; mongoose.modelschemas = {};```?beforeeach. aftereach. after. before ?should i mongoose.createconnection() on beforeeach. close on aftereach ?,negative
Automattic/mongoose,mocha,2014-04-30T20:11:26Z,i put the```mongoose.models = {};mongoose.modelschemas = {};```right after```var mongoose = require('mongoose');```in a `config.test.js` file directly in the `test` folder (`config.test.js` the only `*.test.js` file in the test folder. other `*.test.js` files are in sub folders). as mocha go recursively ( `--recursive` option in `mocha.opts`) through the test folder. it starts with `config.test.js`.,negative
senecajs/seneca-amqp-transport,eslint,2018-01-07T16:51:14Z,code quality control updated - .eslintrc.js added/prettier installed,neutral
senecajs/seneca-amqp-transport,eslint,2018-01-15T00:28:29Z,add prettier support. - add `prettier` formatter to project (matches new seneca general styling).- configure `eslint` to enforce `prettier` rules.- format all sources to match new rules.,positive
pouchdb/pouchdb,uglify,2014-11-18T23:11:46Z,hrm. i dont love the idea of trying to defend against code mangled while downloading in our own code. from the uglify readme there is a `--ascii`. i cant see `--ascii-only` and it seems like it should work? its specifically so it only outputs ascii,negative
pouchdb/pouchdb,uglify,2014-11-19T13:14:33Z,daleharvey yeah but the `\u0001` and `\u0002` characters are in the ascii range. so they get printed as-is. amusingly uglify outputs `\u0000` as `'\x00'`.i would like to just throw an error when pouchdb starts; i'm sure i won't be the last one to try copy-pasting the code into vim and run into such issues,negative
pouchdb/pouchdb,selenium,2014-07-14T23:01:10Z,dereke that's awesome. thanks!,positive
vlucas/frisby,jasmine,2014-07-18T21:08:23Z,i've found that ```   describe("/users endpoint test suite". function() {      frisby.create('doit')....toss();   });```will group them however nested tosses are on their own,neutral
vlucas/frisby,jasmine,2014-07-29T11:17:33Z,parallel test execution. hi there.i'm not entirely sure whether this is something frisby can cover. or whether this is more a jasmine issue.would it be possible to run async tests in parallel? in case this is more jasmine related. do you know how to resolve this?,negative
vlucas/frisby,jasmine,2014-08-07T03:35:52Z,i'm also trying to get an api test running asynchronously using the same async package. and had already written something very similar before i found this issue. just without the optional callback:```async.parallel([    frisby.create('#1').post ... .toss().    frisby.create('#2').post ... .toss().    frisby.create('#3').post ... .toss()]);```it doesn't seem to be making any difference though.the api calls are still going through sequentially. not all at once as i'd like.any advice would be much appreciated.,negative
vlucas/frisby,jasmine,2014-08-07T04:00:22Z,maybe try wrapping them in a function?``` javascriptasync.parallel([    function() { frisby.create('#1').post ... .toss(); }.    function() { frisby.create('#2').post ... .toss(); }.    function() { frisby.create('#3').post ... .toss(); }]);```,neutral
vlucas/frisby,jasmine,2014-08-07T04:33:32Z,same sequential behaviour when wrapped in functions as without them. unfortunately. but thanks for the suggestion.,positive
vlucas/frisby,jasmine,2014-08-07T04:40:53Z,interesting behavior.. is it possible that jasmine-node kind of prevents this from working?,positive
angular/protractor,jasmine,2016-09-21T07:40:54Z,i use mono repo as project structure. one package depends on  another package which have the same type definition (for node and jasmine). i ended up installing protractor at the project root. and moving all the type definitions to the project root to avoid conflict.,neutral
angular/protractor,standard,2016-10-04T13:00:24Z,sjelin you mention that this could be done in another thread. right?```we would address this using document.elementfrompoint and element.getboundingclientrect pretty easily actually. elementfrompoint isn't totally standard at this point. though it appears to be supported by all browsers. the consistency issue is real though. donno if we should leave this the way it is or "fix" it```,positive
angular/protractor,selenium,2015-09-16T02:00:41Z,sorry for the scrolling. i removed some lines of selenium stdout result.thank's.,negative
angular/protractor,selenium,2015-09-21T15:21:38Z,sadly. selenium's browser logs are super inconsistent and generally work poorly.,positive
angular/protractor,selenium,2015-09-21T16:40:18Z,what an interesting thing.  i have no idea why this is the case.  it's part of selenium. so you'd have to ask them.,positive
angular/protractor,selenium,2015-09-22T23:04:54Z,our general thought has been that `webdriver-manager` is a quick setup for folks who want to get selenium/webdriver started quickly. we don't want to replicate every advanced option. if you're making a grid. the assumption is that you know what you're doing and don't need `webdriver-manager` to help. is there a particular reason that this option would be helpful to include?,neutral
angular/protractor,selenium,2015-09-22T23:06:17Z,firefox driver is packaged with the selenium standalone jar. so it does not need to be updated with a separate command.,neutral
angular/protractor,selenium,2015-09-29T10:50:40Z,feature request: modularize webdriver-manager. it would be really nice if `webdriver-manager` could be its own module. it is useful for any framework using `selenium-webdriver` or if you use `selenium-webdriver` without any framework.,positive
angular/protractor,selenium,2015-10-01T17:24:41Z,cleaning up our issues - closing this as unfeasible given that we run with node.,neutral
angular/protractor,selenium,2015-10-01T18:50:36Z,add log of actions taken on webelements. this would supplement the webdriver logs and the selenium-webdriver control flow history and schedule. but be easier to read. e.g.```find element by(...)click element```could be printed on failure.,negative
angular/protractor,selenium,2015-10-13T21:03:44Z,tbh these are features made by the selenium team directly and you'd be best off asking them,positive
angular/protractor,sauce,2014-07-17T23:28:41Z,is there anything i can do to help get this merged in?  some more evidence i can provide or better testing?,neutral
angular/protractor,sauce,2014-07-22T20:08:46Z,what do you think about requiring the user to be more explicit. by adding a new parameter to the config instead of re-using seleniumaddress? then we wouldn't have to change the order of priorities that's being given right now. you could make it `config.sauceseleniumaddress`.,neutral
angular/protractor,sauce,2014-07-25T20:19:06Z,fix(runner): prefer sauce to hosted driver when saucekey is present. sauce connect sets up a local selenium relay at localhost:4445 bydefault. allow users to adjust the `seleniumaddress` to point at thissecure relay instead of the default `ondemand.saucelabs.com` host whilestill using the `sauce` driver provider.previously. runner would load the `remote` driver provider if`seleniumaddress` was configured. even if sauce credentials were alsoconfigured.for reasons not clear to me. on travis vms. the sauce connect relay is 10x more reliable than `ondemand.saucelabs.com`. it might be worth testing whether this helps with protractor's test suite oddities (#1051 and #1052),neutral
angular/protractor,sauce,2014-07-30T00:51:13Z,this looks like a dupe of #1054. correct?,neutral
angular/protractor,sauce,2014-07-30T03:05:50Z,yup 100%. my bad!,negative
angular/protractor,sauce,2014-08-04T18:34:38Z,ping? this seems useful so i think i'll just go ahead and make the update on top of this pr.,positive
angular/protractor,sauce,2014-08-05T01:06:52Z,ah dangit.  this is what happens when i read github tickets in my email and don't add tasks to my todo list.  sorry. and thanks for compensating for my general derposity >.>  i owe you one free as in $beverage.,negative
visionmedia/superagent,sauce,2015-07-08T16:07:58Z,travis will fail because of saucelab keys being encrypted for the repo.,neutral
tapjs/node-tap,mocha,2017-12-13T01:07:28Z,jamestalmage thanks i may use that. sorry didn't see your message until now. but may prove useful - one question though - if you have a stack-trace. you are supposed to put that as the argument to `yaml()`?,positive
gulpjs/gulp-util,jshint,2014-08-01T10:24:57Z,matmuchrapna if the stack was garbage and jshint didn't provide a better stack (or showstack: false) then it is normal,neutral
benbria/coffee-coverage,istanbul,2015-11-03T17:06:49Z,interesting - so they are being excluded when i use `initall: false`. but the coverage summary is not being updated with the `istanbul report text-summary lcov` command. that's kinda strange.,neutral
balderdashy/sails,mocha,2013-12-12T23:52:07Z,will do.,neutral
balderdashy/sails,mocha,2013-12-23T21:00:12Z,betolink flagging this as a feature request,neutral
balderdashy/sails,mocha,2014-01-02T03:38:36Z,using sails models for testing outside of the sails app. there is a way to take my sails models and use it when testing the app via mocha or jasmine?. actually i am doing some unit test where i need to create fake data before running the tests and then when i finish erase this data to keep the database clean.example: - save user with id 1- test if user exists when listing for user/:id- erase user with id 1,negative
balderdashy/sails,mocha,2014-01-03T02:52:38Z,nice. i am new with sails i didn't know i could lift sails that way. always thought it could only be done via the cmd. thanks for everything!!.,positive
balderdashy/sails,mocha,2014-01-10T16:16:52Z,testing sails i have stumbled upon the need to set a flag to indicate that sails has started lowering. i'm not sure if this should be in the core. but consider this as an addition to this feature request: provide `sails.lowering` flag when `sails.lower()` is called.fyi - use case: when running tests. sometimes errors in tests trigger mocha's after all hook. which for me calls sails.lower(). however. then it also calls done() multiple times and thus. hides the real error. checking a flag before starting lowering can avoid this.,negative
meanjs/mean,uglify,2016-03-23T11:05:38Z,actually it is the same as the uglify of angular part while in production mode which only concern on client side.however. i just want to know if there is any suggestion on server side code since the structure of mean.js is different from simple node project. e.g. the module folder will include both server side code and client side code.i found some ways on obfuscate/uglify node program in stack overflow but i want the solution for mean.js.thanks a lot if you got any more information.,neutral
meanjs/mean,snyk,2017-04-25T02:55:10Z,fyi - due to the fact that travis ci builds are not exposing private environment variables to forked then snyk test will always fail. so for now this pr is on-hold until we can get a workaround from snyk.,negative
meanjs/mean,selenium,2016-03-04T22:30:46Z,i'm not sure about the bypassing selenium but i do see it executing and displaying chrome.> the travis ci build passed,neutral
videojs/videojs-contrib-hls,standard,2016-09-22T16:17:57Z,dgoldstein0 we're using the `<base>` element because m3u8 urls need to be resolved relative to the m3u8. not the page the player is hosted on. the standard `a.href` approach doesn't work because that calculates relative to the page the player is running on. `parseurl()` does half the job but it would still require us to translate interesting url features like relative paths and i've been hesitant to do that because urls are pretty complicated when you get into the nitty-gritty.we're open to solutions that don't use `<base>` and ie6 support isn't a requirement :) have any suggestions?,positive
videojs/videojs-contrib-hls,karma,2014-09-17T21:13:32Z,i'd be happy to add unit tests.  the only problem is i'm not sure how to mock out ajax timeouts in pure js.  it seems like we would need some server side support correctly testing timeouts. but it doesn't seem like the karma server supports that.  i was thinking of trying to hit a url such as :81 which will cause a timeout. but this isn't guaranteed to work in the future.  should i push a test with that included for now?,negative
rooseveltframework/roosevelt,eslint,2017-06-13T18:23:24Z,settings/sample app defaults migration warnings. over time new settings get added and new defaults get added to the sample app (e.g. the introduction of eslint). roosevelt needs an upgrade warning module that scans your app for this kind of drift and warns users to consider making use of new features or new recommendations periodically.some useful triggers:- during postinstall- when the app is started in dev mode (once only!)- when manually triggeredwould also be useful to have a setting which disables these warnings and recommendations entirely.,positive
twbs/bootstrap,sauce,2014-07-07T05:04:05Z,meta discussion: this gruntfile is maybe several bridges too far?. just raising this for discussion.so we have this 500-line gruntfile which does many. many things.  wow. much awesome sauce.as i parse this long gruntfile. i sense the needs of [getbootstrap.com](getbootstrap.com) are trumping the needs of most end-users. who obviously are **not** deploying bootstrap to [getbootstrap.com](getbootstrap.com).is it a problem that this supplied gruntfile looks not much like the gruntfile each end-user will end-up writing to deploy custom-compiled bootstrap in real-world implementation cases?my guess: most developers end-up using supplied (situationally bloated) bootstrap. as opposed to compiled bootstrap. because pairing-down this gruntfile is a big job and [ain't nobody got time for dat](,positive
twbs/bootstrap,sauce,2014-07-07T05:49:03Z,i don't particularly see how a long gruntfile inhibits customization of bootstrap itself. bootstrap customization is chiefly done by editing the less source files or the js. i grant that tweaking which js plugins are included involves editing the gruntfile. but that section is pretty straightforward and easy to find.regardless. i do agree that the gruntfile could stand to be refactored. work is already planned & in-progress on that front.,positive
twbs/bootstrap,sauce,2014-07-07T06:10:37Z,cvrebert  where is the in-progress work on the grunt refactor?,neutral
twbs/bootstrap,sauce,2014-07-07T06:11:46Z,in a branch that i haven't pushed yet.,neutral
twbs/bootstrap,sauce,2014-07-07T06:37:41Z,punting further discussion to the aforementioned issue and pending pr from cvrebert.ideally cvrebert's branch will break things down to appeal to a few use cases (e.g.. generating our docs. running tests. building css and js. etc). the latter is by far the most important for the masses and should be prioritized.i'll defer to the pr though to figuring that stuff all out though.,neutral
keystonejs/keystone,eslint,2015-11-11T04:40:50Z,review .eslintrc. i've noticed a lot of things that should be considered warnings or errors are passing our linter. the configuration needs to be reviewed. may be out of date given updates to eslint (and the react plugin),neutral
keystonejs/keystone,sauce,2016-09-03T16:46:23Z,wmertens this is also an issue for datetime. and your second alternative won't fix that. so not that one. i think i agree with your initial suggestion of storing in utc. a breaking change to fix a bug is okay...this issue is also holding back proper e2e testing. since the travis servers are in a different timezone to saucelabs. or something like that.,negative
voucherifyio/voucherify-nodejs-sdk,standard,2017-08-09T07:28:40Z,jordansexton your code is not compliant with standardjs. could you run `standard --fix`?,neutral
rwjblue/ember-template-lint,eslint,2018-05-29T12:56:39Z,i dont know if this effects any of it but this is my `.template-lintrc.js`:```/* eslint-env node */'use strict';module.exports = {extends: 'recommended'.rules: {'bare-strings': true.'block-indentation': 'tab'}};```i'll try and narrow it down some more.,negative
rwjblue/ember-template-lint,eslint,2018-05-29T13:39:21Z,if i change my `.template-lintrc.js` to:```/* eslint-env node */'use strict';module.exports = {extends: 'recommended'.rules: {'no-bare-strings': true.'block-indentation': 'tab'}};```all is working fine again (templates being linted properly and throwing on bare-strings).seems like the `bare-strings` rule in the config is not backwards compatible. that also explains the abstract error `error  cannot read property 'indexof' of undefined  undefined`. probably because the linter can't find the old `bare-strings` rule or something.ill change it to `no-bare-strings` for now. thanks for your time.,negative
nodegit/nodegit,istanbul,2015-01-08T16:54:32Z,so the scale of what we should move is much larger than i realized. which is fine. makes it easy. at least. gonna handle that now.,positive
nodegit/nodegit,istanbul,2015-01-14T00:52:31Z,posting this here. since the community keeps growing and we're not all in the slack :)so. we need to make a decision on cleanup. and installs. i'm starting to shy away from the idea of using npm install from inside the directory to buildi'm thinking that we need to just use npm run build or something like that. so that when someone does `npm install nodegit` or `npm install` and nodegit is in their package.json. we can clean up a bit because over half of the size of nodegit once it's installed is dead weight. source files. etcwe have no way of telling did they do it local to the directory vs is it being pulled from npms registry vs is npm pulling it from a git repo via a tag like `nodegit: nodegit/nodegit#somesha` in order to decide when to clean otherwise. using npm install for only people installing the dependency fixes this for us. i'm gonna move forward with this idea. but i'd love some input from at least two of you. to get a consensus on that before landing it. mcollina johnhaley81 tbranyen,negative
nodegit/nodegit,istanbul,2015-01-14T01:57:20Z,that doesnt work. because then somebody trying to install the dependencies will probably run npm install and mess up their directory. i've added a clean script. and i'm going to add the debug stuff now. but i think we're kinda sol on the cleaning up after ourselves thing. unless we wanna check against node_env=="production" or such,negative
nodegit/nodegit,istanbul,2015-01-14T09:53:34Z,i think the best way is to assume that a user that want a custom-build thing will read the readme. so. i'm :+1: for cleaning up always. but after a custom build is made. never clean it up (we can just stick a file somewhere). our install script can be called with `--cleanup` from npm. and it will be immediate for users how to install without cleaning up.what do you think?,neutral
nodegit/nodegit,istanbul,2015-01-14T15:49:42Z,thats certainly an option. but only helps if somebody is consciously installing nodegit. for now. i think i might just leave the clean script in place but not called. npm is overhauling their installer at the moment. and i'm sifting through their issues. gonna see if it resolves all of our issues. and if not. i'll either comment or file something new. gonna open a pr for these changes. because they _seem_ to be working.,negative
nodegit/nodegit,istanbul,2015-01-29T01:26:33Z,this is resolved now right?,positive
ember-cli/ember-cli-mocha,mocha,2017-07-25T08:26:32Z,what are the instructions?. ember-mocha sends me here to follow instruction about how to install stuff but there is nothing here.do i still need to install ember-mocha itself?how do i setup my tests?,neutral
bitpay/bitcore,mocha,2014-11-10T14:03:41Z,mocha:  3194 passing (13s)index.html: passes: 3166,neutral
bitpay/bitcore,mocha,2014-11-10T14:29:08Z,code: ackmocha tests: 3194 passingindex.html: passes: 3166,neutral
bitpay/bitcore,coveralls,2014-12-19T13:58:05Z,travis can be made to fail on jshint errors. reducing the errors to 0 will take some amount of boring labor that i'm not sure is worth it. it would be cool. though. afaics. there is no such thing as a "coveralls for jshint". i used to use jenkins ci for this in a project and there was a pretty graph of number of linting errors per build.we already have `gulp plato`. which creates a `reports` folder with cool info (and this lint errors through time graph),negative
electrode-io/electrode,eslint,2017-08-16T16:29:57Z,please use `electrode-archetype-njs-module-dev` and setup test and eslint properly.,positive
electrode-io/electrode,eslint,2017-08-17T17:05:01Z,hi. thanks for the update. any idea on what's the breaking changes of eslint 3 to 4?  i am ok with the update. but we have to understand what's the impact on existing components. and if we want to major bump the component archetype because of this.also. i agree with cross311. please separate the entry change into another pr.  thanks.,positive
electrode-io/electrode,karma,2018-06-04T18:19:16Z,allow karma dependencies to be turned off,neutral
electrode-io/electrode,karma,2018-06-12T22:19:16Z,use phantomjs as test browser for now till looper support headlesschrome. since looper will support headless chrome soon. for now. just use phantomjs as karma browser inside generator.temporarily resolve the `chrome_bin` cannot be found issue from looper.,positive
electrode-io/electrode,karma,2018-06-13T17:37:37Z,no longer needed,neutral
benjamn/recast,mocha,2014-07-08T21:10:09Z,`--grep` works for me,neutral
angular-ui/bootstrap,karma,2013-10-15T17:59:21Z,pkozlowski-opensource i doesn't take up much time. because i only have to modify the karma.conf. i will comment on code if i spot things.,negative
angular/angular-cli,jasmine,2017-03-20T03:07:10Z,feat(angular/cli): add jasmine html report when using code coverage flag. fixes #5136,neutral
angular/angular-cli,jasmine,2017-04-14T09:59:56Z,also. be careful with the fact that protractor is still using jasmine. so when using you favourite ide. it's possible that you either end up with jest assertions functions being proposed by the ide in e2e tests. or if you leave `types/jasmine`. jasmine assertions functions being proposed by the idea in your unit tests…this is more a limitation of the ide than angular. but the problem exists still :),neutral
angular/angular-cli,jasmine,2017-04-14T11:28:54Z,> also. be careful with the fact that protractor is still using jasmine. so when using you favourite ide. it's possible that you either end up with jest assertions functions being proposed by the ide in e2e tests. or if you leave types/jasmine. jasmine assertions functions being proposed by the idea in your unit tests…fyi. it is easily workaroundable by specifying `tsconfig.json` in `e2e/` and `src/` directories with the correct `types` declared.,neutral
angular/angular-cli,mocha,2017-01-17T18:37:03Z,feature request: support mocha. it would be great to have an option to use `mocha` and `chai` (and `sinon`) instead of using `jasmine`.,neutral
angular/angular-cli,mocha,2017-01-18T01:03:56Z,i'm not 100% sold on officially supporting mocha; i think we should stick to support 1 testing framework and if you want to use another it's on you. i'll chat to devrel about that.it's great that it works though.,positive
angular/angular-cli,mocha,2017-01-30T16:19:10Z,fix(deps): update mocha dev dependency. removes two dev install deprecated warnings.tangentially related to #3889,neutral
angular/angular-cli,uglify,2018-03-16T14:57:17Z,me too. in our project mangle breaks the production build.,negative
cssinjs/jss,codecov,2016-11-14T11:52:49Z,maybe it's worth to replace codecov with nyc (istanbul) ?,neutral
cssinjs/jss,codecov,2016-11-14T11:57:54Z,maybe. especially because we have multi repo approach and run tests from other repos here.,neutral
bbc/bbc-a11y,standard,2017-10-27T17:06:45Z,> rather than copy and paste the content. link to it.in my mind. that means we have another problem: the scenarios that capture the behaviour of this tool can become out of sync with the guidelines. if we don't copy the guidelines here. how do we know when they get out of sync?> as the same basic text is repeated over and over and over.this is because the tests are manual. there is nothing more to communicate. we could delete these scenarios. they were really only useful to ensure everything was covered. but i am not offended by them personally.,negative
bbc/bbc-a11y,standard,2017-10-27T17:11:47Z,> they are also very much not a standard. they are guidelines. we should ensure the language is consistent.what language would you prefer?suppose i am a manual tester. i want to ensure my web application conforms to the following guideline:"alternative delivery for embedded media must be provided"how would you describe what i am doing? would you say this?given i am testing conformance to the guideline "...",neutral
bbc/bbc-a11y,standard,2017-10-27T18:58:42Z,so do we consider this mag v2 ... i'm aware the code examples are in the process of being updated. but the guidelines are not changing.,neutral
bbc/bbc-a11y,standard,2017-11-01T15:47:12Z,swap 'standard' for 'guideline'. making the language a little more consistent.,neutral
gatsbyjs/gatsby,eslint,2016-06-14T02:14:51Z,bryannaegele how are things? for a first pr. how about just adding the most basic flow support e.g. flow-bin. the eslint & babel plugins. add a .flowconfig. and add /\* flow */ to each js file. after that's in. we add prs that gradually add static typing (and fix errors like you found above as we go). i ask as i have some new gatsby stuff in mind that i'd love to start playing with flow plus have it around to guide my prototyping. thanks!,positive
gatsbyjs/gatsby,eslint,2016-06-19T17:35:37Z,kyleamathews ok. now passing location.i didn't want the newlines in the output. so i've just collapsed it to a single long line. and that passes eslint. hope that's ok.,positive
peterramsing/lost,eslint,2017-07-11T04:56:11Z,hehe. great minds think alike on the eslint config.,positive
miguelcobain/ember-paper,eslint,2018-07-11T13:56:16Z,glad to finally have a fix for this! thanks.,positive
aksonov/react-native-router-flux,eslint,2017-09-08T22:52:34Z,pylipala looks like your pr failed eslint formatting. please correct so that the circleci tests pass,positive
mostjs/core,standard,2018-03-29T14:48:30Z,thanks for clarifying.  yeah. i think all the remaining todos belong in this pr.  without unit tests. imho. this pr wouldn't meet our (de facto) standards for being complete.  the other remaining todo is just to move existing code to its own module. which won't really change the scope of the pr.  make sense?,neutral
pghalliday/grunt-mocha-test,mocha,2013-11-15T22:15:03Z,ah. that's what i thought. the error is not from mocha. it's from jshint. the lint task is complaining as suite and test are globals. you need to configure jshint to be ok with these globals.,negative
pghalliday/grunt-mocha-test,mocha,2013-11-20T10:20:59Z,can you post your current gruntfile - maybe you have the paths setup incorrectly. mocha uses the require cache so if you run tests on a set of files once and then try to run tests on the same set of files again then it does nothing (when in the same process).this is why in the above gruntfile i have specified copying everything for coverage to a `lib-cov` directory and running tests on those files. then when you also run tests on the original files without coverage mocha does not hit the require cache because they are different file paths.,neutral
pghalliday/grunt-mocha-test,mocha,2013-11-26T09:57:41Z,invalid require cache to allow multiple test runs in the same process. this fix a behaviour causing grunt-watch with "spawn: false" option to play badly with grunt-mocha-test. this fix should hopefully make things better.,neutral
pghalliday/grunt-mocha-test,mocha,2013-11-26T10:40:10Z,yes. you're right that this could be achieved using a task that clears the cache before the mocha task in watch.i also believe that the problem i ran into was very hard for a beginner to understand. i was trying to use the watch event to only run modified tests (our test suite is becoming long and it's a pain to execute every test each time). first time it worked. second time (and following). 0 test passing was reported by mocha...thus i believe this should be standard behaviour to help beginners. adding an option to turn it off might be a good idea though.what you told about wiping the whole cache instead of only the tests cache makes a lot of sense to me. it was indeed wrong to only wipe part of it. this obviously needs to be rewritten.will you consider it if i make those changes ?,negative
pghalliday/grunt-mocha-test,mocha,2013-11-26T10:53:24Z,ok. if you add it as an option and clear the whole cache.however. i don't see how this helps you achieve your goal of only running modified tests.as for beginners. i would counter that you would not run into this issue unless you change the watch defaults which a beginner should probably not do without understanding the require cache ;)i would also prefer to not make it default as it would impact any existing projects (backward compatibility!) although i think a big warning in the readme about using watch without the spawn option would be good.,neutral
pghalliday/grunt-mocha-test,mocha,2013-11-26T11:04:03Z,i'm sorry. it seems i was not clear at all about this point.to run only the modified test. you need to listen the watch event that is sent by grunt-contrib-watch. then you just modify the configuration of the task that will be run shortly after to only include the proper files in the source list. but for it to work. you need to add the spawn false option as stated in the documentation.since this is properly written in the documentation. any beginner in this situation might add this option. here is the relevant excerpt of the doc:```if you need to dynamically modify your config. the spawn option must be disabledto keep the watch running under the same context.```this can be found in the _compiling files as needed_ section of the documentation.but. maybe if we document the option well. we can make it opt in. i'm still thinking that better working in all cases. albeit slowly in some instances. that not working at all in some. the option would only be used to improve perfs where it makes sense (and i believe you are in the only use case : running two reporters on the same set of tests one after the other).am i saying rubbish or does it makes sense?,neutral
pghalliday/grunt-mocha-test,mocha,2013-11-26T11:05:00Z,btw. you need to add tests for this stuff too! i can't merge this without tests,neutral
pghalliday/grunt-mocha-test,mocha,2013-11-26T11:07:03Z,no problem for the tests. but i'd rather finish our conversation on how to do it before getting further on this path ^^. i'll make a full blown pr after we figure out the best way to do this.,positive
pghalliday/grunt-mocha-test,mocha,2013-11-26T11:28:54Z,ok. i see - i wasn't aware of that section in the watch documentation. personally i think it should come with a warning but it's not my project - i think i'll drop them a note.however i still don't think it will work reliably for tests. for instance if you change a source file but not a test file (which should be very common in a tdd workflow) the source file will be added to your config but not the test file. in such a case as the source file does not contain tests it will be ignored by mocha (i think/hope) and no tests will be run. have you successfully seen this pattern work?as far as i can see this pattern only works when you change test files.,negative
pghalliday/grunt-mocha-test,mocha,2013-11-26T12:21:46Z,oh yes. the watcher on the watch has to be a function. i. chose to write this:``` jsvar defaultsimplesrc = grunt.config('mochatest.simple.src');grunt.event.on('watch'. function(action. filepath) {  grunt.config('mochatest.simple.src'. defaultsimplesrc);  if (filepath.match('test/')) {    grunt.config('mochatest.simple.src'. filepath);  }});```this adds only the test when it was a test file that was modified. but all tests otherwise because we don't know what are the dependencies... this works very well.,neutral
pghalliday/grunt-mocha-test,mocha,2013-11-26T14:51:51Z,i see. that should work. although i suspect you will be running all tests most of the time. it's better than no filter at all.with regard to the default behaviour. i still feel quite strongly that it should be an opt in thing with clear documentation so as not to require changes to existing projects (of which i personally have many that it would impact),negative
pghalliday/grunt-mocha-test,mocha,2013-11-26T15:40:10Z,ok. then let's go this way. i'll try to work on it tomorrow.,neutral
pghalliday/grunt-mocha-test,mocha,2013-11-27T10:01:32Z,that's awesome dude. i'll most likely merge it and make a new release this evening (if not sooner)thanks :),positive
pghalliday/grunt-mocha-test,mocha,2013-11-27T10:14:32Z,you're welcome :),positive
pghalliday/grunt-mocha-test,mocha,2013-11-28T09:30:17Z,any news on this one? i admit i would like to use it asap :p.,positive
pghalliday/grunt-mocha-test,mocha,2013-11-28T12:12:58Z,yeah. very interesting thoughts. i believe that if you use the require option and that somehow the package you put there is for single use. you are in a pitch. but it's the user's choice. he probably can put requires in his tests to get around this properly. global is a bad habit anyway. as you stated.thanks a lot.,positive
pghalliday/grunt-mocha-test,mocha,2013-11-29T12:12:36Z,actually i was thinking about problems with globals in 3rd party libraries. i first ran into issues with watch a long time ago (before the spawn behaviour was added) when using the `mongoose` module. spent a lot of time scratching my head :),neutral
Project-OSRM/osrm-backend,standard,2018-08-03T18:43:41Z,thanks for the quick response danpat -> here's to hoping that format standardizes in the coming years.,positive
npm/npm,standard,2015-12-09T15:42:47Z,fix usage of semver module in docs. previously the docs displayed only installing the `semver` module and not going into a node shell or requiring the module before displaying examples.i think this update makes it a little clearer that `semver` is a standard node module and it is used internally in `npm`.,neutral
npm/npm,standard,2015-12-09T16:25:19Z,oh i see. then i'm guessing it gets pulled in somehow during a build script when updating the dependencies? i'll make the change in there then. thanks!,positive
npm/npm,standard,2015-12-09T19:57:25Z,nice! :+1:,positive
npm/npm,coveralls,2016-10-26T18:16:31Z,docs(readme): add coveralls badge pointing to latest branch. #14415,neutral
npm/npm,coveralls,2016-10-26T18:19:15Z,kenany sure. so can you merge that first or delete it.,neutral
npm/npm,coveralls,2016-10-26T20:28:14Z,cameronroe i can't (or at least shouldn't. without approval from the rest of the team) merge prs but sure i'll delete it if you'd like.,neutral
npm/npm,coveralls,2016-10-31T16:50:11Z,just curious. why are so many prs failing the build? shouldn't the build be passing on these? including this pr?,negative
npm/npm,coveralls,2016-10-31T18:17:14Z,cameronroe a mixture of our appveyor setup needing a bit of work. and a couple of windows tests failing recently :\,negative
npm/npm,coveralls,2016-10-31T19:10:26Z,zkat ah. that's no good. well hopefully that gets sorted out. would love to help npm get cleaned up and prs getting merged!,positive
mishoo/UglifyJS2,uglify,2013-11-13T19:24:58Z,here's my specific stack trace:```      exception: error          at new js_parse_error (f:\<omitted>\node_modules\uglify-js\lib\parse.js:196:18)          at js_error (f:\<omitted>\node_modules\uglify-js\lib\parse.js:204:11)          at croak (f:\<omitted>\node_modules\uglify-js\lib\parse.js:663:9)          at token_error (f:\<omitted>\node_modules\uglify-js\lib\parse.js:671:9)          at unexpected (f:\<omitted>\node_modules\uglify-js\lib\parse.js:677:9)          at f:\<omitted>\node_modules\uglify-js\lib\parse.js:761:17          at f:\<omitted>\node_modules\uglify-js\lib\parse.js:710:24          at block_ (f:\<omitted>\node_modules\uglify-js\lib\parse.js:984:20)          at ctor.body (f:\<omitted>\node_modules\uglify-js\lib\parse.js:957:25)          at function_ (f:\<omitted>\node_modules\uglify-js\lib\parse.js:962:15)```,negative
mishoo/UglifyJS2,uglify,2013-11-13T23:37:08Z,i am indeed using it as a module. what makes you think i'm not catching the error myself? i am in fact catching and outputting the exception (how do you think i was able to paste it here?). my issue is that the printed exception doesn't relate to the call i made to uglify (it doesn't tell me what line in my code this call came from). and it doesn't tell me what about the parsing failed. i would expect it to. for example. tell me the file that had the parse failure. and hopefully also the line in that file where it failed (if possible).i see from your link that the exception has the `line` and  `col` properties - those should be useful. but its disappointing they don't appear in the exception message. in fact. it doesn't look like there's any error message at all. in any case. where are these things documented - so i can find out what other properties on the exception i should be expecting (so i can appropriately output them)?,negative
mishoo/UglifyJS2,uglify,2013-11-22T21:20:50Z,alert() is arguably a significant side-effect :)other than that this is not necessarily a program. and most likely a library. which does nothing unless used. as most of the things we uglify.,neutral
mishoo/UglifyJS2,uglify,2013-12-01T20:35:34Z,options in comments. is it possible to specify options in comments?``` javascript/* uglifyjs unused=true */```,positive
vega/vega,uglify,2017-06-19T22:53:09Z,to the best of my knowledge. we do not use object destructuring assignments. we use rollup to produce es5 compliant code. then uglify the output of that. not sure if uglify-es6 is necessary/helpful in that context. but if so please explain and i'd be happy to take a look!,positive
konvajs/konva,mocha,2015-07-30T01:27:52Z,added rgba filter. issue: #79 also update `gulp-mocha-phantomjs`,neutral
konvajs/konva,mocha,2015-07-30T11:34:21Z,lavrton i need this pr too,neutral
konvajs/konva,mocha,2015-08-03T20:04:46Z,lavrton any feedback?,neutral
konvajs/konva,mocha,2015-08-05T09:24:53Z,tremendous effort (for real) but... would you mind to include only relevant code into this pr? there are so many changes. if you want to refactor code. please. decouple those changes from this very pr.,positive
konvajs/konva,mocha,2015-08-05T09:38:24Z,hello. guys. i was out of computing during long period. now i am back. very soon i will review pr. thanks.,positive
testem/testem,mocha,2013-08-15T02:34:30Z,allow specifying different combinations of bundled frameworks libraries(mocha. chai. jasmine. qunit. sinon. buster). currently. the `framework` field in the config file has been piggybacked to allow direct out-of-the-box testing with mocha and chai using `framework: mocha+chai` - a common use case. but what about sinon? maybe other spys and mock and assertion libraries? we can't jam everything into the `framework` field anymore. need something more flexible. perhaps```frameworks:    - mocha    - chai    - sinon```for the special case of chai which has multiple "interfaces" (bdd|tdd|qunit). it might be worth it configure the interface here using some sort of special syntax. perhaps steal the `!` from require.js.```frameworks:    - mocha    - chai!tdd    - sinon```,negative
testem/testem,mocha,2013-09-11T01:10:11Z,tests are counted and reported twice when using mocha. since commit 721babb5d4c1534bc1eb7a9ea5dcae64d1d78e89 tests are counted twice and failing tests are reported twice when using mocha. for example this single test using mocha+chai will be reported as having 2 failing tests out of 2 tests total.``` javascriptvar expect = chai.expect;describe("the test". function () {  it("should pass". function () {    expect(false).to.be.true;  });});```the failing test is printed out twice (with an undefined title in the first case).```undefined    ✘ expected false to be truethe test should pass     ✘ expected false to be true```,neutral
SBoudrias/Inquirer.js,eslint,2018-05-14T05:42:54Z,gentunian don't worry about codacy. looks like they once again stopped parsing the eslint config properly... i've disabled the check as it didn't provide value and confused contributors.,negative
SBoudrias/Inquirer.js,eslint,2018-05-14T06:02:38Z,kbrandwijk i removed codacy as its supports for eslint config is too flakey. it kept starting to mark pr as failing every few months.i'd love to get this merged. any chance you could resolve the conflicts and try to finalize the integration?,positive
DevExpress/testcafe,mocha,2017-06-14T14:28:48Z,declare var test on global scope issue. great to see typescript definition files with the package.unfortunately. we're having issues in a project that also uses mocha. both libraries have a `test` declaration on global scope. so typescript is throwing the following error:```error ts2403: subsequent variable declarations must have the same type.  variable 'test' must be of type 'testfn'. but here has type 'itestdefinition'.```in `testcafe` package:`declare var test: testfn;`in `types/mocha``declare var test: mocha.itestdefinition;`it's global scope all over again.i would prefer to import `test` from the testcafe package. or is there some other solution to this?,negative
DevExpress/testcafe,mocha,2017-06-14T14:31:42Z,jvanoostveen can you just filter out mocha tests from testcafe source files?,neutral
DevExpress/testcafe,mocha,2017-06-14T14:34:29Z,the error is raised during bundling. typescript will load all the definitions it can find (or so it seems).during the bundling. neither testcafe or mocha code should be touched or loaded.there are in the bundled code. no references to either mocha typings or testcafe typings. so i'm quite puzzled on why this error even is an issue. the typings are irrelevant at this point.,negative
DevExpress/testcafe,mocha,2017-06-14T14:39:39Z,did i get it right: you are bundling production code and during compilation of the production code you get complains from ts compiler about mocha and testcafe tests?,neutral
DevExpress/testcafe,mocha,2017-06-14T14:41:35Z,yes. except. i get the compiler error not on the tests. but on the definition files.,negative
DevExpress/testcafe,mocha,2017-06-14T14:50:56Z,do you require/import testcafe or mocha in your production files?,neutral
DevExpress/testcafe,mocha,2017-06-21T22:59:19Z,hey guys. i'm encountering the same issue while using mocha and testcafe in the same project. i'm evaluating testcafe for end to end testing and have `types/mocha` in my project. any ideas on how to resolve this?,positive
DevExpress/testcafe,mocha,2017-06-22T10:33:58Z,the problem is that both mocha and testcafe are polluting the global scope (i'm guessing this is for good reasons). in such first glance. i would dump mocha and live with testcafe. while bringing a mocha replacement. then again. i have no idea what are your project concerns and why you use mocha.,negative
DevExpress/testcafe,mocha,2017-06-22T11:24:58Z,polluting the global scope. looks like we're back in the early days of javascript...i would rather have it that only core js is on the global scope. all else can be imported.,neutral
DevExpress/testcafe,mocha,2017-06-23T14:12:47Z,use both of mocha & testcafe. would like to have some viable workaround.,neutral
DevExpress/testcafe,mocha,2017-06-26T22:07:55Z,can someone share their setup? i still don't understand how both mocha and testcafe tests are mixed up and why they simultaneously compiled by ts and what production code bundling has to do with it all.,neutral
DevExpress/testcafe,sauce,2016-04-28T09:33:49Z,repare saucelabs browser-matrix for client tests. now it shows the result for desktop browsers or mobile browsers only but should show for both(i've broken it in #478),neutral
DevExpress/testcafe,sauce,2016-05-05T11:09:47Z,i'm not sure i understand how `browser` class should be implemented. e.g. if i make saucelabs plugin and i have 50 browser there should i implement 50 classes with that interface?> chrome.ie;local:chrome.ie;path:/../../.sauce:'chrome win 10'.username='**_'.password='**_'it's a little bit inconsistent and complicated.maybe?:``` shtestcafe-browsers-saucelabs login {username} {pass}testcafe chrome.ie.saucelabs:ie-win10.saucelabs:chrome-win10```,negative
DevExpress/testcafe,sauce,2016-05-05T11:13:37Z,> i'm not sure i understand how browser class should be implemented. e.g. if i make saucelabs plugin and i have 50 browser there should i implement 50 classes with that interface?nope. you implement a class. that starts a tunnel to sauce. and starts a browser by specified capability string. then `testcafe` create 50 instances of this class with different capability strings.,neutral
oddbird/true,mocha,2017-02-01T03:45:59Z,carljm are these all different issues that result in a similar error message? if so. we should rename this issue. and open new ones. i'm not sure how to track these down. since the error is coming from mocha.sir-dunxalot can you do a manual sass compile of the tests (not through mocha) and paste the resulting css output? that might help give me some more clues to work with.,negative
mochajs/mocha,mocha,2013-08-06T07:30:55Z,guys. how about `mocha --recursive`?,neutral
mochajs/mocha,mocha,2013-08-06T15:30:33Z,hey. visionmedia. could we get some love from you here?there are basically two new features in the pr. i tried to implement them in the least intrusive way. and they are backwards compatible as they should be.first. `done` accepts a function. which is immediately executed inside a try-catch block. this will catch async assertions errors and always report them correctly. even if you are running inside a browser. i think this is specially useful for tests that have to run in a browser. i tested in phantomjs. and it works just fine.second. another function will be passed to all async functions. its suggested name is `dotry`. as in any extra arguments passed to functions in javascript. it will be ignored by any tests that only declare `done`. it receives a callback function and returns an equivalent function that will now catch assertion errors and report them to mocha via `done(error)`. its purpose is similar to the first feature.the two features are independent from each other. if you like one but not the other. i can change the pr. even though they are both useful for separate cases.,positive
mochajs/mocha,mocha,2013-08-06T17:34:07Z,park9140 maybe the `skip` object could just be passed to `done`?wrapping `it`'s callback in something like `unless` might add some complexity if determining whether to skip the test is an async operation. you'd end up making `unless`'s first parameter a callback. and then passing a `done`-like callback to that. and then the logic inside `unless` would start to mirror what's already happening with `it`.passing a `skip` exception to `done` would handle the async case. and give `done` a way to determine whether the test has been skipped or passed. i'm not familiar enough with mocha's internals to say whether that's more or less complex to implement. though.,neutral
mochajs/mocha,mocha,2013-08-07T17:36:29Z,added shim for array.prototype.indexof() so mocha.js will run in ie7/8,neutral
mochajs/mocha,mocha,2013-08-07T17:54:58Z,if you shim in this way you will leak this functionality from the test suite into your tests.  so tests that would have previously failed due to use of `array.prototype.indexof()` will now succeed.  for you this may be desired functionality but for others they will end up with invalidly succeeding tests in ie 7/8 if their production environment doesn't have a shim for indexof and they end up using it in their tests.  a better solution would be to migrate uses of indexof in the mocha codebase to utilize your shim directly avoiding polluting the global `array.prototype` with test library implementation.,positive
mochajs/mocha,mocha,2013-08-07T19:37:19Z,i agree. thanks for the reply. will work on updating this.,positive
mochajs/mocha,mocha,2013-08-09T08:01:09Z,it would be pretty easy to allow assertion libraries to interface with mocha. however that definitely loses some elegance. i'd definitely prefer to stay away from adding these sort of wrapper functions,positive
mochajs/mocha,mocha,2013-08-09T09:02:56Z,cool looks good! just need to remove the mocha.js build stuff,positive
mochajs/mocha,mocha,2013-08-10T16:10:36Z,and that worked! thanks. now i have a much better reason than pretty logs to use mocha :),positive
mochajs/mocha,mocha,2013-08-14T16:58:21Z,add filename to mocha.test objects. i would like for the mocha runner to send my custom reporter the names of the containing files along with tests. how would people feel about a patch that made test objects aware of the file in which they are declared?,neutral
mochajs/mocha,mocha,2013-08-14T17:26:58Z,in both node and the browser we can do this by throwing then catching an error:``` jstry { throw new error();} catch(e) {  e;}```,negative
mochajs/mocha,mocha,2013-08-14T20:19:53Z,note: most of the `mocha.js` changes are not mine. and just from `make` not having been run in a while on master.,neutral
mochajs/mocha,mocha,2013-08-17T17:31:04Z,:+1:,neutral
mochajs/mocha,mocha,2013-08-19T13:50:27Z,this is becoming a real pain for us.,negative
mochajs/mocha,mocha,2013-08-20T22:59:43Z,i see why now: mocha's build process isn't currently set up to package npm modules for the browser. i've opened a new pull request to address the underlying bug: #957,neutral
mochajs/mocha,mocha,2013-08-21T01:25:16Z,even if it just dumped its crap all over the global space when you `require('mocha')`. would be better than the current state of things.,neutral
mochajs/mocha,mocha,2013-08-21T01:29:31Z,i don't think it's silly but there are tradeoffs with everything. i'd be happy with something like this:``` jsvar mocha = require('mocha');var mocha = new mocha(options);mocha.describe('blah blah'. function....```no one would use it but at least it would be a cleaner way to implement what we currently have. there would be a _ton_ of boilerplate that everyone would have to set up each time. but if we could narrow those down to cli-ish apis that would be ok. even if there was lib/cli.js that just passed in the argv. but i still doubt anyone would use it. you can use it without the cli reasonably easy. but that illustrates that no one really wants to beyond some edge cases.,negative
mochajs/mocha,mocha,2013-08-21T05:50:26Z,visionmedia that seems pretty nice. the reason i suggested `require("mocha/bdd")` or similar is that it would be pretty easy to implement in terms of existing mocha. but yeah. yours is probably better. (you could envision using it to e.g. run multiple test suites at once or something. well. that would probably break because of the process.on('uncaughtexception') usage. but you see what i mean.)i may try a pull request for this one day.,negative
mochajs/mocha,mocha,2013-08-24T19:58:54Z,yeah no clue with selenium sorry but it's not mocha related,neutral
mochajs/mocha,mocha,2013-08-30T00:19:16Z,λ mocha (master): git ls-files | grep test.jslib/test.js,neutral
mochajs/mocha,mocha,2013-08-30T03:00:44Z,hmm lame. it should have been broken for a longggggg time then :s. mocha needs that file haha,negative
mochajs/mocha,mocha,2013-09-02T16:15:45Z,-1 from me. mostly because we have too many features in mocha already. but it's also pretty easy to roll this sort of ad-hoc behaviour if you want to. something like:``` jsbeforeeach(function(){  var self = this;  dosomerequest(function(){    self.failed = true  })})test('something'. function(){})function test(label. fn) {  it(label. function(){    if (self.failed) return;    fn()  })}```,neutral
mochajs/mocha,istanbul,2017-07-31T15:59:16Z,hey probot-stale. i appreciate you care about this. i don't know if this has changed in master but i really think it's an improvement. could you advice how can i get more attention?,positive
mochajs/mocha,istanbul,2017-08-02T16:53:07Z,different approach suggestion. did you test how long it takes to install the deps with `yarn` instead of `npm`?,neutral
mochajs/mocha,istanbul,2017-08-05T10:44:10Z,travis notes that their cache is downloaded from an external storage solution. so it might not help too much if most of the time is spent downloading binaries.,neutral
dondi/GRNsight,mocha,2018-05-29T20:34:33Z,dondi currently we have functions like `noerrors` and `duplicategeneerror` that we call in our mocha blocks of code. in files like _errors-graph-tests.js_. my question is should i consolidate the code that i have right now into a function similar to noerrors?,negative
dondi/GRNsight,mocha,2018-05-29T20:44:45Z,mihirsamdarshi ok so it looks like our priority is to get node to recognize import/export first. if you have already read up a bit on the issue. you know that the core need is to precompile the code into a form that doesn’t use import and export. it looks like mocha will need to be run with a setting that sends the code through babel first.see if you can get this to work by consulting the web for possible solutions and determining one that works for our specific setup. if you find that this is above your pay grade. let me know.,neutral
dondi/GRNsight,coveralls,2018-05-25T16:07:32Z,any reason coveralls is taking this long to finish?,neutral
sitespeedio/sitespeed.io,eslint,2015-08-12T12:06:50Z,hello again ofauchon if you could run <code>eslint .</code> and update the code so it follow the eslint rules that would be super and then i'll merge.bestpeter,positive
karma-runner/karma-sauce-launcher,karma,2014-09-08T16:48:42Z,feat(config): support job visibility definition. it is desirable for open source projects to publish their test results.saucelabs' api supports job visibility configuration through a'public' parameter that can be set to one of the following:- public- public restricted- share- team (default)- privatethe karma-sauce-launcher should support visibility configuration viaconfiguration options and command line arguments.,positive
karma-runner/karma-sauce-launcher,karma,2014-09-08T16:56:48Z,the travis configuration seems to be broken:```make sure the sauce_username and sauce_access_key environment variables are set.npm err! test failed.  see above for more details.npm err! not ok code 0```,neutral
karma-runner/karma-sauce-launcher,karma,2014-09-08T17:10:31Z,bripkens don't worry about travis-ci failure - it is only "half-broken" - secure env variables are not available on pr commits but the build runs ok when a pr is merged.chriswren i might have asked already but do we need to keep user / key for sauce as a secured var? the downside of doing so is that tests will fail for a pr. if we can't make it public we should probably skip the test step for prs as not to confuse people,negative
karma-runner/karma-sauce-launcher,karma,2014-09-11T01:08:33Z,pkozlowski-opensource we should not run tests on prs. i can update the config. the launcher should support all the available job config properties. i can take a look at what is required for that to happen.,neutral
karma-runner/karma-sauce-launcher,karma,2014-09-12T17:39:15Z,chriswren: will you merge this or do you want to wait for a pr that adds all the missing configuration options?,neutral
karma-runner/karma-sauce-launcher,karma,2014-10-07T06:37:30Z,something new about this issue ?,neutral
wix/detox,mocha,2017-06-29T20:21:35Z,i think detox tries to throw an error inside mocha's `beforeall` hook . but for some reason mocha catches all errors thrown inside `beforeall`. as a workaround. try surrounding `detox.init()` with a try/catch clause. and print the exception. what does it say ?,negative
wix/detox,mocha,2017-06-30T07:54:47Z,so my folder structure is:```-e2e  -pages    - loginpage.js  -specs   -loginspec.js  -init.js  -mocha.opts```,neutral
jantimon/html-webpack-plugin,standard,2016-08-08T11:35:35Z,i've just noticed that i have the same issue. with standard usage (index.html file with <%= template variables) it works fine.this issue arises for me when i try to use require in the index.html template.my goal is to split the index.html in multiple files so that i can reuse building blocks.i'd like the index.html file to contain almost only require statements:```<%= require("./header.html"); %>...<%= require("./footer.html"); %>```,neutral
gruntjs/grunt-contrib-stylus,jshint,2014-08-26T05:55:15Z,first check code with jshint upon running npm/grunt test,neutral
cfpb/hmda-platform,codecov,2016-08-22T21:26:39Z,note: the codecov decrease comes from removing a file that was well-covered. not because any coverage was lost (or un-covered lines newly added) in code that remains.,neutral
cfpb/hmda-platform,codecov,2016-08-23T19:31:30Z,i don't know what's going on with codecov. but i think my tests have good coverage for this pr.,positive
AnalyticalGraphicsInc/cesium,eslint,2018-06-13T14:20:52Z,thanks omarshehata. i will review shortly. in the meantime. it looks like ci is failing on the `eslint` task. try running the linting tool locally and fixing any errors.,negative
redfin/react-server,eslint,2017-01-11T19:30:51Z,make eslint happy again after updating the module tagger code.. should also help fix #824,neutral
redfin/react-server,eslint,2017-01-11T19:33:58Z,thanks drewpc.,positive
simple-statistics/simple-statistics,sauce,2016-02-16T03:22:21Z,no longer using sauce.,neutral
xtuple/xtuple-extensions,mocha,2014-08-01T13:24:19Z,add debug to mocha test,neutral
moment/moment,sauce,2014-07-30T05:35:30Z,optimize clone. replaces #1785i rebased and added a few tests. also run sauce tests.,neutral
moment/moment,sauce,2014-07-30T05:45:10Z,merging this. thanks icambron.,positive
libp2p/js-libp2p,uglify,2018-04-24T08:22:23Z,wooot!,neutral
react-boilerplate/react-boilerplate,mocha,2016-06-14T12:35:41Z,running tests is too slow with karma. it takes 23 seconds to npm run test on the project as initially checked out. i have found karma to be a very slow test runner and have switched to mocha-webpack+mock-browser so that tests can be run without a browser at all. at the time my react karma/phantom or karma/chrome cycle was taking 60 seconds to run for a few hundred tests. after the change it took 6 seconds to run the whole thing. the best part though was the test:watch improvement as it only packs and runs the tests needed.this is a huge improvement in red-green-refactor cycle time.  i found that karma-webpack was horribly slow on a watch change.do you have any plans to switch to this. or perhaps make it available as an option?,positive
react-boilerplate/react-boilerplate,mocha,2016-06-14T15:02:49Z,would you mind detailing what you did? i'm very interested in that.,positive
react-boilerplate/react-boilerplate,mocha,2016-06-14T15:54:19Z,feel free to submit a pr implementing this. would love to speed up the testing process! :+1:,positive
react-boilerplate/react-boilerplate,mocha,2016-07-06T14:56:16Z,my knowledge of webpack is slightly a bit above zero and i've not got time at the moment. i'm just converting an existing project to use react boilerplate and after that's done then will have a look into this.,negative
react-boilerplate/react-boilerplate,eslint,2016-11-18T03:18:54Z,is there a way to declare the api url a variable. such as using environment variables? in the example above. i have to declare the api url statically. which means if deployed to a different server environment (staging. production. etc.). i have to update the api url manually.,neutral
react-boilerplate/react-boilerplate,eslint,2016-11-28T13:11:51Z,is there an equivalent for the sagas ? current solution i have found is in routes.js :       const { injectreducer. injectsagas } = getasyncinjectors(store); // eslint-disable-line no-unused-vars      injectsagas(appsagas);,neutral
react-boilerplate/react-boilerplate,eslint,2016-12-02T18:58:56Z,so now we can get rid of this rule `"import/first": 0` altogether. because by default it is enabled in airbnb eslint config. right?,negative
react-boilerplate/react-boilerplate,eslint,2016-12-09T23:32:54Z,fix(homepage): saga effects should be yielded. i would love to see a more elegant solution. but as #1232 discusses. this seems to be the solution employed by the eslint-plugin-redux-saga project.resolves #1232,positive
react-boilerplate/react-boilerplate,eslint,2016-12-10T17:12:20Z,gihrig. many thanks for merging those two prs and looking into this one ❤️. that means i will be able to finish it today. > i presume the eslint disable was a temporary measure?yes. that's correct. and i prefer your solution. because it's conciser. either way a dev would delete it.> now that i have looked at this more closely. maybe a better approach would be to remove the truly useless return and replace it with an informative comment e.g.sounds like a good idea to me.,negative
react-boilerplate/react-boilerplate,eslint,2016-12-11T00:45:36Z,yeah. that was another reason why i considered making the wrapper component to use the styled variable. would you rather i just ```eslint-disable-line no-unused-vars``` on the styled-components import or go ahead and make the wrapper component?,neutral
react-boilerplate/react-boilerplate,coveralls,2016-09-12T23:45:58Z,filter test file from coverage report. closes #195- uses bash commands to filter `lcov` input being piped to coveralls- filters out all files with `test` in their path,neutral
react-boilerplate/react-boilerplate,coveralls,2016-09-13T05:32:32Z,yes. i like this! can it possibly be achieved without adding another dependency?,positive
react-boilerplate/react-boilerplate,coveralls,2016-09-14T23:13:25Z,mxstbr absolutely. good call. since we're piping output to coveralls. we can use a nice simple `grep -v` to filter out any files with `test` in their path. will update description above accordingly,positive
apache/zeppelin,selenium,2016-08-18T06:45:48Z,corneadoug it passed selenium test. is it enough?,neutral
apache/zeppelin,selenium,2016-09-07T06:03:46Z,ci failed because of selenium. i think,neutral
assaf/zombie,standard,2014-10-16T20:15:03Z,i may suggest to write in that readme that the second returns a promise. isn't `done` a standard nodejs way to alert something is done? gulp. grunt. or other. are probably using that. that's why i was suggesting to update the example (at least one of them) to include a `done` callback (while remaining framework agnostic).,neutral
yeoman/generator,coveralls,2014-04-20T22:06:26Z,mazerte still around?,neutral
MithrilJS/mithril.js,eslint,2017-07-22T05:21:03Z,fair enough. i don't love the prettier formatting necessarily either but it is nice to have the code be very uniform.pygy isiahmeadows how would you feel about this pr if i switched to to run `eslint --fix` instead of `prettier`? the `lint-staged` bit is identical between the two. that seems to me like a nice step in the direction of having lint failures break builds (or at least having `danger` get cranky about 'em in the pr comments).,negative
MithrilJS/mithril.js,eslint,2017-07-22T06:43:04Z,run eslint --fix against commits. <!--- provide a general summary of your changes in the title above -->## descriptionafter more discussion in #1909 we decided that `prettier` wasn't the right approach. but `eslint --fix` is definitely a good idea. reducing the likelihood of bad code in prs is always a win.this also standardizes on all packages in `package.json`. previously there were a few that were only installed on travis-ci. i never liked that approach though. so i'm getting rid of it.## motivation and contextautomatically fixing simple formatting errors before submission!## how has this been tested?tested writing some bad code. then committing it & comparing the diffs.,negative
pouchdb/pouchdb-server,jshint,2014-12-16T11:10:14Z,(#79) - add jshint,neutral
pouchdb/pouchdb-server,jshint,2014-12-16T18:45:08Z,+1,neutral
NetsBlox/NetsBlox,codeclimate,2018-05-17T16:20:10Z,update codeclimate configurations to v2,neutral
NetsBlox/NetsBlox,codeclimate,2018-05-19T03:20:14Z,lgtm. nice work!,positive
NetsBlox/NetsBlox,codeclimate,2018-05-24T14:27:28Z,looks like there is a little codeclimate issue but otherwise lgtm,neutral
NetsBlox/NetsBlox,codeclimate,2018-05-30T20:17:58Z,relax codeclimate restrictions. increases codeclimate threshold for long files and functions,positive
NetsBlox/NetsBlox,codeclimate,2018-05-30T20:19:03Z,code climate issue is just about lines of code #2078 should help with that. i've wanted to change this since we update codeclimate config to v2,neutral
NetsBlox/NetsBlox,codeclimate,2018-05-30T21:05:48Z,we should also increase the test timeouts on travis,neutral
NetsBlox/NetsBlox,codeclimate,2018-05-30T23:15:26Z,nice update to the config. they were pretty strict. i think 50 lines per function and 500 loc per file is good.,positive
rwjblue/ember-lifeline,eslint,2018-07-17T03:24:49Z,removing ember-cli-eslint to fix build,neutral
rwjblue/ember-cli-template-lint,mocha,2017-07-26T20:27:18Z,fix addon not working when `yarn link`ed. when i `yarn link`ed the addon to develop. the addon detected my app's tests as being qunit instead of mocha. and so the addon didn't generate any tests,neutral
strongloop/generator-loopback,eslint,2017-01-31T14:04:49Z,upgrade eslint-config. fix new violations. see strongloop/eslint-config-loopback#19,neutral
vvo/selenium-standalone,selenium,2015-03-05T03:22:00Z,do not want to see errors when killing. every time i kill the selenium process i see this error:```     callstack:     -> session("delete")     -> end()]  message: 'runtimeerror\n     (econnrefused:-1) couldn\'t connect to selenium server\n     problem: couldn\'t connect to selenium server\u001b[1;30m\n\n     callstack:\n     -> session("delete")\n     -> end()\n'.  name: 'runtimeerror'.  hascallstack: true }```in the `process.uncaughtexception` handler.honestly. when it is getting killed. it should not throw an econnrefused error,negative
vvo/selenium-standalone,selenium,2015-03-05T10:25:37Z,i think that's not a selenium standalone error. more a your selenium-webdriver error. try to listen for delete and end before killing the server,neutral
vvo/selenium-standalone,selenium,2015-03-05T22:01:57Z,and why aren't you mentioning this in the readme and recommend a direct `.kill()` there?,neutral
vvo/selenium-standalone,selenium,2015-03-06T08:31:16Z,sorry i misunderstood something. i do not understand the problem you are facing. maybe show me a failing git project,negative
vvo/selenium-standalone,selenium,2015-03-09T00:48:53Z,forget it. all is good now. i solved this all by myself by rearranging and writing better gulp tasks. keeping all references in local scope.,positive
vvo/selenium-standalone,selenium,2015-03-09T07:35:30Z,:+1:,neutral
vvo/selenium-standalone,selenium,2015-03-10T08:29:46Z,i really don't know. this output comes from selenium. so it's a selenium issue i guess?,negative
vvo/selenium-standalone,selenium,2015-03-12T08:53:05Z,this is a selenium issue. maybe try to launch selenium yourself:,neutral
vvo/selenium-standalone,selenium,2015-03-18T22:44:49Z,something like this``` coffeegulp.task('selenium:start'. (cb) ->  if (selenium.alreadyrunning())    cb()  else    selenium.start((err. seleniumprocess) ->      if err        cb(err)      else        gutil.log('selenium instance spawned.')        ...        cb()    ))```,negative
vvo/selenium-standalone,selenium,2015-03-18T22:46:38Z,i think that if you started selenium you should already be able to know if it's running. with a simple flag you set?,neutral
vvo/selenium-standalone,selenium,2015-03-20T09:58:18Z,how to get the selenium logs?. is there any way to have a logger that outputs all the selenium logs when running selenium from within node. like the ones you see when you run the selenium-standalone server using the jar file?the reason i'm asking is because my tests are working fine with the selenium-standalone server from selenium. and also if i run selenium-standalone (the binary from this repo). however. if i start my tests using the selenium-standalone from within node. halfway through it stops working and i have no idea what is going wrong since i don't seem to have any way of retrieving the logs..,negative
vvo/selenium-standalone,selenium,2015-03-20T12:21:16Z,alright. so the way you get the logging from the programmatic api is by doing the following:```child.stderr.on('data'. function(data) {    console.log(data.tostring());});```this should probably be in the documentation as it can be quite useful. anyway. back to the issue. when i put this piece of code in. the tests work.. so it's literally like a quantum problem. as soon as i try to observe it. the tests run fine. but when i remove this piece of code. the tests seem to stop halfway through.any ideas on what could be affecting this?,positive
vvo/selenium-standalone,selenium,2015-03-20T13:16:12Z,updated readme with two ways to retrieve the selenium logs,neutral
vvo/selenium-standalone,selenium,2015-03-20T13:21:58Z,nice. i will just add another line about the cli command line tool already using the stdio inherit thing,positive
vvo/selenium-standalone,selenium,2015-04-02T21:13:06Z,cors issue. i have just setup a simple test with this and webdriver io. however i noticed that in firefox i am getting cors errors. i am not entirely sure if i need to set some args when starting up selenium-standalone to allow cors or if i need to set it in the dependencies for webdriver io. but i thought i would ask the question incase anyone else has had/solve an issue with making cors requests.just to be clear it works fine if i was just browsing and using the site in firefox normally. as the xhr and server all support cors based requests. it just seems to be while running via selenium it doesnt. but cannot find much information on the subject.,negative
koalyptus/TableFilter,codecov,2017-06-15T03:43:34Z,ignoring codecov patch,neutral
nathanboktae/mocha-phantomjs,mocha,2016-01-07T17:29:42Z,support babel!. for example:``` bashmocha-phantomjs test/mocha-runner.html --compilers js:babel-core/register --recursive```,neutral
nathanboktae/mocha-phantomjs,mocha,2016-01-08T05:31:28Z,`mocha-phantomjs` runs in the browser. not node.js. that is not possible how you have it.it's also not possible to do this generically. nor should it. the biggest difference between `karma` and `mocha-phantomjs` is that it gives you full control over your test runner html. whatever works by going to your tests in a browser using mocha will work with `mocha-phantomjs` (barring phantomjs issues. which there are quite a bit. less and less with phantomjs 2). so iirc babel can work in the browser. so get that working. and it's working in mocha-phantomjs too.,neutral
nathanboktae/mocha-phantomjs,mocha,2016-01-25T23:14:05Z,so. how did you solve your problem?,neutral
godaddy/javascript,eslint,2017-08-01T04:28:22Z,adding how to install `eslint-config-godaddy-react-flow`. minor readme updatejosephjnk samshull,neutral
godaddy/javascript,eslint,2017-08-07T21:32:49Z,`eslint-config-godaddy-es5` will also have to be updated,neutral
kazupon/vue-validator,eslint,2016-05-14T14:54:12Z,in mac os x. there is no eslint error and all test are passed.,neutral
typicode/husky,standard,2017-07-28T14:03:33Z,jbcpollak did you figure it out?,neutral
rooseveltframework/teddy,mocha,2017-08-21T19:23:19Z,add eslint plugin to check for mocha `.only`s,neutral
rooseveltframework/teddy,mocha,2017-08-22T15:10:38Z,autre31415 great link. highly recommend as that is what is used in our _other_ project,positive
marionettejs/backbone.marionette,sauce,2017-04-18T15:24:02Z,this does successfully remove the babel helper in the build causing the problem.. but the test suite doesn't really reflect that..  saucelabs is failing all the time without actually failing. so i can't really tell if it is doing anything at all.,negative
PaulLeCam/react-leaflet,eslint,2016-03-31T13:29:06Z,lint 'object destructuring filter' consistently. the pattern `const { map. url. ...props } = this.props` usuallyfailed during linting. because the `map` variable is defined butnot used (`no-unused-vars` rule).after adding the `"varsignorepattern": "^_"` option to the`no-unused-vars` rule. unused properies can be marked as:`const { map: _. url. ...props } = this.props`.i also updated the eslint and babel-eslint dependencies. because ofsome relevant bugfixes.,negative
PaulLeCam/react-leaflet,eslint,2016-03-31T19:12:47Z,good idea. thanks!,positive
apache/tinkerpop,standard,2015-08-14T11:12:23Z,i'm not so sure that this is as close to being done as you thought.  to name a few issues i noticed besides what you mentioned:- there's a lot of duplicate code to consolidate around the different "utilities"- we'd need to remove the jettison dependency- ultimately "graph of the gods" data set would need to be replaced by one or more of the common tinkerpop datasets.i'm also wondering how useful this is now outside of titan/faunus users.  the id system forces longs.  it uses `compact` graphson which is "non-standard" in a sense (again for titan).  that doesn't match the original reader we supplied which uses `extended`.  this almost feels more like a pr for titan as it sorta bound to that implementation.  short of users generating their own files like this. i'm not sure that i see the value to tinkerpop.  any thoughts on the matter?,negative
nteract/nteract,eslint,2016-11-13T21:06:45Z,docs - potentially add testing to contributor guide.. i noticed in the contributor guide. there is no mention of style testing with eslint or unit testing before submitting a pr. is this something we want to consider adding to contributing.md or something preferable to continue letting ci handle and debugging after the fact?as a new contributor. it was beneficial for me to run these things locally. but i recognize that may not be universal.thanks!,negative
nteract/nteract,eslint,2016-11-13T22:26:55Z,to be clear. i am not suggesting changing anything with ci. just also running these things locally to expedite prs.,neutral
nteract/nteract,eslint,2016-11-13T22:48:54Z,i'm all for adding linting to the default npm run test setup!,negative
nteract/nteract,eslint,2016-11-13T22:49:23Z,oh you're saying adding some text to the contributing guide - also super cool,positive
nteract/nteract,eslint,2016-11-14T00:45:00Z,ooh good idea. i hadn't considered adding it to default testing. do you think something like something like this might be appropriate?``` node    "posttest": "npm run lint".```> oh you're saying adding some text to the contributing guide - also super coolnice. i can add an extra step to npm run test after #5 in contributing.md,positive
nteract/nteract,eslint,2016-11-14T02:30:10Z,well. we want it to fail locally when it doesn't pass linting so we'd want:``` json  "test": "npm run test:unit && npm run test:lint".```,negative
nteract/nteract,eslint,2016-11-14T02:31:43Z,ahh good catch. thanks kyle!,positive
nteract/nteract,codecov,2016-10-15T18:17:57Z,ci is good now. i don't know why codecov is complaining.,negative
nteract/nteract,codecov,2016-10-26T03:25:01Z,chore(epictesting): fix issue in github testing.. i checked codecov and some of the tests weren't actually working. this should hopefully fix things!(?),negative
nteract/nteract,codecov,2016-10-26T03:36:55Z,okay. shoot. i found some problems with the work i did.,negative
mantoni/mochify.js,mocha,2015-03-25T03:22:33Z,i thought mochify -r mocha-unfunk-reportermight be a work-around. so i installed that npm. but get an invalid reporter error when trying to use it.i looks like the tap reporter uses no ansi though--although output format is totally different.,negative
hoodiehq/hoodie,standard,2016-11-21T11:19:20Z,i must have been thinking about if anyone wanted to use the `hoodie/` path for their own purposes. it would be good to avoid an overlap by some mechanism. this is probably extremely edge-case though and better worked around.i understand the value of having apps also be usable as plugins/modules in their own right (coming from a php knowledge base. this is prevalent in zend framework. for example) in which case enforcing the relative path from each module's root to be standard makes complete sense. i'm happy to proceed on this.,positive
hoodiehq/hoodie,karma,2014-01-22T21:52:22Z,define dev tools (frontend/backend). which dev tools are used for the front & backend?- [ ] grunt- [ ] browserify- [ ] phantomjs- [ ] mocha- [ ] karma- [ ] jshint,neutral
hoodiehq/hoodie,karma,2014-01-22T22:32:43Z,hoodie.js:- grunt- browserify - karma / phantomjs- jshinthoodie-server:- grunt- mocha / nodeunit- jshint,neutral
hoodiehq/hoodie,karma,2014-01-23T18:33:41Z,cool! let's keep a list in the issue,positive
cucumber/cucumber-js,jasmine,2013-08-01T20:24:05Z,adding runtime to the worldconstructor. tested using jasmine and works running cucumber against saucelabs using wd,neutral
cucumber/cucumber-js,eslint,2017-06-28T19:51:07Z,aslakhellesoy yes. i was thinking about that. there are not many prs at the moment. i guess we could do it ourselves (copy the config files. run `eslint --fix` and voilà).,neutral
vector-im/riot-web,standard,2017-02-18T01:14:47Z,i think this would require the spec being changed? my first thought was to detect if a bot was the result of integrations and then display it differently on the front-end. but this would be difficult to make persistent.i imagine you could preface all bot usernames with `bot_` or something. but if we're going through the trouble of trying to establish a standard for this. i think we may as well send data about it through json instead. maybe is `bot` key on users that can be true or false.,neutral
vector-im/riot-web,standard,2017-02-18T20:46:46Z,how would this work? is this like remote desktop or vnc to control the remote machine somehow?  this can't be done via web standards. so riot-web would be heading off into custom browser apps (as chrome remote desktop does it). afaik...,neutral
vector-im/riot-web,standard,2017-02-18T20:52:57Z,yeah. i'm inclined to agree. although i think we should still let clients have the option of generating their own thumbs if they prefer.we clearly need a standard api for clientside thumbnailing in general. which links in turn into the whole general "human representation of events" problem.,neutral
vector-im/riot-web,standard,2017-02-24T03:23:42Z,yes! perhaps it is time to add the ubiquitous question mark icon somewhere to the ui. (recommend top right. as this is fairly standard.)these guides would work as interim content.,neutral
vector-im/riot-web,standard,2017-03-08T18:33:35Z,do we have an existing design standards guide w/css attached?  hint: this is something i'd love to take on.,positive
cloudchen/grunt-template-jasmine-requirejs,jasmine,2014-08-01T18:42:16Z,script load reorder option. would it be possible to have an option to include vendor scripts before require.js in the template?  when i run jasmine with this template i get errors saying that dependencies cannot be found.  if i move the with scripts vendor script block above where require.js is being included in the runner html file then everything works fine.,negative
appium/appium,selenium,2014-11-14T02:02:43Z,sounds like a regular selenium-webdriver issue. you need to pass the 'browsername': 'safari'. or app:<hybridapp>. jlipps our error message is missing `browsername` cases.,positive
appium/appium,selenium,2014-11-17T07:29:50Z,the error caught by the script we are running is'error': (<class 'httplib.badstatusline'>. badstatusline("''".).the error that follows for the rest of the testcases is'error': (<class 'selenium.common.exceptions.webdriverexception'>. webdriverexception(),negative
appium/appium,selenium,2014-11-17T19:32:02Z,some of the commands (e.g. settext) are a higher-level abstraction of many lower commands (focus. clear. send keys. etc) and i think that's done out of convenience.  i think trying to type through the keyboard is a bug.  i'd vote to either throw an error (e.g. "widget is not visible" -- i think this is what selenium does) or put in the necessary logic to hide the keyboard or scroll to the widget.  hiding the keyboard would probably be easiest. though i wonder if it would have any negative side effects?do you by chance know what appium currently does if the widget is off screen (keyboard issue aside)?,neutral
appium/appium,selenium,2014-11-18T18:06:27Z,you don't use the selenium server jar to run appium. i'm not really sure what you're trying to do. appium isn't something you import into android studio. it's a standalone app you run completely independently of android studio.,neutral
appium/appium,selenium,2014-11-20T23:34:21Z,> we can add additional parameters beyond the spec. eg function overloads. so i don't see how we're limited in this case.we're limited in the sense that the driver methods which use `/touch/click` have a particular semantics. changing that semantics is technically feasible but not the approach we have taken with appium. which is only to extend. not to modify. any of the existing selenium protocol.hopefully the clients themselves will be updated to deprecate the old `/touch` endpoints in favor of the new spec. then this problem will go away.,negative
appium/appium,selenium,2014-11-24T18:10:53Z,noizu for the contexts commands you need to use appium's ruby_lib. not the vanilla selenium client.,neutral
appium/appium,selenium,2014-12-12T18:12:06Z,awesome. works fine for me too .. thanks ross,positive
appium/appium,eslint,2017-03-04T07:16:52Z,what if you just ignore the error (this does not affect any critical components anyway) and continue with testing?imurchie why wda inspector requires appium eslint config module to be installed?,neutral
jhipster/generator-jhipster,eslint,2016-11-07T06:54:03Z,cbornet : fyi. there are some eslint errors,neutral
angular-ui/ui-sortable,karma,2014-06-29T18:18:16Z,chore: use wiredep in karma tests for resolving package filepaths,positive
reactabular/reactabular,codecov,2016-12-16T16:01:49Z,this codecov-io comments are extremely unreadable ;-(,neutral
agda/agda-stdlib,standard,2018-07-02T22:26:47Z,i guess on balance we should probably add them. i agree with jacquescarette that they might well be misused. but to be honest so might a lot of things in the standard library. gallais's case shows that they do have their uses....,neutral
agda/agda-stdlib,standard,2018-07-05T21:10:23Z,added some of haskell's data.maybe operations to agda's standard library.. added some of haskell `data.maybe` functions with the notable exception `mapmaybe`.ideally haskell's `data.maybe.mapmaybe` would be moved into agda's counterpart location. unfortunately it currently lives in `data.list.base`. which is a surprise to those migrating from haskell to agda. or the many who tend to use both frequently. attempting to relocate it quickly. naively. resulted in cyclic dependencies.,negative
agda/agda-stdlib,standard,2018-07-06T10:01:08Z,#350 which has just been merged provides a way forward on this problem. it adds a new "safe" modular arithmetic library. the old library can then be placed in the `unsafe` module. the dependencies have been updated to use the new library.,positive
agda/agda-stdlib,standard,2018-07-06T17:27:08Z,hmm. you're right the name is a little confusing. i'm not sure about the alternatives though:- `≤.≢⇒<` makes it look like it has a product type in it and the binding order isn't very clear.- `≤and≢⇒<` is very non-standard.- `≤∧≢⇒<` is very difficult to parse as `∧` looks like a flipped inequality.thoughts?,negative
agda/agda-stdlib,standard,2018-07-09T23:19:14Z,deprecating `data.fin.dec`. the very last of my outward-facing module level changes! as described in the changelog. `data.fin.dec` is a non-standard module which is causing dependency cycles when i try and add a proof of the pigeonhole principle in `data.fin.properties`. it also fixes the problem of the subset decidability proofs being nearly unfindable for new users.this pr deprecates the module and moves the proofs it contains to more sensible places. the proofs have also been tidied up a little.,negative
keycloak/keycloak-nodejs-auth-utils,standard,2016-12-07T12:13:30Z,sebastienblanc could you please run the tests and tell me if what `semistandard` is complaining makes sense to you?,positive
jonaskello/tslint-immutable,codecov,2017-09-20T22:18:59Z,add codecoverage. as discussed in #38,neutral
jpuri/react-draft-wysiwyg,uglify,2018-08-01T09:56:27Z,uglifyjs-webpack: typeerror: super expression must either be null or a function. not undefined. hello. everything works fine in development. but when i change to production i got this:    sortable.js:7 typeerror: super expression must either be null or a function. not undefined        at react-draft-wysiwyg.js:6        at react-draft-wysiwyg.js:6        at react-draft-wysiwyg.js:6        at t.default (react-draft-wysiwyg.js:6)        at t.getcompositedecorator (react-draft-wysiwyg.js:6)        at t.value (react-draft-wysiwyg.js:6)        at aa (react-dom.production.min.js:13)        at react-dom.production.min.js:13        at si (react-dom.production.min.js:13)        at ui (react-dom.production.min.js:13)in production i use `uglifyjs-webpack-plugin` and that's the cause of the error and i don't really know why.,negative
jshint/jshint,jshint,2013-07-15T02:18:49Z,just use a `.jshintrc` file to define these globals...,neutral
jshint/jshint,jshint,2013-07-15T20:16:44Z,you also changed the [] to {}. i like.,neutral
jshint/jshint,jshint,2013-07-16T15:01:53Z,again. i think that is the point of a `.jshintrc` file. you can just copy it from one project to another. not a big deal.,neutral
jshint/jshint,jshint,2013-07-17T04:39:34Z,you keep referring to some "other parser" but such a thing does not exist. all sane parsers accept trailing commas. so while it is true that jshint cannot be used for the task outlined in the initial description in this ticket. your implied assertion that there is another tool that can be used for that task is not true.,positive
jshint/jshint,jshint,2013-07-17T17:11:36Z,so in other words. for people who want to support old ie.are you guys pulling this in or what? this is one of the most useful checks in jshint.,positive
jshint/jshint,jshint,2013-07-19T01:26:47Z,in file options overwrite everything else. do you have build failing because of that or what? closing for now but will re-open if the issue is real.,negative
jshint/jshint,jshint,2013-07-19T01:27:35Z,for now jshint works on a per-file basis only. in future we might change that but no eta.,neutral
jshint/jshint,jshint,2013-07-20T23:00:44Z,what: it's for yeoman (through grunt-contrib-jshint) where we're trying to reduce the size (in bytes) of our dependency tree. but i don't see why you shouldn't do it regardless. no point in shipping useless files.why: people commit dependencies for deployable projects (best practice in node). also bandwidth. though negligible in this case.,negative
jshint/jshint,jshint,2013-07-22T13:43:12Z,whoops. closing this and reopening on jshint/site,neutral
jshint/jshint,jshint,2013-07-24T06:32:16Z,there's a file `jshint.json` with all the options we use. you can either use with `jshint --config=jshint.json` or by running `node make.js lint`.,neutral
jshint/jshint,jshint,2013-07-28T17:51:54Z,add optional parameters to cli.gather. if gather was invoked without an object that had an extensions and ignoresproperty then there would be an exception thrown.  it is reasonable that aclient would invoke jshint with an object without these properties.  especiallysince grunt-contrib-jshint relied on the fact that ignores was optional (seecommit 5de09c4) and then that functionality was changed without discussion orwarning. breaking grunt-contrib-jshint.gruntjs/grunt-contrib-jshint#86,neutral
jshint/jshint,jshint,2013-07-29T18:46:25Z,thanks for pulling.  i'm new to pull requests.  i see 'closed with unmerged commits' and an option to delete branch.  is this the norm and do i delete the branch?,positive
jshint/jshint,jshint,2013-07-29T18:59:10Z,well. i don't _merge_ commits i squash them and apply them as a single patch with my own commit message and your name as an author. this results in a different hash from your original commit hence the unmerged commits messages. this doesn't happen when you use the merge ui button here but i like my history clean and tidy. anyway. your change is in so its safe to delete the branch. thanks again!,positive
jshint/jshint,jshint,2013-07-29T19:25:18Z,awesome!  yes. that makes sense.  thanks for the explanation.,positive
jshint/jshint,jshint,2013-07-30T17:48:20Z,i'm a fan of the solution proposed by dilvie. how might we express these different modules?perhaps by introducing a syntax (encoded as a string. of course) to `.jshintrc` to require or include external partials?or maybe adding support for dynamically loading a collection of `*.json` files from the file system from a specific directory (such as `<project root>/jshint-globals/`)?,neutral
jshint/jshint,jshint,2013-07-30T20:40:12Z,are you sure you don't have `.jshintrc` with `es5:true` somewhere in your home directory?,neutral
jshint/jshint,jshint,2013-07-30T21:30:46Z,apologies. i haven't used `typeof` myself. i just noticed that it always returns a string and so it is advised at work to use loose equality for that and strict for everything else. i thought that since this may be a common thing that organisations advise. it should probably be an option in jshint to allow `typeof` comparison be loose whilst everything else be strict.,negative
jshint/jshint,jshint,2013-07-30T22:43:05Z,yeah. i know a static code analyzer has some limitation. i think it's not a problem to ignore false positives about the usage of ´with´ as well as local variables named ´eval´. local variables you can rename them. so you can avoid the false positive. if you take care of what you do you can do the same with the ´with´ statement. using ´with´ is a bad practice anyway and is forbidden by the strict mode._but_ false positives about ´eval´ are becoming very boring with method calls. in my case i depend on an existing library. a template engine. of course it defines a namespace with some functions. it also has a function named ´eval´ to evaluate the template contained in that namespace. there's not supposed to be anything wrong with that. but due to that false positive in jshint i'm not supposed to use that method. i can't rename it either like a local variable. i'm not the maintainer of that library.so i think that not warning about functions named `eval` and called like a method will solve the problem about libraries that define some functions named `eval` in a given namespace or a class. it shouldn't hurt the original purpose purpose of that warning (tracking usage of the global `eval` function and kick anyone using it) while still allowing most valid use cases.,negative
jshint/jshint,jshint,2013-07-31T12:43:56Z,and why do we need an option for it?shouldn't tabs always be counted as 1 character (for error reports)?i may miss the point. but i think this is a greater issue. jshint just can't count tabs easily because they are replaced with n space characters while lexing a source line (inherited from jslint).please provide test cases with your pull requests.,positive
jshint/jshint,jshint,2013-08-01T04:24:09Z,jshint -c jshit.json a.js. can't parse config filehelp!,neutral
jshint/jshint,jshint,2013-08-01T06:12:22Z,do you have a file `jshit.json`? (note the typo),neutral
jshint/jshint,jshint,2013-08-02T14:09:34Z,hmm. shouldn't this be renamed/symlinked so it's picked up by default when running `jshint` in this project's directory?,neutral
jshint/jshint,jshint,2013-08-03T00:26:43Z,thanks for the patch but i decided not to merge it at this time. i think introducing this option will cause us not to spend time on improving the check. i suggest using `/*jshint -w100 */` to hide the warning.,positive
jshint/jshint,jshint,2013-08-03T18:16:04Z,few issues here:- arrow functions break on `undef: true` because the argument is parsed as an identifier before the rest of the expression is parsed. not sure what the most elegant way to handle this is - some kind of lookahead for `=>`?- jshint is also expecting `"use strict"` in the body of arrow functions in `strict: true`. which seems bad. technically it makes sense. but i can't see anyone bothering with function-level use strict on arrow expressions in practice.i don't really think `globalstrict` has any impact on the undef issue. though of course it fixes the function-level use strict issue.,negative
jshint/jshint,jshint,2013-08-03T20:03:54Z,> some kind of lookahead for =>?the static semantics in the spec use a mechanism called _coveredformalslist_ (reparse a covered _expression_ using _formalslist_ as the goal symbol.) hope that's helpful> jshint is also expecting "use strict" in the body of arrow functions in strict: true. which seems bad. technically it makes sense. but i can't see anyone bothering with function-level use strict on arrow expressions in practice.is this the same expectation that jshint has for function expressions?,negative
jshint/jshint,jshint,2013-08-05T21:10:19Z,make all options enforcers. all options should be making jshint more strict while. when executed without any options. jshint should be as relaxed as possible. some options should be enabled by default to make it useful in a `npm install jshint -g && jshint myfile.js` use case.,positive
jshint/jshint,jshint,2013-08-07T03:29:38Z,i was wrong: by default. `quotmark` is set to `true`. in which case either type of quote mark is accepted as long as it is consistent throughout the file. `quotmark` was set to `"single"` in my project's .jshintrc. but i didn't find it there because i was searching for a line with "quote".,negative
jshint/jshint,jshint,2013-08-08T20:12:14Z,+1 here too.,neutral
jshint/jshint,jshint,2013-08-09T21:57:50Z,while the per-directory `.jshintrc` file is a really powerful tool. this proposal actually soothes a massive painpoint that is _created_ by per-directory `.jshintrc` files. it can be jarring to maintain the _similar_ parts of many `.jshintrc` files. while the _differing_ parts are all we should really care about.antonkovalyov i hope you give this serious consideration :)_edit_ i suspect this will be extremely useful for jquery and all of its projects. as there are often several `.jshintrc` files in each of the jquery repos,positive
jshint/jshint,jshint,2013-08-12T15:39:26Z,the `--show-non-errors` option switches to a reporter that does show the warning:```$ jshint --show-non-errors test.jstest.js :    unused variables:        previousvalue(2).```,neutral
jshint/jshint,jshint,2013-08-14T06:58:34Z,please change jshint.js license. remove bad or evil. hi.could you please modify the jshint.js license to be a real mit license?the "the software shall be used for good. not evil." prevents library to be packaged in debian and maybe other repo where code should really be free of use (yes. even evil). and honestly. if someone wants to use it for evil... well i don't think he will care about the license  :-)thanksolivier,positive
jshint/jshint,coveralls,2015-06-13T19:15:37Z,travis-ci failed because of coveralls (#2378). can you restart it. please?,positive
jshint/jshint,coveralls,2015-06-14T08:20:08Z,i restarted but coveralls is still down. if you rebase on master. that has a commit in that allows travis to pass even when coveralls fails..,negative
jshint/jshint,coveralls,2015-06-29T08:58:00Z,closing as this had no effect on coveralls commenting.,neutral
jshint/jshint,coveralls,2015-06-29T12:07:06Z,coveralls is just really buggy. to be honest. i've found that this happens sometimes and the only way i've found to fix it is to disable the repo on the coveralls account and then re-add it,negative
s-panferov/awesome-typescript-loader,mocha,2016-10-01T10:10:03Z,adding a `types` entry in `compileroptions`  should solve the problem``` json  "compileroptions": {    "types": ["requirejs". "mocha". "jquery"].    ...  }```,neutral
riot/riot,sauce,2015-11-15T15:25:20Z,lmicra don't worry the saucelabs tests and the coverage are broken at moment we are on it. thanks for your contribution,positive
angular/angular.js,jasmine,2014-10-12T06:54:00Z,``` coffeescriptdescribe 'directive with faked service'. () ->  describe "providing you're own stub object". ->    beforeeach module ($provide)->      class fake        areyoustubbed: ->          "absolutely!"      $provide.service "demoservice". ['$log'. fake]      # the key bit was that the trailing function below was missing!      # after i added it back. it worked exactly how i would have expected!      ()->     describe "stubbed method". ->      it "should call the fake. not the real thing". inject (demoservice)->        expect(demoservice.areyoustubbed()).toequal("absolutely!")  describe "calling a real stunt double". ->    servicefake = jasmine.createspyobj "demo". ["areyoustubbed"]    beforeeach module ($provide)->      # i prefer dealing with coffeescript classes whenever i can. similar       # to the example above.       # remember when going this spy object route. you need to wrap the spy in a.      # function; which makes sense. but it wasn't needed above using the class.      $provide.service "demoservice". ->        servicefake      # and dont forget this guy!      ()->     describe "stubbed method". ->      it "should call the spy. not the real thing". inject (demoservice)->        demoservice.areyoustubbed()        expect(demoservice.areyoustubbed).tohavebeencalled()```,negative
angular/angular.js,standard,2016-04-21T19:34:37Z,narretz any time you're using a while loop. it's a possibility - loops should be avoided. specifically. your while loops rely on how `charat` and `splice` works - which may not be accounting for shim-corrected standard behavior.,neutral
angular/angular.js,sauce,2014-01-03T05:48:13Z,caitp i invited you to our saucelabs orgs. this invite will give you access to a ton of browsers you can use for interactive or automated testing.,neutral
angular/angular.js,karma,2013-10-14T17:34:03Z,end to end tests started via `grunt test` don't fail because even if you turn on csp in the web server. the webserver is proxied by karma. which doesn't preserve the csp headers.,negative
angular/angular.js,karma,2013-10-16T23:18:08Z,ng-scenario: how to avoid using mock for external service . i'm using ng-scenario with karma to do e2e testing.the page i'm testing loads a script from an "external" service. but ng-scenario blocks the request to the external service. i may use mocks to solve it. but i dont' want to use it because i want to test the entire page with the script from the external service loaded.is there possibility to do this?,negative
angular/angular.js,karma,2013-10-22T16:51:50Z,make it possible to disallow overwriting services set via $provide. i have a couple of services with external dependencies that do some initialization. i didn't want to create `init` methods; services should initialize themselves when injecting for the first time.the problem is i want to be able to mock some of dependencies of such modules which is not possible currently. take the following code in `karma` tests:``` javascriptdescribe('module tempmodule'. function () {    'use strict';    beforeeach(module('tempmodule'));    beforeeach(module(function ($provide) {        $provide.value('dependency'. function () {            console.log('we have mocked the dependency!');        });    }));});```if i execute code like that. it's already too late since the `tempmodule` module already initialized and used the `dependency` service. if i move the block with `$provide` above the block initializing the `tempmodule` module. i get nothing as well since the `tempmodule` module overwrites those values anyway.there needs to be a way for `$provide` to protect its injections from being overwritten. perhaps a flag? without it i'm forced to do ugly manual `init` methods to be able to test the module at all.,negative
angular/angular.js,karma,2013-10-24T13:05:15Z,i am trying to test the rest end points. that is fire off http calls to real server and then verify the response. i wonder if karma + unit tests is the right approach to do so ...,neutral
angular/angular.js,karma,2013-10-26T10:34:29Z,same problem for me. i'm trying to test a directive where i mock the api request but i want the test to load the template. as `passthrough()` is not accessible. tests does not work.,negative
angular/angular.js,karma,2013-10-29T22:05:22Z,docs(tutorial): add instructions to install karma plugins. i followed the tutorial and couldn't make karma run in the second step. so i figured out that i needed a `npm install` to get karma plugins. i couldn't find instructions about it in the tutorial. so i added it to the first page.,negative
angular/angular.js,karma,2013-10-30T21:06:23Z,landed as e53e2c2d58dc8ae2cb644e4dea86c2fef4dfa41c,neutral
angular/angular.js,karma,2013-11-03T18:51:06Z,ahah!  i reinstalled the karma modules on windows and this now fails.  it seems to me that the jasmine `_equals` function has changed so that it no longer matches equivalent arrays if one has had extra properties attached - in this case `$promise` etc.so it looks like you fix is needed.  please send in a pr or i will fix it up myself.cheers,negative
getsentry/sentry,eslint,2016-02-29T04:33:04Z,enable react/prop-types eslint rule; add missing proptypes. this adds an eslint rule requiring everyone to specify `proptypes` for each react component.specifying prop types adds run-time prop validation that helps locate and eliminate bugs. this checking is only done in development; the code is stripped in production builds.we were really inconsistent in our use of specifying them. so adding this rule will make sure we always specify prop types going forward.,negative
getsentry/sentry,eslint,2016-02-29T04:34:05Z,> this branch has conflicts that must be resolvedglhf rebasing,neutral
getsentry/sentry,eslint,2016-02-29T04:39:39Z,:+1:,neutral
getsentry/sentry,codecov,2016-05-12T16:36:33Z,lower threshold for codecov to 0 to make pulls pass,neutral
getsentry/sentry,codecov,2016-05-12T16:38:48Z,:tada:,neutral
istanbuljs/istanbuljs,istanbul,2017-09-15T17:46:13Z,npm install error in root directory. lerna err! execute error: spawn yarn enoentlerna err! execute     at notfounderror (c:\users\rpang27\desktop\github\istanbuljs\node_modules\cross-spawn\lib\enoent.js:11:11)lerna err! execute     at verifyenoent (c:\users\rpang27\desktop\github\istanbuljs\node_modules\cross-spawn\lib\enoent.js:46:16)lerna err! execute     at childprocess.cp.emit (c:\users\rpang27\desktop\github\istanbuljs\node_modules\cross-spawn\lib\enoent.js:33:19)lerna err! execute     at process.childprocess._handle.onexit (internal/child_process.js:215:12)lerna err! execute  callback with errorlerna err! execute  { error: spawn yarn enoentlerna err! execute     at notfounderror (c:\users\rpang27\desktop\github\istanbuljs\node_modules\cross-spawn\lib\enoent.js:11:11)lerna err! execute     at verifyenoent (c:\users\rpang27\desktop\github\istanbuljs\node_modules\cross-spawn\lib\enoent.js:46:16)lerna err! execute     at childprocess.cp.emit (c:\users\rpang27\desktop\github\istanbuljs\node_modules\cross-spawn\lib\enoent.js:33:19)lerna err! execute     at process.childprocess._handle.onexit (internal/child_process.js:215:12)lerna err! execute   stack: 'error: spawn yarn enoent\n    at notfounderror (c:\\users\\rpang27\\desktop\\github\\istanbuljs\\node_modules\\cross-spawn\\lib\\enoent.js:11:11)\n    at verifyenoent (c:\\users\\rpang27\\desktop\\github\\istanbuljs\\node_modules\\cross-spawn\\lib\\enoent.js:46:16)\n    at childprocess.cp.emit (c:\\users\\rpang27\\desktop\\github\\istanbuljs\\node_modules\\cross-spawn\\lib\\enoent.js:33:19)\n    at process.childprocess._handle.onexit (internal/child_process.js:215:12)'.lerna err! execute   errno: 'enoent'.lerna err! execute   code: 'enoent'.lerna err! execute   syscall: 'spawn yarn'.lerna err! execute   killed: false.lerna err! execute   stdout: ''.lerna err! execute   stderr: '\'yarn\' is not recognized as an internal or external command.\r\noperable program or batch file.\r\n'.lerna err! execute   failed: true.lerna err! execute   signal: null.lerna err! execute   cmd: 'yarn install --mutex network:42424 --non-interactive'.lerna err! execute   timedout: false },negative
istanbuljs/istanbuljs,istanbul,2017-09-23T22:11:35Z,bcoe thank you for the feedback. yeah. i also wonder why ```$$cov_*``` is inherited from the old istanbul where new istanbul is using ```__coverage___```. it seems that ```$$cov_*``` is only used under istanbul-api which is not used by nyc.as to the coverage drop. i plan to work on it this monday. will update any findings here.,negative
DefinitelyTyped/DefinitelyTyped,standard,2016-10-30T10:55:21Z,i like where this is going! looking forward to the end of `unable to resolve signature of class decorator when called as an expression.` errors.,negative
DefinitelyTyped/DefinitelyTyped,standard,2016-10-31T15:59:14Z,i did some quick tests using a couple different import methods.both `const auth0lock = require('auth0-lock')` and `import auth0lock = require('auth0-lock')` currently break giving a typescript error of `uncaught typeerror: auth0lock is not a constructor(…)`. importing using `import auth0lock from 'auth0-lock'` works but gives the a typescript error of `module '"auth0-lock"' has no default export.`.implementing this suggested typings update allows use of the standard `import auth0lock from 'auth0-lock'` in my environment without a typescript error.,negative
angular-ui/ui-mask,karma,2016-01-08T21:02:21Z,ahh very interesting. that sucks :( we can just use the sauce-connect-launcher plugin npm module manually within the gulp task. also. i believe you can use `run-sequence` to get around protractor/karma killing the tests to earlyalso. i'm very :+1: on integration tests but i'm curious why we can't just do this at the unit level?,negative
Cloud-Automation/node-modbus,standard,2017-09-12T06:31:48Z,so . i am think about that . should we try catch those  case(unrecognizable package). and  emit an ```error``` event instead of close the socket?  so . application can handle those ```nonstandard modbus device``` by itself.,negative
Cloud-Automation/node-modbus,standard,2017-09-12T07:35:54Z,yes. keep-alive package is not the cause of the error. because it's not delivered to application layer. i our case . those custom heat beat package from the third-party device lead the error.  and it is ```enough data transmitted```. however it's not a standard modbus message.  as u see in the screenshot.,negative
