ashiina/lambda-local,mocha,2017-08-08T02:23:19Z,i do find the error log quite easy to understand.```lambda category handler should return the correct number of categories: ```mocha stuff...beginning of the lambda-local logs...```error: errorerror: ------```an error has occurred.```assertion {  __flags:    { ssfi: [function: proxygetter].     lockssfi: undefined.     object: 8.     message: null } }```error log.end of lamba-local logs.```  √ lambda category handler should return the correct number of categories: 8ms  √ color lambda should return a list of colors: 4ms  2 passing (19ms)```end of mocha logs.lambda-local has only also printed the error that happens during the execution of your handler. `err`. before passing it to the callback.have you tried to print `err` and see if it's empty or not ?what is weird is that your test pass...,negative
redux-saga/redux-saga,eslint,2018-06-11T16:13:42Z,i've removed the unnecessary `return` keywords and turned off no-extra-semi eslint rule.,negative
jprichardson/electron-mocha,mocha,2017-07-24T16:11:54Z,the reason for `--require-main` is to run as early as possible (to allow modifications before electron's `ready` event). that's why it is loaded before all other mocha options. i'm inclined to leave it this way. but what is the reason for using `--require-main` instead of `--require` in your case?,neutral
jprichardson/electron-mocha,mocha,2017-07-24T18:04:53Z,it's the same as in 'regular' mocha: it runs your code before the tests start in the process in which mocha runs. so by default. you'd use `--require` as you would in mocha.`--require-main` is for special situations where you need to run something in main either before the ready event. or if you're testing in `--renderer` but still need to run some code in main.,neutral
ramda/ramda,mocha,2015-05-31T03:47:18Z,indeed not :-/ i just run mocha.edit: fixed.,neutral
request/request,standard,2018-02-23T18:44:34Z,i would be interested in a progress indicator for formdata uploads with attached files.,positive
request/request,karma,2015-11-20T20:06:42Z,simov i'm don't quite understand what the issue you're referencing (#1629 webpack karma config) has to do with this issue?,neutral
request/request,karma,2015-11-20T21:10:53Z,webpack karma config have to do with the fact that if we had tests for wepack we could have prevented this bug.so. i though if you are using webpack. then you may want to contribute to make its support first class citizen here.,positive
node-inspector/node-inspector,mocha,2014-06-14T03:47:26Z,can't create breakpoints when in a "[vm]" file. i use mocha to run tests using it's `--watch` argument so that i can keep a node-debugger session open as i make changes to the code. when the code changes. mocha reloads and reruns the tests. when it hits a breakpoint node-inspector shows the file that changed in a new tab with a label that starts with "[vm]" (eg. "[vm] basecontroller.js 497"). this works great. except for the fact that i can't set breakpoints in this new tab.is this expected behaviour? is there any way we can avoid this. because it makes debugging quite cumbersome.i should add as well that we're using traceur to transpile our source code when it's `require()`ed.,negative
node-inspector/node-inspector,mocha,2014-06-16T13:32:05Z,this is in enhancement list - #187,neutral
grevory/angular-local-storage,karma,2015-01-09T07:46:42Z,i'm not sure why the ci build is failing here.grunt karma:unit failsbut karma start test/karma.conf.js passes.,negative
electron-userland/electron-download,standard,2017-03-13T20:23:45Z,any update on this?,neutral
electron-userland/electron-download,standard,2017-03-13T20:26:25Z,kevinsawicki ping,neutral
electron-userland/electron-download,standard,2017-03-26T18:53:59Z,kevinsawicki could you please review this again?,positive
electron-userland/electron-download,standard,2017-03-27T16:25:11Z,> could you please review this again?i'm not a huge fan of moving a directory each time this runs. other apps or libraries could be using `~/.electron` and it would seem confusing and hard to track down why this directory is disappearing each time you `npm install electron`.could we instead just use `~/.electron` as a fallback location if the file isn't in the new cache location and write any new files to the new location?that way it would be backwards compatible still but we wouldn't have to worry about moving directories around.,negative
electron-userland/electron-download,standard,2017-03-27T16:27:12Z,it also looks like there are conflicts here as well that need to be resolved.,positive
electron-userland/electron-download,standard,2017-03-29T14:11:55Z,sounds good to me. will remove the migration code and when i have some time later this week i'll add the fallback logic.i don't want to be pointing fingers and get negative but would really like to get this off my chest: the migration of the directory was suggested to me and i spent a lot of time getting that working and covered by a test. solving the merge conflicts is something that happened multiple times now on this pr because of the slow responses. overall it would be beneficial for 'other' contributors if core contributors are on one line.,negative
electron-userland/electron-download,standard,2017-03-30T10:28:35Z,thank you for your reply zeke. i just added some fallback code all tests are passing now!,positive
electron-userland/electron-download,standard,2017-03-30T22:48:54Z,thanks for this siilwyn. apologies for the mixed signals. and appreciate the resiliency,positive
electron-userland/electron-download,standard,2017-04-02T08:12:14Z,nice to see this getting merged! :),positive
elastic/kibana,mocha,2015-09-17T23:06:51Z,w33ble it'd be good to integrate eslint-mocha-plugin in the first place. it has that `no-exclusive-tests` rule which is a good one since we kind of rely on `.only` to debug individual tests. they should throw a lint error just to ensure they don't get committed.,positive
elastic/kibana,selenium,2016-09-29T20:08:57Z,tests pass locally. trying to re-run them but i'm not sure if jenkins test this runs the selenium tests,neutral
winstonjs/winston,mocha,2018-09-09T05:54:34Z,add handlerejections support. adds #921 however. needs some work because. although this seems like it should work. i don't think the tests are right since no log is created in fixtures.it almost feels like it's silently not working. but i can't figure out how to get past mocha's "make sure your promise resolves" in order to test that it rejects. (and handled by winston)hope this is a good starting point for someone. leaving the wip tag to indicate it shouldn't be merged without double-checking the testing.,positive
winstonjs/winston,mocha,2018-09-21T22:26:25Z,thanks for this pr!  looks very nice!   folks have wanted this feature for a while.re: tests. do you have e.g. a plain node.js file you or i can run to see if this works or not (i.e.. outside of mocha or any other test frameworks)?  i can take a look at the mocha stuff but it would be helpful to have some starting point for testing.  thanks again for your work on this!,positive
Automattic/node-canvas,standard,2017-05-04T17:58:56Z,i'm a fan of this. is the only part of the api that gets funky `getimagedata`. `putimagedata` and `createimagedata`. where the bytes-per-pixel changes from the html canvas standard's 4bpp? while we could normalize the `imagedata.data` properties to always be 4bpp. that seems to defeat a lot of the purpose. since this would be a non-standard api. it seems reasonable to expect the user to be aware of this difference. i'd also advocate adding a property to imagedata instances to indicate the bits per pixel.,neutral
Automattic/node-canvas,standard,2017-05-04T20:34:30Z,backends support was merged in master just this morning. so this could be done fairly easier. one of the first backends i want to port from my previous pull-request is fbdev. and it has support for several color depths. regarding to the api. afaik linusu was pretending to remove the not-standard ones from the canvas object. so probably it would work on the fly with 4bpp independently of how it works internally and/or add backend specific functionality on each one of the backends objects. i think this is the most clean api we could work with.,neutral
dherault/serverless-offline,mocha,2017-12-03T20:34:44Z,would this work:`sls offline —exec “mocha”`(assuming `mocha` as test runner),neutral
benderjs/benderjs,mocha,2015-08-18T12:09:40Z,either i do not understand what idea grzegorz had or this is not a bug in bender core code. i am not exactly sure what grzegorz meant by "unified among all test frameworks".this bug is actually connected with bender- adapters. like bender-mocha. bender-yui. etc. on results screen. bender displays what has been passed to it throught adapters. while adapters get their data from test frameworks. there is nothing we can do in bender code. i will open appropriate issues in those repositories.i am leaving this issue open until all our adapters are tweaked.,negative
benderjs/benderjs,mocha,2015-09-08T09:38:32Z,this is mocha's thing.if you want full stack in errors you have to put this in bender.js configuration:```mocha: {    fulltrace: true}```since this resolves error number 2 (and had to be changed in cke5) and error number 1 is connected with cke5. i am closing this issue.,negative
benderjs/benderjs,mocha,2015-09-08T09:58:40Z,i can get behind it. still. this is benderjs-mocha issue.,neutral
Azure/autorest,standard,2017-06-19T15:47:10Z,content type overrides for streams. as specified in more detail in `samples/test/stream-with-content-type/readme.md`. there are 2 orthogonal fixes in this pr:- make c# generator not fail for `content-type` header param. and actually use it if the body type is `stream` (trivial to enable for other body types. but saw no point so far! if you pass json. it's not gonna be xml...)- provide smart defaults for header param named `content-type`. namely. if you haven't specified an enum on it. it inherits the `consumes` section. this behavior enables deduplication of data in the openapi definition and is no violation of the openapi standard... since `content-type` parameters are really to be ignored.,negative
Azure/autorest,standard,2017-06-19T16:18:28Z,probe. as specified in more detail in `samples/test/stream-with-content-type/readme.md`. there are 2 orthogonal fixes in this pr:- make c# generator not fail for `content-type` header param. and actually use it if the body type is `stream` (trivial to enable for other body types. but saw no point so far! if you pass json. it's not gonna be xml...)- provide smart defaults for header param named `content-type`. namely. if you haven't specified an enum on it. it inherits the `consumes` section. this behavior enables deduplication of data in the openapi definition and is no violation of the openapi standard... since `content-type` parameters are really to be ignored.,negative
airbnb/javascript,eslint,2017-03-15T06:57:38Z,christianbundy yes. please do rebase it down to one commit :-) please also prefix the commit message with `[eslint config] [base] `. thanks!,positive
airbnb/javascript,eslint,2017-03-16T01:07:07Z,the next release of eslint-config-airbnb-base. and likely eslint-config-airbnb. will include this loosening of no-param-reassign.,neutral
airbnb/javascript,eslint,2017-03-21T18:19:25Z,"creates extra garbage" is a memory concern. and in a memory-managed language. that should be none of the programmer's. create a new object on every iteration. which makes the *reducer* pure (as well as the overall `reduce`. which is pure in both cases).however. `ignorepropertymodificationsfor` is already enabled in the next release of `eslint-config-airbnb-base`. so if your accumulator is named one of the things it's enabled for. it will be allowed.,negative
airbnb/javascript,eslint,2017-03-27T17:03:15Z,milo- is this on the command line. or in an editor? are you running a local eslint. or a global one?,neutral
airbnb/javascript,eslint,2017-03-27T20:23:33Z,ljharb it looks like you're right. i was able to fix this by using `yarn upgrade` for all of our existing eslint plugins - `yarn upgrade eslint-plugin-import eslint-plugin-filenames-suffix eslint-plugin-jsx-a11y eslint-plugin-babel eslint-plugin-react eslint-plugin-standard`. then delete the yarn.lock file and rerun `yarn`.  i'm not sure if this is a bug with `yarn` or just a limitation that we need to account for.  `¯\_(ツ)_/¯`,negative
airbnb/javascript,eslint,2017-03-28T04:26:57Z,your eslint is out of date. if you use the install command in the readme. it will install the proper peer dependencies.duplicate of #1091. #1344. etc,neutral
airbnb/javascript,eslint,2017-04-04T08:59:32Z,jackkainov i editied my comment after you commented. but i already have the latest eslint. :smile:,positive
airbnb/javascript,eslint,2017-04-04T17:43:52Z,your eslint is out of date. if you run `npm ls` you will see the error.run the install command in the readme to properly update peer deps.,neutral
airbnb/javascript,eslint,2017-04-04T17:54:59Z,the issue is that eslint was not up to date.we do not consider a peer dep update a breaking change; if you install the package using the command in the readme. you'll get the updated peer deps; similarly. if you `npm install` and have everything properly specified with a `^` semver range (not with `~`. which does not upgrade minors. only patches). `eslint` will always be updated correctly.there's nothing to fix here.,neutral
airbnb/javascript,eslint,2017-04-04T19:01:39Z,`npm prune` is supposed to remove everything that's not in `package.json` - i'm not sure where any of those pruned dependencies come from. but if any of them are peer deps of any of your *other* deps (or of. perhaps. eslint-plugin-import) and not in your package.json. then that would cause this.,neutral
airbnb/javascript,eslint,2017-04-04T21:10:03Z,are you sure you're running the local eslint and not a global one? how are you running eslint? is it on the command line or in an editor?,neutral
airbnb/javascript,eslint,2017-04-04T22:28:47Z,that's just an npm bug then. you can certainly make a pr to eslint-plugin-import to remove the dev dep entries.,neutral
airbnb/javascript,eslint,2017-04-06T01:17:00Z,nope. you just don't have an up to date eslint. if you run `npm ls` you'll see that eslint is not updated properly; if you run the install command in the package readme. you'll ensure all the peer deps are correctly loaded in your package.json.,neutral
airbnb/javascript,eslint,2017-04-06T01:35:15Z,thanks for the contribution!i'm aware. but `.eslintrc` will likely never be removed. and i believe it's better to keep the long-standard rc name than to pick an extension. i prefer to continue recommending `.eslintrc`.,neutral
airbnb/javascript,eslint,2017-04-07T09:46:47Z,hi all.i've been through many of the issues on this repo. and could not find what i'm looking for so i'm going to leave my question here. i have this rule in my `.eslintrc.js``'import/no-extraneous-dependencies': ["error". { devdependencies: true. }].`but is still giving my a bunch of errors. all of them like this one` 1:1  error  'ember' should be listed in the project's dependencies. run 'npm i -s ember' to add it  import/no-extraneous-dependencies`any help would be appreciatedthanks in advance,negative
airbnb/javascript,eslint,2017-04-07T17:37:08Z,willibaur a new issue on eslint-plugin-import is the appropriate place to file that.,neutral
paulmillr/es6-shim,mocha,2014-06-10T18:19:59Z,i think we can use self.i don't know exactly how to test it in mocha.under node-webkit we have global and window context. scripts running under window.result: es6-shim will patch global instead of window.,neutral
paulmillr/es6-shim,mocha,2014-06-30T06:04:38Z,test: use promises-es6-tests for additional promise tests. the promises-es6-tests suite is a spin off of work that i did for getify 's getify/native-promises-only module.eventually the goal with the tests is to convert them to test262 format and submit them for review and inclusion in test262 for ecmascript.at present they are a set of tests in mocha. using a style and runner very similar to promises-aplus (in fact. stolen from promises-aplus/promises-tests ). but covering es6-draft-specified features such as promise.all. promise.race. etc.es6-shim promises pass all the tests currently in promises-es6-tests./cc ljharb,positive
paulmillr/es6-shim,mocha,2014-06-30T17:39:39Z,this passes for me on the command line. but it'd be nice to have a way to also test it in `test/index.html` - when i add the script tag. it fails because of the "require". so it'd likely need to be browserified.,negative
paulmillr/es6-shim,mocha,2014-06-30T19:48:00Z,i will look into that; i only tested from command line and didn't thinkabout the browser tests.[edited to remove email cruft],neutral
paulmillr/es6-shim,mocha,2014-07-01T20:24:32Z,added a `bundle/promises-es6-tests.js` to my package. and included it in both kinds of browser tests.  verified that the tests run in browser.still passes on command line.no longer uses caret in package.json.,neutral
paulmillr/es6-shim,mocha,2014-07-01T20:37:13Z,smikes continues to be a test-suite rockstar!,neutral
paulmillr/es6-shim,mocha,2014-07-02T05:56:17Z,i checked this pr out. `npm install`ed. and the path `node_modules/promises-es6-tests/bundle/promises-es6-tests.js` didn't exist - so it didn't load in the html file.,negative
paulmillr/es6-shim,mocha,2014-07-02T16:18:25Z,the ci failure is: collections set has an iterator that works with array.from works with the full set:i don't see how that's related to the change i just pushed.  any ideas?,negative
paulmillr/es6-shim,mocha,2014-07-03T09:13:53Z,yes. that seems to be a flaky test. i've opened #268 to track that.,neutral
dowjones/fiveby,selenium,2016-02-08T04:12:11Z,added. need to publish them,neutral
chaijs/chai,mocha,2014-01-07T14:46:09Z,closing in favour of visionmedia/mocha#1065,neutral
apache/cordova-plugin-inappbrowser,eslint,2018-08-01T06:22:55Z,brodybits thanks for checking again. the important change is adding `_blank` to `window.open`. which was not present on my fork's `master` yet (but added to the docs in this pr). i'll create a pr for your test app with all changes needed to make it work.also. i'll look into the eslint output.,neutral
apache/cordova-plugin-inappbrowser,eslint,2018-08-03T07:24:44Z,thanks wvengen for the update. fixing the eslint warnings. and fixing the alert calls. i will probably need 1-2 weeks to take another look. apologies for the extra delays.,positive
velesin/jasmine-jquery,jasmine,2014-08-20T12:05:10Z,jasmine dom testing . hi all.i am facing issues in writing test cases for dom elements using jasmine.my function is:function sample (event){$('#select').dropkick('reload'); }please provide me steps to test the above function using jasmine-jquery.jsthanks in prior.,neutral
velesin/jasmine-jquery,jasmine,2014-08-20T23:18:56Z,hey kiruthikakumar. do you know what you'd specifically like to test about this function? what do you expect to happen after calling `dropkick('reload')`?,neutral
velesin/jasmine-jquery,jasmine,2014-08-21T04:00:59Z,hi mrjoelkemp  i need to check whether dropkick reload is called or not,neutral
velesin/jasmine-jquery,jasmine,2014-08-21T16:29:05Z,+1good library! i'd like to see it in npm,positive
velesin/jasmine-jquery,jasmine,2014-08-22T14:54:35Z,the name `jasmine-jquery` already taken by dkastnerdkastner. you keep fork of this repo in npm. please update it or provide rights to this repository owner,neutral
velesin/jasmine-jquery,jasmine,2014-08-22T15:01:06Z,it makes no difference what is the name of the library. call it `velesin-jasmine-jquery`.,neutral
velesin/jasmine-jquery,jasmine,2014-08-22T15:03:12Z,i will remove my package,neutral
velesin/jasmine-jquery,jasmine,2014-08-22T15:05:08Z,unpublished!,neutral
velesin/jasmine-jquery,jasmine,2014-08-28T10:49:38Z,hi. i got same issue and reason was that js files was loaded in wrong order. broblem was that jasmine-jquery was loaded before jquery and caused that $ was missing (undefined).,negative
velesin/jasmine-jquery,jasmine,2014-08-28T16:06:44Z,tohavebeentriggeredonandwith takes ages and fails.. hi jasmine-jquery team. i'm trying to evaluate the values of a triggered event. the `expect(event_spy).tohavebeentriggered()` function passes and if i  use the `expect("chart_extremes_changed").tohavebeentriggeredon(document)` instead of the `.tohavebeentriggeredonandwith` function. the test also passes.but with the `.tohavebeentriggeredonandwith` function it somehow tries to print out the whole document (which takes long time) and then it fails. i also tried to trigger events on some div's. but with the result. that the event isn't triggered and evaluated at all. am i using it the wrong way?```    it 'should set the extremes both min and max values from date class'. ()->      event_spy = spyonevent document. "chart_extremes_changed"      date_from = new date(2014. 7. 1)      date_to =  new date(2014. 8. 20)       chart.set_extremes date_from. date_to      expect(event_spy).tohavebeentriggered()                                                                                expect("chart_extremes_changed").tohavebeentriggeredonandwith(document.         min:date_from.gettime()        max:date_to.gettime()      )```i don't know if its really a bug. but i hope someone can help me with this.thanks,negative
velesin/jasmine-jquery,jasmine,2014-08-30T15:19:36Z,modify mock-ajax instructions in readme.md. hi:  jasmine-ajax support manually install and uninstall. so import fixtures doesn't have to call  `preloadfixtures` method.,neutral
velesin/jasmine-jquery,jasmine,2014-09-01T18:55:48Z,ok after some analysis. i found the problem for why it took so much time.the object i passed to the event was to big. and i think the comparison of it took to long.,neutral
gionkunz/chartist-js,jasmine,2016-01-21T22:11:49Z,hi there. polyfills should be included where required and not within the library itself. we also use es6-shim within our jasmine test fixture in order to have all array extras and function.bind but this should go as first script included within your project and not into chartist.,neutral
videojs/video.js,karma,2014-08-29T23:31:03Z,actually. those docs are now outdated. the karma config is already available and used. you should just be able to run `grunt test` or `grunt karma` with whatever browser you want to test in.,neutral
prettier/prettier,eslint,2018-04-17T14:45:09Z,we almost never add options. so i’d recommend convincing your team to disable the lint rule (check out `eslint-config-prettier` for an easy-to-use config that prevents conflicts with prettier).,positive
prettier/prettier,eslint,2018-04-19T17:30:55Z,imho the felixfbecker's proposal is quite useful. other tools like babel. jest. and eslint allows this kind of configuration. we use this approach to share common configuration between projects. the proposed workarounds are only applicable to the `prettier.config.js` file. i thinkg there's no current way to do the same using the `package.json` (or other json/yaml config files).+1 to reopen this issue :),positive
prettier/prettier,eslint,2018-04-19T19:57:07Z,lydell due to our specific needs we prefer  each and every project to have all its configuration stored in a single file (the package.json). our projects have several packages (over a dozen) and each one shares the same basic config (beware: not real package names xd):```"devdependencies": {    "shared-tools": "x.y.z"  }.  "babel": {    "extends": "shared-tools"  }.  "jest": {    "preset": "shared-tools"  }.  "eslintconfig": {    "extends": "shared-tools"  }```now we want to add some shared "prettier" overrides and it would be great to be able to do it the same way we do with other tools without having different config files.using the programatic approach would be my choice if i need to customize the config based on environment settings or stuff like that. but it's not the case.,neutral
prettier/prettier,eslint,2018-04-23T10:02:37Z,iydell "jsx always uses double quotes"is there any way to bypass it?,neutral
prettier/prettier,eslint,2018-04-23T10:23:56Z,not right now.,neutral
prettier/prettier,eslint,2018-04-25T10:05:45Z,i don't care either about the default. but i expect `"no-mixed-spaces-and-tabs": ["error"].` to result in no `smart-tabs` when using `eslint-config-prettier`. currently that is not the case. i keep getting spaces.,negative
prettier/prettier,eslint,2018-04-25T11:38:49Z,teameh prettier’s use of mixed spaces and tabs is not configurable. `eslint-config-prettier` is designed to disable conflicting rules. not to alter prettier’s behavior. we recommend removing all formatting-related rules from your eslint config.,positive
prettier/prettier,eslint,2018-04-27T18:03:23Z,code style is all about consistency. it doesn't need to "gain something" beyond consistency for it to be useful.still. using `avoidescape` in eslint seems like a good idea. and the correct resolution to this issue anyway.,positive
prettier/prettier,eslint,2018-05-02T06:20:13Z,lipis - i appreciate that you have an entirely valid and strong opinion here. it's quite disconcerting to see you treating such a big change with such little regard to its effect.this project is now used by a _lot_ of people. more than have happened to see a twitter survey. or thumbs-up any of your comments. changing any of prettier's behavior away from what is now relied upon by people should be carefully considered and have a process the community understands - or else prettier could be seen as an unreliable tool by users.---i'd also suggest when prettier implements behavior for a filetype. it does so following (at least by default) what the implementing team has put forth as a standard - and not what prettier's team feel is logical. in this case as i mentioned above. vue does have a standard - not just in some screenshots. but _eslint-plugin-vue_ (by default) will enforce this.my point being. **the zero-config standard of tools should align to best benefit users**. i feel this is the most logical rather than worrying about one style or another being considered logical.,negative
prettier/prettier,eslint,2018-05-05T21:35:08Z,typescript-eslint-parser leverages the typescript compiler. so most things are automatically supported (have their asts converted). it is not an apples to apples comparison,neutral
prettier/prettier,eslint,2018-05-07T14:11:50Z,in `prettier-eslint` we let prettier decide what parser to use. however consumers of `prettier-eslint`'s api is free to provide `parser` if they want.,positive
prettier/prettier,eslint,2018-05-07T15:31:41Z,there's also the "avoidescape" setting in eslint. which is pretty useful for readability. be it with single or double quotes.,positive
prettier/prettier,eslint,2018-05-07T17:01:57Z,extarys i'm not sure i understand your problem.. we don't have errors names when using prettier. we just reformat the code entirely. `eslint-plugin-prettier` compares the original to the reformatted code and prints what changed between them and show "kind of like" eslint errors.if using `eslint-plugin-prettier`. just run `eslint --fix` and eslint/prettier will reformat the code.,negative
prettier/prettier,eslint,2018-05-10T15:29:08Z,evilebottnawi it's compatible with eslint rule` 'arrow-parens': ['error'. 'as-needed'. {      requireforblockbody: true.    }]`,positive
prettier/prettier,eslint,2018-05-10T15:31:22Z,netoctone you can use prettier first and when use `eslint` for fix it. why not use this workflow?,positive
prettier/prettier,eslint,2018-05-10T16:34:02Z,floriferous kevin940726 fyi we now add a few more parenthesis. i don't know if that fixes your issue (i don't know what `eslint-plugin-no-mixed-operators` does) but i thought you should know.,negative
prettier/prettier,eslint,2018-05-10T18:30:19Z,while there are a lot of differing opinions in here. it seems like prettier could at least support eslint's `flatternaryexpressions` rule that mysticatea linked to.  this would would help for those (myself included) that prefer the style mvolkmann illustrated at the start this issue.,positive
prettier/prettier,eslint,2018-05-11T01:03:42Z,duailibe this is awesome! but unfortunately this not quite fit our need. we want more control to it so that it can pass the eslint rule configuration. afaik prettier doesn't support formatting it with custom options. `eslint-plugin-no-mixed-operators` just try to support the developers who are using both `prettier` and `eslint` and depends on auto-fixing of eslint after prettier formatting. it's a bit of advanced usage . thanks for the notification though. good work!,positive
docpad/docpad,standard,2015-04-19T05:31:12Z,consider it a step towards the "abstract all the things" milestone. but zearin has a point. modules can come standard especially if it's another notch of speed on our belts.,neutral
docpad/docpad,standard,2015-04-19T08:39:58Z,> modules can come standard especially if it's another notch of speed on our belts.a lot of thought has been put into bundled plugins - the conclusion has been that the issues are too high with it - instantly incompatibilities between sites can arise. and what happens if a deploy occurs and that plugin is missing locally? too difficult.we should treat it the same as we treat renderer plugins - very good docs encouraging its use.,positive
workshopper/learnyounode,standard,2017-09-24T20:21:45Z,looks like you upset the standard gods :o,negative
workshopper/learnyounode,standard,2017-09-25T05:48:34Z,nah. it's a simple error. run `standard` or `npm run standard`. you'll know.it's the `exercise` variable which is not constant. it changes.,negative
patriksimek/node-mssql,mocha,2016-05-23T19:34:04Z,ummm.. i haven't tested it. but from what it looks like your test starts running before your server is fully set up. `describe('test'` gets started before `app.get` can finish and start the server.put the server setup up in a `before` or `beforeeach` function. set the sql connection there and call `done` when full setup is done.,negative
cujojs/most,eslint,2016-12-13T14:38:10Z,apologies. i made this change in the github ui - i didn't think i needed to run eslint for such a trivial change.it seems an extraneous semicolon was the reason travis wasn't passing.i've removed it now - all seems good :)do you still need me to rebase or do anything else?,negative
thoov/mock-socket,mocha,2016-11-29T15:19:42Z,js:babel-register doesn't seem to this code. i get an error with default arguments. constructor(url. options = {}) {unexpected token =even if i use the require method. it's still es6 and still errors.i'm running mocha via:mocha --require babel-polyfill --compilers js:babel-register,negative
thoov/mock-socket,mocha,2016-11-30T06:23:06Z,let me take a look into this and see if i can reproduce it.,neutral
thoov/mock-socket,eslint,2016-11-21T09:07:41Z,upgrade nyc & eslint packages,neutral
caolan/async,mocha,2016-07-08T06:28:14Z,ohhh. thats a good point aearly we should test all the modules after we run the compile step. can we configure the `index.js` file mocha uses to test?,neutral
caolan/async,mocha,2016-07-08T19:16:55Z,`support/build.test.js`  is where we test the build right now.  it just does a quick smoke test to verify things seem okay in all the formats we support (single files. monolithic. es6).  if you want to beef up the testing of `dist/async.js` i'd do it there.otherwise. when working on the code. you'd have to run the  build before your ran the mocha tests. a bit of an annoyance.,negative
caolan/async,mocha,2016-07-08T20:51:02Z,i think it's overkill to run the tests on all the various ways we distribute it. (single file. individual modules. single es6 modules. es6 index. etc..)  i think if we verify the build puts thing in the right place. that's good enough. if one full suite of the tests passes.take a second look at `support/build.test.js` -- it makes sure things gets put in their right places.  i'd rather not overcomplicate our general mocha tests.,positive
JedWatson/react-select,uglify,2018-08-28T15:05:42Z,upgrade rollup and add size snapshot. size snapshot rollup plugin is able to provide info abouttreeshakability for both webpack and rollup.removed `uglify-es` which is dead project currently. uglify-js worksfine here.ignored all dependencies from node_modules in esm bundle by providinga function.,negative
nightwatchjs/nightwatch,jshint,2015-03-09T20:59:41Z,update globbing pattern to include subdirectories into linting process. with the current globbing pattern for _linting_ tasks in `gruntfile.js` all subdirectories are ignored.sadly including them will instantly fail the grunt task.```$ grunt  ... >> 161 errors in 64 fileswarning: task "jshint:tests" failed. use --force to continue.```beatfactor if you ok with it i'd open a _pr_ and take care of the new issues.. regards~david,negative
nightwatchjs/nightwatch,jshint,2015-03-10T15:30:05Z,sure.,neutral
nightwatchjs/nightwatch,mocha,2016-07-30T12:13:22Z,the `results` object is specific to the nightwatch runner and so it's not available when using mocha.,neutral
nightwatchjs/nightwatch,mocha,2016-08-08T18:47:04Z,+1 but would also love to see the mocha.grep() command added so we can run individual tests across multiple files.,positive
nightwatchjs/nightwatch,mocha,2016-08-09T22:49:22Z,this is an annoying bug.  my workaround is to try to run the test file by itself instead through the runner.  this normally gives me enough syntax to debug the issue.  once i get the error "describe" is undefined (since i use mocha). the test will run.  i shouldn't have to do that. but alas. coding...,negative
nightwatchjs/nightwatch,mocha,2016-08-14T22:13:20Z,i'm afraid not. nightwatch is not involved at that point anymore. the best you can do is to send the string that is in the `describe` by setting it in the `beforeeach` hook. like so:``` jsdescribe('some test'. function() {  var title = this.title;  beforeeach(function(client. done) {     client.options.desiredcapabilities.name = title;     done();  });});```,negative
nightwatchjs/nightwatch,mocha,2016-08-15T09:30:10Z,tags are a nightwatch specific feature and cannot be easily used with mocha. i'm afraid this is not something we're looking into adding for now.,negative
nightwatchjs/nightwatch,mocha,2016-08-15T09:33:29Z,tags are a nightwatch specific feature and cannot be easily used with mocha. i'm afraid this is not something we're looking into adding for now. the implementation here only deals with the bdd ui. but mocha has a number of interfaces which won't work.,negative
nightwatchjs/nightwatch,mocha,2016-08-17T21:33:57Z,this is a sample `nightwatch.conf.js`:```module.exports = (function(config) {  config.test_settings.mocha = {    "test_runner" : {      "type" : "mocha".      "options" : {        grep : /demo\stest/      }    }  };  return config;})(require('./nightwatch.json'));```,neutral
nightwatchjs/nightwatch,mocha,2016-08-24T06:22:28Z,this exist in the mocha-nightwatch module.,neutral
nightwatchjs/nightwatch,mocha,2016-08-24T06:23:22Z,this exist in the too old glob module used by mocha-nightwatch.,neutral
mashpie/i18n-node,mocha,2014-01-23T09:05:04Z,well. i _was_ a bit surprised that the `configure` calls from different files were invoked successively. it was my understanding that mocha tests are processed serially. but then again. the _tests_ are processed serially. the initialization code within the modules isn't necessarily.so a clean setup code for each test is a must (as i understand it).especially given that `i18n` exists as a global instance and successive `configure` calls always interact with that instance. at least that's what i understood. it was a bit confusing stepping through the code yesterday ;dsomething that i found really weird was the scope you can register to. like. when i pass `register:somescope` to `configure` and i _then_ call `__`. i get to `i18n[method].apply(request. arguments)` from the `applyapitoobject` setup. so the previously supplied `somescope` will become `this` in the following `__` invocation (and. thus. none of the own member variables of `i18n` will be available for access. `getlocalefromobject` will return `undefined`). `__` then calls into `translate`. but `translate` loses the `this` reference (just like `getlocalefromobject`) and is executed in global scope as well.i might not have analyzed it properly. but something weird is going on. if you enable logging and run the existing tests. there are several `no locale found - check the context of the call to __()` messages being logged.,negative
ember-intl/ember-intl,mocha,2017-03-10T09:46:09Z,fixing failing tests. recent changes within ember changed the behavior of how ember handles errors within testing.  this corrects the behavior until the fix lands either within ember or ember-mocha.,negative
angular-fullstack/generator-angular-fullstack,mocha,2015-06-23T15:31:11Z,i'm still ironing out some teething problems to do with tests running before the auth request returns a token. once i have a fully working solution. i'll set up a pr :)edit: i was running `grunt serve` and `grunt watch:mochatest` simultaneously. they appear to have been interfering as they reloaded on save. lesson learnt!,negative
angular-fullstack/generator-angular-fullstack,karma,2015-06-16T22:07:02Z,sure - happy for you to gun for it. i had been playing around with karma config to get es6 client tests working and have just wrapped up getting the changes into the generator.check it out if you'd like - they're sitting on kauabunga:pullrequest-feature-es6-babel-and-karmaseems to merge with daftmonk:master all good.,positive
heroku/heroku-kafka-jsplugin,standard,2017-06-27T19:57:57Z,maybe magic comments disabling the specific standard rule at the top of test files?,neutral
heroku/heroku-kafka-jsplugin,standard,2017-06-28T16:54:06Z,we went over this in planning. to expand on idan's comment. the consensus from the meeting: * thanks for submitting this! * we can't really want to spend time on rewriting stuff for linter tweaks right now * mixing assert / expect is confusing and bad * dirty-chai seems okay * can we disable this one check via comment or whatever configuration standard permits. if any. and revisit later?thoughts dickeyxxx? basically i think if you can either do dirty-chai instead of assert or just disable those checks for now. we're down with this.,positive
webpack/webpack,standard,2017-08-20T11:39:44Z,i don't used require. i used import directive from new lang standard. bundler simple load and copy this module. and wrap it in some like function. in result. bundler create two copy of one module with different names. which it create appending dollar sign. and system breaks. yes. webpack shows warning. but it message something like 'this may have problem on some operation system'. not that thing. are i'm waiting.,negative
webpack/webpack,standard,2017-08-28T09:31:52Z,are `react-hot-loader` incompatible with `module.hot.accept`? i've used this in the past. without a problem. and it was working a couple of days ago. anything that i can do to help with troubleshooting this on my end is greatly appreciated. i'm all out of ideas.if i can get a repo working i will include it. right now it's a really big app and i haven't had the time yet to cut down everything but i'm working on a repo. however. so far the repo isn't repoing. it's working which is annoying. if i figure it out i will share it.the exact warning message is the standard `the following modules couldn't be hot updated` and then it lists the file that i changed. specifically the `pages/home` file. that's all i'm getting. i have a vauge memory that it used to include more details but that is not the case.if there's anything i can try (besides working on the repo) on my end. anything i can do. i'm willing to do.,negative
webpack/webpack,standard,2017-08-28T09:37:25Z,> the exact warning message is the standard the following modules couldn't be hot updated and then it lists the file that i changed. specifically the pages/home file. that's all i'm getting.the not `only` (`--hot`  instead of `--hot-only`) should include more info in the error message.> react-hot-loaderit accepts all updates on component level. this way it doesn't bubble anymore and `accept("component". ...)` will never be called.,negative
webpack/webpack,eslint,2016-03-20T17:32:04Z,i'd like to know how to do this as well. i have a require that conditionally loads components based on attributes on dom nodes. webpack sees the require call and turns it into a pattern match. bundling every file in the components directory. i don't want to ignore that entire directory because i will require.ensure the components that will actually be on the page. i just want it to ignore that one line.something like a `// webpack-disable` comment. ala eslint. would be very useful.,positive
stealjs/steal,eslint,2018-03-09T00:49:04Z,setup eslint and fix lint issues in generated file. closes #1355summary:- the original jshint setup was not being used at all- the eslint command was only linting a specific rule- the only rule i wasn't happy to turn off was `no-cond-assign` but that `while (assignment)` pattern is used in a few places inside the loader and i didn't want to change that- since steal has a gazillion files. i decided to run the lint only on steal-sans-promises.js (no point on linting the promise polyfill)- the test script was changed a little bit to make sure steal files are compiled before the linter runs (and that the script that concatenates the files only runs once).- matthewp i swear i didn't sneak in any opinionated style rules in the eslint config :p,negative
stealjs/steal,eslint,2018-03-09T15:55:00Z,of course tests failed.,negative
prebid/Prebid.js,standard,2018-11-16T16:31:47Z,custom adserver targeting applied to other bidders. ## type of issuewe have custom adserver targeting for one bidder. for example.```pbjs.biddersettings = {    standard:{ … }.    bidder1:{        bidcpmadjustment : function(bidcpm. bid){ … }    }.    bidder2: {      alwaysusebid: false.      suppressemptykeys: true.      adservertargeting: [        {            key: “ix_pbmg".            val: function(bidresponse) {                return bidresponse.pbmg;            }        }. {            key: “ix_adid".            val: function(bidresponse) {                return bidresponse.adid;            }        }      ]    }}```### expected resultsbidder1 has standard targetsbidder2 has standard targets and custom targets### actual resultsbidder1 has standard targets and custom targetsbidder2 has standard targets and custom targets,neutral
prebid/Prebid.js,standard,2018-11-28T21:02:50Z,are there any consideration for just reading the actual dfp sizemapping like amazon hb solution is doing?  no need to define sizes anywhere else than in our standard dfp tags. the hb config reads the details from there.,neutral
babel/babylon,codecov,2017-06-17T17:12:08Z,maybe we should also turn of the codecov pr comments. they get really annoying:- it posts multiple times recently- the information is not useful and also available in the pr checks,negative
babel/babylon,eslint,2017-09-11T18:28:41Z,loganfsmyth thanks for sharing your thoughts. sorry for the delayed response.i definitely appreciate where you and thejameskyle are coming from with this. and it has been really useful for me to learn in this thread that the flow team has explicitly stated they are not open to aligning on things like this. that is vital context. we obviously haven't yet heard any official response from the typescript team on this idea. but if flow is not open to it. then it is effectively dead in the water.loganfsmyth at one point when (seemingly) addressing me (with the question `would you be able to dig into what makes you feel this way?`). you are quoting azz. so i won't attempt to answer that question as that seems to just be a mix-up.i will remove my objection to this pr and lead the efforts to accommodate the knock-on effects in `typescript-eslint-parser` and `prettier`.i would also love to see the flow nodes updated with a `flow` prefix.,negative
babel/babylon,eslint,2017-09-15T18:40:53Z,has this been released in `babel-eslint` yet? i'm still getting failures when spreading.,negative
nadbm/react-datasheet,coveralls,2018-03-07T00:22:23Z,i went ahead and added an example of using an sfc component as a cellrenderer (i think that was what you were suggesting?). but the coveralls job seems to have stalled (it started 16 hours ago). nadbm - do you have a way of restarting it? assuming it passes like before. are there any other changes you'd like me to make. or is it ready to merge?,neutral
nadbm/react-datasheet,coveralls,2018-03-07T07:39:07Z,thanks for the great pr astegmaiertypescript is fairly foreign to me so give me some time to properly review this. as for coveralls. i’m not too certain why it’s not picking up the change. i’ll try to initiate it manually.,positive
GeppettoJS/backbone.geppetto,sauce,2014-08-29T01:53:13Z,ok. now i am stuck.i installed everything for beautifying. testing and all locally only to find out that it might never work after all because a paid account with saucelabs might be required for testing. perhaps i'm wrong but i keep getting the following message:```=> starting tunnel to sauce labs=> sauce labs trying to open tunnel>> sauce labs tunnel disconnected>> could not create tunnel to sauce labswarning: task "saucelabs-mocha:all" failed. used --force. continuing.```and i read somewhere that account info must be entered in a config file for the tests to run.i want to be able to test (i did write one and i want to write the others) but i also want to be able to test without polluting the environment (and so publicly fail!) with pull requests that are marked as not passing some test.so what exactly is the procedure for these tests? where can i run them (the ones i modify. not the ones i'm already failing!) to test them before submitting them?_update: (3 hrs later...)_i now linked my fork with a travis ci account and it seems that this might be a way to go. it does do testing. even though i haven't yet pushed any new tests to my fork... am i on the right track?anyway. i'd still be interested in running these tests locally. i seem to have all it takes. only the process trips on that saucelabs-mocha tunnel problem. anything i could do about this?,negative
GeppettoJS/backbone.geppetto,sauce,2014-08-29T20:35:22Z,yep... phpstorm actually. it baffles me that i just type 'grunt' at the command line and boom it works. while the ide's terminal is totally unable to do anything useful. i also found that if i install all the dependencies in the right directories as required by sauce.html and index.html. i can get a superb output in the browser. i don't know though why these web pages require the very same libraries from totally different folders. forcing one to duplicate many of them. i guess one is not expected to run them in the browser (rather letting node load them?),negative
pouchdb/pouchdb,eslint,2017-02-02T16:47:04Z,unfortunately it's failing eslint because of an error: `assign is not defined`. we recently switched to using regular `object.assign`. i'll make a quick change to your code to do so. and then the tests will be re-run. :),negative
pouchdb/pouchdb,eslint,2017-02-06T20:04:30Z,eslint allows improper spacing. braces. and gutter width. at the very least. our gutter should be 100 (used to be 80). right now it's not enforced. so our code has gotten too wide.also. forms like this are accepted:```jsif(foo){  bar();}```and:```jsif (foo) bar();```both should be disallowed.,negative
pouchdb/pouchdb,eslint,2017-02-06T20:05:18Z,to fix this. we would need to modify the `eslintrc` file to have the new conditions. and then modify the code anywhere that it fails the test.,negative
pouchdb/pouchdb,selenium,2014-11-29T11:47:12Z,get selenium chrome tests running locally. we only set up selenium. not chrome driver. i want to test chrome via selenium locally. we also have a whole bunch of selenium specific code in our repo that can be extracted so it can be reusedhopefully this can be the start of a project that i mention in "i would love to see a project wrap up selenium / chromedriver and possibly cordova / appium into a nice. well-documented module that installs and boots your browser(ish) platform of choice. ready to be driven by selenium tests."(ie i dont want to just add a bunch of code inside pouchdb that to support chromedriver),neutral
pouchdb/pouchdb,selenium,2014-12-01T09:38:18Z,daleharvey good idea. see #3095,neutral
pouchdb/pouchdb,jshint,2014-12-01T13:24:41Z,ack. jshint error,neutral
pouchdb/pouchdb,jshint,2014-12-06T22:54:12Z,this seems to be failing due to jshint. but i really like the approach. i'm +1 after jshint fixes and a green run. also squashing the commits would be super. :)calvinmetcalf could you comment on this "optional dependency" stuff? looks fine to me; users are at least warned about the lack of a `leveldown` dependency. although maybe we should `emit('error')` or something?,positive
pouchdb/pouchdb,sauce,2014-01-17T00:59:49Z,btw. i've also started noticing [this thing]( on various github projects.  if we stick with selenium. it might be a nice solution to our testing nightmare...,negative
pouchdb/pouchdb,sauce,2014-01-17T11:29:27Z,yeh was just meaning the obvious debugging things / space nits. not that importanthaving every request tunnel through a proxy between saucelabs and travis was just too unreliable. the tests would take > 20 minutes. travis would timeout. random tests would fail on almost every runi was happy when i thought we were getting a sanity check with firefox on travis. so want to get that enabled. then by the side i am looking at getting appium etc running locally. once they run locally can figure out how to deploy them to a ci. i was kinda getting excited about the sound of docker. but i want to get ie runningi may use a dedicated machine for it,negative
vlucas/frisby,jasmine,2014-12-10T16:19:54Z,bits1001 desaip01 in my setup i use something like that:node_env=test jasmine-node --config server <server_name> --config httptype http specs/in the code var server = process.env.server || "default serve",negative
angular/protractor,jasmine,2017-02-24T19:47:18Z,currently the grep option can be specified either through command line or jasminenodeopts options. but these are global setting for all the suites. i would like to have grep option per suite without listing the spec files again. i am already listing the spec files under specs?: array<string>; atribute in the config file. i do not want to list the spec files again under the suite. i just want to specify only tagname for each suite and protractor should auto populate the it blocks internally based on the suite name and grep option specified.,negative
angular/protractor,jasmine,2017-03-06T20:56:34Z,is there an eta on this?,neutral
angular/protractor,selenium,2016-02-11T12:52:41Z,i find it hard to understand what changes in selenium that caused this change in behaviour. could you give me a hint? is this somehow related to the fact that i have to wrap browser.removemockmodule() in a protractor.promise.controlflow().execute() if i want to add and remove mock modules in the spec? or is that an unrelated bug? any spec with addmock();...;operate browser;...;removemock() will see the removemock executed prematurely since its not executed in the flow. i'm a bit confused about this -- i find it hard to believe that it's a bug nobody's been hurt by. :/,negative
angular/protractor,selenium,2016-02-18T15:24:33Z,thanks a lot sallojusuresh . you made my day..one more thing i have to ask that is their any way to provide machine ip dynamically to the seleniumaddress,positive
angular/protractor,selenium,2016-02-18T19:53:20Z,```> [firefox #2]   message:> [firefox #2]     failed: no element found using locator: by.id("uploadfile")> [firefox #2]   stack:> [firefox #2]     nosuchelementerror: no element found using locator: by.id("uploadfile")> [firefox #2]         at new bot.error (c:\users\amcinerney\appdata\roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\atoms\error.js:108:18)> [firefox #2]         at c:\users\amcinerney\appdata\roaming\npm\node_modules\protractor\lib\element.js:674:15> [firefox #2]         at goog.async.run.processworkqueue (c:\users\amcinerney\appdata\roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\goog\async\run.js:124:15)> [firefox #2]         at process._tickcallback (node.js:366:9)> [firefox #2]     error> [firefox #2]         at [object object].elementarrayfinder.applyaction_ (c:\users\amcinerney\appdata\roaming\npm\node_modules\protractor\lib\element.js:380:21)> [firefox #2]         at [object object].elementarrayfinder.(anonymous function) [as isdisplayed] (c:\users\amcinerney\appdata\roaming\npm\node_modules\protractor\lib\element.js:78:17)> [firefox #2]         at [object object].elementfinder.(anonymous function) [as isdisplayed] (c:\users\amcinerney\appdata\roaming\npm\node_modules\protractor\lib\element.js:709:7)> [firefox #2]         at filespage.opendropzone (c:\newforma\rosetta\rosettaweb\rosettaweb.protractortest\common\pageobjects\files.page.js:191:25)> [firefox #2]         at filespage.addrandomfile (c:\newforma\rosetta\rosettaweb\rosettaweb.protractortest\common\pageobjects\files.page.js:216:8)> [firefox #2]         at object.<anonymous> (c:\newforma\rosetta\rosettaweb\rosettaweb.protractortest\files\files.deletefiles.spec.js:41:21)> [firefox #2]         at c:\users\amcinerney\appdata\roaming\npm\node_modules\protractor\node_modules\jasminewd2\index.js:96:23> [firefox #2]         at new wrappedctr (c:\users\amcinerney\appdata\roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\goog\base.js:2468:26)> [firefox #2]         at controlflowexecute (c:\users\amcinerney\appdata\roaming\npm\node_modules\protractor\node_modules\jasminewd2\index.js:82:18)> [firefox #2]     from: task: run it("1270130. delete button is shown when a file row is checked") in control flow> [firefox #2]         at object.<anonymous> (c:\users\amcinerney\appdata\roaming\npm\node_modules\protractor\node_modules\jasminewd2\index.js:81:14)> [firefox #2]         at attemptasync (c:\users\amcinerney\appdata\roaming\npm\node_modules\protractor\node_modules\jasmine\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:1916:24)> [firefox #2]         at queuerunner.run (c:\users\amcinerney\appdata\roaming\npm\node_modules\protractor\node_modules\jasmine\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:1871:9)> [firefox #2]         at c:\users\amcinerney\appdata\roaming\npm\node_modules\protractor\node_modules\jasmine\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:1898:16> [firefox #2]         at c:\users\amcinerney\appdata\roaming\npm\node_modules\protractor\node_modules\jasmine\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:1842:9> [firefox #2]         at c:\users\amcinerney\appdata\roaming\npm\node_modules\protractor\node_modules\jasminewd2\index.js:18:5> [firefox #2]         at goog.async.run.processworkqueue (c:\users\amcinerney\appdata\roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\goog\async\run.js:124:15)> [firefox #2]     from asynchronous test:> [firefox #2]     error> [firefox #2]         at suite.<anonymous> (c:\newforma\rosetta\rosettaweb\rosettaweb.protractortest\files\files.deletefiles.spec.js:38:2)> [firefox #2]         at addspecstosuite (c:\users\amcinerney\appdata\roaming\npm\node_modules\protractor\node_modules\jasmine\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:833:25)> [firefox #2]         at env.describe (c:\users\amcinerney\appdata\roaming\npm\node_modules\protractor\node_modules\jasmine\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:802:7)> [firefox #2]         at jasmineinterface.describe (c:\users\amcinerney\appdata\roaming\npm\node_modules\protractor\node_modules\jasmine\node_modules\jasmine-core\lib\jasmine-core\jasmine.js:3375:18> [firefox #2]         at object.<anonymous> (c:\newforma\rosetta\rosettaweb\rosettaweb.protractortest\files\files.deletefiles.spec.js:8:1)```,negative
angular/protractor,selenium,2016-02-19T15:18:40Z,are you able to successfully start selenium? what happens if you use `directconnect`?,positive
angular/protractor,selenium,2016-02-20T21:27:45Z,can you please post your protractor and your grunt configuration please.,positive
angular/protractor,selenium,2016-02-21T19:51:23Z,can you try setting all the keepalive settings to true,positive
angular/protractor,selenium,2016-02-22T03:06:20Z,thanks for your replies spikey. i tried by setting keepalive: true. still hitting the same issue.seems like a bug in the way protractor handles the webdriver during shrding.any other workarounds i can try?,positive
angular/protractor,selenium,2016-02-22T07:08:28Z,same here,neutral
angular/protractor,selenium,2016-02-23T05:49:05Z,thanks spikey. for assisting on this.i have few questions from other timeouts you mean?allscriptstimeout: .getpagetimeout: anddefaulttimeoutinterval: i would like to understand what you mean by?> the process running grunt,neutral
angular/protractor,selenium,2016-02-23T11:28:46Z,yes i mean allscriptstimeout and defaulttimeoutinterval. we run grunt on windows by starting a process (.net) and this allows for a process timeout which was timing out before the tests completed.    so however you run grunt. just make sure that you don't have any timeout is all i am saying.,neutral
angular/protractor,selenium,2016-02-23T19:06:40Z,alright. so it seems like timeout can be one of the factors to it. the only observation i can make about timeouts is that on the ci jenkins environment. the suites run quicker as compared to on my machine.does that mean i should be reducing allscriptstimeout  and defaulttimeoutinterval.its like if suite 1 finishes in 500 second on my machine. it finishes in 300 in ci.trying to play around with both times on my ci box. but cudnt work through yet...,neutral
angular/protractor,selenium,2016-02-24T09:43:32Z,issue seems to be jasmine-html-report report saurabh06 . can comment the code related to html-report on conf.js file and run it and also check that selenium server running port id is correct or not,neutral
angular/protractor,selenium,2016-02-24T14:57:56Z,unfortunately flakiness like this is pretty common in selenium testing suites. it can be any number of things in your application stack. an error in chromedriver. the best advice i can give is to try and isolate it down to the smallest case (so remove variables until you can reliably reproduce the issue).i'm going to close this because it's about debugging and not an issue with protractor core. i'd suggest following up on stackoverflow or gitter for help during the debugging process. thanks. and good luck!,positive
angular/protractor,selenium,2016-03-05T00:19:43Z,ok i know i was the one who tagged that issue as a feature request with prs plz. but. now that i see the changes - i'm worried about feature creep and command line option creep. what about making a custom chromedriver location? custom ie driver?`webdriver-manager` is intended as one simple way of downloading/starting up selenium. but it's doing nothing advanced. if someone wants a more personalized configuration. in my opinion. they should be just calling the standalone directly.am i missing a use case which makes this a particularly useful option to be able to change?,negative
angular/protractor,selenium,2016-03-05T01:14:26Z,as discussed. we will support the ability to override the config.json to download a different selenium jar file. both for `update` and `start`. will have the option to specify the `--seleniumversion`,neutral
angular/protractor,selenium,2016-03-05T14:27:41Z,i haven't seen any action on this in a while going to go ahead and close because i believe this is because selenium is not available on the host machine.willchen90 if downloading selenium through webdriver manager or running selenium yourself (and configuring protractor to use that instance) does not work let me know and i will re-open. thanks!,negative
angular/protractor,selenium,2016-03-10T06:40:23Z,it probably isn't because sometimes it hangs even when using remote selenium grid.,neutral
angular/protractor,selenium,2016-03-10T18:43:21Z,offline. we discussed two options- we can modify dgeni to work properly with the new es6 files- we can scrap our process of mining selenium-webdriver for docs. and instead just write our own for those functions. this has a big pro in that we can write our own examples using protractor syntax. the con is maintenance cost.,neutral
angular/protractor,jshint,2016-09-07T17:39:43Z,`mocha/lib_spec.js` fixes the jshint issue?,neutral
angular/protractor,jshint,2016-09-07T17:43:53Z,yeah. that was my bad. though. we should probably tell jshint es6 stuff is ok once node 6 is the lts.,neutral
cozy/cozy-ui,standard,2018-02-15T17:20:57Z,y-lohse we can't use `:only-child` or `:first-child:last-child` because text node doesn't count as a node.in this example…```jsx<button>   <svg />   text</button>```…as far as the dom is concerned. svg **is** the only child it has. it just ignores text nodes. there is absolutely no way of knowing what's inside unless you control it which is the purpose of the `icon` and `label` props. when we have this. we can be sure what would be the children and then use `:only-child`.as for you dropdown use case. i agree with ptbrowne. it think it should be a component on its own. `<button>` is only meant for standard `button`. this would be way out of its league. i don't think complicating things because they look a like is the best thing to do.and nothing forbids to use the same style on different components.,negative
patw0929/react-intl-tel-input,mocha,2017-02-27T08:14:56Z,refine the structure and build flow. * using webpack 2 now* replaced mocha with jest and enzyme* check lint before commit* support yarn* fixed some bugs......in this vacation.,positive
ripple/ripple-lib,mocha,2015-02-05T07:55:13Z,use mocha tap reporter only for travis ci,neutral
kennethlynne/generator-angular-xl,mocha,2014-11-26T13:15:27Z,mocha unit tests broken by hookfor anglar-xl:repository in app/index.js. ```this.hookfor('angular-xl:repository'. {    args: 'awesome'  });```commenting out the above on ~line 41 allows the tests to pass both locally and on travis.,positive
kennethlynne/generator-angular-xl,mocha,2014-11-28T19:01:26Z,fix for travis build issues in app index. fix for issue #145 mocha unit tests broken by hookfor anglar-xl:repository in app/index.js,neutral
Esri/esri-leaflet-geocoder,karma,2015-09-25T05:16:08Z,fresh clone on a new machine without `karma-cli` and tests ran fine.  whatever.,positive
webpack/webpack-dev-server,codecov,2018-01-24T14:40:39Z,byzyk > however. it might change some default functionality or expected behavior and thank you for pointing it out. but it's not the same as removing feature as a whole.should have major label (and will be in next branch. not in master).also need tests. `codecov/patch` failed.,negative
mozilla/nunjucks,jshint,2016-03-18T17:50:58Z,switch from jshint to eslint. some of the options currently used by nunjucks in `.jshintrc`. e.g. `quotmark`. have been deprecated by jshint because they don't concern code correctness. we should maybe have a look at [jscs]() which is specifically targeted towards code style issues. at first glance. "yandex" seems to be the builtin preset with the fewest errors but a custom one can be easily crafted.,neutral
mozilla/nunjucks,jshint,2016-03-18T17:55:31Z,yeah. i'd probably also prefer switching to eslint. which does both in a single tool.,neutral
systemjs/systemjs,uglify,2017-12-21T14:38:08Z,detect as esm module format if 'let' is used. does this make sense to do? threw me for a loop today when i couldn't uglify my module due to a dependency not having any explicit import/export statements leading to it not being detected as esm module-format.,neutral
systemjs/systemjs,uglify,2017-12-21T14:54:30Z,es2015 language features are not a good indicator for esm. because you can use `let` in cjs or amd. or just plain scripts if you only care about modern browsers (or node).,neutral
videojs/videojs-contrib-hls,karma,2015-02-12T20:06:43Z,you'd need to add it to both the `videojs-hls.html` and the `karma.conf.js` files in the appropriate place.,neutral
pouchdb/express-pouchdb,eslint,2017-02-15T13:36:05Z,use eslint instead of jshint,neutral
pouchdb/express-pouchdb,eslint,2017-02-15T17:40:46Z,cool. thanks!,positive
pouchdb/express-pouchdb,eslint,2017-02-15T17:45:43Z,092ec00f685880ad25c8a86569669510e10357d8,neutral
cerebral/cerebral,standard,2016-12-18T17:27:58Z,> "input. state. signal and string" are no longer exported in "cerebral/operators"> we do not support standard paths like "foo.bar" in connect and connect no longer takes a functionwill be kept with deprecation until release. and i would personally keep passing function as first argument> it now feels strange to have state.get('foo.bar') and input.bing inside actions. is there a way to use tags there ?i see your point. but there is no need in tags inside actions. tags just helpers to avoid creating actions or any other sort of callbacks. but in action we can just work with values and strings directly.,neutral
cerebral/cerebral,standard,2016-12-18T19:18:19Z,christianalfoni so using merge props will be the new gold standard for computed values in views?,neutral
datastax/nodejs-driver,eslint,2017-12-20T17:57:36Z,replace var with const / let. part of nodejs-406. its a large change set replacing occurrences of `var` with `const/let`.includes 2 new eslint rules: `no-var` and `prefer-const`.i would like to have this pr open for the least amount of time. to avoid rebasing with other changes.i'll do some quick benchmark tomorrow morning with node.js 6 to see if it has any significant impact.,neutral
datastax/nodejs-driver,eslint,2017-12-21T17:53:30Z,> neat that you could use eslint as a way to validate this. i also noticed that you can use it to make the changes for you (with --fix). did you end up using that or doing this all by hand?i realized that after 3 hours in (i was getting nowhere manually replacing). the `--fix` did its magic. there were a few hiccups regarding scope and closures (no variable hoisting with let/const) but it all went well from there.,neutral
datastax/nodejs-driver,eslint,2017-12-22T11:49:45Z,rebased. i'll wait for ci builds to merge it.,neutral
keystonejs/keystone,eslint,2016-03-12T10:40:15Z,epic work. lennyboyatzis - thanks!,positive
keystonejs/keystone,eslint,2016-03-16T02:21:54Z,what's the blocker here?,neutral
keystonejs/keystone,eslint,2016-03-16T02:22:25Z,lennyboyatzis i think `{ "allowsingleline": true }` makes sense in that case. i personally prefer it.,positive
keystonejs/keystone,eslint,2016-03-16T06:40:41Z,discussed w/ lennyboyatzis in person. we're going to bail on adding this eslint rule. i've come to think it's as much misdirection as clarification.,negative
mapnik/node-mapnik,standard,2015-06-17T20:37:05Z,this omission was intentional: standard practice is to consider instances of a mapnik.map as immutable. so you create them once / load an xml and after that you don't modify them. this makes async code predictably safe.if you are writing an app that creates layers one by one and exposes an interface to modify them in place (sounds like you are) then i recommend using your own structure to hold layers + styles and then creating a new mapnik.map and adding them lazily when you need to render.if you think the above is not feasible. happy to discuss more. however that is a pretty reliable and simple approach that i would recommend. loading maps from xml might sound "slow" but its actually been heavily optimized for this kind of case.,positive
bgentry/ember-apollo-client,eslint,2018-12-17T19:01:39Z,looks like eslint-plugin-ember is up-to-date now. so this is no longer needed.,positive
bgentry/ember-apollo-client,eslint,2018-12-17T19:01:40Z,looks like ember-cli-eslint is no longer a dependency. so this is no longer needed.,neutral
yeoman/generator-karma,karma,2014-02-15T17:50:06Z,shows for me in latest yo,neutral
atecarlos/protractor-http-mock,jasmine,2017-01-12T14:29:26Z,barroudjo is this the error you are getting?`failures:1) angular-loading-bar and protractor-http-mock should resolve data with loading bar  message:    error: timeout - async callback was not invoked within timeout specified by jasmine.default_timeout_interval.  stack:    error: timeout - async callback was not invoked within timeout specified by jasmine.default_timeout_interval.        at ontimeout (timers.js:365:14)        at tryontimeout (timers.js:237:5)        at timer.listontimeout (timers.js:207:5)`,negative
jamesarosen/ember-i18n,jshint,2015-07-10T15:59:37Z,fix config.js blueprint jshint. jshint complained about this.,negative
jamesarosen/ember-i18n,jshint,2015-07-10T16:53:35Z,good catch,positive
bitpay/bitcore,mocha,2015-04-07T18:27:12Z,in development. you can append `.only` to an `it` or `describe`. like so:```it.only('something'. function() {  // test});```you can also run just one file with:```sudo gulp install -g mochamocha test/somefile.js ```,neutral
cibernox/ember-basic-dropdown,eslint,2018-12-24T15:31:34Z,replce ember-cli-eslint by just eslint,neutral
electrode-io/electrode,karma,2018-10-18T18:51:16Z,load electrode dll for karma tests,neutral
electrode-io/electrode,karma,2018-10-19T20:07:09Z,fix dll loading for karma,neutral
admc/wd,selenium,2015-05-22T16:40:22Z,me too. what is the difference between the two? it’s strange that these two rather large project coexist without a word written about their comparison… :smiley:,neutral
admc/wd,selenium,2015-05-25T00:27:58Z,it has been a while since i was looking at this. from memory selenium-webdriver didn't support promise chains. wd had more features/options and webdriverio had nicer documentation.,positive
pnpm/pnpm,eslint,2017-07-17T10:30:27Z,actually it seems to be the case for us anyway. we have a private package declaring all the required (missing as per #739. which is another issue indeed) dependencies. amongst which eslint-plugin-import itself; i don't get any console output (using `pnpm i`) which indicates i'm missing those peerdependencies though. maybe it has something to do with the `organisation/package-name` format? (just guessing though),neutral
pnpm/pnpm,eslint,2017-07-24T18:55:39Z,i also have problems with jest.,neutral
pnpm/pnpm,eslint,2017-07-24T19:11:52Z,i added jest to the list. as far as i remember jest does not resolve modules to their real path. which is not how node resolves dependencies. that is why it doesn't currently work with pnpm,negative
pnpm/pnpm,eslint,2017-07-25T17:42:40Z,i wrote better=proper test. and now the test passes. so i need to figure out better how to replicate my problem - which is that running eslint fails on `eslint-plugin-import` because it cannot resolve the module `eslint-import-resolver-node`...i leave this open for a day. in case this rings any bells,negative
angular/angular-cli,mocha,2017-06-28T12:34:03Z,it's not something we're looking at right now. no. i suppose it would need a custom compilation plugin like what we do now for karma. and some other stuff.,positive
smali-kazmi/detect-mobile-browser,coveralls,2016-06-15T16:39:29Z,coveralls because test coverage don't cover few lines in code; so need to increase test coverage,neutral
webdriverio/wdio-junit-reporter,mocha,2018-03-06T00:15:01Z,ping sherlock1982,neutral
pghalliday/grunt-mocha-test,mocha,2014-04-14T11:28:12Z,singleton created in 'require:' option is not available. but works via mocha.opts. first. thanks for grunt-mocha-test-- we use it daily and appreciate the effort that's gone into it. in our test suite we are currently using 'require' mocha.opts to load a file which populates a singleton. which all the tests can then then access. however. when add the equivalent to our gruntfile. it doesn't work:```require: './test/lib/bootstrap.js'.```by adding a "console.log" statement to our bootstrap file. i can confirm that grunt is actually finding and loading the file. but the singleton created by that file is not available to other tests as before. i read in another issue that the implementation of 'require' is "simulated". could this behavior difference be a side effect one of the differences? thanks!,positive
pghalliday/grunt-mocha-test,mocha,2014-04-14T22:34:10Z,given that you're including bootstrap.js is this client side code? if so have you been testing client side javascript with mocha (browser stuff) and now using grunt-mocha-test for server side nodejs stuff. if so it could be the difference between how modules are loaded in the browser and nodejs. in nodejs modules are required with the require keyword and globals will only be accessible outside the module if declared without the var keyword. apologies if i'm way off the mark and you already know this stuff.,neutral
pghalliday/grunt-mocha-test,mocha,2014-04-15T01:27:57Z,what i'm doing is all server-side. we just happen to have a file named "bootstrap.js" which needs to run once. before all of our tests. the particular singleton module has a getinstance() method. which looks an object in the module file (but outside of any function) to see if there's already a key with a particular name. if not. one. is created. since the file is "required" once. and then stays in memory. the next time the module uses this singleton module and calls getinstance(). it gets the singleton back. this works in other cases. but not with grunt-mocha-test. and i'm not sure why.,neutral
pghalliday/grunt-mocha-test,mocha,2014-04-15T23:24:25Z,ahah. i took a look at the code. didn't realize the require was reimplemented. it looks like node_path is not handled. node_path is a special environment variable that is a path to local packages. instead of saying `require('lib/my-module')` or `require('../lib/my-module')`. you can use `node_path=lib` and `require('my-module')`. we should add that to the possible paths to resolve modules to.,neutral
pghalliday/grunt-mocha-test,mocha,2014-04-16T12:44:41Z,i'm not sure what you mean when you say the require is reimplemented. are you referring to the require option. this is indeed based on the original mocha command line implementation of `--require````program.on('require'. function(mod){  var abs = exists(mod) || exists(mod + '.js');  if (abs) mod = resolve(mod);  requires.push(mod);});```however i don't see how the implementation here would deal with node_path differently. are you trying to require a file with the require option that is referenced relative to node_path?a concrete example (gruntfile and other source) would be helpful in analysing this,neutral
pghalliday/grunt-mocha-test,mocha,2014-04-16T12:50:04Z,can you provide an example of this - it will save me time trying to reconstruct one from your description. gruntfile plus sample test should do.,positive
pghalliday/grunt-mocha-test,mocha,2014-04-16T13:03:12Z,totally fair. i'll see what i can do.,neutral
pghalliday/grunt-mocha-test,mocha,2014-04-25T13:59:02Z,log mocha errors to grunt console. when running mocha from command line. i see this error:(function (exports. require. module. __filename. __dirname) { ui.view_rhmi.widreferenceerror: ui is not definedwhen running the same code via grunt-mocha-test. i see only that the task has failed.,negative
pghalliday/grunt-mocha-test,mocha,2014-04-25T14:12:05Z,update: this only happens when running mochatest:coverage from the examples. with mochatest:test everything is fine and logged.,positive
pghalliday/grunt-mocha-test,mocha,2014-05-01T21:07:59Z,it's taken a while for me to figure out the issue here. in the examples `mochatest:coverage` is run in quiet mode as you don't want the coverage report output to console but instead just want to capture it to a file. in the example the idea is to run `mochatest` thus running both tasks. first the tests are run in `mochatest:test` and the coverage data is captured. next the capture data is processed using `mochatest:coverage`. due to the way `mocha` works with the require cache. the tests are actually only run once in this scenario.hope this clears things up for you.,negative
pghalliday/grunt-mocha-test,mocha,2014-05-01T21:36:46Z,ok i can reproduce this now but i think it will take some investigation - don't suppose you have any ideas? i still don't know what you mean by reimplementing require.,neutral
pghalliday/grunt-mocha-test,mocha,2014-05-01T21:50:26Z,hmm i think the problem might be that setting the node_path variable at runtime may not be enough for nodejs. my guess is that it has to be set before the process is started. i have confirmed this by setting node_path before running grunt.as such i'm not sure this is really an issue and more a feature of how nodejs deals with node_path (ie. it adds the path on process initialization and does not check it on every call to `require`)i have tried setting `require.paths` instead but it seems that this functionality has been removed from nodejs:```error: require.paths is removed. use node_modules folders. or the node_path environment variable instead.```running out of ideas now,negative
pghalliday/grunt-mocha-test,mocha,2014-05-02T04:08:55Z,yeah. i was just ignorant of what your require code was doing. i shouldn't have said "reimplementing require". i had never seen the internals of node's require or any code like it. so i saw you setting up paths and such and assumed you were somehow reworking it.so i assume your task runs on the same process as grunt and does not spawn a new one. right? i only ask because i have a grunt-express-server task that handles node_path fine. but i am thinking maybe that's because it spawns a new process. just guessing though.,negative
pghalliday/grunt-mocha-test,mocha,2014-05-02T04:37:31Z,yep. i can confirm. you would have to spawn another process using child_process for this to work. with that module you can pass process_env to the child_process and it will treat it as if it were part of the initial environment. i wonder if i could set up mocha in a `grunt-contrib-watch` task and pass the option `spawn: true` to start it in a new process? i'll try that in the morning.,positive
pghalliday/grunt-mocha-test,mocha,2014-05-02T06:24:35Z,i'm quite surprised it works like that in grunt watch. unless you're also running `env:test` before running watch.maybe i will add a gotchas section to the readme.adding a spawn option would be a fundamentally different approach and it may make more sense to just wrap the mocha executable in a grunt-shell task.,neutral
pghalliday/grunt-mocha-test,mocha,2014-05-02T06:36:49Z,yes. i'm running grunt-env before it as well. yeah. unless it's easy to hook up with grunt.util.spawn. using another grunt task seems like the way to go.,positive
pghalliday/grunt-mocha-test,mocha,2014-05-02T07:12:19Z,it also occurred to me that `grunt-shell` could also be used to spawn a grunt sub process while setting the environment too. after all you may not always want to use watch,neutral
verdaccio/verdaccio,eslint,2017-04-24T05:21:01Z,meeeeow cool. i've merged already. btw. the `eslint` is yelling like a crazy. i switched errors as warning in order to speed up the merge. but it's n oportunity for a bug fix for anyone that want to contribute.,negative
npm/npm,standard,2016-06-02T22:17:30Z,browserify is _an_ incredibly useful workflow for many developers. however. it's not the _only_ one. and putting it into npm directly was probably never in the cards. beyond that. having a standard way to do builds for front-end use cases is still a good goal. but it's probably not going to get implemented as a top-level command like this. it's also not clear when the team is going to get to this. but because it's something with wide-ranging implications. and as such is something that will be done with heavy consultation with the user community. as such. i'm going to close this issue. and we'll spin up a new discussion when the team is ready to move on this. thanks for your time!,positive
mishoo/UglifyJS2,uglify,2014-04-05T19:27:34Z,yes.could uglifyjs itself find these comments and set configuration?,neutral
mishoo/UglifyJS2,uglify,2014-04-06T04:58:20Z,imho it would be better for an external project to read & set configurations.,neutral
mishoo/UglifyJS2,uglify,2014-04-06T05:56:36Z,ok. i already use uglifyjs with a shell wrapper.,neutral
mishoo/UglifyJS2,uglify,2014-04-23T20:58:50Z,fixed trystatement ast reformat when using acorn. as shown in  there is no property  named`handlers` in the trystatement node. but one named `handler`.previously. a typeerror (cannot reach `[0]` of `m.handlers`) exceptionwas thrown when using `uglifyjs` with the `—acorn` switch.,negative
mishoo/UglifyJS2,uglify,2014-04-24T08:47:05Z,why uglify runing so slow?. fileutil.readfile(file. "utf-8". function(err.data) {                if(err) {                    console.log("reading file "+ path.resolve(file)+" error");                    return;                }                var filename = path.basename(file. ".js");                console.log("fuck")                var result = uglify.minify(data. {                    outsourcemap: filename + ".map".                    fromstring: true                });                fileutil.writefile(file. result.code. "utf-8". function () {                    console.log("file " + file + " created");                    fs.rename(file. path.dirname(file)+"\"+filename+"_"+util.md5(data. 7) + ".js". function() {});                });                fileutil.writefile(path.dirname(file)+"\"+filename+ ".map". result.map. "utf-8". function () {                    console.log("file " + path.dirname(file)+"\"+filename+ ".map created")                });            })when i run this code. the console diaplay logs very very slow!!!!when i remove minify code . it runs fast?please tell me why?how can i modify it?,negative
testem/testem,mocha,2014-01-30T01:36:44Z,automated integration tests are really important to a lot of application teams. you could argue that service-level integration tests probably don't need to run in multiple browsers. and teams that are doing this kind of testing can do it via mocha or jasmine today. but then they'd have to configure testem _and_ another framework if they want to use testem for their unit tests.i'm also interested in using testem as a vehicle to manage cross-browser functional testing. but i can't do anything along those lines without the proxy to let me talk to my web server.,negative
testem/testem,selenium,2018-03-08T06:52:12Z,i just switched to phantomjs ( a pure headless selenium driver ) as it had to be delivered shortly. and i have no issues using phantomjs. but headless chrome issue wasn't resolved till now. hope this helps,positive
oddbird/true,mocha,2017-06-05T17:48:18Z,thank you mirisuzanne. a note for other contributors. i used the mocha integration code. jest uses `describe` and `it` as well. the true tests do run however jest does not detect it as an integration test and gives me that error above.,negative
mochajs/mocha,mocha,2014-01-02T20:45:12Z,i've thought about how to get mocha working with `node` but it would get dirty since people require `mocha` to run the test runner programmatically and requiring `mocha` to get a test runner set up in the background for you would conflict with that.i could probably get it to work with `require('mocha/describe')` and have that bootstrap a mocha test runner with the default settings if the program was not run with the `mocha` executable but run with `node` directly. that way the programmatic `require('mocha')` api to create and run your own test runners won't be effected.,neutral
mochajs/mocha,mocha,2014-01-03T02:33:53Z,run mocha programmatically with harmony. i would like to run my tests using harmony programmatically.as far as i understand it is currently not possible.it should be possible to pass it in as an option as follows:var mocha = require('mocha').  mocha = new mocha({    harmony: true.  }),positive
mochajs/mocha,mocha,2014-01-04T19:57:15Z,after reading this. as well as tj's reasoning for not supporting promises. i'd like to offer my :+1: to this pr.although mocha can be made to work with async tasks. as discussed here. it is certainly not elegant. and. it's not that js is short of async functions that inclusion of promises would be an overkill. i hope that it's included in the future. so that ugly hacks are not required. :),positive
mochajs/mocha,mocha,2014-01-06T12:47:12Z,prefer `process.stdout.write` in xunit reporter.. falls back to `console.log` if `process.stdout` is unavailable.this is another stab at fixing #1068 without breaking existing use cases. it works for me on my own ~1500 test suite in both chrome and through mocha-phantomjs. and the mocha self-tests pass.i was having an issue with mocha-phantomjs not picking up the reporter output when used with the `--file` options because of the use of `console.log`. switching to `process.stdout.write` (when it is available) fixes the problem for me.this also seems to have picked up a completely unrelated change to another file that hadn't yet made it into the mocha.js snapshot. (see diff.) is this sort of thing a regular occurrence?,negative
mochajs/mocha,mocha,2014-01-07T19:46:08Z,+1 – very good pr imho,positive
mochajs/mocha,mocha,2014-01-07T20:01:03Z,:+1: raynos docs are in the gh-pages branch.,neutral
mochajs/mocha,mocha,2014-01-07T20:08:18Z,travisjeffery thanks! i've added a pr into the gh-pages to document this feature.,positive
mochajs/mocha,mocha,2014-01-09T18:23:16Z,+1 to the idea and to using duck-typing on .then instead of adding additional method names.however one thing this doesn't handle is the case where the promise is rejected with something that's not an error. domenic handles null or undefined in mocha-as-promised. but not the case where reject is called with something else like a string. imo this should also be detected and turned into an error.,negative
mochajs/mocha,mocha,2014-01-09T18:26:14Z,> domenic handles null or undefined in mocha-as-promised. but not the case where reject is called with something else like a string. imo this should also be detected and turned into an error.hmm interesting point. the only reason i handle null and undefined specially is because otherwise mocha assumes it's a success. otherwise i pass through any non-error values to mocha. which yells at the user for me.,positive
mochajs/mocha,mocha,2014-01-10T20:16:56Z,copy and paste the mocha.js you have and send a link to a project reproducing the problem. mocha's working. it's something wrong on your end and i can't help you without any info.,negative
mochajs/mocha,mocha,2014-01-12T01:43:41Z,i'd prefer if mocha simply supported all node's arguments instead of trying to filter out the "bad" ones.,negative
mochajs/mocha,mocha,2014-01-12T01:47:00Z,support --harmony in mocha.opts. my code works only with `node --harmony`. so i can't run my tests simply by running `mocha`.```$ mocha  error: unknown option `--harmony'```,negative
mochajs/mocha,mocha,2014-01-12T02:37:59Z,you have to use `mocha --harmony`,neutral
mochajs/mocha,mocha,2014-01-13T03:33:27Z,remove invalid optimization in checkglobals().. fixes #1015there was an attempt at an optimization in checkglobals that would short circuit globals checking if the number of tolerated globals was equal (correcting for a couple of expected differences) to the number of actual globals.  this is completely invalid since you could tolerate a new global in your mocha config and the system under test could add a different global but not the new global you are tolerating.  (or you could tolerate two new ones. and two new unexpected ones could be added by the system under test. etc.)  in these cases. the unexpected globals will not be reported by mocha and tests will pass when they should not.  so basically the code was assuming that the system under test would definitely add any globals that were added to the list of tolerated globals through mocha config.i added a test for the simplest failure case. saw it fail. and then removed the offending code.,neutral
mochajs/mocha,mocha,2014-01-16T20:52:48Z,documentation around glob patterns and shell expansion. not sure if it is needed. but it may be worth noting that due to shell expansion. glob patterns should be wrapped in single quotes on unix shells.`mocha -w -r should 'test/**/*.js'`using that would render the --recursive flag useless.,negative
mochajs/mocha,mocha,2014-01-20T06:13:30Z,visionmedia any comment on this? i believe this was affecting other people as well. so it seems it would be worth carrying the fix. unless you had a different approach in mind?,neutral
mochajs/mocha,mocha,2014-01-20T19:21:48Z,`should.js` relies on `try`+`catch` of `assertionerror`'s for negative assertions. unfortunately. this doesn't play out nice with `mocha.throwerror` because the error will be reported to mocha even if you catch it later.,negative
mochajs/mocha,mocha,2014-01-22T10:50:42Z,vduggirala $ mocha test.js --timeout 30000,neutral
mochajs/mocha,mocha,2014-01-22T20:16:28Z,the original pr's api is consistent to how the rest of mocha api looks.,neutral
mochajs/mocha,mocha,2014-01-27T01:14:15Z,+1 promises are now in the standard. like it or not. they are here now.my promise-based code is a pain to test with mocha. throwing in a rejection callback is just not working. as exceptions are caught in promise internal code. failed tests end up timing out...,negative
mochajs/mocha,mocha,2014-01-27T20:26:43Z,this is a small but incredibly useful change. are there any remaining concerns preventing it from being merged?i've been following it through a couple incarnations and have been using it for strongloop's internal ci for a while.,positive
mochajs/mocha,mocha,2014-01-27T21:01:51Z,this is still broken for me as well.  it caches files outside of the tests.,negative
mochajs/mocha,mocha,2014-01-28T19:14:06Z,`mocha.generator = co` or sth,neutral
mochajs/mocha,mocha,2014-01-29T04:57:53Z,can't see this being mocha's issue. it's not compiling to js properly,neutral
mochajs/mocha,mocha,2014-01-29T05:14:24Z,i always wondered. can't this "coffee-script/register" thingy be specified in the comments section in the source file itself? something like a shebang or modeline. but interpreted by mocha itself when requiring...,negative
mochajs/mocha,mocha,2014-01-30T17:22:43Z,lucassus that example works fine when you only have one nested level of derived values. but if you tried to make `kind` depend on another variable set in an inner `context` there is no combination of `before` and `beforeeach` that will make it work.visionmedia. to pose dpehrson's question again: are you opposed to having `let` or something like it in mocha? i'm investigating whether it's possible to build `let` outside of mocha using the api it provides. if it isn't. would you at least be amenable to a pr that adds the api required to allow a `let` that is not included in mocha?,neutral
mochajs/mocha,mocha,2014-01-30T17:26:23Z,i don't think it's necessary to add to mocha directly personally. much like express's `app.configure()` was really just a glorified `if` statement. it raised more questions than it was worth. even though it does look a bit nicer,positive
mochajs/mocha,mocha,2014-01-30T17:28:27Z,i don't see any reason to have it in mocha,neutral
mochajs/mocha,mocha,2014-01-30T17:57:45Z,that's unfortunate. it prevents mocha from scaling to larger applications with more complex test suites.,neutral
mochajs/mocha,mocha,2014-01-30T18:03:55Z,visionmedia that's fair. as to my second question. would you be opposed to (hopefully minimal) changes to mocha's api to allow someone to build it outside of mocha?,neutral
mochajs/mocha,mocha,2014-01-30T20:52:20Z,ah. yeah i see. definitely not something that should be in mocha. when it's effectively just:``` jsvar container = function(){  var memo;  return function(){    return memo || (memo = new ember.container());  }}();```which is easy in user-land and has no downside. or just using beforeeach with `this.container = new stuff` would be similar,neutral
mochajs/mocha,mocha,2014-01-30T23:21:24Z,so i've come around to the idea that tap is a terrible format and you need some kind of json object format.:+1:,negative
mochajs/mocha,mocha,2014-01-30T23:36:40Z,the other thing i would add to my list of requirements for reporting is that success or failure should be detected/indicated purely through the use of the exit code.  i.e. it should be possible to have a failing test. but overall state that tests pass. and visa versa.  all cis should depend purely on the exit code.,negative
mochajs/mocha,eslint,2018-04-23T17:30:27Z,derp. it's this at the top of the file:```js/* eslint no-unused-vars: off */```,neutral
mochajs/mocha,eslint,2018-04-24T23:56:22Z,would prefer `no-unused-vars: ["error". { "args": "none" }]` if "eslint" can't add a different rule that can tell the difference between variables and function arguments. the function signature is just that -- if you don't use all its arguments. that's _not_ an error.,neutral
mochajs/mocha,eslint,2018-04-25T02:59:13Z,it's weird. `eslint` should find this kind of errors.,negative
mochajs/mocha,eslint,2018-05-04T01:34:43Z,so i suggested this. but a little lost on the details. why are the remaining `global.date` references not causing errors? and commit can't close without rest of the changes (you can't institute the change without "package.json". "package-lock.json" and ".eslintrc" changing as well).,negative
mochajs/mocha,eslint,2018-05-04T03:12:33Z,plroebuck > why are the remaining global.date references not causing errors? which references?  you can reference `global.date`. but not e.g. `global.date.now`. nor can you `new global.date()`.> and commit can't close without rest of the changes (you can't institute the change without "package.json". "package-lock.json" and ".eslintrc" changing as well).i don't understand what you mean.,negative
mochajs/mocha,coveralls,2018-01-03T20:21:12Z,coveralls failure due to use of `.only`,negative
casperjs/casperjs,jshint,2013-12-17T02:43:33Z,run cli tests and jshint with the dotnet travis jobs. ref: #768the dotnet jobs should now. like the python jobs. fail when there are jslint errors or the clitests fail.,negative
casperjs/casperjs,jshint,2013-12-17T08:22:18Z,thanks!,positive
casperjs/casperjs,jshint,2013-12-20T06:31:51Z,easy fix: add a `/*jshint maxstatements:99*/` directive in your function. longer one: refactor so the function nb of statements decrease :) up to you. i'm fine with both ways.,positive
karma-runner/karma-sauce-launcher,karma,2015-02-09T18:54:02Z,oh. dang... i meant this for `karma-sauce-connect`.  sorry!,negative
karma-runner/karma-sauce-launcher,karma,2015-02-09T18:57:37Z,one more thing. i understand karma isn't responsible here.  just trying to get the word out in as many places as possible. since this is likely affecting a lot of people.,negative
felixrieseberg/ember-electron,eslint,2018-07-17T17:11:13Z,add eslint env/config for ember-electron projects. would it make sense to make an eslint plugin that would get added during `ember install ember-electron`?mainly. it'd be nice not to have to manually fix the `error  'requirenode' is not defined  no-undef` entries. but perhaps there are other things to note.,neutral
wix/detox,mocha,2017-11-12T14:18:24Z,alissa-ferro this is out of detox's scope.  the test runner's job to decide if it should bail or continue to test the other tests in the suite. if you want tests to continue running remove the `--bail` from your `mocha.opts`,neutral
wix/detox,mocha,2017-11-21T12:27:30Z,the current docs are correct. we don't use callbacks to notify mocha we're done. we use async-await instead.,neutral
wix/detox,mocha,2017-11-21T20:26:24Z,so actually. this is how i currently run the test suite`node_modules/.bin/mocha e2e --opts e2e/mocha.opts  --configuration android.emu.release --grep :ios: --invert --loglevel verbose`,neutral
chentsulin/electron-react-boilerplate,mocha,2016-10-30T23:30:46Z,discussion: migration to jest. jest has recently gained a lot of attention after significant improvements that were made to it. i think it would we should migrate towards it. i've had a number of issues with mocha. builds arent parallelized. async/await isnt supported. and it requires much more configuration out of the box. the migration wont be a lot of work because its api is very similar to that of mocha. it also comes with support for react out of the box.,neutral
chentsulin/electron-react-boilerplate,eslint,2016-11-11T05:20:37Z,fix peer dep missing: eslint-plugin-import. fixed by updating eslint-config-airbnb package.,neutral
chentsulin/electron-react-boilerplate,eslint,2016-11-11T06:52:09Z,any idea why the build is failing?,negative
chentsulin/electron-react-boilerplate,eslint,2016-11-11T07:48:49Z,resolved peer dependencies problem.,positive
chentsulin/electron-react-boilerplate,eslint,2016-11-11T15:51:24Z,set line endings to use lf instead of auto (git). currently on windows git will checkout the files with crlf with default settings. the eslint expects the line endings to be lf so this creates eslint linebreak-style errors. setting text to end of line to use lf and setting the image files as binaries solved this issue for me.,negative
chentsulin/electron-react-boilerplate,eslint,2016-11-15T09:58:08Z,sounds like an excellent idea! i am a bit confused myself on how to set up the state management with redux. it is a little bit hard to get started with the boilerplate for a beginner like me. with so much stuff going on so i think a tutorial could help.,positive
chentsulin/electron-react-boilerplate,eslint,2016-11-15T17:46:16Z,js fatigue is one of my growning concerns with this boilerplate. its actually the reason why i initially thought of creating a video tutorial series.,negative
chentsulin/electron-react-boilerplate,eslint,2016-11-16T21:25:15Z,m-brantheim yup! i've seen it. i was planning on electron specific tutorials. also there seem to be a lot of questions regarding how to create new components and add them so i'll probably cover that.,neutral
chentsulin/electron-react-boilerplate,eslint,2016-12-09T04:18:12Z,updated eslint flowtype errors,neutral
chentsulin/electron-react-boilerplate,eslint,2016-12-09T05:00:45Z,flowtype migration. **⚠️ do not merge**this essentially requires the user of the boilerplate to know at least a little flow. lets merge this when we provide some learning resources and documentation on the tools that this boilerplate uses- [x] update `eslint-plugin-flowtype-errors`- [x] add `eslint-plugin-flowtype`- [x] add `babel-plugin-tcomb`- [x] migrate react `static proptypes` to flow types,neutral
AnalyticalGraphicsInc/cesium,eslint,2018-10-18T21:48:56Z,you have an eslint failure,neutral
AnalyticalGraphicsInc/cesium,eslint,2018-10-24T21:21:49Z,fix eslint error in master.,neutral
AnalyticalGraphicsInc/cesium,eslint,2018-10-26T02:02:08Z,fix ci eslint warning,neutral
AnalyticalGraphicsInc/cesium,eslint,2018-10-26T02:47:34Z,ah sorry. thanks for fixing this.,positive
eventbrite/javascript,eslint,2018-05-22T18:41:45Z,fix jest setup + add eslint-plugin-babel. the jest rules were not added into `eslint-config-eventbrite` and the rules themselves were improperly named (missing `jest-`).also we should also include `eslint-plugin-babel` in order to fix `no-invalid-this` rule to work w/ class property functions.,neutral
eventbrite/javascript,eslint,2018-05-25T02:00:54Z,add updated changelog for 3 eslint packages. lists out the new rules added. those made stronger. and those relaxed across `eslint-config-eventbrite-legacy`. `eslint-config-eventbrite` & `eslint-config-eventbrite-react`.also noticed one incorrect url in the rules definition.also realized that we had forgotten to include v5 of `eslint-config-eventbrite-react` in the changelog.,negative
eventbrite/javascript,eslint,2018-05-25T17:12:15Z,lgtm,neutral
eventbrite/javascript,eslint,2018-06-07T00:05:05Z,removes arrow-body-style rule in es6 eslint rules. this rule is nice to remind developers the fact that we can return a single operation from an arrow function without needing the 'return' clause. however. it is also problematic due to several things:first. this rule doesn't take into account that maybe that single return value is composed of a chain of operations. so it won't be as readable if returned all at once.second. when debugging a react application. sometimes we want to add a 'debugger' clause in the code before the return. when this happens. we are forced to first. add curly braces and a return statement. then add the debugger. and once we end debugging. undo the previous operations to not break this rule. this can be annoying and a waste of time.in this pr. i suggest to get rid of the rule altogether. but i would be also open to just change it to not throw an error.,negative
eventbrite/javascript,eslint,2018-06-07T00:42:16Z,.,neutral
eventbrite/javascript,eslint,2018-06-07T00:56:54Z,i agree that this shouldn't be an error.i think your idea of making it a warning instead of an error might be better than getting rid of the rule altogether. the reason is because when i first started working here. i never used this style because i didn't even know it was possible. maybe i would have eventually learned it just by looking at other people's code. but i might not have really paid attention to it if the linter didn't say anything.these days i use this feature a lot so i'm glad the linter taught me about it. but i agree with you that it can often be an annoyance to keep switching between the styles.,negative
eventbrite/javascript,eslint,2018-06-07T16:27:17Z,hey so thanks for putting this together. i have some thoughts:**first:**making it a warning ultimately won't help because in our apps. we make eslint fail on any warnings. this is because we found our eslint logs filled with warnings. it was hard to then figure out what was a problem and what wasn't. especially for those not intimately familiar with eslint. by making warnings fail. we all knew we had to fix everything.**second:**like jchen-eb said. the rule provides education. there are people who don't even know this is possible so it's an asynchronous way of sharing knowledge.**third:**this rule actually came out from code reviews. we were seeing lots of code reviews where people were suggestion using single returns. and that's just a waste of time for everyone involved. and since some people knew about the feature and others didn't (or forgot). the code would be inconsistent. the nice thing about all of these style rules. whether we agree or not. is that it rids code reviews of style suggestions and we focus more on the logic.**fourth:**the rule just says that it has to be an implicit return; it doesn't mean that it has to all be on line. so things can be on multiple lines with indentation to make things clearer. just like if you had the curly braces and `return`.**fifth:**the `debugger` is a legit problem. because it's a statement and not an expression it can't coexist with an implicit return. i use `console.log()` statements. which **are** expressions so i can do something like:```const foo = (x) => console.log('hello!!!!') || x * x;```**sixth:**we can override rules in our app. i don't suggest this because it creates inconsistency across apps. but it's something available to us. but if it came down to it. i would rather a specific app override it and have the main configuration still have the rule. than change the main configuration.,negative
eventbrite/javascript,eslint,2018-06-07T18:51:13Z,thanks for the extensive response benateventbrite!here are some of my thoughts about it:**first:** i see. good to know. thanks for explaining us that detail.**second:** totally. i agree.**third:** my position about this would be that we should decide if we want to use a single return or not. and make that clear to all the team. imho. this makes sense in a lot of cases. but it doesn't in others. i agree this would introduce some inconsistencies in the code. but i also think they are minimal.**fourth:** true. we can explit the single line. however imo this looks less than ideal:```const atestfunction = (array) => array.map(figureoutstatus).filter(isactive).map(dosomething)```it is not common and not what we would expect on a usual javascript code. note how we should not add a semicolon in that last line (feels like a bug). also note that this example has nicely named functions. if we added the implementation there it would look actually worse.this also has to do with **fifth**. as we won't have a place to put the debugger.**fifth:** that's a great trick to use. thanks! it will help us overcome this problem a bit now. but it doesn't help us when we really need a debugger.**sixth:** that's something i am thankful that can happen. in this case. i think this could be legit. as it is not such a big change. in other cases though. i agree with you it won't be ideal.,negative
eventbrite/javascript,eslint,2018-06-07T20:08:20Z,matthewdowns-eb `as-needed` is what we're using. it's the default.,neutral
eventbrite/javascript,eslint,2018-06-07T20:40:35Z,thanks for the follow-up benateventbrite!i totally agree that in the second example you posted. that rule makes a lot of sense in that use case.however. in the first example. there is a kind of cognitive dissonance for me. maybe due to me being used to the usual way. i would think those parentheses are curly braces and a return and semicolon are missing. it is definitely better looking than my example though.,positive
eventbrite/javascript,eslint,2018-06-07T21:31:30Z,if frivolous code reviews are a problem. could we make a rule where code reviewers must accept a diff if their only objection is based on style? this way they can still suggest style improvements. but require them to accept if the only issue is style so that we won't waste time on pointless debates. the author can still immediately merge it if they want.i've heard from managers here that in the past we actually did have a rule like that to prevent this issue. basically to prevent people from imposing their style preferences on others and only allowing the linter to block based on style.it would be important to emphasize that style suggestions are still welcome. it's just that you should accept the diff if that's all you have.,positive
eventbrite/javascript,eslint,2018-06-08T14:30:43Z,yeah. it's less about code reviews not being accepted. i haven't really seen style preventing . it's more so just the fact that the reviewer takes the time to say it. the reviewee takes the time to read it. and then has to decide whether or not they wanna do it. and then another reviewer sees it and says "no i like it the other way" and it just becomes a general waste of time.eslint is great at getting rid of all of these types of discussions because it just enforces the rules one way or another.,positive
GoogleCloudPlatform/nodejs-docs-samples,standard,2017-04-12T17:16:12Z,bring ml apis up to standard.. i update the samples for language. speech. translate. video. and vision. i brought consistency to:- [x] - argument names- [x] - error handling- [x] - showing imports- [x] - readmes,positive
GoogleCloudPlatform/nodejs-docs-samples,standard,2017-04-24T22:46:45Z,bring bigquery samples up to standard.,neutral
GoogleCloudPlatform/nodejs-docs-samples,standard,2017-04-25T21:17:41Z,bring speech api samples up to standard.,neutral
vatesfr/xen-orchestra,standard,2016-09-05T14:09:36Z,improve log view. - [x] less big buttons- [x] less rows- [x] standardize with job "log" view,positive
yandex-ui/noscript,mocha,2014-05-06T14:46:19Z,я хочу в неё перенести только костыли `if window.mocha`. да. наверное это не должна быть не сборка. а просто некоторые вещи нужно делать в stub'ах,neutral
Modernizr/Modernizr,mocha,2016-01-25T23:05:18Z,``` bash  303 passing (8s)  1 failing  1) cli does not throw when being executed:     error: timeout of 2000ms exceeded      at null.<anonymous> (c:\projects\modernizr\node_modules\mocha\lib\runnable.js:158:19)      at timer.listontimeout (timers.js:119:15)```unrelated failure. afaict.,negative
Modernizr/Modernizr,mocha,2016-01-30T06:30:42Z,what to do mocha tests time out. i didn't find any error in test.,negative
rambler-digital-solutions/dotfiles,eslint,2017-03-03T08:37:16Z,feature/eslint-update added rules for spacing in braces,neutral
Azure/azure-sdk-for-node,jshint,2014-04-18T17:49:45Z,i see. i removed the ones jshint complained basically. but that'd be a good sanity check. i'll try.thanks,negative
walmartlabs/eslint-config-defaults,eslint,2016-12-02T21:55:57Z,j492 -- confirming this solves the issue after adding the global flag.`npm install --save -g eslint-config-defaults`,neutral
react-boilerplate/react-boilerplate,eslint,2017-04-21T14:00:46Z,why we don't use static proptypes and defaultprops?. ```jsclass userslist extends react.component { // eslint-disable-line react/prefer-stateless-function  static proptypes = {    users: react.proptypes.instanceof(list).isrequired.    onselect: react.proptypes.func.  }  ...}```,negative
react-boilerplate/react-boilerplate,eslint,2017-04-21T14:23:52Z,we do.,neutral
react-boilerplate/react-boilerplate,eslint,2017-04-21T19:26:01Z,the lint message is awful but you could add an entry in the .eslintignore file e.g.: `app/assets/*`,negative
react-boilerplate/react-boilerplate,eslint,2017-04-23T15:40:53Z,let's add this syntax to the generator!need pr?,neutral
react-boilerplate/react-boilerplate,eslint,2017-05-09T02:14:46Z,what is the difference between static proptypes and defaultprops?,neutral
react-boilerplate/react-boilerplate,coveralls,2017-02-06T07:14:46Z,test(build:clean script): remove test:clean from build:clean. fixes coveralls reporting?discussion in #1535 #1432 is implicated in the recent failure of coveralls reporting.#1432 sought to separate `test` and `build` scripts. but erroneously left `test:clean` in `build:clean`. the effect being that - `test` built  `./coverage`- `build` removed `./coverage`- `coveralls` failed for lack of `./coverage` this pr fixxes that error.,negative
react-boilerplate/react-boilerplate,coveralls,2017-02-06T07:19:09Z,`coveralls` is **back!** awesome!,positive
react-boilerplate/react-boilerplate,coveralls,2017-02-06T07:34:36Z,> but this pr must be merged in master before the coveralls badge will function...yes! the badge is still broken. but at least we have the coveralls bot functioning.,neutral
react-boilerplate/react-boilerplate,coveralls,2017-02-06T07:37:33Z,karandikarmihir would you be so kind as to do the honors?**(give this your lgtm and merge),neutral
react-boilerplate/react-boilerplate,coveralls,2017-02-06T07:49:13Z,by all means!,neutral
Esri/esri-leaflet,standard,2016-06-27T16:13:01Z,to be honest. i haven't had time yet to research this further (yet).steps:- write up a repro case to programmatically query service and introspect/compare responses- use it to see if the problem is peculiar to an individual service- dig in and see if the issue has already been reported- if appropriate. log a bug for the appropriate team to investigate further i certainly don't mind doing this. but if you have access to standard technical support through an international distributor. it'd make sense for you to utilize it.,neutral
apache/zeppelin,selenium,2017-01-10T18:46:21Z,bitchelov thanks for making selenium test more stable!lgtm and merge to master if no more discussions.,neutral
apache/zeppelin,selenium,2017-02-01T23:27:53Z,karuppayya sure. let me take a look selenium test in this branch.,neutral
assaf/zombie,mocha,2014-03-12T18:25:47Z,i feel like that might not quite be the correct behavior for the use-case of providing a "done" function.given the documentation link above. the use-case documented is that you wait for an element to be available in the dom. according to the above comment. however. it sounds like this will run the callback argument simply if there are no more events in the event-chain to trigger. regardless of whether or not this done argument returns true.i think either the documentation should be updated to make this clear. or (and this is my preference) the logic-of-events should be this: if there is a done function. run it until it returns true or the waitduration is reached (regardless of whether or not there are events in the event-chain). if it does not return true during the waitduration. the callback function should be passed an error explaining that the duration was reached and the done function was false.this would allow people to use it in tests to wait for a condition to be met before trying to make assertions about the page they are on. (which is what i am trying to do. and what the documentation shows as a use-case.),neutral
assaf/zombie,mocha,2014-03-12T18:32:09Z,the point of the completion function is to tell `wait` there's no point in processing more events. this is opposed to trying to use timeouts. so you get dependable tests that wrap up faster. it's an advisory. not an assertion.all assertions should come after the `wait`. not during it.,neutral
assaf/zombie,mocha,2014-03-12T19:13:50Z,i feel like that is typically the purpose of a callback (to do something after the called function workload is done. and not during it).given your above explanation. i still feel like the documentation needs updated. it should probably make it clear that it will fire the callback when the event-chain is empty. or when the done callback returns true – whichever happens first (and that is the important part.) it should say something about the event-chain being empty superseding the provided done function. this is the misleading paragraph:```you can also tell the browser to wait for something to happen on the page by passing a function as the first argument. that function is called repeatedly with the window object. and should return true (or any value equal to true) when it's time to pass control back to the application.```that doesn't appear to be true if zombie detects that the event-chain is empty.do you have an example of how i would achieve my above use-case? should i simply loop until my condition is met or my mocha test times itself out?thanks for all the help. by the way! i was (obviously) totally misunderstanding the purpose of this function.,positive
assaf/zombie,mocha,2014-03-12T19:55:26Z,`foreach(fn)` vs `file.readfile(filename. fn)`. the only convention is that. when you have a continuation callback. if an error occurred during processing. you pass it as the first argument. otherwise it's undefined. try throwing an error from the completion function. you'll get an error in the callback.> `… something to happen on the page …`> that doesn't appear to be true if zombie detects that the event-chain is empty.the way "something happens on the page" happens is. an event gets queued and then the browser processes it (which may in turn queue more events). when the browser runs out of events to process. we reach a state in which "something happens on the page" is never going to happen.if there's a disagreement about what's going to happen (you say something. the browser insists it's nothing). you may want to look at the reason for disagreement first.,negative
assaf/zombie,mocha,2014-03-12T21:07:16Z,comment updated to reflect. more accurately. what i am seeing.,neutral
assaf/zombie,mocha,2014-03-12T21:15:21Z,there is no rendering. so no dom layout ticks. but all dom updates will complete within an event.also. you can't `wait` on a websocket or sse at the moment. there's an open issue related to that.,neutral
assaf/zombie,mocha,2014-03-12T21:18:11Z,ah! maybe that is my real issue then... my application connects the socket. and then fills out the html page with the data it gets over-the-wire. which i was trying to wait for with the above examples...,neutral
assaf/zombie,mocha,2014-03-12T21:32:02Z,so. with the fact that you cannot wait for socket events. does that also mean that socket events which trigger dom layout changes are also not registered?i am seeing the same exact html from `console.log(browser.html());` before my test is run. and after the `pressbutton` is called with a `settimeout(function () { console.log(browser.html()); }. 5000);` in the `pressbutton` callback...,neutral
assaf/zombie,mocha,2014-03-12T21:37:44Z,ok. thanks for all the help with this!,positive
FormidableLabs/webpack-dashboard,eslint,2018-08-09T14:00:20Z,too far behind master. so closing. we can pick up later with a fresh effort if we want!!!,neutral
yeoman/generator,mocha,2014-01-15T21:17:08Z,option to silent stdout. or at least the yeoman ascii art when testing generator. i want to isolate my rspec output during an 'npm test' of my generator. so i'd like an option to hide the output of yeoman during the multiple test runs. notice. this is not `npm test > /dev/null` because i want mocha's output. just not the ascii art and file list.sorry if this is basic. but a search for stdout/tests for yeoman revealed alot of noise about how it used to check stdout instead of fs in tests. and not an answer to how to silence it.,neutral
yeoman/generator,mocha,2014-01-15T21:23:49Z,simply create a custom environment and mock methods that are outputting content to the console (like `adapter#log`).,neutral
yeoman/generator,mocha,2014-01-22T18:03:31Z,hemanth is assigned on this issue and should bring something up sometime :)btw. don't use `--silent` - that was a bad idea as it would break usual ui with prompts. better implement a global flag like `yeoman_mute` or something similar... up to you.,negative
yeoman/generator,mocha,2014-01-23T03:13:42Z,sboudrias sure. will work on it.,neutral
yeoman/generator,mocha,2014-01-29T15:45:34Z,yes. it's reported on the latest. hunting down that `undefined` :cactus: **update 0:**  `$ mocha <any_test>.js --reporter list --timeout 50000` is resulting in the same.,neutral
yeoman/generator,coveralls,2014-09-14T06:58:05Z,ok. that's done - thanks for the initial work mazerte. it's been very useful!,positive
feross/buffer,sauce,2015-10-06T18:00:57Z,opened #81 but the saucelab tests are not run against pull requests,neutral
pouchdb/pouchdb-server,eslint,2017-02-15T13:23:40Z,add eslint. remove jshint and use eslint,neutral
NetsBlox/NetsBlox,codeclimate,2018-10-16T15:43:50Z,could you please fix the codeclimate issues? otherwise it looks good to me. thanks!,positive
techfort/LokiJS,uglify,2016-03-19T14:31:41Z,giving a second thought about this... it would be probably better idea to just uglify the final js file and let gzip do it's job.,neutral
techfort/LokiJS,uglify,2016-03-19T14:32:09Z,use uglify-like. related to #380,neutral
OpenZeppelin/zeppelin-solidity,coveralls,2018-04-13T00:42:03Z,gonna add tests for the `toethsignedmessage` function tomorrow so coveralls stops complaining,negative
matrix-org/matrix-react-sdk,standard,2017-12-18T14:48:09Z,turt2live - thanks for this. another really useful feature that i have been meaning to get to for a while.i like pafcu's suggestion of serializing. or passing the actual theme in some way (but that's probably going to need quite a bit more thought / implementation. further down the line).i get your reasoning behind namespacing the theme parameter in this way. but (having discussed it at quite some length). we feel that it is probably better to namespace the themes themselves in some way. rather than having to handle parameters for every possible client (we hope / envisage that there will be lots in future).can you please change the theme parameter to "theme" for the time being? for now the integration managers should be able to handle the minimal number of themes in the wild. ultimately. as themes proliferate. we should standardise on some theme name-spacing e.g. "riot.dark". "riot.light" which will allow the integration managers to render the actual theme "riot.dark". if available. but if not. fall back on to it's general "dark theme". which is more likely to be suitable and doesn't require knowledge of every possible client?,positive
matrix-org/matrix-react-sdk,karma,2017-07-27T14:41:20Z,(no idea why jenkins is sad about the `karma-summary-reporter` dependency which was most certainly not a change in this pr),negative
vvo/selenium-standalone,selenium,2015-08-03T06:45:24Z,i have already seen someone do it (cannot find it in the issues).it seems feasible to start only the chromedriver (or the ie driver) right? can you show how to do it using the standard selenium executable?this would only work for ie and chrome i guess? because the firefox driver i think it's included in the selenium-standalone thing.we could have an option to start with only either chrome or ie driver. let me know how we can do it using the standard selenium executable,neutral
vvo/selenium-standalone,selenium,2015-08-03T18:38:44Z,for chrome. internet explorer. phantomjs and opera we only need to run the server driver on a specific port and we should be good to go. for firefox and safari we need to spawn the actual browser executable with the webdriver extension preinstalled. for firefox the actual final xpi gets build before publishing selenium-webdriver to npm.my intention is to make this project a dependency of webdriverio but it would require to be able to run the actual driver instead of the selenium server.i am happy to contribute on this one. my plan would be to enhance the api to start the driver for chrome. internet explorer. phantomjs and opera on a specific port. safari should be doable too (even though it still requires a manual step to enable the extension in the browser). for firefox i would fallback on starting a standalone server until i figured out how to build the extension without having selenium-webdriver as a dependency of this project. i hope the selenium guys will publish that xpi separately from the actual node module.,positive
vvo/selenium-standalone,selenium,2015-08-07T06:24:18Z,dandv i am sure this is also the behavior of the standard selenium. maybe raise the issue here or make opera work.thanks,neutral
vvo/selenium-standalone,selenium,2015-08-07T06:25:02Z,so if using original selenium doesn't work either then this is not an issue of selenium-standalone. better check the selenium issues and bugs here,neutral
vvo/selenium-standalone,selenium,2015-08-07T09:42:16Z,can you try:``` shselenium-standalone start -- --debug```,neutral
vvo/selenium-standalone,selenium,2015-08-07T10:03:20Z,sorry can you do:``` shselenium-standalone start -- -debug```instead of --debug,neutral
vvo/selenium-standalone,selenium,2015-08-07T10:04:54Z,if nothing works. try the regular selenium server:  and tell me if it's working,neutral
vvo/selenium-standalone,selenium,2015-08-08T07:11:55Z,regular selenium server works in the same way.first run on clean server is correct. but each next ends with this or similar error.,neutral
vvo/selenium-standalone,selenium,2015-08-08T07:35:28Z,so this looks like a selenium etror. better check for selenium issues,neutral
vvo/selenium-standalone,selenium,2015-08-24T20:15:20Z,option to not throw error when selenium process is already running. i want to setup + start selenium via .install() and .start() in my tests. right now the module throws an error "another selenium process is already running" if we did so before. as i just want to ensure that selenium is up and running after calling .start(). it would be nice to have the option to ignore this error.,negative
vvo/selenium-standalone,selenium,2015-08-30T09:39:05Z,can you setup a testing repo that i can use? thx,neutral
nathanboktae/mocha-phantomjs,mocha,2016-06-08T07:55:52Z,live web site with authentication. is it possible to run `mocha-phantomjs` on a site which requires authentication (for example form based auth. or windows)?,neutral
nathanboktae/mocha-phantomjs,mocha,2016-06-09T19:07:23Z,may be i'm not good at explanation. sorry. yes. i need to run tests in a browser on some site. but this site requires windows authentication.  thanks for your advice. will take a look into different options.,positive
linkedin/dustjs-helpers,jasmine,2014-01-15T00:23:52Z,initial step to switch to grunt build. . adding grunt support to uglify dust-helpers.js and run jasmine unit tests in phantom,positive
linkedin/dustjs-helpers,jasmine,2014-01-15T00:24:58Z,grunting is awesome!,positive
linkedin/dustjs-helpers,jasmine,2014-01-15T01:02:17Z,looks good. but i defer to jimmy on the heavy duty grunt stuff.,negative
mccormicka/Mockgoose,mocha,2016-03-11T16:30:58Z,healyje. you should have much more logging with debug environment variable. i see you are using mocha. and os x. if you are running a single test. please run your test like this ```debug=* mocha test/mytest.js```that should give you a lot more output.,positive
mccormicka/Mockgoose,mocha,2016-03-11T16:44:31Z,healyje in this instance. if you are not getting an error when running a single test. i've seen this before. and someone reported similar issue and resolved it by creating own test bootstrap. mocha doesnt seem to be sandboxing all of the individual tests. which is causing conflicts. i would have to mess with this a bit. hopefully will get to it this weekend.,negative
cisco/node-jose,sauce,2017-03-22T00:35:38Z,hiccup in saucelabs,neutral
cisco/node-jose,karma,2017-03-10T17:20:04Z,build: sourcemaps for karma tests,neutral
marionettejs/backbone.marionette,jasmine,2014-01-10T01:19:06Z,i'd vote for this. we've been using jasmine+sinon successfully for a year now.,positive
marionettejs/backbone.marionette,sauce,2017-10-03T15:50:00Z,fix test-browser. bbview was being created outside of the test scope which is problematic when relying on globals instead of imports for browser testing.i thought saucelabs was just being flaky as it definitely was on and off for a while. but turns out the tests were just broken.,neutral
marionettejs/backbone.marionette,sauce,2017-10-03T16:26:02Z,since this doesn't touch anything in `src/` and because this'll fix tests for every other `next` branch i'm going to merge it on 1,neutral
marionettejs/backbone.marionette,coveralls,2015-05-14T20:20:40Z,jmeas i think coveralls wants test for this change :stuck_out_tongue:,neutral
kriskowal/q,jasmine,2013-12-21T15:35:22Z,fixed bug in q.async yield. see the unit test i added for an example of this bug.`q.async` allows the use of `yield`. unfortunately. the value of the previous expression is not returned. that is. the return value of the yield expression is always `undefined`.so instead of``` javascriptvar value = yield dosomething();```we'd have to use``` javascriptvar promise = dosomething();yield promise;var value = promise.inspect().value;```which is cumbersome.this commit fixes this problem.to properly test the problem. i had to switch jasmine-node to harmony mode. if this is a problem. i could try to rewrite the test to use plain old js functions.,negative
kriskowal/q,jasmine,2013-12-21T16:44:01Z,uh oh. this implies that either the spec has changed. or the implementation has drifted away from the spec.,neutral
mantoni/mochify.js,mocha,2015-08-14T12:56:38Z,report colours. how do you modify the report colours?i use the solarized theme in my terminal (urxvt) and the report colour 90 is the exact same colour as the background. so any text that is this colour is invisible.  this appears to be a very common problem and has quite a bit of coverage on the mocha issues pages.  i have found the easiest way to fix this is to simply require colors from mocha/lib/reporters/base and change any colours set to 90 to 92 (or whatever) at the start of the tests.  however. when using mochify. this hack does not work. can you let me know how i need to modify this hack to make it work with mochify?thanks.,negative
mantoni/mochify.js,mocha,2015-08-14T14:06:45Z,the `mocha` global is available in mochify. this allows you to modify `mocha.reporters.base.colors`.alternatively. you can disable color entirely with `--no-colors` on the command line. or `{ colors : false }` in the api.,negative
mantoni/mochify.js,mocha,2015-08-14T14:41:35Z,that was easy. thanks.,positive
kwhitley/apicache,coveralls,2017-08-23T20:47:47Z,kwhitley not sure how i can activate the redis tests for travis-ci and coveralls? it looks like the missing coverage is caused by the redis tests not running? how do you test the redis scenarios? with a mock for redisclient? the coverage report shows the whole code path with the reds config is not executed.somehow the 'var redis = require('fakeredis')'andvar app = mockapi.create('10 seconds'. { redisclient: db. shorttermmemory: '20 ms'. debug: true })setting for mockapi in the test does not set redis ?,neutral
vector-im/riot-web,standard,2017-07-11T16:16:01Z,no custom tags - i have the standard set of favourites. people. rooms. low priority. and historical.also unable to reproduce on linux. so looks like this may be specific to macos.,positive
vector-im/riot-web,standard,2017-07-13T09:33:27Z,hey ara4n - do you want to prioritise this? seems like an easy win (assuming some cdn can give us effective cache-clearing facilities; i've never used one but i imagine that's fairly standard). but i don't know how pressing a need there is for this right now.,positive
vector-im/riot-web,standard,2017-07-28T20:56:36Z,devdan definitely going to happen eventually. i'm looking at making giving the app a more userful top bar to replace the standard system window chroming which could have proxy settings as an option. currently hard to shove proxy settings somewhere as you cannot reach user settings pre-login or when on the login spinner,negative
vector-im/riot-web,standard,2017-08-07T08:42:26Z,i think this would require the emojis to appear as a grid. as is standard with most emoji pickers. there was discussion at one point to have them in a grid and have the `:shortname:` of each emoji appear as a tooltip.,neutral
MrSwitch/hello.js,karma,2015-04-19T17:14:39Z,delete karma (unused?). it doesn't seem to be used at the moment (`mocha-phantomjs` used instead). i found this a bit confusing. so wondered if we could delete `karma` and references to this from the project.,negative
appium/appium,selenium,2015-04-20T22:59:26Z,proxy settings doesn't work on appium. we have mobile execution platform grid similar to saucelabs grid where we can remotely get connected to devices via appium. i have sample piece of code that runs fine on my local box. however if i run it a separated vm. i need a proxy to enable the outbound traffic. i enabled proxy in the desired capabilities and still not able to connect to a remote device.```        string proxy = "myproxy.com";        org.openqa.selenium.proxy proxy = new org.openqa.selenium.proxy();        proxy.sethttpproxy(proxy)           .setftpproxy(proxy)           .setsslproxy(proxy);        proxy.setproxytype(proxytype.manual);        capability.setcapability(capabilitytype.proxy. proxy);```any idea what the issue might be ?,neutral
appium/appium,selenium,2015-04-21T00:40:20Z,appium doesn't support proxies; it ignores those capabilities,neutral
appium/appium,selenium,2015-04-22T14:10:15Z,permission to start activity denied even after changing activity name. org.openqa.selenium.sessionnotcreatedexception: a new session could not be created. (original error: permission to start activity denied.) (warning: the server did not provide any stacktrace information)even though i change the permission of apk file. once i will run the test case it will change the permission to (-rwx--x--x to -rw-r--r--),negative
appium/appium,selenium,2015-04-22T15:24:47Z,can you provide the appium server logs? i don't think this is a local permissions issue. but the activity being used to start does not have permission to start on the device.,neutral
appium/appium,selenium,2015-04-23T01:17:33Z,currently android does not support javascript execution. you can ask in [forum]( for other ways of finding element.,neutral
appium/appium,selenium,2015-04-23T19:00:51Z,closing due to inactivity.,neutral
appium/appium,selenium,2015-04-24T15:24:03Z,if you could leave the appium server log that would be most useful.as it stands. it looks like the wrong activity is starting: `com.microsoft.office.lync15/com.microsoft.office.lync.ui.login.signinactivity`. what happens if you use that package/activity?you can also try using the `appwaitpackage` and `appwaitactivity` desired capabilities.,positive
appium/appium,selenium,2015-04-27T18:42:59Z,can we add this support ??,positive
appium/appium,selenium,2015-05-01T17:28:57Z,no. this is outside the scope of appium's responsibilities right now. you can always set up your own proxy wherever appium is running.,neutral
appium/appium,selenium,2015-05-05T20:26:52Z,when appium android node runs more than 50 tests . tests are skipped. when more than 50 tests are run continuously in a test suite . some tests are skipped. all of a sudden . this error appears in betweeen the runsorg.openqa.selenium.sessionnotcreatedexception: a new session could not be created. (original error: did not get session redirect from chromedriver) (warning: the server did not provide any stacktrace information),negative
appium/appium,selenium,2015-05-06T12:52:26Z,can you share the logic of how you add retries here ?,neutral
appium/appium,selenium,2015-05-06T18:13:54Z,yeah. though this would be a useful feature. there's no way i know of to dependably keep track of webviews and make sure the same one always gets the same name. if you think about it. it is against the selenium/appium model to name elements as well. the appium server just assigns elements ids and it is up to the test code to keep track of elements and assign them to variables.which appium client do you use? if you use the java client. maybe we could have the contexts be full objects instead of strings. otherwise. you can always use the page object model of testing to assign your contexts to names.,positive
appium/appium,selenium,2015-05-07T21:20:17Z,i'll try to reproduce this myself. should running 50 simple chrome tests on an android emulator do it. or are you using a real device?,neutral
appium/appium,selenium,2015-05-07T21:27:35Z,ultimately the solution will probably be to retry. the only question is whether this should be on the client side or on the appium side.,neutral
appium/appium,selenium,2015-05-07T21:35:08Z,it is on real device that i am getting this error.,negative
appium/appium,selenium,2015-05-08T23:17:10Z,isnt thisfor ios-webit-debug-proxy,neutral
appium/appium,sauce,2015-02-23T17:26:33Z,yes. we will take a look. thanks.  is there any way you can share you app with me? just the build would be fine. eric # saucelabs.com i promise it will be not be shared and can sign nda. etc.,positive
appium/appium,sauce,2015-03-09T18:27:19Z,tarunsujit if you don't see any bugs or issues that intrigue you. feel free to email me: eric saucelabs dot com. let me know what kinds of things you're interested in or are most useful to you and i'll see if i can find some things for you to work on.,positive
appium/appium,sauce,2015-03-10T14:33:34Z,thanks 0x1mason i had dropped you an email : eric at saucelabs dot com. shoot me back with your comments.i am also having a very weird scenario. will drop you my problem in a separate email.thanks!,positive
appium/appium,sauce,2015-03-10T15:40:31Z,1) please share your client code.2) can you share the app? my email is ericsaucelabs.com.,positive
appium/appium,sauce,2015-03-11T15:58:47Z,i will. it would be nice to have different ways to do it. in case one doesn't work (like now!).if it is private. you can email it to isaac at saucelabs dot com. and i won't share. please also provide instructions on how to do the failing drag and drop.,positive
appium/appium,sauce,2015-03-11T18:13:27Z,colinsauce do you have the logs for your test? if it does indeed reproduce this issue. then my idea is off.,neutral
jhipster/generator-jhipster,eslint,2017-03-30T20:37:14Z,you're the author of eslint-plugin-angular!thanks for notifying us. gillespie59,positive
jashkenas/underscore,eslint,2015-04-15T11:38:37Z,i don't know what to do with the code in this case but this will do just to demonstrate the idea.should i just add lint directive to tell that promise is a global object? maybe in .eslintrc file?i'm open to hear review / suggestion / recommendation from you guys.,positive
urish/firebase-server,mocha,2016-09-26T06:41:45Z,in <code>test/server.spec.js</code>. after i commented line81-84. ```serviceaccount: {    'private_key': 'fake'.    'client_email': 'fake'}```which is the serviceaccount part. everything seems to work fine with command `mocha`  but i'm not sure whether this is the point. just my findings.,negative
babel/babel,mocha,2016-08-15T19:05:35Z,this would fix a bug when using babel-register with mocha. right now mocha doesn't provide a way to set things like ignore/only. the `.babelrc` does. but without this fix babel-register does not read these values from the `.babelrc`.,negative
zaproxy/zaproxy,coverity,2016-06-27T13:20:47Z,update coverity_scan from develop. autogenerated pr from zapbot,neutral
zaproxy/zaproxy,coverity,2016-06-27T13:30:23Z,test pr - looks like it was close but not close enough...,neutral
jshint/jshint,jshint,2013-12-13T00:24:22Z,there's already a bug for that.,negative
jshint/jshint,jshint,2013-12-13T02:46:16Z,allows passing an exclude-path. this would allow you to do `jshint --exclude-path .gitignore` and jshint will ignore everything i'm ignoring in git!,neutral
jshint/jshint,jshint,2013-12-13T11:51:03Z,no warnings for trailing commas. it seems like jshint doesn't warn you about trailling commas inside hashes.like the following:```position: {  my: 'bottom center'.  at: 'top center'.  viewport: true.  adjust: { method: 'flip' }. //<----- like this one here} ```this breaks in ie10 and ie11. so it would be a good thing to check these things.,positive
jshint/jshint,jshint,2013-12-13T15:24:31Z,nonetheless. i agree with mafigit. its a good idea to throw a warning for an extra -- invalid -- comma in json syntax.,negative
jshint/jshint,jshint,2013-12-14T17:34:21Z,fix jshint. fix jshint on itself. also: added .jshintrc for easier acces.,neutral
jshint/jshint,jshint,2013-12-14T19:10:04Z,ok. i will update jshint. when accessing travis-ci before sending the pull request. which i did before your message. i saw the results of the latest pull request which were failed.,negative
jshint/jshint,jshint,2013-12-14T19:11:08Z,i just sent another pull request just with the .jshintrc configuration file. would you accept it? i think it reflects poorly on jshint that running on its own code results in errors. when it can be solved so easily.,neutral
jshint/jshint,jshint,2013-12-14T19:25:51Z,added jshint configuration to run jshint standalone.. it is strange that running    jshint src/jshint.jsyields a lot of errors. this patch fixes it adding jshint configuration.,negative
jshint/jshint,jshint,2013-12-16T16:05:33Z,thanks. i tried the indent: false initially (no luck). also tried the "w032" but keep getting an error indicating that it's a bad option `line 0. col 0. bad option: 'w032'.`here's my command line:`jshint --config options.json test.js`and my options file:```{  "w032" : true}```so have no idea where i'm going wrong...,negative
jshint/jshint,jshint,2013-12-17T20:00:36Z,antonkovalyov i think we can re-open this issue as this format inside .jshintrc no longer has any effect:  "-w014": true.  "-w069": true,positive
jshint/jshint,jshint,2013-12-18T00:10:20Z,extended `asi` option to be safer. when using automatic semicolon insertion there arecertain edge-cases that you need to keep in mind.namely new lines starting with either `(`. `[` or`/` because those may mistakenly be interpreted ascontinuations of the previous line.if you enable the 'safeasi' option jshint willwatch out for all the potentially unsafeedge-cases. so you don't have to.---closes #1395,neutral
jshint/jshint,jshint,2013-12-18T00:15:24Z,hi! thanks for your patch. i haven't looked at the code yet (merging another patch atm) but this should be part of `asi`.,positive
jshint/jshint,jshint,2013-12-18T00:23:21Z,makes sense. it's getting late here. so  -- unless someone says otherwise -- i'll merge `safeasi` into `asi` tomorrow.,neutral
jshint/jshint,jshint,2013-12-18T00:24:27Z,nothing was changed since then—are you sure this is not a local problem? can you give me example of your code _and_ your .jshintrc?,negative
jshint/jshint,jshint,2013-12-18T00:32:43Z,one use-case came to my mind: if someone really knows what they are doing. then they might want to disable this bit of security feature while still having asi:true. if they were controlled by the same option that would not be possible.how about. as a middle ground. have this implicitly enabled when someone sets asi:true. but they could still explicitly disable it if they wanted to.could we do that?,negative
jshint/jshint,jshint,2013-12-20T01:13:22Z,i don't know why would anyone want to write `return\n[1.2.3]` for example. there are instances when it is okay to omit semicolons before `[` for example but i think we should just check for those.,neutral
jshint/jshint,jshint,2013-12-21T15:11:03Z,js that breaks jshint. with this js:rect(80.70.60.240);rect(------. 70.60.240);that results in an error "this.right is undefined". in jshint and our own site.(yes. i know. that's not good js. but it's from a student.),negative
jshint/jshint,jshint,2013-12-23T08:17:14Z,fixed.,neutral
jshint/jshint,jshint,2013-12-24T23:24:42Z,why can't you put `"-w058": true` into your .jshintrc?,neutral
jshint/jshint,jshint,2013-12-25T10:50:31Z,ah. i use /\* jshint ... */ within a scope quite a lot and it behaves as expected. what you want sounds ok.,neutral
jshint/jshint,jshint,2013-12-25T21:54:33Z,extend option overwrites options in the wrong direction. given the following configuration:b.jshintrc```{    maxlen: 10}```a.jshintrc```{    extend: 'b.jshintrc'.    maxlen: 20}```produces `maxlen:10` in `a.jshintrc`. this is because the arguments to _.extend are backwards here:`_.extend(config. exports.loadconfig(path.resolve(config.dirname. config['extends'])));`as the underscore docs say in  extend_.extend(destination. *sources) > copy all of the properties in the source objects over to the destination object. and return the destination object. it's in-order. so the last source will override properties of the same name in previous arguments.,negative
jshint/jshint,jshint,2013-12-26T17:38:35Z,jshintrc "extends" fix - for master. switched the _.extend call to _.defaults. as to properly provide the intended benefit. adjusted the tests to ensure that the files are merged properly,neutral
jshint/jshint,jshint,2013-12-26T17:43:36Z,didn't notice #1441,neutral
jshint/jshint,jshint,2013-12-28T01:20:11Z,jshint is moving away from styling options.,neutral
jshint/jshint,jshint,2013-12-28T01:24:15Z,i think this will be different than what most people expect for [.jshint|.git]ignore files.,neutral
jshint/jshint,jshint,2013-12-28T01:32:59Z,this is no longer an issue i believe.,neutral
jshint/jshint,jshint,2013-12-28T02:06:00Z,we don't add any more style options sorry.,neutral
jshint/jshint,jshint,2013-12-28T02:21:29Z,ie10 and ie11 both implement es5 where trailing comma is legal. you need to use `es3` as nschonni said.,neutral
jshint/jshint,jshint,2013-12-30T22:18:53Z,+1. getting this a lot in [koa](),neutral
jshint/jshint,jshint,2014-01-05T11:40:46Z,we have finally refactored the code and hooked up the setting via a global `.jshintrc` file.,neutral
jshint/jshint,jshint,2014-01-08T19:02:57Z,i have the same needs. i want to extend my jshint options for my `test` directory so that i can define my test framework's globals.jamesarosen you might also want to define linting rules for a file glob pattern such as `test/**/*.spec.js`. in case you have files in that directory which won't be run under by a testing framework.,neutral
angular/angular.js,sauce,2014-05-28T22:43:10Z,chore(travis/ci): add verbose logging to sauce connect output,negative
angular/angular.js,sauce,2014-05-29T01:01:25Z,does the verbose flag only output anything if something goes wrong? the output looks pretty much the same as usual. maybe that's a good thing. though.,positive
angular/angular.js,sauce,2014-05-29T01:16:04Z,it outputs a lot of stuff. but it's hidden within the expando for the 'print logs' step at the end.,neutral
angular/angular.js,sauce,2014-05-29T01:20:51Z,oh i see. i wasn't looking at the tail of the log. it looks okay to me. then.,neutral
angular/angular.js,karma,2014-03-23T13:14:48Z,update index.ngdoc. for installing karma. the command `npm install` should probably be `npm install karma`.,neutral
angular/angular.js,karma,2014-03-24T22:24:36Z,thanks for the pr. but this change is not correct.karma-cli is not required to run the tests. it's just an extra tool that you can use if you want to run karma manually without using the tests.sh script provided.,neutral
angular/angular.js,karma,2014-03-26T00:59:47Z,made a few changes and landed as 273e34e3de531020f0f42180116a8256392272ff. thanks!,positive
angular/angular.js,karma,2014-03-26T02:25:32Z,docs(guide/unit-testing): correct link. request type: docshow to reproduce: component(s): impact: largecomplexity: smallthis issue is related to: **detailed description:****other comments:**docs not building. changed karma-ng-html2js-preprocessor to markdown link.,neutral
angular/angular.js,karma,2014-04-04T13:19:37Z,phonecat now uses npm scripts to run karma and protractor:```npm test```and```npm run protractor```the tutorials have been updated accordingly.,neutral
getsentry/sentry,selenium,2017-06-23T16:49:09Z,ci: bump percy/selenium reqs,neutral
asciidisco/Backbone.Mutators,sauce,2014-03-27T02:54:04Z,the travis build failed because of a missing sauce labs api key :> invalid api_key provided. please use your access key to start sauce connect. not your password.you can find your access key in your account page:,negative
harc/ohm,eslint,2016-06-30T19:57:30Z,no. there's no strong reason to use one or the other. the `/* global $ &*/` just tells eslint not to complain that it's undefined -- i guess it used to be defined globally. but isn't anymore.i considered moving it into `domutil`.,negative
istanbuljs/istanbuljs,istanbul,2018-03-05T00:53:29Z,> another popular monorepo pattern names this internal directory as "node_modules" rather than "packages". i think this is a tremendously bad idea. the directory name node_modules has an extremely well-defined meaning in node. so much so that it can't even be renamed. to use that name for any another purpose would confuse many tools that are well rooted in the conventional meaning. i think it would be a mistake for istanbul to cater to what the pouchdb team is doing.> an overgenerous regexit's perfectly generous in that it forbids the use of this folder for another purpose. it's actually enforcing the rule that it should be enforcing.,negative
DefinitelyTyped/DefinitelyTyped,standard,2017-03-21T18:46:38Z,use js doc comments for some fs functions in node typings. some fs functions in node's d.ts use `/*` instead of `/**` for their doc comments. this change converts them to use the standard `/**` jsdoc comment syntax,neutral
DefinitelyTyped/DefinitelyTyped,standard,2017-03-21T18:46:39Z,*node/index.d.ts*to authors (definitelytyped/definitelytyped microsoft typescript (account can't be detected)). could you review this pr?:+1: or :-1:?checklist* [ ] pass the travis ci test?,neutral
DefinitelyTyped/DefinitelyTyped,standard,2017-03-21T20:50:16Z,can you take a look at the failures in the ci server?,neutral
DefinitelyTyped/DefinitelyTyped,standard,2017-03-21T22:19:56Z,the error is:```pg-query-stream-tests.ts(13.12): error ts2339: property 'on' does not exist on type 'promise<queryresult>'.pg-query-stream-tests.ts(16.12): error ts2339: property 'on' does not exist on type 'promise<queryresult>'.```which seems to me like a different issue. i see the same error on master after making any change at all to the `node.d.ts` file,negative
DefinitelyTyped/DefinitelyTyped,standard,2017-03-22T17:38:14Z,mjbvz can we close this pr. since #15298 seems to cover more files.,neutral
DefinitelyTyped/DefinitelyTyped,standard,2017-03-22T19:34:13Z,paulvanbrenk yes. i'm fine closing this as long #15298 gets merged in,positive
DefinitelyTyped/DefinitelyTyped,standard,2017-03-23T20:05:08Z,if you drop `readonly` then people who are using the react types with regular react (and/or any number of other state-management systems aside from mobx) are exposed to errors. i don't use mobx in my huge project and i appreciate the compiler errors when someone makes a typo and accidentally uses `this.state.foo = bar`.if there is an unavoidable tradeoff between standard react and non-standard react usage the standard react types should lean towards the former.,negative
DefinitelyTyped/DefinitelyTyped,standard,2017-03-31T13:45:36Z,you have a ithenable (if i remember correctly) which can be set to promiselike. but for async/await to be used one need to use promise and not promiselike unfortunately. my question is really if you want the interface to try to be backwards-compatible (with some strange interface baggage for historic reasons) or if we should make a clean break and only use the standards stuff ?,neutral
tombatossals/angular-leaflet-directive,karma,2014-10-27T16:42:22Z,it seems that the "leafletdata" object is not correctly injected. but it's difficult to debug without the full code.are you using karma-jasmine in your project?,neutral
NasExt/DependentSelectBox,standard,2018-08-14T15:56:35Z,ajax request fired multiple times. today. i implemented this neat library into my project. the implementation itself was very simple. however. one head-scratcher occurred. i have a form in which there are 3 dependent select boxes. each dependent on:- the very first select box (without any dependency) in the form- one checkbox toggling `true` / `false` variant- value from previous dependent select boxwhen i make a change to any of registered parents. the ajax request gets fired as many times as the count of all select boxes that need to be changed due to a change of their respective parents. every change made to the form therefor takes a ridiculous amount of time and slows down the development and testing.is this a standard behavior or should this extension be able to get all the data in single request?,negative
NasExt/DependentSelectBox,standard,2018-08-14T18:30:03Z,hi. in dev speed is lazy (tracy reloaded request by request). its true. but in production mode its ok. i have forms with 5 dependent boxes and changes are instant.,negative
NasExt/DependentSelectBox,standard,2018-08-14T18:57:04Z,aleswita thanks for your reply. i have tried it in production mode as well and yes. it is much faster. anyway. i would like to know if it's intended that there are separate ajax requests for each select box. the client-side code looks like it is expected behavior. i just want to be sure i'm not doing anything wrong.,negative
NasExt/DependentSelectBox,standard,2018-08-14T19:39:56Z,yes. its expected behavior.,neutral
senecajs/seneca,eslint,2017-05-03T09:13:02Z,move to prettier and eslint recommended linting. also. action caching replaced with history,positive
