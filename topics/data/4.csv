bower/bower,coveralls,2014-11-20T18:36:49Z,seems like coveralls failed to run on this pr. hence travis fail ...,negative
hakimel/reveal.js,jshint,2013-06-16T21:26:18Z,fixed jshint test failure,negative
webtorrent/webtorrent,standard,2015-05-27T07:26:11Z,this is more of an  issue than a webtorrent one.it looks like we can support seeding folders (both via drag-and-drop and the file upload input) in chrome. the non-standard filesystem api makes this possible. other browsers don't have any mechanism to do this. as far as i can tell.i'm working on a pr to make this work in chrome right now.,neutral
lindell/JsBarcode,coveralls,2016-07-13T15:47:17Z,fix coveralls coverage,neutral
infernojs/inferno,uglify,2017-10-15T17:56:31Z,as lukesheard mentioned. you need to replace "process.env.node_env" with "production" and then uglify the code after that. closing. its working as intended.,neutral
jprichardson/electron-mocha,mocha,2016-12-14T15:54:38Z,you're right that's odd. as-cii did we miss something when we pulled #91?anyway. artemave this looks good. i'd be happy to merge a pr. i wonder if we could eliminate the `firstrun` variable though? the `ready-to-show` event should fire just once initially. not on subsequent reloads i believe (we can use `.once` instead of `.on` to express this expectation more clearly. too) so we might not need it... (but i can look at that later). also. let's use the `mocha-` prefix for the event name. i.e.. `mocha-ready-to-start` or something like that?),negative
jprichardson/electron-mocha,mocha,2016-12-14T16:04:53Z,trigger 'mocha-start' on page reload. otherwise tests only run once on the initial window open and nothing happens on page reload.fixes #96,neutral
request/request,coveralls,2015-05-14T15:53:12Z,actually there might some other issue with coveralls because i'm not seeing the code for my own projects either. still the above procedure can fix the github's status api at least.,neutral
pixijs/pixi.js,eslint,2017-02-08T12:34:08Z,sorry to come here after a long time.indeed your container will scale when you change width/height as so```    set width(value) // eslint-disable-line require-jsdoc    {        const width = this.getlocalbounds().width;```i had the very same issue few days ago while trying to use **autolayout.js** with pixi and the solution is pretty simple. say you have a scene. that has a container that has a sprite like this-scene--container (half size of scene and center-aligned)---sprite(half size of container and center-aligned)if scene is {x:0.y:0.width:200. height:200}then contianer will be {x:50.y:50.width100.height:100} |50->container(100)->50|hence sprite will be {x:25.y:25.width:50.height:50}  |25->container(50)->25|now when the screen resizes. or you just want to resize  you basically do1) apply x.y for containers and dont apply width and heightthat means that the _containers will only move..._ 2) pass the width and height of the container to the sprite so that it knows how much  _sprite should resize and move_ and apply width.height.x.y based on its parent 3) although you did not change the width and height of container... you passsed them to the sprite... the sprite causes the actual width and height (localbounds) to be changed back.,positive
pixijs/pixi.js,eslint,2017-02-15T16:35:22Z,fix doc: add missing type of parameter. add `htmlimageelement`.breaking line because the line is too long (eslint reports error),negative
pixijs/pixi.js,eslint,2017-02-22T22:31:41Z,yes. you do. i searched at the end of the eslint file thinking were ordered alphabetically.,neutral
dnajs/dna.js,mocha,2017-08-22T01:54:30Z,create mocha test for example on in readme,neutral
dnajs/dna.js,mocha,2017-08-22T02:55:35Z,created mocha test for title and author. issue #49,neutral
dnajs/dna.js,mocha,2017-09-12T03:08:05Z,put all mocha tests in spec folder,neutral
dnajs/dna.js,mocha,2017-09-12T03:20:02Z,moved mocha test to spec folder. issue #53,neutral
Zarel/Pokemon-Showdown,mocha,2015-06-18T23:58:16Z,the issue is that you are trying to read it with english grammar. when it was written like that so that it's read as a hierarchy.this is best showcased by using mocha's spec reporter.`mocha -r spec`,positive
serverless/serverless,eslint,2016-08-17T09:59:49Z,flomotlik it seems that my local repo it's not updated with the latest master branch . merging that right now and updating tests where it's needed with the latest mocha and eslint npm packages standards,neutral
serverless/serverless,eslint,2016-09-07T06:46:28Z,ok. simple change but i'm having a bit of trouble with eslint on this one. the regex string is now longer than 100 characters.is that ok to add an exception to the rule for this line or you guys have another suggestion?,neutral
pugjs/pug,mocha,2013-07-10T07:27:53Z,hah. well that was easy. thanks for the pointer on where to look for code changes! saved me several hours of dissecting the code base.pull request submitted with an extra few test cases. mocha output:```$ mocha  ․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․  ․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․․  ․․․․․․․․․․․․․․․․․․․․․․․․․  138 passing (3 seconds)```,positive
pugjs/pug,mocha,2013-07-10T10:23:00Z,can we have the readme change in a separate pull request?i think this is probably the wrong place to teach people to use `git` but also. it's simpler than you make out (and more consistent across other node.js modules).install dependencies:```npm install```run tests:```npm test```mocha gets automatically installed locally and therefore becomes available to npm's scripts (even though it won't work if you just type `mocha`).,negative
pugjs/pug,coveralls,2015-05-27T10:11:06Z,that's only coveralls. so i'm not too worried about that error.  the actual tests passed.,negative
Azure/autorest,standard,2016-11-18T22:27:53Z,ugh. had a less than thrilling conversation about that.turns out they don't want the canonical schema to include `$schema` because... they think it provides sub-standard validation support. and you should be required to use a tool that supports swagger and not json.,positive
airbnb/javascript,eslint,2016-08-16T23:06:25Z,awesomeaniruddh thanks. that'd be great! since we now basically forbid var in its entirety. we should focus this guide section on `const` and `let`. and make sure to link to the relevant eslint rule.,positive
airbnb/javascript,eslint,2016-08-17T00:21:21Z,ljharb there doesn't appear to be a relevant eslint rule.,neutral
airbnb/javascript,eslint,2016-08-17T20:35:55Z,hmm. interesting. i think `one-var` and `no-undef` are related. but don't directly forbid this usage. perhaps we should ask eslint to create a rule to specifically catch this?,negative
airbnb/javascript,eslint,2016-08-18T17:36:52Z,remove misleading reference to one-var eslint rule. this eslint rule does not enforce this style guide rule. i believe thatreferencing it here will cause people to believe that this is enforcedvia linting when it is not. as far as i know. there is no rule thatcurrently enforces this. but it would be nice to add one.,negative
airbnb/javascript,eslint,2016-08-19T17:09:06Z,callumlocke rather than an entry point. the current suggestion i'm entertaining would involve still extending "airbnb". but setting an environment variable in your `npm run-script` as part of your `eslint` command.,neutral
airbnb/javascript,eslint,2016-08-24T12:00:21Z,how have you configured linting for files located in project root? as an example we have a gulpfile.js in the root of our frontend project and it is used to build our bundle.js which is the actual shippable end result. gulp creates that bundle and it belongs to devdevepencies but the linter config makes that an error. one solution could be adding `.eslintrc` inside our ./src folder which has this rule enabled. and another .eslintrc in the project root which allows importing devdependencies. to my mind that sounds like the most correct approach as tests are not the only supporting code for the code base you might have.,negative
airbnb/javascript,eslint,2016-08-25T17:02:33Z,it looks like you're using a globally installed eslint - try `npm uninstall -g eslint` (or check the "local" box in atom).,neutral
airbnb/javascript,eslint,2016-08-25T17:21:41Z,haha thats why i used `eslint-config-airbnb-base` - don't think it has any of the react stuff,neutral
airbnb/javascript,eslint,2016-08-27T16:12:01Z,shinzui that would need to be done in core eslint. and i don't think one can statically know in a reliable manner that a given "reduce" is `array#reduce`.,neutral
airbnb/javascript,eslint,2016-08-31T01:48:15Z,and you don't have any other `.eslintrc` files anywhere. nor any inline eslint override comments in the file you're trying to lint?,neutral
airbnb/javascript,eslint,2016-09-04T16:04:46Z,temporary workaround for my project that is using eslint would be to add the rule to `.eslintrc`:```{  "extends": "airbnb".  "rules": {    "react/require-extension": "off"  }}```,neutral
airbnb/javascript,eslint,2016-09-05T23:09:03Z,gabro there's `no-underscore-dangle` which prevents it on identifiers - it seems like that would be a useful addition to the core rule. rather than a separate plugin. you should file an issue requesting it on `eslint` itself :-),positive
airbnb/javascript,eslint,2016-09-07T06:11:05Z,mcfiredrill no idea - please feel free to contribute to `eslint-plugin-import`. however. and we'd love to use the rule once it's written!,positive
airbnb/javascript,eslint,2016-09-07T06:13:45Z,since jscs is now deprecated and merged with eslint. there's no value in maintaining the jscs preset any further.,neutral
airbnb/javascript,eslint,2016-09-07T06:14:01Z,at this point. `eslint` is the defacto standard. and we highly recommend using that.,neutral
airbnb/javascript,eslint,2016-09-07T06:18:44Z,closing this for now - if an eslint rule exists somewhere that can help lint against this. we'll happily use it.,positive
airbnb/javascript,eslint,2016-09-07T15:59:35Z,you have to explicitly specify the parser in your `.eslintrc` as `babel-eslint` - we don't use that parser in our config.object rest/spread is still stage 2. and our style guide does not yet recommend its use.,neutral
airbnb/javascript,eslint,2016-09-08T08:04:12Z,array rest/spread is in es6/es2015 - you don't need babel-eslint for that. it's _object_ rest/spread that's just a proposal.the reason we don't use < stage 3 proposals is simple: they're not finalized. and they're subject to change. or to be withdrawn entirely. we want to use javascript. and proposals aren't javascript yet.,neutral
airbnb/javascript,eslint,2016-09-09T19:32:18Z,that helps make it usable. but i'm seeing problems with eslint-plugin-import; after settings `react/require-extension: off` all of my imports are throwing `import/no-unresolved` errors for every import (both absolute and relative). any ideas?,negative
airbnb/javascript,eslint,2016-09-09T19:34:16Z,- if not. it's related to your project's eslint configs. and not to that rule,neutral
airbnb/javascript,eslint,2016-09-12T20:29:59Z,i don't understand this rule. i thought `console.debug` was meant for debugging. messages that should be removed later. but why would there be no place for `console.info` or `console.warn` in production apps? for example create react app uses console.warn to show eslint warnings in the console.,negative
strongloop/strong-tools,eslint,2016-09-09T13:37:10Z,eddiemonge but why does this matter? its only an editor warning. i assume. its rare to open the js files from an npm install. it happens when trying to debug. but when you open an editor on a package internals. you are going into the guts of a package. you should be prepared for this.also. its not clear. are you reporting that strong-tools itself has a .eslintrc. or that slt-release does not hide the .eslintrc (as it does for the test and .travis.yml) when it releases? because i'm pretty sure that almost every npm package we publish has a .eslintrc.and what about when your editor complains that mocha or tap isn't installed. because it needs them to run the unit tests. because your editor has the great feature of showing test coverage inline. as it does eslint? we aren't going to add the test/ back into the pubished package!this is a rathole down which i'm not sure we want to go.,negative
strongloop/strong-tools,eslint,2016-09-09T20:32:17Z,eddiemonge please list the things you think strong-tools can automatically not include. otherwise this is not actionable.and i want to point out that tiny config files. like .eslintrc. have no measurable impact on package size.particularly when put along side the ludicrously large legal notices we are putting into all the packages. those might be close to 20% of the on disk size of apiconnect. iirc.,negative
chaijs/chai,mocha,2013-05-17T07:38:55Z,> chai's should/expect syntax will not work in all browsers as it depends on es5 getters/setters.ah okay. so that is how `expect(blah).to.be.null` works without a function call at the end! i always thought that it was just returning class instances... my bad.> the tests themselves are written with the mocha framework which has a tap reporter.> > chai is an assertion library and does not know anything about the state of tests. in an over-simplification. it throws semantic errors to be interpreted by a testing framework (if present).ah gotcha. so this pull request is just about getting the test suite for chai working in testling. not chai itself. so for myself. i'd just have to make sure whatever test runner i use supports tap. got it.---so all in all. if we want ie support. we got to look elsewhere. or do something radical like rewriting chai to use function calls instead of getters/setters. so `expect(blah).to().be().null()`,negative
chaijs/chai,mocha,2013-05-29T17:59:25Z,should "foo".should.be.djlksajdkla throw an error?. at the moment. all of the tests using invalid assertions like `"foo".should.be.djlksajdkla`  silently succeed (i'm using karma + mocha). is this expected behaviour?,positive
chaijs/chai,mocha,2013-05-29T19:58:00Z,unfortunately yes... see #147,neutral
chaijs/chai,mocha,2013-06-08T16:37:35Z,i ran node's mocha which passes the tests but i see travis balks on the browser tests. i'm on windows so i cannot run make to verify this (no grunt love here? :).,positive
chaijs/chai,mocha,2013-06-09T00:03:13Z,actually travis/make is configured to handle all the build output files itself and you should not be committing them in prs. i think mocha or mocha-phantomjs is having issues... we had to downgrade our mocha recently due to incompatibility but perhaps it has resurfaced. i will look into it further.,neutral
chaijs/chai,mocha,2013-06-12T13:06:34Z,a) if you are referring to the visual display (which i am assuming you are). this is a problem with mocha's object diff display mechanics ... likely not displaying `undefined` properties. you would search through [visionmedia/mocha](/visionmedia/mocha) issue queue or open one there with this report.b) if you are referring to the fact that this assertion should have passed. it is correct in not passing as you have a `innererror` property in one of the objects but not the other. that works as expected.closing this issue as it is either unrelated to chai (a) or works as expected (b).,neutral
chaijs/chai,karma,2014-01-05T08:29:00Z,karma...,neutral
chaijs/chai,karma,2014-01-05T08:45:24Z,works but needs `karma-phantomjs-launcher` added to the dependencies list,neutral
chaijs/chai,karma,2014-01-05T08:55:13Z,i had it using `canary` because `karma-sauce` wouldn't run alongside the karma in npm. i haven't checked recently to see if this works.if it still doesn't work with the karma from npm. perhaps we could lock to a commit or tag from ...,neutral
groupe-sii/sonar-web-frontend-reporters,eslint,2017-04-26T20:14:51Z,.eslintignore not read when generating eslint report. i have .eslintrc and also .eslintignore file.the .eslintignore file is not being read by the sonar reporter. how do i specify ignorepaths/files in the .srreporterrc ?i need to specify multiple files/folders hence a way to point to .eslintignore while running eslint would help,negative
velesin/jasmine-jquery,jasmine,2014-01-09T19:09:36Z,shenst1 i can't get them to play nicely. as travisjeffery mentioned. there are a few differences. so until those are resolved/accounted for. they probably won't work together properly.,negative
velesin/jasmine-jquery,jasmine,2014-01-09T19:13:01Z,travisjeffery oh man. i just noticed this is a pr not an issue. i have not tested/run my code against your changes. i was running everything against the latest release. please ignore my concerns as they probably are accounted for already.,negative
velesin/jasmine-jquery,jasmine,2014-01-15T14:15:51Z,update jasmine-jquery.js. with this the tests will pass with jquery 2,neutral
velesin/jasmine-jquery,jasmine,2014-01-16T13:56:48Z,the tests do not specify if the order of the elements in the jquery object matter in terms of two objects being equal. from experimenting it seems that that two objects with the same elements in a different order are considered equal. my concern is the implementation defers to the behaviour of the `is` function on the jquery object which also does not appear to define its behaviour in relation to the order of elements. and therefore could change and break tests relying on this behaviour.should a test be written to make this explicit?,neutral
velesin/jasmine-jquery,jasmine,2014-01-24T18:50:29Z,jasmine-jquery matchers don't working when jasmine-jquery is loaded using require. if you use the jasmine gem and then require(['jasmine-jquery']). the addmatchers function that is added to the list of beforefns (using beforeeach)  never gets called. and the matchers are not made available to the expectation object.,neutral
velesin/jasmine-jquery,jasmine,2014-01-27T04:43:48Z,also getting this.,neutral
velesin/jasmine-jquery,jasmine,2014-01-29T10:53:14Z,indeed. if i load jasmine-jquery via require.js. it works. sorry i did not think of doing that at first.,neutral
velesin/jasmine-jquery,jasmine,2014-01-29T17:49:08Z,fixed how jasmine gets loaded through jasmine gem. this still doesn't fix the problem. but it appropriately loads dependencies based on availability,negative
velesin/jasmine-jquery,jasmine,2014-01-29T17:49:29Z,that code would certainly not work. but this is closer: #175,neutral
velesin/jasmine-jquery,jasmine,2014-01-29T19:31:42Z,yeah jasmine-jquery v2+ works with jasmine v2+ only,neutral
velesin/jasmine-jquery,jasmine,2014-01-29T22:37:47Z,closing this then. there's no issue with jasmine-jquery. you're using the wrong jasmine/jasmine-jquery combo.,negative
velesin/jasmine-jquery,jasmine,2014-02-03T03:27:23Z,since jasmine-jquery v2 + jasmine v2 it's toequal. jasmine v2 doesn't support overriding built-in matchers,neutral
velesin/jasmine-jquery,jasmine,2014-02-06T22:16:20Z,this issue turned out to be caused by the element sticking around since it was not managed by jasmine-jquery fixtures. for some reason i thought my testrunner was resetting the dom after each test but it was not and this has revealed some other issues as well.now i do `setfixtures(element);` and manually clean up other stuff before each run.,neutral
pillarjs/send,eslint,2016-10-19T13:50:46Z,dougwilson awesome! i agree. it's an ugly fix haha. sure no problem. get back when you have time so we can work on this.^^ indeed poc! wanted you to see how it would work in koa.ah did i mess up the format? (i did run the eslint. didn't get any errors. or are you meaning something else?).yea need to write tests as well. i do agree.,negative
ninjadev/nin,eslint,2017-04-28T16:26:00Z,add more nin-globals to default eslintrc,neutral
raszi/node-tmp,istanbul,2018-04-14T16:23:02Z,robinhouston good find! thanks. in fact. on master we can see```      if (opts.discarddescriptor) {        return fs.close(fd. function _discardcallback(err) {      ...     }      /* istanbul ignore else */      if (opts.detachdescriptor) {        return cb(null. name. fd. _preparetmpfileremovecallback(name. -1. opts));     }```something must have gone wrong with the latest merges/rebases...,negative
videojs/video.js,standard,2016-12-22T14:13:33Z,i think it makes sense to keep things as similar to the current state as possible. or adhering to the standard (in the case of `src()` and `currentsrc()`).as an aside. the `blob:` url is a consequence of hls. right?,neutral
videojs/video.js,karma,2014-01-17T19:41:12Z,karma example is missing util. karma tests fail using the example karma.conf. because the util file is not included.,negative
videojs/video.js,karma,2014-01-21T16:49:00Z,i've updated the pr to include dependencies on all of the supported launcher packages. and configuration for them in `karma.conf.js.example`.,positive
videojs/video.js,karma,2014-01-24T00:38:44Z,thanks christophercurrie!bcjwhisenant do you want to give this a look since you're most familiar with the karma work?,neutral
videojs/video.js,karma,2014-01-24T00:40:50Z,thanks!,positive
mongoosastic/mongoosastic,eslint,2016-01-30T10:08:21Z,could you add documentation and tests for this feature? thanks.also. remove the custom eslint rule on the header.,neutral
valor-software/ng2-tree,codecov,2017-10-11T09:30:10Z,hi rychkog  could you help me understand what is the problem with codecov?is ti want me to write tests for the `loadnextlevel`. where should i add them.i haven't seend any tests for the other emitters.can you please help?thanks.tmaster,positive
babel/babel-loader,eslint,2017-03-09T16:23:45Z,it might be fine to just remove the few style rules we have in eslint-config-babel?,positive
EvanHahn/HumanizeDuration.js,standard,2016-05-11T11:03:09Z,add option for abbreviated units. this library is so excellent! after seeing that moment.js did not support granular display. i was very glad to see this.i am wondering if it wouldn't be too difficult to implement abbreviated units of time. for example:- s for seconds- m for minutes- h for hours- d for days- w for weeks- ? for months- y for years(i'm sure there's a standard for this somewhere).the reason why i'm asking is because i'm using this library for sending push notifications and it would save a lot of space if abbreviations could be used.,positive
EvanHahn/HumanizeDuration.js,standard,2016-05-11T14:18:56Z,you can do this by creating a humanizer with a new language. like so:``` jsvar shortenglishhumanizer = humanizeduration.humanizer({  language: 'shorten'.  languages: {    shorten: {      y: function() { return 'y' }.      mo: function() { return 'mo' }.      w: function() { return 'w' }.      d: function() { return 'd' }.      h: function() { return 'h' }.      m: function() { return 'm' }.      s: function() { return 's' }.      ms: function() { return 'ms' }.    }  }})shortenglishhumanizer(15600000)  // '4 h. 20 m'```does that help?,neutral
EvanHahn/HumanizeDuration.js,standard,2016-05-11T20:35:35Z,no worries!,positive
prettier/prettier,eslint,2017-09-14T07:17:59Z,azz well i did set `eslintintegration: true` so the case in the above screenshot should work. shouldn't it? 🤔,neutral
prettier/prettier,eslint,2017-09-14T10:37:58Z,lydell uhm wait a minute. i want the eslint rule to be enforced. i don't expect that prettier is adding the brackets. my issue is that **prettier removes the brackets when i add them**.can i change this?,negative
prettier/prettier,eslint,2017-09-16T15:22:50Z,i feel like the `parser` option is a bit of a leaky abstraction. it would be nice if the option was called `language` or something like that so you can pass `--language scss` and we'd figure out which parser to use.`parser` | `language` -|-babylon|javascriptflow|flowtypescript (actually `typescript-eslint-parser`)|typescriptgraphql|graphqlpostcss|csspostcss-scss|scsspostcss-less|lessparse5|htmljson (actually `babylon.parseexpression`)|jsonunfortunately changing this would obviously be an api breaking change.,negative
prettier/prettier,eslint,2017-09-17T23:03:44Z,is there any way to override this setting? it seems to be ignoring `"newline-per-chained-call": ["error". { "ignorechainwithdepth": 3 }]` in eslintconfig.,neutral
prettier/prettier,eslint,2017-09-17T23:08:01Z,prettier doesn't respect eslint config whatever. you should turn off that rule.that being said. could you provide an example?,positive
prettier/prettier,eslint,2017-09-17T23:14:13Z,prettier-eslint will run prettier --write. then eslint --fix. if you temporarily turn off eslintintegration. then reformat. is it still formatted the same?,positive
prettier/prettier,eslint,2017-09-17T23:28:55Z,looks like prettier will put it on multiple lines. and eslint --fix isn't aggressive enough to restore it to one line. both tools are working as intended. there's just a bit of incompatibility between them.,positive
prettier/prettier,eslint,2017-09-18T18:19:19Z,nice. so. to sum up. you've made prettier-eslint but for stylelint.  feel free to send a pr if you want prettier-stylelint in the "related project" section of the readme.note that the css support in prettier is far from done. if you find any bugs or ugly formatting. totally feel free to open issues :),positive
prettier/prettier,eslint,2017-09-20T04:26:58Z,could you take a look at what eslint does when you enable their flag to enforce all trailing commas?,neutral
prettier/prettier,eslint,2017-09-20T04:46:14Z,with the eslint rule `comma-dangle` set to `["error". "always"]`. eslint doesn't seem to care if there's a comma there; it prints no errors with it there. and prints no errors without it there. if you set it to `["error". { "functions": "always" }]`. then it requires it. but it also changes it to this when run with `--fix`:```js[].foreach(x. =>  foo(x. someparticularlylongparameternametomakethislineoverflow.).);```which is actually a syntax error. so i'd be surprised if people are using `["error". { "functions": "always" }]` (at least without `arrow-parens` to protect them from the syntax error).,negative
prettier/prettier,eslint,2017-09-20T11:36:07Z,lydell why not do it as an option? while there is an `eol-last` rule in eslint i think it's good idea to have the similar option for prettier. not to format file twice.,neutral
prettier/prettier,eslint,2017-09-22T00:24:51Z,prettier would not change your single-quoted strings into template literals. so this may be an eslint rule. if you are using the prettier eslint integration.,positive
prettier/prettier,eslint,2017-09-22T05:57:40Z,i still works. yes,neutral
prettier/prettier,eslint,2017-09-27T23:17:02Z,> you mean kinda like how eslint works? no configuration. no linting. i think eslint and prettier are fundamentally different applications. with eslint you are required to opt **in** to a set of rules. so it makes sense not to run it if there's no config. prettier on the other hand is opinionated and designed to run with no configuration.,positive
prettier/prettier,eslint,2017-09-28T17:43:56Z,it's definitely the config file doing it.when i have a `.prettierrc` file with these options. it breaks:```{  "eslintintegration": true.  "semi": false.  "singlequote": true}```when i have no such file. it works.the `eslintintegration` option is used by some editors as a setting lookup. and previously didn't cause any trouble.,negative
prettier/prettier,eslint,2017-09-29T05:11:17Z,when running the build scripts. it says this at the end:```how to test against dist:  1) node_env=production yarn test```i've tried that. and everything passes. it would be nice to construct a test that would fail there.btw. i also need to test this with eslint-plugin-prettier. might be more rollup:ed files to tweak.,negative
prettier/prettier,eslint,2017-09-29T05:21:21Z,i've tested with eslint-plugin-prettier now. i've force-pushed a fix to also do the module.parent thing in index.js.,neutral
prettier/prettier,eslint,2017-10-01T20:01:09Z,duailibe can the webpack loader use `eslint --fix`? if so. `eslint-plugin-prettier` might be appropriate. inclusion in `create-react-app` could be great imo.,positive
prettier/prettier,eslint,2017-10-01T22:28:10Z,awesome. i might be able to submit a pr for that in a couple weeks. but if someone else can do it that'd be great. azz that's much less of an issue if it's run with `--fix`. right? it just fixes it for you. it actually reduces the number of annoying eslint errors you have to deal with. regardless. it's a good point – prettier *could* be used as a warning instead of an error. though that has it own set of problems (other developers will see changes when they edit the file b/c you didn't run prettier yourself). on a separate note. i'll dig around and see if airbnb might be interested in pulling prettier into their official recommendations (i don't think they are).,positive
prettier/prettier,eslint,2017-10-05T22:47:01Z,for me using "prettier/prettier": ["error". { "singlequote": true }] saves as double quotes.i'd like to save as single if i can.  are there additional steps i need to be taking?  i'm a mac vscode user. not sure if that matters.,positive
prettier/prettier,eslint,2017-10-07T18:36:14Z,> prettier disables eslint formatting rules by default.no. prettier knows nothing about eslint at all. perhaps you are confused by some editor integration or something you use to run prettier?there should be no problems at all letting eslint sort your imports. and prettier format your code. can you clarify what your problem is and how to reproduce it?,positive
prettier/prettier,eslint,2017-10-08T00:02:54Z,those rules are disabled because prettier enforces them. not eslint.,positive
prettier/prettier,eslint,2017-10-09T17:19:16Z,if you want this behavior. you can use prettier-eslint with the 'quotes' eslint rule.,neutral
prettier/prettier,eslint,2017-10-10T01:53:30Z,yes. here is the specific eslint config `rules` entry to match `--single-quote`:```json{ "quotes": ["error". "single". { "avoidescape": true }] }```thanks for the speedy response guys. i did spend about 5 mins searching the repo for past issues but that rationale.md doc must have slipped through the cracks,negative
prettier/prettier,eslint,2017-10-13T14:58:54Z,theednaffattack it works for me.,neutral
prettier/prettier,eslint,2017-10-14T05:56:54Z,azz can't we keep this rule under default rules section?,neutral
prettier/prettier,eslint,2017-10-14T05:59:31Z,it's better to use .prettierrc because more tools (editors) will respect it.,positive
prettier/prettier,eslint,2017-10-14T06:03:31Z,azz got it. thanks.,positive
sroze/ngInfiniteScroll,sauce,2015-04-10T19:28:37Z,p.s. i don't know why tests in saucelabs has been failed. on my local browser that worked fine.,positive
NodeRedis/node_redis,mocha,2016-01-03T02:24:33Z,bridgear thought i'd try out the `--cache` flag for performance. the actual important update is getting rid of:`./node_modules/.bin/_mocha`. the new library we're using for spawning doesn't like absolute paths on windows.,negative
sequelize/sequelize,jasmine,2013-07-16T14:48:50Z,bah inaccurate jasmine tests :/ nothing major. i'll probably end up re-writing jasmine before this pr actually gets submitted.,neutral
sequelize/sequelize,jasmine,2013-07-22T16:13:00Z,i'll let you know once i reintegrate this with the new buster tests.. i think jasmine was the fuck up here.,negative
swagger-api/swagger-ui,selenium,2015-08-06T15:25:53Z,fix timing issues in unit-tests. using a hard-coded delay 200ms when waiting for the page to load is a recipe for intermittent test failures. a better solution is to use `webdriver.until` and actively wait until the page is loaded (the title is set).also the delay 3000ms is not always enough for the selenium webdriver to initialise the browser. i am proposing to increase this delay a bit.,negative
cujojs/most,eslint,2016-05-16T13:18:17Z,closing. since we switched a while ago to eslint.,neutral
caolan/async,eslint,2016-10-15T17:11:05Z,failing cause eslint apparently depends on node 4,neutral
nightwatchjs/nightwatch,mocha,2016-01-09T20:37:19Z,are you using mocha as the test runner? does the issue still happen if you try using the built-in runner?,neutral
nightwatchjs/nightwatch,mocha,2016-01-21T00:25:16Z,i am using mocha as the test runner. set in the `nightwatch.json` file (copied down below). and i'm using `browser.expect()` and it's still not showing up in the total count when it fails. is that what you mean by the built-in runner?``` json{..."test_runner" : {    "type" : "mocha".    "options" : {      "ui" : "bdd".      "reporter" : "list"    }...}```,negative
rickbergfalk/sqlpad,eslint,2018-05-22T13:43:36Z,thanks clach04 looks really good so far! any thoughts on how this could be made testable on other setups? docker has been a nice way to provide a database across a variety of platforms. but understandably not all databases have that as an option.i only ask because i'd want a low-friction way to run the tests myself if an issue came up or i end up refactoring the way the db integrations are done. i suppose the odbc test doesn't need to be an actian test specifically - just something to test the integration with the odbc lib.on the other hand... if this is left as a separate step by the end user and not something supported out of the box via an `npm install sqlpad -g`. then i'd be fine bringing this in and not having flexible tests for it right away. adding documentation disclosing there will be some extra work to get this up and running :)just some minor nit-picks on style... i've been trying to use `const` and `let` over `var` for variable declarations. and moving away from single-line conditionals (is that even what they are called?) and favoring something like ```jsif (config.user) {  cn = cn + ';uid=' + config.user;}```not a big deal though -  i haven't been able to go through and clean everything up yet and i have yet to set up the eslint rules for stuff like this.,negative
formly-js/angular-formly,karma,2015-06-03T22:44:57Z,finally done!,neutral
formly-js/angular-formly,karma,2015-06-10T18:29:21Z,looks like the build is breaking because `sinon` recently stopped publishing a `pkg` file and `karma-sinon` attempts to add the `sinon` file from `pkg` to the `files` in the karma config. i'll look into that problem. then this will get merged. thanks!,negative
formly-js/angular-formly,karma,2015-06-15T17:22:14Z,why don't we create a library for this? i want to use this in other projects. here's the api i envision...i install your library as a dependency. we'll call it `better-npm-run` for now... then in my `package.json`. i do this:``` json{  "scripts": {    "build:dist": "better-npm-run".    "test": "better-npm-run"  }.  "betterscripts": {    "build:dist": "node_env=development webpack --config $npm_package_webpack --progress --colors".    "test": "node_env=test karma start"  }}```or something like that? it would just be nice to have all my scripts right in the package.json.and the library would manage ensuring that setting environment variables work cross-platform. what do you think?,negative
formly-js/angular-formly,karma,2015-06-15T18:57:44Z,would this kind arrangement look ok? or is it too verbose?```{  "scripts": {    "build:dist": "better-npm-run".    "test": "better-npm-run"  }.  "betterscripts": {    "build:dist": {        "command": "webpack --config $npm_package_webpack --progress --colors".        "env": {            "node_env": "development"        }    }.    "build:prod": {        "command": "webpack --config $npm_package_webpack --progress --colors".        "env": {            "node_env": "production"        }    }.    "build": [        {            "run": "build:dist"        }.        {            "run": "build:prod"        }    ].    //...    "test": {        "command": "karma start".        "env": {            "node_env": "test"        }    }  }}```,neutral
firebase/firepad,karma,2014-11-06T23:53:45Z,updated karma test reporter and integrated with coveralls. mikelehen - please review and merge. just getting this repo up-to-date with the latest and greatest tools in all of our open source repos.,positive
firebase/firepad,karma,2014-11-06T23:58:19Z,fyi that you can click the coverage badge above to see a full coverage report for this repo. you will probably have to sign in with your github account. it may be useful to make the test suite even better and catch things which are not currently being tested. let me know if you have questions.,positive
linkedin/dustjs,jasmine,2013-06-01T02:38:04Z,would be upto doing a pr to fix the jasmine?,neutral
thingdom/node-neo4j,mocha,2014-06-08T00:47:44Z,unable to run with mocha. i've narrowed my test case down to:```var neo4j = require("neo4j");var db = new neo4j.graphdatabase(":7474");db.query("match (n) optional match (n)-[r]->() delete n. r". {}. function(err. res) {    console.log("response");});console.log("done");```when run with `node test/test.js` it logs two lines of output. when run with `mocha` it only logs the latter.any help is appreciated!,positive
thingdom/node-neo4j,mocha,2014-06-08T01:02:08Z,need to do it async style. it's not waiting for the test to finish.,neutral
thingdom/node-neo4j,mocha,2014-06-08T09:09:06Z,wfreeman what's a good practice for doing that with mocha?,positive
thingdom/node-neo4j,mocha,2014-06-08T09:35:48Z,never mind. i found the done() parameter. thanks for the help!,positive
angular-fullstack/generator-angular-fullstack,karma,2014-11-27T03:12:49Z,i did everything mentioned by bytenel and am still get the same error :( any ideas?ps: i'm getting this issue when i try to install grunt-shell or reinstall karma via npm,negative
angular-fullstack/generator-angular-fullstack,selenium,2016-02-19T05:34:06Z,travis can't do e2e tests. you'd need to use something like saucelabs that can run selenium tests.,positive
adamgruber/mochawesome,mocha,2015-06-09T15:14:58Z,add ability to use mocha --watch flag without constantly file overwrite. for now if tests are running with --watch flag. new report overwrites old one every time. even if no changes was made in tests. it would be great if you add an ability to watch file changes and compose new report only if there was some.,positive
adamgruber/mochawesome,mocha,2015-06-09T18:31:20Z,that's just how the `--watch` flag works. it scans for changes to any js file and then reruns your tests. thus regenerating any reports. it's not behavior specific to mochawesome and not something that can or should be changed.,neutral
gilbarbara/react-joyride,sauce,2016-11-18T17:02:10Z,the test failure seems to be due to not being able to connect to sauce labs. and does not seem to be a new problem.,neutral
Reactive-Extensions/RxJS,standard,2013-11-17T22:07:08Z,raineratspirit it is. but you have to realize. it has all the bindings. async/fromevent/promise/callback stuff in addition to standard operators.  thus you don't need to bring in multiple files.  i'd like to know which operators you think aren't needed.,neutral
BabylonJS/Babylon.js,uglify,2018-04-03T16:57:31Z,did you run a npm install? (you can also force the install of uglify with npm install gulp-uglify),neutral
Hacker0x01/react-datepicker,karma,2015-12-09T18:18:51Z,run sauce labs on master branch. i removed sauce labs from the repo because it was breaking on external pull requests (those pr's didn't have the right creds for sl). however. it would be really cool if we could run the sl specs on the master branch instead. this way. we're sure a pr runs the karma specs and can we run a additional sl karma run on master.,positive
Hacker0x01/react-datepicker,eslint,2018-03-17T16:50:45Z,> we could run flow from the build system so contributors would see flow errors right away. like with eslint. another option would be to run it during testing. but it's often convenient to see type errors sooner rather than later.sounds like a good idea. i think it would be good add this in before we land the pr that's open. thoughts? i found a few articles related to this but doesn't seem like there's a default way of doing this.> for measuring progress. i see react is using flow-coverage-report. i haven't used it yet. but it looks pretty straightforward.looks interesting! but lets focus on adding the default checks to the ci first.,positive
webpack/webpack,standard,2017-01-18T11:12:29Z,feature - better logging for loaders/plugins - compiler.messages. **do you want to request a *feature* or report a *bug*?**feature.**what is the current behavior?**there's no standard for providing loader/plugin diagnostics so people have to use ad hoc solutions.**what is the expected behavior?**there should be a pipe like `compiler.warnings` for generic diagnostic messages. maybe call it `compiler.messages` or so. one option would be to refactor the current api behind a single call that would accept message type. priority. message for filtering.**if this is a feature request. what is motivation or use case for changing the behavior?**the current behavior is confusing.,negative
webpack/webpack,standard,2017-01-25T20:13:20Z,it won't convert old commit messages ^^. you will need to introduce the standard to all repo's,neutral
webpack/webpack,standard,2017-02-03T15:53:27Z,bebraw that's all there is to the implementation. aside from the standard `if (module.hot) module.hot.accept()` addition to client code. there's no react-hot-loader configured. just `webpack-dev-server` for page refreshes and style changes.i'd post a minimum reproducible repo. but i'm logged into a company github account on my local machine and it'd be a pain to switch local accounts with ssh and gpg configured.,negative
webpack/webpack,standard,2017-02-08T07:54:29Z,sokra that is quite inconsistent. you assume. based purly on imports. what the use might want to target. but that is just a guess. in our case. the import statement is used. but the code itself is es5. so it's all valid. just because of the import pattern webpack shouldn't fall back to parse the file with an older standard. because you can't know the target environment.i won't say it's webpacks job to tell the user. that his code is properbly wrong. but i'd say it's inconsistent to tell the user "well. the exact same code goes through 2 different chains in webpack. and one tells you the problem in advance. the other doesn't" just based on some unrelated import stuff. that just feels not right.btw the main problem is babel. transpiling code from `{await: function() {}}` to `{await: function await() {}}`. in webpack it's just the lack of consistency.,negative
webpack/webpack,uglify,2018-05-31T11:31:29Z,cxyxc looks like `uglify-es` is more slow than `uglify-js`,neutral
webpack/webpack,uglify,2018-06-01T05:43:35Z,thanks for answer.sorry. i set `mode: 'none'` and `optimization.minimizer: [...]`. but not set `optimization.minimize: 'true'`. so uglifyjsplugin not run and then complie quickly.  in webpack4. i find  dir `.cache/uglify-js-plugin` in `node_modules` after complie.  it is no use for me. how to turn it off？,negative
webpack/webpack,uglify,2018-06-04T16:57:59Z,sokra good catch.mgroenhoff also tree shaking it not job of `uglify`.,negative
webpack/webpack,uglify,2018-06-06T09:03:14Z,the hooks are only useful if you know what you are looking for. e.g the name of the method "calling". e.g `hooks.call.for("calling")...` however if you want to hook all calls in the module this can't be done this way.also i was assuming the `evaluate` hook meant walking into an expression? if this is not the case what does "evaluating" mean in the context of parsing and walking the ast ?---also an unrelated question. does modifying the ast (from `hooks.program`) get propagated down stream. so e.g babel/uglify will pick up changes ?,neutral
webpack/webpack,uglify,2018-06-13T20:47:39Z,i've been trying to track down why this is slow. and in doing so. i did an `npm doctor` which reveals a permissions problem in `.cache/uglifyjs-webpack-plugin` which was weird to me. since i wasn't using that plugin...,negative
webpack/webpack,uglify,2018-06-27T16:14:49Z,to explain our need for this a bit. we use webpack for our main bundle. but also need to process each language files individually (i.e. an entry point for each lang file). each language file is a simple es6 file that imports other files. each containing lang strings. our sole need for these lang files is to copy the generated bundle to a new location. rename them to include the hash for cache-busting and uglify. this is all well within the purview of webpack - it's very straightforward to set up (go webpack!) - so we figured it would be ideal. however. ultimately we need to consume the file as a simple json object because it's asynchronously loaded by the client-side code. since there's no way to remove the bootstrap code wrapping the content we had to get a separate process using grunt that handles this portion. pity!,neutral
webpack/webpack,uglify,2018-06-28T14:59:46Z,ah i tried again and the uglifyjs-webpack-plugin change is actually not needed at all.sorry for bothering...,negative
webpack/webpack,eslint,2015-09-02T20:31:35Z,i believe i am experiencing this issue as well (the issue that webpack doesn't respect file timestamps. or even simple content-hashing. when detecting changes).  at first i thought i was just changing the file too quickly after the previous change was detected (and that may actually be an issue too. it's hard to tell). but the commentors above pointed me in the right direction: i'm usually modifying superfluous whitespace. as my linter (eslint) is setup to error on these issues and that will cause webpack to fail.what's the change detection algorithm/heuristic. and why doesn't it seem to be anything sane?,negative
socketstream/socketstream,coveralls,2015-03-03T14:14:34Z,can someone please ‘splain the coveralls account?,neutral
stealjs/steal,sauce,2017-05-10T13:47:43Z,anyone know where to look up the possible environment names? maybe saucelabs changed one.,neutral
acuminous/yadda,mocha,2015-11-17T23:13:52Z,it's a while since i looked at this but i suspect jasmine doesn't provide the option to programmatically skip tests. this was only added relatively recently in mocha which is why you needed to upgrade for your other package.,negative
prebid/Prebid.js,karma,2018-03-16T22:03:55Z,rubicon analytics. ## type of change- [x] feature- [x] bugfixes## description of changethis includes the new rubicon analytics adapter.  the endpoint will be changed. but for now can be configured with the `endpoint` option when calling `pbjs.enableanalytics````            pbjs.enableanalytics({                provider: 'rubicon'.                options: {                    endpoint: ':9999/event'.                    accountid: 1001                }            });```## other informationthe karma testing library was updated to use the mocha reporter.  it includes more information. better debug information (such as object diffing). and is just overall a better reporter than the `progress-reporter`.an additional `bidder_done` event was added that signals when a bid adapter has finished responding to bids (this is a solution to better determine no-bids).the `set_targeting` event was modified to also pass the targeting that was set as an event argument.also a few bug fixes. such as cleaning up handlers left around by other analytics adapters (was causing errors in unrelated tests).,neutral
prebid/Prebid.js,karma,2018-03-18T19:39:47Z,looking for other prebid org folks to review the core changes here. other rubicon folks to review the rubicon-specific stuff.,neutral
prebid/Prebid.js,karma,2018-03-20T23:29:53Z,resolved merge conflict,positive
prebid/Prebid.js,karma,2018-04-04T15:55:53Z,resolved conflicts,positive
prebid/Prebid.js,karma,2018-04-12T15:20:22Z,mjacobsonny -- rich submitted a doc change for the new bidderdone event. any others you were looking for?  we don't want to put this on the analytics adapter list just yet.,neutral
babel/babylon,eslint,2017-03-01T11:18:43Z,use prettier. the changes are very minimal. only in state.js prettier created a super long line. but we could also optimize this by hand and instead initialize every property individual.thoughts?- [x] add to pre-commit hook + travis- [x] adjust eslint,positive
babel/babylon,eslint,2017-03-02T21:13:39Z,might be related to babel/babel-eslint#266,neutral
babel/babylon,eslint,2017-03-03T16:04:53Z,this is super exciting! do not hesitate to open up issues on the prettier repo if you see anything that isn't printed in a way that you would have written code. i want to know about it :),positive
babel/babylon,eslint,2017-03-04T16:16:31Z,stephen as mentioned in slack. i will document what we have done in typescript-eslint-parser. it is something we have already had to tackle,neutral
sasstools/sass-lint,eslint,2016-01-08T22:51:30Z,yes. i want to suppress _lint warnings_ for some part of my code. **e.g.**. in eslint library. i can supress it using **//eslint-disable-line no-console** as a comment in front of the console.log statement. and console.log statements are set to give js lint warnings if encountered anywhere in code. but i use this comment to ignore(suppress) for particular ones.similarly. i want to ask if anything exists for sass lint. because i want hyphenated naming convention in scss file but some library which i am using has camelcasing in some class name and i want to modify this class scss properties. so. i can't avoid using camelcasing. so i want to supress naming convention for only these class names.i am using it as in cli> npm run sass-lint -v and then my config file is automatically picked up which in turns selects my scss files and runs lint check on them.,negative
ipfs/js-ipfs-api,coveralls,2017-12-29T09:54:32Z,chore: bring back coveralls,negative
ipfs/js-ipfs-api,coveralls,2017-12-29T10:17:59Z,it was missing the token,neutral
react-materialize/react-materialize,eslint,2016-03-28T14:03:10Z,issue didn't receive any more response... cleaned up the modal.js file and updated eslintrc to eslintrc.js,neutral
vega/vega-lite,codecov,2017-02-24T17:05:53Z,- [ ] yuhanlu please add tests for missing lines. (click details for codecov/patch and see diff tab),neutral
vega/vega-lite,codecov,2017-02-26T00:56:09Z,also. look at the codecov diff to make sure that you add test for all the cases.,neutral
vega/vega-lite,codecov,2017-03-02T22:32:44Z,hmm ... it still doesn't run codecov.,neutral
vega/vega-lite,codecov,2017-03-02T23:13:38Z,arvind actually it does not.  i'm just trying randomly to see what causes codecov to break...,neutral
vega/vega-lite,codecov,2017-03-03T06:43:37Z,domoritz  fyi. i rebase and codecov is all good right now awesome!!!!,positive
vega/vega-lite,coveralls,2015-09-21T18:27:18Z,get rid of coveralls,neutral
pouchdb/pouchdb,eslint,2016-06-26T05:44:30Z,it's failing in travis due to eslint. you can repro by running `npm run eslint`. seems the error is `move function declaration to function body root`. if you need any help. feel free to join the slack or irc chat; thanks a bunch for the pr! :),positive
pouchdb/pouchdb,eslint,2016-06-26T13:46:58Z,i'll see what i can do today. ---cgulatvenu.comon sat. jun 25. 2016 at 11:44 pm -0600. "nolan lawson" notificationsgithub.com wrote:it's failing in travis due to eslint. you can repro by running npm run eslint. seems the error is move function declaration to function body root. if you need any help. feel free to join the slack or irc chat; thanks a bunch for the pr! :)—you are receiving this because you authored the thread.reply to this email directly. view it on github. or mute the thread.,positive
pouchdb/pouchdb,eslint,2016-07-12T13:44:09Z,oops didnt check eslint. will fixup,neutral
pouchdb/pouchdb,mocha,2014-06-22T00:33:40Z,calvinmetcalf then there's definitely an error.  every single one of those tests times out instead of showing an error in mocha.,negative
pouchdb/pouchdb,jshint,2014-04-29T16:07:48Z,so node is ok with escape i think your problem is that jshint doesn't like escape.,neutral
pouchdb/pouchdb,jshint,2014-04-30T00:07:16Z,minor nit: instead of putting escape/unescape in the .jshintrc. you could just call window.escape and window.unescape like websql.js was doing. other than that. i'm happy to merge this.,positive
pouchdb/pouchdb,jshint,2014-04-30T01:09:30Z,`global.escape` and `global.unescape` will avoid having to change the jshintrc.,neutral
pouchdb/pouchdb,jshint,2014-04-30T15:33:02Z,split out jshint task. instead of doing it at the same time as npm test. we have split out various tests. and its not useful for someone for every test to fail because of a jshint error,negative
pouchdb/pouchdb,jshint,2014-04-30T15:42:30Z,(#2106) - seperate the jshint task from the test,neutral
pouchdb/pouchdb,jshint,2014-04-30T18:12:08Z,please no. i know it takes a long time. but it catches sooo many bugs for me. webstorm sometimes puts really subtle red underlines under jshint errors. so i miss them until i do an npm test.,negative
pouchdb/pouchdb,jshint,2014-04-30T20:27:22Z,jshint errors will still break the build. but it means if you break jshint as well as something functional we will get feedback on both. it seems cleaner to have them seperate as well. but wont merge if yall still disagreewe shouldnt be merging anything without a green build. its looking red now. but everything i have merged has been on a green build. so either intermittent or an overlap or someone elses push. checking now,negative
pouchdb/pouchdb,jshint,2014-05-06T23:43:25Z,closing as not many seemed up for this. plus its kinda useful for the tests to bail early since people will fix and follow up and this at least reduces test runs,positive
pouchdb/pouchdb,sauce,2013-06-21T18:00:41Z,remove travis and saucelabs dependancy,neutral
pouchdb/pouchdb,sauce,2013-06-21T18:04:50Z,over this project i have spent significantly more time debugging saucelabs and travis issues than i have doing anything else (including writing the code). to add to that we have removed chrome testing and never even had ie or opera in ci. nor can people 'grunt test' and debug those tests locallyi think our need to do integration testing with a couchdb server means we arent really suited for those type of testing as a service tools. and a web driver local implementation running on a dedicated test box would be less maintenance.,neutral
pouchdb/pouchdb,sauce,2013-06-21T18:16:31Z,the latency between travis and saucelabs has increased to the point its impossible to get working. removed the hook and will test pr's manually,neutral
vlucas/frisby,jasmine,2014-05-14T07:32:54Z,running tests in multiple files sequentially. assuming the following test files and their corresponding requests:```testa.spec.js -> request1->after(request2)testb.spec.js -> request3testc.spec.js -> request4```when i run `jasmine-node` in this directory. they are executed in the following order:```request1request3request4request2```which obviously is not what i want. since each "top level request" loads a fixture into the database. it is impossible to do any first-this-then-that kind of tests.i believe i ran into a similar issue with jasmine before. so i'm assuming the problem isn't necessarily with frisby. but maybe you can give some advice as to how this can be solved?issue #13 references a similar problem. but as i understand it the proposed solution with `after` doesn't work for tests spread across multiple files.any ideas?,negative
angular/protractor,jasmine,2016-07-25T15:25:38Z,nicktomlin is there a link to the feature request you put in for this?,neutral
angular/protractor,jasmine,2016-07-27T12:10:04Z,protractor. jasmine : how to print current page url on console. my requirement is to print current page url on console.i tried with console.log('url is= '+driver.browser.getcurrenturl());getting below error on console **failed: driver is not defined**,neutral
angular/protractor,jasmine,2016-08-04T12:45:39Z,i tried both ways . i get same errori installed protractor-jasmine-cuucmber npm both locally and globally,neutral
angular/protractor,jasmine,2016-08-12T22:23:53Z,good idea!  why not throw it on to `err.message` on 120 of `lib/frameworks/jasmine.js`?,neutral
angular/protractor,selenium,2015-07-16T09:28:17Z,ctamas you don't understand the way protractor and js selenium api manages promises.and `getcurrenturl()` always worked. while in ie11 don't.i guess the way js selenium api or protractor manage promises has problems in synchronization. or it is a way that is not a good one to manage promises.,negative
angular/protractor,selenium,2015-07-16T09:37:21Z,ctamas the point is that it is not clear when to resolve promises with then and when not. and selenium api communicates like there is no need to resolve promises with then. while there is this need as we are demonstrating in this thread.,positive
angular/protractor,selenium,2015-07-16T19:38:13Z,that's not an error from us (all though we don't support all browsers).  it might be from selenium or your app.,neutral
angular/protractor,selenium,2015-07-22T06:46:28Z,if you need help. you should ask for it on stack overflow,neutral
angular/protractor,selenium,2015-07-22T11:29:31Z,hi sammy.this is not a help i need. this is a bug in protractor. i've done my due diligence. please re-open the issue.,negative
angular/protractor,selenium,2015-07-22T18:58:07Z,what's your issue exactly?  i don't understand this sentence: "it works however if the selenium address is on localhost / same host where the protractor is running by not setting the browser's file detector.",neutral
angular/protractor,selenium,2015-07-22T21:34:12Z,let's say your server runs on host a. the selenium grid on host b and protractor code running from host c. if you attempt to run a file upload test(code shown as above) from host c. hitting thr host b selenium grid hitting the upload end point running in host a. the upload fails.however. if host a. b. c were to be the same host. ie if the protractor code. selenium server and the file upload endpoint are all the same host / localhost. file upload works just fine.,positive
angular/protractor,selenium,2015-07-23T19:11:21Z,i created a new issue. since this issue was about documentation.  see #2371,neutral
angular/protractor,selenium,2015-07-29T15:04:29Z,yes. there are different work arounds to do the navigation but if we want to use keyboard down/up keys. protractor is not working. i need something similar to sendkeys(keys.arrow_down) which works on selenium.,neutral
angular/protractor,selenium,2015-08-03T07:31:47Z,getting same error on my desktop on windows 7 enterprise. could u please provide the better solution for this?c:\users\e0360862>webdriver-manager startselenium.pid: undefinedevents.js:85      throw er; // unhandled 'error' event            ^error: spawn cmd enoent    at exports._errnoexception (util.js:746:11)    at process.childprocess._handle.onexit (child_process.js:1053:32)    at child_process.js:1144:20    at process._tickcallback (node.js:355:11)    at function.module.runmain (module.js:503:11)    at startup (node.js:129:16)    at node.js:814:3thanks.,negative
angular/protractor,selenium,2015-08-04T16:20:02Z,as i said. i'm not allowed to connect to googlecloud where the driver files and the selenium server are hosted,neutral
angular/protractor,selenium,2015-08-12T17:44:44Z,how change chrome driver to firefox driver in protractor. i have problem with firefox . my test case passed with chrome and failed with firefox browser .so when i was updating my selenium standalone server using command " webdriver-manager update " chrome driver is updated but not firefox can you let me now the process that will update firefox driver,negative
angular/protractor,sauce,2014-05-16T23:35:22Z,hi.i don't think this is the right way to fix this - this will print no matter how the code is running. and the dummy name isn't applicable for everything. could you add context about how jenkins or bamboo would use a link to show test results?,neutral
angular/protractor,sauce,2014-05-16T23:54:20Z,didn't know about that. very cool! i'm concerned that this would make the suite take a very long time for legitimate failures. however. (it's already 10 minutes. i'd hate to have it take half an hour). i'll be exploring some of the saucelabs issues this week - give me a bit to look into that and see if there's other ways to address this before we resort to a full retry :) i'll leave this open though.,negative
angular/protractor,sauce,2014-05-20T17:51:46Z,i think this is addressed with 546d41faeb75342c875e0f9bb7702309c1aa186d,neutral
angular/protractor,sauce,2014-05-22T21:32:16Z,tried with windows 8 on saucelabs. didn't help. i didn't see the `window is undefined` error anymore. but the same end result.,negative
angular/protractor,sauce,2014-05-23T18:59:51Z,feat(sauceprovider): append spec filename to capabilities.name,neutral
angular/protractor,sauce,2014-05-23T21:18:54Z,now that ie 11 is added and i think we've addressed some of the flakes. i'd prefer to find flakes rather than mask them. so i'm gonna close this one.thanks for teaching me about travis_retry though!,negative
angular/protractor,sauce,2014-06-03T19:51:30Z,lgtm,neutral
angular/protractor,sauce,2014-06-04T17:40:48Z,ajoslin i am working on some other organizational issues. so i haven't had the chance to look at this. feel free to play around with it. alternatively. if sauce isn't a must right now. there are instructions on how to test mobile locally. both for ios and android.,negative
angular/protractor,sauce,2014-06-04T18:47:49Z,update: have added more logging for sauce connect. still seeing the issue occasionally. in contact with saucelabs.removing milestone as this is an ongoing priority but not directly protractor related and shouldn't block release.,neutral
angular/protractor,sauce,2014-06-04T19:51:59Z,merged,neutral
angular/protractor,sauce,2014-06-05T13:41:34Z,also i just checked on running this on windows /chrome platform through a tunnel. i dont see a request similar to /wd/hub in the logs so i suspect its an issue on saucelabs which are incorrectly proxying the callback to my machine.,neutral
angular/protractor,sauce,2014-06-05T17:17:26Z,so i exposed my local testing site to be publicly accessible on the internet so saucelabs could reach the site without a tunnel. that works and passes tests fine. i suspect saucelabs is incorrectly proxying the callback thats suppose to be for their appium server to my machine via the sauce connect tunnel.,positive
angular/protractor,sauce,2014-06-09T01:32:44Z,i think the problem might be execasync and appium/sauce since the following does not work:``` javascript  it('should exec async'. function() {    ptor = protractor.getinstance();    ptor.driver.executeasyncscript(function() {      return null;    });  });```,neutral
ripple/ripple-lib,eslint,2015-07-13T17:10:18Z,ci tests are failing; eslint wants the `let` on line 260 to be `const`. there also seems to be a problem with npm that i don't understand yet.,negative
ripple/ripple-lib,eslint,2015-07-14T22:34:09Z,can we remove the `eslint-disable: max-len`?,neutral
youngmountain/generator-node-gulp,mocha,2014-06-26T15:39:18Z,use gulp-plumber for catching jscs error. like catching mocha error. if jscs raise error. then plumber catches this.,negative
jquery/jquery-mobile,coveralls,2014-06-13T17:08:58Z,gabrielschulhof can you please double check if the report from coveralls is accurate?,neutral
misoproject/d3.chart,mocha,2014-04-07T09:55:38Z,i had jshint errors when building a release. i disabled the jshint check. built the library and then tested in our project that uses requirejs and it works. here are the errors i received with `grunt release`:```running "jshint:grunt" (jshint) tasklinting gruntfile.js...error[l142:c36] script url.  grunt.registertask("test-unit". ["mocha:unit"]);[l144:c35] script url.  "test-build". ["concat:test". "mocha:exportsamd". "mocha:exportsglobal"][l144:c55] script url.  "test-build". ["concat:test". "mocha:exportsamd". "mocha:exportsglobal"]```,neutral
benbria/coffee-coverage,mocha,2015-09-03T13:23:50Z,thanks for the input! i'll see about taking a crack at it sometime next week if i can make the time. it does spawn a process to run the tests within electron. but mocha is only required within that process. i for the hell of it tried manually requiring in coffee-coverage directly where mocha would expect it to be. but still get 0%. i'm sure i'll come up with something.,negative
benbria/coffee-coverage,mocha,2015-09-12T18:36:02Z,this turned out to be an issue on electron mochas end. will be putting up a pr there. thanks again.,positive
benbria/coffee-coverage,istanbul,2015-09-11T06:51:03Z,how to extract coverage info from phantomjs run. big fan of coffee-coverage. thanks. have a backbone spa grunt-mocha/grunt-mocha-phantomjs project that has an html page including all tests via script tag for the browserify-coffee-coverage'd tests. bundle looks good but can't wrap my head around how to get the mocha run's coverage info out of the page. alternative: browserify-istanbul writes this to a window.__coverage__ variable and expects a web hook to write the contents out to a file for later istanbul report. this cannot generate an html coverage report because the coverage info references coffee files. but they don't match the transpiled javascript line numbers (other reports work ok). i would love a more coffeescripty solution and have a little time to spend on it... any pointers?,neutral
benbria/coffee-coverage,istanbul,2015-09-15T19:48:31Z,thanks for all the info. steve.  re: 'it is amazing how many kludgy. inelegant solutions there are out there.'. yeah...  i feel like all of this should be much. much easier to make work.,positive
balderdashy/sails,mocha,2013-10-23T13:58:15Z,michapixel i think that is exactly what i posted in pr #1012 a couple days ago. it breaks the mocha/travis test.,neutral
balderdashy/sails,mocha,2013-10-25T07:43:23Z,mikermcneil did you read what fyockm wrote about the mocha-test?,neutral
skulpt/skulpt,jshint,2014-12-04T14:03:04Z,- we settled on 4 space indentation as a code style i don't think we should change that for the turtle module. - why do you put the comma's on the start of a line and not after a declaration? when you're doing multiple declarations?- there are some other coding style issues. which you haven't noticed on travis because we're not scanning the lib dirs with `jshint` - why do you add functions to the prototype using a closure?,neutral
skulpt/skulpt,jshint,2014-12-04T15:11:17Z,yeah i know sorry. i was the instigator of the original discussion so i feel kinda obligated to make sure we adhere to the style. i had started commenting on them and then found out jshint wasn't being run on the libs.i thought as much with the proto closure stuff i was just wondering if you were doing something there i didn't get :smile: i don't do much oo-programming in javascript. i also can't seem to wrap my head around what you're doing here:``` js (function(frame) {      if (frame) {        browserframe = function(method) {          return (_framerequest = frame(method));        }      }    })(window.requestanimationframe || window.webkitrequestanimationframe || window.mozrequestanimationframe || window.orequestanimationframe || window.msrequestanimationframe);```what do you use to run tests on this? i don't mean automated. the file /doc/static/turtletest.html doesn't work anymore.,negative
skulpt/skulpt,jshint,2014-12-04T15:12:18Z,you don't use jshint/jslint on your javascript at trinket.io?,neutral
skulpt/skulpt,jshint,2014-12-10T17:12:20Z,adds matrix and shape methods. implements popmatrix. pushmatrix. applymatrix. resetmatrix. printmatrix. box. sphere. spheredetailadds mode options to size methoddefines renderer constantsgets jshint passingfixes #314,neutral
skulpt/skulpt,jshint,2014-12-11T14:10:39Z,lgtm :+1: :shipit: maybe add this file to the files jshint scans on travis now it passes?,neutral
rlidwka/sinopia,eslint,2015-08-07T10:27:36Z,hrm... build seems to fail on eslint using a deprecated --reset flag.any help?,negative
KeitIG/museeks,eslint,2016-11-20T21:42:46Z,yep. sorry about that. i've also installed the atom linter-eslint plugin. so i should see these errors before commiting.,negative
fb55/css-select,eslint,2016-10-31T17:32:58Z,fix eslint errors,neutral
videojs/videojs-contrib-hls,standard,2016-07-19T20:18:55Z,question: how to bring a player back to `live` moment after pause?. hello.i'm working on non-standard feature for hls live playback.when a user clicks `pause` - a player stops buffering new data.but i need to bring user back to `live` moment (obviously `live` in terms of player. not clock time) by offering special custom button.i tried to approach this with `player.bufferedend()` and simply call `player.currenttime(player.bufferedend());`.unfortunately this approach resets player to 00:00 by unknown reason. also it does not really work. because as i mentioned above. after pause a player stops buffering and i don't know `the latest available time point` anymore in order to seek into live as close as possible.so my questions:- why player resets to 00:00 if i try to seek it into `bufferedend` point?- how to get `the latest time point`. which is the closest to live. so i can bring user back upon request after pause?thank you.,negative
videojs/videojs-contrib-hls,standard,2016-07-19T20:23:19Z,thanks for moving the issue here.can you elaborate on what you mean by the player reseting to 00:00 when you seek to `bufferedend`? is the new currenttime returning 0 or just the display of the control bar?perhaps what you actually want to use is `seekable` rather than `bufferedend`. and get seek to the end of the last seekable range available.,neutral
videojs/videojs-contrib-hls,standard,2016-07-19T22:17:21Z,did that work for you?,neutral
videojs/videojs-contrib-hls,standard,2016-07-19T22:20:04Z,yes. `seekable` is exactly what i need,neutral
videojs/videojs-contrib-hls,standard,2016-07-19T22:21:56Z,awesome!,positive
pouchdb/express-pouchdb,jshint,2014-12-01T18:33:12Z,it's a start: #134 adds 'npm test' which runs a 'npm run jshint' in turn.,neutral
pouchdb/express-pouchdb,jshint,2014-12-10T11:46:28Z,(#128) - add test-pouchdb & test-couchdb. also adds jshint to travis.,neutral
pouchdb/express-pouchdb,jshint,2014-12-10T12:25:27Z,test-couchdb has always failed to start for me (i run couchdb-harness manually). but the error seems to have changed on travis (not online). not sure if significant.,negative
pouchdb/express-pouchdb,jshint,2014-12-11T22:00:41Z,+1,neutral
pouchdb/express-pouchdb,jshint,2014-12-12T11:03:30Z,thanks. merged: 526b9eacf784c38a5252c9f251570983909120ad,positive
pouchdb/express-pouchdb,selenium,2014-12-01T18:46:57Z,i think daleharvey increased the selenium timeouts in pouchdb itself; you could try that.,neutral
swagger-api/swagger-js,mocha,2015-05-18T15:12:24Z,hmm. when i run `gulp browsertest` or even `mocha`. as that is what it looks like travis-ci is doing. locally. the tests complete successfully. perhaps i don't have something configured properly for travis.,negative
Azure/azure-xplat-cli,jshint,2013-10-13T15:17:12Z,hi anuchandy.as agreed with claudio. can you revert the copyright header changes ? could you also fix the jshint errors ?thanks.andre,neutral
adonisjs/adonis-cli,standard,2017-11-16T14:18:34Z,yass. thanks for this. just make sure to fix the styling of your code with `standard --fix`,neutral
brigand/babel-plugin-flow-react-proptypes,eslint,2017-02-03T19:56:16Z,i've created hardcoded test:```jsx/* eslint-disable */const transform = require('babel-core').transform;const { code } = transform(`import react. { component } from 'react';type props = {  label?: string.  anotherlabel?: string.};class test extends component {  props: props;  render() {    return (      <div>{this.props.label} {this.props.anotherlabel}</div>    );  }}export default test;`. {  babelrc: false.  presets: ['es2015'. 'stage-1'. 'react'].  plugins: [    'syntax-flow'.    'flow-react-proptypes'.    'syntax-object-rest-spread'.    'transform-class-properties'.    'transform-export-extensions'.    'transform-decorators-legacy'.    ['react-docgen'. { "doc_gen_collection_name": "storybook_react_classes" }]  ].});console.log(code);``` that is working.i think this problem is related how storybook are using babel config. (some plugin are causing bug. idk)so. i think you can close this.,positive
dadi/api,standard,2017-01-30T14:51:54Z,try with this```json{  "fields": {    "name": {      "type": "string".      "label": "parent name".      "required": false    }.    "children": {      "type": "reference".      "settings": {        "collection": "children".        "multiple": true      }.      "label": "child".      "required": false    }.    "children_second": {      "type": "reference".      "settings": {        "collection": "children".        "multiple": true      }.      "label": "second child".      "required": false    }  }.  "settings": {    "cache": true.    "cachettl": 300.    "authenticate": true.    "compose": true.    "callback": null.    "displayname": "parencollection".    "storerevisions": true.    "storesearch": true.    "defaultfilters": null.    "fieldlimiters": null.    "allowextension": true.    "standardeditpage": true.    "allowdelete": true.    "count": 20.    "sort": "publicationdate".    "sortorder": "asc"  }}```and this```json{  "fields": {    "name": {      "type": "string".      "label": "child name".      "required": false    }  }.  "settings": {    "cache": true.    "cachettl": 300.    "authenticate": true.    "compose": true.    "callback": null.    "displayname": "childcollection".    "storerevisions": true.    "storesearch": true.    "defaultfilters": null.    "fieldlimiters": null.    "allowextension": true.    "standardeditpage": true.    "allowdelete": true.    "count": 20.    "sort": "publicationdate".    "sortorder": "asc"  }}```inserting these into **child_collection**```json[{"name" : "child"}.{"name" : "childtwo"}]```then insert this into **parent_collection**```json{  "name": "parent".   "children": [`{first_child_id}`].   "children_second": [`{second_child_id}`]}```observe the composed values resolving.now change the **parent document** to```json{  "name": "parent".   "children": null.   "children_second": [`{second_child_id}`]}```try and get the same document and see that no fields are resolved. if that doesn't happen. try switching round which field has a `null` value,positive
agershun/alasql,mocha,2016-01-21T19:57:10Z,:+1: hard to understand where we call this --v8 flag...what happen if you simply run `mocha .`? the same result?,neutral
agershun/alasql,mocha,2016-01-21T20:16:22Z,we dont - its in the npmwill check `mocha .`,neutral
agershun/alasql,mocha,2016-01-26T19:16:09Z,i usually use:```> cd test> mocha .```i will ask mathiasrw about this `npm test` problem,negative
nodegit/nodegit,istanbul,2014-11-26T17:28:54Z,start using prepublishing to fix dependencies. currently pretty much everything (except mocha and istanbul) have to be dependencies. not devdependencies. because we use a lot of them during the build process. by farming out a few things to prepublish. we can move a _lot_ of dependencies.,positive
yeoman/generator-karma,karma,2013-07-13T11:28:52Z,thanks. eddiemonge! that's really helpful.,positive
yeoman/generator-karma,karma,2013-07-13T13:36:51Z,nice work!,positive
yeoman/generator-karma,karma,2013-07-18T06:08:38Z,so. made all of the changes apart from eddiemonge's comment about karma. anyone else has a comment about it? does it need to be included?,neutral
haraka/Haraka,eslint,2017-06-06T21:02:39Z,can you move it down after the other `./` requires please. other than that it's good. i don't understand why eslint didn't catch this.,positive
haraka/Haraka,codecov,2016-04-01T23:13:58Z,sometimes i hate codecov. i fix bugs. i add tests. coverage goes down. epic fail.,negative
haraka/Haraka,codecov,2016-04-01T23:40:31Z,in my experience. codecov only reports on a branch once. push another commit to it. or force push. and you get no update (which is kinda good. i'd hate to have a long thread of posts from codecov).,negative
u-wave/web,eslint,2017-02-05T14:50:46Z,needs to wait for next eslint-config-airbnb release.,neutral
ember-cli/ember-cli-mocha,mocha,2017-05-27T09:06:03Z,update "ember-mocha" and locked dependencies,neutral
bitpay/bitcore,mocha,2014-08-19T13:15:15Z,code: ack.mocha: 3164 passing (5s)index.html: passes: 3136 failures: 0let's wait for another devs ack and i'll merge,neutral
electrode-io/electrode,eslint,2017-06-13T01:17:17Z,webpack-reporter: [chore][patch] fix eslint. update .npmignore,neutral
electrode-io/electrode,eslint,2017-06-14T00:11:17Z,generator-electrode: [patch] [chore] set es6 flag in gulpfile.. - set es6 test flag that is used by the `arch-gulpfile`.- `test/server` eslint file extends from the new es6 server test file.,neutral
vkbansal/react-contextmenu,eslint,2017-04-14T13:14:32Z,still getting a problem: `cannot find module 'eslint-config-vkbansal/react'`,neutral
vkbansal/react-contextmenu,eslint,2017-04-14T13:30:06Z,`npm install eslint-config-vkbansal`,neutral
ractivejs/ractive,karma,2017-02-05T03:08:07Z,transitions tests are notoriously finicky. especially with browser automation. is there a way to soft fail tests with karma? maybe something like a passing quorum? it'd be nice to know they fail. but with more browsers being tested i don't know that conditional exclusion is as feasible as when you mostly just have to watch for phantom issues.,negative
ractivejs/ractive,karma,2017-02-13T01:55:31Z,if you're wondering why there's a build in coveralls whose coverage is 64%. that's me configuring karma-coveralls incorrectly in this pr.,neutral
admc/wd,mocha,2014-03-26T14:54:00Z,agreed. pageobjects are part of test design strategy and wd is just a browser driver component. wd  is meant to be used with other testing frameworks. some framework on top of mocha or jasmine would be the proper candidate.,neutral
admc/wd,mocha,2014-04-08T18:14:31Z,update mocha integration example. mocha-as-promised is deprecated,neutral
admc/wd,mocha,2014-04-08T19:07:29Z,it's in mocha. just need to remove the require.,neutral
angular-ui/bootstrap,karma,2013-08-26T17:02:54Z,fix(dialog): dialog now appears correctly. the css for modals in bootstrap 3 has``` cssdisplay:hidden```by default - this patch makes sure that `display:block` is applied.is this a good approach? also. what would the appropriate test be? because there is no way to include the default bootstrap css in a karma test. the original test fail to detect the bug... (even though it does test for display:block),negative
angular-ui/bootstrap,karma,2013-08-26T20:25:36Z,actually. as of the current `master` and `bootstrap3_bis` branches `$dialog` has been replaced by `$modal` and once #879 is pulled. `$modal` should be functioning in bootstrap 3 (with the caveats i listed).,neutral
angular-ui/bootstrap,karma,2013-08-26T21:21:32Z,so. to actually fix modals once that pr is pulled. i'd have to add this css?``` cssdiv.modal.modal-open {    display:block;}```edit: nevermind. i figured it out. thats what bootstrap does.,negative
angular-ui/bootstrap,karma,2013-08-26T21:22:29Z,nope. it should be in a `style` tag in the template so you can just use it as is.,neutral
angular-ui/bootstrap,karma,2013-08-26T21:24:18Z,okay. i'll close this and go back to reading the bootstrap 3 docs more closely :),neutral
angular-ui/bootstrap,karma,2013-08-26T23:22:23Z,spion make sure you are pulling against `bootstrap3_bis` as the `bootstrap` branch was frozen prior to the merger with master.,neutral
pnpm/pnpm,standard,2017-01-17T21:59:59Z,pnpm installation strategies. see #552. #557. #117decide how to allow/support non-standard ways to do installation with pnpm.,neutral
pnpm/pnpm,standard,2017-01-18T16:58:52Z,> installation of packages without package.jsoni think this will be easy to do> i think this can be solved by allowing configuring custom resolvers we can move out the current resolvers to separate packages to see what api we can support for the custom ones.the other points are harder to solve and probably will require a redesign of pnpm. which might be ok. but lets start with the easy stuff,positive
pnpm/pnpm,standard,2017-01-18T20:36:53Z,yep. custom resolvers api is the closest thing we can get. but cudf is the most fruitful feature. i think.> we can move out the current resolvers to separate packages to see what api we can support for the custom ones.not sure about moving them to separate packages. should they be maintained separately? how hard would it be?,positive
pnpm/pnpm,standard,2017-01-18T21:37:35Z,yeah. i already have a working implementation of resolver for opam scope. now moving it out of there and adding a plugin interface.,positive
pnpm/pnpm,standard,2017-01-18T23:03:29Z,> do you think it is a good idea to rewrite the standard behavior? given that i want to extend installation in a non-standard ways — yes. in my case i want to assume that some scope is a *built-in* — `opam/*` which fetches tarballs from opam registry and generates `package.json` on the fly. i think the same technique can be used to bridge any other package registry.,neutral
pnpm/pnpm,standard,2017-01-19T16:04:14Z,> i think resolvers and fetchers should be different plugins. because there are more types of resolvers that use the same fetchers. like many resolve to tarball urls.totally agree. do you think we should refactor code to remove custom `fetch` function from `resolveresult`? also there's `src/resolve/fetch` which should probably be moved out of `src/resolve` dir. maybe into `fetchresolution`. thoughts?,neutral
pnpm/pnpm,eslint,2017-01-07T22:36:49Z,after thinking about it a little bit more... i think we can create custom bin files that will add the needed node_modules folders to the search path. (using the node_path env variable). seems to work with eslint.,neutral
angular/angular-cli,jasmine,2017-01-16T01:42:27Z,i also got ```calling function 'jasmine'. function calls are not supported```obviously. it tried to "aot"-ify the spec files....,neutral
angular/angular-cli,mocha,2016-12-12T14:38:17Z,you seem to have installed `types/mocha`. and it's typings are conflicting with `types/jasmine`. uninstall one of them and you should be fine.,positive
angular/angular-cli,uglify,2018-01-23T04:52:39Z,emaradevska. in webpack it looks something like this:plugins: [new webpack.optimize.aggressivemergingplugin().        new uglifyjsplugin({            sourcemap: false.            uglifyoptions: {                compress: {                    sequences: true.                    dead_code: true.                    conditionals: true.                    booleans: true.                    unused: true.                    if_return: true.                    join_vars: true.                    drop_console: true                }.                mangle: {                    //except: ['$super'. '$'. 'exports'. 'require']                }.                output: {                    comments: false                }            }})],positive
cssinjs/jss,codecov,2016-09-09T21:43:05Z,i can sort this out,neutral
passcod/mtwitter,mocha,2013-07-19T16:22:32Z,timing out today. i've run the "mocha rest" tests in the tests folder with valid credentials. and it just hangs and eventually times out. i'm not finding any indications of problems on twitter's end. but absolutely no love for mtwitter today. i wonder if they got stricter about something today?,negative
passcod/mtwitter,mocha,2013-07-20T08:07:16Z,it works here. does this still happen on your end?,neutral
passcod/mtwitter,mocha,2013-07-20T13:31:18Z,if you go in the tests and increase or even remove the timeouts. it might help. i run the tests on "clean" credentials (so there's zero rate limits. zero interference from other apps). and from a fairly well-connected box. and i set timeouts mostly because otherwise travis ci just timeouts the entire thing if one get test takes a long time (and we want the rest of the results. too. right?).the way mtwitter works. if it re-queues the requests they'll generally run **minutes** or more later. thus blowing out of the timeouts. regarding other libraries:- if you care about getting the content. no matter what time it takes. that how mtwitter is designed. (it's not _fully_ there yet. though.)- if you prefer to not get some content. and have the library get back to you (e.g. with an error) as soon as possible. you should either use other libraries. or specify the `queue: false` option.,neutral
passcod/mtwitter,mocha,2013-07-20T17:29:25Z,> failing pretty quickly (a few seconds).the timeouts are set to 10s per test. and here requests complete within about half that.,negative
US-CBP/cbp-theme,standard,2018-02-14T13:47:08Z,hmcfabulous davezen1. what is the expectation here?,neutral
US-CBP/cbp-theme,standard,2018-02-14T14:21:11Z,given an put with file type : <input name="myfile" type="file">the :focus style is not applied the same way as it is with other buttons which means it doesn't get the highlight to indicate where you are on the page.,neutral
US-CBP/cbp-theme,standard,2018-02-15T16:23:06Z,i believe it followed the standard bootstrap markup using input-group and input-group-btn.  will confirm and provide markup once i get a chance,neutral
US-CBP/cbp-theme,standard,2018-02-20T11:53:58Z,checkbox/radio replacement. it would be nice if the theme provided a simple checkbox/radio replacement to beautify and normalize those controls.  i know material is the current standard. but for those not using material. it would be nice to have something else.  a simple css replacement like what was done for the toggle switch.,positive
pghalliday/grunt-mocha-test,mocha,2013-09-23T14:40:23Z,share src property to all target?. most of the time when using `mochatest:test` and `mochatest:coverage` (even travis one) the `src` prop points to the same location.it would be nice if we could define the option at the task level as a default value for all targets.,positive
pghalliday/grunt-mocha-test,mocha,2013-09-25T13:39:24Z,thanks for the update,positive
pghalliday/grunt-mocha-test,mocha,2013-10-07T18:50:08Z,test coverage value in grunt task. is there a way to have the overall coverage value reported to the grunt task so that rather than looking like this:```running "mochatest:coverage" (mochatest) taskdone. without errors.```it would look like this:```running "mochatest:coverage" (mochatest) task    93% overall coveragedone. without errors.```or even better. pass / fail based on threshold and allow the threshold to be set within the gruntfile rather than via `travis-cov`.```running "mochatest:coverage" (mochatest) task    73% overall coverage: failedwarning: task "coverage" failed. use --force to continue.aborted due to warnings.```,neutral
pghalliday/grunt-mocha-test,mocha,2013-10-08T08:59:01Z,the mocha `html-cov` reporter just generates html output which is why i usually capture it to a file (it would be pretty unreadable in the console). it is the `travis-cov` reporter that prints and checks the coverage level. neither of these components are maintained in this project. the `html-cov` reporter is part of the `mocha` project and the `travis-cov` reporter comes from the `travis-cov` project.i have to admit i am struggling to see the problem you have with using `travis-cov`,negative
pghalliday/grunt-mocha-test,mocha,2013-10-11T12:04:04Z,it's true that if i fully integrated blanket and travis-cov i could probably provide the same functionality out of the box but it would be a change in direction/focus for this project... i'll continue to give it some thought. but no promises ;),positive
npm/npm,standard,2015-10-10T12:57:02Z,nested npm run scripts. what are the thoughts on adding support to nest scripts?rough idea:``` json{ "scripts": {  "test": {    "tdd": { "js": "mocha --watch" }.    "lint": { "js": "standard". "css": "postcss". "html": "htmllint frontend" }.    "audit": "node-license-validator --deep"  }.  "dev": "npm run test.tdd & http-server".  "start": "npm run audit && forever"} }```this would avoid the repetition in property names that i see in many [substack-esque. pseudo-nested packages]( am not yet familiar with the `npm run` implementation but happy to take a look and do a pr if this idea is not deemed too terrible. :stuck_out_tongue_winking_eye:,neutral
npm/npm,standard,2015-10-10T17:52:04Z,i'm a heavy user of npm scripts. and i don't really see myself using this feature. i usually just combine things together the pseudo nested way and its worked just fine.also from an implementation standpoint. adding this kind of complexity seems pretty hard.,positive
npm/npm,standard,2015-10-30T16:57:08Z,src: standard now depends on lazy-cache. a simple change to deal with a new module showing up and confusing git.,neutral
npm/npm,standard,2015-11-02T23:42:28Z,rubberstamp :sheep:.,neutral
npm/npm,standard,2015-11-06T00:02:47Z,ehsalazar :+1: thanks!,positive
Stuk/jszip,sauce,2014-02-05T22:54:39Z,nice !this also removes the nodebufferreader from the generated file. the saucelabs tests are ok.the next release (#87) has not been merged yet so this could go in. i will rebase my release branch tomorrow.,positive
Stuk/jszip,sauce,2014-02-10T20:26:58Z,nice. thank you !tested with my own saucelabs key. everything is ok.also. thanks to sheetjsdev for imaya/zlib.js#27 :),positive
Stuk/jszip,sauce,2014-02-25T22:26:10Z,the saucelabs tests also passed.,neutral
mishoo/UglifyJS2,uglify,2013-09-08T23:14:39Z,what about:``` sh$ uglifyjs -b foobar.js$ unexpand -t 2 foobar.js```,neutral
mishoo/UglifyJS2,uglify,2013-09-19T11:17:05Z,it should work by default. do you have example code that doesn't work?,neutral
mishoo/UglifyJS2,uglify,2013-09-27T15:29:44Z,uglify doesn't accept directories as inputs. i have a lot of files i want to uglify but i can't seem to figure out a way to feed a directory into the uglifyjs so that it can minimize all of the files in theream i missing something?,negative
mishoo/UglifyJS2,uglify,2013-09-27T16:58:03Z,`uglifyjs direcory/*.js --arg1` should do the trick.,neutral
mishoo/UglifyJS2,uglify,2013-09-27T20:21:11Z,rvanvelzen thanks. this seems to work but i can't get `./**/*.js` to work with nested directories.. i'm kinda new at this. so i'm not even sure if this is possible,negative
UKHomeOfficeForms/hof-template-mixins,eslint,2017-06-21T10:49:55Z,add extra class to mixins & set 'form-group-year' class to year input dates by default. note: this was done in es5 because of eslintrc not being set.  this will be in a separate pr,neutral
UKHomeOfficeForms/hof-template-mixins,eslint,2017-06-21T11:10:17Z,yes to changing eslintrc to use `eslint-config-homeoffice`,neutral
UKHomeOfficeForms/hof-template-mixins,eslint,2017-07-06T15:29:09Z,refactor template utils. split the input element functions into a separate file to the general template helpers.ended up in an eslint yak shave. sorry.,neutral
UKHomeOfficeForms/hof-template-mixins,eslint,2017-07-06T15:30:43Z,es6 all the things!!!,neutral
dharmafly/jsonpatch.js,jshint,2013-05-20T08:39:53Z,thanks for the pull request!the position of the `var`s is a stylistic choice in this case and is checked by jshint so i'd rather not apply that part. i have moved the destination inside source check as you suggest though.,negative
testem/testem,mocha,2013-07-03T01:57:39Z,sorry for the delay in looking at this. the reason is you didn't include the testem script: `/testem.js`. you should set up a path for it and then load it right after mocha and then it should go.,negative
testem/testem,mocha,2013-07-05T16:02:15Z,require.js addition to the "mocha+chai" framework.. ideally i'd like to add this capability to all of the views. i think this would require a requirejs section in the config file though so that mustache placeholders can be used in the views..is there an irc channel or google group for discussion?,neutral
testem/testem,mocha,2013-07-05T22:13:32Z,hmm. i'd don't like the direction this is going. so i am not going to take this patch "as is". mocha. chai. sinon. require.js. and other test frameworks. some of these are mutually exclusive but some aren't. we need a more flexible way to specify these libraries.,negative
testem/testem,mocha,2013-07-08T18:43:07Z,okay. i did reproduce it. and you did make me go "wtf?". the issue is this: you have to insert the testem script `/testem.js` directly below the mocha script. and _not_ after you call `mocha.run()`.,negative
testem/testem,mocha,2013-07-11T02:44:29Z,i am done with the refactoring now. take a look at `lib/ci/test_reporter.js` if anyone wants to take a crack at it. i won't be able to help until next week. i'd like to have a command line option `-r` like mocha to specify the reporter to run. obviously only relevant for ci mode.,negative
DevExpress/testcafe,sauce,2016-02-29T11:09:21Z,kirovboris more likely we have a problem with saucelabs and travis,neutral
mochajs/mocha,mocha,2013-06-06T14:45:28Z,i cleanup in `before` hooks personally. that way even if you have a fatal error that mocha cant handle you just end up doing it next run,negative
mochajs/mocha,mocha,2013-06-07T15:10:55Z,update mocha.css. add "z-index: 1;" to #mocha-stats div so it lives above the rest of the output (makes sure you can always click on the "passes"/"fails" links at the top of the page) .,neutral
mochajs/mocha,mocha,2013-06-11T04:22:14Z,change in xunit reporter in test case time when the test fails. if we use xunit format as the mocha reporter. when the test case fails. the time attribute in test case will be nan. so when sonar wants to parse this xunit report. it raises parse exception which means it can not parse nan value of time.  so we replaced part related to create time value of test case from :    time: test.duration / 1000to :         time: test.duration ? test.duration / 1000 : 0,negative
mochajs/mocha,mocha,2013-06-13T13:11:30Z,there's a ton of ways to handle this. depending on if you want the data to stream or not etc. so i'd like to leave this out. people can just tap into the runner like mocha-cloud does,neutral
mochajs/mocha,mocha,2013-06-13T19:37:04Z,add a feature to optionally direct the test output to a file.. when using mocha from within a framework like grunt. it can be useful to direct the test output to a file. for example. when using the xunit reporter. then all of the output from various test suites could be collected and parsed after the fact.the implementation creates a new output library and changes all of the test reporters to call output.log or output.write instead of directly calling console.log or process.stdout.write.it also adds a command line option "-o <file>" to enable the redirection.also added a test rule to the makefile that lists all of the reporters and verifies that the output is properly generated when the option is enabled.,neutral
mochajs/mocha,mocha,2013-06-17T11:15:24Z,try starting bash.exe as a login. interactive shell. in the console settings. set the shell property to something like:c:\cygwin\bin\bash.exe --login -ithis should make bash behave exactly as in the default cygwin terminal,neutral
mochajs/mocha,mocha,2013-06-17T14:06:00Z,+1 commonjs promises/a should be first-class citizens in mocharstacruz your helper eats the correct error location. how about``` coffee-scriptpt = (fn) -> (done) -> fn().then((-> done()). done)```this is basically what mocha-as-promised does. but it does it on everything.,negative
mochajs/mocha,mocha,2013-06-17T16:54:15Z,this would be awesome. not just to redirect to files. but to any stream. for example. we're trying to stream the result of our test suite to a browser and now the only way it to spawn a child process. which is kind of a lot of work just to "hijack" the stdout!,positive
mochajs/mocha,mocha,2013-06-17T17:10:54Z,why not just redirect stdio? seems like a lot of hacky-ish changes for little gain. julien51 i wouldn't consider that bad practice at all personally,negative
mochajs/mocha,mocha,2013-06-17T17:23:55Z,but if we redirect stdio that will apply to all other stdout statement in our app. which has a lot more than mocha in it :( ok. we'll try that then.,neutral
mochajs/mocha,mocha,2013-06-17T18:10:37Z,oops -- sorry about that - i didn't intend to close the request.,negative
mochajs/mocha,mocha,2013-06-18T09:07:41Z,--compilers only compile specs. should also compile source. i'm running mocha like this``` bashmocha --reporter spec --compilers coffee:coffee-script --require should```i keep my specs in ./test and my source in ./src. both are coffeescript. when i run mocha. the specs are compiled correctly. but the source seems cached or not run through the coffeescript compiler at all. i can verify this by introducing an error in the source code and re-run the tests. but they will still pass.funny side note: when using `--watch test`. the source files are also watched. even though they are not in the test directory. but they are still not compiled before the specs are run.,negative
mochajs/mocha,mocha,2013-06-23T03:26:24Z,mocha is awesome. visionmedia you may not think promises are also awesome. but a lot of mocha's users do and need to test their promise based code. please provide better extensibility than the black magic required in mocha-as-promised. or add first class support for promises to mocha.,positive
mochajs/mocha,mocha,2013-06-26T12:42:46Z,there are also cases where you can't control what's written to stdout by third party libraries that you include in your tests. any random output mixed in with an xunit report will break parsers trying to read it.this change would be immensely useful for feeding test results into ci systems.,neutral
mochajs/mocha,mocha,2013-06-26T17:19:44Z,in general i don't really think third-party libs should even write to stdio. that's generally bad practice. with some exceptions of course :d as for debugging with console.log()s you could always just write to stderr instead,neutral
mochajs/mocha,mocha,2013-06-28T12:56:46Z,nodeunit-like expect assertions. nodeunit's expect feature:> expect(amount) - specify how many assertions are expected to run within a test. very useful for ensuring that all your callbacks and assertions are run.does indeed seem useful. if `mocha` has developer docs i'd see about hooking this in as a plugin.,positive
mochajs/mocha,mocha,2013-07-01T07:03:01Z,expose the browser shim process as mocha.process. expose for mocha phantomjs to use.,negative
mochajs/mocha,mocha,2013-07-01T21:06:16Z,no sorry,neutral
mochajs/mocha,mocha,2013-07-01T21:08:46Z,definitely not mocha. not sure what's going onthere sorry,negative
mochajs/mocha,mocha,2013-07-01T21:11:04Z,if we do something similar i'd definitely prefer to just pass an arbitrary output `stream`,neutral
mochajs/mocha,mocha,2013-07-01T21:11:58Z,julien51 you'd want to run mocha in a sub process for isolation anyway. so reading from stdio there is pretty natural imo. no reason to dump it to a file (you could just redirect anyway),positive
mochajs/mocha,mocha,2013-07-01T21:15:35Z,superstructor mocha works just fine with promises. especially with generators around the corner this won't matter at all. if anything the fact that promises are annoying here. illustrates that they are annoying :p,positive
mochajs/mocha,mocha,2013-07-01T21:20:50Z,we can't do this sort of thing since we dont couple with any assertion library. but it's pretty easy to do little counters if you need to and do `assert(n == 3)` for callback checks etc. pretty much the same thing maybe an extra line or two,neutral
mochajs/mocha,mocha,2013-07-01T21:28:59Z,visionmedia yeah i know. and this is what i've been doing for testing streams but such tests are verbose enough. and every little line added is getting painful.i just need to find a way to make a nice little util that does this automatically. but that requires knowing the internals of mocha and an assertion lib. and hope i can make them cooperate. right now mocha api/internals aren't documented so not likely to do this soon...,negative
mochajs/mocha,mocha,2013-07-01T23:50:10Z,i originally started down this road where each reporter would get to the output stream through the base class. the problem is that a number of reporters emit output from callbacks. obviously we could bind 'self' before calling the output but it seemed that using a module would be simpler than forcing callers to go through the reporter instance.however. as jbowes requested it would be trivial to also pass the stream to the reporter. i will work on a patch to change it to do this as well.,positive
mochajs/mocha,mocha,2013-07-02T01:16:37Z,visionmedia thanks for the references,neutral
mochajs/mocha,mocha,2013-07-02T10:33:05Z,thanpolas not quite. if the promise fulfills with a value it will call done(value) which makes mocha complain. i'm not sure what you mean by `partial`?,negative
mochajs/mocha,mocha,2013-07-02T10:37:42Z,thanpolas oh i see. yes that works. you could create `ok` and `nok` wrappers for done that do the right thing. but the point was that it's much nicer to use mocha-as-promised :grinning:,neutral
mochajs/mocha,mocha,2013-07-02T17:21:46Z,updated the branch as requested.of course. by changing the contract of the reporter constructor. any reporters defined outside of the source tree will need to be modified accordingly. but then they will have simpler access to the output stream.,neutral
mochajs/mocha,mocha,2013-07-02T18:16:05Z,visionmedia is there a global `beforeeach` and `aftereach` hook in `mocha`? my thinking is that if i can have mocha use a plugin that hooked on like that. i would have the `expect` function setup for all my tests as long as `mocha` is run with that plugin. i.e. on the cli via `--require`.that would be ideal.,negative
mochajs/mocha,mocha,2013-07-04T23:13:51Z,yup. root-level ones outside of describes() are attached to the root suite named `""`,neutral
mochajs/mocha,sauce,2016-09-14T19:22:11Z,address saucelabs flake. we're hitting some flake when running tests against saucelabs; from time-to-time the browsers fail to launch. for whatever reason.  investigate. fix. etc.,negative
mochajs/mocha,sauce,2016-09-14T23:29:25Z,failure is sauce flake.  i think the sauce connect tunnel is not getting shut down quickly enough.  see #2478,negative
casperjs/casperjs,jshint,2013-05-22T23:33:29Z,tests are green. travis ci fails only because of jshint that is not happy because i added two "if" statements. and because i added a line break on a line of code on an assignement. i can fix this last "issue". but should i really to refactorize the entire code of bootstrap.js just because of these two if???,negative
casperjs/casperjs,jshint,2013-05-22T23:53:36Z,ok. no refactoring is needed. i just increased jshint parameters :),neutral
casperjs/casperjs,eslint,2015-08-19T06:38:52Z,update .eslintrc to fix travis ci error. note i haven't tested this directly. just took a guess looking at the error.,negative
casperjs/casperjs,eslint,2015-08-19T22:32:21Z,ok. worked out there are some inline eslint comments in the casper code that look to be invalid. i can work through these next week. as well as tidy up these commits.,negative
casperjs/casperjs,eslint,2015-08-23T07:24:22Z,ok this now fixes the travis build errors - n1k0 can you please merge this?,positive
casperjs/casperjs,eslint,2015-08-23T17:54:14Z,pull #1298 fixes the eslint breakage.,neutral
casperjs/casperjs,eslint,2015-08-25T12:55:07Z,thanks.,positive
casperjs/casperjs,eslint,2015-08-25T12:58:10Z,n1k0 - happy to help. thank you!,positive
node-schedule/node-schedule,coveralls,2015-07-23T14:15:26Z,i think the coveralls outage is breaking the build. but tests should be passing :heavy_check_mark:,neutral
dondi/GRNsight,mocha,2018-03-26T19:00:28Z,npm test command failing due to mocha throw err. investigating what the cause is.,negative
qiao/PathFinding.js,mocha,2015-03-26T12:33:04Z,updated mocha link.,neutral
fb55/htmlparser2,jshint,2014-07-27T07:41:45Z,fb55 simplified `npm run lint` invocation and verified that both `jshint` and `jscs` catch (forced) errors on my rig.,negative
karma-runner/karma-sauce-launcher,sauce,2014-07-18T17:13:03Z,having no option to specify (let alone auto-detect from the user account via the rest api) what the concurrency should be basically means this always fails when using more than 2 to 4 browsers and forces users to fragment run targets (e.g. in grunt) – which slows things down quite a bit (not in the least due to #14).i reckon the same applies to browserstack and other cloud services. perhaps that justifies a change to the core karma software to support this natively?something like:> `option.browserconcurrency` (number|function) number (or function that invokes its callback parameter with a number). indicating the number of browsers to launch at once. defaults to null which indicates all browsers will be launched at once.the main complication i expect will come up relates to the ability to run karma continuously in the background. it would have to kill and restart browsers each run.---**edit**: on second thought. while it still needs support from karma internally. the actual concurrency limit should probably be handled by the launcher so that one can have e.g. unlimited local browsers that run continuously. with 10 browserstack and/or 3 saucelabs browsers being killed after each run.,neutral
karma-runner/karma-sauce-launcher,sauce,2014-07-25T01:54:47Z,document sauceconnect config options,neutral
karma-runner/karma-sauce-launcher,sauce,2014-07-25T17:46:49Z,pkozlowski-opensource ah. right will squash. forgot about the `docs:` prefix,neutral
karma-runner/karma-sauce-launcher,sauce,2014-07-26T13:19:40Z,can the `log` branch be safely deleted?,neutral
karma-runner/karma-sauce-launcher,sauce,2014-07-26T13:21:06Z,aymericbeaumet i think so. it looks like chriswren is not using his own fork but pushing branches to be merged directly to this repo. lol.,neutral
karma-runner/karma-sauce-launcher,sauce,2014-07-26T13:53:54Z,i can't blame him i'm doing the same... :) i'm just asking to clean up a little.,negative
karma-runner/karma-sauce-launcher,sauce,2014-07-30T17:52:05Z,chriswren grouped docs and chore commits and pushed.,negative
karma-runner/karma-sauce-launcher,sauce,2014-08-08T14:41:18Z,hm. further investigations reveal that karma's web server prevents node process from exiting. for some reason using sauce-connect-launcher with a manually started sauce tunnel prevents the htttp server from closing (the `server.close()` callback is never called...).,neutral
karma-runner/karma-sauce-launcher,karma,2014-07-23T06:24:48Z,saucelabs custom-data. hey guys.first of all. thank you for these project around karma.i see that saucelabs allows us to post "custom-data" informations.i also see that "custom-data" is used to store result of testing (pass/fail).is there a possibility to add custom "custom-data" and retrieve them on saucelabs dashboard (for my case some jenkins informations) ?,positive
karma-runner/karma-sauce-launcher,karma,2014-08-07T07:53:48Z,a bit more info on this one - sauce launcher makes karma hang only if sauce tunnel is started manually `startconnect: false`.,negative
felixrieseberg/ember-electron,mocha,2017-07-24T21:49:49Z,no. there is currently no nicely boxed-up way to do this. if i were going to try to do something like this. i would probably try to implement a test-only ipc listener in the main process that can receive messages from the renderer processes and run code that simulates clicking on menu items.`tests/ember-electron/main.js` is used in place of `ember-electron/main.js` when running `ember electron:test`. so you can put test-only main process code there. if you register an ipc listener for some kind of an event that you can send from your tests specifying the menu item you want clicked. then the main process code could call `menu.getapplicationmenu()`. look up the menu item specified by the renderer process. make sure it's enabled or whatever other validation logic you want. and then invoke its click handler manually.so you'd still have to do the work to implement the "click this menu item for me" protocol. and the logic to look up and validate the menu item and call its click handler.i haven't actually implemented this myself. but that's the best way i can currently think of to achieve this inside ember tests. there might be a better way to achieve what you want using `electron-mocha`. but there isn't a good way to run any ember code under `electron-mocha` now. so you'd really just be testing the main process.,neutral
wix/detox,mocha,2017-04-20T16:34:51Z,add a create-e2e command. add a create-e2e command to create the e2e folder and the init.js. mocha.opts and myfirsttest.spec.js files inside it automatically,neutral
ipfs/js-ipfs,uglify,2018-03-17T06:32:48Z,changing uglify config to support ipfs make it quite sad from the dev experience perspective. especially if you're using a tool like create-react-app in which you don't have access to the webpack config (and ejecting is not an option). may we reopen this issue until we have a definitive fix?,negative
cfpb/hmda-platform,codecov,2016-07-11T22:04:31Z,codecov is complaining that the coverage percentage is decreasing. which is true. but that's because there are fewer lines of code.  i might look into removing the unused lines. but it seems separate from this pr.,negative
iurimatias/embark-framework,mocha,2017-03-08T14:08:01Z,are you running ```embark test``` or ```mocha test/ --no-timeouts``` with the no-timeouts option?,neutral
iurimatias/embark-framework,mocha,2017-03-08T14:09:59Z,i'm unit testing the framework itself via `grunt mochatest`,neutral
chentsulin/electron-react-boilerplate,eslint,2016-04-15T11:26:27Z,i am almost ready to merge this pr. jhen0409 could you move `--ignore-pattern` to a `.eslintignore`? thanks a lot.,positive
chentsulin/electron-react-boilerplate,eslint,2016-05-13T17:40:53Z,upgraded eslint-config-airbnb to v9,neutral
AnalyticalGraphicsInc/cesium,jasmine,2018-03-28T15:38:14Z,update semver major npm modules. no code changes. but we did have to disable random test ordering in jasmine since cesium's unit tests unfortunately do not work when ran in a random order.i'll write up an issue to re-enable random test running (and fix broken tests).,negative
AnalyticalGraphicsInc/cesium,jasmine,2018-03-28T15:40:23Z,enable jasmine random test ordering and fix broken tests. #6383 upgraded jasmine which includes random testing ordering as the default.  this is desired because it creates more robust. standalone unit tests and make sure unit tests don't conflict with each other.  unfortunately. cesium's current unit tests have lots of this going on.  someone needs to re-enable the flag in `karma.conf.js` and fix any test failures exposed by repeatedly running `npm run test`. (this doesn't affect our ancient copy of jasmine that runs in the browser),negative
AnalyticalGraphicsInc/cesium,jasmine,2018-03-28T15:55:40Z,whoops. looks like there was some unexpected breakage (probably do to globby update). looking at it now.,positive
AnalyticalGraphicsInc/cesium,jasmine,2018-03-28T19:04:58Z,looks good. thanks mramato!,positive
google/blockly,eslint,2018-03-21T05:32:37Z,`eslint` is dead in the water here and **2** tests failed. i'll chase these up.,negative
GoogleCloudPlatform/nodejs-docs-samples,standard,2016-10-01T23:22:49Z,new quickstarts.. ace-n sorry for the size of the pr. it should be a quick review. i added a few new quickstarts and brought the other quickstarts up to standard.,neutral
GoogleCloudPlatform/nodejs-docs-samples,standard,2016-10-03T16:59:48Z,note: circleci is failing. seemingly because `google-cloud/dns` doesn't exist.jmdobry is this something you can fix? (i'll review/comment on the pr in the meantime - but that way we can run the unit tests before merging.),negative
GoogleCloudPlatform/nodejs-docs-samples,standard,2016-10-03T17:06:25Z,fixed. i forgot to add `dns` to the `scripts/install` file.,neutral
GoogleCloudPlatform/nodejs-docs-samples,standard,2016-10-03T21:44:07Z,lgtm.,neutral
GoogleCloudPlatform/nodejs-docs-samples,standard,2016-10-03T23:20:32Z,simplify translate samples and bring up to standard.. same changes as the recent cloud storage pr.,neutral
GoogleCloudPlatform/nodejs-docs-samples,istanbul,2016-03-30T01:50:16Z,jsimonweb ready for review. i suspect the coverage decrease is due to the switch from istanbul to nyc.,negative
GoogleCloudPlatform/nodejs-docs-samples,codecov,2016-08-19T01:25:17Z,...is there a reason test coverage dropped so much. or is `codecov.io` just being flaky?(if it's just `codecov.io`. lgtm.),neutral
vatesfr/xen-orchestra,eslint,2018-03-09T10:53:32Z,fix(prettierrc): add trailingcomma to avoid conflicts with eslint,neutral
Modernizr/Modernizr,sauce,2014-05-04T03:05:56Z,jokeyrhyme #1247 has operation aborted issues in ie7 which i believe is a vm issue as sauce labs ie7 doesn't throw the same error that browserstack has.,negative
rambler-digital-solutions/dotfiles,eslint,2016-08-10T22:31:52Z,feature/import-plugin added rules from eslint-plugin-import,neutral
rambler-digital-solutions/dotfiles,eslint,2016-08-12T10:21:06Z,add test with cases for eslint. добавил пример как тестировать eslint непосредственно на каком-то исходном коде,neutral
svgdotjs/svg.js,karma,2017-03-02T16:24:57Z,we could run all the tests for different documents. only the very first setup code would be different for svg (the first four lines in helper.js).for now i dont think a seperate environment is needed. op updated its post and he uses an html document. too. so we can test the most relevant cases in our normal spec.however to make sure that everything really works. it might be useful to have this svg environment.cool thing about the logo on the karma website. they should change the title to svg.js though... :),neutral
alfa-laboratory/arui-presets,eslint,2018-03-19T18:40:22Z,feat(eslint): add componentdidcatch handling in plugins,neutral
walmartlabs/eslint-config-defaults,eslint,2016-05-02T07:32:01Z,hi all. is this still an issue? i'm using a globally-installed `eslint` and am not having issues.,neutral
react-boilerplate/react-boilerplate,eslint,2016-09-16T09:01:09Z,pre-commit stops working after setup and clean. i tried out the pre-commit functionality in the example project before running the setup and clean commands and this functionality seems super convenient. however. after starting to develop my own project after running setup and clean. the pre-commit checks seem to be disabled. i tried adding a bogus .js file with many lint error which were detected by my ide (using the project's eslint config). but the commit still went through. is this a bug or can i simply enable and edit the config somewhere? the pre-commit in my package.json has no diffs with the current head. thanks!,negative
react-boilerplate/react-boilerplate,eslint,2016-09-25T04:31:59Z,yes. i think so. as part of the weekly dependency update i do a `git commit` a new clone after `clean`.i see precommit hook run eslint and style lint.works as expected afaict.,negative
react-boilerplate/react-boilerplate,eslint,2016-10-03T06:18:44Z,why is `react/prefer-stateless-function` disabled?. in many places. it seems like the eslint rule `react/prefer-stateless-function` is disabled. what was the reasoning for this decision? personally. i think stateless components is one of the best parts of react because it emphasizes how the ui is a pure function of the state.,negative
react-boilerplate/react-boilerplate,eslint,2016-10-03T17:31:01Z,i see. thanks for clarifying.,positive
react-boilerplate/react-boilerplate,eslint,2016-10-04T08:50:26Z,shouldn't `react/prefer-stateless-function` be disabled in `package.json`?,neutral
react-boilerplate/react-boilerplate,karma,2016-09-29T03:33:34Z,and should the source code that being used in backend alone will be kept in `/app` directory the same as frontend source code? or should we kept in `/server` ? can you give me some idea please ?and can i use karma as a test runner for backend functionality ?,neutral
Esri/esri-leaflet,standard,2015-12-04T16:46:55Z,supporting tile map service with different lods. i'm trying to make a start on being able to use a tiled map service which has different levels of detail than the arcgis online schema and i'm running into issues that i can't quite fathom.i've a tiled map service which shares the same schema as an arcgis online service. except that the scales at the different lods are different.i've updated the resolutions in the tilemaplayer.js to reflect the resolutions of this map service and whilst it would seem to initially work as you zoom in and out the geography changes. by that i mean you could zoom into france and as the map scale changes you are suddenly looking at australia - or worse the app is requesting tiles that don't exist (getting 404's)......tile also seem to arranged incorrectly (so a tile for australia may be put next to a tile from somewhere else so the map looks like gibberish)is there something in particular that i'm missing? can anyone offer any pointers?thanks. tonybtw. the reason we're looking to do this is that we have a corporate standard for lods that all of our leaflet apps are being written to use and so loosing the ability to use agol services is not a significant issue at this stage.  eventually i'd like to see if we can produce an update to the tilemaplayer.js that dynamically builds the necessary resolutions from the service's metadata each time a new layer is created / added - would this generally be of use?,negative
Esri/esri-leaflet,standard,2015-12-04T21:34:13Z,ideal - thanks for the pointer.will update the thread on progress next week.,positive
apache/zeppelin,selenium,2016-06-13T07:06:50Z,you need to trigger the selenium test locally. it doesn't by default without some configuration.(test_selenium="true" as env)otherwise you can just push your changes and let the ci do it,neutral
apache/zeppelin,selenium,2016-06-13T13:46:48Z,leemoonsoo thank you for taking a look at it. have added a selenium test case for the same.,neutral
apache/zeppelin,selenium,2016-06-13T13:48:37Z,bzz thanks for the guide. i'm good at selenium. thus i thought zeppelinit.testsparkinterpreterdependencyloading was related to that issue. i'll look into it but do you know how to reproduce or why it occurs? i re-triggered it and passed all tests.,positive
apache/zeppelin,selenium,2016-06-14T08:28:13Z,somehow selenium tests keep error with ```tests in error:   paragraphactionsit.testremovebutton:145->abstractzeppelinit.waitforparagraph:84->abstractzeppelinit.pollingwait:110 â» timeout  paragraphactionsit.testmoveupanddown:182->abstractzeppelinit.waitforparagraph:84->abstractzeppelinit.pollingwait:110 â» timeout  paragraphactionsit.testcreatenewbutton:77->abstractzeppelinit.waitforparagraph:84->abstractzeppelinit.pollingwait:110 â» timeout```which is not related.  will be reopening. ready for review,negative
apache/zeppelin,selenium,2016-06-15T04:12:08Z,lgtm. minahlee the selenium test of travis has a problem so corneadoug is fixing now.,neutral
apache/zeppelin,selenium,2016-06-21T06:09:21Z,i am ok with either approach. seems like corneadoug has strong opinion on having two separate menu so i will leave it as it is. i will need to fix selenium test to make it to be merged though.,positive
apache/zeppelin,selenium,2016-06-21T21:24:05Z,updated selenium test and ci passes,neutral
apache/zeppelin,selenium,2016-06-22T15:11:26Z,astroshim could you rebase and see if it passes selenium test ci build profile?,neutral
apache/zeppelin,selenium,2016-06-22T17:28:38Z,the selenium test has passed!!,neutral
apache/zeppelin,selenium,2016-07-05T06:12:24Z,let me merge this into master as hotfix once the selenium test of last commit becomes green.,neutral
apache/zeppelin,karma,2015-07-17T09:44:09Z,why would adding components to karma.conf break the ci?,neutral
yeoman/generator,mocha,2013-07-05T10:57:30Z,i would like to write-up a proposal for generators that can easily consume or build-on other generators. i feel like this is parallel to the unit-testing story as we ideally want generator-mocha and so on to be able to work more closely with framework generators.people want to be able to yo chromeapp angular karma and so on with it just working. right now that's far off from what is capable of doing cleanly.,neutral
yeoman/generator,coveralls,2014-02-15T12:13:23Z,up coverage result on coveralls. everything is in title.,neutral
yeoman/generator,coveralls,2014-03-10T17:33:56Z,mazerte any chance you can address the precedent comments?,neutral
yeoman/generator,coveralls,2014-03-10T17:51:29Z,yes. i test it this way in inquirer because i test the inquirer implementation. in the context of yeoman. you test yeoman. not inquirer and the readline. as so. you only need to mock (override) the adapter prompt method for your own mocked one. for example:``` jsbeforeeach(function () {    this.promptreturns = { status: 'force' };    mockadapter.prompt = function (questions. cb) {        cb(this.promptreturns);    });});```,negative
anvilresearch/connect-nodejs,eslint,2016-01-27T23:53:15Z,i was just about to take a look at the camelcasing comments from christiansmith on gitter. i'd be interested to hear about which errors you're getting. i'm not getting any at the moment. for me `npm run test` gives 414 passing and 20 pending tests.christiansmith i don't believe the camelcase thing is configured in the `eslint` configuration at the moment (nor is it called before running tests as it is in other anvil repositories). are either of these something we'd like to add?also would you like these 'correction' commits to be squashed or left as-is? i can go either way.,negative
anvilresearch/connect-nodejs,eslint,2016-01-28T16:55:41Z,bauglir we can look into the eslint config separately. i want to go ahead and merge this. looks great. thanks for the work!,positive
strongloop/generator-loopback,eslint,2016-12-07T09:30:07Z,update to latest eslint and loopback config. this allows us to start using es6 syntax in the codebase.,neutral
zurb/foundation-sites,karma,2014-03-23T14:05:28Z,update devdependencies in package.json. remove duplicates and update all packages except:- highlight.js ... because it causes error with grunt- karma related stuff ... because i am not sure how are you using this and there might be potential conflicts,negative
zurb/foundation-sites,karma,2014-03-26T12:06:45Z,updated. conflict resolved,positive
vvo/selenium-standalone,selenium,2015-01-03T08:43:59Z,update start-selenium. start-selenium was broken after last commit because no callback was being passed.added a noop callback,negative
vvo/selenium-standalone,selenium,2015-01-04T02:43:01Z,update config settings. conf.js assumed hub url port of 4444if -port 222 is passed as selenium server argumentthe server will start but then get killed after 60s timeoutadded simple argument parser specifically looking fora port passed as selenium standalone argument,negative
vvo/selenium-standalone,selenium,2015-01-04T08:07:52Z,thanks again. i also did some changes to the start-selenium bin so that it does not uses the cb() for now.this project needs some serious refactoring :d,negative
vvo/selenium-standalone,selenium,2015-01-09T16:25:33Z,selenium standalone intermittently fails. since merging into pouchdb the selenium tests are failing a lot more commonly than they used to be. i havent figured out why yet,negative
vvo/selenium-standalone,selenium,2015-01-09T16:51:43Z,but there's the get request being done so that's strange. maybe log how many tries you do,neutral
vvo/selenium-standalone,selenium,2015-01-09T17:01:41Z,give selenium more time to start,neutral
vvo/selenium-standalone,selenium,2015-01-09T20:54:30Z,sorry i am the one responsible for lowering the timeout :),negative
vvo/selenium-standalone,selenium,2015-01-10T01:00:31Z,vvo any chance of a quick patch release before v3? this is hitting everyone who makes a pr against pouchdb and i wont be able to update to v3 for a few days?either way closing as its merged. thanks,positive
vvo/selenium-standalone,selenium,2015-01-12T19:51:54Z,amiya-pattnaik i have too litle information to help you i know project working fine with latest selenium-standalone. you better have a look yourself if you want to debug.,positive
vvo/selenium-standalone,selenium,2015-01-16T18:34:47Z,generic error when the jar is missing. when running `selenium.start` without having the jar in place. you end up with a generic error (timeout). highlights two things. actually:- imo there should be a specific error for this case (it'll probably be common for api usage)- `selenium.start` should listen to the `exit` event and generate an error if it has yet to start,negative
vvo/selenium-standalone,selenium,2015-01-16T18:47:09Z,great to see you contributing but what is the added value of this statement at this particular position in the readme?you want to say that the chromedriver is not stored on selenium servers that's it?,neutral
vvo/selenium-standalone,selenium,2015-01-16T18:57:04Z,> selenium.start should listen to the exit event and generate an error if it has yet to startok so now i understand th exit thing. let me handle all this for you.,negative
vvo/selenium-standalone,selenium,2015-01-16T19:00:31Z,awesome. thanks!,positive
vvo/selenium-standalone,selenium,2015-01-16T19:01:53Z,extra clarification. just in case: the child process dies immediately if the jar is missing (it emits `exit`). but selenium-standalone misses that event. so it keeps waiting until it times out,negative
vvo/selenium-standalone,selenium,2015-01-16T19:02:40Z,ok so looking at your behavior. the missing features for you would be:- listen for exit of selenium before it has started: it should be an error right? seems legit (#57)- provide a way to get the selenium log. either by returning you the child_process immediately or provide a seleniumlogger function that will listen for stdin/stdout for youwhat do you tihnk?,neutral
mcollina/ascoltatori,mocha,2014-04-12T13:26:12Z,spurious test failures due to weird mocha supports. also. it's not reallyascoltatori responsibilityto do it. normally. you might want a domain foreach subscriber. not a general one.,neutral
nathanboktae/mocha-phantomjs,mocha,2015-11-03T22:03:52Z,same issue for me. running mocha-phantomjs on an elcapitan osx:```> mocha-phantomjs ./test/client/index.htmlphantomjs terminated with signal sigkillnpm err! test failed.  see above for more details.```,negative
nathanboktae/mocha-phantomjs,mocha,2015-11-06T20:08:13Z,es6 code doesn't work?. i'm having some issues running my tests that contain es6 code? they run just fine if i open up the `test.js` file in say chrome where v8 is definitely ready to handle es6 but not in the interpreter packaged with `phantomjs`. is there anyway to make `mocha-phantomjs` compatible with es6 besides pre-`babelify`ing the test.js file?,neutral
nathanboktae/mocha-phantomjs,mocha,2015-11-12T07:59:48Z,lgtm. :+1:,neutral
nathanboktae/mocha-phantomjs,mocha,2015-11-19T20:43:45Z,is there a way to use the mocha --compiler flag while running through mocha-phantomjs? this would make it simple to use babel. as with other mocha code:`mocha --compilers js:babel-core/register`,neutral
nathanboktae/mocha-phantomjs,mocha,2015-11-19T20:56:25Z,that's for when mocha runs in node.js. mocha runs in the browser in phantomjs with `mocha-phantomjs`. if you want to bring in babel on the client side and compile your code there. that works.,neutral
nathanboktae/mocha-phantomjs,mocha,2015-11-20T08:01:36Z,yup that works. #hipstertax (i pay it too sometimes :),neutral
stormpath/express-stormpath,eslint,2016-03-04T17:42:18Z,fixed issue with deprecated eslint rules.,neutral
jfhbrook/node-ecstatic,eslint,2017-12-16T06:38:25Z,hehe failing in node 4 and 5 after i followed airbnb's eslint - dropping node 4 and 5 support to destructuring assignment or make two small fixes in tests... yaa. remove destructuring - it also sounds so negative.,negative
marionettejs/backbone.marionette,mocha,2014-10-24T00:50:48Z,trigger method optimizations. this pr adds a special internal function``` jsmarionette._triggermethod```how should i benchmark this. the only benchmark i've used so far is the reported running time of the test-suite. according to `mocha` post these changes the tests run `300ms - 400ms` faster (with a couple extra tests). note: `triggermethod` is called 7790 times in the specsfeel free to reject as this really dirties the code. but i feel it may be worth it for such a hot function,negative
marionettejs/backbone.marionette,mocha,2014-10-24T18:49:07Z,if `_triggermethod` allows passing a context does this then remove the need for `triggermethodon`?,neutral
marionettejs/backbone.marionette,mocha,2014-10-26T01:52:17Z,megawac. want to add jshint exceptions to the top of the file so that travis passes?,neutral
marionettejs/backbone.marionette,mocha,2014-10-27T15:08:49Z,hey megawac. i just rebases master onto minor. mind doing a quick rebase and re-push.,positive
marionettejs/backbone.marionette,mocha,2014-10-27T18:33:11Z,duncanbeevers - we're investigating. but good news. this has nothing to do with your change :) looks like a package dependency broke for mochatest,positive
marionettejs/backbone.marionette,mocha,2014-11-03T19:32:35Z,megawac just cherrypick this whenever and i will :eyes: thanks again :heart:,positive
marionettejs/backbone.marionette,mocha,2014-11-09T22:26:37Z,if you put this at the top of the file it should fix those.``` js/* jshint maxstatements: 14. maxcomplexity: 7 */```,neutral
marionettejs/backbone.marionette,mocha,2014-11-09T22:37:48Z,yeah. working on another project at the moment. i'll come back to this later to night probably,neutral
apache/tinkerpop,standard,2015-06-18T17:53:23Z,if you are messing with gremlin-hadoop dependencies then i would not only verify against the integration tests. but also against standalone servers of both hadoop and sparkserver as that is where the `<dependency>`-exclusion balancing act makes itself apparent. if everything still works (no weird classnotfound. methodnotfound. etc. exceptions) on standard gremlin olap queries. then it should be good to merge.,neutral
nteract/nteract,mocha,2016-05-17T19:01:23Z,we do have access to the dom with `electron-mocha` for testing. `setcellhoverstate` seems like the most likely candidate for testing.,neutral
nteract/nteract,eslint,2016-09-14T00:32:02Z,rely on rx for async completion flow. completion only gets used in the editor so i reduced the boilerplate down a bit into one function on the component. we can extract this after.the flow is way more direct. no more back and forth with promises and callbacks. also. i cleaned up the use of `debounce` in favor of `switchmap` - user gets exactly their intent and code state.while i was at this. i noticed that eslint-config-airbnb (or some downstream dep) introduced a new rule that i'll have to clean up on another pr. dropping it via our config now.,negative
nteract/nteract,eslint,2016-09-14T00:32:20Z,amusingly. i'll bet this increases code coverage. i'll be writing some tests now.,positive
nteract/nteract,eslint,2016-09-14T00:56:12Z,whoa whoa. i'm deep in tests. it's cool,positive
nteract/nteract,eslint,2016-09-14T04:34:08Z,more editor cleanup. tiny bit more tested. meanwhile. i cleaned out a bunch of tests and started setting up an eslintrc for the test directory.,neutral
nteract/nteract,eslint,2016-09-15T05:52:13Z,remove old dep. bump eslint-plugin-react. general cleanup.,neutral
nteract/nteract,codecov,2016-09-11T21:41:23Z,once codecov updates again. this is ready to go. i need to do some thinking on how to do duplicate notebook.,neutral
nteract/nteract,codecov,2016-09-11T22:33:56Z,hopefully this didn't break codecov... please report back codecov. i miss you.,negative
nteract/nteract,codecov,2016-09-12T04:34:26Z,add initial comm test suite. now everything in `src/notebook` is analyzed by codecov so we have a more accurate coverage value.,positive
nteract/nteract,codecov,2016-09-12T05:14:31Z,.,neutral
nteract/nteract,codecov,2016-09-12T06:06:30Z,amusingly. we don't actually use this code anywhere - it's part of the setup for the widgets.,positive
mantoni/mochify.js,mocha,2015-01-22T18:32:15Z,need to pass --web-security=[true|false] to phantomjs. hey!i'm building an api module that is supposed to work both in node and in privileged browser environments such as phonegap/cordova. it contains integration tests making cross-origin requests to a url that is not cors-enabled. this is fine for my use-case since the xhr in phonegap/cordova is not restricted by the same-origin policy.these integration tests work with mocha (since node too can make cross-origin requests). but fail in mochify since it's not currently possible to pass the necessary `--web-security=false` flag into mochify and on to phantomic and phantomjs. do you think we could add support for it somehow? if so. i can do the implementation. but we'd of course have to agree on a sane solution.i guess we could either make some kind of subargs thingy that lets you specify arbitrary arguments to be passed on from mochify to phantomic and then on to phantomjs. or we could add an explicit --web-security flag to mochify and phantomic. do you prefer any of them. or do you have any other ideas?thanks!,neutral
mantoni/mochify.js,mocha,2015-01-23T07:04:24Z,it should be straight forward to add an explicit -- option for this. use the phantomjs option name and just pass it through.i gave up looking into a generic solution for options. you need to know which one affects which library. assign default etc...thanks!,positive
mantoni/mochify.js,mocha,2015-01-27T09:06:23Z,good work :+1:,positive
mantoni/mochify.js,eslint,2016-01-28T19:47:25Z,gyandeeps you're talking about mocha now. mochify is a slightly different story. you're not testing eslint in the browser with mochify. do you? :grinning:,neutral
bigcommerce/stencil-cli,eslint,2017-10-05T23:01:41Z,solved: thanks to mjschock . i was able to fix the problem. turns out that i had a video in the project folder that was taking up a lot of space (about 20 mb). i moved that video into webdav and referenced it there instead. after making those changes. i was able to both upload and process my theme successfully.side note: if you have bunch of red errors while bundling (via 'stencil bundle' or 'stencil push'. try removing the .eslintrc and .eslintignore files. that was another problem i ran into earlier.,negative
jshint/fixmyjs,jshint,2013-11-11T06:19:19Z,updated one more time. removed deprecated jshint options and enabled more stuff in jshintrc.can't we make jshint ignore options it doesn't know like `auto_indent` and `indentpref`? or work around this somehow?,neutral
hoodiehq/hoodie,karma,2013-11-14T15:46:21Z,ay gotcha! looks good to me! or anything particular i should look into? i've just seen that you downgraded karma. why's that?,positive
hoodiehq/hoodie,karma,2013-11-14T15:47:02Z,>  i've just seen that you downgraded karma. why's that?some peer dependency issue...,neutral
hoodiehq/hoodie,karma,2013-11-22T19:23:09Z,what's the status here?,neutral
hoodiehq/hoodie,karma,2013-11-22T19:32:49Z,svnlto could you please look into this? it's really obstructive,positive
hoodiehq/hoodie,karma,2013-11-25T09:17:38Z,gr2m status is: it's working but ff build currently fail because of an issue with tests.,negative
cloudchen/grunt-template-jasmine-requirejs,jasmine,2014-05-20T09:31:39Z,hello. how can i change the fixture paths for jasmine-jquery? can i pass some params?,neutral
cloudchen/grunt-template-jasmine-requirejs,jasmine,2014-05-20T16:11:28Z,at the end of the day i created another helper and changed the paths there,neutral
hammerjs/hammer.js,jshint,2017-01-24T14:50:16Z,syntax error when combined between multiple scripts. there seems to an error caused by an unclosed function/exception. the error i get when i include this script:     `syntaxerror: expected expression. got '*'`would it be possible to check this script with jslint (jshint.com)?,negative
cpojer/js-codemod,eslint,2016-02-26T23:48:21Z,thanks. should probably make eslint throw on travis..,neutral
cpojer/js-codemod,eslint,2016-02-27T00:55:54Z,i think if you only have warnings. eslint will use an exit code of 0. which i think travis will not fail on. you probably want to tell eslint to use errors instead of warnings for the things you care to enforce at ci.,negative
cpojer/js-codemod,eslint,2016-03-11T08:23:09Z,add dangling commas transform. transform to add dangling commas to allow enabling eslint dangling-commas always-multiline rule. it formats only arrays and objects that don't already have a dangling comma to keep changes as minimal as possible.what i did is to find all the object/arrays that don't have a trailing comma and then add a random key to them so they are modified. then in a second pass i remove the added keys and format using recast trailingcomma option.the end goal here would be to run that the on react-native codebase to enable stricter eslint rules without having to manually fix the 1k+ warnings it will generate :)tested against the react-native codebase pretty succesfully. the only thing it doesn't support that eslint complains about is trailing commas in destructuring. it should be pretty easy to add support.,positive
cpojer/js-codemod,eslint,2016-03-11T08:28:07Z,cc cpojer,neutral
cpojer/js-codemod,eslint,2016-03-11T08:28:16Z,benjamn is there a way to force-reprint a node?,neutral
cpojer/js-codemod,eslint,2016-03-11T08:43:44Z,:+1: damn i liked my hacky 3am solution haha,positive
cpojer/js-codemod,eslint,2016-03-11T08:46:26Z,it's certainly original! i'd prefer not to add anything to objects or arrays though. even if its temporary! i'm scared that the codemod goes wild and adds a field it doesn't remove.,negative
cpojer/js-codemod,eslint,2016-03-11T08:56:41Z,alright now it's a lot less funky :),neutral
cpojer/js-codemod,eslint,2016-03-11T08:59:18Z,would you hate me if i asked you to change `hasnodanglingcomma` to `hasnotrailingcomma` or so?,negative
cpojer/js-codemod,eslint,2016-03-11T09:01:38Z,should i change dangling comma for trailing comma everywhere then? i just took the name from the eslint rule.,neutral
cpojer/js-codemod,eslint,2016-03-11T09:03:15Z,i would be very happy if you did. :),positive
cpojer/js-codemod,eslint,2016-03-11T09:11:38Z,i love it! thanks. are you going to actually run it on react-native? :),positive
cpojer/js-codemod,eslint,2016-03-11T09:11:52Z,fixed. now i hate you forever :),negative
cpojer/js-codemod,eslint,2016-03-11T09:13:59Z,i tried it and it worked well. there was a few minor issues that were not related to this transform so i'll have to check that first.,neutral
appium/appium,selenium,2014-09-15T09:40:45Z,same error message as "mahshadul" . could not get list of sessions from appium serverbe sure the appium server is running with an application opened by using the "app path" parameter in appium.app (along with package and activity for android) or by connecting with selenium client and supplying this in the desired capabilities object.tried with app file as you mentioned above. but the issue is not solved,neutral
appium/appium,selenium,2014-09-18T09:06:26Z,i got this problem today: org.openqa.selenium.sessionnotcreatedexception: a new session could not be created. (original error: could not push strings.json),negative
appium/appium,selenium,2014-09-18T16:35:10Z,i have the same problem i think(mine is hybrid app). what happens if "appium inspector" does not find the webview element. but using selenium java/appium i try to access the element (i know the id of the element) ?since "appium inspector" was not able to detect the element. will "appium" not find the the element when we run the test ?,neutral
appium/appium,selenium,2014-09-23T08:49:56Z,can anyone tell me how we can get "content-desc" text on android app using getattribute function on selenium on appium.. i couldn't get the above attribute..i am able to get attribute text of other nodes like clickable. checked but i cant find content-desc. class and package text into the android app...,neutral
appium/appium,selenium,2014-09-30T06:29:25Z,how to scroll down a window in ios native application using web driver command.. hi...i am trying to use java script scroll command to scroll the page while automating ios mobile native application to scroll the window down .but i am getting error message :org.openqa.selenium.webdriverexception: not yet implemented. can you please tell me how to scroll down in i os mobile native application using appium and selenium webdriver command.,negative
appium/appium,selenium,2014-09-30T13:56:14Z,this site is for reporting bugs.  ask your question in our forum and specify the client you're using.  thanks!,positive
appium/appium,selenium,2014-10-02T06:58:02Z,any updates here?,neutral
appium/appium,selenium,2014-10-02T20:45:35Z,is this the correct path to the apk? `c:\javapractice\appiumseminarsession1\app\workpress.apk`,neutral
appium/appium,selenium,2014-10-02T20:48:59Z,yes i have made folder in eclipse project itself and pasted .apk file over there,neutral
appium/appium,selenium,2014-10-02T20:52:15Z,name of folder within eclipse is app where i have pasted .apk file,neutral
appium/appium,selenium,2014-10-02T21:30:04Z,yes i found what was the problem app spelling mistake it should be wordpress not workpress :),neutral
appium/appium,sauce,2014-07-21T23:45:34Z,(or you can privately e-mail it to me at my username at saucelabs if it's sensitive),neutral
appium/appium,sauce,2014-07-23T10:28:36Z,ci: configured sauce connect,neutral
appium/appium,sauce,2014-08-05T18:33:23Z,for sauce-related questions. please get in touch with sauce labs support,positive
appium/appium,eslint,2016-12-07T22:44:51Z,bring appium eslint up to speed. and a bit of refactoring. imurchie can i get a review please!,positive
appium/appium,eslint,2016-12-07T22:50:51Z,hmm. odd that this is running on appium-ci in additino to travis,neutral
appium/appium,eslint,2016-12-07T22:56:52Z,looks good to me.i think the appium ci has been going the whole time. trying to run _everything_.,neutral
appium/appium,jshint,2014-07-30T05:52:00Z,added grunt-newer. to only lint changed files. only works for jshint. there's some issue with jscs that wasn't worth spending time on fixing. >.<,neutral
appium/appium,jshint,2014-07-30T17:53:53Z,hmm. i don't only want to lint changed files in our ci. i want to lint all files.but in the pre-commit hook. i only want to lint changed files. so what we really want is two kinds of linting: lint-all and lint-changed. and we'll use lint-changed in the pre-commit hook.,neutral
appium/appium,jshint,2014-08-04T01:52:34Z,so currently. the pre-commit hook calls "grunt lint" which calls jshint on the changed files.i was thinking that ci called the `travis` grunt task. which runs jshint on all files. not just the new one.where does ci call the `lint` task?,neutral
appium/appium,jshint,2014-08-04T17:50:21Z,yep. you're right! travis calls `jshint`. `jscs`. and `unit`. not `lint`,neutral
axemclion/IndexedDBShim,sauce,2013-06-13T06:06:36Z,still get this after doing `npm install grunt; npm install -g grunt-cli` with a new git clone.```: grunt>> local npm module "grunt-contrib-concat" not found. is it installed?>> local npm module "grunt-contrib-uglify" not found. is it installed?>> local npm module "grunt-contrib-connect" not found. is it installed?>> local npm module "grunt-saucelabs" not found. is it installed?>> local npm module "grunt-contrib-jshint" not found. is it installed?>> local npm module "grunt-contrib-watch" not found. is it installed?warning: task "jshint" not found. use --force to continue.aborted due to warnings.```,negative
jhipster/generator-jhipster,eslint,2016-09-05T19:10:07Z,there was an eslint error. jdubois please merge this once travis passes. else ill merge tomorrow,negative
jhipster/generator-jhipster,karma,2017-05-23T20:40:22Z,there are 2 notifications (i coded both). but they use underneath the same lib (so probably it works the same for both).- look for `webpacknotifierplugin` in webpack-common.js- look for `notifyreporter` in karma.conf.js,neutral
urish/firebase-server,eslint,2016-03-08T18:47:48Z,also. please make sure to comply with the project's eslint rules. you can verify your code by running`npm run lint`,neutral
brunch/brunch,mocha,2013-07-12T01:25:51Z,there are a lot of different testing methods. karma.js. mocha-phantomjs. browserling. i don’t think we can easily group them,neutral
brunch/brunch,mocha,2013-07-12T06:43:42Z,so you want basically `brunch test` that will be a simple alias to `mocha-phantomjs`?,neutral
brunch/brunch,eslint,2016-05-05T11:31:23Z,improve specs. fix eslint for ava async. here some test improvements also some eslint fixes for `async`.,positive
agda/agda-stdlib,standard,2018-04-16T10:30:56Z,> if i'm moving swap to .permutations then maybe the function itself and swap-inverse should be private. and swap-perm should be renamed to swap. then you'd recover the original as inverse.to swap ⟨$⟩_. it doesn't really make sense to me to expose half of a permutation separately in a file that exposes the whole permutation anyway.generally we like to expose as much of the code as possible. who knows what uses other people may find for the functions. it's particularly irritating to find something useful in the standard library only to find out that it's private or in a `where` block for no particular reason.> as another point of discussion. in my previous commit i renamed punchinᵢ≢i to i≢punchinᵢ. and swapped the inequality around accordingly in the result. i did this thinking i wrote that function in the first place. but i now realise it was already there. so this would be a breaking change.yes. can you change it back please. we try to minimise any unnecessary non-backwards compatibility.> i also think that now these things are in their own module. it might make sense to rename removein↔ to something like removemember. the logic is that it removes a member of a permutation. which seems more descriptive that the existing name. when using the module. you'd probably import it qualified as perm or similar. so it'd be used as perm.removemember.yup. that sounds fine.> additionally. would it make sense to include some type synonyms. and additional definitions to make the use of permutations easier (without having to go through `function.inverse`).yes. great additions!> we might consider adding a combinator that shows that permutation′ is really the same as permutation. too.haven't thought about it much. but do you need `permutation′`?  if yes. then yes that would be a good lemma to have.,negative
agda/agda-stdlib,standard,2018-04-16T15:25:09Z,add injectivity proofs for `_++_` in `data.vec.properties`. concatenation is an injective function iff the length of the vectors are the same.my last pull request was a very nice experience. so i'll try again! this time i could not find anything on the mailing list talking about this. so the only known need for these proofs are my own. still. i think it is quite a natural thing to have in the standard library.,negative
agda/agda-stdlib,standard,2018-04-16T15:50:42Z,> my last pull request was a very nice experience. so i'll try again!glad to hear it! i'm not sure it's universally true.thanks. excellent addition.,positive
agda/agda-stdlib,standard,2018-04-23T21:21:52Z,so a couple of points:- the first isn't really an argument against. but when i first started using the standard library. i definitely remember reading something somewhere that the standard library deliberately chooses not to use "advanced" features such as irrelevance or instance arguments. however i can't remember what the reason given for this was. or where it was written...- secondly i'm not how practical this is to carry out **consistently** across the library... let's take `data.nat.properties` for example. if we take your approach of making all the `isx` proofs instances then we run into the problem that there are lots of the same type of proofs (e.g. `+-issemigroup`. `*-issemigroup`. `⊓-issemigroup`. `⊔-issemigroup`). it's pointless marking all of these as instances. as instances have to be unique right? therefore i would guess we shouldn't mark duplicates as instances. but then it's confusing for users not being able to guess what's an instance and what's not... same with `decidable` proofs. a lot of modules have multiple `decidable` proofs.thoughts?,negative
agda/agda-stdlib,standard,2018-04-30T14:43:08Z,yup... it was inconsistent when i started. and as i've been going along i've been adding things prefix-free. as that seemed to the standard in `list.all` and `list.any` which is where most of the existing proofs of this form were.i'm not particularly wedded to either form. we should be consistent though. from a time perspective. i think going prefix-free would be easier?,negative
agda/agda-stdlib,standard,2018-05-13T13:16:22Z,`make test` on a mac (line ending issues). right now. `make test` on a pristine clone of the standard library fails on `cabal exec -- generateeverything` with the error    generateeverything: src/algebra.agda is malformedi've tracked it down to all .agda files having `\r\n` line endings.  so of course the check in `generateeverything.hs` that (`all (== '-')` fails.what is the recommended fix?  i know about git's `autocrlf` settings. the point of asking here is that. once this gets settled. i'll add something to `hacking.md` for mac users. so that they don't run into this.[i'm trying to work on some of the low-hanging-fruit in my spare time],negative
agda/agda-stdlib,standard,2018-05-13T13:50:14Z,i think the correct answer is: before doing a clone. make sure to have first executed    git config --global core.autocrlf inputi may have had this set to `true` by mistake before. which would have caused my problems.,negative
agda/agda-stdlib,standard,2018-05-13T15:54:14Z,pr #315 should fix this.,neutral
babel/babel,mocha,2016-02-12T18:58:30Z,i've updated the pull request with a minor variation of the original idea to illustrate why it's necessary. this allows you to use only and ignore options in a .babelrc when using babel-register with something like mocha where you're using babel-register as such: `mocha --compilers js:babel-register`,neutral
jshint/jshint,jshint,2013-05-16T05:22:11Z,see also #56 and #1083,neutral
jshint/jshint,jshint,2013-05-21T04:34:02Z,fixed in master.,neutral
jshint/jshint,jshint,2013-05-21T15:49:06Z,+1 i'd like to see this added as well. naming helps with everything from debugging stack traces. to reports on cyclomatic complexity. lots of benefits with no cost. since any good minifier/compiler is smart enough to remove the name.```var hello = function hello(){  alert('world');};```gets minified to:```var hello=function(){alert("world")};```,neutral
jshint/jshint,jshint,2013-05-21T17:17:59Z,sounds like a good thing.,positive
jshint/jshint,jshint,2013-05-21T17:18:46Z,although. spidermonkey is now capable of figuring out the name of anonymous functions in some cases.,neutral
jshint/jshint,jshint,2013-05-21T21:00:22Z,technically speaking. it _is_ an expression (that contains a function call). and not a function call. parenthesized and formatted for emphasis:``` js! (    function () { } ()  )```the question is whether to add an option to accept this kind of expression. or if using `/*jshint expr: true*/` is an acceptable level of granularity.,neutral
jshint/jshint,jshint,2013-05-24T12:49:07Z,`"use asm";` is a new conformity spec by mozilla. like `"use strict";`. it's a subset of the language with tighter restrictions on how you write your code. i think it would be helpful to developers to be able to quickly check a large codebase for conformance with `asm` by adding a single rule to `.jshintrc`.,neutral
jshint/jshint,jshint,2013-05-28T02:20:42Z,just a quick heads-up.i ended up having to fix this very issue in a patch i did to get jshint to parse `yield` expressions correctly. i'll add a unit test for this once i finish up the unit tests for the patch itself.i should have a pull request up by tomorrow.,negative
jshint/jshint,jshint,2013-05-28T13:45:15Z,usage would be what people are used to seeing from cli tools. right?,neutral
jshint/jshint,jshint,2013-05-29T09:21:00Z,not sure if #1054 solves this issue. it can also happen with a variable in the same scope:```function x() {    var key;    var foo = function () {        alert(key);    };    for (key in {}) {        foo();    }}```however. jshint does not complain\* abot this:```function x() {    var foo = function () {        alert(key);    };    var key;    for (key in {}) {        foo();    }}```*but jslint does,neutral
jshint/jshint,jshint,2013-05-29T21:38:34Z,adding a `case "closure":` before `case "var":` in #1054 makes both examples work. but it's still a bandaid. which is why i ended up withdrawing that pull request. a proper fix for this bug is going to have to fix the scope-handling system as a whole.,negative
jshint/jshint,jshint,2013-05-30T17:14:47Z,hi. i have a wsf file that calls jshint. however. i get syntax errors inside jshint.js. this is because it uses getters and setters that are not supported by windows xp wsf files (i havent tried in w7).is there a way around this?e.g.```get lines() {    this._lines = state.lines;    return this._lines;}.```big thanks! great tool!,positive
jshint/jshint,jshint,2013-06-04T04:26:49Z,turning off w117 ("x is not defined") does not work inside functions. this is reproducible on the jshint website:``` js(function (definition) {  /* jshint strict: false. -w117 */  q = definition();})(function () {  "use strict";});```i'm trying to assign to a global (in a cross-environment way) without getting any jshint warnings. can't seem to pull it off. am i doing something wrong perhaps?,negative
jshint/jshint,jshint,2013-06-04T14:09:31Z,alexeykuzmin another possibility would be to add the ability to load custom style modules via command-line. i.e. same interface as `src/stable/style.js` via `jshint.addmodule()`.``` sh# usage examplejshint --style=mystyle --reporter=myreporter file.js```that would be a lot more flexible without having to add everybody's personal style (i expect they are legion) to the jshint core. you wouldn't be able to check your custom style via the web interface. though. and of course. there are limits to what you can customize with the current (and future) `addmodule` interface .---you could actually handle this particular case using a custom reporter (since what you want is a strict subset of `camelcase` warnings to be reported). but for more complex identifier checks. you'd still need a custom module.,neutral
jshint/jshint,jshint,2013-06-05T00:50:43Z,strict violation (w040) reports wrong character. ``` js( function () {'use strict';var x = {};x.once = function ( event. listener ) {    function wrapper() {        listener.apply( this. array.prototype.slice.call( arguments. 0 ) );    }    x.something( event. wrapper );};}() );``````[l6:c25] w040: possible strict violation.    listener.apply( this. array.prototype.slice.call( arguments. 0 ) );                          ^```fixed by using `/*jshint validthis:true */` since it is a valid use in my case. however reporting the character position as bug.,negative
jshint/jshint,jshint,2013-06-05T14:07:42Z,jshintrc exported option. it seems like there is currently no way to define exported in a jshintrc file.i know i can use an inline comment but i would prefer to have everything either in an rc file or directly in my gruntfile.```/*exported cats */`````` javascript    "predef": [    ]```i would expect to have an option like this.``` javascript    "exported": ["logger"]```,neutral
jshint/jshint,jshint,2013-06-05T16:58:30Z,can we have a connection to the options flag as well?```$ jshint help w123shrug (true)w123: short description of this warning```that would mean that the option flag is `shrug` and its default value is `true`. so if you want to turn it off you'd add `"shrug": false.` to your .jshintrc or whatever you're using.,neutral
jshint/jshint,jshint,2013-06-05T22:27:00Z,glad that worked. you never know with computers until it actually runs. hopefully you don't run into any other problems with jshint (but please report if you do &mdash; preferably with a stack trace. of course).---i keep forgetting how little you can take for granted with a prototype-based language. it would have taken me a long time to suspect the for-in loop. even though i did look at it and dismiss it.,positive
jshint/jshint,jshint,2013-06-05T23:48:28Z,maxerror should be opt-in rather than opt-out. it's really frustrating that jshint refuses to finish processing my file. imagine if grep would stop halfway saying "too many matches". this is how i feel right now.,negative
jshint/jshint,jshint,2013-06-06T06:01:24Z,a generator function shall contain a yield statement.. a generator that only contains a return statement is probably a valid generator``` js/*jshint forin:true. noarg:true. noempty:true. eqeqeq:true. bitwise:true. undef:true. unused:true. curly:true. browser:true. devel:true. esnext:true. indent:4. maxerr:50 */var of. run;run(function *() {    return of(5);});```the above currently errors complaining about lack of yields,positive
jshint/jshint,jshint,2013-06-06T17:40:56Z,shelljs option (#1078). adding a `/*jshint shelljs:true*/` option/directive per #1078,positive
jshint/jshint,jshint,2013-06-06T18:49:00Z,warns about unused variables for necessary function params. take this code:```    this.stub(fs. "exists". function (filename. callback) {        callback(true);    });```the callback is the second parameter given. so even if i'm not using `filename`. i have to take it. it would be great if jshint didn't warn about `filename` being unused in this case.,positive
jshint/jshint,jshint,2013-06-06T22:29:42Z,correction filed here:  for pressing the issue!,neutral
jshint/jshint,jshint,2013-06-06T22:46:52Z,dherman sweet !,positive
jshint/jshint,jshint,2013-06-07T16:52:19Z,feature request: coffeescript rule. so that a `.jshintrc` file could. for a directory of coffeescript-compiled files. not complain for how coffeescript does things.,neutral
jshint/jshint,jshint,2013-06-07T17:46:10Z,+1seems no progress on this,neutral
jshint/jshint,jshint,2013-06-07T20:35:26Z,just don't lint automatically-generated files (we have an option to ignore directories. i think). it doesn't make sense to not trust your compiler.,neutral
jshint/jshint,jshint,2013-06-07T21:10:30Z,wow. excellent. i had no idea my jshint was outdated so fast. it's an active project for sure. thanks for the heads up. and sorry for the noise.,positive
jshint/jshint,jshint,2013-06-08T08:51:26Z,wow that was fast thanks :+1:,positive
jshint/jshint,jshint,2013-06-08T10:25:50Z,the `shelljs` option has been implemented. so this issue can be closed.,neutral
jshint/jshint,jshint,2013-06-08T16:23:57Z,i'm sorry no response for long time. i does not know what actual code/syntax causing this error. because of minified. large js code to parse.,negative
jshint/jshint,jshint,2013-06-08T21:10:48Z,thanks antonkovalyov,positive
jshint/jshint,jshint,2013-06-08T23:36:38Z,usrbincc can you file something here:  as i'm not sure how to answer this question,neutral
jshint/jshint,jshint,2013-06-11T17:15:48Z,this was released a month ago.,neutral
jshint/jshint,jshint,2013-06-11T21:40:48Z,i ended up just adding an extra message to  .i don't know if i really added anything. but i went ahead and added something anyway.---i'm really thinking that there would be a lot less friction to handling bugs in the spec (both for bug reporters and the spec maintainers) if it were hosted on github. since the edit format of the official spec is `.docx` (i think?). i can understand the difficulties that might be involved.but switching to a more github-friendly format certainly isn't a complete pipe dream. i mean. you could always convert the source xml (hopefully with minimal formatting loss) and use that (maybe tex? or some lightweight markup language?) as the base format for converting to pdf and html.,negative
jshint/jshint,jshint,2013-06-11T23:18:44Z,just tested this old bug with current head. all three examples does not raise any warning:```if (~'photo.gif'.indexof('.')) {}var i = window.location.search.indexof('xxx=');if (~i) {   console.log("param xxx present");}if( ~myarray.indexof(item) )```please reopen if you still see that error happening. or if you have a specific configuration option that makes jshint yell.,negative
jshint/jshint,coveralls,2015-04-12T08:18:17Z,hmmm. travis is running a different command than appveyor.rwaldron caitp: can we make this consistent? also. if no one is using coveralls locally. we could skip the devdependency and just install it for ci.,neutral
jshint/jshint,coveralls,2015-04-23T16:54:49Z,it looks like coveralls.io is having issues,neutral
angular/angular.js,standard,2016-02-29T21:45:54Z,on 29/02/2016 20:19. max kunowski wrote:> per the docs:> > ```> the $http legacy promise methods success and error have been> deprecated. use the standard then method instead. if> $httpprovider.uselegacypromiseextensions is set to false then these> methods will throw $http/legacy error.> ```ok. thank you !,positive
angular/angular.js,standard,2016-03-10T11:50:01Z,it was a decision we made about two years ago. to be fully compliant. meaning the use of data-\* prefix instead of element names. etc.  i had a discussion with a team. and we decided to allow non standard (custom) elements. so as of now it is no longer an issue  for us.  after saying that. since most directives (or should i say features) in angular do provide an ability to be used as attributes instead of elements. it seems only logical to me. that slots will allow this too.,neutral
angular/angular.js,karma,2013-08-29T03:38:59Z,fix(ngmocks): $logprovider#debugenabled should work the same within tests. angular.mocks.$logprovider $logprovider.debugenabled(false) is crashingwith undefined when run inside karma/jasmine test runnerthe following crashes when run inside karma/jasmine test suite``` javascriptangular.module('foo'. [])  .config(['$logprovider'. function ($logprovider) {    $logprovider.debugenabled(false);  }]);```closes #3612,neutral
angular/angular.js,karma,2013-08-29T19:10:52Z,merged as baaa73ee1ef25fa506ff7aaab3159d710acdafdbthanks madaz,neutral
angular/angular.js,karma,2013-09-10T20:55:18Z,would it not be easier to include your fixture files in your karma config so that they are loaded up (and so available) before the tests are executed?,neutral
getsentry/sentry,codecov,2016-03-03T18:04:01Z,omit debug files and other useless stuff from codecov. these files are used for debugging purposes and/or leveraged for offlinework and shouldn't count towards overall code coverage. these files arefrequently at the top of the "uncovered suggestions" report fromcodecov. so let's just ignore them since there's very little value inadding coverage to them.,positive
getsentry/sentry,codecov,2016-03-03T18:57:28Z,these break all the time because they only get "tested" by deploying docs. we should write tests for them and consider them production code.-1 on this change.,neutral
getsentry/sentry,codecov,2016-03-03T18:58:24Z,dcramer you referring to just the apidocs.py file? i have a few others included in here too.,neutral
getsentry/sentry,codecov,2016-03-03T19:04:18Z,i'm referring to apidocs but the same applies for everything. code is testable. there's no reason to pretend our coverage is higher simply because we haven't written tests for "less used code".,negative
getsentry/sentry,codecov,2016-03-03T19:06:37Z,it's excluding migrations already. the debugger stuff isn't used in any capacity. and then there are debug forms for previewing email.i was more hoping to make the codecov report a bit more useful since these are listed as top offenders and nobody is going to add tests to them since the return is very low.i don't mind excluding apidocs.py. but the debug ones are a hard sell for me. :/,negative
getsentry/sentry,codecov,2016-03-03T19:10:43Z,none of those are good reasons. migrations may or may not be able to be counted at this stage. i'd prefer they be.all code is considered production here. it should have tests. coverage should not lie about things just to make us feel better or to improve tools like codecov.,neutral
getsentry/sentry,codecov,2016-03-03T19:11:16Z,okie dokie.,neutral
sequelize/sequelize-auto,eslint,2017-11-21T08:19:19Z,i lost an hour because of this. there's nothing about the eslint usage that requires `^4`.,neutral
istanbuljs/istanbuljs,istanbul,2017-07-22T18:59:14Z,bashirsouid we would need to dig into the transpiled code that gets generated by:```js    /* istanbul ignore next */    input()    pluginoptions: pluginoptions;```depending on what the expanded code looks like. we might be able to tweak the instrumenter slightly to give coverage; does the ignore directive work as expected?,neutral
istanbuljs/istanbuljs,istanbul,2017-07-22T19:31:07Z,j-sek sorry for the very slow feedback!i echo isaacs' feedback:* _regarding motion_. perhaps we could just disable some of the transitions taking place. e.g.. sliding in the filename when you open a report.* _regarding missing file listing when sorting_. this just seems like a bug we'd need to address.* _regarding inspirational message about % of coverage_. i like the encouragement it provides. but to isaacs' point we shouldn't guarantee your code is stable because you have great coverage.regarding emilsedgh's feedback:i like the widget that provides feedback about overall coverage. but it does take up a lot of vertical space. maybe we could simply flatten it a bit (make it a rectangle sitting on top of the file file listing?).## what next?* we should definitely make sure things work well on mobile before landing.* i'm a little worried about how much bulk this might add to the `istanbul-report` module:  * what's the total footprint size of this new design with it's javascript and css; and what's the licensing of the libraries you're using. e.g.. the pie-chart. we should make sure this is mit or isc or some equivalent.  * worst case scenario. perhaps we could make it so this new "modern html" report can be installed as a dependency.  * regardless of whether we bundle this new report (or provide it as an optional installation. with documentation in istanbul) i think we should introduce the report with a new name. perhaps something like `html-modern` or `html-single-page`? this would allow people to start playing with the new html report while we hammer out any additional bugs.,negative
istanbuljs/istanbuljs,istanbul,2017-07-22T19:49:31Z,athomann thank you for the reproduction. i'm triaging a bunch of other tickets right now. but this will be near the top of the list of the next bug fixes i work on (unless you get bored and decide to start poking through the `istanbuljs` repo).,negative
istanbuljs/istanbuljs,istanbul,2017-07-22T19:57:03Z,athomann something immediately jumps out at me. jest itself already uses `babel-plugin-istanbul` to facilitate test coverage. rather than configuring `babel-plugin-istanbul` in your `.babelrc`. you should just be using jest's coverage feature. i imagine the double instrumentation might be the root of the error.,negative
istanbuljs/istanbuljs,istanbul,2017-08-01T05:20:07Z,lazywithclass the instrumenter is definitely a good place to start; to get a feel for how everything works together i recommend looking at `nyc/index.js`. where you can see many of the istanbul libraries working in conjunction to facilitate instrumentation and reporting.,neutral
DefinitelyTyped/DefinitelyTyped,standard,2016-08-18T00:43:32Z,installing the npm module `types/webrtc` instead. solves the problem. not sure why a standard typings file produces the errors.,negative
DefinitelyTyped/DefinitelyTyped,standard,2016-08-22T08:39:15Z,improve type definition for isomorphic-fetch. according to  the `requestinit` has more options.i really like typescript and `isomorphic-fetch` with which i can use `fetch` in both browser and node. but i need to disallow redirection in my project with `redirect` request option which does not exist in current definitions. so i supplement all the allowed options for `requestinit` according standard.,negative
DefinitelyTyped/DefinitelyTyped,standard,2016-08-22T08:39:16Z,_isomorphic-fetch/isomorphic-fetch.d.ts_to author (toddlucas). could you review this pr?:+1: or :-1:?checklist- [x] pass the travis ci test?,neutral
DefinitelyTyped/DefinitelyTyped,standard,2016-08-24T11:43:45Z,> it might work maybe?unfortunately. no. because i have a lot of code. which written like this:``` tsdeclare function doloaddata(): promise<data>```as you can see. function returns `promise<t>`. which is standard `promsie`. not bluebird one. declaring `var promise: bluebird<any>` i will overload standard promise constructor. not interface.,negative
DefinitelyTyped/DefinitelyTyped,standard,2016-08-25T16:32:00Z,why are there `isomorphic-fetch` and `whatwg-fetch` types together with duplicated interfaces? i think the former should just add a reference to the latter.,neutral
DefinitelyTyped/DefinitelyTyped,standard,2016-08-25T20:06:52Z,we should probably consider unifying these saschanaz. or basing these on whatwg-fetch. if we can do so in a what that doesn't impact people using these definitions. then i'd be up for it.,neutral
DefinitelyTyped/DefinitelyTyped,standard,2016-08-26T07:17:13Z,i think `isomorphic-fetch` should just reference the definitions of `whatwg-fetch` too.  if possible.,neutral
DefinitelyTyped/DefinitelyTyped,standard,2016-08-29T15:08:42Z,toddlucas if you will fix all the enums and incorporate the new fields. just ignore this pull request. and thanks. it'll be helpful for my project.,positive
DefinitelyTyped/DefinitelyTyped,standard,2016-09-08T00:41:56Z,strictly typed component decorator support. i have updated the types with an additional generic type so that standard connect calls are not aware of the void call.i have also updated the tests to be more strict as the exisiting test did not attempt to render the component under test.addresses #9951,neutral
DefinitelyTyped/DefinitelyTyped,standard,2016-09-08T00:41:57Z,_react-redux/react-redux.d.ts_to authors (tkqubo seansfkelley). could you review this pr?:+1: or :-1:?checklist- [ ] pass the travis ci test?,neutral
DefinitelyTyped/DefinitelyTyped,standard,2016-09-08T18:16:59Z,sheetalkamat hey. i was just about to review this. why did you merge without approval?,positive
DefinitelyTyped/DefinitelyTyped,standard,2016-09-08T18:29:22Z,jprogrammer please create a new pr addressing the feedback.,positive
DefinitelyTyped/DefinitelyTyped,standard,2016-09-08T18:31:53Z,sheetalkamat can we just revert this and start again since it was so recent? also. why did you merge it without approval?edit: without approval and open for not even 24 hours. more accurately. i didn't even realize a pr was opened!,negative
DefinitelyTyped/DefinitelyTyped,standard,2016-09-08T18:33:24Z,mhegazy  asked me to review the prs and merge them. this one looked ok to me hence merged.,neutral
DefinitelyTyped/DefinitelyTyped,standard,2016-09-08T18:36:21Z,mhegazy i applaud the desire to merge these faster. but we should still try to get community reviews from typings owners (within reason)!sheetalkamat thank you for reverting. i appreciate it!,positive
DefinitelyTyped/DefinitelyTyped,standard,2016-09-08T18:41:15Z,jprogrammer sorry about the roller-coaster. want to try this again?,neutral
mucsi96/nightwatch-cucumber,mocha,2016-12-23T08:50:57Z,there are mocha based integration tests in the project. please check the `test/cli.test.js`. during test execution feature files and step definitions are created. the result is executed with nightwatch-cucumber.,positive
mucsi96/nightwatch-cucumber,eslint,2016-12-20T11:18:09Z,i have eslint in the project. i use standard based ruleset.,neutral
mucsi96/nightwatch-cucumber,eslint,2016-12-31T16:07:58Z,i would not like to include a custom made eslint config if possible. i would like to include a complete eslint preset. i have used the eslint-config-standard. but i am open to switch to eslint-config-airbnb-base or anything else. i think its more battle tested than creating one from stretch. what do you think?,neutral
tombatossals/angular-leaflet-directive,karma,2014-03-16T21:37:15Z,test error & grunt broken. hi.i'm still learning the rework of the directive. yesterday everything worked fine but today something strange happened: i merged my fork with upstream. then a test error appeared. and when i tried to investigate it with 'grunt test' it tells me:```>> error: cannot find module './launchers/base'running "jshint:source" (jshint) task>> 22 files lint free.running "jshint:tests" (jshint) task>> 24 files lint free.running "jshint:grunt" (jshint) task>> 1 file lint free.warning: task "karma:unit" not found. use --force to continue.```googling about the error doesn't light me for a solution.any hints?thanks!,negative
tombatossals/angular-leaflet-directive,karma,2014-03-18T08:39:15Z,great! that solved the issue. still wondering what happened.thanks tombatossals,positive
senecajs/seneca,coveralls,2016-04-12T14:38:34Z,tests are automated in the context of this card (pre coveralls),neutral
