bower/bower,mocha,2012-12-17T12:00:20Z,medikoo that problem already exists if you use npm to fetch client side packages. what if the package your trying to use doesn't exist in npm? for instance. you got a client-side project that is using async. jquery and some jquery plugins. you will end up managing the jquery plugins yourself because those aren't in the npm registry. in this case npm is not covering all packages and you end up manually handling them. if you use bower. you got a much variety of endpoints to fetch packages. you have git endpoints. local repositories. url's. tarballs and zips. in the example above. bower would be able to fetch async. jquery and the jquery plugins.in my projects. i manage client side packages with bower and node packages with npm (build scripts. mocha tests. etc).,negative
bower/bower,coveralls,2014-04-17T00:26:39Z,publish to coveralls.io from travis.. what it says on the tin! i thought this might be handy for reviewing coverage. not sure if this "just works" or if someone in the bower org needs to log in to coveralls.,neutral
bower/bower,coveralls,2014-04-17T13:41:48Z,based on the travis build failing. someone would need to sign in to .,negative
Nordstrom/cfn,standard,2017-01-26T22:13:13Z,switch to standardjs.,neutral
ashiina/lambda-local,mocha,2016-05-29T00:35:05Z,calling lambda-local as a node.js module. i want to be able to call lambda-local from another node.js program. as a module.right now it only supports command line execution. my immediate need for this comes from not being able to write mocha tests against the `lambda-local` execution. but i am sure it will be useful in many other situations too.,positive
infernojs/inferno,eslint,2016-09-15T19:10:51Z,doc eslint fix,neutral
infernojs/inferno,eslint,2016-09-15T19:38:26Z,craigmichaelmartin thank you :),positive
infernojs/inferno,coveralls,2016-04-02T06:59:16Z,sure thing. if you know what is on line 145 in index.js when the index.js in reality have 30 lines. and what is covered is totaly wrong if you look at the coveralls.io webpage.sure thing. then this wouldn't need a fix.as trueadm knows. there was and is issues with wrong lines reported on the coveralls.io as well.,negative
jprichardson/electron-mocha,mocha,2016-04-14T09:50:34Z,i suggest you start with a minimal example first; in your case something about the babel setup does not work and overwriting all the dom globals is problematic. too. obviously.without digging deeper. i can only say that using babel via `--compiler` works for me with electron-mocha but my babel configuration is limited to features which are not supported by electron already. electron is basically node 5 and chromium 49 -- that means you get almost everything from es2015 for free.,negative
jprichardson/electron-mocha,mocha,2016-04-20T12:45:04Z,handle --compiler before --require options. fix #57 this moves handling the `--require` option into the mocha file. to make sure that `--compilers` have already been loaded. jprichardson can you confirm that this is ok?,neutral
jprichardson/electron-mocha,mocha,2016-04-20T14:02:07Z,wondering about if there's a way for us to build in the instrumentation into electron-mocha itself. i would hate to require that people go through multiple explicit build steps in their setup.,negative
jprichardson/electron-mocha,mocha,2016-04-20T15:41:42Z,utack,neutral
jprichardson/electron-mocha,mocha,2016-04-29T20:53:18Z,i could not understand what inukshuk explained. can someone please post some steps how i can make istanbul work with electron-mocha? thanks,positive
jprichardson/electron-mocha,mocha,2016-05-06T06:16:31Z,i was able to instrument my source code but i am not able to figure out how i can use this to run my tests in electron-mocha. i am piping my files from test folder onto electron-mocha. where should i add the option to use instrumented code for coverage?,negative
jprichardson/electron-mocha,mocha,2016-05-11T17:49:22Z,fix exit code. if we destroy the only window. electron seems to quit with an exit code of 0. so mocha’s success/failure won’t be communicated properly.we don’t really need to worry about destroying it anyways. since we’re about to exit.,neutral
jprichardson/electron-mocha,mocha,2016-05-11T19:31:19Z,this seems reasonable. inukshuk what are your thoughts?,neutral
jprichardson/electron-mocha,mocha,2016-05-11T19:53:38Z,hrmph. i'm not sure i can make this and #56 play together nicely. but i'd argue that this _is_ more important. since test reporting is currently broken for ci use cases.,negative
jprichardson/electron-mocha,mocha,2016-05-11T20:03:44Z,alright. so this _works_. but note that as of #56. we're no longer cleaning up `browserdatapath` at all since the call to `win.destroy()` exits. so it might be worthwhile to simply revert that pr and delete this one.,negative
jprichardson/electron-mocha,mocha,2016-05-12T10:46:04Z,i think joshaber is spot on here. reverting #56 would take care of the bigger issue for now. though i'm curious as to why clean up is being skipped at all. i haven't looked at it yet. but the first thought i had was that electron just exists cleanly when all windows have been closed (i assume) so perhaps we'd just have to handle the all windows closed event and exit from there (though clean up may have to be a sync function not sure)? i'll take a look at it later today!,negative
jprichardson/electron-mocha,mocha,2016-05-12T10:55:03Z,hmm.. does  "... && node bin/electron-mocha test/main ..." work?,neutral
jprichardson/electron-mocha,mocha,2016-05-12T11:26:41Z,i think that was it: if i just listen for `all-windows-closed` then the clean up takes place. i think the overall cleaner solution is to use `app.exit` instead of `process.exit` -- according to the docs this should force close all open windows. so i would hope that the issues addressed by #56 are taken care of this way as well. this way we can move clean up to `app.on('quit')` too. see #62 -- what do you think?,negative
jprichardson/electron-mocha,mocha,2016-05-12T12:53:21Z,lgtm,neutral
jprichardson/electron-mocha,mocha,2016-05-12T13:53:44Z,awesome. thanks inukshuk!,positive
jquery/esprima,mocha,2015-02-22T01:30:05Z,nzakas i'm using expect.js with mocha in shift-parser currently. it supports deep equality test and it supports visual diff as well. not sure if it's mocha's functionality or expect.js's. let me try to reused the current runner first.,positive
jquery/esprima,coveralls,2015-02-18T15:35:35Z,integrate coveralls.io. while our test suite (part of `npm test`) will enforce the 100% coverage threshold. the lack of enough coverage will be only visible from the command-line output. i.e. if one looks at travis ci report in details.with coveralls integration. when a pull request contains one or more commits that regress the coverage. the coverage information will be displayed at the pull request page. thereby giving a direct indication of the issue.,negative
cssinjs/react-jss,karma,2017-07-17T14:15:40Z,refactor tests. - [ ] reset by deleting require.cache is ugly. we need to remove that.- [x] we need to split the file. right now tests are mostly integration. i think it makes sense to create a tests dir and split the index based on use cases.- [ ] if we can avoid the need for dom tests. we can switch to jest and remove karma completely.,positive
cssinjs/react-jss,karma,2017-07-17T17:36:06Z,we can avoid dom manipulations completely if in tests we would use sheetsmanager without dom interactions,neutral
serverless/serverless,mocha,2016-05-11T08:18:46Z,fix the tests for the build. to be able to have an effective ci process we need to get to a point fast where the build is passing. to achieve that we have to fix the mocha tests that are currently failing or remove them if they are not necessary or helpful any more.,negative
serverless/serverless,mocha,2016-05-18T01:00:24Z,flomotlik this is great to hear. our team's most urgent expectation is test-ability. at the moment we are using `serverless-mocha-plugin` (which had some bugs that i created a pull request for). even though this plugin creates a nice template there are gaps remaining. such as how would you mock end-points (s3 for instance). test internal functions etc. looking forward to your team's work in the test area. thanks.,positive
serverless/serverless,coveralls,2016-05-10T15:09:26Z,add and setup coveralls.io,neutral
xodio/xod,eslint,2017-07-03T14:26:43Z,create basic documentation before open sourcing. ### rationalecurrently. it could be hard to get an outline of how the source code is structured. we should write down some guiding readmes and wiki articles to help with navigation and exploration.### acceptance criteria- [x] root `readme.md` gives an overview of the file structure- [x] each package has its readme.md that tells why that package exists- [x] wiki article on code style is created which tells about principles which are not checked by eslint. i.e. high-level principles like the functional style.,neutral
Azure/autorest,standard,2016-03-23T22:23:37Z,i think keep them in separate functions is casing the async patch and post not working issue to be not exposed. so i think we should figure out if merge into one function handles all the cause without breaking existing service so that we can apply this to other languages to avoid future complexity. for the formatting issue you mentioned above. can you send me or link me a js coding standard to me?,neutral
airbnb/javascript,eslint,2015-12-18T19:37:37Z,would you want the same for jscs rules as well or no?,neutral
airbnb/javascript,eslint,2015-12-18T23:45:40Z,hzoo yes please :-),positive
airbnb/javascript,eslint,2015-12-23T20:01:19Z,i'd love to hear some more opinions on this - personally. i don't find dotfiles difficult to work with. and i already have to configure my editor to show dotfiles to work with `.eslintrc`. `.gitignore`. and many others. i'm a weak +1 in favor of this.,negative
airbnb/javascript,eslint,2015-12-23T20:05:47Z,thanks for your contribution! `eslint` has since been updated.,positive
airbnb/javascript,eslint,2015-12-23T20:08:08Z,tomekwi one comment. plus a rebase. and i'd love to merge this!are there any eslint rules we could include/enable/link to that would enforce this?,positive
airbnb/javascript,eslint,2015-12-24T01:45:12Z,gah i'm an idiot who didn't turn on notifications for rackt/eslint-config-rackt.,negative
airbnb/javascript,eslint,2015-12-24T07:38:29Z,closing this for now - please follow up if it turns out to be an eslint bug.,positive
airbnb/javascript,eslint,2015-12-24T18:22:29Z,the `camelcase` option defined in `eslint-config-airbnb` has `properties: 'never'` which is inline with "camel case is preferred" but not mandatory. thanks for your responses.,neutral
airbnb/javascript,eslint,2015-12-29T18:38:49Z,hm. it should give you an error when doing that. that might be an `eslint` bug?,negative
airbnb/javascript,eslint,2016-01-04T19:38:39Z,a followup pr that ensures the eslint rule matches this updated text would be awesome,positive
airbnb/javascript,eslint,2016-01-06T23:19:14Z,link to the eslint rule for radix in parseint,neutral
airbnb/javascript,eslint,2016-01-07T01:28:44Z,maybe we should add this to eslint then?,neutral
airbnb/javascript,eslint,2016-01-07T18:20:05Z,this looks great! perhaps a link inline to the eslint rule docs?,positive
airbnb/javascript,eslint,2016-01-08T00:39:14Z,rhbecker absolutely the eslint config and the styleguide should be in sync. `console` should never be permitted in production code. so a pr to add that into the styleguide. and link to the rule. would be great!similarly. adding comments in the rule configs that point to guide sections would also be a very welcome pr.,neutral
airbnb/javascript,eslint,2016-01-08T01:02:10Z,ljharb ### adding console guidance to the style guideare there any instructions for contributing additions / edits to the guide text?for example. i don't see an existing section that this addition would belong within. so. would i add a new section? if so. would i just add it to the bottom. or would i squeeze in between existing sections? the latter seemingly makes more sense. but doing so would require bumping all of the numbering in the subsequent sections. which would be a pita with respect to my cross-referencing idea over in the eslint config comments.also. if the guide is going to instruct against using `console`. it should probably offer guidance around alternatives. do you follow any particular standard practice for common `console` use cases?### adding guide index references to eslint config commentsthis one seems more my speed (i'm not much of a guide writer). but the issue i mentioned above makes me hesitant to invest time in this - i.e. if guide index numbers are going to get constantly bumped by contributors. and without guidance from the stewards. the comment references are going to get really useless. really fast.### regarding strict?what are your thoughts on the suggestions i made for tweaking how you reflect your usage of babel? this one seems the most straight-forward for me to pr.,negative
airbnb/javascript,eslint,2016-01-08T01:29:21Z,> _it's kind of a judgement call - although yes. we don't want to change numbering because that would break links. [...] it'd be great to move away from numbers. so that reorganization doesn't break links._so. i'm not sure what to do here. then. any ideas?> _why would there be an alternative in production code to debugging statements?_some folks may be using `console.log()` or `console.error()` statements within a node.js app in order to log to app or error log files. or to return responses to stdout / stderr for cli apps. suggesting a "good" approach seems to be a theme in the guide. if you think it's sufficient to simply instruct against. i can be fine with that.> _you're welcome to open a pr so it can be discussed - i don't really think it's needed though. using es6 without babel isn't realistic at this point._fair point - i'm just opposed to rules in default that don't correspond to stated guidance. it blurs the lines as to whether the shared eslint config reflects the guide or the usage of the guide by airbnb. perhaps adding guidance is the better approach here. but seemingly one or the other should happen.,negative
airbnb/javascript,eslint,2016-01-08T06:42:45Z,obviously. it can get pretty subjective. but i don't believe the issues i'm raising are purely ideological. in my experience. the more superfluous code / config you litter a code base with. the harder it becomes to maintain. and the harder it is for new users to understand. there's also risk that some of that litter ends up conflicting with new additions. etc.as i said. i'm happy to do the work. but i don't want to bother unless you're on board. and i also need you to vet whether the stuff i'm saying even makes sense. i'm still new to eslint and your repo.,negative
airbnb/javascript,eslint,2016-01-13T20:21:37Z,can we make this link to the relevant eslint rule(s)?,neutral
airbnb/javascript,eslint,2016-01-14T21:14:36Z,i'd recommend against using `this` in tests. if possible - doing that means you could use an arrow function.as for the jest organization. that's an inherent flaw with it - perhaps you could use two separate eslintrc/eslintignore pairs. one for implementation. one for tests? otherwise perhaps that's not the best way to organize tests.,positive
airbnb/javascript,eslint,2016-01-15T09:54:24Z,i've added the links.right now the linting for eslint-config-airbnb shows 148 errors. would you accept a pr which fixes those?,neutral
airbnb/javascript,eslint,2016-01-15T17:07:05Z,running `npm run lint` in `packages/eslint-config-airbnb` results in 148 errors.,negative
airbnb/javascript,eslint,2016-01-17T03:22:54Z,i wonder if it might look a little cleaner to put the jscs rules and eslint rules on the same line?,neutral
paulmillr/es6-shim,mocha,2013-03-24T22:12:40Z,use tape and testling. instead of mocha,neutral
paulmillr/es6-shim,mocha,2013-04-10T06:18:26Z,upgrading mocha and chai.,neutral
paulmillr/es6-shim,mocha,2013-04-10T06:18:27Z,adding the mocha harness,neutral
digitalbazaar/forge,mocha,2013-04-24T18:50:35Z,ok. sounds good. i started a test suite using mocha in `./nodejs/`. should be trivial to expand on that now to consolidate the test suite.,positive
angular/angular-phonecat,karma,2013-12-19T02:04:39Z,allow karma to be executed from global path automatically if it exists. avoid installing karma locally if you already have it installed as a global. tested on mac mavericks with bash and fish shell. with and without karma installed as global / locally. apologizes to windows developers for not updating the bat file too.,neutral
algolia/vue-instantsearch,eslint,2017-06-19T12:15:47Z,i am adding the official vue plugin since it works so we can merge this :),neutral
algolia/vue-instantsearch,eslint,2017-06-19T12:35:32Z,merge?,neutral
algolia/vue-instantsearch,eslint,2017-06-19T12:47:16Z,gogogo,neutral
algolia/vue-instantsearch,eslint,2017-07-10T12:20:59Z,use vuejs/eslint-plugin-vue,neutral
algolia/vue-instantsearch,eslint,2017-07-10T12:27:53Z,this is in `eslint-config-algolia/vue`. right?,neutral
algolia/vue-instantsearch,eslint,2017-07-10T12:31:12Z,no. we need to add it. but i think there were some issues with it. but now that vvo cleaned up the repo. maybe we can try again.,neutral
velesin/jasmine-jquery,jasmine,2013-05-15T21:02:01Z,this code seems to create the empty fixture div i'm looking for:```jasmine.getfixtures().set(sandbox())$('#sandbox').length === 1 //true```is this the way you'd recommend to create an empty fixture holder?,neutral
velesin/jasmine-jquery,jasmine,2013-06-07T00:04:17Z,someone's already registered jasmine-jquery with bower. and i don't use component.js so feel free to make a pr.,neutral
videojs/video.js,standard,2016-04-25T22:29:08Z,edge and android use their own native hls implementations for playback. i know android's is particularly finicky and that can cause strange issues elsewhere during playback.are you seeing this issue with an actual live stream or a standard vod hls stream?,neutral
babel/babel-loader,eslint,2016-07-07T03:08:24Z,support setting global option at root of webpack config like eslint,neutral
prettier/prettier,eslint,2017-01-17T22:30:18Z,a list of function names embedded within prettier itself seems both fragile and also likely to lead to  anybody experiencing a false positive to have a bad-time. perhaps some sort of in-file comment along the lines of `eslint-disable`?,positive
prettier/prettier,eslint,2017-01-18T17:15:11Z,allow customizing args sent to prettier-command. we require single quotes in our eslint config. which conflicts with prettier's default rules. now the `prettier-args` custom variable allows anyone to set the arguments passed to the prettier command when it runs.might be nice to eventually build this up out of individual customization options (ie. `(setq prettier-single-quote t)`). but this is a pretty simple approach that works for now.,positive
prettier/prettier,eslint,2017-01-18T17:36:54Z,oh. great! i haven't gotten around to polishing emacs integration yet. so thanks for working on it!,positive
prettier/prettier,eslint,2017-01-18T19:25:57Z,vjeux thanks. i didn't realize this repo was still so young. i am using it in my work codebase right now. so i will keep opening issues as i come across things that conflict with our (fairly standard airbnb) eslint config.,negative
prettier/prettier,eslint,2017-01-18T19:53:23Z,i might implement something for myself for the time being. so i can keep my current project in line with our eslint config (if i can do it quickly enough).,neutral
prettier/prettier,eslint,2017-01-18T21:05:40Z,this is an opinionated formatter so we're not going to keep adding options so that people can still maintain their own formatting rules. i don't recommend using this with eslint's formatting rules. you should get rid of the formatting rules and keep the other rules that enforce semantic behaviors.i know that's not always possible for existing projects. and we're trying to find a balance for adding a few options to help adoption. but we're also not going to add a lot of configuration.,neutral
prettier/prettier,eslint,2017-01-19T15:39:17Z,yea. that is what prompted me to throw this question out there. i was editing package.json and .eslintrc.json. etc. and found myself hitting format.i can understand that there are likely many other ways to already format json via editors. though. it'd just be a question of whether or not it's low hanging enough for prettier to add or not. *shrug* honestly i hadn't ever formatted my code automatically until prettier. so i've not looked for json editor plugins.,negative
prettier/prettier,eslint,2017-01-20T07:39:31Z,i'm interested in this as well.i just made a separate eslint configuration based on eslint-config-airbnb that turns off all the rules that deal with style. we currently only have a separate npm script command that needs to be run manually to reformat the whole app.has anyone integrated prettier to a ci workflow? i'm thinking a setup where the ci fails if running prettier would yield any changes. or would this make any sense?,positive
prettier/prettier,eslint,2017-01-20T20:20:32Z,(disclaimer: i haven't yet dug too deeply into this project)not sure where the right place to bring this up is or if its already been discussed. but one thing i like about tools like eslint is that i do things like make a rule that disallows multi-line ternaries.with prettier (and please correct me if i'm wrong). what i get is consistent formatting of the multi-line ternary. but no way disallow them or "fix" them into if/else's?i guess i could use a small set of eslint rules and run them in combination with prettier to get everything i want?is this project's purpose to totally replace eslint. or do you think there is room for both?,positive
prettier/prettier,eslint,2017-01-26T11:59:01Z,possibly crazy idea for those who already have an eslint workflow set up:what if it was possible to create an eslint plugin for prettier. then. running `eslint` would fail if a file is not formatted with prettier. and `eslint --fix` would fix would it. i’ve found that i’d like to run prettier on the same set of files as in eslint in a few projects.,negative
prettier/prettier,eslint,2017-01-26T23:05:49Z,mention eslint-plugin-prettier in related projects,neutral
prettier/prettier,eslint,2017-01-28T22:47:29Z,some random thoughts on the subject:the first attempts at solving the nits/formatting problem look like `eslint --fix`. where you would first look for bad patterns and then make them better automatically. the great thing is that if the user isn't breaking the rules. he can keep the formatting s/he wants. however. in practice this is very hard to implement properly outside of particular cases.the second iteration is something like refmt where you reformat all the code with no exceptions. this is great and consistent but it is very inflexible. developers want some control over how the code is formatted. #7 is an example that exploits the fact that empty lines are added before comments. so the person puts some random comments in order to make the code breathe.i think that in order to succeed we need a middle ground. where most of the code is automatically formatted but the user still has some control for cases where it cannot be always be automatically formatted in a reasonable way. we've done this successfully so far for empty lines. and objects may be a place where this would work as well.,positive
prettier/prettier,eslint,2017-01-29T15:32:21Z,i noticed this #501 problem on second run :). and didn't notices status code 2. eslint show me an error.,positive
prettier/prettier,eslint,2017-01-29T20:25:45Z,mention eslint-config-prettier,neutral
prettier/prettier,eslint,2017-01-29T23:39:26Z,i appreciate the quick response. will defiantly keep you updated with any issues i find. this is a great tool and i do want to see it perfected.since i started using prettier i've been adding eslint ignore rules that were broken by formatting. i chose to just ignore those errors and go with prettier formatting blindly. i will check the list and see if anything is worthy of enhancing.,positive
prettier/prettier,eslint,2017-01-30T15:22:47Z,neat. thanks!,positive
prettier/prettier,eslint,2017-02-02T18:00:47Z,thanks for taking the time to respond.i definitely agree with your concern. that is what i was trying to put into consideration when writing "exceptions". keep in mind this isn't meant to be an all-or-nothing topic or change. just wanting to throw some ideas out there.i started with just the object and arrow example. but (like everything else). the feature / topic creeped up.personally i have found myself wasting more time making objects/arrays fit around the data. which is why i think having them always expanded is preferred in the long run.i had the same issue with the arrow parens. especially when converting a project to flow.should be noted i use airbnb's eslint config (now slightly modified) with my personal projects.,positive
prettier/prettier,eslint,2017-02-03T14:30:50Z,there are a combinatorial explosion of different ways to mix syntax. we want to keep it as consistent as possible. so your solution looks good to me. there are many places where the `eslint-disable-line` is going to be problematic because this printer does not work like that. we are going to break things across multiple lines when we need to.my suggestion is to turn off rules that you find yourself disabling. i don't think they are worth it.,negative
prettier/prettier,eslint,2017-02-05T00:33:36Z,this is likely going to be hard to fix because parenthesis are part of the expression and this is a leading comment. so it is printed as intended. it is not a goal to be able to make sure that all the flow/eslint disables keep working.,negative
prettier/prettier,eslint,2017-02-06T14:37:48Z,feature: read eslint config. the existing config options can be inferred from an eslint config if one exists. there's an eslint js api for getting the config applied to a given file. and it follows extends and all that. it could be enabled by default or not. and overridable from the `prettier` args.this allows prettier to be used without duplicating the style rules. and doesn't affect projects not using eslint.,positive
prettier/prettier,eslint,2017-02-08T05:20:09Z,thanks for the link. looks like this was already decided so closing this.,positive
prettier/prettier,eslint,2017-02-08T16:14:49Z,s-ilya oh. i see. i guess it's better to reconfigure eslint then. thanks  closing.,positive
prettier/prettier,eslint,2017-02-15T22:27:24Z,i have a project where prettier consistently produces inconsistent output...code looks like:```  ...  /*eslint-enable */}```and every time i run prettier. the format changes (adds and removes a newline),negative
prettier/prettier,eslint,2017-02-16T20:34:42Z,i'd happily move eslint-config-prettier to the prettier org.,positive
sequelize/sequelize,mocha,2013-05-11T06:18:37Z,when i was in there looking around a saw a lot of easy improvements. #612 stuff i didn't do was output something if it failed to connect to the database (check out `bin/sequelize` around where it says `var sequelize       = new sequelize ...` because it would be around there where you could check to see if the db connection is any good.if you know anything about outputting text (i use `console.log` and that's it) maybe some of that fancy ncurses stuff you see in test suites (like the mocha reporters? i haven't looked into how they do that) it could be made much better.,neutral
sequelize/sequelize,jshint,2015-11-11T09:37:38Z,well a `make jshint` woulda helped you on that one ;),neutral
gaearon/react-hot-loader,eslint,2016-10-30T23:41:53Z,a small optimization hack - i noticed that there are a bunch of places in my production javascript where my development env folder path is being included due to react-hot-loader.if you use the uglify plugin in your webpack production build you can add a global def in the uglify config to drop this stuff out.the react-hot-loader code itself could probably be modified to take better advantage of this by wrapping more of the module itself in `if(__react_hot_loader__)` checks.```new webpack.optimize.uglifyjsplugin({    compress: {        warnings: false.        screw_ie8: true.        drop_console: true.        drop_debugger: true.        dead_code: true.        global_defs: {            __react_hot_loader__: undefined // eslint-disable-line no-undefined        }    }}).```,negative
ichord/At.js,jasmine,2013-10-28T02:32:39Z,tyuwan steverob you should test it though `grunt jasmine` or `grunt jasmine-server`.it include some compile and build job.,neutral
nightwatchjs/nightwatch,mocha,2015-05-13T23:52:37Z,thanks beatfactor!,positive
FezVrasta/popper.js,sauce,2016-09-18T23:36:22Z,fezvrasta did you build the js files before this? i haven't commited any build results as per your contribution guidlines :)i'll write some tests today/tomorrow. completely forgot about them. although the saucelabs tests are still not working.,neutral
angular/zone.js,jasmine,2016-08-22T14:48:29Z,fix spelling error of 'describe' in jasmine patch. looks like a spelling error was preventing the jasmine patch from patching "describe".,negative
angular/zone.js,jasmine,2016-08-22T14:53:04Z,i signed it!,neutral
angular/zone.js,jasmine,2016-08-22T14:53:07Z,clas look good. thanks!<!-- ok -->,positive
angular/zone.js,jasmine,2016-09-01T18:43:22Z,jasmine test shim masks third parameters (per-test timeout). the jasmine patch does not pass through third parameters to a test. so this won't work:``` jsit('takes a long time'. function(done) {  domylongtimeout().then(done);}. 10000);```,neutral
angular/zone.js,jasmine,2016-09-01T20:21:55Z,fix(jasmine): propagate all arguments of it/describe/etc...,neutral
angular/zone.js,jasmine,2016-09-01T20:32:30Z,travis failure looks legitimate. but also looks like it was caused by the previous commit.,negative
angular-fullstack/generator-angular-fullstack,mocha,2014-03-31T18:18:30Z,update gruntfile.js: mochatest through watch should run in 'test' env. mochatest task needs to be run in 'test' environment. to avoid db flushing when mochatest is called by watch. first call 'env:test' task before 'mochatest',neutral
angular-fullstack/generator-angular-fullstack,karma,2014-03-21T17:19:38Z,i think the only issue would be with the test folder. you'll have to manually move any existing client side test files into the newly scaffolded `test/client` folder. and make sure the bower and karma files get updated to account for the new folder structure.,neutral
angular-fullstack/generator-angular-fullstack,karma,2014-04-02T19:11:11Z,i removed generator-karma and generator-angular. then installed generator-angular-fullstack and all is well.,neutral
heroku/heroku-kafka-jsplugin,standard,2016-03-21T18:52:39Z,nice. is this idiomatic `--confirm` usage? i know this is semi-standard in the toolbelt. so if there are patterns to follow we should be doing that.,positive
heroku/heroku-kafka-jsplugin,standard,2016-04-15T21:18:48Z,ok. i'm going to leave the format up to you since it's really a product decision: just let me know how you'd like standard messages and deletes to look. note that we could also add flags for any of these (and/or just a catch-all `--verbose` flag). e.g.:``` console$ heroku kafka:tail my-topic --with-timestamp2016-04-15t00:00:00z: the message goes here2016-04-15t00:00:00z: another message...```versus``` console$ heroku kafka:tail my-topic --verbose2016-04-15t00:00:00z (partition: 12. offset: 4325): the message goes here2016-04-15t00:00:00z (partition: 12. offset: 4326): another message...```,negative
webpack/webpack,mocha,2012-11-06T12:53:27Z,in my opinion. a mocha loader would be great. currently i am preferring grunt over webpack for just two reasons: you do not need to write a build.js but a simple configuration file (gruntfile). and it comes with support for mocha. if building my web project from node source and still running tests etc. on node was that easy. that'd be a huge plus for webpack and a dependency less for my projects.,positive
webpack/webpack,uglify,2017-10-10T21:14:29Z,the uglify portion of the build is already very fast due to our caching w/ `webpack-parallel-uglify-plugin`. but it would certainly be nice to be back on the official plugin. but i don't think it'll get us any performance benefits.,positive
webpack/webpack,eslint,2014-12-24T06:43:08Z,also it would be nice that webpack config can be extendable and children configs may override fields of the parent.the good example of this approach is `eslint` and its `.eslintrc` file.,neutral
NativeScript/theme,eslint,2016-11-04T14:50:05Z,style(eslint): add ci linting. fix code style errors. - add eslint configs and travis `before_install` hook for linting.- fix code style errors to follow the nativescript coding conventions.,neutral
NativeScript/theme,eslint,2016-11-04T21:34:46Z,is there some coding style used by telerik that wants **"** (double quote) instead of **'** (single quote)?,neutral
acuminous/yadda,karma,2015-11-18T11:06:26Z,thanks for the offer. but i'm shying away from this. the trouble is once i accept a pr for more examples. i need to be able to support them. i haven't got much experience with karma etc.my preferred option is to update the github with a link to the project. how does that sound?,negative
prebid/Prebid.js,standard,2017-08-15T16:35:09Z,the adapters should follow the standards of using the macro for `pbjs` global. if this fails at runtime. it's an issue on the adapter's endpoint and should be resolved there.,positive
prebid/Prebid.js,standard,2017-08-18T15:57:39Z,sure that sounds ok in the short term. we discussed this a bit earlier and might end up pulling in a lightweight ajax library to be more standardized. that might not be right away tho.,neutral
nodejs/citgm,eslint,2016-01-07T22:38:27Z,it appears that the tmpdir issues might have been system related as /tmp/eslint already exists owned by user iojs. i'm manually changing tmpdir and trying again.,neutral
vega/vega-lite,codecov,2016-07-01T06:07:57Z,setting up codecov. fix #1637,neutral
pouchdb/pouchdb,sauce,2012-10-22T12:17:55Z,refactor test runner. mostly a tracking bug for #154. #146 and #144 i have rewritten the run_tests.sh and run_saucelabs.js to be a single node module that adds the new functionality and exposes some helpers (startdevenv())it was easier to get it written in node since it has to deal with json apis etc. and we can do things like start the tests as soon as the vm is ready instead of hoping sleep works. along with this i will be adding the new browsers + node tests and chucking a lot more information into the results database to make life easier to debugryanramage just wanted to check that that sounds good to you?,neutral
pouchdb/pouchdb,sauce,2012-10-22T16:22:17Z,yup sounds like a good plan. no issues here.,positive
pouchdb/pouchdb,sauce,2012-11-02T01:14:02Z,#154 - make sure we only trigger one saucelabs set of tests at a time,neutral
pouchdb/pouchdb,sauce,2012-11-14T04:33:09Z,if saucelabs connection dies during test run. retry. we shouldnt depend on a stable connection to saucelabs when running tests. if the connection dies before the tests complete then rerun them,neutral
pouchdb/pouchdb,sauce,2012-11-14T13:02:37Z,reduce polling interval for tests completed. once the tests start they start polling the document body to check for a class="complete". they do this once a second even though the tests take around 5 minutes to complete. this means a bunch of work for sauce connect which has to proxy each request. i dont want to put logic in there to only start the polling after x amount of time (as we may make the tests run faster. or run a subset). but reducing the frequency of the polling may help speed things up.,neutral
pouchdb/pouchdb,sauce,2012-11-14T13:56:31Z,closing in favour of manually retrying ci runs #229,neutral
lodash/lodash,uglify,2012-11-12T13:25:57Z,this seems to stem from the build script not being able to find uglifyjs or clojure compiler. after noticing these are tarred in the vendor directory i extracted them and now it seems to be working!,neutral
emailjs/emailjs-imap-client,standard,2017-09-10T00:36:50Z,haraka vs emailjs vs wildduck. it's getting confusing. i didn't know there was so many options.i was going to implement standard dovecot/postfix etc server. but they are hard to scale compared to what we can achieve with nodejs.i see there is a lot of updates for the emailjs libraries in general. should i/can i implement this as a flow blown mail server?thanks guys!,negative
emailjs/emailjs-imap-client,standard,2017-09-14T06:44:50Z,if you are using standard flags. then you should consider not using the keyword search term but the flag term:```javascriptquery = {flagged: true}```for every standard flag there's `flagname: true` and `unflagname: true`,neutral
angular/protractor,jasmine,2015-12-02T22:24:25Z,tsaikd. what's ugly about it? i wish the patch was available from upstream :(,negative
angular/protractor,jasmine,2015-12-04T09:41:28Z,juliemr in your example above it returns the length. but can you also use this to be able to use the .sendkeys() function to the element? have an element inside a tab. inside a directive and this is the only piece of code thats sent anything back from it.,neutral
angular/protractor,jasmine,2015-12-04T23:01:57Z,evanburbidge yes. you should be able to do a number of things with the `element` in the example above. including `sendkeys()`.,neutral
angular/protractor,jasmine,2015-12-15T16:01:09Z,any update on this issue; i'm running into same problem after running last scenario's step in cucumber "error: this driver instance does not have a valid session id (did you call webdriver.quit()?) and may no longer be used." is this a bug in protractor? don't want to use noops as suggested earlier; a proper fix would be greatly appreciated.,negative
angular/protractor,jasmine,2015-12-15T23:31:46Z,still no update.  realistically. the frameworks need to provide the updates.,neutral
angular/protractor,jasmine,2015-12-17T06:38:21Z,how to incorporate java script methods in protractor jasmine tests. do we need to use browser.executescript?,neutral
angular/protractor,jasmine,2015-12-17T15:29:43Z,thanks nicktomlin,positive
angular/protractor,selenium,2014-11-26T07:40:34Z,protractor is selenium-webdriver based and. (correct me if i'm wrong but i'm pretty sure) selenium only works on browsers.,negative
angular/protractor,selenium,2014-11-26T08:51:35Z,i am able to use webdriver and able to execute my scripts in webpages like normal selenium does. where i am stuck is evaluating page load timings in some pages which has asynchronous calls.,negative
angular/protractor,selenium,2014-12-04T01:40:05Z,samlecuyer can you explain why `self.config_.capabilities` needs to be a promise? it seems like all you need is for seleniumaddress to be a promise so that it can be resolved in the `setupenv`.,positive
angular/protractor,selenium,2014-12-04T03:35:57Z,hankduan `self.config_.capabilities` needs to be a promise because the proxy is a part of the browser capabilities and starting a proxy server is an async task.  this is much more than just specifying a seleniumaddress.,neutral
angular/protractor,selenium,2014-12-04T22:21:20Z,refactor(localdp): improve error messages when selenium binaries are missing. see #1017,negative
angular/protractor,selenium,2014-12-04T22:21:21Z,clas look good. thanks!<!-- ok -->,positive
angular/protractor,selenium,2014-12-04T22:23:41Z,hankduan can i get one more sanity check?,neutral
angular/protractor,selenium,2014-12-05T07:35:31Z,thanks! landed as 2430c1ac6e3dbabd132b55803a0d387fff8bcfbd,positive
angular/protractor,selenium,2014-12-05T07:36:30Z,fyi as a workaround. you can specify the location using `seleniumaddress` and hard code in your own username and key.,neutral
angular/protractor,selenium,2014-12-09T00:10:00Z,dupliate of #996,neutral
angular/protractor,selenium,2014-12-09T07:59:13Z,how to close browser after execution of all testcase or after fail of testcase. hi.i am able to run testcases with protractor using selenium server with angularjsi want to close my browser after execution of all testcase or after fail of testcase.i am able to do this by writing browser.close() in the last testcase. but this will not work if testcase fails . is there any other way to close the browser in this case also. or is there any different name for after like aftereachthanks in advance..,negative
angular/protractor,selenium,2014-12-10T04:45:36Z,sorry julimer. i think my question is wrong. i want to ask that i want to do something. after each describe(not after each testcase). is there any way to do this? actually i have take close as an example. but i might have required to do some other task also.  after each describe. is there any way to do this. i have require something like after block like aftereach block. please help...,negative
angular/protractor,selenium,2014-12-11T04:41:17Z,doing some task aftereach describe in protractor with selenium server with angularjs. **i want to do something after each describe(not after each testcase) and before each describe. is there any way to do this?  i have tried below format. but it gives me error that. before and after not defined. is it possible to do sometask before and after of each describe**```describe('testcase'. function () {    before(function () {        --------------    })    beforeeach(function () {       -----------------    })    aftereach(function () {        --------------    })    after(function () {        -----------------    })    it('task1'. function () {             -----------    })it('task2'. function () {                  ------------------    })})```,neutral
angular/protractor,selenium,2014-12-12T00:57:38Z,samlecuyer follow up. is there a reason that you need the promises (capabilities and seleniumaddress) to resolve after `setupenv`; it should work the same way for you if the promise is resolved way earlier right? i.e. do you have to wait for some condition before those promises can be resolved?,positive
angular/protractor,selenium,2014-12-12T01:56:39Z,feat(launcher): allow multicapabilities to take array of promises. enables adding `getmulticapabilities: function(){}` to your configuration file.the function returns either multicapabilities or a promise of amulticapabilities that is resolved after `afterlaunch` and before driver set up.if this is specified. both capabilities and multicapabilities will be ignored.also allows specifying `seleniumaddress` in the capabilities/multicapabilitiesobject. which will override the global `seleniumaddress`. this allows you touse a different `seleniumaddress` per capabilities.breaking changes:`capabilities` can no longer be a promise. use getmulticapabilities if you needto return a promise.`seleniumaddress` can no longer be a promise. likewise. use getmulticapabilities.,positive
angular/protractor,selenium,2014-12-12T19:21:53Z,tests?,neutral
angular/protractor,selenium,2014-12-15T23:23:52Z,please update the commit message to include basic usage and note the breaking change (for the current very small set of users relying on the way config promises work at the moment).,positive
angular/protractor,selenium,2014-12-16T00:02:32Z,agreed. this looks like an issue with your selenium server. also try running with the `--troubleshoot` flag to get more information.,neutral
angular/protractor,selenium,2014-12-16T01:06:47Z,sorry for the super slow response to this pr. here's my current thoughts:i'm frustrated by the amount of code duplication between this and protractor's cli. but i don't see a clean way to split it up :(i think we should either support a _very clear_ subset of options (which is the current status before this cl: you can only use chrome and a local selenium address). or all of them. i think that this pr. as is. supports a confusing subset of options. i imagine people would be confused about whether onprepare and beforelaunch are run. what happens when their config file has multicapabilities. etc.one way to do this would be to use a 'real' runner by having element explorer call `runner.run` and using a special element explorer 'test framework'. which returns when the repl is quit. this will mean that onprepare. plugins. etc. all get run.alternatively. we can extend our current element explorer to support `capabilities` and `seleniumaddress`. which i imagine would be the most useful things to change. please let me know if there's other configuration options which would be very useful to edit.in either case we should just error out if the config has multicapabilities.,positive
angular/protractor,selenium,2014-12-16T07:13:24Z,all comments addressed,neutral
jquense/react-widgets,sauce,2014-10-06T12:30:32Z,that would be great; very helpful. if you were going to pick one i would go with the calendar out of the two you mentioned. the one caveat is that if you are going to test something that you know will break in lower ie (such as css animation) make a point to mention it at least in the comments. and at best write the test so it attends to that use case (in other words doesn't run and pass in old ie). don't worry to much about it tho it is hard to know what those things are unless you are actually running the tests through those browsers. which i haven't set up yet on saucelabs.much appreciated!,positive
levelgraph/levelgraph,mocha,2013-07-11T11:45:48Z,don't see anything wrong. but also never used mocha with testling,negative
larshp/abapmerge,mocha,2017-02-17T16:06:35Z,an alternative to this is to do some rewriting of the code. so that a normal javascript test framework can be used(eg mochajs). need some dependency injection to simulate filesbut hey. there is not a lot of logic in this project. so this the shell file will work,neutral
balderdashy/sails,mocha,2013-02-17T20:59:44Z,copy over waterline tests. better yet. let them live in waterline. but call them programmatically with mocha.besides testing the waterline core (todo). we should also be running our adapter test suite on at least the following adapters by default:- sails-dirty (in memory)- sails-dirty (persistent on disk)we also might exploring leaving a hosted remote instance of other data stores running for easy testing. e.g.- sails-mysql,neutral
balderdashy/sails,mocha,2013-03-03T18:22:57Z,we have a good test suite for our active record implementation right now. but there's not a lot for the other core features.  i've got a story to create an integration testing suite (#139). but it's probably not going to be for a couple of weeks unfortunately.  we're using mocha,neutral
meanjs/mean,eslint,2017-07-03T22:08:32Z,fix(build): eslint error in express config. fixes a trailing space eslint error in the express config.,negative
meanjs/mean,eslint,2017-07-03T22:24:24Z,merging. since this is a quick & obvious fix.,neutral
meanjs/mean,eslint,2017-07-11T08:19:02Z,hum okok. maybe not important for mean. but for projects that use mean with different developers. so in the wiki. lirantal i saw this as the rules of csslint. as eslint :),neutral
apache/cordova-windows,jshint,2015-05-18T21:50:28Z,please fix the jshint error and let's get this in today - before the next cordova-windows release.,positive
videojs/videojs-contrib-hls,standard,2015-11-23T09:25:03Z,even youtube does that with livestreams. so i guess it's kind of a standard to start again where you stopped before. i don't think it's a logical thing. but a lot of people seem to think it is.i'm perfectly fine with using a workaround. do you have any idea how to change mine above to make it work for contrib-hls? it works on places (mobile) where hls is native. but it breaks with contrib-hls in desktop browsers.,positive
Azure/azure-xplat-cli,jshint,2013-02-12T23:40:17Z,might be related to jshint checkin - changing default file mode from '0600' to '600' for writefilesyncmode utility.,neutral
rwjblue/ember-template-lint,eslint,2017-07-19T17:09:33Z,has linting errors (eslint changed around one the recommended config or something).,negative
agershun/alasql,mocha,2015-06-03T04:33:01Z,if you run this test independently:```    > mocha test350```everything passed ok. that is why i passed it to release. so. this is a problem of interference one test to another. but ok. anyway it is a bug.,negative
haraka/Haraka,eslint,2016-09-29T22:51:21Z,fixup eslint no-unused-vars errors. changes proposed in this pull request:- eslint no-unused-vars errors,negative
ember-cli/ember-cli-mocha,mocha,2016-10-02T18:29:26Z,the ember core team decided it would like to consolidate the officially supported testing repos in community-controlled repos to improve visibility and control. at the same time. we want to continue to recognize the importance of the investment that switchfly made to get these projects off the ground.i have contacted pchen12 from switchfly to discuss moving `ember-test-helpers` and `ember-mocha` to the `emberjs` org. and `ember-cli-mocha` to the `ember-cli` org. rwjblue has already moved `ember-qunit` over to `emberjs`.,neutral
bitpay/bitcore,mocha,2013-12-18T22:16:47Z,add mocha to package.json,neutral
electrode-io/electrode,eslint,2016-10-21T22:44:01Z,extend eslint to add custom rules. hi. is there any way to extend eslint in order to add custom rules ? i've tried to add .eslintrc to the project but it's not used when running `gulp check`.thanks.,neutral
electrode-io/electrode,karma,2017-07-25T16:03:46Z,thanks for looking into this. my approach was wrong here. i was able to accomplish what i wanted through a custom test entry file. closing the pr out.,positive
paritytech/parity,eslint,2016-06-25T09:23:42Z,combine ui repos & streamline dev setup for ui. there are too many ui repos leading to an unwieldy development setup for anything touching ui work:- parity-sysui-app- parity-sysui-chrome-extension- parity-dapps-home- parity-dapps-wallet- parity-dapps-builtins- parity-dapps-minimal-sysui- parity-dapps-home-rs- parity-dapps-wallet-rs- parity-dapps-builtins-rs- parity-dapps-minimal-sysui-rsthese two might reasonably be argued to be common-components to other projects (though until other projects use them. it may be reasonably to keep them together with the rest):- dapps-react-ui- eslint-config-ethcore (empty?)dev setup steps for topbar. wallet. extension. signer-ui. and common components should be made easier. preferably a single repo and a single build step.consider placing everything in the main parity repo under `ui`.,neutral
paritytech/parity,eslint,2016-06-28T10:02:53Z,imo anything that is involved in the same build process to the same executable should really be in the same repo. i see no need to create artificial repo barriers based upon language. e.g. you don't use that same argument to state that js should be kept separately to html or that in a qt project the qml be kept separately to the c++.extra repos mean extra faff. they come at a very high price in terms of developer time - had it not been for the ridiculously complex and largely undocumented task of setting up and integrating a ui build environment i would likely have contributed substantially more work into the ui and prevented the need for reporting highly detailed. yet in my eyes trivial. ui issues and wasting everyone's time.i would go further than "not mixing compiled js code". and not store compiled js code anywhere. rather it should all be done locally via a build script and never touch a permanent place. let alone a github repo! i don't know of any sensible project which splits the build and requires the devs to place intermediate results into their own set of repos.,negative
admc/wd,selenium,2014-02-22T15:38:47Z,yeh i have been meaning to look into it but its fairly hard to figure out between the browser implementation / selenium implementation / client where is the right place to look for things,neutral
admc/wd,selenium,2014-02-22T15:40:01Z,wd should be able to control firefox without selenium server?. firefox implements the wire protocol natively. so controlling it without the 30 mb dependency should be possible right?,neutral
admc/wd,selenium,2014-02-22T15:45:01Z,chrome does. i am not sure about firefox. never used it like that.,negative
admc/wd,selenium,2014-02-22T15:49:25Z,doesnt chrome specifically need chromedriver.exe?,neutral
admc/wd,selenium,2014-02-22T15:50:18Z,yes i meant use chromedriver without selenium.,neutral
admc/wd,sauce,2012-11-12T20:51:11Z,does this happen on every ff test run. how about chrome or ie? have you tried running this not on sauce to see if it happens there?can you translate what this is actually doing in the wd api:      .wclickifexists(css['dialog'].mycomputerbutton)thanks!,positive
admc/wd,mocha,2013-07-23T02:33:56Z,oh. let me recap. the thread i posted is about webdriverjs and not wd.however. the behaviors also applies to wd.when one operation fails in wd. mocha is unable to go further. and fails independently of the `--bail` option.,negative
twigjs/twig.js,mocha,2015-12-18T20:48:19Z,i was unsure myself. i've never used mocha or should.js before. i just browsed to the test/ directory (via http/https of course) to see if there's a possibility. and voila ...,negative
angular/angular-cli,uglify,2017-05-26T16:39:35Z,had the exact same issue with similar architecture and had to hack a fix to remove uglify plugin from the build which is a suboptimal measure. definitely need a more permanent resolution on this as using dynamic components is crucial to many applications.,negative
quailjs/quail,karma,2014-10-13T19:57:33Z,run unit tests with karma/mocha/chai/sinon,neutral
bbc/bbc-a11y,standard,2016-12-07T16:40:48Z,ignore submit buttons in title and label standard. fixes #94 and #128,neutral
bbc/bbc-a11y,standard,2016-12-09T09:49:07Z,errors are now grouped and can be ignored like this:```page "" do  skip_standard 'focusable controls: anchors must have hrefs'end```so i'm closing this. please reopen if i misunderstood.,negative
bbc/bbc-a11y,standard,2016-12-12T12:10:39Z,check standards in iframes. with this change we validate standards in iframes and nested iframes,neutral
facebook/react-devtools,eslint,2015-04-21T22:08:27Z,ping :+1:,neutral
facebook/react-devtools,eslint,2015-04-21T22:09:47Z,(sebmarkbage),neutral
pghalliday/grunt-mocha-test,mocha,2013-02-01T09:14:08Z,looking at the docs for --require and knowing how require works i think this might be a path issue. it's also possible that the require option is handled differently within mocha to other options so i will look at that too,neutral
pghalliday/grunt-mocha-test,mocha,2013-02-09T16:50:07Z,actually i see now how blanket hooks into mocha - maybe it would be better integrated,neutral
pghalliday/grunt-mocha-test,mocha,2013-02-09T17:10:04Z,i think of it like if you allready using `grunt-mocha-test` after updating you will get additional task `coverage` (or whatever name). and you can run it without any additional work (with default settings).,neutral
npm/npm,standard,2015-02-23T04:10:58Z,i don't think you need the npm package `exec`.  `exec` should be a shell builtin.try```npm run exec -- ls      # should do standard `ls`npm run exec -- echo $path  # should show ./node_modules/.bin in $pathnpm run exec -- env    # should have several $npm_config_xxx variables```if those don't work. then there's a problem with `exec`,neutral
npm/npm,standard,2015-02-24T14:05:28Z,wip: make npm code conform to `standard`. this time based against the correct branch.this is probably too big a diff to effectively review. so once standard is passing (and the tests are passing multi-stage as well). we'll just have to cross our fingers and merge this. so far it's down from ~14.000 warnings to 1.569. most of which are comma-first clauses that need to be reformatted.it doesn't look _that_ different.r:iarna,negative
npm/npm,standard,2015-02-26T03:04:42Z,i'm sorry.  as a cygwin user myself. i sympathize. but we just don't have the resources to support anything other than bog-standard windows.,negative
npm/npm,standard,2015-02-26T07:25:04Z,closing in favor of #7442. which just goes ahead and pulls the ripcord on making npm follow `standard`. feross. you should go look at what you hath wrought – if your browser doesn't explode trying to display it. it's pretty :lollipop: (for lolololololollipop).,neutral
npm/npm,standard,2015-03-02T17:56:02Z,i mean. if you want to check out `multi-stage` and take a look. then by all means. please do (i'm going to be spending much of my week getting my head around it so i can help get all the tests passing so i can land the `standardize` pr before it goes completely stale). but the bugs i'm trying to fix in `npm2` now are ones that i think are likely to persist into `npm3` if not dealt with now. and that precludes a lot of stuff around the install and update paths.,negative
npm/npm,standard,2015-03-07T00:00:26Z,thanks smikes - thats exactly the kind of wrapper we've written. curious to hear whether others do the same or there is a more standard approach.,neutral
npm/npm,standard,2015-03-12T20:40:53Z,after discussing this with iarna. i decided the least risky way to make this happen was just to wait until we have the `multi-stage` tests in a good state (i.e. all passing) and then just redo this again from scratch. yes. it's a fair amount of work. but it should go much faster the second time. and i'm not at all confident that my dvcs skills are up to the task of accurately rebasing this branch without completely breaking something in the process. soon! :eyes:,negative
mishoo/UglifyJS2,uglify,2013-01-14T08:32:54Z,i was focusing on a work migrating countless pieces of code into an entirely different framework. so sometimes. the situation i met was a bit complicated.when i was doing it with uglifyjs1. i wrote a walker myself. which was great that everything was under my control expect for comments. after uglifyjs2 released. i tried to refractor these codes for the long-expected comments and better grammatical accuracy. suppose there's piece of code. we locate a `symbolvar`  within `before` method. notice that we could do the locating at this time. because during the transformation. the things arround the `symbolvar` might be changed which make it impossible to locate a variable i want. actually i also do a lot of such work in `before`. and only transform the code in `after`. because slices of code might have mutual dependencies - they should be transformed simultaneously.but as we know. the `node` param inside `after` is a clone of the origin node. so i lost the connection between the located one in `before` and the node in `after`. so. i added a property. then we would use `if(node.cloned_from === located_var)` in `after`,negative
mishoo/UglifyJS2,uglify,2013-01-16T02:49:25Z,thank you very much for the instructions for "dummies." as soon as i added the -g to the install command. i was able to use uglifyjs on windows. thanks!,positive
mishoo/UglifyJS2,uglify,2013-01-17T00:14:27Z,update installation instructions. as demonstrated in #4. many of the people using uglify-js to minify their javascript won't be regular node.js users. so this makes installation instructions a little bit clearer.,neutral
mishoo/UglifyJS2,uglify,2013-01-30T00:11:28Z,would it be possible to also do this for entire objects?``` js/** private **/var obj = { somekey : 'foo'. someotherkey : 'bar' };```which would yield:``` jsvar a={b:'foo'.c:'bar'};...fn(a.b);```though i object to tacking onto something in jsdoc because although i'm perfectly okay obfuscating out a private method / object in my own code. it's very possible that doing this in general would break things because people _do_ hook into and use things that would be "private" code in general libraries.  i suppose as long as it's an opt-in flag in uglifyjs it would be ok?though i realize this entire concept is destructive. which uglifyjs is somewhat opposed to. so i'm not sure exactly how to handle it?  it's just ugly seeing my "uglified" code look like:``` jsthis.__somemethod(this.__someproperty);```when it could be:``` jsthis.a(this.b);```,negative
mishoo/UglifyJS2,uglify,2013-02-07T07:47:24Z,server crushes when trying to parse javascript with html comments syntax. my node server crushes when using uglifyjs to parse some javascript that has some html comments syntax.example:var uglify = require('uglify-js');var ast = uglify.parse("<!-- function sum(x. y){ return x + y } -->");is it possible to handle this error more gracefully?,positive
mishoo/UglifyJS2,uglify,2013-02-07T08:00:15Z,html comments are not valid javascript syntax. hence the most graceful handling is to throw a parse error.  you should wrap the call to `parse` in a `try/catch` block and deal with the errors.,negative
mishoo/UglifyJS2,uglify,2013-02-07T17:55:09Z,'const' makes compress crash. ``` javascriptconst a = 'abc';```uglifyjs con't compress these code.,neutral
mishoo/UglifyJS2,uglify,2013-02-07T18:17:00Z,anyhow. it works now.  please try using latest code from git.,positive
mishoo/UglifyJS2,uglify,2013-02-08T00:03:14Z,yeah. i meant more along the lines of it is bad practice but it is done and i was pretty confused why uglifyjs2 suddenly broke the code.  i'd agree with not changing the default (it definitely saves space and _should_ be safe). but adding an option for just the args would be a great solution for me.,positive
mishoo/UglifyJS2,uglify,2013-02-08T01:54:36Z,how to run uglifyjs2 without node.js. say i want to run it inside "javascript" script engine of a jvm process. anyway to make it easier in that environment?,neutral
testem/testem,mocha,2012-10-24T17:45:32Z,just wanted to add what i've done since yesterday. by the way. i noticed you commented on jeffrey way's tutorial. that's what i'm working on and having this problem.at the end of the tutorial mocha starts complaining about global leaks but the problem seems to go away when i manually open chrome to localhost:7357 . not sure if or what that means.i enabled logging by adding the --enable-logs and --v=1 args to the args array in browser_launcher.js and when running testem it was showing warnings about problems with some extensions.long story short. i ended up removing all extensions and then ended up completely removing chrome and re-installing it. still getting the same behavior.fyi the latest installer installed chrome.exe to c:\program files\google\chrome\application\chrome.exe instead of the usual place so you might be needing to update the list of paths. i tried adding the path to the array of locations in browser_launcher.js just to see if it worked and it didn't so i copied the application folder over to appdata\local\google\chrome\application  and that works  for 'testem launchers' and for manually running chrome.,negative
testem/testem,istanbul,2016-02-16T10:46:01Z,+2,neutral
mochajs/mocha,mocha,2012-10-10T07:20:48Z,does the issue come from the use of program.parse another time. or from the need to augment argv before parsing in itself?,neutral
mochajs/mocha,mocha,2012-10-11T17:09:35Z,the need to manipulate argv based on a flag that commander parses. parsing twice might have some strange side-effects im not sure. haven't tried. maybe it's ok but that's still pretty hacky,negative
mochajs/mocha,mocha,2012-10-14T20:08:14Z,debug just failed tests. i was wondering if there could be an additional option for vows that would allow debugging but only of failed tests.this would allow me to have mocha running in one window spitting out all the results but another terminal window(/pane) could be responsible for letting me debug against the failed tests.this would allow a workflow:- modify the code or tests- mocha is watching and triggers the tests- the new step is triggered for any failed tests- debug the first failed test and hopefully then fix the code/tests which triggers a run of all tests.,negative
mochajs/mocha,mocha,2012-10-15T22:52:31Z,yeah wouldn't be mocha related we're not altering messages,neutral
mochajs/mocha,mocha,2012-10-15T23:13:50Z,we could separate stdout and stderr (not sure why we are not atm actually...) in which case you can just display stderr. or optionally use `--bail` which exits on the _first_ error,negative
mochajs/mocha,mocha,2012-10-16T17:54:33Z,prevent logo overlap on long file list. when the list of files is very long. the list of files can extend past the bottom of the screen. and the mocha logo overlaps them.,neutral
mochajs/mocha,mocha,2012-10-18T21:52:46Z,yeah perhaps. ideally i didn't want any custom mocha behaviour there but i can't think of a reasonable way around .showdiff,neutral
mochajs/mocha,mocha,2012-10-19T10:16:43Z,sounds good thanks.bail is useful for sure. one of the many useful features in mocha. however when i do bail i sometimes end up wanting to debug the failed test (or the tests in that file). i know i can debug the entire test suite easily but it adds more friction especially when i've got breakpoints. anyhow as long as the input going to stderr had the name of the file containing the failing test i should be able to do what i want.,negative
mochajs/mocha,mocha,2012-10-19T10:30:34Z,executing a test run fixture before any tests. one feature i'd find useful is the ability to run a file before any tests. the code in that file being a test run fixture that does some sort of setup.i realise i can get this behavior by requiring the fixture file from each of my test files. but i'd prefer not to have to not least as it makes moving the test files around harder (paths to the fixture ending up broken).i was thinking this could be controlled using another mocha option. only slight complexity i can think of would be if the test fixture file was inside the directory in this sort of situation:```mocha -r spec spec/ -w -g --recursive --runfixture spec/testfixture```,negative
mochajs/mocha,mocha,2012-10-19T18:35:32Z,i dont think it would be worth complicating. fixtures are so arbitrary do i'd rather delegate all of that to the user,negative
mochajs/mocha,mocha,2012-10-19T18:36:25Z,you can do `it.only('name` to only execute that one test. or `describe.only(` for that suite,negative
mochajs/mocha,mocha,2012-10-19T20:11:46Z,get you. at the minute i've just got a test run fixture file at the root of spec directory so it gets picked up first which works (other than when running individual test files directly). ta.,neutral
mochajs/mocha,mocha,2012-10-19T20:13:53Z,i just put initialization stuff in ./test/support or similar and require() that in each test so it still works standalone,neutral
mochajs/mocha,mocha,2012-10-19T20:13:56Z,closing for now,neutral
mochajs/mocha,mocha,2012-10-22T15:38:55Z,this fails to highlight to the tester when a test has actually been skipped; calling `done()` early implies that the test has passed. it hasn't.,negative
mochajs/mocha,mocha,2012-10-22T15:39:42Z,yeah that's somewhat annoying with node. i tend to just minimize nesting anywhere possible now. our app is just lib/\* with hundreds of modules in there. no nesting and no nested tests within each,negative
mochajs/mocha,mocha,2012-10-22T16:17:54Z,yeah that's true. it would be simple to add but it does seem like a strange feature to me at least,neutral
mochajs/mocha,mocha,2012-10-22T16:37:25Z,it would be really useful when testing optional dependencies. for example an abstraction layer supporting several adapters for different environments. currently we work around this in the following way:``` javascript(condition ? describe : describe.skip)("optional foo tests". function() {});```but this loses some of the natural readability of the tests.,positive
mochajs/mocha,mocha,2012-10-22T20:38:04Z,yeah that is a good feature. maybe i under-use it because i find if i'm using the watch feature and use describe.only then it does indeed just run the one test. but if i remove the only again it keeps just running the one test...but i'm thinking that's probably a bug and i'll log it separately.,negative
mochajs/mocha,mocha,2012-10-22T20:39:42Z,hmm yeah maybe. i dont use watch so i miss that stuff,negative
mochajs/mocha,mocha,2012-10-22T20:40:03Z,we must not be resetting the `mocha` state related things like .grep(),neutral
mochajs/mocha,mocha,2012-10-23T19:00:43Z,the "exports" ui does not match the commonjs spec (though it is pretty close). which says test keys should start with the string "test".  test functions should also take an `assert` module as an argument.  i'm not sure that the "exports" ui could be altered while maintaining backwards-compat for mocha.we're currently experimenting with this at olark.  i actually did not intend to create this request upstream (yet). meant to do that on our own fork.  my bad :),negative
mochajs/mocha,mocha,2012-10-28T11:21:15Z,mocha doesnt have anything to do with assertions so that's up to should / expect / chai etc,neutral
mochajs/mocha,mocha,2012-10-29T19:11:58Z,if i forget to pass a callback in an express app. my response will hang and end up in my logs. if i forget the callback in mocha i'm not notified at all. a test framework with false positives is one i can't use.,negative
mochajs/mocha,mocha,2012-10-29T19:19:21Z,calling `done()` should error if it's not defined but yeah mocha wont wait around for it. hmm.. trying to think if there's a cleaner way to solve this,neutral
mochajs/mocha,mocha,2012-10-29T20:21:57Z,added doctype to template. i added a doctype to the browser template that is used with `mocha init`. the reason for this is that the recommended assertion library chaijs. doesn't work in quirks mode in internet explorer. in other words. using mocha init with chaijs out of the box doesn't work in internet explorer. this resolves that problem.thanks!,neutral
mochajs/mocha,mocha,2012-10-30T15:43:27Z,yeah this is reasonable. i like it. i think we should change mocha's bin to use find as well. or at least add that flag. because often you may have something like `describe('foo(bar)'.` where you dont really want to escape all the parens,neutral
mochajs/mocha,mocha,2012-10-30T16:50:03Z,hey. i'm awaiting this to be merged as i'd quite like to use the framework that serialseb has developed using this functionalitywhat work is outstanding to make this happen? can i do it?,positive
mochajs/mocha,mocha,2012-11-02T05:07:40Z,htmlreporter: fix "property 'appendchild' of undefined".. ie9 throws the following error on the large.js test:> (mocha.js:2072) unable to get value of the property 'appendchild': object is null or undefined.which is caused by the stack.shift() call earlier.,neutral
mochajs/mocha,mocha,2012-11-02T16:20:00Z,seems a little odd that only one browser would get this. since the shifting is just based on events we control this seems like duct-taping another problem,positive
mochajs/mocha,mocha,2012-11-06T16:08:07Z,this seems a good thing to have. especially with ci environments (currently i have some slow stuff on travis and i'd like to know what's issue).is this better implemented as a new reporter. which might extend dot. or modifying the base reporter?,neutral
mochajs/mocha,mocha,2012-11-06T16:56:28Z,at this point a custom reporter (or built on json / json-stream) would be the way to go. i'd prefer to stay away from adding too much complexity to what we have already unless it seems really necessary. i'd like to remove some from core as well and put them in npm. like teamcity. i've never even heard of that ci so we should move some out,neutral
mochajs/mocha,mocha,2012-11-06T20:22:07Z,separate package,neutral
mochajs/mocha,mocha,2012-11-07T04:22:10Z,is that already updated on npm? i just installed mocha and im still getting global leaks detected: stats. report,neutral
mochajs/mocha,mocha,2012-11-07T09:40:26Z,i have the same error.,neutral
mochajs/mocha,mocha,2012-11-07T20:23:20Z,i think this is a dup. but currently we bail if a hook fails because we assume subsequent calls will fail as well. in the future we can change this to skip only that suite. but for now it emits "end" and mocha exits.,negative
mochajs/mocha,sauce,2016-01-27T16:14:23Z,add browser test suite to ci. should hopefully catch some issues going forward. very simple cross-browser tests with testling.com/saucelabs would be nice too.,positive
mochajs/mocha,sauce,2016-01-27T21:09:56Z,how much do we value cross-browser integration/acceptance tests over just plain-old automated browser tests in. e.g. phantomjs? most of our ie8 issues thus far could have been detected with a grep (it's almost always `array.prototype.foreach` lol) aside from that. we've hit some small snags with safari in the past.we could certainly kill two birds with one stone. but i feel like the initial focus might be just hooking up basic browser tests with ci?,positive
mochajs/mocha,sauce,2016-01-27T23:13:03Z,you're right danielstjules.  was thinking i'd used it elsewhere. but i've only set it up for pull requests issued from the same origin.  makes sense that the `sauce_access_key` is encrypted per repo.,negative
mochajs/mocha,sauce,2016-01-27T23:20:52Z,no worries :) but i agree. with your earlier point. we could definitely break this down into multiple tasks.,positive
mochajs/mocha,sauce,2016-01-27T23:26:57Z,> we could certainly kill two birds with one stone. but i feel like the initial focus might be just hooking up basic browser tests with ci?i agree with this.  get something running w phantom on travis.,positive
mochajs/mocha,sauce,2016-01-27T23:27:30Z,> we don't have (functional) selenium tests; is this a requisite to use saucelabs? or can we just run our unit/integration tests on it?unfortunately no. we'd need to write our own integration tests. our browser unit tests aren't really unit tests. some of them fail. for example. to show that error handling works in the html reporter. so we'd need to write tests that wrap and verify that functionality.,negative
mochajs/mocha,sauce,2016-01-27T23:27:55Z,> i agree with this. get something running w phantom on travis.sounds good to me!,positive
mochajs/mocha,sauce,2016-01-27T23:29:33Z,re cross-browser compatibility: if we're just looking at testing our _javascript_. there are two browsers.  ie8 and everything else.  afaik per kangax's tables. anything else non-es5-compliant has insignificant usage.,negative
mochajs/mocha,eslint,2017-01-28T12:53:02Z,lets get this in. can you rebase this branch for us?,neutral
mochajs/mocha,eslint,2017-01-28T14:56:27Z,something that just occurred to me (but this doesn't need to be held up investigating it): could we use directives in the comments to take node variables back off the ignore list for the browser file. the way one can use directives in the comments to add variables to the ignore list for specific functions or files?,neutral
mochajs/mocha,eslint,2017-01-30T08:26:48Z,kt3k thank you for the contribution!,positive
mochajs/mocha,eslint,2017-01-30T09:07:03Z,thanks for merging!,positive
mochajs/mocha,karma,2016-01-27T18:31:51Z,it also breaks any sort of `requirejs` usage such as `karma-requirejs`.,neutral
teerapap/grunt-protractor-runner,selenium,2014-09-22T11:19:24Z,paramerts are not working from grunt file . hi.i am trying to pass parameters from grunt file to jasmine test cases but unable to get the parameters in jasmine test cases or protractor config file.i am using bellow code in grunt .protractor: {        options: {        keepalive: true.        configfile: "test/configfile.js".        args: {            params:{              username:'username1'```        }  }  }.  singlerun: {}.  auto: {    keepalive: true.    options: {      args: {        seleniumport: 4444.                 }    }  }    }```i am trying to retrieve the in test cases as browser.username regards omprakash,neutral
teerapap/grunt-protractor-runner,selenium,2014-09-25T05:03:34Z,args: {params:{username:'username1'```    }```  }working but unable to pass change the username from command,neutral
karma-runner/karma-sauce-launcher,sauce,2013-11-23T20:27:21Z,:+1:,neutral
karma-runner/karma-sauce-launcher,sauce,2013-11-23T23:38:09Z,i'm also not sure what is the best way to report multiple results (you can have a long life session and run the tests many times)...,neutral
karma-runner/karma-sauce-launcher,sauce,2013-11-25T07:54:17Z,since the reporter cannot be used on it's own without the saucelabs runner. it made sense for me to add it here. also. to make this a separate plugin. we'll need some way to share the session details across the plugins (job id and credentials).to me this reporter is mainly useful when running on a ci server with `singlerun: true` - i can't think of a scenario where it's useful to report multiple results with this.,neutral
karma-runner/karma-sauce-launcher,sauce,2013-11-27T15:00:30Z,vojtajina i rebased and squashed the commits.i also confirmed that with `--no-single-run --auto-watch`. the session metadata page on sl always shows the latest results.,neutral
karma-runner/karma-sauce-launcher,sauce,2013-11-29T21:45:30Z,rkistner would be super cool if you could mention the reporter in the readme ;-),positive
karma-runner/karma-sauce-launcher,sauce,2013-11-30T16:01:04Z,vojtajina when will that be available on npm?,neutral
karma-runner/karma-sauce-launcher,sauce,2013-12-04T05:17:59Z,garbas you can disable it by `config.saucelabs.startconnect = false`.,neutral
karma-runner/karma-sauce-launcher,sauce,2013-12-04T13:39:45Z,quoting vojta jina (2013-12-04 06:17:59)> garbas you can disable it by config.saucelabs.startconnect = false.tnx. i probably missed this while reading docs## rok garbas -,negative
karma-runner/karma-sauce-launcher,karma,2013-11-22T07:41:32Z,+1 to slow shutdown. looks like the test is waiting for timeout of browsers before closing the connection ?,positive
karma-runner/karma-sauce-launcher,karma,2013-11-23T23:34:09Z,nice rkistner. i'm only thinking... shouldn't this rather be a separate plugin `karma-sauce-reporter` ?,positive
karma-runner/karma-sauce-launcher,karma,2013-11-27T02:44:58Z,rkistner i agree. let's keep it together (sharing the jobid wouldn't be that much of problem). maybe we can rename this plugin to just `karma-sauce`.you can totally use this with `--no-single-run --auto-watch` while developing/debugging. let's say you have an ie9 specific issue - you just start karma session with ie on sl (i use this instead of my local vms). for instance angular is configured that i only need to do `karma start --browsers sl_ie_9`.it's probably not big of a deal. i hope that current implementation will just result in the latest result being showed on sl. which is fine with me.so can you please rebase this on the master. so that i can merge it in?thanks a lot.,positive
karma-runner/karma-sauce-launcher,karma,2013-12-02T13:36:31Z,vojtajina i would actually expect that sauceconnect would be started but another configuration then karma.i dont think depending on `sauce-connect-launcher` is desired in all cases. for example travis-ci has this addon which sets up connection to saucelabs. and the same thing i do in jenkins/hudson.it would be nice to at least have an option to ignore this.,neutral
felixrieseberg/ember-electron,eslint,2017-04-20T22:23:50Z,hi. thanks for the bug report! this is a bug in `ember-electron`  and not your fault. i'm working on fixing it as we speak. to fix it in your application. just add `/* eslint-env node */` to the top of your `ember-electron/main.js`.,negative
felixrieseberg/ember-electron,eslint,2017-04-21T08:20:37Z,if the `.eslintrc.js` files in tests and the blueprint do not work and need to be replaced by the inline comments we can safely remove those files.,neutral
power-assert-js/power-assert,karma,2016-01-03T03:50:38Z,i use karma-espower-preprocessor. is this a cause?,neutral
danvk/dygraphs,karma,2014-11-17T23:58:59Z,i found a combination of karma and phantomjs a pretty nice setup for running mocha tests.,positive
chentsulin/electron-react-boilerplate,eslint,2015-08-31T01:32:46Z,airbnb eslint,neutral
AnalyticalGraphicsInc/cesium,jasmine,2017-07-24T20:28:05Z,test failure: scene/composite3dtilecontent renders multiple instanced tilesets. scene/composite3dtilecontent renders multiple instanced tilesets is failing in the ci.```scene/composite3dtilecontent    ✗ renders multiple instanced tilesetserror: timeout - async callback was not invoked within timeout specified by jasmine.default_timeout_interval.,negative
AnalyticalGraphicsInc/cesium,eslint,2017-07-31T15:39:28Z,oterral you also have some eslint errors that need fixing.,neutral
redfin/react-server,eslint,2016-02-24T22:13:43Z,i'm struggling to understand the scope of `react-server`.  as far as i can tell. we seem to believe that we are going to manage all of the complexity of the build for every client of react-server. which i think is unrealistic. as it requires new clients that want to do something we haven't considered.  consider a client that wants to set up a react-server instance with browserify. clojurescript. and support a dev. test. staging. perf testing. and multiple prod environments (say. for instance. they would like to have different build for china vs the us).  as i understand the proposal. that client would need to open a pr to what is you are proposing would be named `react-server` to add browserify support. clojurescript support. jshint for linting. and to change the existing way of handling environments to allow them to use `react-server`.  as i understand it. you'd either fork `react-server` and use that (which would be frustrating when you want to get new features. since you'd have to rebase onto/merge `redfin/react-server`). or you'd use `react-server-core` and lose any other configuration that is exported by the proposed `react-server` solution.  there's also a question of support -- in our use of react-server. we've had to spend a lot of time debugging webpack errors.  if we hide all the complexity of webpack in the `react-server-cli`. when there _is_ an error (which although i would love to guarantee would never happen. i think realistically will). then rather than using the existing webpack documentation. clients would have to rely solely on the code from `react-server-cli` to figure out the source of their failure. fork the cli. build and deploy with the fork. and then submit the fork upstream.also. since we babelify the code for clients. how would clients opt in or out of language features?  do they simply have to accept the variant of es6 exported by `react-server`?  or what if they want a different set of webpack plugins?  or a different set of eslint settings?  do we plan on consuming the config files of every possible bundler. transpiler. linter. etc as part of our api?,negative
mafintosh/hyperdb,standard,2017-08-08T10:08:03Z,missing standard dep,neutral
alfa-laboratory/arui-presets,eslint,2017-08-15T07:38:23Z,fix(eslint): allow to use functions before define,neutral
alfa-laboratory/arui-presets,eslint,2017-08-15T08:07:39Z,stepancar да. конечно. стрелки попадают под переменные,neutral
yui/shifter,jshint,2012-10-29T14:29:58Z,rollups cause line too long jshint/lint error to be thrown. this may only be happening for rollups and potentially only for -debug.js but i get:shifter [err] ...build/tincan-w/tincan-w-debug.js contains 1 lint errors   #1: line too long.for the following line:yui.add('tincan-w'. function (y. name) {"use strict"; }. 'version'. {"use": ["tincan-w-base". .......since it is debug i'd think tossing a newline after each rolled in module would do the trick.,negative
walmartlabs/eslint-config-defaults,eslint,2015-09-01T07:21:51Z,revert "all yaml all the time". reverts walmartlabs/eslint-config-defaults#31 - see #32 for details. it appears that eslint itself doesn't appropriately pull in yaml files.,neutral
walmartlabs/eslint-config-defaults,eslint,2015-09-01T07:22:10Z,divmain ^^ this sucks.,negative
walmartlabs/eslint-config-defaults,eslint,2015-09-01T08:30:01Z,:(i may offer a pr to eslint so that this isn't necessary.,neutral
walmartlabs/eslint-config-defaults,eslint,2015-09-28T04:09:24Z,the way eslint pulls in config is a little wonky. great find! thanks!,positive
edwellbrook/node-tvdb,eslint,2016-09-19T19:53:14Z,add eslint. not activating eslint in `npm test` yet. as it would fail horribly on this branch.,negative
edwellbrook/node-tvdb,eslint,2016-09-20T17:24:44Z,edwellbrook all done,neutral
react-boilerplate/react-boilerplate,eslint,2016-01-30T08:57:28Z,i was going to say the same + i think current implementation of `shouldcomponentupdate` is broken anyway. for eslint you should just use `babel-eslint` as the parser,negative
react-boilerplate/react-boilerplate,karma,2016-01-24T16:00:02Z,i'd be ok with reverting that and calling it a day. but i do see the value in `chai-enzyme` and would like to get it all working together at some point.aside: the whole plugin thing leaves a bad taste in my mouth compared to the simplicity of `chai.use`. it's one of the things that makes karma feel heavier. i mean. you can call `chai.use()` multiple times to include multiple chai plugins. but if you want that in karma. it seems you now need n*m packages for `karma-foo-bar`. `karma-foo-bar-baz`. etc.,negative
apache/zeppelin,selenium,2015-10-30T05:31:33Z,yes. i intend to write a selenium test case. once both are merged.,neutral
assaf/zombie,standard,2013-11-29T23:55:35Z,in my application. there is a standard 404 page (ie "page1") but users can set a custom 404 page (ie "page2").  if a custom 404 page is set. whenever the webserver encounters a page not found error. the user is redirected to the standard 404 page ("page1") which then redirects the user to the custom 404 page ("page2").if the first redirect (to "page1". the standard 404 page) occurs with http status of 404. zombie immediately triggers an error and does not continue to the second redirect (to "page2". the custom 404 page).this differs from the behavior of a regular browser which would follow both redirects and end up on "page2". the custom 404 page.i hope this helps clarify the issue.  thanks.,neutral
assaf/zombie,mocha,2013-01-14T20:56:27Z,do you have a piece of code to show ? i'm doing the following (using mocha) :``` javascriptbefore(function(done) {  this.browser    .visit(':3001/contact')    .then(done. done);});it('should redirect to 404'. function() {  assert.equal(this.browser.statuscode. 404. "didn't get 404. instead got " + this.browser.statuscode);});```,neutral
assaf/zombie,mocha,2013-01-14T21:36:50Z,yes. and mocha tells me all tests pass green and the command ends normally.,neutral
yeoman/generator,mocha,2012-11-07T01:54:29Z,will do.if you want to fix travis-cl in the main yeoman package. i think all you have to do is increase the mocha timeout.,neutral
dmfay/massive-js,mocha,2015-10-12T20:46:23Z,make sure you have mocha installed: `npm install mocha -g` and then have postgres installed locally. create a login that matches our test login (or change it to suit) and then run `mocha .` - don't forget the dot :).,neutral
datproject/dat,standard,2015-03-09T04:35:10Z,i had the opportunity to work with this data very superficially as part of a code for america project and remember noting the importance. complexity. potential risks and the significant value potentially resulting from broader awareness about and more varied use of the data set.  seems a natural to make available as a streaming service according to an open standard.  has there been any further discussion about or work on this use case? thanks.,positive
dustingetz/react-cursor,karma,2015-08-11T20:57:23Z,ok. dustingetz -- be prepared for a big pr.  i replaced browserify and grunt with webpack. cleaned up your test structure and karma configuration. cleaned up the example structure and moved each over to webpack-hot-reloader so that users can take advantage when experimenting. and generally just simplified overall.  i'll write a more thorough overview in the pr. but don't want to surprise you when you get the request!,neutral
strongloop/generator-loopback,eslint,2016-04-08T19:48:53Z,add eslint infrastructure,neutral
strongloop/generator-loopback,eslint,2016-04-08T20:36:49Z,one minor comment. otherwise lgtm,neutral
ramda/ramda-fantasy,jshint,2015-05-02T14:32:56Z,add jshint,neutral
ramda/ramda-fantasy,jshint,2015-05-02T15:02:21Z,very nice.related to this. i noticed that the project does not have the same indentation everywhere (i am to blame for some of this). what is our policy here. do we go with 2/4?,negative
ramda/ramda-fantasy,jshint,2015-05-02T15:06:53Z,i'm for 2 spaces,neutral
ramda/ramda-fantasy,jshint,2015-05-02T15:24:56Z,should we fix that here or in another commit?,neutral
ramda/ramda-fantasy,jshint,2015-05-02T15:30:00Z,separate commit. may wanna include jscs for enforcement,neutral
vvo/selenium-standalone,selenium,2014-05-21T10:16:18Z,this is in the work,neutral
vvo/selenium-standalone,selenium,2014-05-21T17:23:23Z,i am so glad and happy that you like this selenium automation tool. time is money and happiness :-),positive
vvo/selenium-standalone,selenium,2014-05-25T09:17:56Z,how to know if the server is fully started?. can you please update the example to show how the webdriver is used on the stdout data callback?when i am trying like the following. ```var webdriver = require('selenium-webdriver');server.stdout.on('data'. function(output) {  driver.get(''); });```i am getting null error exception on selenium-webdriver. is this the right way to do?,positive
vvo/selenium-standalone,selenium,2014-05-25T13:06:12Z,there's no built in way right now to know if the server if fully started.the only way to know it would be to parse the stdout of the server.the easiest way is just to start selenium and then launch your tests after 3s. it won't hurt you to do so.,negative
vvo/selenium-standalone,selenium,2014-05-25T13:13:39Z,okay. now i am finding it like given below```server.stdout.on('data'. function(output) {        var val = output.tostring();        if(val.indexof('jetty.jetty.server')>-1){           //server loaded fully        }```,positive
vvo/selenium-standalone,selenium,2014-05-25T13:20:06Z,exactly. is that sufficient?also you whould stop listening for stdout if everything looks good,positive
vvo/selenium-standalone,selenium,2014-05-25T16:11:42Z,since tostring() decodes and gives as strings. i can do just like that. and. i am planning this to use in a grunt plugin. so. i am calling the async done() function inside that if check.,negative
ibm-watson-iot/iot-nodejs,mocha,2017-05-25T18:28:22Z,closing the issue as there is no further response.,neutral
nathanboktae/mocha-phantomjs,mocha,2015-04-01T16:11:46Z,you are using schemaless urls with the `file:///` protocol. so it defaults to file. you won't be able to use those urls on a flat file - you'll either need `http` or `https` explicitly. or use a local server.btw this has nothing to do with `mocha-phantomjs` but just how the browsers work. if you open it up in a browser you will see the images not load.,neutral
nathanboktae/mocha-phantomjs,mocha,2015-04-01T18:30:56Z,fyi if you ever need to provide additional phantom args. `phantomjs lib/mocha-phantomjs.coffee <page> <reporter> <config>` is something we support (semver wise),neutral
nathanboktae/mocha-phantomjs,mocha,2015-04-02T17:35:33Z,i assume running locally produces the same result? try `phantomjs --remote i debugger sport=9000 lib/mocha-phantomjs.coffee tests.html spec` for debugging.phantomjs definitely has its quircks. and by quircks i mean big bugs. if you are doing heavy dom manipulation and verification. or relying on more recent dom functionality. you might not want to use `mocha-phantomjs`. sauce labs is really awesome if you haven't seen them.,positive
nathanboktae/mocha-phantomjs,mocha,2015-04-03T19:54:08Z,> maybe all flags that aren't recognized by mocha-phantomjs should be passed throughyes we should really be doing this. and would love a pr to do so. thanks!,positive
select2/select2,sauce,2014-11-19T22:10:19Z,awesome sauce thanks,positive
linkedin/dustjs-helpers,jasmine,2012-10-09T19:02:51Z,helper tests grouped by helper type . - the tests were grouped.- old javascript tests edited to use the new json format used in tests file- jasmine test edited to use the new json format used in tests file,neutral
linkedin/dustjs-helpers,jasmine,2012-10-09T19:13:36Z,awesome jairodemorais. ship it,positive
linkedin/dustjs-helpers,jasmine,2012-10-09T19:13:47Z,can we do the same for the core helpers :),neutral
linkedin/dustjs-helpers,jasmine,2012-10-09T19:15:20Z,vybs  yes we can :p,neutral
mccormicka/Mockgoose,jshint,2013-12-08T01:40:31Z,hi peter. sorry for my late reply i have been really busy this week. i noticed that this pull request does not include my changes merged for the $pushall from master. in addition before making pull requests can you please run the jshint files against your changes as they don't comply  you can simply run```grunt jshint ```i will pull this branch now and check out the changes locally. thanks for contributing.,positive
typicode/husky,standard,2016-10-05T15:57:57Z,still seeing the original issue of the `pre-commit` hook running from the cli. but getting skipped in guis.i checked the `$path` variable from both the gui and cli as mentioned above. and it looks like its the same exact issue.**os:** windows 7**gui:** github desktop,neutral
typicode/husky,standard,2016-10-05T16:12:23Z,nick-woodward is it with latest husky?,neutral
marionettejs/backbone.marionette,mocha,2014-03-05T18:25:01Z,if someone wants to take a stab at the refactor i think it will help a bunch. and will not be thrown away. the switch to mocha+chai is just syntax sugar.,negative
marionettejs/backbone.marionette,mocha,2014-03-05T22:53:24Z,:thumbsup: for mocha-chai... mocha+chai+sinon = bliss!i do love a refactor,positive
kriskowal/q,jasmine,2012-10-10T20:08:37Z,isresolved() and isrejected() are both true. isresolved() and isrejected() are both true after rejecting a single defer/promise. this is either counter intuitive. or wrong.  please explain if i'm missing something here :)example jasmine test code: this test passes (i would expect it to fail)            var promise;```        function iscomplete() {            return promise.isrejected() || promise.isresolved();        }        function expectstate(obj) {            if (obj.hasownproperty('isrejected')) {                expect(promise.isrejected()).tobe(obj.isrejected);            }            if (obj.hasownproperty('isresolved')) {                expect(promise.isresolved()).tobe(obj.isresolved);            }            if (obj.hasownproperty('isfulfilled')) {                expect(promise.isfulfilled()).tobe(obj.isfulfilled);            }        }        function rejectandverifystate(fn. value. expectedstate) {            var defer = q.defer();            promise = fn(defer);            runs(function() {               defer.reject(value);            });            waitsfor(iscomplete);            runs(function() {               expectstate(expectedstate);            });        }         it('should set correct state when rejected'. function () {            rejectandverifystate(function(defer) {                return defer.promise;            }. 'failed'. { isrejected : true. isresolved : true. isfulfilled : false });        });```,negative
kriskowal/q,jasmine,2012-10-10T20:12:22Z,a promise one primary axis of state:**resolved** vs. **deferred**if the promise is resolved. then it has another axis:**fulfilled** vs. **rejected**you are probably looking for `q.isfulfilled()` instead of `q.isresolved()`.,positive
kriskowal/q,jasmine,2012-10-10T20:16:39Z,sorry. but this makes no sense. there are two distinct ways to complete a defer. either reject. or resolve. the isresolved and isrejected functions should report this state. how can both isrejected and isresolved be true? i understand that isfulfilled will report if the whole chain has been fullied.,positive
kriskowal/q,jasmine,2012-10-10T20:17:29Z,"a promise one primary axis of state:". that statement makes me think you agree with me. it should either be resolved. or rejected not both?,positive
kriskowal/q,jasmine,2012-10-10T20:19:19Z,> sorry. but this makes no sense. there are two distinct ways to complete a defer. either reject. or resolve.you can resolve a deferred with a promise. in this case. two things happen:- if the passed promise is already resolved. the underlying-promise adopts its state. becoming itself resolved.- if the passed promise is still pending. the underlying-promise stays in the pending state. waiting on the passed promise to resolve before adopting its state.notably. you can call `deferred.resolve(q.reject(new error()))` to achieve the same effect as `deferred.reject(new error())`. in this sense `deferred.reject` is just sugar; the only thing you can do with deferreds is resolve them. the effect on the underlying promise---whether it will be resolved. or stay pending---is determined by what you resolve the deferred _with_.> "a promise one primary axis of state:". that statement makes me think you agree with me. it should either be resolved. or rejected not both?you seem to have missed the subsequent line. where i explained that this axis is not resolved vs. rejected. but resolved vs. deferred. a promise can either be resolved or deferred. but not both. similarly. it can be either fulfilled or rejected. but not both. resolved can mean either rejected or fulfilled. however.,positive
kriskowal/q,jasmine,2012-10-10T20:21:54Z,ok. so i should think of reject as resolvewithrejection :). thanks for taking the time to go through it,positive
kriskowal/q,jasmine,2012-10-10T20:22:24Z,> ok. so i should think of reject as resolvewithrejection :). thanks for taking the time to go through ityeah that's pretty much it :). thanks for sticking with me!,positive
kriskowal/q,jasmine,2012-10-10T20:25:52Z,still not sure i like the terminology. especially as your own description uses terms like pending. an ispending. or iscomplete with isrejected and isresolved being mutually exclusive would imo make more sense. but its a bit late to make that sort of change (lol). i guess i'm just coming at it from a .net tpl library perspective. thanks a lot  for the really quick responses. its rare. but means i can get on now and finish my work :),positive
kriskowal/q,jasmine,2012-10-10T20:29:54Z,well. the confusing thing is that "resolve" as a verb only applies to deferreds. whereas "resolved" as a state only applies to promises. :-/i agree that a `promise.ispending()` might clarify things. but that would just be the same as `!promise.isresolved()`. so it's not that helpful.kriskowal may have more to say. but glad i could get you moving in the right direction :),positive
kriskowal/q,jasmine,2012-10-11T08:18:36Z,suedama1756 jquery's implementation is very basic and lacks a lot for a _promise_ solution. q would be very limited if it would try to be compliant with jquery's deferred.promise can be either _resolved_ or _unresolved_ and when it's resolved can be either _fulfilled_ or _rejected_. it's very logical and valid approach.,positive
kriskowal/q,jasmine,2012-10-16T07:40:38Z,guys. i'm not for one minute suggesting that you limit q's functionality (and i'm not a fan of jquery full stop. for me. its a library from a different era). i think the functionality provided by q is fantastic. i really do. i just think the naming of promise states is a little unfortunate. they are not symmetrical with the methods resolve. reject (unless reject is named resolvewithrejection). api's should be discoverable. symmetrical and obvious. so far not one single developer in my team has answered the question correctly. "what do you think isresolved returns when you have rejected a deferred object". in reference to the promise/a specification there is no mention of the isrejected/isresolved states. in practice. most developers will use then() so this becomes a non-issue.the reality is that the states do make sense once you know about them. but you can't really argue with the fact that for most people. the isrejected and isresolved states do not return what is intuitively expected.great work regardless :),negative
jquery/sizzle,karma,2014-01-13T12:37:12Z,this looks promising overall. assuming it works as intended (haven't tried yet). my main concern for wider usage across our projects would be the amount of configuration files we need. `grunt-karma` is nice. but we'd probably need something like `grunt-karma-jquery` to share most of that setup across our projects. not a blocker for this pr. but something to consider for next steps.that said. another candidate for using karma would be qunit itself. since it only relies on static html (no php dependency). maybe land this pr mostly as-is. then look into abstracting. and use the abstraction here and for qunit?,negative
jquery/sizzle,karma,2014-01-13T12:54:43Z,<blockquote>grunt-karma-jquery</blockquote> yeah. i thought about it too. but i fear there is not a lot of parts that we can share. at least right now. but i will definitely check it out. <blockquote>on static html</blockquote>even if project has some moving parts it would be easy enough to solve. my main concern is that testswarm executes every module in parallel. if you. for example. try to run a lot of tests like for jquery core. say in ie8. it would fail. but if you grep and run failed individual tests or modules they will pass.this too could be workarounded but it would be a nightmare. so right now. i'm not entirely sure if karma would be a good fit for "big" projects.,negative
jquery/sizzle,karma,2014-01-13T16:21:37Z,<blockquote>did you mean to refer to karma in the first one as well?</blockquote>no. swarm executes test modules in parallel not in a sense that it run some amount browsers simultaneously. but run them through specific modules like `?module=traversing`. `?module=manipulation`. etc; not whole testsuite at once not all tests at once. i believe swarm does it for speed. but as a result. jquery core testsuite is now falling.  in order to do the same with karma. we have to get clever if we would have to do this.<blockquote> what do you consider a "big" project?</blockquote>by "big" project i mean the one that support a lot of old browsers and have a lot of tests. so<blockquote> if you. for example. try to run a lot of tests like for jquery core. say in ie8. it would fail. but if you grep and run failed individual tests or modules they will pass.</blockquote>in other words. if testsuite could execute all tests without falling in all supported browsers. then it would be a easy enough to add karma. if not. then it probably be a pretty hard task to manage.,positive
SparkPost/node-sparkpost,coveralls,2015-04-28T12:59:14Z,visual code coverage tool. it would be nice to view the code coverage visually instead of just the spec report at the end of unit tests. this would help find subtler issues like untested branches. we should set up something like coveralls.io. it's free for open source and plugs in nicely with travis. we'll have to create an sparkpost account first. other solutions would be fine too.,positive
SparkPost/node-sparkpost,coveralls,2015-04-29T13:08:37Z,just found the test/reports directory :) so. um. yeah. gonna close this.,positive
kissjs/node-mongoskin,istanbul,2015-06-08T15:10:33Z,mongoskin uses some old code-coverage tools that don't quite have as clean instrumentation as istanbul. either way. mongoskin really doesn't support being included through browserify - there's not much mongoskin can really do on the browser given the current implementation of the underlying mongodb driver. what are you trying to do with mongoskin in the browser?,neutral
mantoni/mochify.js,mocha,2014-05-28T19:34:56Z,i think the issue is that i added "mocha" as a require. not fully groking how the system works.  i'll try to add some examples later.you should create a github site for this project. it's super useful!,positive
mantoni/mochify.js,mocha,2014-05-29T13:51:55Z,thanks! i've tried to add support for `require('mocha');` in test cases. but it's not trivial to do.,positive
cucumber/cucumber-js,mocha,2016-08-29T03:35:44Z,mattwynne aslakhellesoy looking at tackling this week and wanted to get your thoughts on this.,neutral
cucumber/cucumber-js,mocha,2016-08-30T07:34:34Z,good news because i have no time to do that right. sorry.,negative
cucumber/cucumber-js,mocha,2016-09-08T17:01:39Z,closing this as i working on this in another branch and just taking a bunch of code from mocha.,neutral
cloudchen/grunt-template-jasmine-requirejs,jasmine,2013-09-17T01:30:04Z,+1,neutral
cloudchen/grunt-template-jasmine-requirejs,jasmine,2013-10-04T16:42:59Z,merged. let me know if it's not working.,neutral
cloudchen/grunt-template-jasmine-requirejs,jasmine,2013-10-08T03:38:29Z,i will set up a breaking case example. effectively i am using a top level sim link for library code and the template is injecting ../ before each of my cases. not a big deal for now. when i have more time i will put something together to show.,negative
cloudchen/grunt-template-jasmine-requirejs,jasmine,2013-10-08T05:32:42Z,add one more map configuration to your `requireconfig`.``` jsmap: {    '*': {        "app": "../src/js"    }}```this mapping only needs to be added for jasmine task. development environment doesn't have to.,neutral
appium/appium,selenium,2014-02-01T16:32:00Z,i remember looking into this and it's an issue with the java selenium bindings. i didn't find a way to send the json that mobile find expects.,neutral
appium/appium,selenium,2014-02-05T00:14:22Z,what selenium bindings are you using? they should have some way of calling page_source.,neutral
appium/appium,selenium,2014-02-05T00:16:46Z,ok. i am using java bindings.thanks again for your quick help.on feb 5. 2014. at 2:14 am. bootstraponline notificationsgithub.com wrote:what selenium bindings are you using? they should have some way of calling page_source.—reply to this email directly or view it on github.,neutral
appium/appium,selenium,2014-02-13T14:00:43Z,also. just in case previous post was missed...i am using selenium with c#. real android device connected. (galaxy). appium. and windows 7 os on computer. thanks,negative
appium/appium,sauce,2013-11-18T18:20:11Z,dylanlacey and rossrowe would you guys mind checking on the status of sauce ruby and java examples and add pass/fail reporting if necessary? i'll fix the javascript examples. penguinho maybe you can do c#. then i think we should be good.,positive
appium/appium,sauce,2013-11-19T20:16:16Z,add pass/fail status reporting to sauce node examples,neutral
appium/appium,sauce,2013-11-19T20:26:02Z,:+1:,neutral
appium/appium,sauce,2013-11-25T16:58:51Z,we should probably track it on sauce then. and yeah. right now there's no way to get the appium rev from sauce. the easiest thing to do would probably be to actually log the appium welcome message. which has the active git commit in it.,positive
appium/appium,sauce,2013-12-09T23:12:56Z,update sauce android example to not be dependent on driverblock,neutral
brunch/brunch,mocha,2012-11-13T14:14:31Z,i've been getting this problem intermittently too. sometimes is works fine. sometimes zero tests. sometimes i get errors saying that some of the scripts are not available in the mocha test run. all this has started happening and getting worse as the project i'm working on grows in size.what actually happens is that 'file_list' triggers it's 'ready' event multiple times. so the directories are scanned for files as they should be. what's supposed to happen is when the files are all added. there's a gap bigger than 65ms. the file list. triggers a 'ready' event. the code gets compiled and the tests are run.occasionally for me there will be a gap bigger than 65ms between files being added before they are all added. so if there are 300 files. maybe a 'ready' event gets triggered after 200 of them. which causes the compile. and the tests to be run when not all of the code files are included.so that's the problem. i'm not sure about the best way to go about resolving it.allowing the reset_time to be configured would probably be quickest. but that is a work around.altering the way the file system is scanned so that it explicitly walks every sub directory before triggering a 'ready' event the **first time** it runs (but sticking with the reset_time for watching) seems like a better solution. so maybe a change to chokidar so it can say when all the files are initially found.what are your thoughts paulmillr ?edit to add that this isn't a problem when running the project up in a browser. even if the first compile doesn't include all the files there will be another one just after which probably will. if i understand it correctly doing brunch build without a watch should have the same problem. but i've never noticed it.,negative
agda/agda-stdlib,standard,2017-09-11T14:34:23Z,please keep in mind that next time it would be different if the different branches of agda require different branches of the standard library.,positive
babel/babel,mocha,2015-05-27T09:45:40Z,sebmck : i know that the issue for babel itself is solved. but how did u end up solving the problem in general? (i am trying to debug some mocha tests),negative
babel/babel,mocha,2015-05-27T09:50:56Z,cr0ck : could you please specify slightly more detailed how the working setup now looks like?i have tried with `mocha --compilers js:babel/register` as well and the sourcemaps don't seem to work.now i have copied your file. but how am i telling mocha to `read it` before the tests?,negative
babel/babel,mocha,2015-06-05T07:39:47Z,how are you running `mocha`?,neutral
jpuri/react-draft-wysiwyg,eslint,2017-07-02T15:05:05Z,the pr fixes all exiting eslint issues in the project.,neutral
angular/angular-seed,karma,2013-12-10T22:37:46Z,i too was getting the "no provider for framework:ng-scenario!" error.   i had to add "karma-ng-scenario" to the plugins section of the config file:plugins : [                    'karma-junit-reporter'.                    //'karma-chrome-launcher'.                    'karma-phantomjs-launcher'.                    'karma-jasmine'.                    'karma-ng-scenario'                      ].,negative
jshint/jshint,jshint,2012-09-20T09:22:24Z,chokes on comma operator. var a = ("hello". "there");a; // "there"jshint says:expected ')' to match '(' from line 1 and instead saw '.'.,neutral
jshint/jshint,jshint,2012-09-20T19:10:42Z,yeah. this is a known limitation of our current parser. it works fine in next tree but for this one—i'm waiting for the patch from someone.,positive
jshint/jshint,jshint,2012-09-26T15:29:15Z,`laxbreak` is not particularly granular. how do i discriminate against comma-first without submitting myself to harassment about what goes on within my parentheses?other than using jslint. that is.,negative
jshint/jshint,jshint,2012-09-26T21:49:37Z,i just realized this as i was perusing the unit tests. however. my prior point still stands:> even if the situation were reversed and we used `event` without using `ui`. it is probably best to still have both declared in the method signature. so you can tell at a glance what sort of method it is.i think this is a fair claim; if you have a whole bunch of callbacks and some of them look like `function(event)` while others are `function(event. ui)` because they happen to use `ui`. the inconsistency is confusing: they're all definitions of the same callback. so they should really all have the same method signature.jshint supports the use case of `function(event. ui){ return ui.whatever; }` because of syntactic happenstance. but a better reason is that all method signatures should have the same method signature. which would support `function(event. ui){ return event.whatever; }` as well.,neutral
jshint/jshint,jshint,2012-09-28T19:08:52Z,please create this ticket in `jshint/node-jshint` repo. thanks!,positive
jshint/jshint,jshint,2012-10-01T18:07:45Z,i'm with axkibe on this. i would love to be able to warn about unused `var` declarations while ignoring function arguments.,positive
jshint/jshint,jshint,2012-10-08T17:58:32Z,`latedef: true` rather than false.your code passes fine:```/*jshint strict: false. latedef: true*/(function(){  var foo = { bar: function() { baz(); } };  function baz() { }  foo.bar();  baz();}());```,negative
jshint/jshint,jshint,2012-10-09T14:33:38Z,undetected syntax failure when ending a line with a comma. the following code snipet passes jshint. but doesn't execute!``` javascriptfunction swap(a. b){  "use strict";  var c = b;  b = a.  if (b)    a = c;  return a;}swap(10.20);```,negative
jshint/jshint,jshint,2012-10-10T13:21:44Z,for ... in. is it possible to make the follow code segment pass jshint with forin turned on. since it's just a matter of coding style?var o = {}. p. a = [];for (p in o){  if ( !o.hasownproperty(p) )  {    continue;  }  a.push(p);},neutral
jshint/jshint,jshint,2012-10-11T12:05:35Z,ah. sorry. it seems jetbrains ides ignores this particular option.,negative
jshint/jshint,jshint,2012-10-12T04:33:37Z,reopening since next repo was merged back into this one.,neutral
jshint/jshint,jshint,2012-10-12T04:50:28Z,.jshintignore slash differences on windows. the format for path separator in windows is unfortunately \. as opposed to unix's /. so unfortunately you need to duplicate all .jshintignore definitions at the moment.,negative
jshint/jshint,jshint,2012-10-12T04:52:47Z,input via stdin. (op: hallettj)it would be super useful to me to have an option for jshint to accept input from stdin instead of from a file input. the use case that i have in mind is taking a text buffer from an editor. piping it to jshint. and parsing jshint output to highlight errors in the editor.my suggestion is to follow the unix convention where if a given file path is a dash (-) then the program reads from stdin.,positive
jshint/jshint,jshint,2012-10-12T04:54:45Z,should throw exception when given file extension that will not be checked. example:```jshint foo.js bar.txt```it will silently skip bar.txt unless the extension is explicitly specified. this is unexpected.,neutral
jshint/jshint,jshint,2012-10-12T04:55:23Z,handle "extension-less" files.. use case:```jshint jakefile bin/node_script```there is currently no way to automatically check a file with no extension.,neutral
jshint/jshint,jshint,2012-10-12T04:57:31Z,fail on bad config. (op: miohtama)jshint should abort as error if- config file does not exist- config file is not valid jsonnow it silently ignores config. causing confusion when config flags are not effective.,negative
jshint/jshint,jshint,2012-10-12T05:00:15Z,include ignores in `.jshintrc`. (op: necolas)keeping all the relative configuration in a single file would be useful. it should also make it easier for other tools. like grunt. to more easily hook into the pre-existing ignores in a .jshintrc.,neutral
jshint/jshint,jshint,2012-10-12T06:46:01Z,path to jshint inside wsh.js seems wrong. when working with the wsh.js of jshint. the path pointing to jshint seems to be wrong. by removing src in the path. i am able to runc:>cscript src/platforms/wsh.js [paht to my js files]otherwise i get an error "could not find jshint.js",negative
jshint/jshint,jshint,2012-10-12T08:05:58Z,after some investigation i found the source of the warnings. it was in the reporter:```var globals = result.implieds;if (globals) {  globals.foreach(function (global) {    for (var line in global.line){      console.log(        global.line[line] + ': \'' + global.name + '\' is an implied global variable.'      );    }  });}```so jshint does not warn. but treats and reports them as implied gobal variables when they are not,neutral
jshint/jshint,jshint,2012-10-13T17:46:17Z,'undefined' guards on non-local variables should not trigger "implied globals" warning. i find myself using the following idiom a lot:```if(typeof exports !== undefined) {    exports.foo = "bar';}```clearly. if exports isn't defined locally. then exports is being used in a global context.  jshint should treat exports as if it is defined within that block.i'm aware of the workaround but this is a specific thing that should be handled by jshint without me having to give hints,neutral
jshint/jshint,jshint,2012-10-13T18:00:12Z,the problem is that you have to run `node make.js build` first and then run `jshint-wsh.js` from the dist/ directory. however. now that i'm thinking about it—if you're using wsh you probably don't want to use node so the first step becomes a problem.,neutral
jshint/jshint,jshint,2012-10-13T18:02:41Z,but it is an implied global. isn't it?,neutral
jshint/jshint,jshint,2012-10-14T14:58:14Z,it is a global but it's not clear to me if it makes sense to treat it in the same way as other implied globals.  the guard signifies that you are aware that it is defined. regardless of where it is defined (local or global scope). which is far different from blindly using a variable.,negative
lykmapipo/kue-scheduler,mocha,2016-07-13T18:38:55Z,multi process scheduler. firstly: did a simple clean up of tests so they pass 90% of the time.  -- there seems to be a situation with mocha where the connection to redis can be closed and an event fire. which causes tests to fail that i did not resolve.secondly: added redlock around the 'every' and _onjobexpiry to force only a single worker that gets the key expiration method to schedule the next run of the job. this may need an improvement / modification for clustered redis scenarios. as redlock needs to know all of the redis servers it needs to get quorum from on a lock.,neutral
lykmapipo/kue-scheduler,mocha,2016-07-14T20:21:12Z,this should resolve #24 and #21,neutral
angular/angular.js,jasmine,2013-11-25T18:22:09Z,indeed. to those of us who do test-first development. the quality of errormessages in jasmine are essential to efficient development.  remember. wecan't write a line of production code until we get a failing test.  whenmany of our non-matcher messaes are all "attempted to assign to readonlyproperty." it puts a huge crimp in our work. particularly at the outsetwhen most messages are non-matcher errors.,negative
angular/angular.js,standard,2015-06-30T15:19:35Z,integration with handlebars. tell me how i can transfer the data to the handlebars?  .... generally i am interested in replacement for the standard templating ...,positive
angular/angular.js,standard,2015-07-13T19:29:33Z,we need to have a configurable `csp` sniffer value. i see that there are four options:1) different builds of angular for different csp configurations2) configuration via the value of the `ng-csp="..."` attribute3) configuration via new directives. e.g. `ng-csp-no-unsafe-eval` etc4) configuration via standard csp meta tags. e.g. `<meta http-equiv="content-security-policy" content="style-src \'self\'>`i would like to use the last one because. a) it doesn't require multiple build files. b) it is a standard way of specifying csp directives anyway. and so would make sense to someone reading the html who doesn't know about angular.what do people think?,positive
angular/angular.js,standard,2015-07-15T08:27:07Z,fix: parsekeyvalue function does not allow additional equals signs. in some cases people will not follow all url standards and may have unescaped = characters in their get parameter values. currently $location will not parse them correctly (or rather too correctly) and in combination with the routing will make a pushstate that removes them from the url.my proposed fix will just join everything after the key back together with the '=' character it is split by before.,neutral
angular/angular.js,standard,2015-07-15T08:31:26Z,well i guess the build failing wasn't rly my fault.,negative
angular/angular.js,standard,2015-07-15T13:37:37Z,i am a bit torn about this.on the surface don't really like this idea since we are undermining the standard.but then again i see that accepting `=` chars after the first char is not going to break valid fully encoded url query strings.while i can see that it would make life much easier in the cases where `=` characters were inadvertently un-encoded. it is a special case. what happens if there is an unencoded `&` in the value?,negative
angular/angular.js,standard,2015-07-15T18:59:05Z,if there is an unencoded & in the string. something is rly wrong and that can't be solved. the case i needed this for are base64 encoded strings.,negative
angular/angular.js,standard,2015-07-15T23:18:32Z,even when i agree with petebacondarwin that this does not follow the spec. the behavior in the pr is how most servers handle unencoded `=`,neutral
angular/angular.js,standard,2015-07-16T18:23:18Z,ok. if lgalfaso is happy then i am happy. i think we can improve the algorithm and then land this.,positive
assemble/assemble,mocha,2013-05-24T18:45:28Z,doowb my suggestion is that we change the output to _nothing_ instead of a dot for now. so that it's not broken and arkkimaagi can do what he is describing without problems (right?). that way this: ```href="{{root assets}}img/apple-touch-icon-57-precomposed.png"```would return:```href="img/apple-touch-icon-57-precomposed.png"```instead of:```href=".img/apple-touch-icon-57-precomposed.png"```> to add actual unit tests to this. would take some more refactoring since it would require pulling the asset path calculation out into a utility function that can be tested.yeah. i think this will be good when you can get to it. and it really should be done for all of the pre-defined variables in assemble. i started preparing some nodeunit and mocha tests yesterday in anticipation of this.,neutral
eventbrite/britecharts,eslint,2017-10-13T21:56:51Z,add eslint check to demos serve task. <!--- provide a general summary of the issue in the title above -->## expected behavior<!--- if you're describing a bug. tell us what should happen --><!--- if you're suggesting a change/improvement. tell us how it should work -->we should not allow contributors to push when the eslint rules are being broken.## current behavior<!--- if describing a bug. tell us what happens instead of the expected behavior --><!--- if suggesting a change/improvement. explain the difference from current behavior -->right now. it is codeclimate who is showing the issues.## possible solution<!--- not obligatory. but suggest a fix/reason for the bug. --><!--- or ideas how to implement the addition or change -->adding an eslint check on our webpack setup. the same way we are doing in britecharts-react.,neutral
summernote/summernote,karma,2015-08-24T17:59:12Z,use karma for tests instead qunit,neutral
summernote/summernote,karma,2015-08-25T01:27:30Z,outsideris :+1:,neutral
DefinitelyTyped/DefinitelyTyped,standard,2016-01-07T15:22:14Z,i'm just explaining the reasoning behind vvakame's comment. because you expressed confusion. maybe this is a problem that has already happened on definitelytyped. i don't know. but it seems to be a standard so far too match 1:1 with the package names on npm. it has nothing to do with electron. specifically.,negative
DefinitelyTyped/DefinitelyTyped,standard,2016-01-11T18:40:30Z,failing code: ```reactrouter.match({ routes. location }. (error. redirectlocation. renderprops) => {    var element = react.createelement(reactrouter.routingcontext. renderprops);}```which is pretty standard code with react-router. but currently fails (as `renderprops : matchstate`. but `routingcontext : react.componentclass<routingcontextprops>` and `routingcontextprops` does not extend `matchstate` and instead just implements the same signature.note function definition for createelement is:```function createelement<p>(        type: componentclass<p> | statelesscomponent<p>.        props?: p.        ...children: reactnode[]): reactelement<p>;```,negative
Cloud-Automation/node-modbus,standard,2016-11-22T09:32:49Z,using javascript standard style.. using javascript standard style to have a common code format. i leave this here for about a week or two. please make comments and then i will update this pull request with new formatted files.,positive
Cloud-Automation/node-modbus,standard,2016-11-22T11:14:49Z,wow that was quick :-d,positive
Cloud-Automation/node-modbus,standard,2016-11-22T13:53:50Z,omg... i used to use google style. but at least it is consistent :),positive
Cloud-Automation/node-modbus,standard,2016-11-24T10:37:56Z,see #92,neutral
Cloud-Automation/node-modbus,standard,2016-12-02T10:54:53Z,my preference would be to standardise on the eventemitter behaviour. however. you could argue that since errors are not necessarily fatal (due to automatically reconnecting) it might be valid not to throw by default.if your preference is to keep the current behaviour i'll go with that. maybe something like:"unlike node's eventemitter. errors will not be thrown if there are no error listeners added".to be honest it should probably be noted in the readme either way what the default error behaviour is.thanks.,negative
Cloud-Automation/node-modbus,standard,2016-12-08T10:19:01Z,hey superjojo2001.do a `npm test` before you commit something. this way you can be sure travis won't complain. in your case you forgot to apply the standard javascript style. install standard (`npm install -g standard`) and execute `standard` in the projects root folder. a simple `standard --fix` will fix most of the code style errors.you can find more information about the javascript standard code style [here]( be great if you provide some tests for your additions!,positive
