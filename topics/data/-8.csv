bower/bower,mocha,2012-09-10T17:33:52Z,likely due to something that was already failing [**1) should resolve json dependencies**]:> mocha -r spec -t 10000 --grep packagethe suite i added to should run successfully:> mocha -r spec -t 10000 --grep infounfortunately. there is no way to tell travis that it should only run this delta; further. i did look at the failing test under the "package" suite but was unable to decipher what it was trying to convey; thus. i didn't go any further in trying to fix it.,negative
redux-saga/redux-saga,eslint,2016-11-29T05:25:01Z,docs cleanup: removes reference to unused import . small docs eslint-ish fix. the example code was importing `fork` but the code isn't referencing it.,neutral
jprichardson/electron-mocha,mocha,2015-12-28T19:37:44Z,examples of tests written to leverage electron-mocha. helloit would be great if this project had an `examples` folder containing 2 tests (one for the main process. one for a renderer process) for testing a fictional electron demo app.at the moment i'm a bit stuck in my tests. not knowing how to go further than just testing pure commonjs modules. that is all what is not specific to electron. some things i would like to do:- test a renderer process html view- test a renderer process javascript- show a menu and activate a menu itemthanks a lot,neutral
jprichardson/electron-mocha,mocha,2015-12-31T11:15:46Z,thanks jprichardson for reopening the issue. thanks tscanlin for publishing mocha-electron. i'm going to test mocha-electron too and will report here asap!,positive
jprichardson/electron-mocha,mocha,2016-01-05T07:18:30Z,thanks for the update madarche. and i'm glad you find it useful for websites and web apps. it wasn't intended to be used for electron apps so i would keep using electron-mocha for that as you said. it sounds like both of these tools have their place.,positive
jprichardson/electron-mocha,mocha,2016-01-07T12:08:35Z,since electron-mocha is console focused. maybe it's better to write a separate tool just for that :laughing:,positive
jprichardson/electron-mocha,mocha,2016-01-08T15:35:08Z,rgbkrk i'm sorry the repository you're mentioning doesn't contain the answers i'm looking for. please read my pr if you are interested in what i would like to be able to do.,positive
jprichardson/electron-mocha,mocha,2016-01-08T15:49:59Z,that's ok! your example with tests makes pretty clear sense.,positive
ramda/ramda,jshint,2014-08-27T21:07:10Z,i propose moving all these to a `.jshintrc` for editors that support gutter,positive
ramda/ramda,jshint,2014-08-27T21:38:28Z,> i propose moving all these to a `.jshintrc` for editors that support gutterworks for me. though this can be done in a separate pull request. (i'm not familiar with grunt conventions. but i got the impression it's common to put everything into the gruntfile.),negative
ramda/ramda,jshint,2014-09-02T19:15:14Z,> then it could just become part of our travis build. too...it already is. assuming travis runs `npm test` (which is now an alias for `make && grunt test`).> there are already too many tools flying around.i agree. grunt involves so many moving parts. though. to integrate jshint in a makefile. for example. one would something along these lines:``` makejshint = node_modules/.bin/jshintlib = $(shell find lib -name '*.js').phony: lintlint:    $(jshint) -- $(lib)```with grunt. one can't interact with jshint's command-line interface. so it's necessary to install a package which wraps jshint and configure in it the gruntfile. to me. this is avoidable complexity.> i bet travis has `make` in its environment. but joe user may not. esp. if he is using windows (god help him).travis does have make installed. but your concern about windows users is valid.,negative
uber/uber-ngen,jshint,2014-07-01T08:44:13Z,set shadow to outer. i ran into this bug 10 minutes ago``` jsif (opts.latetimeoutlogger) {    opts.logger = {        fatal: function fatal(message. opts. cb) {            // simulate a really slow logger            settimeout(function delay() {                cb();            }. opts.loggertimeout * 2);        }    };}```here i set `opts.logger` to a function that has a parameter named `opts`. the function parameter of the fatal method shadows the outer `opts` and thus referencing `opts.loggertimeout` is `undefined` which means passing `nan` to `settimeout` which is much fun.jshint has a feature called `"shadow": "outer"` which is disabled by default. if you opt into this it will complain about all shadowing of variable names defined in outer scopes.this means the above code is now a static bug and has to be refactored to `fatal(message. options. cb)` or something.this is a great poorly documented feature. (only documented in the unit tests -.-)cc dfellis sh1mmer mlmorg matt-esch,negative
alfredkam/yakojs,mocha,2014-06-27T10:21:30Z,cool. may be start with testing using jasmine / mocha?  i can put together an example later. you then can familiarize through it?,positive
airbnb/javascript,eslint,2015-08-21T16:30:50Z,justjake any plans to bump/republish the eslint-config-airbnb in npm?,neutral
airbnb/javascript,eslint,2015-08-21T21:26:47Z,justjake that's sweet! thanks for the information!,positive
airbnb/javascript,eslint,2015-08-22T21:23:17Z,i'm seeing the same issue. is this set of rules intended to be used on top of e.g. `eslint:recommended`. or is it supposed to be standalone?,neutral
airbnb/javascript,eslint,2015-08-24T21:57:02Z,by that. do you mean merge in the walmart configs into this repo? or do you suggest switching to `eslint-config-defaults/configurations/airbnb` entirely?,neutral
airbnb/javascript,eslint,2015-08-24T23:19:27Z,i mean removing the js files in eslint-config-airbnb and replacing them with a copy of the files in eslint-config-defaults/configurations/airbnb,neutral
airbnb/javascript,eslint,2015-08-25T08:14:39Z,hzoo hshoff sounds great!,positive
airbnb/javascript,eslint,2015-09-01T01:28:57Z,adambrodzinski i think it's easier to learn what the language means by `const` than to create a linting infrastructure that understands `const` to mean something different. i think you might be able to write your own eslint rule for this; i suggest looking at the rules that forbid using certain things (like the no-eval rule. or the no-window-stuff rules) some of which look at how things are reassigned in the scope.sorry i can't help more =/,neutral
airbnb/javascript,eslint,2015-09-01T06:18:21Z,babel-eslint has it.,neutral
airbnb/javascript,eslint,2015-09-04T16:36:02Z,make eslintrc dependencies copy-pasteable. saves me **minutes** every month,positive
airbnb/javascript,eslint,2015-09-10T12:57:39Z,this was a while ago. so i'm not sure exactly what it as. but if the info parameter was extra meta data. it might not be needed.,negative
airbnb/javascript,eslint,2015-09-14T05:47:03Z,i agree -- if you submit a pr dropping this rule i'll happily merge it.,positive
airbnb/javascript,eslint,2015-09-14T07:20:24Z,please add the id-length documentation url to your pr as a comment. following the style of the rest of the eslintrc.,neutral
airbnb/javascript,eslint,2015-09-14T14:54:42Z,remove jsx from eslint-config-airbnb/base. hi.jsx was present as an `ecmafeature` in base. so i moved it to the react-specific settings. also. because i would have had to add another loop for merging `ecmafeatures`. i decided to just use lodash to merge base and react. all the tests (still) pass.,neutral
airbnb/javascript,eslint,2015-09-14T14:58:57Z,justjake: i actually opened two. because i noticed that something was messed up. #506 and #507 thanks!,positive
airbnb/javascript,eslint,2015-09-16T07:01:51Z,i'd prefer to not have any dependencies -- just do the merge manually; it's fine that way imo.,neutral
airbnb/javascript,eslint,2015-09-16T09:14:13Z,go ahead and make it explicitly 100 chars in your markdown update and in the eslintrc. we'll let the pr sit here for a day or two after that and then i'll merge after consensus/people forget,neutral
angular/angular-phonecat,karma,2013-08-29T23:03:45Z,- check that you have the proper `karma.conf.js` file- note the `karma.conf.js` file's location- check path to `test/unit/*` files ... it could be in the current directory or parent directory. depending on where you place the configuration file.,neutral
angular/angular-phonecat,karma,2013-09-03T05:41:12Z,the commit includes a vim backup of the config file karma.conf.js~.what's wrong with issue #63 ?,neutral
velesin/jasmine-jquery,jasmine,2013-01-16T18:49:05Z,jasmine-jquery requires window.$ to be jquery. i work on an application that (for legacy reasons) uses both prototype & jquery.  window.$ is prototype.   i would like to still be able to use jasmine-jquery for tests.  jasmine-jquery should use jquery to refer to jquery. not $ (or be wrapped in a function that allows $ to be used only locally within that scope).,neutral
velesin/jasmine-jquery,jasmine,2013-01-16T18:49:55Z,it seems like the changes in pull request #58 will address this. so if that could be merged in and released. it would be a huge help to me.,positive
velesin/jasmine-jquery,jasmine,2013-01-21T10:12:46Z,yeah. i have issues with the complexities introduced by that pr. i may take a crack at this soon with a simpler implementation.,neutral
silexlabs/unifile,eslint,2016-09-06T16:12:24Z,fixes lint. - uses eslint 3- integrates into codeclimate- updates readme- adds changelog,neutral
videojs/video.js,standard,2015-12-17T21:26:11Z,hello could you open this pr against master and add some tests? thanks!,positive
videojs/video.js,standard,2015-12-18T15:13:08Z,rtmp live timed metadata. populate rtmp oncuepoint data to a in-band-metadata text track using webvtt standard.,neutral
videojs/video.js,standard,2015-12-18T15:18:43Z,i open this pr against master branch as forbesjo requested.i couldn't figure out any test though. since it's a feature for live streams i don't know how i might test it. i could make flash tech to trigger a fake 'cuepoint' event and ensure the metadata texttrack is created. but. in my opinion. i would be testing eventemitter and texttrack rather than cuepoints feature its self. right? any suggestions?,negative
videojs/video.js,standard,2015-12-29T10:21:35Z,thanks hartman this is what i have done as a temporary fix but it would be nice to have audio to be wrapped inside audio tag as a proper standard :-),positive
EvanHahn/HumanizeDuration.js,standard,2015-05-10T17:29:00Z,so would the api look something like this?``` jshumanizeduration(12345. {  language: "zh".  locale: "cn"})```and is there a standard for these pairs? i couldn't find `zh_cn` or `zh_tw` in any official iso standard.,neutral
docpad/docpad,standard,2013-09-24T19:46:34Z,sidenote:first just scratch all the stuff about repository awareness etc.  these were targeted more at the thought of docpad being something like the eclipse help system where you can drop in documentation plugins. and have them be integrated into the help system via extension points.  along the same lines i was thinking that people would have separate docpad documentation projects. that could later be assembled into a larger "delivery unit" by simply dropping them into the repository.  i think this may be interesting down the line. but for starters just using a standard docpad project as the "repository" is simple and possibly the best solution.end sidenoteyes - correct i'd like to be able to change directory and file names and file location without causing url breakages.  off the top of my head link needs to:find all the documents that need to be generatedcheck for url "collisions"check for link id "collisions"create an in memory dictionary of the meta data provided link id to document urlresolve all link tags during document generationif i understand right 593 needs to:on each change to a file's url- save the new url to a dictionary that also contains the old url- redirect the consumers of the old url to the new urli think 593 would benefit from link or geturl type functionality.  if i understand correct the "slow moving article author" would:- update the title >> triggers update to url.  so if your original example goes from:  `[my referenced doc](/posts/post1)`  to   link(uniqueid)  then  [my referenced doc << gets automatically updated along with the corresponding new url on regeneration).,neutral
docpad/docpad,standard,2013-10-11T01:11:29Z,i think this should probably be implemented on a per plugin and as needed basis. it is too early yet to be able to justify the value of such overhead in the core for a use case that we have experienced once. however. let's keep this here as a reminder for the future in case other plugins eventually require this.one way to implement this into plugins in a standardised way would be to allow us to specify our own collections for use in plugins. rather than plugins specifying their own or creating their own. i believe this is what the latest pull request for the dateurls plugin does. it will be cool to see how this technique developers over time.will close for now. but happy to keep the discussion going. and re-open once we have enough value to implement.,positive
sequelize/sequelize,eslint,2016-08-27T18:28:28Z,more eslint fixes. #6436 did not include the tests.it's 95% `eslint test --fix` and 5% manual fixup where jshint was failing for no reason afterwards.before:```13067 problems (8871 errors. 4196 warnings)```after:``` 9417 problems (7356 errors. 2061 warnings)```,negative
sequelize/sequelize,eslint,2016-09-05T19:37:34Z,i'm not going to argue with the output of `eslint --fix`. so you are free to commit those directly to master :),negative
sequelize/sequelize,eslint,2016-09-07T07:16:50Z,i would leave the eslintrc in. sometimes you step into library code with a debugger and it prevents ealing from putting red swiggles everywhere if your project is using a different style. otherwise. lgtm.,neutral
sequelize/sequelize,jshint,2015-06-24T19:02:23Z,shakdoesgithub i believe we have an exception in our .jshintrc file for that case - chai assertions have a pretty weird syntax some times :),positive
thoov/mock-socket,mocha,2015-05-13T08:31:25Z,nicholasjstock i find console output in your example quite correct. all clients connected to the same server should receive the message that server sends into connection. you didn't specify the client you want to send you message to. so all of them receive it.,neutral
thoov/mock-socket,mocha,2015-05-13T13:05:10Z,vlizard the code that was posted is not broadcasting. so the output is not correct. those messages are being sent to a specific socket (i.e. ws.send("msgsss") is sending a message through ws. not to all clients).,neutral
nightwatchjs/nightwatch,mocha,2015-02-03T19:28:04Z,grep for specific tests within a file. it'd be nice to just like mocha does to run one test within a test file instead of running the whole file and/or commenting others out.,positive
formly-js/angular-formly,coveralls,2014-08-22T21:40:47Z,you might also want to check out coveralls.io . like travis it's free for open source projects and provides code coverage analysis. e.g. how much of the code is actually tested. haven't used it for angular projects but it should work.,positive
formly-js/angular-formly,coveralls,2014-08-22T21:45:00Z,integrate coveralls.io. a suggested in #73,neutral
linkedin/dustjs,jasmine,2012-05-28T16:24:22Z,duplicate file removed. dustexamples.. now all tests (old dust tests and jasmine) run using the same file.,neutral
linkedin/dustjs,jasmine,2012-06-07T13:26:06Z,i saw the pull request. i think that the code is good but i would like to understand how it could be useful. it would be a very good idea to add some jasmine test.,positive
linkedin/dustjs,jasmine,2012-06-07T14:52:18Z,> i would like to understand how it could be useful.did you see the example i added?``` jsdust.stream('template_name').pipe(response)```> it would be a very good idea to add some jasmine testjairodemorais i wrote the tests too. look at the diff.,neutral
linkedin/dustjs,jasmine,2012-06-07T16:06:34Z,kilianc .i saw the test that you created but you should add some jasmine test.,neutral
linkedin/dustjs,jasmine,2012-06-14T02:01:23Z,thanks for your inputs oleics. we want to have full support for node-js since we use this more in the future as well.i think jairodemorais mentioned jasmine. since we are trying to use one test suite i.e jasmine going forth and deprecate the otherwe will try to add it ourselves and a merge your request.,positive
linkedin/dustjs,jasmine,2012-06-14T13:37:22Z,kilianc . the readme in the test folder has instructions for how to jasmine.,neutral
jugglingdb/mysql-adapter,mocha,2013-04-18T15:41:52Z,since there's no timeout param to mocha test frequently fail somewhat randomly.. at least on my rather sad dev box many mysql ops (particularly creating tables) can take quite a bit longer than 2 seconds. accordingly i've added the mocha '--timeout' parameter and set it to 15000. which seems to pass consistently on my dev box.,negative
angular/zone.js,jasmine,2016-04-18T21:39:42Z,feat: add a zone spec for fake async test zone.. this implementation is forked from the fake async from angular 2 and adds the following1) implements own scheduler queue that doesn't depend on the jasmine implementation of a scheduler queue.2) handles errors in timer/microtask callbacks better so that pending timers are removed properly on error (no need for a clearpendingtimers at the end of a test handling errors). the queue processing is stopped after the first error and can be restarted.3) throw an exception if a xmlhttprequest is used in a fakeasync test - useful for avoiding cases for ex. someone uses the online template compiler in a fakeasync test but forgot to use the template cache and ends up doing a xhr in the test.,negative
angular/zone.js,jasmine,2016-04-18T23:42:27Z,the travis error seems to be legitimate.,neutral
angular/zone.js,jasmine,2016-04-19T00:43:19Z,looks good overall!,positive
angular/zone.js,jasmine,2016-04-19T03:35:06Z,travis error - i need a better way to check whether the macro task is a xhr related call.,negative
angular/zone.js,sauce,2014-07-12T00:18:43Z,chore: run tests on sauce labs. **wip** need to fix some tests. and also handle reverse-proxying http requests back to karma maybe :/,negative
angular-fullstack/generator-angular-fullstack,mocha,2013-12-05T12:35:22Z,great! yes this was my thinking too. the separations should be on the type of technology in my honest opinion i.e. server or client.... people will probably swap them out. i think its even possible to use mocha with angularjs on the client so if we had separation via "type of testing framework" then technically we might mix both client and server tests inside the mocha directory. which wouldn't be good.also another thing is that you may have developers working on just the server and others working on just the client.,positive
angular-fullstack/generator-angular-fullstack,karma,2013-11-21T08:33:08Z,your generator-karma is outdated. you'll need to update it. along with generator-angular. to resolve the conflict.,positive
angular-fullstack/generator-angular-fullstack,karma,2013-11-27T21:30:20Z,feat(test): add testing support for server.. add mocha test folder for testing server code. `grunt test` would run through all the mocha tests in addition to the client side karma tests. could be integrated with server side generators for automatically generating routes with tests.,positive
angular-fullstack/generator-angular-fullstack,karma,2013-12-05T05:09:58Z,i +1 this. with regards to grunt test running through the both client  and server tests. maybe it would be better to have different tasks attack client / server tests separately and one task to attack both?,negative
angular-fullstack/generator-angular-fullstack,karma,2013-12-05T05:28:24Z,agreed. maybe grunt test. grunt test:server. grunt test:client?,neutral
angular-fullstack/generator-angular-fullstack,karma,2013-12-05T05:33:46Z,yes. sounds logical. grunt test to run all. and the others to concentrate on the specifics.,neutral
angular-fullstack/generator-angular-fullstack,karma,2013-12-05T12:31:38Z,sweet. i just found out that the test folder can be set from the bower file! so having a folder structure that's logical shouldn't be a problem.so now i'm just wondering what is more logical. client/server test folders or mocha/karma. i think that it might be slightly better to say client/server since someone might want to swap out the testing frameworks.,positive
angular-fullstack/generator-angular-fullstack,karma,2013-12-05T12:45:27Z,totally agree. that makes a lot of sense.,neutral
angular-fullstack/generator-angular-fullstack,karma,2013-12-15T21:14:03Z,would you mind putting the navigation controller in yourself and let me pull it in to my pr before? or should i just add one myself and you'll accept it? also. the karma task is currently not working for me. but i don't think it's from my changes...,neutral
angular-fullstack/generator-angular-fullstack,karma,2013-12-16T22:19:00Z,heyyy daftmonk thanks a lot. this will make it much easier. i've already pulled but i won't get too much done today. it's already late. i'll keep you posted tomorrow.regarding the karma thing. can you pull you latest and just generate a full app with it? on my machine this tells me this all the time:```$ grunt testwarning: task "karma" not found. use --force to continue.aborted due to warnings.```by the way. i think i've not even touched the `gruntfile.js`... can you confirm that?,positive
angular-fullstack/generator-angular-fullstack,karma,2013-12-17T23:11:41Z,daftmonk thanks for the hint. it seems that i was missing the "generator-karma" global installation. but i had no time testing it yet. one question for you though. any ideas on how we should best switch out "sign up" and "login" for "logout" when someone is logged in?also. i've kind of hacked the app.js main angular module routes configuration over an environment variable. feels dirty. but i've not seen any better way.i made a bit of progress today. but some todos are still missing:- auth controller in coffescript (will do when js is solid)- views for signup- logout button as always. i would love to get feedback on anything :),positive
gobblejs/gobble,mocha,2015-02-18T17:40:29Z,adding mocha within gobble. is there a way to run mocha tests within gobble? so a build would re-run tests when changes happened.,neutral
senchalabs/connect,mocha,2013-09-13T05:23:20Z,i'm lost. i'm also having trouble understanding that sentence. `npm test` works. maybe you wanted something more specific like being able to run the tests using `node` instead of `mocha`?,negative
cure53/DOMPurify,eslint,2017-05-15T18:42:17Z,i agree with the article and general mantra. i however don't feel adding webpack or rollup is the bulk of the work in this case. if you follow the pr on the matter it's also replacing jshint with eslint. while adding prettier as a config base and formatter. migrating a bit of library code while most importantly replacing the umd closure reliance of the library. i am happy to play and evaluate rollup vs. webpack as a tool in the end.,positive
heroku/heroku-kafka-jsplugin,standard,2015-12-04T13:47:22Z,standardize help text everywhere. - always say 'kafka'. not 'kafka' or 'heroku kafka' or 'the kafka cluster'- all commands that take a cluster argument have that in the examples- all commands that take a cluster argument just include  heroku_kafka_brown_url instead of using the haiku names.,neutral
webpack/webpack,uglify,2017-06-07T18:42:53Z,webpack-sources dependency in uglifyjs plugin need to be updated,neutral
webpack/webpack,uglify,2017-06-08T02:28:33Z,:+1: yes. you are right!i build my project without uglifyjs plugin， debug works for me.is there any good solution to the problem? or i have to study how ts/uglifyjs works together to generate sourcemap ...,positive
webpack/webpack,uglify,2017-06-19T19:41:05Z,confirmed. manually installing uglify-js 2 seems to fix the bug.,neutral
webpack/webpack,uglify,2017-06-19T19:56:54Z,confirmed  `npm i uglify-js2 -d` worked for me.  annoying that it's not in the documentation,negative
webpack/webpack,uglify,2017-06-19T19:59:34Z,looks like an oversight to me.i'd file a pr to add the dependency. but i suspect the dependency should be placed under `uglifyjs-webpack-plugin`,negative
webpack/webpack,uglify,2017-06-19T20:31:19Z,webpack-bot move to webpack-contrib/uglifyjs-webpack-pluginuglifyjs-webpack-plugin should have uglify-js as dependency,neutral
webpack/webpack,uglify,2017-06-19T20:31:22Z,<!-- identifier: moved-by-bot -->i've moved it to webpack-contrib/uglifyjs-webpack-plugin.,neutral
webpack/webpack,uglify,2017-06-20T10:57:58Z,i do actually not include any uglifyjs-webpack-plugin module. can this still be reason?,neutral
webpack/webpack,uglify,2017-06-20T17:18:43Z,not using babili and switching back to uglify fixes this.,neutral
webpack/webpack,uglify,2017-06-21T05:58:46Z,uglifyjs can't handle es6+ syntax.  success in webpack2 just because i translate es6+ all to es5,positive
webpack/webpack,uglify,2017-06-21T21:37:59Z,webpack-bot move to webpack-contrib/uglifyjs-webpack-plugin,neutral
acuminous/yadda,mocha,2014-12-10T08:23:11Z,hi brian.thanks for sharing. i love that you've "pimped" up yadda and it's great to hear of people using it in anger. mind if i add a link to your project from the yadda readme.md?```finally we also did detection of the final step having processed to post process the scenario (for cleanup) since we weren't able to find a better way to hook into that point in the processing.```yadda emits some events during its life-cycle. i'd be happy to add more if that would help.,negative
acuminous/yadda,mocha,2014-12-10T20:32:08Z,sorry missed your response. getting huge amounts of noise from my organisations github repos. did you resolve this? it looks very much like the yadda mocha plugin hasn't been setup correctly in your tests (hence why featurefile hasn't been defined).can you paste the code from /test/features.js?,negative
prebid/Prebid.js,standard,2017-04-11T22:04:03Z,closing this issue in-favor of the newly created #1086,neutral
prebid/Prebid.js,standard,2017-04-20T17:48:41Z,feature/editorconfig. ## type of change- [x] code style update (formatting. local variables)## description of changeadded an editorconfig file to help developers stick to your coding standards.,neutral
prebid/Prebid.js,standard,2017-04-25T13:29:44Z,happy to help but very confused on your question still! can you rephrase/be more concise? if you want adx reporting. this is available via your adx account (which can also be accessed via your dfp account per recent dfp updates)the metrics you are referencing are inherently flawed as far as accuracy and you should use the newer metric "ad server downloaded impressions" --- the others count impressions based on less accurate standards (they look at the <head> code and not the body or div tag of the dfp tag),neutral
prebid/Prebid.js,standard,2017-04-27T07:46:01Z,do you want me to give it a try with standardjs mkendall07 ?,neutral
prebid/Prebid.js,eslint,2017-04-27T17:38:46Z,i agree with dbemiller on this. can we commit the  `eslint --fix` changes. add exceptions for the ~300 existing errors and enforce strict checking in travis (add the `lint` gulp task into `run-tests`  which travis invokes). ?,negative
tjunnone/npm-check-updates,mocha,2014-12-08T05:07:12Z,no need to choose. just do something like `.split(/[\s.]+/)`.,neutral
tjunnone/npm-check-updates,mocha,2014-12-08T05:44:23Z,yes. of course! thanks. let's go with that.,positive
tjunnone/npm-check-updates,mocha,2014-12-09T19:54:53Z,thanks guys :-)),positive
vega/vega-lite,istanbul,2015-11-24T03:45:15Z,i read it and i'm still not sold.  the answer is dated.  if the tool isn't too hard to setup. i don't see why we should not use it. that said. i think it's a lower priority so let's ignore it for now.,negative
vega/vega-lite,istanbul,2015-12-07T20:06:03Z,add istanbul to deps.  so we don't have to ask people to install it globally,neutral
vega/vega-lite,istanbul,2015-12-16T19:02:04Z,pretty much done. the deepmerge rename is not really necessary and i don't want to do a big var -> let/const rename right now.,positive
pouchdb/pouchdb,jshint,2013-05-21T12:20:20Z,garrensmith thanks for this. the pr looks great. thanks for the test in there. agree with the functionalitycurrently its just failing linting. could you fix the lint error and ammend them to the previous commit? cheers (you can see the errors with $ grunt jshint or clicking 'details' above,positive
pouchdb/pouchdb,jshint,2013-05-21T12:46:13Z,sorry about that daleharvey. i've made the fix.maybe worth mentioned jshint in the contributors guide so you don't have to keep repeating yourself.,negative
mojotech/pioneer,selenium,2014-09-10T14:43:12Z,i can test too.  odd things going on when you try to load things on windows.  in environment.js  driver = require('selenium-webdriver');  $ = driver.promise;driver.promise is always null.  does the driver need selenium server running?  i tried running mine but it didn't seem to,neutral
mojotech/pioneer,selenium,2014-09-14T01:23:07Z,markalfred mind rebasing this sucker? sorry there was an issue with selenium-webdriver,negative
angular/protractor,jasmine,2015-07-23T21:21:32Z,i don't know if this is a good solution but i noticed some of the requests on my angular app took a bit longer than 30000ms. so i changed in the config file " jasminenodeopts:{defaulttimeoutinterval: 60000} " to be 60000ms. now it works perfectly and i don't get timeout errors.,negative
angular/protractor,jasmine,2015-07-27T21:28:35Z,switch protractor to minijasminenode2,neutral
angular/protractor,jasmine,2015-07-27T21:38:20Z,i signed it!,neutral
angular/protractor,selenium,2014-07-22T19:59:51Z,thanks for your contribution. but this isn't really necessary for debugging only - the user should already have some sort of driver and selenium server setup. this command. out of nowhere. is confusing and doesn't tell the user what it's actually doing.,positive
angular/protractor,selenium,2014-07-24T18:02:12Z,please consider posting questions like this on stackoverflow and tagging with #protractor and #selenium. i'm not sure what you mean by seeing duplicated code. so it might help to clarify that.,positive
angular/protractor,selenium,2014-07-28T20:20:36Z,juliemr i've made those adjustments according to your suggestions (and rebased the changes into a single commit),neutral
angular/protractor,selenium,2014-07-30T15:17:57Z,protractor hangs with (n) instances of webdriver still running. shutting down selenium standalone server.[launcher] 1 instance(s) of webdriver still runningshutting down selenium standalone server.[launcher] 1 instance(s) of webdriver still runningthis sat on our jenkins slave for 11 hours (overnight).  you can clearly see where it indicates it there is one instance. it is "shutting down..." but then there is still one instance.thoughts on how i can fix this so i can utilize the excellent sharding feature?,positive
angular/protractor,selenium,2014-07-31T18:11:33Z,webdriverjs package instead of selenium-webdriver. looks like selenium made total api refresh in webdriverjs —  there any plans to switch to this new package?,neutral
angular/protractor,selenium,2014-07-31T23:49:41Z,as far as i know. this is an entirely different "webdriverjs" which is not related to the official selenium webdriverjs bindings. we won't be moving over.,neutral
angular/protractor,selenium,2014-08-01T22:25:20Z,i haven't seen this before and unfortunately this log isn't enough information to figure out the cause. do you see this regularly? can you share your configuration file?,neutral
angular/protractor,selenium,2014-08-04T17:40:20Z,are you using a grunt adapter?,neutral
angular/protractor,selenium,2014-08-04T18:30:34Z,i'm guessing that has something to do with it. since your config looks fine to me (except for its lack of a capabilities object. which grunt protractor runner takes care of?). i'm not part of the grunt protractor runner dev team. so i'm not sure exactly how they're generating the config for protractor. can we open an issue with them?,negative
angular/protractor,selenium,2014-08-04T22:23:15Z,made the changes i mentioned and merged as 316961c6a5d7410d73a2784a9622b106008b0930,neutral
angular/protractor,selenium,2014-08-05T08:08:11Z,docs(debugging): add how to launch selenium,neutral
angular/protractor,selenium,2014-08-05T21:44:12Z,ok done :),neutral
angular/protractor,selenium,2014-08-06T00:33:33Z,mouse over show hidden element but when click got element not visible error. i'm using the action sequence to simulate mouse over.  then a hidden element is displayed. when click on it it will open a alert box for now.  i was able to click the hidden element after mouse over. a alert box pop up. but i also got unexpected alert open error in the console and the test stopped:......\protractor\node_modules\selenium-webdriver\lib\atoms\error.js:109  var template = new error(this.message);                 ^unexpectedalertopenerror: unexpected alert openany idea why i got such error?(sorry the issue is different now. but i can't seem to be able to edit summary title),negative
angular/protractor,selenium,2014-08-07T19:23:42Z,thanks for providing the example. i will look more into why it gave me an error when the alert box is open. i wasn't perform other action. just performed a click on the element though.,negative
angular/protractor,selenium,2014-08-08T17:55:22Z,disable timeouts in project configs for a couple more (days. weeks. months) until selenium releases the fix. temporary fixes are ok if they're actually temporary.,neutral
angular/protractor,selenium,2014-08-19T05:28:41Z,feat(webdriver-manager): ignore ssl checks if npm strict-ssl setting is false. allow ability to ignore ssl checks when downloading selenium and webdriver if the npm `strict-ssl` config setting is false.this was necessary so that downloading the chrome driver from  could work without forcing everybody not to use ssl.,neutral
angular/protractor,selenium,2014-08-19T05:37:10Z,with this. i reckon you could also download from selenium-release.storage.googleapis.com in https instead of http.,neutral
angular/protractor,jshint,2015-02-09T04:23:11Z,lgtm. looks like mostly trailing whitespace - unfortunately. looks like jshint doesn't check for this. so if we can easily add another tool like hank suggested that would be great.,positive
FormidableLabs/component-playground,eslint,2015-07-03T17:57:27Z,add .editorconfig. add an editor config to automatically fix some of the rules we define in eslint.,neutral
visionmedia/superagent,sauce,2014-05-15T22:53:22Z,found the secret sauce... posting as i am sure others may run into this at some point. adding an example to the docs would help too.```var fs = require('fs');var data = fs.readfilesync(filepath);  request(apiuri)    .post('/api/assets')    .set('content-type'. 'image/png)    .set('content-disposition'. 'attachment; filename='+filename)    .set('content-length'. data.length)    .send(data)    .end()```,neutral
wix/tspoon,karma,2016-05-04T17:49:47Z,upgrade karma deps. lodash. and github-markdown to latest,neutral
meanjs/mean,uglify,2015-02-09T09:40:44Z,grunt / gulp build. hi.in the grunt file. there is:grunt.registertask('build'. ['env:dev'. 'lint'. 'ngannotate'. 'uglify'. 'cssmin']);and in the gulp one:gulp.task('build'. function(done) {    runsequence('env:dev' .'lint'. ['uglify'. 'cssmin']. done);});is there any reason to set node_env to development before the build ? i don't think that node_env is used during the build process.,neutral
meanjs/mean,coveralls,2016-02-03T21:41:13Z,not so sure on codeship. i enabled code coverage based on coveralls.io.i think someone had some updates there.,neutral
meanjs/mean,coveralls,2016-02-14T11:03:40Z,codydaig the coverage we have now is only for server-side (afair but we can easily check by looking at the files on coveralls.io),neutral
DiUS/pact-consumer-js-dsl,karma,2015-01-06T13:47:08Z,add nodejs support. summary of the changes i made:- added nodejs support- updated the tests to be compatible with nodejs. they are now run in a nodejs environment as well as a browser environment to ensure compatibility is maintained- updated mockservice to make async http requests- no longer expose internal mockservice methods to external consumers to avoid confusion about what is api and what is not- refactored the low level http logic into mockservicerequests and http- removed unnecessary 'use strict' statements - only 1 is needed at the top of the distribution file- added more robust pact server spin up code to the gulp file - the previous code did not wait for the server to spin up before running the tests which caused timing issues in nodejs which runs the tests faster then karma doesi've never used gulp before so i may not have done things in the "gulp" way. i also had a lot of merge conflicts when rebasing against master so please check i didn't blow away anything accidentally.,negative
DiUS/pact-consumer-js-dsl,karma,2015-01-07T22:51:05Z,ta. will have a look at this tomorrow.,neutral
DiUS/pact-consumer-js-dsl,karma,2015-01-08T22:30:47Z,ok. whose should i merge first then?!,neutral
DiUS/pact-consumer-js-dsl,karma,2015-01-12T22:41:36Z,hi ben. just to summarise. i'm happy to merge this when we can work out a way to raise an error when verification fails. thanks for your work on this.,negative
DiUS/pact-consumer-js-dsl,karma,2015-01-13T12:37:22Z,bethesque i mistakenly thought if you give an error to jasmine's done callback it will fail the test. i have updated the tests and they fail when expected now.however upon reflection of this change i'm not happy with the way the error handling in the async world turned out. in the clean and setup stages of running the tests we don't have a way of communicating failure to the tests. so in this case i just throw the error. this is not a good thing to do as this is asynchronous code and we are in a new call stack so there is no clean way for the test to catch this and makes it hard to test the error handling. in the verify and write stages of running the tests we have the `testcomplete` callback so i pass the error object to that. this means the test needs to ensure no error was passed.i'm thinking we need to change the way errors are communicated back to the tests. but am not clear on the best way forward.some possible solutions i have in mind right now are:- pass errors generated during the clean and setup stages to the `testcomplete` callback. this means we have to execute the tests passed to the `run` function even though we know the pact mock server is not setup correctly.- create an api for allowing the tests to give us a function for the test results to be passed to. e.g.```      it("should say hello". function(done) {        helloprovider          .uponreceiving("a request for hello")          .withrequest("get". "/sayhello")          .willrespondwith(200. {            "content-type": "application/json"          }. {            reply: "hello"          });        hellpprovider.ontestcomplete(function (pacterror) {          expect(pacterror).tobe(null);          done();        });        helloprovider.run(function(runcomplete) {          client.sayhello(function (error. reply) {            expect(error).tobe(null);            expect(reply).tobe("hello");            runcomplete();          });        });      });```thoughts?i'm open to better ways of dealing with this if you think of any.,negative
DiUS/pact-consumer-js-dsl,karma,2015-01-15T08:39:37Z,i wish i had some better ideas. but this is not a style of coding that i'm very familiar with.if we were happy to make a jasmine specific plugin (which i am. if we can abstract it nicely for other libraries too). we could add an `expect` in the callback code with an appropriate error. that would fail the test if any of the administration calls to the mock service failed.,negative
DiUS/pact-consumer-js-dsl,karma,2015-01-15T11:40:54Z,bethesque markdalgleish have a look at the latest commit and let me know what you think.,neutral
apache/cordova-windows,jshint,2015-02-02T23:05:15Z,cb-8400 enable jshint for windows platform. - created a `npm run jshint` command & integrate into `npm run test`- created jshint rules files for spec and rest of the repo- added node_module jshint to repo- fixed all jshint issues,neutral
apache/cordova-windows,jshint,2015-02-03T14:37:11Z,lgtm,neutral
mozilla/nunjucks,mocha,2014-07-25T15:44:49Z,how do i test addfilter with mocha & chai?. i have a plugin called nunjucks-date that installs itself much like``` jsenv.addfilter('date'. require('nunjucks-date'));```can someone guide me add tests for this in my plugin?any help will be appreciated.,positive
videojs/videojs-contrib-hls,standard,2015-07-07T17:08:08Z,if it happens over standard http. can you put the segment with this issue somewhere public so we can see what's happening?,neutral
videojs/videojs-contrib-hls,standard,2015-07-14T14:07:06Z,that's outside standard hls behavior so it's outside of our focus today. sorry we can't be of more help.,negative
rooseveltframework/roosevelt,mocha,2017-06-16T15:52:57Z,appdir always references current directory regardless of where roosevelt is required. when running a mocha test suite for route testing. the appdir looks for a `package.json` in the current directory of the test file. but we need to look at the root of the project.   #### smart option : if roosevelt ~~somehow detected that it was being called in via a test framework~~ scanned the project directories. `appdir` would point to the correct `package.json` in the root directory of the project. #### less smart option: it would also be nice if your could pass in the appdir as a param at require(),neutral
brave/browser-laptop,mocha,2017-05-01T18:56:47Z,fix automated tests for about:history page. - [x] added/updated tests for this change (for new code or code which already has tests).- [x] ran `git rebase -i` to squash commits (if needed).test plan:run `mocha test/about/historytest.js`close #8524,positive
mapnik/node-mapnik,standard,2013-11-30T19:42:53Z,the hardcoded min-macosx flag causing this problem is i think actually coming from the gyp files in node core. node-gyp could override them but not sure if that is the best place. i'm not fully on mavericks yet myself so i've not yet taken the time to test all possible solutions. anyway. closing this issue since this has nothing specific to do with node-mapnik. the problem is generic: you cannot run multiple c++ libraries together unless they are built against the same standard library.,negative
haraka/Haraka,eslint,2016-06-08T00:08:11Z,stupid spacing.  that's what i get for making changes against a remote box instead of my local copy of vim with its properly configured eslint...,neutral
economist-components/component-typography,karma,2015-09-15T15:03:44Z,add karma.conf.js,neutral
economist-components/component-typography,karma,2015-09-15T15:29:05Z,thanks fampinheiro :horse_racing:,neutral
electrode-io/electrode,karma,2017-03-22T23:44:27Z,update archetype component karma & babel,neutral
admc/wd,selenium,2013-10-26T15:07:10Z,closing this should be tracked within selenium/selenium driver projects.,neutral
mout/mout,jshint,2013-02-07T12:37:20Z,add jshint check on travis. would be good to automate some of the style check on travis. that way it's easier to spot things that aren't following out conventions (even tho our conventions are not that strict/defined).,neutral
angular/angular-cli,uglify,2017-02-07T17:46:31Z,ng build -prod uglify?. i just wondered if there is an option to uglify the compiled javascript.i don't want my variable- and function-names to show up in code. also it would save alot of space.i read on a page that `ng build -prod` does uglify. but i don't see that in my dist folder. maybe it got removed? or is there any option i'm missing?,negative
angular/angular-cli,uglify,2017-02-07T18:39:55Z,we do run uglify on your code. but unfortunately uglify does not rename properties. only function and variable names. a lot of your methods will be properties and not renamed by uglify. we're looking at solutions but for the time being this is probably not going to change.,neutral
angular/angular-cli,uglify,2017-02-14T05:55:14Z,can you add this plugin in your webpack.aot.js ? (push in plugins array)`new webpack.optimize.uglifyjsplugin({      compress: {          warnings: false.          drop_console: true      }.      output: {          comments: false      }    }).`unless you installed uglify-js module you have to install it first`npm install --save-dev types/uglify-js`and can you show me your bundle file size with aot compile ?,neutral
cssinjs/jss,eslint,2015-09-08T13:56:23Z,do you use eslint? can you push an .eslintrc file somewhere. so i can use it for the plugins?,neutral
cssinjs/jss,eslint,2015-09-18T15:34:41Z,kof i have finished with the rewrite/repackaging of the official plugins + jss-examples. i will make the prs tomorrow.some questions:1) jss-debug doesn't work. there is no `rule.options.name` property. how do you want to proceed? i personaly don't use it.2) in jss-examples. i am handling dist files for plugins like you do with jss.js (ie. copy from node_modules to the root dir). do you want to put all copied files to .gitignore?3) do you want to convert all urls (examples. demos. external libs etc.) to https. if it's possible?4) i used the .eslintrc file of the jss repo. are you sure about the the `eqeqeq` rule? a few `==` can be left untouched. maybe it's better to disable that rule.for consistency i have changed the indentation to 2 spaces in most files that i edited/moved (html too). i think it's better to have the same indentation everywhere and 2 spaces is what you define in .eslintrc. it is better to have some more diffs now. because the files are small and there will be many changes anyway.,neutral
bbc/bbc-a11y,standard,2016-09-01T11:22:54Z,+1 to this. orb triggers failures which are causing tests to fall with code outside of my control. until orb fix the errors i would like to mute them to get a more accurate view of the test results.,negative
aksonov/react-native-router-flux,mocha,2016-08-08T21:17:37Z,nalwayaabhishek have you found a solution to your mocha tests? the suggestion by hellogerard in #628 fixes my tests. but i don't know what (if any) negative effects it could have to silence the mockery warnings,negative
aksonov/react-native-router-flux,eslint,2016-07-18T21:13:50Z,so far i'm not seeing anything but i'm also not sure exactly what i'm looking for.  i added a line to show the key when `defaultrenderer#componentwillreceiveprops` determines they are different:```console.log('dispatchfocusaction'. nextprops.navigationstate.key);```so far it logs the same keys and fires the same number of times with your code and original.there is also a typo `getscenekey` vs `getscenekey` and an eslint issue.do you have a case i could try with the example app or is this still in the investigation stage?,negative
mishoo/UglifyJS2,uglify,2012-09-28T23:43:37Z,hey guys. make sure to install the libraries (source-map and optimist) inside uglifyjs/ cd uglifyjs/npm install source-mapnpm install optimist,neutral
mishoo/UglifyJS2,uglify,2012-10-11T01:18:14Z,any way to shut off the warn output under node.js. howdy;i'm using this directly in a node app. and notice it's pretty chatty on the command line with various warnings - i do want to see those warnings on occasion. but i'd like to turn them off under production use.  here's how i'm calling things (i'm trying a few different keywords in the options to figure this out myself - i realize they don't work =) ``` javascriptuglify.minify(js_file_list.{'mangle':true.'verbose':false.'stats':false.'warnings':false}).code```,negative
mishoo/UglifyJS2,uglify,2012-10-11T15:18:24Z,cool! thanks much.  the new uglify seems to handle corner cases better than the old one.  great work!,positive
testem/testem,mocha,2012-07-04T04:51:00Z,the testem-node module only works with modules that output tap when run with `node`i need to refactor it so that it can run something like `mocha --spec tap test`,neutral
testem/testem,mocha,2012-07-08T02:49:05Z,gave this some more thought and think the current implementation is not really node specific. it is basically spawning some process that outputs tap. maybe we should position it as such: support for external tests that output tap. but. given that. i also need to think about how that fits in with the browser launchers generalization. should it be treated like another browser launcher? we will probably need to stop calling them "browser" launchers. and so forth. taking a step back though. someone other than you have asked for node support - that's sort of a holy grail for some people - to have the same code automatically tested on either the browser or node - that's the goal of buster.js. after all.what i am thinking would be the ideal scenario is the user would specify something like```framework: mochasrc_files:- mycode.js- mytests.js```and then it just would run in either node or the browser. wonder if that is realistic given the commonjs requires in node. might be more doable via browserify. so maybe```framework: mochaentry_point: mytests.js```and then it will know to run it in node or browserify it and run in the browser. i want to try my best to support all frameworks too. so jasmine. and buster. thoughts?sorry i've gone off track. but i am just trying to think more long term.,neutral
testem/testem,mocha,2012-07-13T05:37:00Z,is it possible now to write tests with mocha for node?,neutral
testem/testem,mocha,2012-07-13T05:51:56Z,whitecolor i have gotten it working with mocha but it's a bit unstable. just get mocha to output tap,negative
testem/testem,mocha,2012-07-13T07:06:32Z,raynos how my testem.json should look like?{    "node": "node_modules/mocha/bin/mocha".    "node-args": ["--reporter tap"]}that doesn't work.,neutral
DevExpress/testcafe,mocha,2016-04-21T10:33:27Z,i suppose we should remove all `[only:*]` entries from mocha test and testcafe test names to avoid `skip-only` directive duplication since we have `only` option in `runtests`. inikulin do you agree or it doesn't matter?,neutral
DevExpress/testcafe,mocha,2016-04-21T15:29:55Z,#445 is merged. please change `[only:chrome]` directives in mocha and testcafe test names with { only: 'chrome' } argument in the `runtests` function,neutral
DevExpress/testcafe,mocha,2016-04-27T09:57:05Z,inikulin. mocha timeout affects the "before all" method. in other words it has the same timeout as tests. so functional tests task falls while connecting to sauce labs and starting vm.also. sauce labs virtual machines are configurated so the maximum running time is 30 minutes.we had cases. when two machines have already worked for about 25 minutes and the third just started. the result - browsers are turned off in the middle of tests,neutral
mochajs/mocha,mocha,2012-06-13T14:11:03Z,i added another commit too which specifies a name for growl. i use this with growl in order to configure mocha notices to be displayed on my secondary screen where i run my terminal.,neutral
mochajs/mocha,mocha,2012-06-13T19:38:56Z,this solution does not work on windows. it tells me that the file *.js doesn't exist (it does not expand the wildcard).,neutral
mochajs/mocha,mocha,2012-06-14T18:54:30Z,now that you say it - from /tests/ it works.it will be nice if the docs would say something about it explicitly...i placed my opts file in the project root. from where i call mocha (just like where i put my log4js.json. for example). and expected it to be taken from there.the funny thing is i believe that when i saw mocha.opts in another project it was on the project root as well.,positive
mochajs/mocha,mocha,2012-06-15T17:35:23Z,oh no i meant like jquery etc. hmm. there's a new feature in mocha that allows you to ignore globals with a wildcard like "script*" since this is probably from jquery or similar,positive
mochajs/mocha,mocha,2012-06-16T00:46:09Z,thanks for trying to get his into mocha will make it much easier to integrate into existing ci servers.,positive
mochajs/mocha,mocha,2012-06-17T02:20:10Z,this issue has been inactive for over 2 months so i'm closing it. if you think it's still an issue re-open. - tjbot,neutral
mochajs/mocha,mocha,2012-06-17T03:04:07Z,this issue has been inactive for over 1 month so i'm closing it. if you think it's still an issue re-open. - tjbot,neutral
mochajs/mocha,mocha,2012-06-17T17:25:38Z,i think this new feature is not yet implemented. is it?,neutral
mochajs/mocha,mocha,2012-06-17T18:37:31Z,it does not fix yet.the event listener 'uncaughtexception' is not released when test has run.,neutral
mochajs/mocha,mocha,2012-06-17T18:49:02Z,pushed the fix,neutral
mochajs/mocha,mocha,2012-06-17T18:52:25Z,you're not calling done() in the settimeout there so mocha moves on. that's why you get what you do,neutral
mochajs/mocha,mocha,2012-06-17T20:38:26Z,yeah unfortunately it's difficult to extend mocha from the outside right now. but i hope to add some api for that in the near future. same for interfaces. they're pretty easy to maintain though so i dont mind having them in the repo for now,positive
mochajs/mocha,mocha,2012-06-17T22:16:27Z,i doubt it has anything to do with node/mocha. just terminals / shells. unicode blah blah,negative
mochajs/mocha,mocha,2012-06-18T15:21:45Z,i'll like to know how did you set your jenkins jobs to publish your xunit report generated with mocha. i'm trying to do this on my side and have some issues. thanks for the help!,positive
mochajs/mocha,mocha,2012-06-18T15:33:46Z,thank you very much! it works!,positive
mochajs/mocha,mocha,2012-06-18T15:44:33Z,awesome,positive
mochajs/mocha,mocha,2012-06-18T16:35:17Z,sorry the bot was checking the last comment's date. but there was no comment so it must have thought it was old. i dont mind this idea. but i think you should use an environment variable to tweak something like `make test`. vs tweaking mocha directly via env,negative
mochajs/mocha,mocha,2012-06-19T06:24:37Z,yeah. that is a possible alternative. however i think. let comfort aside. it would also standardize the name of mocha env parameters in teams. also think of usage in multiple projects (e.g. policy).,neutral
mochajs/mocha,mocha,2012-06-19T15:31:13Z,mocha coverage using jscoverage integration with sonar. it's more a question then an issue but. i would like to know if there is a way to use sonar with mocha (unit testing and coverage)? if yes. how can i do this?for your information. i'm already using jenkins for ci on my project running all my tests with mocha. i'm also using ant to do this.thanks for the help!,neutral
mochajs/mocha,mocha,2012-06-19T15:59:28Z,whitelist common globals (settimeout. etc). they're non-enumerable so mocha misses them:``` jsobject.keys(window)["window". "top". "location". "external". "chrome". "v8locale". "document". "html5". "modernizr". "$". "jquery". "jquery1720022294572554528713". "moment". "github". "baconplayer". "dateinput". "clippycopiedcallback". "debug". "_gaq". "_gauges". "$stats". "_gat". "gaglobal"]window.settimeoutfunction settimeout() { [native code] }```,neutral
mochajs/mocha,mocha,2012-06-19T16:03:20Z,consider using `object.getownpropertynames` if available.,neutral
mochajs/mocha,mocha,2012-06-19T16:08:19Z,never heard of sonar,neutral
mochajs/mocha,mocha,2012-06-19T16:12:15Z,yeah. we'll have to whitelist these ones anyway but that's a good plan,positive
mochajs/mocha,mocha,2012-06-19T16:22:49Z,won't work for the case in question: `window.hasownproperty("settimeout") === false`.,neutral
mochajs/mocha,mocha,2012-06-19T16:25:24Z,haha i'm not surprise! sonar is an opensource project used to calculate different metrics related to your code. check multiple coding rules. etc. here's the link where the project :  reading your answer. i don't think that what i'm asking for is implemented unfortunately. or maybe i'm wrong. i'm reading that jstestdriver coverage works with sonar because the generated report is compatible with the lcov format. maybe mocha coverage supports already this format and i don't know it.again. thanks you very much for your help and time!,negative
mochajs/mocha,mocha,2012-06-19T17:06:45Z,mocha's is just an html report right now,neutral
mochajs/mocha,mocha,2012-06-19T17:12:20Z,goot to know. thanks for your fast answer!,positive
mochajs/mocha,mocha,2012-06-19T17:15:35Z,actually i lied. we have json-cov as well but not lcov,negative
mochajs/mocha,mocha,2012-06-20T11:27:07Z,i'd even be happy if i could just add "--no-growl" to revert the earlier "--growl" on the same command line. perhaps that's a bit daft though.,positive
mochajs/mocha,mocha,2012-06-20T11:33:20Z,yes. this is still an open issue but i'm missing permission to reopen it. we can take care of implementing this feature and create a pull request.,positive
mochajs/mocha,mocha,2012-06-20T15:23:59Z,i'm still -1 personally. having logs spew out at all times is kinda weird. i would think the inverse would be a bit cleaner. maybe have a verbose ./test.log,negative
mochajs/mocha,mocha,2012-06-20T16:22:12Z,yeah you could certainly argue about which thing should take precedence when it comes to hogging stdio. _but_ simply because mocha already operates over stdio i think it would be cleaner to log to a file. then there's no modifications on mocha's end,neutral
mochajs/mocha,mocha,2012-06-21T05:30:14Z,`mocha --watch` fails on thrown exception outside of test. for example. if `controller.robot` is not defined. the following causes mocha to stop watching files. forcing me to restart it manually.```describe 'controller.robot'. ->  r = new controller.robot  it 'has a thruster'. ->    r.should.have.property('thruster')```on a related note. if the test script contains a syntax error. the same thing will happen (at least when using coffeescript).,negative
mochajs/mocha,mocha,2012-06-21T15:24:49Z,we started doing as you say. redirecting the logs to a file but it's not clean so we dropped it. instead we're just going to parse all the logs and extract the json report.hence closing the bug.thanks- nicolas,neutral
mochajs/mocha,mocha,2012-06-21T15:38:48Z,what's not clean about outputting to a file? it's either mocha outputting to a file or logs outputting to a file. neither is dirty really but all the other reporters output to stdio,neutral
mochajs/mocha,mocha,2012-06-21T15:45:12Z,you cant catch non-eval syntax errors,neutral
mochajs/mocha,mocha,2012-06-21T15:45:51Z,because the logging in the tests is pretty much either console.log or some stdout.write("stuff").so the only way to redirect logs to a file is to redirect stdout (and stderr) to a file. then when the tests are finished. we must bring stdout and stderr to normal.,neutral
mochajs/mocha,mocha,2012-06-21T15:57:52Z,yeah. the community (for better or for worse) doesn't really use console.log for actual logging. more like a puts(),negative
mochajs/mocha,mocha,2012-06-23T10:51:36Z,ok so you won't merge this one. but perhaps the problem can be addressed in a way that doesn't require user intervention in every single test file?for example. how about allowing a "mocha-init.js" in the test root. which allows setup including adding hooks or aftereach blocks that affect the entire test suite. explicit. but not arduous.it could even replace mocha.opts eventually - whatever you have in mocha.opts could become something like:mocha.addopts("--growl". "--etc")the fact that it's just js allows for additional composability and flexibility (e.g only adding --growl if growl is installed),negative
mochajs/mocha,mocha,2012-06-26T15:50:33Z,empty mocha.opts breaks mocha. steps to reproduce:- create a test/mocha.opts file. but leave it blank- run mochaexpected:- the test are runactual:- mocha complains about not being able to find a ".js" file,neutral
mochajs/mocha,mocha,2012-06-26T18:24:03Z,globs already work with posix shells. it would be kinda anti-*nix to glob arguments passed in,neutral
mochajs/mocha,mocha,2012-06-27T22:30:16Z,+1note: it's easy to hook into the pass/fail event's from the js api's mocha.run() object and make your own reporter functionality but it seems i can't completely silence/null the stdout reporter: i keep getting some failed reports in red. it seems it's the base.epilogue (related to #138 maybe?)i use this in a jake task```mocha = new mocha({    reporter: false    ui: "bdd"  })```,negative
mochajs/mocha,mocha,2012-06-28T13:30:46Z,--watch fails on windows. mocha --watch results in:node.js:468          var b = process.binding('signal_watcher');                          ^error: no such module    at process.startup.processsignalhandlers.process.on.process.addlistener (node.js:468:27)    at object.<anonymous> (c:\users\shanec\appdata\roaming\npm\node_modules\mocha\bin_mocha:242:1    at module._compile (module.js:449:26)    at object.module._extensions..js (module.js:467:10)    at module.load (module.js:356:32)    at function.module._load (module.js:312:12)    at module.runmain (module.js:487:10)    at process.startup.processnexttick.process._tickcallback (node.js:244:9)windows 7 64bit,negative
mochajs/mocha,mocha,2012-06-28T16:30:06Z,node issue,neutral
mochajs/mocha,mocha,2012-06-28T20:54:04Z,allow test selections to be inverted. this allows an easy way to ignore a subset of tests. such as:`mocha --grep slow --invert  # ignore all tests tagged with "slow"`,neutral
mochajs/mocha,mocha,2012-06-28T21:54:37Z,nice! looks good thanks man,positive
mochajs/mocha,mocha,2012-06-28T22:02:07Z,escaped --grep as well. if anyone wants to actually use regexps we can add something like `--egrep` or sth,neutral
mochajs/mocha,mocha,2012-06-30T19:25:09Z,make mocha textmate bundle. i just started to use mocha and found that i really love it. i followed the mocha homepage best practice areas to create makefile and mocha.opts. and run "make test" -- my testing projects runs just fine. that means make works on my machine.then in the same file location ( root of the project ) run "make tm". it gives me this error "make: **\* no rule to make target `tm'.  stop.". where should i run this command to generate the textmate bundle ? i did stackoverflow search. google search. and issue list search. and still no luck to find the answers. hope that you could help. thanks.,positive
mochajs/mocha,mocha,2012-07-02T04:58:18Z,html runner doesn't safely escape markup in suite titles. if i write the following test for example (using jquery and chai):``` javascriptdescribe("when <script> is used in the suite title". function(){    it("should still cause the dom to be parseable". function(){        $('#mocha').clone.should.not.throw.error(error);    });});```,neutral
mochajs/mocha,mocha,2012-07-02T09:31:03Z,hi.we working on big project uses express and mocha as testing framework.for our integration in jenkins. we need doc and xunit reporters output to files (just mocha output!)do you have any plan to provide such functionality? thanks a lot!,neutral
mochajs/mocha,mocha,2012-07-03T06:43:59Z,hi badunk.yes. i saw this solution. but it not solve the problem :(the problem. that redirected output file (tap. xml ... ) contains both mocha output and also output from other modules in shuffle manner.we don't want to parse this file for extract only mocha's messages in order that jenkins can take it.thanks again.,negative
mochajs/mocha,mocha,2012-07-03T12:29:58Z,in my case (windows7 64) everything works fine in console. but when i invoke the same command via node's exec or spawn. only part of message is displayed (e.g. all error messages are missing). this problem makes it impossible for me to run mocha from my coffee script's cake file.,negative
mochajs/mocha,mocha,2012-07-03T18:14:28Z,hmm i've had no issues with this. i use mocha locally in all my projects,neutral
mochajs/mocha,mocha,2012-07-03T19:00:26Z,turn reporters into seperate module. the mocha reporters are sweet. however they are hard coupled to the mocha interface.it would be elegant if they were a seperate module.consider mocha just outputting tap format for the tests to stdoutand then doing`mocha test | mocha-reporters --dot`the mocha-reporters module could just be a thing that takes tap input and outputs to the reporter to stdout.you could also consider using it programatically as`mocha.output.pipe(mochareporter.spec).pipe(process.stdout)`this allows people to re-use the reporters in any test framework that outputs tap.if you think this is a sensible idea we can draft out how the refactoring would go and i can try migrating the reporters into seperate modules. i've pretty much ported the html reporter to something that consumes tap already so that feels like duplicated effort.,positive
mochajs/mocha,mocha,2012-07-03T19:04:32Z,+1 from me but i'd like to retain the convenience that mocha already provides for backwards compat,positive
mochajs/mocha,mocha,2012-07-03T20:11:52Z,yes `mocha --spec spec` would simply pipe the tap output into the correct reporter.,neutral
mochajs/mocha,mocha,2012-07-03T23:07:06Z,meaning mocha-reporters would be a dependency of mocha and used whenever spec is used.,neutral
mochajs/mocha,mocha,2012-07-05T16:56:17Z,scroll #mocha in html reporter,neutral
mochajs/mocha,mocha,2012-07-06T17:31:52Z,yeah that sounds hacky. why not just listen on mocha's "end" event?,neutral
mochajs/mocha,mocha,2012-07-08T13:48:44Z,empty mocha.opts no longer searches for a .js file. `"".split(/\s+/)` returns `[ '' ]`. by default. mocha searches in the `test/`directory if the array is empty. but since the previous sentence washappening. the array was not empty and it searched for a file called`'.js'`. fixes #477,neutral
mochajs/mocha,mocha,2012-07-08T17:26:44Z,why are we +1ing an empty mocha.opts though. why would you use an empty one,neutral
mochajs/mocha,mocha,2012-07-08T17:26:55Z,-1 from me,neutral
mochajs/mocha,mocha,2012-07-08T17:27:12Z,i don't think we should be coding around an empty mocha.opts. just don't use one :p,neutral
mochajs/mocha,mocha,2012-07-08T19:02:36Z,i think i see your point. what if it prints a message like "empty mocha.opts found. please delete or fix." and exits instead?imo doing that would be a better error message than erroring with file ".js" not found.,positive
mochajs/mocha,mocha,2012-07-08T21:40:16Z,i vote for `this._mocha.runnable`,neutral
mochajs/mocha,mocha,2012-07-08T22:00:24Z,ignore files starting with . (dot). i'm using mocha on a network share. where osx creates resource forks (e.g. `._filename.js`). so this ignores files starting with a `.`,neutral
mochajs/mocha,mocha,2012-07-08T22:02:41Z,+1 for me,neutral
mochajs/mocha,mocha,2012-07-09T17:01:22Z,this works for me:```var jsoncov = require('mocha').reporters.jsoncov;```since i extend the jsoncov reporter.same should work for base:```var basereporter = require('mocha').reporters.base;```,neutral
mochajs/mocha,mocha,2012-07-10T16:32:28Z,yup definitely! that would be great. i'm using jscoverage. and then the report itself is in mocha but i want to use the same thing for the client,positive
mochajs/mocha,eslint,2016-09-19T05:36:45Z,use semistandard. we have some code standards in place. but not enough.  we have disabled many warnings which we probably shouldn't have. to avoid changing too much code when we picked up eslint originally.  i'd also prefer to use a widely-used style instead of a custom style.- install eslint-semistandard-config and all necessary dependencies- update `.eslintrc` to be just `{"extends": "semistandard"}`- `eslint --fix` everything- manually fix everything elseif anyone disagrees. please let me know.  unless that disagreement involves "semicolons"; if so. please keep it to yourself.  :smile:,negative
mochajs/mocha,eslint,2016-09-19T11:17:07Z,great move!,positive
karma-runner/karma-sauce-launcher,sauce,2013-07-17T09:48:29Z,awesome. thanks :-),positive
ipfs/js-ipfs,sauce,2016-05-18T03:30:23Z,awesomesauce nginnever :)just to confirm. are you are top of converting the `exporter` in unixfs to a duplex stream?,neutral
AnalyticalGraphicsInc/cesium,jasmine,2017-04-11T14:59:36Z,>>> scene/cesium3dtileset resolves readypromise passes when ran alone or when all cesium3dtileset tests are ran. but it fails sometimes in ci and locally when all tests are ran.>>>lilleyse is this specific to this>> i haven't seen that one. does it timeout or just fail?timeout iirc.  actually. here is the one that fails intermittently in ci:```9) url and tileseturl set up correctly given directory without trailing slash     scene/cesium3dtileset     error: timeout - async callback was not invoked within timeout specified by jasmine.default_timeout_interval.```,negative
redfin/react-server,jasmine,2017-02-13T21:34:56Z,ugh. looks like the xhr loading doesn't work in the jasmine tests.  i guess they were falling through to cache-preloading?  that doesn't work in modern chrome.how does react server even work? 🤦‍♂️,negative
dojo/grunt-dojo2,codecov,2017-04-25T21:20:26Z,istanbul coverage.json supported by codecov.io. **enhancement** it seems that codecov.io now supports fully the istanbul json coverage information (before they had issues with the support).  this provides much better information. because there are some limitations to what is available in the `.lcov` format.we should switch to pushing that to codecov versus the `.lcov` format.  currently we generate both. but the task pushes the `.lcov`.,positive
rambler-digital-solutions/dotfiles,eslint,2015-08-10T14:26:03Z,new eslint config based on airbnb presset,neutral
rambler-digital-solutions/dotfiles,eslint,2015-08-11T16:28:51Z,переделал подключение extends. теперь можно писать "extends": "eslint-config-rambler" в  .eslintrc ставится так же.потестировать можно на "git+:inthemon/dotfiles.git#master",neutral
rambler-digital-solutions/dotfiles,eslint,2015-08-12T10:02:50Z,конструктивно ) хотя не - деструктивно для глаз ),neutral
Azure/azure-sdk-for-node,mocha,2012-08-01T06:49:09Z,storage error objects aren't error instances. the error objects you get as the first parameter to completion callbacks are just plain objects. these should be instances of javascript's error type (or a subtype thereof).this is causing difficulty in using mocha tests. you can pass an error object to the done() method used to complete a test case. however. if you pass the error object directly from the azure callback to mocha. like so:``` javascriptit('should do something and fail'. function (done) {    someservice.somethingthatfails(function (err. result) {        done(err);    });})```you'll get this error: done called with non-errorreally annoying when you're trying to thread error information all the way through an async flow out to a test.,negative
Azure/azure-sdk-for-node,mocha,2012-08-16T19:07:19Z,fixed in pull request 317,neutral
Esri/esri-leaflet,standard,2014-11-18T08:19:21Z,hi. jgravois i find the reason. my map coordinate system is to use 4326 standard. leafset does not support this projection system. i put the map service change. thank you.,negative
Esri/esri-leaflet,karma,2013-12-13T16:53:11Z,mixin split out. split out mixins to 2 files. so a custom build can further minimize codebase.pointed karma tests to leaflet cdn. passes all.,neutral
assaf/zombie,standard,2013-08-09T02:20:38Z,is there anything blocking this pull request ?,neutral
FormidableLabs/webpack-dashboard,eslint,2017-02-01T17:00:29Z,it happens when there are 2 or more _processes_ active in one console _thread_. (not sure if i call it properly)for example. in my `package.json`. i've got commands: ```  "scripts": {    "start": "node server.js".    "lint": "eslint src".    "gulp": "gulp".    "dev": "gulp | webpack".    "webpack": "webpack-dashboard -- node server.js"  }.```if i call `npm run dev` - issue occurs (there is also `gulp` command running). if i run `npm run webpack` - there is no issue (`webpack-dashboard` is running alone).,negative
economist-components/component-palette,karma,2015-09-15T15:00:55Z,add karma.conf.js,neutral
anvilresearch/connect-nodejs,standard,2015-10-13T09:21:28Z,added accesstoken.decode and removed a few lines for js standard.. proposed fix for #19,neutral
anvilresearch/connect-nodejs,standard,2015-10-13T15:07:17Z,don't merge this yet. the same needs to be done for idtoken.js,neutral
economist-components/component-grid,karma,2015-09-15T14:38:29Z,add karma.conf.js,neutral
kaliber5/ember-bootstrap,eslint,2017-06-01T14:09:20Z,i've reviewed the text. thanks!importing bootstrap.js is harder than it should. because ember is moving away from bower and adopting yarn. but it doesn't allow us to import any file from within node_modules. and if we use browserify we need to use something like ``import bootstrap from 'npm:bootstrap``. which triggers a warning on eslint. since ``bootstrap`` is never used. so the only way i could resolve this was putting bootstrap.js inside vendor's folder and importing it from there.since i'm quite new to ember. do you have a better way of doing this?thanks,negative
koalyptus/TableFilter,eslint,2017-05-29T03:37:23Z,refactor popup filters options. - refactor `popup_filters` options to allow a literal object or a boolean. basically going from a flat prefix based structure to a more structured one.- enforce `semi` eslint rule,neutral
nathanboktae/mocha-phantomjs,mocha,2014-11-10T15:09:50Z,added slow option to pass to mocha. used for highlighting slow tests,neutral
nathanboktae/mocha-phantomjs,mocha,2014-11-14T00:08:27Z,mochaphantomjs.run() does not pass through callback parameter. mocha.run() accepts a method to call back when testing is complete.  mochaphantomjs.run() does not pass through any arguments.  it would be helpful to have this callback available for js code.,negative
nathanboktae/mocha-phantomjs,mocha,2014-11-18T18:40:33Z,support mocha-cobertura-reporter. is there anyway to get cobertura reports from this? the documentation around using third-party reporters is pretty slim. and i can't figure out what i'm supposed to pass. could i pass `cobertura` as a function? or does it need to be the name of a reporter as a string.thanks in advance.,negative
nathanboktae/mocha-phantomjs,mocha,2014-11-21T15:14:25Z,reporter output empty. when running:```mocha-phantomjs -s localtoremoteurlaccessenabled=true -s websecurityenabled=false -r xunit -f xunit-dump.xml :9000/tests.html```i see all my tests running. but there is nothing inside the report file. it is empty and the xunit output is sent to stdout. together with console.log messages,neutral
nathanboktae/mocha-phantomjs,mocha,2014-11-24T18:28:41Z,just use the 3rd party reporter option:```mocha-phantomjs <yourtests.html> -r <path to nyan.js from mocha's source code>```in my above example `~/github/mocha` is my local mocha clone.,neutral
nathanboktae/mocha-phantomjs,mocha,2014-11-30T00:49:24Z,from the command line. you'd just pass the 3rd party reporter file as the parameter. see the unit tests for an example.remember mocha runs in the browser with mocha-phantomjs. not node.js. so the reporter and all it's dependencies. recursively. must run in the browser.looking at it. since it depends on jade and writes a file. you'll probably have to rewrite it. phantomjs does have file functions. but another option is just dump the xml to `mocha.process.stdout` then use the `--file` option from mocha-phantomjs. you might be able to use browserify to bundle jade. otherwise write it out with string concats. if you do that. coffeescript has some native string templating that would help here for readability. along with comprehensions that would make the code much more compact.,neutral
nathanboktae/mocha-phantomjs,mocha,2014-11-30T00:51:26Z,yeah xunit outputs to stdout instead of using `mocha.process.stdout`. see #114,neutral
nathanboktae/mocha-phantomjs,mocha,2014-11-30T00:53:41Z,a test for this please. as you'll see it will fail as you didn't wire up that option to anything to the actual code running in phantomjs. see how i implemented bail in 8641736,negative
nathanboktae/mocha-phantomjs,mocha,2014-12-04T22:00:00Z,you're very welcome. thanks for your good work on mocha-phantomjs!,positive
nathanboktae/mocha-phantomjs,mocha,2014-12-05T10:07:48Z,this still issue is still present,neutral
nathanboktae/mocha-phantomjs,mocha,2014-12-05T18:33:53Z,replaced them in the xunit.js but not the compiled mocha.js and yes. i guess i understand where hell is coming from as i've been bitten by it myself in qunit test runner. honestly would really like to have this working for jenkins or other xunit consumers,negative
paypal/nemo-view,selenium,2015-04-22T17:23:20Z,locator normalize refactor. this allows the locators to either underscore methods or json view methods to be of both string or object types. please see updated readme.also. cleaning up `locreator` some more. moving out the last method to `selenium-drivex`. move normalize functionality to separate module,neutral
godaddy/javascript,eslint,2016-06-14T12:49:03Z,i am -1 on this until there is parity with `eslint` and `jscs` for autofixing. this is something the `jscs` team is working on now that they have joined forces with the `eslint` folks. going to leave this open as a way for us to track their progress.,negative
typicode/husky,standard,2016-05-25T17:31:26Z,i understand this works with gui's but what about github's desktop client?. i have installed node with the standard installer.i have husky working in the cli but github desktop client acts like there are no scripts to run.,neutral
typicode/husky,standard,2016-05-25T19:53:15Z,maybe it is the problem with github desktop?,neutral
typicode/husky,standard,2016-05-25T21:42:53Z,hi.what's the output of `which node`? you're on os x?,neutral
kriskowal/q,jasmine,2012-05-22T17:43:46Z,should be able to change `"test": "node test/all.js"` in `package.json` to `"test": "jasmine-node spec"`. but. i don't know anything about travis. so i'll leave it up to you.,neutral
apache/tinkerpop,mocha,2017-06-05T08:38:45Z,great! any help is welcome!i have some bandwidth to dedicate on the javascript glv this week. there are still several remaining items:- `driverremoteconnection` implementation that can communicate with gremlin server.- adapt the execution pipeline to match the new async execution in tinkerpop-1490 and expose method `promise()`- add node.js runtime and run tests on mocha (ditch jjs) and create integration tests.- add documentation for javascript glv on `gremlin-variants.asciidoc`,positive
SparkPost/node-sparkpost,mocha,2016-04-13T14:59:53Z,tests and coverage fail to start on windows. when doing development on the module in a windows environment. `npm test` and `grunt test` both fail when trying to execute mocha. due to how the commands are processed by the command prompt. command paths should use `path.join` instead of having hard-coded path separators.in addition. on windows. istanbul fails to properly execute as it tries to run the test runner (`_mocha`) as js whereas on windows the files in the `./node_modules/.bin` directory are cygwin shell scripts (when without extension) or windows batch files (when with `.cmd` extension). the actual js script from the mocha module's `bin` directory should be used instead.,negative
wycats/handlebars.js,mocha,2012-06-25T14:39:17Z,fix global leak. when running functional tests with `mocha`. it detected a global leak which prevents me from running my tests.this pr removes the leak. which is always a good thing :),negative
wycats/handlebars.js,mocha,2012-06-25T14:41:03Z,any idea why jshint didn't catch this?,neutral
wycats/handlebars.js,mocha,2012-06-25T14:42:29Z,nope. but as mocha detects them on runtime it's far easier for him. static analysis may not detect them all. that's my guess.,negative
wycats/handlebars.js,mocha,2012-06-25T14:55:54Z,nah. static analysis should be able to catch them all (assuming not doing weird things with eval).,neutral
cucumber/cucumber-js,jasmine,2012-06-20T12:42:12Z,yep. the listener instantiation is hardcoded. this is just a spike (non-tested. cow-boy-style code) to prove everything is ready for the pretty formatter.i'd like it to be rewritten following the normal bdd approach. with gherkin scenarios and jasmine specs. of course. all the code you wrote previously that is still relevant can be reused.i might get some time tonight to work on it but if you want to take back the control of this pull request. you're welcome!i'd like to close it as soon as possible though. it's been requested by many people. for quite a long time.,positive
cucumber/cucumber-js,standard,2017-05-19T16:30:01Z,good to hear. i'm surprised protractor's `.then` doesn't support what i thought was the promise standard of being able to accept two arguments (first is onfulfill. second is onreject),negative
vector-im/riot-web,standard,2016-01-12T15:59:41Z,> concerned that you might expect this to bring up the memberinfo section on the right-hand panel for yourself you already get the memberinfo section when clicking on yourself in the member list and having an action here display something in the member list just feels weird...> another related question is whether clicking on an avatar in general in the timeline should perform autocomplete on their name. or open up the memberinfo sectioni like the autocomplete... maybe not the most intuitive but as you say it's great for non ascii names. let's try this and see if people yell. i was about to say "we're going to have search in the member list anyway" but that won't be helpful with non-ascii. can we have double-click = autocomplete and single click = memberinfo? <- not entirely convinced myself given i'm not sure double-click is standard on web. but want to hear your thoughts,positive
cloudchen/grunt-template-jasmine-requirejs,jasmine,2013-05-14T13:24:43Z,there are a lot of use cases for this. not only those mentioned.  jam has a separate config file from the main. and i have come to like that convention solely for separation of dependency configurations and shims and my main application config. pretty innocuous change providing upside for a bunch more use cases.,positive
cloudchen/grunt-template-jasmine-requirejs,jasmine,2013-05-14T14:27:48Z,i agree on the "mainconfigfile" name. i'll try to merge later this evening.there is another consideration. however:i'm not too happy about extracting some of the internals from r.js to be able to extract the config from the mainconfig file. we should instead either use r.js's api directly (the problem with that is that it is async. and then grunt-contrib-jasmine needs to be changed to support async templates). or we could extract the config ourselves with regex or esprima.,positive
cloudchen/grunt-template-jasmine-requirejs,jasmine,2013-05-14T15:48:27Z,about the "mainconfigfile" option - this should not be inside "requireconfig" since "requireconfig" and the config from "mainconfig" should be merged. so "mainconfigfile" needs to be a sibling of requireconfig - and in that respect. "requireconfigfile" is probably a better name.,neutral
appium/appium,selenium,2013-09-28T23:57:36Z,we have some support for this right?,neutral
appium/appium,selenium,2013-09-29T01:22:31Z,appium correctly supports getting and setting the orientation. the rest is up to the bindings.,neutral
appium/appium,selenium,2013-10-08T17:56:21Z,cannot delete old androidmanifex.xml.apk error. hi there.i'm getting the following error from one of my android devices when i'm trying to run tests in parallel. the error occurs in random. was wondering if anyone has seen this before.error: unzip threw error error: command failed: error:  cannot delete old androidmanifest.xmlerror: stderr: archive:  /tmp/androidmanifest.xml.apkerror: stdout: error:  cannot delete old androidmanifest.xmlinfo: error unzipping manifest apk. here's stderr:debug: nullinfo: overriding session id with ......error: failed to start an appium session. err was: archive could not be unzipped. check appium logs.info: responding to client with error: {"status":6."value":{"message":"a session is either terminated or not started"."origvalue":"archive could not be unzipped. check appium logs."}."sessionid":null}the setup that i have is as following:machine a: has a selenium grid running on itmachine b: two android appium servers.bamboo server that is running the tests from git.thank you for the help.,negative
appium/appium,selenium,2013-10-08T18:11:51Z,the error is from `unzipfile` it seems there's an issue with removing androidmanifest.xml in parallel.,negative
appium/appium,selenium,2013-10-09T15:11:30Z,i am using selendroid however,neutral
appium/appium,selenium,2013-10-10T10:08:31Z,i am trying driver.switchto.alert(); in appium on windows using selenium and showing me not yet implemented error.please suggest the solution so that i can handle alert in my test project.,neutral
appium/appium,selenium,2013-10-10T13:23:46Z,use the button methods. see #307,neutral
appium/appium,sauce,2013-07-23T17:34:18Z,is it on the [open source plan](,neutral
appium/appium,sauce,2013-07-25T22:22:47Z,it doesn't look like `raquelsaucelabs.com` is attached to your github account?,neutral
appium/appium,sauce,2013-07-30T08:17:32Z,all-in-one sauce connect example for python. this test starts a local webserver and tunnel using sauce connect to show how you can test your local/behind the firewall/non-public web apps using sauce labs,neutral
appium/appium,sauce,2013-08-12T21:41:57Z,session ids can be anything. for appium standalone we use uuids. other implementations might use other things. this is a sauce job id.why are you testing the format of the session id?,neutral
brunch/brunch,mocha,2012-06-28T22:00:44Z,hi. i installed brunch from master. the mocha dependency is ok. but there are issues with the skeletons. there is not folder in brunch module,neutral
babel/babel,codecov,2016-05-06T19:53:20Z,can someone help explain the failing "codecov/changes" check?  i can quite figure out what's going on there.,negative
babel/babel,codecov,2016-05-06T19:55:25Z,i think there are some issues with codecov (recently). i wouldn't worry about it atm,neutral
jpuri/react-draft-wysiwyg,eslint,2017-03-15T16:29:00Z,i wrote a pull request that should fix any case issue.i added an eslint rule that will raise a lint error on unresolved dependencies (case-sensitive).i also had to do some changes to the webpack dev config to be able to do `npm start`. see #243,neutral
angular/angular-seed,karma,2013-08-03T06:05:19Z,change the configuration file for karma-e2e conf. without the urlroot. it keeps throwing the error '/' has been proxied you should probably use 'urlroot' to avoid conflicts. with this change. the error goes away and the tests run,neutral
jshint/jshint,jshint,2012-05-24T03:50:14Z,html5 filesystem types "blob" and "blobbuilder" are not defined. both blob and blobbuilder (depricated) seem to not currently be recognized by jshint as valid built-in types.```line 424: blob = new blob([xhr.response]. {type: mime});'blob' is not defined.line 427: var builder = new blobbuilder();'blobbuilder' is not defined.```,neutral
jshint/jshint,jshint,2012-05-24T23:41:48Z,`typeof blobbuilder === 'undefined' // true`blobbuilder doesn't exist in my browser.,positive
jshint/jshint,jshint,2012-05-27T09:17:32Z,hi.currently `indent` implies `white:true`. so specifying `indent:4` after `white:false` reactivates `white`.hope we can eliminate this behavior in jshint-next..greetings.,negative
jshint/jshint,jshint,2012-05-29T06:06:48Z,i'm afraid this makes jshint stricter than jslint. which kind of feels weird. i switched to jshint because it was more lenient. it allows "for (var i=0" which jslint doesn't. i'll look into jshint next code and try to backport the option from there.for the time being i'll use my fork.,negative
jshint/jshint,jshint,2012-05-29T13:35:28Z,did you try the `eqeqeq` option with jshint?,neutral
jshint/jshint,jshint,2012-05-29T22:45:03Z,i feel like this should warn but it doesn't.```/*jshint expr: true. eqeqeq: false. undef: false */a == 1;```,positive
jshint/jshint,jshint,2012-06-08T10:02:23Z,andrewdapkiewicz no. i don't want to remove any feature - i only don't like to see different libraries in the jquery core.there should be a single file for each library. thus we can add/change them easily. and everyone can create it's own. too.maybe we can even add more features (e.g. member detection with error messages like "$.jquery is not a valid member of $. did you mean $.jquery?") - maybe part of _next-...-next-jshint_ ;)even better would be an approach where we get the globals directly from the libraries - unfeasible. but gorgeous ;),positive
angular/angular.js,jasmine,2013-08-04T11:24:04Z,igorlima - thanks for this pr.i do like the readability and have even thought that jasmine specs look better in coffeescript but it doesn't make things that much better. and right now we are not going to add coffeescript to the project. so closing.,neutral
angular/angular.js,standard,2015-02-21T05:11:39Z,lgalfaso.consistency modelthis is not as simplistic as you have pointed out. enormous numbers of directives bypass this by entirely bypassing scope as soon as they require any level of 'bare metal' performance.  anything that executes outside the digest cycle currently has very limited options for restoring consistency after the completion of any given bare metal action. many take the easy route out and trigger something that calls $rootscope.$apply() in order to attempt to ensure consistency.  core angular code does this regularly.  90% of the time i see a digest cycle called it is absolutely unnecessary.  asynci do not understand why async operations done by a directive can't be done when the directive is suspended.  i suppose you might have a concurrency issue where an async operation could have the wrong data on the scope at the time of processing on a suspended scope. but you shouldn't be accessing scope from a non digest locked operation anyway. and if you are operating on a scope that is suspended the scope interacting portion of your async operation will not run until the scope is resumed.transcludeextending another directivecreating a directive on a standard html elementim starting to think that a directive is necessarily the proper place to be doing this kind of control.  it seems like something that should be reserved for use by your application controllers.  pattern wise it really isn't up to a directive to do this kind of application control.  in every situation where i have had the need for this it really should be handled by a controller.ownership of scopei'd argue that it is fairly clear that scope is a shared resource. except under certain circumstances.  isolate scopes are definitely owned by the directive that makes them.   when there is a controller for a section the scope should be under that controller's scope of control.i think i can agree that there are issues with this methodology being a public api and open to everyone to just extend.  however. the core capability absolutely must exist for angular to really be able to handle larger applications.  just today i implemented this in my application. the application needs to be able to quickly switch up a multiple annotations on a large grid of data.  using it in my controllers only. i was quickly able to decrease the points of ui thread lockout caused by digesting a much to large active digest tree.  i rewrote ng-show and ng-hide to make large numbers of hidden annotations not get digested. but still allowed the core html to be rendered in the initial render state so that displaying annotations could be done very efficiently even with the enormous dataset.tldr;  in the large majority of cases a modern browser can handle way more rendered dom than can be actively controlled by angular in a single cohesive scope tree.  isolating application layers such that global digests are controlled to only work on active code is essential.,neutral
angular/angular.js,standard,2015-03-03T04:48:42Z,`json.parse(json.stringify(source))` is often a good method if you know it can handle your data (no circles. no functions. no objects other then string/number/plain-object/null). a standard `copy` method could never make those assumptions though. and detecting such a thing would require traversing the entire source object which would kill any performance gain. generally utility methods like this don't belong in angular anyway...,neutral
angular/angular.js,standard,2015-03-05T04:20:59Z,refactor($compile): use indexof/splice instead of manually manipulating jquery object. jquery/jqlite objects have a `splice` method on them. and `indexof.call` works on them. so those 2 methods can be used instead of the double loop.the standard case (replacing one element) just does an assignment while other cases use `splice`. this could be changed to always use splice if wanted. but i thought the 99% case was worth it.(this is a subset of #9365 that can be done on it's own),neutral
angular/angular.js,standard,2015-03-11T23:23:58Z,this looks interesting. would it be possible to get some numbers to know if there are any performance implications?,neutral
angular/angular.js,standard,2015-03-12T16:43:29Z,jbedard can you also try the performance on the case where multiple elements would need to be replaced?what remains at #9365. i think it would be best if they can be split into more prs (it you think that only one pr would be needed. then just rebase it once this lands),neutral
angular/angular.js,standard,2015-03-13T09:08:49Z,multiple elements seems to have the same result as removing the `if (removecount === 1)` case for single elements - it is a couple percent slower and a fraction of a percent more memory (because splice returns a new array. i assume).if you profile only the code changed on its own (`indexof`+`splice` vs the loop) the loop one is 1-2x faster. but compared to the document fragment and data calls in this method this is insignificant.think it's worth removing that loop?,neutral
angular/angular.js,standard,2015-03-16T19:36:45Z,the other option would be adding `fn &&` in front of the `fn` wrapper methods. then `success`/`error` are more like the standard promise methods when it comes to null/undefined (i don't know what that behavior is. but i think consistency is good...).,negative
angular/angular.js,standard,2015-03-20T06:36:09Z,support `<content>` in templates in place of `ng-transclude`. `<content>` is the web-standards-compliant element that ng2 will be using for this sort of thing. it's really meant to be used in the context of shadow dom but i imagine it wouldn't be so bad to adopt it in ng1 to help ease migration. especially since it is the direct conceptual successor to ng-transclude.one difference. iirc. is that `<content>` element would be _replaced_ by transcluded content. rather than becoming the parent of the transcluded content. as ng-transclude does today.,negative
eventbrite/britecharts,eslint,2017-05-23T17:36:18Z,some of those points can be addressed by wiring up the `eslintrc.json` file to the build so that any pr that does not conform to the rules automatically fails as soon as it is opened.it won't be possible to address all of the issues in that sense but it will certainly cut down the efforts on your side while doing code reviews.also. i noticed that the contributing.md file could be in need of some updating from you guys. it mentions tasks like `npm run dev`that are not defined in the package. so perhaps this could be tackled as part of this task as well.,negative
eventbrite/britecharts,eslint,2017-05-23T17:45:11Z,correct! whatever we can address with `eslint` should be done in that fashion. but i think here. there are several things that are more stylistic and not always easy to spot with `eslint`. (altho arguably you could do almost anything with eslint).,neutral
jribble/grunt-jasmine-node-coverage,jasmine,2014-03-31T17:07:56Z,default of jasmine-node option isverbose corrected. i switched from grunt-jasmine-node to grunt-jasmine-node-coverage and wondered why the verbose output of the test results did not show up anymore. to fix it i could set jasmine_node.options.isverbose to true in my grunt config but it took a while to find that out.your code still contains the logic that sets isverbose to true if not set in the grunt config. however. the default is not correctly passed to jasmine-node.,negative
jribble/grunt-jasmine-node-coverage,jasmine,2014-04-02T22:56:54Z,now that i've merged this i notice that the reason is was the way it was before was because of an earlier merge request.  it seems there must be some disagreement on what this should be.,negative
jribble/grunt-jasmine-node-coverage,jasmine,2014-04-03T08:23:39Z,'isverbose' does make sense. but 'verbose' maybe too. let me check...,neutral
DefinitelyTyped/DefinitelyTyped,standard,2015-08-16T13:14:05Z,robertknight i think the right approach is to list all of the properties so that we get the benefits of typescript and the new freshness checking for catching typos. otherwise we're throwing that benefit away. it's been on my list of things to-do for a while now though so... it's just a matter of someone getting the bandwidth to actually make the change.,neutral
Shouqun/node-dbus,standard,2016-03-19T14:02:54Z,enforce this package only installing on non-windows os's. when using this module in a cross-platform desktop application through a tool such as electron the `npm install` will fail (on windows) on this module due to the cpp imports not existing.  the standard way to fix this is to install this module as an `optionaldependency` and for this module to internally declare which os's it works on.  as far as i can tell that is everything other than windows,negative
senecajs/seneca,eslint,2015-11-02T20:00:47Z,linting and argv processing. added use of seneca eslint config and fix processing of argv (closes #177),neutral
senecajs/seneca,eslint,2015-11-03T15:52:58Z,eslint cleanup to use eslint-seneca-config. .eslintrc contains rules that should really be in seneca config,neutral
senecajs/seneca,minimist,2015-10-07T04:02:13Z,rjrodger looks like print depended on the raw argv value from minimist. which optioner wasn't providing.,neutral
