ashiina/lambda-local,mocha,2016-04-09T12:34:17Z,added lambda properties. refactored. wrote mocha test,neutral
jprichardson/electron-mocha,mocha,2016-03-18T04:32:20Z,original mocha works well in intellij console.,neutral
jprichardson/electron-mocha,mocha,2016-04-09T12:50:52Z,i agree with jprichardson that we should be careful not to add too much extra functionality to electron-mocha; most users just want to effortlessly use a regular mocha setup with electron after all. having said that. i understand that this is a pretty cool feature for unit testing code for the web. perhaps we can simplify the approach a little bit. though. to ease the maintenance burden?just thinking out loud. but could you. for example. `--require` a module that adds script tags to the head of the page? (for this to work we'd probably also need to make sure `mocha.run` waits for dom ready.)if this works. we could add the `--scripts` option but simply have it add the script tags (it could run right after the current requires). in particular. i would much prefer to keep the static index.html as is and not to open all the script files ourselves (using script tags with a src attribute instead) as it makes debugging much easier. if this works. we'd be able to expose the same feature with very little code. orbitbot do you think that would work or am i missing something?,neutral
jprichardson/electron-mocha,mocha,2016-04-09T14:48:44Z,i'd gladly make this simpler if there's a reasonable way of doing it. a separate module didn't come to mind initially. but i can't immediately see how something outside electron-mocha itself would work.> just thinking out loud. but could you. for example. --require a module that adds script tags to the head of the page? (for this to work we'd probably also need to make sure mocha.run waits for dom ready.)> > if this works. we could add the --scripts option but simply have it add the script tags (it could run right after the current requires). i'm not sure on how electron handles scripts with source attributes. but it's worth testing. if the source attributes don't work then it should still work by basically using the same logic as in the modified `index.js` in this pr on the page itself. but in that case nothing much has been achieved with the changes.> in particular. i would much prefer to keep the static index.html as is and not to open all the script files ourselves (using script tags with a src attribute instead) as it makes debugging much easier. well. hopefully your existing tests would explode at reasonable places. but i guess this way it might be possible to get better stack traces for errors.i can have a go and open a separate pr or report back with results.,negative
jprichardson/electron-mocha,mocha,2016-04-10T11:37:46Z,orbitbot ah. i just tried the same thing over at inukshuk/electron-mocha#scripts -- would you mind calling the option `preload` and have it work exactly like `require`. i.e.. you can use it multiple times instead of a comma separated list?,neutral
jprichardson/electron-mocha,mocha,2016-04-10T16:03:10Z,add tests for mocha.opts. --require. and --preload. reorganize test files to make them easier to call.add tests to run scripts.,neutral
jprichardson/electron-mocha,mocha,2016-04-10T16:27:36Z,hi madarche is this still something you would like to see merged? i am sure this can be helpful. but i think it might be a better idea to put this into a separate repository where it can be maintained separately (or at least pinned to a specific electron-mocha release so we don't have to worry about breaking anything).(also. i'm not sure what you mean by 'renderer view' exactly),neutral
jprichardson/electron-mocha,mocha,2016-04-10T17:17:38Z,by 'renderer view' i mean a part of the ui of an electron app. that is an html page as spawn by the main process through a renderer process (typically like `main_window.loadurl(an_html_page_path)`.for example atom is an electron app. and a developer could want to test the menus of this app (for example to test that when the user clicks on the save menu item the application doesn't crash).ideally i would like to be able to test the whole ui of the electron demo app (that is the main.js of the electron demo app could be loaded). but i don't see how to do it at least now. a less powerful and easier to develop. but still useful. approach would be to provide something like a `--view an_html_page_path` option to electron-mocha that would  `main_window.loadurl(an_html_page_path)`. what do you think?,neutral
jprichardson/electron-mocha,mocha,2016-04-11T16:11:33Z,i think that providing a framework to test electron views in this sense is probably out of scope for electron-mocha (we just want to 'run mocha tests in electron'). however. we should definitely allow for such tests to be built on top of electron-mocha.your second suggestion (providing an option to an html file) is the one i was initially thinking about as well. in theory. you could achieve something very similar now. by using `--require` or `--preload` to run a script which replaces the body of the page with the one you would like to test (you can also inject css and so on). right? alternatively. if we had the proposed `--view` option. we'd have to run the mocha setup in a preload script. while that should work. it wouldn't be a silver bullet either (e.g.. what if your electron view also depends on a preload script?) what i'm trying to say is that testing your view like this probably works already. but it requires you to set everything up before the tests are run; would adding a `--view` option really help that much? my feeling is no. but i'm happy to be convinced otherwise. just taking the app i'm working on at the moment. i'd still have to write a lot of scaffolding to set everything up. i'm not sure that i'd really benefit from having the `--view` option. what do you think?the first option is intriguing. too. but i doubt that we could set this up in a generic way either. for instance. what if your app depends on command line parameters to be called? regarding the examples. i don't know what jprichardson thinks. but i'd prefer this to go into a separate repo or into a gist. we could add a link to the readme to make sure people looking for examples find it.,negative
jprichardson/electron-mocha,mocha,2016-04-12T07:18:10Z,thanks a lot inukshuk for your detailed answer. at first i thought that electron-mocha aim could be to test electron apps too. but as you reminded me: electron-mocha is 'just run mocha tests in electron' (which is good too :-) )reading you i reach the same conclusions as you. so this pr can safely be closed and i will look for another project that makes it possible to test electron apps.thanks again!,positive
jprichardson/electron-mocha,mocha,2016-04-12T07:20:28Z,as explained in details in #38 by inukshuk. electron-mocha is just to run mocha tests in electron. not to test electron apps.,neutral
ramda/ramda,jshint,2014-11-14T17:53:08Z,crosseye i have node already. used jshint but apparently it has different requirements. will do :+1: kedashoe i thought curryn would be more performant. wasnt sure if thats the case i guess i can switch to curry.ok cool so how would i setup the examples page. since the docs are normally generated ?,positive
ramda/ramda,jshint,2014-11-24T01:07:31Z,add npm run target for jshint. find it very handy just being able to run jshint and unit tests as npm commands. this addition just caters for developers with a similar workflow. granted. using grunt off the command line achieves the same thing but hoping there is no compelling reason not to include this mechanism too.,positive
ramda/ramda,jshint,2014-11-24T05:19:17Z,works for me.,neutral
ramda/ramda,jshint,2014-11-24T11:31:08Z,yup,neutral
ramda/ramda,jshint,2014-11-24T12:45:42Z,:herb:,neutral
pixijs/pixi.js,jshint,2016-03-30T19:32:36Z,pair of jshint. canvastinter problem,neutral
pixijs/pixi.js,jshint,2016-03-30T19:33:37Z,cheers man! :+1:,positive
pixijs/pixi.js,jshint,2016-04-04T23:06:27Z,update package.json. fix not found module jshint during gulp build . jshint needs to be installed with gulp-jshint.,neutral
pixijs/pixi.js,jshint,2016-04-05T20:20:05Z,thank you. i appreciate your advice on this matter.,positive
jquery/esprima,mocha,2015-02-12T23:27:57Z,unit tests: use a test runner to run the tests. something like karma or mocha. in fact. we should again look at what espree has done here.,neutral
jquery/esprima,mocha,2015-02-12T23:33:15Z,how's this different than #1004?,neutral
jquery/esprima,mocha,2015-02-13T00:47:02Z,sorry. missed it during a brain dump!,negative
jquery/esprima,mocha,2015-02-13T03:12:00Z,ariya. then i'll take this one and get mocha set up. expect pr tomorrow.,neutral
jquery/esprima,mocha,2015-02-13T04:20:44Z,mikesherov shouldn't you start with a test runner first (karma or venus.js)? last time i checked. maybe it's changing already these days. the standard `mocha` runner doesn't automatically run the tests in (different) browsers.,neutral
jquery/esprima,mocha,2015-02-13T16:45:26Z,> it's one less thing people have to learn about before they can contribute.this. i don't think we need to reinvent the wheel here. as long as the resulting tests are small. easily identified when failing. and can be run on node and browsers both locally and in ci. we should be good.i think using mocha. chai. leche. and karma address this issue while providing contributors familiarity.,neutral
jquery/esprima,mocha,2015-02-13T18:17:52Z,yup. all comes free with mocha/karma.,neutral
serverless/serverless,mocha,2016-04-09T12:16:00Z,addition of sc5-serverless-boilerplate and serverless-mocha-plugin to the documentation. sc5-serverless-boilerplate is a project template for test driven development of rest backends (installed using sls project install -n projectname sc5-serverless-boilerplateserverless-mocha-plugin is a plugin to ease test driven development with serverless,neutral
serverless/serverless,istanbul,2016-04-07T04:50:00Z,thanks a lot apaatsio :blush: ... i'm gonna close this pr for now since it's outdated/conflicting. we should've accepted it long time ago! really sorry :disappointed: ... we're currently discussing internally which tools should we use for test coverage and ci. should be easy to set up once we're there :)thanks again for your contribution :blush:,positive
Azure/autorest,standard,2016-03-08T20:25:57Z,maybe this is best addressed by adopting the convention that if the format is 'byte.' i.e. base64-encoded. and the parameter is a query or path parameter. then it's base64url instead of standard base64?,neutral
Azure/autorest,mocha,2017-04-26T21:56:54Z,mocha broke the build,neutral
airbnb/javascript,eslint,2015-11-23T23:02:18Z,seems like a good idea iamstarkov - but our current strategy allows one to install `eslint-config-airbnb` and use only the es5 stuff if you don't want the react deps. which is more important - lighter install weight. or reduced doc reading and install verbosity?,neutral
airbnb/javascript,eslint,2015-11-24T22:05:45Z,it's good to avoid the footgun of a falsy non-undefined value when using `||` - however. in the case of your example. where "port" needs to be a positive integer. `opts.port || 80` is actually more accurate than your "good" example. although nowhere near as precise as it should be.separately. is there an eslint rule that would enforce this?,positive
airbnb/javascript,eslint,2015-11-25T00:56:01Z,so. is there any progress here?,neutral
airbnb/javascript,eslint,2015-11-25T00:58:00Z,nothing actionable here - just add the parser setup to your own `.eslintrc`. easy enough.,neutral
airbnb/javascript,eslint,2015-11-25T01:00:00Z,got it. thank you,positive
airbnb/javascript,eslint,2015-11-25T01:16:52Z,> our current strategy allows one to install eslint-config-airbnb and use only the es5 stuff if you don't want the react deps. which is more important - lighter install weight. or reduced doc reading and install verbosity?maybe then `eslint-condfig-airbnbn/base` thing should be exported to separate `eslint-config-airbnb-base`,neutral
airbnb/javascript,eslint,2015-11-25T01:20:21Z,> install eslint-config-airbnb and use only the es5 stuff if you don't want the react depsso one. who wants only to lint es5 code will get also `/base`. and one who wants to lint `es6` code will also get `/legacy`. so even now its still overloaded in terms of install weight and time. and finally everyone gets react rules (for free. of course),negative
airbnb/javascript,eslint,2015-11-25T01:25:03Z,what about splitting in three packages?- `/base` will become `eslint-config-airbnb` with removed `/legacy` inside- `/legacy` will become `eslint-config-airbnb-legacy`- `eslint` will become `eslint-config-airbnb-react`. extended by `eslint-config-airbnb` with `eslint-plugin-react` in deps. (not sure eslint will pickup `eslint-plugin-react` from here. but it should)so every consumer will get proper amount of rules and deps,negative
airbnb/javascript,eslint,2015-11-26T17:10:20Z,hmm...if it's ok with you. i'm going to try a simpler way of combining readme files. so more focus can be done on the test cases. if possible. i'd even like to auto-generate the .eslintrc. as opposed to the tests.,neutral
airbnb/javascript,eslint,2015-11-30T08:59:47Z,> separately. is there an eslint rule that would enforce this?i did not see any rule like that. it would be hard to enforce. since `||` is legitimate in certains cases (boolean operations).,negative
airbnb/javascript,eslint,2015-11-30T21:41:13Z,it seems like an eslint rule could look for assignments where the right hand side contained a `||`? there very well may not be an existing rule though.,neutral
airbnb/javascript,eslint,2015-12-01T01:26:28Z,what eslint rule applies for each rule?. it would be nice to know...,positive
airbnb/javascript,eslint,2015-12-03T01:57:44Z,peer dependencies. peer dependencies are being deprecated in npm v3. can you please remove the peer dependency and just make `eslint-config-airbnb` use `eslint` as a normal dependency or whatever.,neutral
airbnb/javascript,eslint,2015-12-03T01:58:41Z,peer dependencies are not deprecated in npm 3 (which is already out). they just aren't installed by default. currently. you need to add `eslint` as a dependency to your own project.,negative
airbnb/javascript,eslint,2015-12-03T02:03:12Z,thanks for the super fast response. and okay. i guess i'm a bit sad. because i don't actually have a dependency on `eslint` since i'm using `gulp-eslint`. so it feels a little weird that i have to have both.,negative
airbnb/javascript,eslint,2015-12-03T17:09:12Z,this unfortunately means that babel transforms i use are now marked as invalid by eslint. although i'm able to fix this with adding the parser to my eslintrc file. thought i should mention.,negative
airbnb/javascript,eslint,2015-12-03T23:41:26Z,documents corresponding eslint rules. as a developer convenience. this also opens the door for 100% coverage of our rules to a corresponding eslint rule. and to create new eslint rules if they don't exist.ljharb justjake,neutral
airbnb/javascript,eslint,2015-12-03T23:42:17Z,awesome :+1:,positive
airbnb/javascript,eslint,2015-12-06T20:33:55Z,cannot override the `space-in-parens` rule. i am using the airbnb eslint rules. but i can not override the `space-in-parens`  rule. any idea? this is my file``` jsmodule.exports = {    "extends": "airbnb".    "rules":{        "space-before-function-paren": 2.        "space-in-parens": [2. "always"].    }.    "plugins": [        "react"    ]};```,neutral
airbnb/javascript,eslint,2015-12-06T20:38:41Z,hmm. that should definitely work - you may want to file an `eslint` issue?,neutral
airbnb/javascript,eslint,2015-12-06T20:41:33Z,yep. i will do that,neutral
airbnb/javascript,eslint,2015-12-14T23:29:26Z,this issue hurts me every time i want to use eslint-config-airbnb,negative
airbnb/javascript,eslint,2015-12-15T21:17:58Z,it's not from the react plugin. it's in core eslint - i suppose it could be moved there.,neutral
strongloop/strong-tools,eslint,2015-12-24T19:04:07Z,switch to proper eslint config. also extracts the usage message from the `slt` command itself to allow for easier formatting.,neutral
digitalbazaar/forge,karma,2016-09-16T22:21:39Z,yes. we know this is a major issue.  i got tasked with trying to figure some of this out and just haven't had the time to finish it.i took a similar approach to this patch but tried to change less lines of code and keep a similar style to what already exists.  basically loading files adds to the existing apis in the forge object.  removing the boilerplate and going towards basic commonjs with minimal other changes did work.  got it to work in node and with webpack and browserify for full and partial builds.  and got tests to work across various browsers via karma too.  unfortunately i ended up with too many options and froze on how best to deliver all this.one problem is how to manage the generated code.  currently you can mostly just run forge in all environments as is.  with the commonjs changes the browser users would need to to generate js and min.js for themselves or we'd have to commit it to a repo.  i find it awful to have to generate and check in huge js blobs on every commit or even every release.  i'm unsure what to do about that.  jquery uses an external repo for the built code.  in the past we've also stayed away from building the code for people due to the theory of not wanting to be responsible for generated code.  no one is going to look at huge js or min.js files to see if there are backdoors put in by forge maintainers or minifiers or whatever.  in a security minded library this seems like a real concern.  perhaps this is paranoid but we decided to not deal with the issue and let people use tools they trust.  but if all browser users will now have trouble using the library without fancy tools. maybe we have to figure it out.i'll try to find the time to clean up what i was doing and throw it into a branch for people to look at.,negative
chaijs/chai,mocha,2012-08-21T17:34:15Z,:)my use case is a little bit different. i want to do this on a very global level. where before i run _any_ test. the assertion counter (or flag) is reset. and after the test has run the counter/flag will be checked to see if it was hit at all. i use chai with mocha. and it's very easy to hook into before and after each test. but well in there i have no idea what to do with chai. i suppose solving that problem will inherently give you a correct counter as well. since you'd have to know whenever _any_ type of assertion were made. am i making any sort of sense? i feel like i might be confusing things.**edit**: the benefit of having a global counter or flag is of course that i can then make sure to fail any tests that didn't make any assertions at all. it happens a little bit too often that i misspell the code and mocha happily reports these tests as a-ok. which is clearly not right.,negative
chaijs/chai,sauce,2013-04-14T22:52:52Z,i understand and agree with most of your points. i saw the `test/browser/sauce.html` and figured that was something relevant.`testling-ci` is still pretty young as well and has a long way to go. it lacks per-branch testing and per-browser test cases (although that is an edge case itself).as far as the current badge goes. did you want me to pull out the failing browsers or leave them in there as an indicator? i know thanpolas and i had mixed opinions on it.,negative
algolia/vue-instantsearch,eslint,2017-06-14T14:25:04Z,chore(eslint): use eslint-config-algolia. in our way to make this module part of the instantsearch family. onepart of it is to use our eslint-config-algolia and enforce it.some rules are currently disabled on some parts that will need to berewritten.,negative
algolia/vue-instantsearch,eslint,2017-06-14T14:25:25Z,is there a dedicated eslint plugin for vue? we are using eslint-plugin-html,neutral
algolia/vue-instantsearch,eslint,2017-06-14T14:26:33Z,also updated all deps,neutral
algolia/vue-instantsearch,eslint,2017-06-14T14:50:47Z,> did you check all breaking changes of the dependencies?yes i checked the changelogs and could not find anything obvious or that should break for us.,neutral
algolia/vue-instantsearch,eslint,2017-06-14T14:51:06Z,did you try eslint-plugin-vue?,neutral
algolia/vue-instantsearch,eslint,2017-06-14T14:51:52Z,no i tried none of them ;) because haroenv told me about the algolia setup and i didn't know how much it was going to conflict,negative
algolia/vue-instantsearch,eslint,2017-06-15T21:56:29Z,updated pr to only include eslint changes and no other package upgrade.,neutral
algolia/vue-instantsearch,eslint,2017-06-16T07:51:49Z,this should be ready to merge now. only drawback being that `<script>first line` being automatically formatted.this is being sovled by prettier/eslint/vue right now but ultimately you don't have to think too much about it. it's automatically reformatted.,neutral
velesin/jasmine-jquery,jasmine,2013-04-27T03:01:04Z,thanks.,positive
velesin/jasmine-jquery,jasmine,2013-04-27T20:16:56Z,thanks!,positive
velesin/jasmine-jquery,jasmine,2013-04-28T02:31:09Z,can you make some tests please?,positive
velesin/jasmine-jquery,jasmine,2013-05-02T15:37:22Z,testing css transitionend . i'm trying to check if function on the end of a css transition:``` coffeescript$("#test").on "transitionend mstransitionend webkittransitionend otransitionend". (e)->      console.log "trans end"```and tracking it in the jasmine test like so:``` coffeescriptdescribe "checks when animation finished". ->      beforeeach ->        loadfixtures "carousel"        trans = spyonevent('#test'. 'transitionend mstransitionend webkittransitionend otransitionend');        jasmine.clock.usemock()     it "should check when transition ended". ->        expect(trans).not.tohavebeentriggered()        jasmine.clock.tick(1001)        expect(trans).tohavebeentriggered()```i've added styles into a spec.css. the code fires in the actual html. but i can't get it to fire in the test.  i'm not sure runs or if i am missing a good way to test it?,negative
raszi/node-tmp,mocha,2017-07-11T17:59:02Z,tmp.dirsync and tmp.dir behave differently on invalid tries option. found during refactoring tests with mocha #137 #141dirsync will handle -1. undefined. 0 and null as expected while dir will only handle -1 as expected. failing on 0. undefined and null.,negative
raszi/node-tmp,mocha,2017-07-11T18:16:30Z,in germany we say `messen kommt von mist`. same goes for testing.,neutral
raszi/node-tmp,mocha,2017-07-13T18:35:06Z,raszi you're welcome. the existing tests that spawn child processes are still missing. i need to go through the code to find out how to do it with mocha...,neutral
videojs/video.js,standard,2016-03-15T15:52:50Z,there is no eta. unless we decide not to merge this (low probably right now and seems simple enough). the main blocker is us testing and verifying it. once we can do that. we can merge it in.,neutral
videojs/video.js,standard,2016-03-17T16:16:17Z,yeah. testing the swf is very tricky. we've generally ended up verifying things manually.,negative
videojs/video.js,standard,2016-03-19T11:22:45Z,same issue .full screen button not working  when using videojs in phonegap .plz anyone help me thanks in advance,positive
videojs/video.js,standard,2016-03-25T07:33:03Z,hi.any one can help me to resolve full screen issue .i m facing issue in video full screen,positive
sitespeedio/browsertime,selenium,2014-11-03T12:16:12Z,start/stop browsermobproxy & the selenium server outside of browsertime. one cool feature would be if the browsertime.js (running without cli) would expose methods for starting/stopping the bmp & the selenium server. then when we run bt from sitespeed.io with many url:s. we will not have to wait for start/stop time for each run.,neutral
danigb/soundfont-player,uglify,2016-01-09T01:29:35Z,add missing dependencies. hi. i wanted to run the examples locally and `npm install` failed because `note-parser` wasn't in package json. it also failed because i don't have `browserify` and `uglifyjs` installed globally. so i added those as devdependencies so it's not necessary to already have them globally installed.,negative
danigb/soundfont-player,uglify,2016-01-09T20:13:27Z,no problem. thanks for the quick response. and also the library!,positive
jerairrest/react-chartjs-2,mocha,2016-08-18T23:03:36Z,hey lutovich .i have been using mocha so far. but would be more than happy to checkout jest.if you have code by hand please be kind to submit a pr and i'll take a look.cheers!,positive
prettier/prettier,eslint,2017-01-11T03:00:02Z,less/no config. autofix for everything babel supports (like babel-eslint). however only deals with styling unlike eslint (a linter + autofixer). accounts for max-line-length automatically,positive
prettier/prettier,eslint,2017-01-11T05:01:11Z,it's an alternative to enforcing style by configuring a lot of little "nits" in eslint. and instead just forcible re-printing everything. if you are using xo which is built on eslint. it's depending on eslint's `--fix` behavior which doesn't actually fix a wide array of style. for example the stricted eslint config i know happily passes all of these:```jsfoo({ num: 3 }.  1. 2)foo(  { num: 3 }.  1. 2)foo(  { num: 3 }.  1.  2)```prettier always ensures that 100% of your code is formatted consistently. i hope you try it out. and it's fine if it's not for you!,positive
prettier/prettier,eslint,2017-01-11T18:06:05Z,any chance we could start small with what tehshrike suggested?> why not just leave semicolons alone. rather than adding or removing?as an option. so: `addsemicolons` which would default to `true`actually. this would be enough for me. as `eslint --fix` will remove semicolons for me anyway. so if prettier misses removing a semicolon. eslint will do it. so if i had the ability to prevent prettier from adding semicolons then i'd be good :),negative
prettier/prettier,eslint,2017-01-11T22:24:03Z,> single quote settings should not affect jsx attributes. i've never seen anyone write `<div classname='a' />`i've definitely seen this. usually in any react codebase where eslint was set to single quotes.,neutral
prettier/prettier,eslint,2017-01-12T13:59:18Z,lint like ci integration. i've been using scalafmt at work which has a feature that you can enable to prevent it from compiling the code if it's not properly formatted. this prevents code from going through ci if it's not properly formatted.obviously this is a huge feature which would require first of all the ability to run prettier on a directory instead of a single file at a time. but i think it could be a great addition.humans are known to be bad code formatters. so code will get through review even if it's not formatted properly. my dream is that this could replace eslint (code formatting rules). and in order to do that i feel like it would have to have some linting mechanism that it could break ci if it's not formatted on commit.maybe i'm reaching way to far here. just wanted to put the idea out there.,positive
prettier/prettier,eslint,2017-01-12T15:56:16Z,i'm going to reach even further.i imagine a workflow where prettier is run using something like a precommit hook. i check out the code from the repo. prettier formats the code to whatever my preference is. then on commit it formats the code back to a common format for git diffing. for example. if my company's coding style requires i use semicolons but i personally don't like them. i can simply hide them when working on code in my editor. but when i commit they will automagically be put back in and nobody's the wiser (especially git),positive
prettier/prettier,eslint,2017-01-12T20:39:17Z,yep! all of these are great ideas and what i envision this becoming. it actually shouldn't be too hard; we already support passing in multiple files (so people are doing `prettier src/**/*.js` to lint whole folders). we could easily make it "check" if all files are formatted instead of doing the actual formatting (a `--check` flag instead of `--write`).> for example. if my company's coding style requires i use semicolons but i personally don't like them. i can simply hide them when working on code in my editor. but when i commit they will automagically be put back in and nobody's the wiser (especially git)this is exactly the kind of thing this project empowers you to do. and it's a great idea. it's also why we won't ever have a project-wide config file; one of the reasons those exist is so things like editors can pick them up and automatically set the right formatting settings in your editor. but we don't care about that. you can format the code with whatever settings you personally like across *any* projects. and just make sure that the project reformats it with the project-specific settings before commit.tooling integration will be the next step after we fix all the show-stopping issues where we generate invalid js code. that's higher priority right now. but we'll think through this soon.,positive
prettier/prettier,eslint,2017-01-12T23:01:39Z,i've done something like this for webpack. ci checks if source code is equal to beautified source (using js-beautify). if not ci fails and prints a diff (in patch format). works great to ensure all source code is consistent.,positive
prettier/prettier,eslint,2017-01-13T00:07:49Z,i would really love to use this if i can get prettier to output code that will pass my large corporate eslint rules. right now. it looks like the two issues i have are spaces between array braces [] and contents `[ 1. 2. 3 ]` is output but my lint hook requires `[1. 2. 3]` and no semicolon ending the last line of code. so i get `})` instead of `});`,positive
prettier/prettier,eslint,2017-01-13T02:07:23Z,jlongster . sorry. i wasn't clear about the 2nd issue. after i run prettier. i lose the semicolon on my last line of code. that's the issue i was running into. i need every statement to end with a semicolon. including the last one. maybe that's actually a bug then? i can type up an example case for you if so. if i can get your tool to pass our eslint requirements. i might be able to integrate it into our build process and save our hundreds of developers the daily headache of trying to fix lint issues.,negative
prettier/prettier,eslint,2017-01-13T04:00:53Z,hey nzakas. thanks for the kind comment! first i want to say that i hope i never came off as disrespectful towards eslint. i wrote my post and readme to focus on a specific problem that i've seen in teams. but nothing that is the fault of eslint. since this project has taken off and i want to be a good citizen of the ecosystem. i plan on updating the readme to not call out eslint specifically to make sure it doesn't look like we're bashing it.i can definitely see how eslint evolved that way. a pluggable system like that is incredibly hard to build and maintain since you're scope is broad. but the advantage is that it's flexible and serves hugely diverse set of needs. kudos to that!i really like the rules that enforce certain semantic characteristics. and having time to think about it more. i'd like to talk more about how we can make it easy to integrate prettier and eslint. i think this could solve the semicolon debate. too: if i can generate code with semicolons and pass it through eslint's fix process with the "no semicolon" rule on. people who really don't want semicolons could set that up. that allows this project to be focused and opinionated but leverage eslint's flexible toolchain.of course. the main use case for integrating would be to use eslint's other rules for semantic checks. it makes no sense for us to reinvent that (nor am i interested in it).is there a place we can talk about integration? it's easy in theory. but the devil's in the details. and i'm particularly concerned about performance because a naive `prettier foo.js | eslint --stdin` probably parses the source twice.> i'd also strongly encourage you to avoid trying to read eslint configuration.thanks. that helps clarify a lot. i had a hunch that it would be difficult. and someone else can create another project that attempts this and passes in the detected options to us if they want. i don't plan on doing this.> that said. the eslint team has discussed in the past creating a generic style guide format that wasn't directly tied to individual rulessounds neat! as you said afterwards. i'm not sure how that would tie into this yet. unless there are a few tweaks we could make to all be on the same page. i'm definitely open to talking about it (not just me. but many other people that are getting involved too. i don't have any interest in deciding these rules for other people. i'm seeking the majority).> in any event. i just wanted to reach out to let you know that we're happy to be a resource for you as you get this project up and running. between the eslint and jscs teams. we have a lot of experience in this area. so feel free to reach out any time.thanks! much respect and love to you all. i look forward to collaborating!,negative
prettier/prettier,eslint,2017-01-13T14:09:51Z,kentcdodds that looks cool. that's what i'm aiming for -- keep this project focused and let editor integration be where things like that happen.i'm curious: is the only reason you want it dropping semicolons? for large files. i believe that will be pretty slow. i'm not happy with prettier's performance itself on ~2000 line files (it's not terrible. something like 600ms. but i want to improve it). i'd like the formatting to feel as instant as possible. and eslint seemed to add another 1s on the large file when i tried it.,positive
prettier/prettier,eslint,2017-01-13T18:18:05Z,that's certainly an option. as is continuing to use eslint as the majority of the ecosystem does. forking.  however. will not likely help achieve the goal of "gofmt for js",neutral
prettier/prettier,eslint,2017-01-13T19:09:50Z,fragmentation already exists. configuration/extensibility is how you reduce fragmentation by allowing everyone an easy path to get on the same tool. as eslint has done. adding another opinionated tool to the mix doesn't reduce fragmentation. it increases it.,negative
prettier/prettier,eslint,2017-01-13T19:40:24Z,> fragmentation already exists. configuration/extensibility is how you reduce fragmentation by allowing everyone an easy path to get on the same tool. as eslint has done. adding another opinionated tool to the mix doesn't reduce fragmentation. it increases it.i would bet this project will not increase fragmentation if we stay zero config. from what i've seen. many people using small variants of different eslint config have been happy to jump on this and there's been less fragmentation so far. i agree that a few options (like the ones we have) help bring everyone together. but there are still certain ones that we won't include (like semicolons) but the community is already fragmented on those (people can use standard if they want).,negative
prettier/prettier,eslint,2017-01-13T22:02:49Z,i'm agree with jlongster that it is not main priority. there are existing workarounds.kentcdodds and dtinth such things don't make any sense for me. sorry but they were unnecessary. :)i think it was just enough to think that _"the formatter should be first. the linter should be second"_.kentcdodds. btw. side note: ci is failing because you missed `eslint` in deps. and don't see value for atom or sublime plugin. why not just use `prettier` plugin and `linter-eslint` it works great as i already mentioned.,negative
prettier/prettier,eslint,2017-01-16T04:37:29Z,despairblue thanks a lot for this. my gut feeling. which i mentioned in #212. is that this is going to introduce several awkward situations when combined with other syntaxes. take a look at the first diff in vjeux's example:```patch-      return observable.concat(-        observable.of(editor).-        this._newproviderevents.mapto(editor)-      );+      return observable+        .concat(observable.of(editor). this._newproviderevents.mapto(editor));```if we enable breaking on `.`. no matter how do it. the above is going to happen. this is because it exists before the method call. we cannot try inner expansions first because it would be horrible for performance and adds a *lot* of complexity. we do it in a very few other uses cases but it makes the code a lot harder to understand (i think in 2 places we use `conditionalgroup` for this). and i think even if we tried it. we would get mostly back to where we are now. it's just not worth the complexity.the maximum line width at the end of the day is a suggestion. the printer will happily print past it if there's nothing it can do. there's only so much we can do to break things up. if the user has a really long lookup. they should break it up into multiple lines. i think in all of the edge cases we are trying to fix here. the user should just fix their code if they really don't want it all on one line. i think forcing them to introduce intermediate variables could actually help clarify code.as for comments. yeah. inline comments are very weird and will do things like trigger breaking at certain points. the user can manually move them up if they don't want that.i don't think this is the right direction to take. `.` is such a pervasive operator in js that breaking on it introduces a whole new range of formatting situations that we have to handle and i don't think we should go through the work to do that. you original real code looks fine to me. even if it crosses the threshold:```jsfunction* sendmail() {  try {    const pdfstream = yield contractsservice.getlandlordcontractstreamfrombooking(      booking    );  } catch (error) {    report(error);  }}```the great thing about this formatter compared to eslint is you don't really have to worry about it when this happens. you just have one line that's pretty long. that's ok. we won't consistently warn you about it like eslint and force you to disable the max-len rule just for that line or anything. that line can just be a little longer :),negative
probot/stale,standard,2017-08-27T05:01:30Z,update probot and swap to standard lint. since stale is the most popular probot app. i figured it should be the first to swap to standard lint!also. this was my first time bumbling around in stale so i wasn't sure the best way to test i didn't break anything,negative
sequelize/sequelize,jasmine,2012-11-05T13:36:53Z,haven't worked with jasmine before but should be fine. should i add it in /spec or /spec-jasmine?op 4 nov. 2012. om 20:29 heeft sascha depold notificationsgithub.com het volgende geschreven:> —> reply to this email directly or view it on github.,positive
sequelize/sequelize,jasmine,2012-11-05T19:58:59Z,actually. this test already exists. and works for postgres. mysql and sqllite. it is in: spec-jasmine/dao.spec.jsand is 'only updates fields in passed array'by this test still passing it proves this is working (along with the other modifications i made).  being able to test array columns is way out of scope for this and should only be used by people who want to twiddle with this and figure out what is going on.as i said above this really will help people so that they know when running their tests (outside of sequelize) that their updated values in postgres were really updated and reflected in their model.i did go ahead and fetch upstream again as well.,neutral
sequelize/sequelize,jasmine,2012-11-06T12:22:10Z,sdepold i wrote tests in **spec-jasmine/sequelize.spec.js** because there's existing section for 'define' which is not in **spec/sequelize.spec.js**.if you want it to be under **spec/**. please let me know if entire 'define' section or just new tests need be moved.,positive
sequelize/sequelize,jasmine,2012-11-06T19:10:58Z,the tests for jasmine are good enough. i will convert them in the future. thanks for the pull request!,positive
sequelize/sequelize,jasmine,2012-11-06T23:55:31Z,the test suite is confusing me. there are two directories - `spec` and `spec-jasmine`. to confuse things further there are two testing tools in use - jasmine and buster.are any of these directories/tools "legacy"? where do i put my test and what tool do i use?,negative
sequelize/sequelize,jshint,2015-10-13T08:09:44Z,ok just found the `make test-unit` command to bypass jshint,neutral
sequelize/sequelize,jshint,2015-10-13T08:10:56Z,jshint checks for syntax / style errors. but it should also output the actual error. unless it's not installed properly?,neutral
TryGhost/Ghost,mocha,2014-03-04T22:40:46Z,same thing happens with mocha which is why the mocha task is weird btw,neutral
PeterStaev/NativeScript-Drop-Down,uglify,2017-05-01T05:51:34Z,removing angular from uglify excludes.moving initial `setselection` for android to `initnativeview` to solve error in some contexts of `cannot read property ‘setselection’ of undefined. undefined`.,neutral
dmvaldman/samsara,eslint,2016-02-05T22:45:44Z,i am not very familiar with samsara and its structure. nor with how developers would benefit from importing only a few modules and not the whole library. but the es2015 syntax for modules allows the importation of specific object inside modules:  `import { surface } from 'samsara'`is this what you mean?regarding the implications of moving to es2015: it would indeed probably mean adding a 'tasks' folder. with the webpack config file and a basic express server. but in my opinion. it isn't too bad of a requirement / feature. the dev workflow with webpack. especially when combined with hot reloading and eslint. is really nice and productive. i have set up quite a few projects with webpack / babel lately. so i could help you moving forward with it if you want.,negative
nightwatchjs/nightwatch,mocha,2015-04-17T14:56:31Z,i hope that the `--testcase` cli argument is good enough for now? otherwise re-open and state your use case.,positive
linkedin/dustjs,jasmine,2012-08-16T09:13:03Z,was just working on the error throwing thing. my question is. how do i write jasmine tests that check if an exception has been correctly thrown? thanks!,positive
linkedin/dustjs,jasmine,2012-08-22T13:46:12Z,jairodemorais has already split the tests from rgammar/core and helpers.closing this,neutral
linkedin/dustjs,jasmine,2012-08-28T19:15:30Z,1- both runs the same suit. but dust core unit test are inherited code. we are using jasmine for browser and nodejs code.2- make jasmine runs the jasmine test. make test runs the inherited tests.3- we could fix the make file to use cover from the node_modules folder.4- agree.,neutral
angular-fullstack/generator-angular-fullstack,karma,2014-03-07T00:06:56Z,chrisblazek if you create a completely new app. it should scaffold the karma.conf correctly using the `test/client` folder. you may need to update your `generator-karma`.,neutral
angular-fullstack/generator-angular-fullstack,karma,2014-03-10T11:08:45Z,i stumbled over the same conflict but it is possible to install them in parallel if you install in a certain order:1) if installed uninstall the generator-angular-fullstack and the generator-karma: npm -g uninstall ...2) install generator-angular3) install generator-angular-fullstack^^^^ this installs just fine but i have not checked if there are any problems with karma  development time.,positive
webpack/webpack,standard,2016-05-10T03:44:59Z,could you try upgrading to standard 7? feels like a standard related bug to me.,negative
webpack/webpack,standard,2016-05-10T03:57:34Z,ok. the next step would be digging into eslint. maybe logging near the offending line would give better insight. it might stem from standard-loader configuration somehow so that's another place to inspect.,neutral
webpack/webpack,standard,2016-05-10T13:55:20Z,ok. you could consider reporting this upstream to `standard-loader`.,neutral
webpack/webpack,standard,2016-05-14T13:05:56Z,simenb look like in your case a custom cli tool for the build is more suitable. you basically build one. you can just move the cli stuff from the `webpack.config.js` into a `build.js` and start webpack from this file (by using the node.js api).there were a couple of reasons why i decided to disallow custom arguments:- webpack can error when passing incorrect or deprecated cli arguments. this should help users when using the cli.- webpack.config.js is a "pure" module. input -> output. it should not read stuff from the enviroment.- new tools can emerge which can use the webpack.config.js. examples:  - split the build process into multiple processes. each calling the webpack.config.js. this would not work if the webpack.config.js reads the arguments.  - build combinations which call the webpack.config.js which different combinations of options. a standard format of passing arguments to the webpack.config.js helps a lot here.  - etc.,negative
webpack/webpack,standard,2016-05-18T10:13:03Z,`npm install --save-dev style-loader` and `npm install --save-dev css-loader` make it working for me. looks like these modules are no longer a part of standard bundle.,neutral
webpack/webpack,uglify,2017-09-02T14:32:28Z,working on a minimal repro and haven't been able to trigger it yet.  on my real application. uglify-es is minifying webpack's output: ```jsvar async = __webpack_require__("./store/middleware/async.js")```to ```jsvar t=["e"];```unsure if webpack. uglify or something else is at fault.  will follow up.,negative
webpack/webpack,uglify,2017-09-07T20:02:15Z,this should respect the `devtool` setting. or at least detect that `devtool` is set to produce source maps and emit a warning if the equivalent uglify plugin option is not set.,neutral
webpack/webpack,uglify,2017-09-10T14:51:55Z,issue was closed because of inactivity.if you think this is still a valid issue. please file a new issue with additional information.,positive
gsklee/ngStorage,karma,2015-03-07T00:01:08Z,npm install ng-storage is huge!. `npm install ng-storage` installs all devdependencies. which is 50mb of filesplease can you consider moving all the grunt and karma stuff and so on into devdepencies?,neutral
gsklee/ngStorage,karma,2015-03-07T09:28:25Z,this repo is not maintained by the owner. please find an alternative: angular-locker for example.,neutral
gsklee/ngStorage,karma,2015-03-07T09:35:42Z,what do you mean by 'the owner'?  you mean. you are an onlooker. who monitors the issues in this project a bit. but you are not the owner. and neither you. nor the owner. are maintaining ng-storage?(edit: seems like you have a fork. but your fork is not published to npm either? any chance you can publish your fork to npm. in such a way that installing it into a project is not going to drag in 50mb of dev dependencies each time? :-p),neutral
gsklee/ngStorage,karma,2015-03-07T13:06:11Z,yes. you are right about me. i am looking after this project and guiding people to find an alternative because the owner is not responding anymore. i've used ngstorage for a single project and had to fix some annoying bugs to finish the project. i found later that the way ngstorage is built is not the best way. you'd better have a service for a storage layer. be it localstorage or a database. the architecture is the same. so i don't maintain ngstorage because there are better and more complete and maintained alternatives to do the same thing better way.if you still not convinced and want to use ngstorage. you can do the necessary changes yourself. just fork my fork. make changes you want. then install directly from the github url. not from the npm registry. that's how i used my changes for my project.,negative
gsklee/ngStorage,karma,2015-03-07T13:54:17Z,hmmm. ok.  ng-storage is easier to use. but if it's going to be buggy. then. fine. i already have a dozen or two repositories to my name. and don't want to spread myself too thinly...for now. i will just do what i did in the end: just directly added ngstorage.min.js to my project. rather than adding it to project.json or bower.json.,negative
prebid/Prebid.js,standard,2017-07-31T13:18:34Z,removed the standard/object-curly-even-spacing eslint exclusion. ## type of changecode style update (formatting. local variables)## description of changeremoved the standard/object-curly-even-spacing eslint exclusion for #1206,neutral
prebid/Prebid.js,eslint,2017-07-25T17:59:02Z,swiiip it looks like the build is failing due to linting errors. can you rebase 1 more time please and run `eslint --fix` on your file (or use your favorite editor to lint fix).,positive
prebid/Prebid.js,eslint,2017-07-31T13:12:22Z,remove new-cap eslint exclusion. ## type of changecode style update (formatting. local variables)## description of changeremoving the `new-cap` eslint exclusion for #1206,neutral
vega/vega-lite,mocha,2015-07-19T17:52:12Z,line numbers in mocha are all incorrect. .. this is quite annoying for debugging tests ...,negative
pouchdb/pouchdb,jshint,2013-07-31T02:38:57Z,so i am less certain about this now. browserify doesnt look to love the idea of having optionally loaded modules for browser vs node. most of the things it is used for seems to write abstractions underneath node libraries (like backing leveldb with idb) but that isnt an option for uscurrently refactoring everything so we rely much less on globals and expose each file through an individual object. a nice way to check is that the jshint global definitions should match the optional require statements and the code inside the node check should only ever be requires. once that is true then it should be pretty trivial to test browserify,positive
pouchdb/pouchdb,sauce,2012-09-25T02:41:26Z,some more work on the ci tests. updating the qunit. this helps to watch the results in saucelabs as the current tests info stays on the top of the page.  starting to store test results in the db to be aggregated,neutral
pouchdb/pouchdb,sauce,2012-09-25T04:30:40Z,dont merge this yet. i have a few changes to make on my fork to get it perfect. just wanted to show what is coming...,neutral
pouchdb/pouchdb,sauce,2012-09-25T04:47:20Z,btw. this is messing up the ci tests...i have a support request in with saucelabs to see if they can help. i am guessing there are switches you can start the browser with to disable those security prompts.,negative
pouchdb/pouchdb,sauce,2012-09-28T16:00:05Z,few notes. now that i understand this i will help towards getting it done. just writing down some notes for stuff that should get done. i will do them later or you can. see who gets there first :pnode_modules should be committed to the repo. cors-proxy should be as well. we should split out the actual test files from the utility stuff that tuns the tests,positive
pouchdb/pouchdb,sauce,2012-10-02T01:05:10Z,dale. i think we need to get a subset of the tests to run on suacelabs. lets start small and work up. i would rather have a small set of tests that work as opposed to the massive set currently that is really flaky. can i get you to do some basic smoketests that check if large grain things work?,neutral
pouchdb/pouchdb,sauce,2012-10-07T13:35:53Z,make sure travis only triggers a single build at a time. to make sure we provision the saucelabs vm's properly we want to make sure that only a single test run is executing at any timethis means that multiple commits or pull requests defer their tests until the previous run has completed.sounds tricky,neutral
pouchdb/pouchdb,sauce,2012-10-16T03:52:58Z,minor refactor of saucelabs linting errors,neutral
vlucas/frisby,jasmine,2013-09-02T01:22:21Z,never mind. using --captureexceptions revealed a socket hang up(no idea what that is. but i guess it stops frisby/jasmine from finishing properly.),negative
vlucas/frisby,jasmine,2013-09-11T20:35:52Z,oh looking at past issues. looks like it fires but doesn't report due to jasmine-node.,neutral
mojotech/pioneer,selenium,2014-12-15T14:21:16Z,better errors details. i just got```c:\t\node_modules\pioneer\node_modules\selenium-webdriver\lib\webdriver\promise.js:1643      throw error;            ^assertionerror: expected false to be true```what is going on? i don't even know what failed... not even the line... nothing.,negative
mojotech/pioneer,selenium,2014-12-15T14:30:04Z,without looking at your code it is hard to help with this error.,negative
mojotech/pioneer,selenium,2014-12-15T14:53:11Z,the problem was very easy to solve because i just had a test. this is not the question. the issue is why the lib doesn't show the file and the line where the error happened?,negative
angular/protractor,jasmine,2015-11-01T15:23:54Z,test(jasmine): add failing test for custom matchers on a not-present element. custom matchers fail if used on an element that is not present (not in the dom). but only if used more than 2 times.this specs show this. will open an issue after the travis build fails.,negative
angular/protractor,jasmine,2015-11-01T23:27:32Z,thanks for bringing this up. i feel like this is better handled in the issue you opened unless your pr is updated with a fix; you could still keep your fork as an example. i'll defer to an actual maintainer on that though :),positive
angular/protractor,jasmine,2015-11-02T06:46:12Z,i made the pr so that the maintainers could easily see how the specs are failing on the travis build. it's not intended to be merged.,negative
angular/protractor,jasmine,2015-11-02T16:41:02Z,i found the bug. i think.the bug was in `jasmine-core` module.`jasmine-core` was not able to throw an error (a 'file not found' on an imported file) because it does not consider the scenario in which the suite  is `undefined`.i think the suite  was `undefined` because who invoked `jasmine-core` was in `beforeall()` method (that was outside of any `describe()` ).like the following:```beforeall(...);describe('first suite'. function(){  ...});```,negative
angular/protractor,jasmine,2015-11-10T19:55:22Z,thanks for the actual example. this is helpful. this smells like a webdriver control flow issue - let me try it with the latest master.,positive
angular/protractor,jasmine,2015-11-10T21:11:36Z,with the latest webdriver. this does not give the element not found errors. instead. it occasionally errors because it doesn't grab the correct text from the element. the problem isn't deterministic. however. the failures only occur when doing the animation toggle. so i think that the issues are with waiting for the animation. not with the custom matcher.can you reproduce on master with something other than the animation toggle?,negative
angular/protractor,jasmine,2015-11-12T11:15:56Z,i ran my test suit on the master branch of protractor and it didn't have this issue anymore.i'll close the issue.are you interested in merging in any of these specs (once a proper wait for the animation has been added)?myself. i feel like protractor test suit could benefit from specs on custom matchers. in file dedicated for that. since currently there is only one spec for that.,positive
angular/protractor,jasmine,2015-11-12T20:56:58Z,sure. i'd be happy to take a look at a pr adding more tests. feel free to open up a new one! i don't think it has to be related to the animation stuff at all. for now. i'm going to close this since it seems to no longer be an issue.,positive
angular/protractor,standard,2015-11-10T21:31:39Z,i'm closing this as i still don't think we should be adding new. non-standard environment variables. and i'm convinced that npm already provides the tools to do this. thanks for your work (and for using protractor in your teaching!).,positive
angular/protractor,selenium,2014-10-24T10:23:38Z,after some time with the node debugger. i've discovered the problem: it's a deadlock in _webdriver_'s `flow` due to a bug in the way _webdriver_ waits for asynchronous tests to complete.i created a patch for `testing/index.js` (in the `selenium-webdriver` package) that fixes the problem. i still have to run all `webdriver` and `protractor` tests to make sure that it doesn't break anything.i'll update this ticket as soon as the fix is confirmed.,negative
angular/protractor,selenium,2014-11-06T21:40:53Z,`../../selenium/chromedriver` is the 'default' location in that it's where chromedriver gets downloaded if you use `webdriver-manager`. you should still be able to use the `chromedriver` param to specify the actual path to your location of chromedriver if it's not default. is this failing?,negative
angular/protractor,selenium,2014-11-12T09:34:26Z,browser.navigate().back() does not seem to work in tests either.,neutral
angular/protractor,sauce,2013-08-27T19:59:31Z,more sauce-related fixes. now correctly setting pass/fail status of sauce jobs. and turned up the timeout on testing for angular to deal with some ie issues,neutral
angular/protractor,sauce,2013-08-28T21:51:37Z,merged as 23e7d9562a0572223f84da47e2b361ca1b277e0c,neutral
angular/protractor,karma,2015-08-20T11:49:05Z,thanks for every one. iam very new to protractor this helped me a lot and also can any one send the links to learn protractor?,positive
ripple/ripple-lib,mocha,2013-10-30T05:14:10Z,try `node_modules\.bin\mocha test\*-test.js`,neutral
tapjs/node-tap,mocha,2017-01-20T18:43:22Z,nevermind. got it working a bit better than in v9. actually.  just had to drop the `t.current()` dependence.,negative
tapjs/node-tap,mocha,2017-01-26T22:39:36Z,good point about console.log or other statements interspersed with the tests.  i personally haven't realized the usefulness of synchronous relationship between code inside and outside of the tests. (and i would love to see the cases where it is important... really and sincerely mean that.  i'm not doubting that it is super useful. just saying i haven't seen the need yet in my testing.) having the bodies of the tests themselves synchronous in relation to each other. has been all i needed so far:so for the example above. i would do:```javascriptvar t = require('tap')t.test('child'. function (t) {  console.log('before')  t.pass('this is fine')  t.end()  console.log('after')})```but i would be happy to enrich test-kit to allow synchronous statements outside the tests:```javascriptt.log('before')t.test('child'. function (t) {  t.pass('this is fine')  t.end()})t.log('after')```... where <code>t.log(..)</code> could just be a special case of a general hook we could make:    t.sync(function() {...})that executes statements sequentially/synchronously with respect to the tests.  (i agree very much with your earlier point that messing with console.log is a *bad* idea).as for the point about settimeout()... i'm not sure i would worry about that case because the cost of solving it exceeds the handiness of .only(). which is just there to save time when i want to quickly hone in on a test.  but if we wanted a way to hone in on certain tests. we could add another method to t that turns tests on and off by their name and/or number:t.only(1). would run only the first test.  in fact. i might want to put a statement like this at the top of the test file and eliminate all the async stuff in test-kit (make it opt-in).... hadn't thought of that until just now.  i mean it's nice to switch tests on and off right at the test. but putting the statement early in the module might be 'good enough'.,negative
benbria/coffee-coverage,mocha,2014-12-19T22:11:48Z,no. this is something else. it would allow you to avoid creating a register-handlers.js file in each project for default configurations (i.e. just coffeescript. no streamline etc.).,negative
benbria/coffee-coverage,mocha,2014-12-20T17:05:46Z,devongovett thanks for pointing this out. since the options are hard coded. how about reading these from a coffeecoverage.conf json configuration file from the cwd?in this file one could specify multiple different configurations. e.g.```{    "default" : { ... }.    "mocha" : { ... }}```with the above register script then looking for the key mocha and the command line utility looking for the key default or some other user specified key.,negative
benbria/coffee-coverage,istanbul,2014-12-17T22:41:35Z,i have tried to reuse existing istanbul reports but this always failed as istanbul uses __coverage__ for its coverage data and coffee-coverage fails on using a user defined coverage variable name specified via the -c option. see #24  for more information.,neutral
wix/tspoon,karma,2016-07-27T16:11:10Z,upgrade lodash and karma,neutral
meanjs/mean,mocha,2015-08-06T06:57:48Z,updating user model tests for synchronous test and fixing done() calls. refactoring the async nature in the user model tests to account for mocha 2 second timeouts causing travis-ci build fails,negative
meanjs/mean,mocha,2015-08-06T13:53:11Z,ilanbiala i updated and squashed. this should solve still the async/sync issue with that one test.,neutral
meanjs/mean,mocha,2015-08-06T21:21:30Z,thanks. i'll merge.,positive
meanjs/mean,mocha,2015-08-07T11:44:20Z,running "server" taskmean.js - test environmentenvironment:                    testport:                           3001database:                                "mochatest:src" (mochatest) task  article model unit tests:    method save      √ should be able to save without problems      √ should be able to show an error when try to save without title  article crud tests    √ should be able to save an article if logged in (127ms)    √ should not be able to save an article if not logged in    √ should not be able to save an article if no title is provided (55ms)    √ should be able to update an article if signed in (81ms)    √ should be able to get a list of articles if not signed in    √ should be able to get a single article if not signed in    √ should return proper error for single article with an invalid id. if not signed in    √ should return proper error for single article which doesnt exist. if not signed in    √ should be able to delete an article if signed in (70ms)    √ should not be able to delete an article if not signed in  user model unit tests:    method save      √ should begin with no users      √ should be able to save without problems (43ms)      √ should fail to save an existing user again (45ms)      √ should be able to show an error when try to save without first name      √ should confirm that saving user model doesnt change the password      √ should be able to save 2 different users (51ms)      1) should not be able to save different user with the same email address  user crud tests    √ should not be able to retrieve a list of users if not admin (57ms)    √ should be able to retrieve a list of users if admin (59ms)  20 passing (3s)  1 failing  1) user model unit tests: method save should not be able to save different user with the same email address:     error: timeout of 2000ms exceeded at null.<anonymous> (c:\users\rmlopes\meanprojects\meancegi\node_modules\mocha\lib\runnable.js:139:19)      at timer.listontimeout (timers.js:119:15)there you go. as you can see i am running this on a windows machine (even though it should not make a difference in this case). the remaining phantomjs tests are all marked with success.,neutral
meanjs/mean,mocha,2015-08-07T21:43:51Z,fixing user model test's last test which fail or report a false positive. fixing up a user model test which was not setup correctly without the async done() callback. which led to false postivies. adding timeouts to the test ensures that the test completes in time. otherwise mocha's 2s timeout will fail the test,negative
meanjs/mean,mocha,2015-08-09T18:48:46Z,ilanbiala  mleanos review please?,positive
meanjs/mean,mocha,2015-08-10T21:57:00Z,ilanbiala we're good?,positive
meanjs/mean,mocha,2015-08-13T05:45:45Z,i'd like to push this fix in as well as other tests i have worked on in another pr asap so we can get that tests safety next as wide as possible.anything else codydaig ilanbiala mleanos ?,positive
meanjs/mean,mocha,2015-08-13T08:10:37Z,yes lgtm.,neutral
rooseveltframework/roosevelt,standard,2017-05-31T01:42:13Z,timeout on validator initalization. we should set a good chunk of time before we decide that for some reason html validator initialization failed and then just print an error to the user saying validation is disabled because of a problem and move on. otherwise the app will hang and never start because right now the validation initialization is blocking; if it never completes the app never finishes startingmaybe something like: wait 30 seconds or so. provide the warning. and print standard out from the `exec` (so that they can file an issue with that or look into things further?)related to #143 and #135,neutral
rooseveltframework/roosevelt,standard,2017-06-02T15:01:37Z,while this being worked on. it might be nice to add onto #153 and specify in any error case including a timeout that validation is turned off because (some reason) continuing without it,neutral
brave/browser-laptop,uglify,2017-08-14T18:25:42Z,petemill awesome. thanks for the detailed analysis! :) seems like uglify-es is a clear winner vs babili. i've squashed it into this branch.,positive
brave/browser-laptop,codecov,2017-08-11T22:55:38Z,xoxo codecov,neutral
Azure/azure-xplat-cli,mocha,2012-12-06T01:42:08Z,tests are failing with "cannot read property 'prototype' of undefined". seems like something is wrong with servicebusmanagement.the failure is described in the azure_error file:```wed dec 05 2012 17:39:37 gmt-0800 (pacific standard time):[typeerror: cannot read property 'prototype' of undefined]typeerror: cannot read property 'prototype' of undefined    at object.exports.inherits (util.js:538:43)    at object.<anonymous> (c:\temp\projects\azure-sdk-tools-xplat\lib\servicebusmanagement\servicebusmanagementservice.js:60:6)    at module._compile (module.js:449:26)    at object.module._extensions..js (module.js:467:10)    at module.load (module.js:356:32)    at function.module._load (module.js:312:12)    at module.require (module.js:362:17)    at require (module.js:378:17)    at object.<anonymous> (c:\temp\projects\azure-sdk-tools-xplat\lib\servicebusmanagement\index.js:18:35)    at module._compile (module.js:449:26)    at object.module._extensions..js (module.js:467:10)    at module.load (module.js:356:32)    at function.module._load (module.js:312:12)    at module.require (module.js:362:17)    at require (module.js:378:17)    at object.<anonymous> (c:\temp\projects\azure-sdk-tools-xplat\lib\commands\sb.js:19:28)    at module._compile (module.js:449:26)    at object.module._extensions..js (module.js:467:10)    at module.load (module.js:356:32)    at function.module._load (module.js:312:12)    at module.require (module.js:362:17)    at require (module.js:378:17)    at c:\temp\projects\azure-sdk-tools-xplat\lib\cli.js:788:14    at array.map (native)    at scan (c:\temp\projects\azure-sdk-tools-xplat\lib\cli.js:787:23)    at harvestplugins (c:\temp\projects\azure-sdk-tools-xplat\lib\cli.js:800:17)    at object.<anonymous> (c:\temp\projects\azure-sdk-tools-xplat\lib\cli.js:918:1)    at module._compile (module.js:449:26)    at object.module._extensions..js (module.js:467:10)    at module.load (module.js:356:32)    at function.module._load (module.js:312:12)    at module.require (module.js:362:17)    at require (module.js:378:17)    at object.<anonymous> (c:\temp\projects\azure-sdk-tools-xplat\test\cli.js:1:80)    at module._compile (module.js:449:26)    at object.module._extensions..js (module.js:467:10)    at module.load (module.js:356:32)    at function.module._load (module.js:312:12)    at module.require (module.js:362:17)    at require (module.js:378:17)    at object.<anonymous> (c:\temp\projects\azure-sdk-tools-xplat\test\commands\cli.site-deploymentscript-tests.js:18:11)    at module._compile (module.js:449:26)    at object.module._extensions..js (module.js:467:10)    at module.load (module.js:356:32)    at function.module._load (module.js:312:12)    at module.require (module.js:362:17)    at require (module.js:378:17)    at mocha.loadfiles (c:\users\amitap\appdata\roaming\npm\node_modules\mocha\lib\mocha.js:137:27)    at array.foreach (native)    at mocha.loadfiles (c:\users\amitap\appdata\roaming\npm\node_modules\mocha\lib\mocha.js:134:14)    at mocha.run (c:\users\amitap\appdata\roaming\npm\node_modules\mocha\lib\mocha.js:290:31)    at object.<anonymous> (c:\users\amitap\appdata\roaming\npm\node_modules\mocha\bin\_mocha:329:7)    at module._compile (module.js:449:26)    at object.module._extensions..js (module.js:467:10)    at module.load (module.js:356:32)    at function.module._load (module.js:312:12)    at module.runmain (module.js:492:10)    at process.startup.processnexttick.process._tickcallback (node.js:244:9)```,negative
Azure/azure-xplat-cli,mocha,2012-12-06T17:03:33Z,so how do i run tests (now during development)?,neutral
Azure/azure-xplat-cli,mocha,2012-12-06T19:53:33Z,clone the azure-sdk-for-node repo and check out the dev branch. put it next to your clone of the tools-xplat repo. then. from your sdk-tools-xplat directory. do:    npm install ../azure-sdk-for-nodethis will grab the azure bits from that other directory.,neutral
workshopper/how-to-npm,standard,2016-08-20T23:42:22Z,fixed standard formatting. there is a trivial error in the current formatting (what about enabling travis?),negative
dadi/api,standard,2016-04-29T03:22:18Z,josephdenne more info required please. - publishstate: ok- publishdate: ok- publishenddate: ok- publisher: what is this? is it a string supplied by the publishing system? or an editor identifier?,neutral
dadi/api,standard,2016-04-30T08:52:15Z,jimlambie confirming that publisher means editor,neutral
appnexus/lucid,karma,2016-03-29T14:32:56Z,setup browserstack. acceptance testing. - [x] configure karma- [x] run karma tests across browsers in browserstack- [x] setup a "kitchen sink" docs page for screenshot testing- [ ] run screenshots in browserstack,positive
websockets/ws,eslint,2016-06-12T15:00:04Z,add eslint as lint tool,neutral
websockets/ws,eslint,2016-06-12T17:27:06Z,thanks for your contribution. but i'm pretty sure none of the files will validate lol :%,positive
websockets/ws,eslint,2016-06-13T02:11:09Z,i will add some rules and refine code later.,neutral
websockets/ws,eslint,2016-06-13T03:46:58Z,refine code via eslint,neutral
agershun/alasql,mocha,2015-04-18T18:36:05Z,im working on implementing mocha so that its a more standard format.,neutral
agershun/alasql,mocha,2015-04-21T21:02:43Z,updated the memory info with more readable data. updated the parser. please pull and `npm install`if you run node with the `--expose-gc` flag garbage collection will be invoked between each test file runs. ```node --expose-gc run > results.log ```next step: let mocha do the output job,negative
quilljs/quill,selenium,2015-01-13T10:05:39Z,definitely a good idea to use modern apis though the there is the tradeoff is a messier codebase where features are implemented multiple times. depending on the benefits though it might be worthwhile.the way to test paste would have to be selenium i think since an important part is actually interacting a real paste event object. i have an end to end test set up with protractor in the tests/ folder that might be a useful starting point. another challenge with paste though is it's useful to know copy/paste behavior between applications so perhaps this an area where some manual testing will always be necessary.,positive
cliftonc/calipso,mocha,2012-08-23T19:15:51Z,trying to run 'sanity test' using mocha per reference in package.js:```node_env=mocha mocha --reporter spec -t 5000 -s 500```it returns:```calipso.logging.configurelogging(loggingconfig);                ^typeerror: object #<object> has no method 'configurelogging'```,neutral
electrode-io/electrode,karma,2017-06-20T00:35:01Z,sorry. i will have to look into this later.,negative
electrode-io/electrode,karma,2017-06-20T07:38:23Z,archetype-react-app: [major] default to chrome headless for karma,neutral
electrode-io/electrode,karma,2017-06-24T05:24:29Z,in general. you unit test code in client with karma test only.  server side code should be tested as pure server side code.to test client code as part of server. a new type of tests would be needed. something like `test-ssr` maybe.close for now and will revisit if i have time.,positive
electrode-io/electrode,karma,2017-07-10T15:50:12Z,hi. just looking this a bit.  webpack config's entry points to the app's main js file. usually `src/client/app.jsx`.  also. it's not necessary a plain string.  it could be an object with multiple entry for webpack.  karma's entry has to point to its own `entry.js`. which does bootstrapping to get the react app loaded into karma.  i am not sure how this pr is supposed to work actually.,neutral
helmetjs/helmet,standard,2015-07-12T02:12:04Z,+1 markherhold . ideally helmet should abstract/decouple its core away from any framework implentation. also koa is probably going to take over in a year or less because of standards and esnext,neutral
angular/angular-cli,uglify,2017-04-26T02:44:41Z,any word on this one? other issues around the internets seem to point to uglifyjs causing issues. since angular-cli doesn't let you modify the webpack.config directly. i can't figure out a way to tell uglify not to touch mapbox.,neutral
lovell/sharp,standard,2016-07-21T20:30:10Z,in bluebird. `promisify` has a `multiargs` option. which returns multiple arguments to a callback in an array. maybe this is the standard to follow.,neutral
lovell/sharp,mocha,2014-06-04T16:04:33Z,sounds good to me! would also be nice if you used a test framework like mocha so you could have pretty outputs,positive
facebook/react-devtools,eslint,2015-04-02T22:32:45Z,add plugin to monitor the updates of react components . add plugin (codename: bananaslug) to monitor the updates of react componentsthe plugin renders a checkbox inside the current react panel. clicking the checkbox would toggle the the plugin.most plugin codes lives inside `plugins/bananaslug/` and they're built with separate modern stacks (webpack. eslint. babel...etc) to ensure better developer experiences.,neutral
facebook/react-devtools,eslint,2015-04-06T19:23:57Z,ping :),neutral
facebook/react-devtools,eslint,2015-04-17T22:53:07Z,ping~,neutral
photonstorm/phaser,jshint,2013-11-23T15:47:51Z,:+1: i'm in favor of this as well. i've been doing a bit of manual clean up but i'm not sure if the changes i'm making are in the desired format.,negative
photonstorm/phaser,jshint,2013-11-24T12:52:41Z,ok i've tweaked the configuration in the jshint file and re-pushed it. also have started going through the source applying my own rules :),neutral
npm/npm,standard,2015-01-15T15:00:35Z,dedupe: decrease the log level of unavoidable conflicts. users running `npm dedupe` do not need to be informed about unavoidable conflicts. they are a part of regular process of dedupe. and are nothing of note.in my personal opinion. this also aligns with semantic meaning. i was unable to find a detailed standard of log levels. thus i converged on an opinion that warnings require eventual attention. while infos are documenting regular behavior.feel free to reject this if your log level definition differs.consider that with #6912 the warnings will pop up for regular users during a simple install command.,negative
npm/npm,standard,2015-01-16T04:17:38Z,imo. conflicts deserve to be warnings. this helps people understand why parts of their trees have not been deduplicated. and is information that is useful to surface. so as to minimize people's surprise (and their likelihood to file issues based on that surprise). also. "imo" pretty much sums up the guidelines for when which log level is used -- it's kinda up to the developers' discretion which log level gets used where. and is likely to remain that way. just because this is mostly about creating a friendly (if occasionally noisy) user experience.thanks for putting this together anyway!,positive
npm/npm,standard,2015-01-16T07:14:17Z,thank you for your feedback and reasoning!,positive
npm/npm,standard,2015-01-31T22:41:46Z,i will take a look at my git config. but it's pretty standard. could this be some weird locale thing?,positive
npm/npm,standard,2015-02-01T04:37:28Z,i'm struggling to find a better/canonical way for publishing generators to npm. but it seems like the standard approach is to just apply workarounds when necessary.guess i'll just stay with the "it works" approach until there's a better approach.,negative
npm/npm,standard,2015-02-01T15:46:37Z,terinjokes yeah. there's a bunch of tools out there. `standard` disallows semicolons though. and cuts having to maintain a bunch of config files in the repo root.,neutral
npm/npm,standard,2015-02-01T21:15:10Z,feross as much as said he did it for the lols. and while there are points of congruency between the `standard` code style and npm's. one of the goals for this task is to make the code base more consistent while. as much as is practicable. codifying the pre-existing style. among other things. i have to do a fair amount of `git blame` and `git log -s` on the npm code base. and so i don't want to do anything that's going to complicate that process more than necessary.and there are plenty of uh idiosyncratic aspects of the code base's style. so it's a thin line to walk.,negative
npm/npm,standard,2015-02-04T15:38:17Z,no npm command to delete/uninstall node_modules. i want a standard way i can delete node_modules directory and also invoke a script with which to delete 'public/bower_components'.'npm uninstall' just gives me the message :-npm warn uninstall not installed in c:\users\aaron\github\template-node-marionette-app\node_modules: "template-node-marionette-app"ideally this would work across *nix and windows.,negative
npm/npm,standard,2015-02-04T17:47:46Z,cheers !,positive
npm/npm,standard,2015-02-05T23:52:47Z,hi iarna. i know. that's why i've started talking about it in iojs repository. and they pointed out that the discussion should be started here first.it's nice to know that the npm3 will have a much more flatten node_modules it will save space and link.yet i think it would be more eficient to have it on a single file and there are some other reasons than the path limit like:- filesystems are chunked and a lot of script files uses much more space than a single one - eficiency;- some systems have case sensitive filesystems while in others it's not - standardization;- less fat speed interfering on system load speed;- easily compressable (yet it could be maintened uncompressed to maximize execution eficiency over space).thanks for your analisis.,positive
gr2m/moment-parseformat,standard,2015-05-26T20:07:52Z,yeah it's somewhat an edge case. `moment.parseformat` has been made with humans entering a date in a free text inputs in mind. so utc and other timestamp standard formats or not a priority. there is no right or wrong here. but i think having a leading zero is something i want to be added only when wanted explicitly.,negative
mishoo/UglifyJS2,uglify,2012-12-10T23:23:01Z,same here.i'm in a windows environement and the cli works fine. but when trying to use uglify through a node script i get this error.,negative
mishoo/UglifyJS2,uglify,2012-12-11T13:22:10Z,this is most probably a usage issue. not a bug.  however. i can't help you guys out until you tell me how you're using uglifyjs. ;-),negative
mishoo/UglifyJS2,uglify,2012-12-11T17:19:46Z,thanks for the insight. mishoo.you were spot on about the encoding_type for readfilesync.you might wanna update the readme.md file of the project with that snippet you just pasted :all the code i provided is just copy and paste from there and i was using it to try a basic testcase before going further. so that'd make sense to have this in there as a working example to build upon.,neutral
mishoo/UglifyJS2,uglify,2012-12-13T13:35:15Z,add uglifyjs.minify(string) to self (browser) build. when you build uglifyjs itself ($ uglifyjs --self) the output script will not include the minify() convenience function. this is understandable as it is not (easily) possible to read files outside of node. but i would like to have a convenience function for parsing and compressing a string of javascript in this context as well.there was talk of a minify_string() function here #17. but it got dropped in favor of the fromstring option to minify() which is no use to me since that is absent outside of node.,negative
mishoo/UglifyJS2,uglify,2012-12-17T07:51:50Z,another one i noticed:from uglify2 output: this```function (e. s) {    zovi.user.logout();    var a = s.user_name;    zovi.user.setguestuseremail(a)}```could be minified to:```function (e. s) {    zovi.user.logout();    zovi.user.setguestuseremail(s.user_name)}```any reason it cannot be done? looks like this transformation can be done regardless of the context outside this method.(again. i apologize if this is not the right place to point these out),neutral
mishoo/UglifyJS2,uglify,2012-12-27T16:03:50Z,better require. the readme file contains this :```var uglifyjs = require("uglify-js");```it doesn't work in node.js so i added a `main` into the `package.json` and also a `index.js` at the root of the project. it is now possible to require it as a node module :```var uglifyjs = require("./node_modules/uglify-js");```,neutral
mishoo/UglifyJS2,uglify,2012-12-27T16:11:23Z,`main` was already present in `package.json`; also. node's `require` is already able to locate uglify-js in `node_modules`.  i see no reason for this patch.,neutral
mishoo/UglifyJS2,uglify,2012-12-30T17:01:03Z,comments option preserved all jsdoc style comments. the comments options is preserving all jsdoc style comments. even when they don't contain `license` or `preserve`.``` jsuglifyjs.outputstream({   'comments': true});```,neutral
mishoo/UglifyJS2,uglify,2013-01-03T00:32:56Z,the docs made me think that `"comments": "all"` would preserve all comments and so setting it to `true` would auto preserve comments with `license` or `preserve`.,neutral
mishoo/UglifyJS2,uglify,2013-01-07T17:31:35Z,yes. `uglify-js2` is deprecated. use `uglify-js` instead,neutral
mishoo/UglifyJS2,uglify,2013-01-07T18:08:21Z,then i shall amend my current issue and will update the subject line accordingly:would you please ask the people at npm to de-list uglify-js2?while that is taking place. could you update uglify-js2 to be the latest codebase but somehow show an error or warning that this package is now deprecated?,positive
mishoo/UglifyJS2,uglify,2013-01-07T18:41:34Z,uglify-js2 can easilly be unpublished by mishoo the problem is there are currently libraries that still depend on it.  it shows an error that says it's deprecated when you install it.  i have opened pull requests on virtually all the libaries that still depend on the old package. so once those are updated it may make sense to un-publish `uglify-js2`.it does not make sense to keep publishing updates for it as that will just perpetuate the problem of people depending on the wrong library.,negative
Netflix/falcor,coveralls,2015-03-20T23:14:56Z,added github/travis coverage hooks. for when we have istanbul integrated. if we want to test this with the private repo. will need additional `.coveralls.yml` config. otherwise we're good to go. once we start generating the lcov report from istanbul.,neutral
Netflix/falcor,coveralls,2015-03-20T23:46:21Z,michaelbpaulson trxcllnt - merging this.,neutral
Netflix/falcor,coveralls,2015-03-27T00:06:29Z,uncommented coveralls coverage submission,neutral
Netflix/falcor,coveralls,2015-03-31T15:54:23Z,i am doing the merge though the coveralls failed.  i only moved files so i am slightly confused why this failed.,negative
testem/testem,mocha,2012-10-11T14:59:33Z,did you insert the following snippet just below your mocha.js include?```<script src="/testem.js"></script>```,neutral
testem/testem,mocha,2012-10-11T19:46:40Z,i believe mocha supports this level of granularity using the `describe.only` inside the test blocks. i think testem is not the right place for something like this to be supported; instead we should submit pr's to testing frameworks that don't have logic in place to limit tests to an exclusive set when running a suite.,negative
testem/testem,istanbul,2015-12-28T19:51:54Z,i believe i'm encountering the same thing. specifically with the scenario of trying to deliver istanbul coverage results after testem finishes running phantomjs (chrome works fine). any movement on this in terms of a solution or reliable workaround?,positive
mochajs/mocha,mocha,2012-09-10T01:56:02Z,missing 'ms' in mocha.js. i recently built my own mocha.js (for the browser) using make. i am now getting 'uncaught error: failed to require "ms"' from chrome. i noticed that 'ms' just became a new dep. was this not factored into the build for mocha.js ?,negative
mochajs/mocha,mocha,2012-09-10T02:05:57Z,correct. i think tj will refactor mocha to use components which would gracefully include this.,positive
mochajs/mocha,mocha,2012-09-10T15:36:06Z,my bad yeah i'll have to chuck it in master for now unless i get the component part done first,negative
mochajs/mocha,mocha,2012-09-11T21:07:08Z,oh. if it's global that wont really work. npm doesn't really work that way. so you should install it for that project and do ./node_modules/.bin/mocha and add `make test` or similar,neutral
mochajs/mocha,mocha,2012-09-13T18:08:08Z,yeah mocha currently assumes that if you have an issue in before hooks then subsequent things will fail. though we could limit the scope of that assumption to only those test-cases nested within the same describe(),neutral
mochajs/mocha,mocha,2012-09-14T05:45:30Z,it seems to only be a problem for mongoose model schema definitions. though.  maybe mongoose is refusing to redefine an existing model when the file is re-required?,neutral
mochajs/mocha,mocha,2012-09-14T22:53:51Z,i have  mocha.tmbundle: no such file or directory error and there is not nested folder in library/application support/textmate/bundles. any ideas?update: npm didn't include editors folder. weird... i wonder what else is missing?,negative
mochajs/mocha,mocha,2012-09-14T22:57:24Z,any ideas why i get  cp: editors/javascript mocha.tmbundle: no such file or directorymake: **\* [tm] error 1?,neutral
mochajs/mocha,mocha,2012-09-16T20:42:50Z,update bin/mocha. v8 also has an optional --harmony flag available.,positive
mochajs/mocha,mocha,2012-09-18T18:08:35Z,doesn't need to be in mocha core. there's no reason to couple it,neutral
mochajs/mocha,mocha,2012-09-20T20:10:36Z,we did just use closures in the past. but that also encouraged accidentalpollution within the closure.then we moved to only sharing via the context. which ensure that anytimethe setup is done it will be in a beforeeach. it. etc.now that we have a spec suite that just broke through 2000 tests. and have3 development teams adding specs steadily. manually clearing this contextjust isn't maintainable.we are loving mocha. by the way. as it runs through those 2k+ specs inabout 40 seconds!,positive
mochajs/mocha,mocha,2012-09-25T15:55:58Z,yeah it's not actually easy right now especially using mocha(1),neutral
mochajs/mocha,mocha,2012-09-27T02:54:11Z,assert libs shouldn't assign `actual` & `expected` props to the error object for these kinds of asserts. when they do this. it should mean that they want mocha to display a diff. which might not be suitable for all kinds of asserts.speaking of which. i guess my commit for expect.js should leave `.equal()` along. which shouldn't display a diff.,neutral
mochajs/mocha,mocha,2012-09-27T02:59:35Z,well those props aren't even specifically for mocha. they just hold the expected/actual values so you can choose to do other things with them. going mocha-specific wouldn't really be too great. ideally i guess we have alternative messages or something. bit of a tough thing abstraction-wise i guess,positive
mochajs/mocha,mocha,2012-09-27T03:53:25Z,do you think a mocha option for diff methods still stands? not sure how to access mocha options in the base reporter. if you could shed some light. i'd like to take a stab at it.,neutral
mochajs/mocha,mocha,2012-09-27T06:49:12Z,allow to skip() test  inside the function. in my tests some times test need to run only if certain conditions are met. for example previous test passed (where not skipped like load and save consequent tests). it would be great if inside test function i could do something like that:<code>if (!this.fit) this.skip() // and mocha would skip the test.</code>,positive
mochajs/mocha,mocha,2012-09-27T22:00:57Z,skip() inside of a test-case can't automagically jump out of it. just do `if (something) return done();` or if it's sync `if (something) return;`,neutral
mochajs/mocha,mocha,2012-09-28T22:22:41Z,-1 from me for a few reasons. mainly being that mocha currently loads everything all at once and this would cause a bit gap in the server / client-side implementation. secondly i can't think of anything that is unmock-able without this feature. what's an example? i'm not a huge proponent of mocking in general but this would be a large overhaul if it's mostly for convenience,negative
mochajs/mocha,mocha,2012-09-30T05:06:46Z,thanks. but just as idea:it still would be good to have such ability maybe supply skip function as third parameter:it('should skip if not fit'. function(done. skip){  if (fit) done() else (skip())}or maybe do it with done function by supplying some paramenters done({skip: true}). by the way done('some message') output is huge and like error out. i wonder why?,neutral
mochajs/mocha,mocha,2012-09-30T18:45:51Z,? there's no reason for skip functionality. just `done()` early that's all there is to it,neutral
mochajs/mocha,mocha,2012-10-03T17:20:42Z,``` jsvar runner = mocha.run();runner.on('end'. function(){});```,neutral
mochajs/mocha,mocha,2012-10-03T20:53:26Z,exposed stats via runner to allow access via "end" callback. note: made the single-line change in `lib/reporters/base.js`; however. also ran the compile step which changes multple `mocha.js` lines.,negative
mochajs/mocha,mocha,2012-10-04T05:59:06Z,`.concat['xmlhttprequest']`,neutral
mochajs/mocha,mocha,2012-10-04T09:32:52Z,add -f to specify path to mocha.opts. allows you to store your configuration file anywhere you wanted.**-f. --fileconf <path>**the --fileconf option allows you to specify the configuration file that will be used. by default “/test/mocha.opts”.,neutral
mochajs/mocha,mocha,2012-10-04T17:22:48Z,imo this is an anti-pattern. projects should be as self-contained as possible including test related stuff,neutral
mochajs/mocha,mocha,2012-10-05T13:51:23Z,add option to run mocha only in the master cluster process,neutral
mochajs/mocha,mocha,2012-10-05T14:41:16Z,in fact. we've got many test directories for each part of our project. we use the same configuration file in each test directory. it would be usefull to store this file in a unique place. so that any modifications of the file would immediatly impact all tests.,neutral
mochajs/mocha,mocha,2012-10-05T15:51:51Z,fair enough. few changes though,neutral
mochajs/mocha,mocha,2012-10-07T20:44:12Z,is there a fix for this planned at all?  browser-side async testing is pretty ugly at the moment.can't browser-side mocha use window.onerror in the same way that server-side mocha uses process.on('uncaughtexception') ?it may be ugly. but it's less ugly than the current state of things.,negative
mochajs/mocha,mocha,2012-10-07T21:04:20Z,lightsofapollo the behaviors of the handlers associated with onerror and uncaughtexception appear to be different.  on server-side. it appears to rely on the stack trace provided in the exception (see #482)what i'm looking for is to have browser-side mocha treat the exception as an assertion failure (like it does server-side). rather than as an uncaught exception (which it does browser-side).does that make sense?,neutral
mochajs/mocha,eslint,2016-12-15T17:32:44Z,i guessing that the problem is with the intellij eslint plugin. as i cannot reproduce this on the command line. i have refactored so that we no longer depend on a magic global helper file. so i will close thisthanks very much scottfreecode and dasilvacontin for looking into this. and my apologies for any invaluable effort on your part.,negative
mochajs/mocha,eslint,2016-12-28T07:47:20Z,use `semistandard` directly. this pr simplifies the lint tool dependencies by using `semistandard` directly.we don't need to keep track of each peer dep of `eslint-config-semistandard` anymore by this change.---closes #2633,neutral
mochajs/mocha,eslint,2017-01-02T22:15:47Z,this looks like a great simplification. i am wondering about the collapsing of all config into package.json though. previously there was a separate configuration for `lib/browser`. which is now gone. obviously the linting passes with the new changes. but have the rules accidentally become more lax because of that specific config removal?,negative
bcoe/sandcastle,mocha,2014-01-03T10:10:41Z,alexkwolfe thanks!!!,positive
sitespeedio/sitespeed.io,selenium,2014-11-01T12:38:44Z,ah cool. so i'm trying to get the documentation out. this weekend i can update so you can run ie from sitespeed. but you will need to start the selenium server yourself. but if you run it from jenkins that 's no problem. i will ping this when i have some documentation out.,positive
teerapap/grunt-protractor-runner,selenium,2014-08-12T18:05:41Z,for others that hit this issue: set seleniumport to be null.  if you're using an old config template as your model. this used to be 4444 by default.  setting it to null lets each instance start up on its own port.,neutral
karma-runner/karma-sauce-launcher,sauce,2013-11-01T13:05:28Z,i just experienced a run from my local machine with two sauce connected browsers (chrome-linux. firefox-linux) where one 'finished' and the other hung. i killed the process manually after about a minute (trying to preserve my sauce credits). i ran the test two more times after this and both times exited successfully on its own.,negative
felixrieseberg/ember-electron,eslint,2017-03-30T15:24:16Z,generate appropriate .eslintrc.js files in the blueprint. this is of course a very straightforward approach.we could extend this in the future to generate the appropriate rc file depending on the linter installed but given that ember cli and basically everybody else as well is moving to eslint we should be fine.,positive
wix/detox,mocha,2016-08-02T12:56:21Z,another thing. can you please try to type `mocha` in the rn-example project directory and see if mocha is in the path?,neutral
wix/detox,mocha,2016-08-02T13:13:36Z,-bash: mocha: command not found,neutral
wix/detox,mocha,2016-08-02T13:41:54Z,i pushed a small fix that will use the local mocha explicitly. so if you pull you won't need to `npm install mocha -g` anymore,neutral
AnalyticalGraphicsInc/cesium,eslint,2017-06-27T14:38:11Z,add .eslintcache to .npmignore. it shouldn't be part of our npm package.,neutral
AnalyticalGraphicsInc/cesium,eslint,2017-06-27T20:31:22Z,my ask here was to actually include the practices that are now enforced but are not covered in the current guide.  each item could be concise like the current guide and link to the eslint doc as i mentioned in one of the other prs.i know it is a bit more work and more maintenance. but the coding guide now basically has implicit rules as i don't think readers will dig at the level currently required to learn about each eslint rule.,negative
AnalyticalGraphicsInc/cesium,eslint,2017-06-29T18:17:29Z,yes. i wanted all of them. but you could also add a link to the recommonded config list.omh1280 see the big picture here: the coding guide - for the most part - covers all our best practices.  with eslint. we just added a bunch more and didn't document them.  just make it clear - however you see fit - so that a new person reading the coding guide would truly walk away with an understanding of the best practices. and not just skip over a link that contains most of them hidden in eslint.,neutral
redfin/react-server,eslint,2016-02-11T00:20:56Z,attempt at travis integration. also pulled eslint config up to the top-level and added some readme badges.,neutral
redfin/react-server,eslint,2016-02-11T00:59:51Z,success!,positive
redfin/react-server,eslint,2016-02-11T01:10:12Z,lgtm,neutral
redfin/react-server,eslint,2016-02-11T18:20:24Z,> longer term. i think it may be best to follow the `eslint`/`babel` convention of having a `.reactserverrc`yeah. that sounds cool.  also. when there's a cli. being able to point to config with a command-line option would nicer than setting an environment variable.,positive
eventbrite/javascript,eslint,2017-02-10T17:51:21Z,remove eslint globals + reenable no-unused-expressions rule. - our individual repos should add app-specific eslint globals as needed instead of everyone implicitly inheriting them- `no-unused-expressions` was turned off for chai matcher issues but should be turned off only in the repos with problems not everywhere,neutral
hilios/jQuery.countdown,karma,2013-12-29T19:50:19Z,add karma runner to automate tests in multiple browsers. by this moment the browser testing is done by a human. it's a best practice to automate this kind of test once that they minimize bug at cross environments.this feature tasks are:- [x] add karma to packages- [x] use bower to handle library packages- [x] configure grunt to use the karma runner- [x] search for support from travis server,positive
tildeio/router.js,eslint,2017-09-06T14:28:12Z,add eslinting and prettier.,positive
yui/shifter,jshint,2012-09-24T23:59:57Z,totally fair reason to refuse. node-jshint's executable does comment removal via a hacktastic regexp. but that's not something i would advocate repeating. i think we can live with documenting these sorts of things in separate files.,neutral
walmartlabs/eslint-config-defaults,eslint,2015-08-07T18:59:40Z,rtorino what was the issue here? defaults shouldn't have any references to airbnb. the default config should mirror what `eslint --init` gives you. i'd like to be able to document issues if there are any.,neutral
walmartlabs/eslint-config-defaults,eslint,2015-08-17T19:39:34Z,feature eslint plugin filenames. adds plugin filenames to walmartlabs best-practices and updates docs to reflect change. cc ryan-roemer,neutral
walmartlabs/eslint-config-defaults,eslint,2015-08-17T20:20:45Z,chaseadamsio baer -- does this work with the react configuration? i think i remember eric saying that the `_.merge()` can't handle 2+ plugins. (hence one of the reasons behind me filing #13 ...),neutral
walmartlabs/eslint-config-defaults,eslint,2015-08-17T20:33:28Z,cool. i'll move on to #13 and come back to this next. :+1:,positive
walmartlabs/eslint-config-defaults,eslint,2015-08-17T21:02:18Z,#13 is a bit blocked. i did not find the exposed _merge function ryan-roemer was referring to and need to investigate more.,negative
walmartlabs/eslint-config-defaults,eslint,2015-08-17T21:14:51Z,actually. i meant don't merge in this project at all. use only eslint config options of extends to do all the work.,neutral
walmartlabs/eslint-config-defaults,eslint,2015-08-17T21:16:12Z,let's have this project actually be _eslint configs_ and not try to duplicate on our own what eslint does internally. let's just let eslint handle all merging itself.,neutral
walmartlabs/eslint-config-defaults,eslint,2015-08-17T21:18:41Z,pr coming.,neutral
walmartlabs/eslint-config-defaults,eslint,2015-08-17T21:23:56Z,alright. all set on this one.,neutral
walmartlabs/eslint-config-defaults,eslint,2015-08-17T21:31:15Z,i think #13 is all good if #23 looks okay. i tested and everything is :+1:,positive
walmartlabs/eslint-config-defaults,eslint,2015-08-17T21:49:33Z,you forgot the off.js config,neutral
walmartlabs/eslint-config-defaults,eslint,2015-08-17T22:11:35Z,#13 is closed and merged. i've made some changes to fit the schema baer was setting up with the `react` plugin. so this should close #17. was there anything else that should be done here ryan-roemer?,neutral
walmartlabs/eslint-config-defaults,eslint,2015-08-17T22:26:43Z,chaseadamsio -- lgtm!,neutral
walmartlabs/eslint-config-defaults,eslint,2015-08-17T23:09:02Z,this is so :moneybag:!,neutral
walmartlabs/eslint-config-defaults,eslint,2015-08-26T00:33:39Z,this is because the configurations are defined as `js` files. whereas eslint expects `yaml`.  baer. are the constituent configs composable using just the json/yaml syntax and `extends: ...` ?,neutral
kaola-fed/foxman,eslint,2016-12-13T11:56:44Z,feature eslint,neutral
assaf/zombie,mocha,2012-12-04T12:06:11Z,zombie browser throws exception when a status code of 401 is received. currently i cannot use zombie to check the status codes of particular urls or paths in my application. if i get a status code of 401 the zombie browser throws an exception. is there any way to suppress this behaviour with a setting? i have looked at the code and haven't found one. here is a test case: this mocha test should pass but it doesn't :  is a mocha test file so you need to run it with mocha. i have come up with a workaround for this problem but it makes it harder to write tests so it is not optimum.,negative
assaf/zombie,mocha,2012-12-06T09:37:44Z,ok so... does this mean that the recommended way to do browser tests in mocha is to do the browser navigation in the before function and then just a whole series of asserts in the it() tests? i looked back over the documentation and i didn't see that point made anywhere and there is no example test file (that i can see) so i didn't notice this as a suggestion. i think maybe it is implied but some people (like myself :p) like to have things spelled out in black and white. btw. i see your point about the 401 and looking for it. makes sense.,positive
yeoman/generator,mocha,2012-09-12T11:52:36Z,if we introduce this api. `warnon` might become obsolete. i don't know.this file menu would be tied to the file system api provided in the generators api (write. copy. template methods etc.). and would show up only when we detect that a file is about to be overwritten and that this file is not identical.we might be able to implement the differences output by checking out how it's done within mocha. it has a really nice diff feature.,negative
yeoman/generator,mocha,2012-09-16T14:49:20Z,great feedback. i definitely agree on trying to push auto-generation of tests with generators.hooks can be used to help us here. and provide us some flexibility to easily switch to another framework (like switching mocha to a jasmine setup).in every generators where generating tests make sense. `this.hookfor('test-framework');` can be used (this for now defaults internally to `mocha`. but it can be changed via the `--test-framework` cli option).- when done from a controller generator. the resolved generator is `mocha:controller`.- when done from a model generator. the resolved generator is `mocha:model`- and so on. for view. route. service etc.then. one can decide to implement each `mocha:*` generators. that generates the appropriate tests based on what kind of generators have invoked them. and probably add them to the test/index.html runner for both the specs and sources files.because. `mocha:controller` generated tests will be different when generating from an angular or a backbone generator. i'm starting to think that they should be considered mutually exclusive. and that each set of generators for a framework. will have to implement their own test-framework generators (mocha. jasmine. etc.)hope it makes sense. let me know if it doesn't =/,positive
matrix-org/matrix-react-sdk,standard,2016-08-24T12:24:45Z,add ability to query and set bot options. - also standardise on 'success' as the key name for successes.- also return the entire `content` on get state event requests.,positive
matrix-org/matrix-react-sdk,standard,2016-08-24T12:50:58Z,lgtm,neutral
mcollina/ascoltatori,mocha,2013-06-27T09:05:30Z,(if you want to carry on using the pipe. you could use $pipestatus to make sure the errors from mocha are propagated),neutral
tapio/live-server,mocha,2015-12-10T08:47:52Z,less files were just an example use case.  the real fix here is targeting what to watch. for instance. it's common to have an app or src directory that has a build step that builds to a dist or build folder. there can be files of all types in both. the goal is. you only want to reload when the build / dist directory is updated. not based on file types. there are similar patterns to this feature in webpack's loader config. you can 'exclude' patterns from being run through the loader. but you can also 'include' patterns. the include is the recommended approach in the docs because it is explicit. there is a finite and well defined list of things you want to parse opposed to an infinite list of things you want to exclude (everything else).babel has a similar option with its register hook. you can compile 'only' certain patterns or 'ignore'.  or what if mocha had you ignore every directory that did not have tests in it?  i guess what i'm getting at is that when you know exactly what you want to watch. it is easier and makes more sense to explicitly define it that  try to ignore every other possible thing.that's my whole hearted attempt at a persuading you :) whether the update makes it or not. still love the module and will probably keep using it.,neutral
nathanboktae/mocha-phantomjs,mocha,2015-02-23T18:10:51Z,any update on this?,neutral
nathanboktae/mocha-phantomjs,mocha,2015-02-26T06:36:55Z,why? why would you not just send an event to `window`? why would you make a test depdendent on being run in `mocha-phantomjs`?,neutral
paypal/nemo-view,selenium,2015-07-31T16:53:24Z,i also want to ask if i need to make a wip pr. selenium-drivex doesn't have a develop branch(any other branch than master). can you  create one or i should make a pr against master?,neutral
paypal/nemo-view,selenium,2015-07-31T17:14:04Z,regarding "style". i note that there is not a jshint task in selenium-drivex. there should be. but for now. just do your best to match the existing style. i'll file an issue on the repo to resolve the lack of jshint. also there is no extensive style guide for nemo. but that's something we can address over time. in the meantime. just do what you consider to be appropriate. if/when there is a comprehensive style guide we can go back through the modules and clean up anything that doesn't match up.regarding "defer". i personally wasn't aware of the deprecation. if that's the case then we should file issues on all the modules to replace its usage. do you have any further reference information on that which i can use as a basis?,neutral
paypal/nemo-view,selenium,2015-07-31T17:38:09Z,i'll take a look at your pr to selenium-drivex as soon as i can. it will need to be a little later on today though.,neutral
paypal/nemo-view,selenium,2015-07-31T19:17:00Z,hmm :s will discuss selenium related details there. thanks for informing :),positive
typicode/husky,standard,2016-09-01T12:47:04Z,> i know that this is not really a husky issue. that is simply how mac gui apps work. however. if we could include /usr/local/bin when husky generates the hooksi agree :). do you want to make a pr?,positive
marionettejs/backbone.marionette,jasmine,2012-09-16T16:26:41Z,you're right. i experimented with a few use cases and relying on the context can add unnecessary complications.can you edit the existing unit test and make sure it passes with `grunt jasmine`?,neutral
node-nock/nock,eslint,2017-04-21T02:52:56Z,paulmelnikow thanks so much for taking the initiative on this! i like your decision to start with a sensible baseline (`eslint:recommended`). please do open a pr and i will take a look at it within the next few days. skimmed through the code just now and it looks solid. happy to help you fix the test once we have the pr up. so we can verify changes with ci.,positive
cucumber/cucumber-js,mocha,2016-08-05T19:51:05Z,sounds like a good idea. any chance you would like to help implement this?,neutral
cucumber/cucumber-js,jshint,2014-09-16T13:42:03Z,i'm closing this. it would be probably better to piecemeal this anyways. and if i submit the jshintrc. i think i'd do it on a separate pr.,neutral
cucumber/cucumber-js,jshint,2014-09-16T13:48:45Z,jshintrc added. - js hintrc added- indent is 2,neutral
cucumber/cucumber-js,jshint,2014-09-16T13:53:58Z,the-simian to better enforce styles we should integrate this with the test suite. so that it is impossible for someone to add invalid code to the repo since the tests will fail.thanks for the work the-simian :),neutral
cucumber/cucumber-js,jshint,2014-09-16T13:55:49Z,that's a great idea.,positive
cucumber/cucumber-js,jshint,2014-09-16T14:26:43Z,:dancer:,neutral
cucumber/cucumber-js,jshint,2014-09-16T14:45:00Z,thanks. this should have been done a long time ago!at cucumber-ltd. we also include hinting in the build (before running the tests) and also as a pre-commit hook on our machines. that way you can't even push code that fails hinting (a shame we can't enforce that on oss! :smile:),negative
cloudchen/grunt-template-jasmine-requirejs,jasmine,2013-08-13T09:36:25Z,had the same error. atm both paths need to match exactly.+1,negative
appium/appium,selenium,2013-12-19T06:14:13Z,ios:how to automate drawing boundaries like line.rectangle.polygon in iphone using mapview control ?. # ios:-we have a functionality where we need to draw boundaries  like line.rectangle.polygon in mapview through appium in selenium c#.issue is even though developers gave accessibility label for mapview control the id is not getting reflected in appium but for other controls like (textbox.checkbox) id's are displaying .can you give me suggestion how i can get the id for mapview control or is there any other way i can automate the functionality?.,positive
appium/appium,selenium,2013-12-19T16:27:19Z,those capabilities are for running selenium web tests; they're not applicable for appium.in the future. we'll have something like appium::capabilities.android. but for now. you'll need to not use the pre-built capability objects.,neutral
appium/appium,selenium,2013-12-24T15:23:24Z,i think this should be implemented as a mobile :getcrashes method. this will allow the clients to ask for crashes before ending the session. the response to :getcrashes could be a base64 encoded zip of all crashes during that session.maybe there's a better way that fits within the existing selenium api.,neutral
appium/appium,selenium,2013-12-28T03:56:09Z,apple hasn't announced a fix.,neutral
appium/appium,selenium,2014-01-08T22:53:47Z,i'm not sure how this got labeled as an enhancement. but this is a regression - appium used to register and maintain sessions with selenium grids without issues.,negative
appium/appium,sauce,2013-10-30T15:52:37Z,can someone from sauce grab the account and i'll set up the build,neutral
appium/appium,sauce,2013-11-10T08:20:42Z,eduardocerqueira that is expected behaviour when using the safari launcher. instruments is not connected to safari and usually dies during the test. the only connecting we have is the remote debugger (for webviews) which doesn't have the ability to close the browser/tab (not that i know of). so i don't expect calls to close an alert to work either.the default url is set in the safari launcher app. we have to navigate to a url to launch safari. we can change to something that takes less to load (e.g. google). or maybe a locally hosted page like the saucelabs guinea pig page?,negative
appium/appium,jshint,2013-11-16T21:10:45Z,> warning: task "jshint:files" failed. use --force to continue.,neutral
agda/agda-stdlib,standard,2017-07-24T22:09:27Z,apologies for the very late reply. the standard library tries to use only the core features of agda. and therefore there are no current plans to incorporate instance arguments at the moment. declaring them locally seems the best bet.,positive
agda/agda-stdlib,standard,2017-07-25T00:24:18Z,the main reason would be to clearly label which parts of the standard library can be used as-is in hott. which is the main side-effect of highlighting those bits which do not depend on k.note that most of the pieces of the standard library that i have used (which is only part!) would go through without any changes.  understanding what fails might be quite instructive too.,neutral
agda/agda-stdlib,standard,2017-07-25T10:16:30Z,it sounds reasonable. but (from a completely non-theoretical perspective!) i'm a little wary of opening the gates to including pragmas at the top of every file. if you include the pragma. does it check subsequent imported files as well? if it does. would it be possible to find the parts of the standard library that use the k-axiom by simply adding it at the top of the `everything.agda` file?andreasabel do you have any thoughts on this?,neutral
agda/agda-stdlib,standard,2017-07-25T10:29:16Z,looks like this is solved.,neutral
agda/agda-stdlib,standard,2017-07-25T14:43:12Z,currently. if we put `--without-k` at the beginning of a file. it does not prevent import of modules that use k.  thus. at the current stage. such an information might be not very helpful and could even be misleading (e.g. if that suggests to you you can use this module of the standard-library in a k-free type theory).thus. before we move on here. we should be clear what the aims of putting --without-k into the standard library should be.,neutral
agda/agda-stdlib,standard,2017-07-25T17:39:15Z,andreasabel : agreed on waiting.i think the aim is clear: to be able to safely re-use as much of the standard library in a hott / raw mltt setting as possible.  i have had to duplicate parts of the library. just to make sure it was k-free.  it was a trivial exercise (as it was indeed largely k-free). but tedious.,negative
agda/agda-stdlib,standard,2017-07-31T12:19:09Z,zhyltsovd thank you for the proposal. and apologies for taking _quite_ so long to get back to you.this has the potential to be valuable addition to the standard library but as it stands there are a few issues:- there already exists a formalisation for injective functions in the standard library in `function.injective` so your code would need to use the existing `injective` definition. obviously this will involve altering your implementation.- your `thick` and `thin` functions now exist in the standard library under the names `punchin` and `punchout`.let me know if you'd like to proceed or not. no worries if not. i understand. after all this time. you may have moved on!,positive
agda/agda-stdlib,standard,2017-07-31T15:24:35Z,> no. it's not the case. let s be a finite set. and f: s -> s a function. then the following are equivalent: f is injective; f is surjective; f is bijective.ah yes. my fault. not quite sure why i'd forgotten we were finite! thank you for your explanation. i have to confess when i read it the first time i completely misunderstood what your code was trying to do. now that i'm more on-board. i'm afraid i don't think that the code is generally applicable enough for the standard library. nothing to do with the code quality or its usefulness in certain situations! it's just that we try and keep the number of data types in the standard library to a minimum. and `inj` is really just a special case of `fin n → fin m`. albeit one where the induction principle is easy to access.once again. apologies for the numerous misunderstandings on my part. however if you have functions along the lines of `thin` and `thick` (which were missing until recently) that you think are both widely applicable and missing from the standard library please do feel free to contribute them. i promise you'll get a quicker response!,negative
agda/agda-stdlib,standard,2017-08-02T06:34:34Z,it sounds like maybe we should relax the requirements of `--safe` to accept postulates of type `set`.,positive
agda/agda-stdlib,standard,2017-08-03T11:28:17Z,just had a look at the branch. what's the plan for maintaining this? is every safe change to the non-safe part going to have to be copied over to the safe part manually?or is there some way of regenerating the safe part automatically?,positive
agda/agda-stdlib,standard,2017-08-03T12:01:56Z,> however it is now going to require browsing both safe.data.nat.divisibility and data.nat.divisibility which are deep in different parts of the heirarchy. what's more you can't off-hand predict which one it's going to belong to.the doc for the unsafe module systematically links to the safe one because it imports it.> can users who are concerned about safety not just type-check it on the command line using the --safe option?`--safe` only succeeds if all of the definitions in a module (and all the module it depends upon) are safe. hence the need for a split: it is currently near impossible to typecheck a development relying on the standard library with the `--safe` option. i'm actually surprised that after 100+ articles using agda published. no reviewer seems to have complained about this.,positive
agda/agda-stdlib,standard,2017-08-03T12:25:51Z,> but then you'd have to call agda --safe on every single module attached to a paper to make sure the whole development is not using any dirty tricksaren't you going to have to do that anyway? even if you've only used modules from the `safe` hierarchy in the standard library. you still need to check that your own modules don't use any dirty tricks.,negative
agda/agda-stdlib,standard,2017-08-03T12:38:22Z,oh okay. that makes sense. thank you for your patience and taking the time to explain it to me! i have experience with exactly one agda development and that's my own so i'm not fully versed in all the tricks...okay then perhaps there should be a `--safe-narrow` and `--safe-broad` option to cover both options. it just seems weird that a module that only uses safe definitions should be labelled as unsafe just because some of its dependencies happen to share a file with unsafe definitions. in fact the same thing should probably apply to other options like `--without-k`.,negative
agda/agda-stdlib,standard,2017-08-03T12:48:40Z,> okay then perhaps there should be a --safe-narrow and --safe-broad option to cover both optionswon't the problem still be the same? you'll want `--safe-narrow` on all of the modules corresponding to a paper (all of the theorems have to be valid) but if it relies on the standard library. you'll need that constraint to magically change to `--safe-broad` whenever definitions rely upon that dependency.,neutral
agda/agda-stdlib,standard,2017-08-07T10:54:42Z,> whereas what it should ideally do is only check the definitions in other modules that are actually used. from my position of complete ignorance. this seems like it should be doable using some sort of flow analysis. i'm not sure if it is or not! if it is possible. wouldn't this be a far better solution than partitioning the standard library in two?maybe it would make sense if agda internally marks definitions that *could* have been checked with `--safe` as such. even if the flag is not enabled. that way. when importing a file without --safe. agda can check for the definitions you actually use whether they are safe. although this would probably require quite some refactoring of the other flags that are excluded by `--safe`.,negative
agda/agda-stdlib,standard,2017-08-15T10:12:07Z,`integer.properties.-≡-decsetoid`. `integer` has not standard equalities other than `≡`.so. why changing from `decsetoid` to `≡-decsetoid`?,neutral
agda/agda-stdlib,standard,2017-08-15T10:31:25Z,the aim is to keep naming conventions consistent across all data types. for other data there may be non-propositional equivalences available. we don't want users to have to guess the name.,neutral
agda/agda-stdlib,standard,2017-08-16T10:21:07Z,answered question so closing.,neutral
QubitProducts/cherrytree,sauce,2015-04-13T18:54:32Z,done,neutral
babel/babel,mocha,2015-05-16T00:08:15Z,well. i tested dozens of times. it never worked and just after your response. it works!you are a shaman :)at the beginning. i was trying with:```mocha --compilers js:babel/register```and sure this syntax doesn't work.thank you.,positive
babel/babel,codecov,2016-08-10T22:02:13Z,i would never discover codecov.io but for this joke! thank you guys. keep the world funny!,positive
angular/angular-seed,karma,2013-10-25T17:58:45Z,the minerr function is defined in angular.js though for some reason angular-loader is not picking it up. while the workaround outlined above works. it would be educational to find out why it breaks in karma. the karma configuration includes angular.js first so one would think angular-loader would pick it up.,neutral
jshint/jshint,jshint,2012-08-19T21:01:17Z,you're right concerning the case where somevariable is 0 and given that case. i'm going to admit it is pain to write the condition in other ways without seperate null and undefined checks. too bad jshint codebase is quite hard to follow. otherwise i'd have taken a stab at it.if you really want to get rid of that error while holding on to the comparison. !(true && somevariable > 0) should do the trick. it'll also cry for an explaining comment which isn't a bad thing.what comes to smart way of using it. my stance on the issue is this: if you're in a situation where valid values for your variables include numbers. null and undefined you're already close to losing it and you should either solve that issue or be very clear of where you're at with your variables. in which case such use of unary negation is indeed confusing.,neutral
jshint/jshint,jshint,2012-08-24T18:25:10Z,yeah. 'use strict' thinks you want `newcap`. that code passes with `/*jshint newcap: false */`,negative
jshint/jshint,jshint,2012-08-28T15:31:21Z,`eqeqeq` when its on requires strict comparisons everywhere. when its off it doesn't require strict comparisons _everywhere_ but it still requires it in cases where type coercion can lead to problems. jshint is not simply a parser it is a linter.,negative
jshint/jshint,jshint,2012-08-28T16:06:55Z,thanks for the clarification.maybe you can update the documentation to make this point more clear. the note reads like the only always checked unsafe comparisons are comparisons to`null`. which can be deactived with `eqnull`,positive
jshint/jshint,jshint,2012-08-28T17:03:27Z,the code i wrote for you is an isolated example of a problem we found in a much larger project. i'd rather not disable the warning because it's good practice to avoid creating functions in loops.my real question is about the conditions under which jshint raises the warning. perhaps it's too generic. i don't _think_ there's anything wrong with the above code. so why should jshint warn me about it?,negative
jshint/jshint,jshint,2012-08-29T21:54:09Z,you should use `laxbreak`. default behavior is (historically) what crockford recommended.,neutral
jshint/jshint,jshint,2012-08-30T21:42:59Z,stupenrose no offence. but how can you claim that jshint-mojo is much faster than wro4j as long as both uses rhino?,neutral
jshint/jshint,jshint,2012-08-30T22:16:59Z,i say it is faster because we have run both plugins on our code.  when running them side by side. our new plugin was faster.  not being familiar with the wro4j code. i can't say exactly why. but i'm assuming it is a consequence of our plugin being built from the ground-up to do just one thing: run files through jshint.  put another way. it looks like wro4j is built to solve a much broader range of problems.,negative
jshint/jshint,jshint,2012-09-09T03:08:56Z,`/*jshint newcap: false*/` ?,neutral
jshint/jshint,jshint,2012-09-09T03:09:55Z,if you submit a patch i'll merge it in. this isn't something we're actively working on though and something i believe should be available in jshint.next,neutral
jshint/jshint,jshint,2012-09-09T04:59:07Z,fyi/*jshint: validthis: true */ in that function will suppress this warning.,positive
jshint/jshint,jshint,2012-09-09T20:40:28Z,yes (i tested it) - it fucks up... fuck!but `window["undefined"] = ...` fucks up. too. and does not give a warning/error in jshint.,negative
jshint/jshint,jshint,2012-09-09T20:55:35Z,only properties' names in dot notation are checked by jshint. jslint does the same.and i still do not understand why 'undefined' is bad name for property =(,negative
jshint/jshint,jshint,2012-09-11T07:22:43Z,jshint's killer feature is the opt-out. as opposed to crockford-ed-in.,negative
jshint/jshint,jshint,2012-09-12T11:38:56Z,maxparams fails on parameterless functions. the new maxparams option fails when a function has zero parameter.example:```% cat test.js/*jshint maxparams:3 */function a(){}% jshint test.jstest.js: line 1. col 13. cannot read property 'length' of undefined1 error```if you add some parameters to the function definition. it works as expected.,negative
jshint/jshint,jshint,2012-09-13T19:11:11Z,jshint does not read the unused option in the middle of code/inside a function.thats why i opened this issue.,neutral
jshint/jshint,jshint,2012-09-16T01:24:26Z,in next jshint. yes -- we already have it. not here though,neutral
jshint/jshint,jshint,2012-09-16T01:44:21Z,pull request was reverted.,neutral
jshint/jshint,jshint,2012-09-16T02:43:19Z,sorry. i don't think this is worth adding a new option to the current tree. reason is that in jshint-next this option will become irrelevant but we will still have to support it forever for backwards compatibility.,negative
jshint/jshint,jshint,2012-09-16T08:31:19Z,ah.. sorry i didn't realize that jshint has unit tests (jslint doesn't). should have double check that.it'll be good idea to cover pull requests with travis ci. such erroneous pulls we'll be picked instantly then.anyway thanks for fixing that!,positive
angular/angular.js,jasmine,2013-10-19T17:22:49Z,```running "jasmine_node" taskwarning: cannot find module 'mkdirp' use --force to continue.aborted due to warnings.    >>     warning: task "parallel:travis" failed. use --force to continue.aborted due to warnings.```did i break this?,negative
angular/angular.js,jasmine,2013-10-24T14:21:41Z,grunt-contrib-jasmine-node doesn't exist. build fails as grunt-contrib-jasmine-node is not a valid package. pr to arrive shortly,negative
angular/angular.js,jasmine,2013-10-24T14:24:20Z,fix: grunt-contrib-jasmine-node non-existant. rename package grunt-contrib-jasmine-node to grunt-contrib-jasmine. as the former does not existcloses #4626,neutral
angular/angular.js,jasmine,2013-10-24T14:26:31Z,just signed as matthew jewell,neutral
angular/angular.js,jasmine,2013-10-24T19:28:24Z,this is already on master.,neutral
angular/angular.js,jasmine,2013-10-25T20:22:20Z,fixed in master,neutral
angular/angular.js,standard,2015-06-16T10:09:56Z,with the trick from far-out and vivex. does exist a way to make coexist the two behaviors? i need to send json as default and standard www-form-urlencoded sometimes.,negative
istanbuljs/istanbuljs,istanbul,2016-10-30T01:41:25Z,jedwards1211 mind giving the `next` release of `nyc` a spin. to make sure this is still an issue:`npm cache clear; npm i nycnext`we just landed a few patches stability patches to istanbul-reports.,negative
istanbuljs/istanbuljs,istanbul,2016-10-30T23:47:30Z,bcoe. i just tested. i can still reproduce.  should i move this to `istanbul-reports`?  i'll see if i can code up a minimum repro case.,negative
istanbuljs/istanbuljs,istanbul,2016-10-31T05:11:07Z,jedwards1211  yes. would love a reproduction in `istanbul-reports`. we can get this patched asap.,positive
istanbuljs/istanbuljs,istanbul,2016-11-09T06:44:59Z,bcoe sorry for the delay. i finally managed to put together a minimum repro!  filing in `istanbul-reports` now.,negative
DefinitelyTyped/DefinitelyTyped,standard,2015-11-17T12:23:32Z,making `store.getstate` generic looks like a good idea. but as for `action` interface. i don't know this kind of strict typing is appropriate here.   as arusakov says. fsa is just one of a major implementations of action.in that sense. fsa-flavored `dispatch`. `store`. and the like can be put into other `.d.ts` files (e.g. in the `flux-standard-action` itself?)  this can be also applied to `store.dispatch`'s return type.,negative
DefinitelyTyped/DefinitelyTyped,standard,2015-11-17T12:26:27Z,flux-standard-action,neutral
DefinitelyTyped/DefinitelyTyped,standard,2015-11-17T12:39:38Z,thanks mate!,positive
DefinitelyTyped/DefinitelyTyped,standard,2015-11-17T13:00:23Z,:smile:,positive
DefinitelyTyped/DefinitelyTyped,standard,2015-11-24T11:52:56Z,backbone typescript definitions contradict backbone's own documentation. typescript is supposed to be a superset of javascript.backbone's documentation says you define your class by doing:```var mymodel = backbone.model.extend({});```although this isn't the typescript way. i definitely think it should work. but with the current definition. it does not.the changes introduced by #2077 break this.converting an existing backbone project to typescript is made quite awkward because of this.i note #2517 tried to revert these changes previously.i'd argue enforcing standards on library usage shouldn't be done in the definition for that library.,neutral
tombatossals/angular-leaflet-directive,karma,2013-07-14T20:10:38Z,next time before you send a pr. please also run the karma test to make sure nothing breaks. also it will very helpful if you can create test case for the new features :),positive
nikgraf/belle,eslint,2015-07-05T23:02:37Z,eslint. i migrated already a couple components. still the rest & all of the other code should be brought to alignment with the eslint rules.,neutral
nikgraf/belle,eslint,2015-07-07T19:33:47Z,refactor: align test files with eslint rules,neutral
nikgraf/belle,eslint,2015-07-07T23:07:37Z,:top: work :smile:,positive
nikgraf/belle,eslint,2015-07-14T09:23:22Z,refactor: deprecating underscore for src. hey nik...check the helpers file...does it look goo enough to you.i still see some eslint errors. but i do not want to do any further changes. i am scared my changes will break something with existing code logic of these methods.,negative
