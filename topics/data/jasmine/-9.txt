["thanks.  i read the blog post.  the download page does seem a bit redundant.  seems like it would be hard for owners to remember to update each time. etc.the new code is great.  i wrote something i'm calling jasmine-jquery-$ that allows you to mock jquery's $.  you can add spy's that get applied in the future when the code under test calls e.g. $('happy').  this allows you to mock things like $(window).height() and $(document).scrolltop(). etc.  i needed it to test the endless page feature of the site i'm working on now.its pretty primitive right now.  i'll send you an email when i make a repository.  i thought you might be interested in merging it in with your code.", "i believe this is a problem with the verbose terminal reporter in jasmine-node.  it gets the list of tests when execution starts and reports the success status of this list.  the problem is that this list does not contain the 'nested' tests as they haven't been created yet.   the simple terminal reporter does handle this better.", 'i think you can this. ``` jsjasmine.getenv().addreporter(new function() {    this.specdone = function(result) {      if (result.failedexpectations.length > 0) {       // test failure action goes here     }   };  });```', "without looking into the code. i believe specs should execute in order. however. this is not the contract behavior. and you should never depend on it. you're much better off doing the summary either in a jasmine reporter. or in a oncleanup script.", 'great. thanks for the explanation and apologies for not paying enough attention to the change log!', 'one common thought i\'ve had as i\'ve stumbled into every protractor and jasmine oddity - it\'d be really great if there could be more warnings in the output. rather than relying on users reviewing every piece of documentation.the issue with the documentation is it\'s often doesn\'t address all of the issues you face in the detail you need. so you end up in stackexchange or a blog that was only posted a few months ago. and you try to use their examples to make things work. except in this example they don\'t work anymore."warning: using browser.wait without a explicit timeout. see https:// for more info..." could have saved an hour or two.thanks anyway - appreciated :)', "there's a limited amount we can do with that.  most of the output comes from tools like jasmine.", 'sjelin thanks for your update. could you help give some code sample to explain how to use teardown to keep the process alive? i want to see if this workaround is suitable for my e2e application.', 'nishakchaudhari  : i started using protractor and jasmine 2 and i am also facing the same issue. any work around for this??', 'ease for asserts with same setup. hello.i understand that protractor is trying to reduce state bleed (like jasmine) by having a fresh case-run for each `it`. that\'s cool. i\'m just curious if there is (or could be) some way for the discerning tester to specify something like "these `it`s have the same setup. and i am confident they don\'t mutate state".the benefit being. then protractor could just cluster the asserts and run them all after a single state-setup. rather than navigating from the beginning of the application each time (which can be expensive if the area under test is deeply nested in the application).cheers', "not sure what you're talking about exactly.  what state is being reset by protractor between `it` blocks?  it shouldn't be restarting the browser or anything by default.", 'difference / benefits using browser.setlocation ? . hi . currently running in some random test failures using protractor+jasmine+angular.i was able to resolve issue using **browser.setlocation**  beforeeach test for cases like page redirected during the test run.  instead of just **browser.driver.get** and after **browser.sleep();**wanted to know more about different  and usage of  the browser.setlocation ( it seems like all the page objects are loaded and saved during test). i found this on protractor api page. the code example will be good enough.', "interesting. i'm talking about the state that's setup in `beforeeach` blocks. so. for example i might have:```...describe('when i\\'m at the last page of the app'. function() {  beforeeach(function () {    lastpage.gethere();  });  it('has the correct page title'. function () {    expect(...)...  });  it('has expected data'. function () {    expect(...)...  });});```if i know that neither of the `it`s mutates state. and that `lastpage.gethere()` takes a long time to run. i would rather it (`lastpage.gethere();`) not be run twice.does that make sense?", "perhaps my run is not properly configured. but the test cases would be run like:> beforeeach -> first it> beforeeach -> second itit would be nice if i could (like jasmine's `beforeall`) run them like:> beforeeach -> first it -> second it", "good point i meant `browser.get` but still everything wasn't synced. adding `browser.setlocation` and `browser.waitforangular()`; resolved it. thank you.", "jkmurthy ksraja it seems that the jasminereports listed is actually the export of the require function.e.g.. `var jasminereporters = require('jasmine-reporters');`", ':+1: on the count() - thanks juliemr', "not totally sure what you're asking.  you can do `jasmine.getenv().addreporter(reporter);` inside your spec file without any difficulty.  #### re: backstoryit's not _exactly_ that the lost common denominator was chosen - more like the plugin api is still relatively new and we've been adding features one at a time as people have asked for them.  but yes. the fact that protractor supports many frameworks does hold us back.", "ok. if buster doesn't work out. we can use jasmine instead. it's relatively straightforward to monkey-patch jasmine.block.execute.", 'there is another use case that is relevant:if you want to modify requirejs default behaviour (e.g. intercept a context\'s execcb for automatic mocking of modules). it will be useful to do this in a helper. rather configuring requirejs to load the script first (via the "deps" config option).', "if you want to run spec by standalone server mode. just as you mentioned with grunt-contrib-connect module. then you cann't run grunt jasmine independently.you should run connect task before jasmin task``` jsgrunt.registertask('test'. ['connect'. 'jasmine']);```for fixtures. i think it better to load it in spec. for example. load fixture by jasmine-jquery library.", "`console.log()` invocations in your spec or source code won't be shown in `grunt jasmine` taskuse `console.info()` instead. it makes sense to ignore those debugging information in order to filtering annoying output.", "using jasmine-jquery. how do i go about using jasmine-jquery with this template?  i'm assuming that i don't add it to templateoptions.pathscheers.fintan", 'awesome. thanks for updating the issue with the resolution.', 'perhaps we could also include a `docs:generate` command that would be called without running the tests (like jasmine-node does). this would be helpful when running on `autotest:docs` in the background while testing docs pages (since they have to be generated each time to test them).', 'this is resolved with #3095', 'bump!  this feature is very useful in qunit. since it allows a qa team and a dev team to agree on a common interface of test expectations at the start of a development cycle.  since unimplemented tests fail with a specific "not implemented" error. this allows build scripts to flag these tests as warnings--but not errors--allowing checkins to proceed.  developers can then "chip away" at these tests as they implement code.this feature also helps to make code coverage reports more meaningful.  to improve code coverage. developers will sometimes "cheat" by adding just enough test code to make their production code _run_ even though they haven\'t covered all needed cases.  then since the code coverage tool is happy. it\'s hard to figure out where the test gaps are.  having a feature like this allows dev teams to require a complete and meaningful "test skeleton" to be checked in first. showing all the test cases that eventually should be implemented (even if the developer doesn\'t have time to implement them all in one big bang).', 'would you like to provide a pull request?  does jasmine have this in its latest release?']