["allows inclusion in specs even when jquery (specifically $) may not be defined.. this allows me to always include jasmine-jquery even if jquery isn't being used for a given spec.", 'hmm. this seems kind of strange. can you you give me a code example of an actual use case? why would you jasmine-jquery/jquery for all but specific specs?', "i opted to not auto include it.  i appreciate the library. it's super useful.", "i just got busy and forgot about this. jejacks0n i'm fine merging in the change if that's what holding you back from including it?", 'cool', "i'm pretty sure jasmine-jquery is functioning properly and it's a problem with your environment. i'm going to close this issue. perhaps try on stack overflow or with the jstestdriver devs?", "we've decided not to do this.i should also mention that i really missed jasmine's `objectcontaining` and `arraycontaining` matchers.", "as per our `contributing.md` guidelines. please ask questions like this on stackoverflow.also. i do not run into this problem running jasmine on my machine.  presumably you have an `it()` or something somewhere with an asynchronous callback function that you're failing to call", "unfortunately. it's pretty hard to give any feedback on this then. it seems like  your second error is coming from `jasmine-spec-reporter`. so i can't really offer any feedback about that either.i'm going to close this as non-actionable - please open up a new issue if you can reproduce in one of the supported browsers.", "same issue here. if you follow aksimo's suggestion above. it fixes the issue:'jasmine' instead of framework: 'jasmine2'.", 'hint.file `jasmine-core/lib/jasmine-core/jasmine.js` contains  constant `var maximumspeccallbackdepth = 20;` and method `queuerunner.prototype.run`. method  `queuerunner.prototype.run clearstack`  runs callback 9 times sync. then it wraps callback in a `settimeout(.... 0);`.because of this callback is triggered async. jasmine runs next spec before webdriver quite current session => webdriver does not start new session => jasmines show timeout error.', 'thanks eddywashere you saved my day. this error is such a pain ...', "where is default timeout for browser.wait?. i'm running tests with jasmine2. and have config set up with:```allscriptstimeout: 11000.getpagetimeout: 10000.jasminenodeopts: {  defaulttimeoutinterval: 90000}```i used to specify a timeout with each `browser.wait` call. e.g.:```browser.wait(function () {   ...}. 3000);```but when getting cross-browser tests to run. i discovered i didn't need to specify the 3000 manually and was better off letting it run until it hit the configured limits.but... now i'm running the tests locally again and it seems to ignore the configuration. i've checked that it is set up in the same way (using `browser.getprocessedconfig` and reviewing the output). but all my `browser.wait`s are failing too quickly. e.g. `failed: wait timed out after 110ms`.am i missing something obvious?", 'could you give a small example?', "not sure if this is related. but it'd be nice to suppress all the webdriver info messages (eg. 'executing'. 'done' messages). while helpful. it can be a bit 'noisy'.  i'm sure this is a webdriver preferences settings. just not sure how to configure it via protractor (or at least not seeing where that is documented).", "are you starting up a server for this configuration? you may be able to get away with basic configurations of requirejs without running the server (as long as there are no plugins that make ajax calls) but i can't tell from the config.have you tried running your specrunner in the browser?use `grunt jasmine:client:build` to generate a _specrunner.html file in your project root and open that in the browser. that might give more debug output than phantomjs and is a more familiar environment to troubleshoot in.", "move require up above helper and vendor script references.  . allows for specifying require config files in the helpers. ```jasmine: {  src: 'app'.  options: {    helpers: [      'app/config.js'    ].    specs: ['spec/out/*_spec.js'].    template: require('grunt-template-jasmine-requirejs')  }}```", "feat(minerr): add error stripping build step. here's a first pass at the error stripper. it strips and collects errors just fine. i'm have jasmine-node tests for this. but i'm not sure how to tie them in with the rest of angular. i would appreciate any feedback.", "i'd call the task something like `striperrors`. since `strip` is a little ambiguous (comments. eol whitespace. etc).also curious why you chose `multitask` over `task` (this is something that legitimately confuses me about grunt).otherwise lgtm.", "updated. the task is now called `strip-errors`. the grunt configuration uses an improved schema. i brought in tests. right now it's somewhat awkward because the tests are under lib/minerr/spec and we have a whole grunt task dedicated to running tests in that directory. thoughts?", '> ...the tests are under lib/minerr/spec and we have a whole grunt task dedicated to running tests in that directory. thoughts?this seems to be the grunt preferred way of doing things. as awkward as it is.']