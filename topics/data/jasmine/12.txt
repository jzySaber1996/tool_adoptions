["scriptsrc undefined in loadfixtureintocache_. variable 'scriptsrc' is undefined in error callback in 'jasmine.fixtures.prototype.loadfixtureintocache_'", 'sorry. i see in the code that jasmine-jquery supports this feature.', 'tohavebeentriggered() resturn true but obviously my handler function is not called. i\'m trying to use jasmine-jquery to test my jquery ui widget. i spy click events on it. tohavebeentriggered() reports a click when i trigger "click" on it but my handler inside my widget is not called at all (put a console.log in it to be sure)someone do knows what could be wrong ?', 'can you give an example of how you used the spy? the spy will normally "replace" the function that you spy on. so it will not call the functions called by the original function. unless you use andcallthrough() like so:`spyon(obj. \'method\').andcallthrough()` or `and.callthrough()`', "``` javascriptvar spyevent = spyonevent('#test'. 'click');$('#test').trigger('click');expect('click').tohavebeentriggeredon('#test');expect(spyevent).tohavebeentriggered();```all events attached to the #test element in the code i want to test are not triggered. but both expect doesn't raise any errors in the test (meaning the click was triggered and catched)", "well. i'm confused :)in fact. i did not realise my fixture was reloaded before each of my test. and so. i have to re instanciate my jquery ui widget on each test as well.", 'fix order of arguments to util.equals in wastriggeredwith.. this was preventing jasmine.objectcontaining to be used in tohavebeentriggeredonandwith.', 'alexeagle . got it. thank you!mhevery . please review. and about `zone-testing-node-bundle.js`. it also include `zone jasmine patch`. please check it is correct or not. thank you.', 'these changes are on hold for the moment. after merging. i ran all the tests myself with `minijasminenode2`. and it lacks things like test count and assertions count. as well as output formats for ci server integration. i am waiting for `jasmine-node` to bring their v2 out of beta before this will be officially released.', "isn't it expected to work globally out of the box. the same way jasmine-node does?", "any help on the above issue 'error: timeout - async callback was not invoked within timeout specified by jasmine.default_timeout_interval.'.  thanks in advance.", "i've noticed this happening with jasmine as well. fwiw", 'hmm. thanks for bringing this up. could i get you to create a small repository that reproduces it? we can use that to work towards a potential fix. the expected output for you would be that the jasmine reporter output would be the only output? or is it that it would print out in "real time" alongside the dots?thanks!', "mgiambalvoi use the default jasmine framework. but i define additional cli options in my project. such as account options for the app i'm running tests against. these get picked up as unknown flags. is there currently any way for me to plug these into the call to runtestpreparer to get rid of the warning?", 'for opening a page this might be true. but what if you want to use all the async / await goodness in your tests?it is said that the control-flow library will be deprecated in the near future (or maybe already is) and i guess that slight changes to the jasminewd2 dependency might make the whole thing work.', 'added .npmignore and tested to make sure only necessary things are copied with .npmignore', "allow debugging unminified source code. update readme.md. there is no clearly defined and documented way to debug unminified dust-helpers.js code. adding this ability with `grunt testclient` task. it is the same approach as in main dust repo (although testclient task uses unminified source file there).additionally coverage report generated by jasmine task was based on minified dust-helper.js file. it was hard to tell which lines were covered. since all of it was just one line. moved out coverage task as a separate task and made it generate report based on unminified source code.added `grunt watch` task to be in line with main dust project and just because it's handy :)also update readme.md to provide instructions on how all of these tasks should be used.with these updates travis build will run unit tests against minified dust helpers code in phantom. node and rhino. it will also run coverage report against unminified source code. if coverage thresholds are not met. build will fail.", "automate performance tests. it'd be great if the performance tests were automated so that performance regressions could be caught prior to being introduced.ideally. the performance tests could be run alongside jasmine. jshint. coverage through either grunt's `test` or `default` task. at the very least. the performance tests should be run in travis on a ci server.the performance tests are currently browser based. but it shouldn't be too hard to write a runner that pumps the html files through phantomjs.catching performance regressions would require comparing the run times of the current changeset with master. on the ci server. it's not hard to have a small script that checkouts master. runs the perf test. applies a patch. runs the perf test. compares the results. and outputs a small junit file. on dev side. that kind of script would be more invasive and require some form of git stashing as well. interested in getting people's thoughts.", "looking into the gruntifle. it seems that all the tests are already run via phantomjs. so one step to implement less.just out of curiosity: do you have any example of some other os project having this kind of perf tests? would love to see how they've done it.", "there's been talk about swapping jasmine for mocha-chai. samccone do you think we should wait to refactor tests until then?"]