["that isn't from jasmine-jquery", 'sorry. was node-jasmine-jquery...  (installing jasmine-jquery from node turned up that one instead)that project looks abandoned. is there a better suggestion for running headless with e.g. jsdom?thanks :)', 'release on npm. it would be nice if jasmine-jquery was available over npm. currently only some old fork is available there.', "second that. i've just wasted 10 min of trying to use `getjsonfixture` with old fork from npm.", "i've got the impression that when i have sequential tests in one file they are executed in expected order. how many tests do you have in each of your files?", "please don't rely on the sequential order of tests in a file. as it's not reliable. they generally do execute in order because of the way the file is read top to bottom. but the order in which the tests run is definitely not guaranteed. and can sometimes be surprising. if you need to run one test after another. use the `after` and `afterjson` callbacks to nest your tests.", "yeah. i understand the issue here - i was mainly replying to marcin-wosinek's comment about sequential tests in a single file.what you need is some sort of `before` and `after` block. as well as some sort of suite grouping concept. i don't think i will ever be able to guarantee the order in which files are run (that is the `jasmine-node` test runner). but what i _can_ build into frisby is the concept of test suite groups and before/after callbacks. would that be sufficient to solve your issue?", "vlucas thanks for the tip:) i've read other issues and just got the feeling that my configuration isn't reliable.pigulla sounds like in this configuration you cannot have any tests run in parallel. maybe you can run them one-by-one from some starter script:```node-jasmine testa.spec.jsnode-jasmine testb.spec.js```", 'test suite definition like jasmine. hi.i\'m fan of `jasmine-node` and used it frequently. i came around to `frisby` to test my newly written rest api. i\'m trying to figure out any `grouping` method like `jasmine`. we used to write something like this in `jasmine`:``` javascriptdescribe("/users endpoint test suite". function() {   it("should login the user". function(done) {               ....   });});```here. we\'re using `describe` to group all `it`. is it possible to do something similar with `frisby`?', "use local jasmine node. i would suggest moving jasmine-node global dependency for frisby itself. so that it's `npm i` and `npm test` only needed to get up and running with modifying frisby.", 'good idea. :+1:', "support for reporters?. does frisby support jasmine reporters?   i need to be able to output the results in a junit format.  also i do apologize if this is a naive question. i'm guessing there is a jump down to jasmine type of solution.  but i'm not sure what would be the intended way of doing that.", 'sorry not ont he readme page but on the web site:  jasmine-node spec/api/ --junitreport', 'travis cli build failed due to an error with the latest jasmine-nodeissue: larrymyers/jasmine-reporters#63', "json test report should include jasmine describe in test name. when using the json output file that's enabled with the resultjsonoutputfile config property. i am only getting the spec portion of the test description but i should also get the suite portion for the report to be really useful with jasmine.most runners either: nest the spec's within a suite. using the respective description strings; prepend the suite description to the spec description.", 'fix(jasmine): pass controlflow to jasminewd. fixes #3505. which is caused by jasminewd and protractor using different controlflow instances.', 'tymurphy551.thanks for the reply. i was able to fix this issue by upgrading nodejs. protractor and jasmine.josh', 'fix(jasmine): pass control flow to jasminewd. fixes #3505 and #2790. which is caused by jasminewd and protractor using differentcontrolflow instances', 'lgtm once travis is happy', 'deps(outdated): update types/q and jasmine', 'fix(types): remove relative path used for types/node and types/jasmine. closes #3533', 'chore(devdeps): update jasmine-spec-reporter', 'i tripped over the removal of `jasmine-spec-reporter` while following the upgrade guide. turns out it is still needed for protractor.', 'the tsconfig.e2e.json using --ng4 is the following:  > {  "extends": "../tsconfig.json".  "compileroptions": {    "outdir": "../dist/out-tsc-e2e".    "module": "commonjs".    "target": "es6".    "types":[      "jasmine".      "node"    ]  }}', 'tests: add `jasmine-node` to `devdependencies`', 'npm will automatically run `jasmine-node` as defined in `package.json` as `./node_modules/.bin/jasmine-node` when running `npm test`. there is no need to force global installation of the test runner.', "awesome. wasn't aware of that.  thanks!", 'i moved tests into urls.less (the one in root) and re-enabled jasmine for merge.less.', 'this looks really helpful.  using the example for testing is great. but could you add jasmine tests for the following cases?- labels only- functions only- objects only- no header (is this still supported?)for the object formatting. i would prefer an object rather than an array.  so. instead of ```                ["open".              function (d) {              return numberformat(d.open);              }].```i would prefer something like:```                {label: "open".              format: function (d) {              return numberformat(d.open);              }}.```it\'s a little more verbose but clearer.thanks!', "thanks. we're close... i'm surprised the test won't fail on master. though. because the heatmap-spec does specify `.transitionduration(0)` so it should... any clues?  if you think you're still getting transitions. you can call `jasmine.clock().tick(1000)` to skip them."]