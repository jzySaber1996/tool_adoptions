['+1', 'velesin ? publish?', 'remove option to control pathscope and remove tests for old getpath. all tests pass for make test and make jasmine', 'agreed that we dont need the options. approving based on consensus from smfoote jimmyhchan', 'sure since it is backwards incompatible feature wise.', 'remove node_modules/jasmine_node. this directory was added about a year ago. and should be ignored according to the .gitignore. removing it will prevent all these files showing up in commits when someone runs `npm install`', 'jairodemorais  can you make sure you are onboard with this?', "this entire directory will be added back whenever you run `npm install`. so i don't think there will be a problem. this just makes it so the .gitignore correctly ignores everything inside of node_modules.", 'ok!', "changing that line to: while (typeof ctx == 'undefined' && !cur){shows all tests passing and all jasmine tests passing and it fixes the reported problem. carchrae is there any better fix? we also ought to have a test for this case.", 'i\'ve found that ```   describe("/users endpoint test suite". function() {      frisby.create(\'doit\')....toss();   });```will group them however nested tosses are on their own', "parallel test execution. hi there.i'm not entirely sure whether this is something frisby can cover. or whether this is more a jasmine issue.would it be possible to run async tests in parallel? in case this is more jasmine related. do you know how to resolve this?", "i'm also trying to get an api test running asynchronously using the same async package. and had already written something very similar before i found this issue. just without the optional callback:```async.parallel([    frisby.create('#1').post ... .toss().    frisby.create('#2').post ... .toss().    frisby.create('#3').post ... .toss()]);```it doesn't seem to be making any difference though.the api calls are still going through sequentially. not all at once as i'd like.any advice would be much appreciated.", "maybe try wrapping them in a function?``` javascriptasync.parallel([    function() { frisby.create('#1').post ... .toss(); }.    function() { frisby.create('#2').post ... .toss(); }.    function() { frisby.create('#3').post ... .toss(); }]);```", 'same sequential behaviour when wrapped in functions as without them. unfortunately. but thanks for the suggestion.', 'interesting behavior.. is it possible that jasmine-node kind of prevents this from working?', 'i use mono repo as project structure. one package depends on  another package which have the same type definition (for node and jasmine). i ended up installing protractor at the project root. and moving all the type definitions to the project root to avoid conflict.', 'feat(angular/cli): add jasmine html report when using code coverage flag. fixes #5136', "also. be careful with the fact that protractor is still using jasmine. so when using you favourite ide. it's possible that you either end up with jest assertions functions being proposed by the ide in e2e tests. or if you leave `types/jasmine`. jasmine assertions functions being proposed by the idea in your unit tests...this is more a limitation of the ide than angular. but the problem exists still :)", "> also. be careful with the fact that protractor is still using jasmine. so when using you favourite ide. it's possible that you either end up with jest assertions functions being proposed by the ide in e2e tests. or if you leave types/jasmine. jasmine assertions functions being proposed by the idea in your unit tests...fyi. it is easily workaroundable by specifying `tsconfig.json` in `e2e/` and `src/` directories with the correct `types` declared.", 'adding runtime to the worldconstructor. tested using jasmine and works running cucumber against saucelabs using wd', 'script load reorder option. would it be possible to have an option to include vendor scripts before require.js in the template?  when i run jasmine with this template i get errors saying that dependencies cannot be found.  if i move the with scripts vendor script block above where require.js is being included in the runner html file then everything works fine.', '``` coffeescriptdescribe \'directive with faked service\'. () ->  describe "providing you\'re own stub object". ->    beforeeach module ($provide)->      class fake        areyoustubbed: ->          "absolutely!"      $provide.service "demoservice". [\'$log\'. fake]      # the key bit was that the trailing function below was missing!      # after i added it back. it worked exactly how i would have expected!      ()->     describe "stubbed method". ->      it "should call the fake. not the real thing". inject (demoservice)->        expect(demoservice.areyoustubbed()).toequal("absolutely!")  describe "calling a real stunt double". ->    servicefake = jasmine.createspyobj "demo". ["areyoustubbed"]    beforeeach module ($provide)->      # i prefer dealing with coffeescript classes whenever i can. similar       # to the example above.       # remember when going this spy object route. you need to wrap the spy in a.      # function; which makes sense. but it wasn\'t needed above using the class.      $provide.service "demoservice". ->        servicefake      # and dont forget this guy!      ()->     describe "stubbed method". ->      it "should call the spy. not the real thing". inject (demoservice)->        demoservice.areyoustubbed()        expect(demoservice.areyoustubbed).tohavebeencalled()```']