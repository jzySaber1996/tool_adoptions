['basic library header. adds a basic library header (description. url. copyright. license).  this is pretty standard for most projects (ex: jasmine-ajax file header) and is usually required before libraries can be used by copyright sensitive applications.', 'i was about to open an identical pull request -- since the docs say "simply download jasmine-jquery.js from here and include it in your jasmine\'s test runner file " it really ought to have the license in that file.', 'shoot.  this pull request is referencing only my commit and not the whole branch.  closing and replacing with #115', 'hi kilianc we would be really happy to add your change after you add some jasmine test. we believe that you did a great job and the test would be the icing on the cake.', 'try running the test with the make command. execute "make jasmine" in the dust root folder.', 'hi oleics . thanks for the pr. could you add the test for jasmine??. please', 'refactor the examples.js for the jasmine. may be we should refactor thisone for core dustone for helpersone for dust grammar', "for karma now you have to use fdescribe or fit ('f' is for focus). how ever in the protractor context nothing is working...", "i have problems with jasmine.default_timeout_interval. too. no matter how i write my code... i can't get rid of it.", 'replaced this.addmatcher to jasmine.addmatcher.it works with jasmine2 framework settings.should i write everywhere jasmine.addmatchers?', "all tests use new api. custom matcher are adopted too.in protractor instead of jasmine.\\* i always wrote this.*but when i use jasmine2 in configuration `this.addmatcher` doesn't work as it worked before", "as i've mentioned. please read the jasmine2 upgrade guide (referenced above):> the addmatchers function is no longer on the spec (this) it is now on the global jasmine object.also note that `jasmine.addmatchers` requires a spec context - i'd suggest to call it in `beforeall` definitions.", "+1 that's a pretty cool jasmine2 feature and it's a pity that we cannot use it with protractor. is anyone taking care of this?", 'without fit and xit how can we run single test in protractor?', "i think this template shouldn't be responsible for this kind of improvement. i suggest you to submit your requirement to `grunt-contrib-jasmine` repo since your need doesn't only work for requirejs template.", 'stilva . this would be appreciated as a pr to grunt-contrib-jasmine if you can abstract out of the template. thanks for the time and interest!', 'fix for relative base urls. currently `grunt-template-jasmine-requirejs` removes the `baseurl` specified in the require config from each `src` in the generated `_specrunner.html`. the existing logic uses a regex to replace the baseurl which only matches when the baseurl starts with `./`.this pull request resolves `src` scripts against the expanded baseurl providing relative paths in the generated specrunner - allowing relative baseurls that do not start with `./`.', 'i experimented a bit more and found that explicitly using the `types` array in tsconfig fixes it. but it shouldn\'t be necessary:```    "types": [      "jasmine"    ]```', 'load the configuration settings based on the task\'s name without assuming "jasmine_node". it\'s possible to rename the task using `grunt.renametask`. but if the task is renamed then the settings are not loaded correctly.this is useful if you want to have multiple test suites which load different configs.in particular. for my implementation. i want one test suite which runs with `userequirejs: \'...\'` for our legacy code. and another with it set to false for our new code. and the only way i can seem to be able to do this is to have two instances of `jasmine_node` running._disclaimer: i\'m a bit of a grunt n00b. so if there\'s a better way of doing this. then i\'d be very glad to know_', "+1 for this. i'm facing the same issue."]