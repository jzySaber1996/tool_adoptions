['dsawardekar vlucas are you implementing this or is this an issue that is still unresolved?', "diablomarcus it's resolved for me at the moment. i ended up not needing single runs for the project i was working on at the time.", "fix(config): add jasmine option to clear reporters. this adds an option in jasminenodeopts to clear all reportersbefore protractor registers it's own lifecycle reporter.this addresses an issue where the default jasminereporter conflicts with user registered reporters#3609", "we found a contributor license agreement for you (the sender of this pull request). but were unable to find agreements for the commit author(s).  if you authored these. maybe you used a different email address in the git commits than was used to sign the cla ([login here]( to double check)?  if these were authored by someone else. then they will need to sign a cla as well. and confirm that they're okay with these being contributed to google.<!-- need_author_cla -->", 'commit was updated with the correct email address for cla.  commit author is the same in both cases.', 'hi sakovias. i am having the same issue on with using --grep. did you happen to find any solution to skip beforeall for spec that does not match the grep value?', 'awesome! thank you for looking into this. let me know if you would like me to test the fix for you.', "dvanderb you'll need to respond with `i signed it!` for googlebot to check your cla", 'for #3726 to fix this. we need to modify jasminewd a bit.', "most of these are karma / jasmine issues rather than cli issues.at the moment the cli is committed to only supporting one test tooling chain. which is karma and jasmine. since there cannot be hidden 100% like a bundler is (because you use the test framework apis in your tests). the choice is also exposed to the users. this has nice side effects like:- you can easily add / replace karma reports in karma config- you have full control over the `test.ts` file used to run the testsalso. if you agree to give up calling `ng test` (replacing it with a `test` npm script for example. so you just run `npm test`). you can easily move away to jest if you prefer to. i have tried it myself in a medium size real project and found it pretty easy.it's worth mentioning that the built in jasmine html reporter does allow you to click on a single test or suite of tests and only have these run. and the cli itself supports a watch mode (enabled by default actually. and can be changed either per cli call. or by changing the default in karma config). it's not a jest-style watch for changed files only. but that's because it's simply not jest. it's karma + jasmine.", 'it is really odd issue. it seems after i disabled the karma-jasmine-html-reporter. and ran several cases. and then enabled karma-jasmine-html-reporter again. it suddenly works.', 'filipesilva i can reproduce this on a new machine. just follow the steps wind13 gave. although i got my macbook work. today i ran into this on a linux machine as well. and it seems it did not get around this by disabling and enabling karma-jasmine-html-reporter.', 'external dependencies are:    "lodash" : "_".    "fs" : "_".    "log4js": "_".    "typeof": "_"plus jasmine-node for testing.files you need are:from lib:agenda.jschartparser.jscykparser.jsearleyitem.jsgrammarparser.jsleftcornerparser.jschart.jscyk_item.jsdoubledotteditem.jsearleyparser.jsgoalitem.jsheadcornerparser.jspeg-grammar-for-unification-grammar.txtand from spec:chartparser_spec.jschart_spec.jscykparser_spec.jsearleyitem_spec.jsgrammarparser_spec.jsheadcornerparser_spec.jshugo', "thank you for this pr. we definitely need to be able to attach listeners from inside support code and probably hooks as well. however. i'm not convinced we should expose the runtime instance to the end users; this is internal stuff. what about exposing another method on the support code helper (i.e. the object holding definestep(). given(). world. etc.)? ```this.registerlistener(mylistener);this.before(...```it would be more consistent with the rest of the api. imo.  wdyt?", "thanks for your feedback.  i understand your argument for appropriately restricting the api.  if i understand your suggestion. support code with this.registerlistener(mylistener) would have a listener registered.  as a user would i add this to a step definition?it may be a bit odd if users commingle their registerlistener functionality with step definitions.  cucumber-js may want to encourage the use of a common.js. listeners.js. or similar pattern.  and if i understand the world constructor correctly (that the last this.world assignment wins) it may be useful to put the world constructor there as well.i'd also like to add a list of event name strings to listeners.event (e.g. listeners.event.beforescenerio = 'beforescenerio') to assist in code completion and prevent typo frustration.let me know what you think.  i'm ready to move forward w/ the discussed code changes.", "hi mtraynham. i am finally merging this.  thanks!i figured you probably wouldn't mind me snagging parts of your fiddle for the jasmine spec.  if you have a minute. could you double check the test in 9c682c9?  it definitely fails before your patch and succeeds after. but it fails differently from your fiddle: whereas your fiddle usually shows little stubs of wrong values. this just gets a straight zero wrong value."]