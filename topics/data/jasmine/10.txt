['fixed bug with html5 style booleans causing parsererror. if you use a fixture with the new html 5 style boolean attributes (i.e checked. selected) with no ="checked" or similar. jasmine-jquery will not load the fixture due to a parsererror when making its jquery ajax request. as it isn\'t valid xml. this can cause a problem with certain mustache.js techniques. such as```<input type="checkbox" {{#checked}}checked{{/checked}} />```this commit sets the datatype to be html when retrieving a fixture. because. well. it is. which seems to fix the issue.', 'looks good. can you not checking/add that chutzpah.json though', "sure. if it bothers you... i'll take it out.", 'came here to report this issue after working on some twitter projects.', 'ok. so i was able to fix this problem. the problem was due to in-correct links in the fixturespath.closing!!', 'carlos-  tried to take a crack at adding a test point:```it(\'should not error on empty series\'. function(done) {  jasmine.getfixtures().set(\'<div class="ct-chart ct-golden-section"></div>\');var chart = new chartist.line(\'.ct-chart\'. {  labels: [1. 2. 3. 4].  series: [[]]});chart.on(\'data\'. function(data) {  expect(data.type).toequal(\'initial\');  expect(data.data.series[0]).toequal([]);  done();});});```results in:```log: error: problem parsing d=""```maybe there is more clean up needed?', "fix(jasmine): store original jasmine method. this lets us skip the proxyzone if we really don't need it in our tests.", 'gaving: yep :d `frisby.create()` creates a new suite (`describe`). nesting suites inside specs (`it`) does not work in jasmine. afaik. so instead you should do: ``` jsdescribe "test". ->    frisby.create(\'test in test\')      .get(\'      .expectstatus(404)      .toss()```or alternatively as many suites as you prefer.stumbled across the same issue in `afterjson()` calls. which (in my fork) end up being called inside a spec where i am unable to create further suites. decided to switch to vows.js eventually for that reason.', 'yeah. i saw that - just throwing out some options. it does seem like a tool like this should have the ability to run in parallel though.', "jasmine-reporters. i everybody. i am using the following configuration jasmine.getenv().addreporter(    new reporters.junitxmlreporter('../reports/junit-reports'. true. true));the problem is that the xml result is always generated on the **root file**. i want to generate the xml reports on the reports folder.", 'need to update initialization of jasminewd', "i'd like to open this ticket again. the reason is that we saw end to end tests failing today for the following reason:1) go to a website with angular2) do some stuff3) go to another website with angular4) this other website was showing an error page which does not have angular on it5) the whole of our test suite exited without attempting the remaining teststhis kind of error should not tear down the whole node process. it should fail the test for the reason that window.angular is undefined. and then carry on fresh with the next test.we have several custom jasmine reporters that capture things like browser logs. screenshots. browsermob proxy logs. these reporters. if they had a chance to run. would have shown us that the site was showing an error page. so we would have known exactly what the problem was from our build artifacts. but instead the whole node process was killed. meaning our reporters didn't run.", "the setting numchars was just a hack to make test from jasmine node work becuase there are no css there to make width of the terminal so i've created that option to set number of chars. i didn't know it even work outside of tests.maybe i should not put it in docs.", 'one other alternative is for `addtocontext` to **require** a `global.xxx` scope for the key: ``` html{addtocontext key="global.foo.bar"}hello world{/addtocontext}<h1>{global.foo.bar}</h1>```this doesn\'t guarantee you aren\'t overriding something else in the global scope. but helps ensure you aren\'t messing with the json used in dust.render and makes it very visible what you\'re adding/referencing.', "thanks again for the hard work paul. this is very good! i'm merging this now.i'd like to see end-to-end tests added at some point. what i suggest is we consider these two new methods _unstable api_ at the moment. i'm ok if the build passes without this tested deeply as well as the rest. we'll also need to document them in the readme at some point.> taking your concerns into account. what if we moved the named beforex and afterx declarative methods to cucumber.listener and removed registerhandler from the helper. this would leave the only registerlistener on the helper. move apis you feel are more sensitive to the more internal listener object and still keep a declarative syntax in one place (now on listener rather than on the helper).i'll merge with `registerhandler()` in but we can keep on discussing alternative solutions. `registerlistener()` feels about right to me. though.> in regard to hook vs event behavior. what if we added the world and scenario to the event payload? i haven't looked at the implications for doing this. but it may allow you to make the hooker into a special-case wrapper of a listener and reduce complexity.that's interesting. would you like/have time to make a spike on that?", 'closed by 4be20a5211bd213dd1e110fc126a9e027e635f6e', "gordonwoodhull 1 offset is both on left and top `translate(-_clippadding. -_clippadding)`. so i think this is all set unless i'm missing something.2 yup. agreed.3 yup. agreed.4 tests. i wasn't familiar with ci build. it looked like some fixture/s needed to be updated but i wasn't sure and didn't want to change things w/o understanding them. is that something you can update? i can add a jasmine test to set the padding and confirm the rect has the updated attribute."]