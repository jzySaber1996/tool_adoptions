["what's the difference between this and `jasmine.getfixtures().fixturespath = 'my/new/path';.`?", "to be fair. i should have read the readme more thoroughly before sending this pull request. i missed the fact that i could do `jasmine.getfixtures().fixturespath = 'my/new/path';` ... but i think that the methods i added are still useful. if you look at the code. i added methods to modify the attributes of all types of fixtures.", "no. this pr's no good. there's already `jasmine.getfixtures().fixturespath = ...`. so that solves the problem you had. but you added being able to set the containerid of html fixtures. but i don't think that's useful and nobody has ran into needing that yet so i'm closing this.", 'added tohaveselected matcher for determining if a jquery selector selects some given elements. i was writing some tests and noticed we have tocontain. which uses $.find under the hood. but this only checks for children in the selector. while i was trying to determine if a selector that selects many elements (via .add) selects a given element or not.hope i just needed to write the matcher and specs. let me know if anything looks out of place! and thank you for providing this great library for jasmine. :tada: :)', "thanks for the feedback! i implemented your suggested changes except for #2. because i am not sure i fully understand what you mean.in the test i create a few elements and select them in various ways. and then verify if a given selector or element is contained within those various selectors. to me. it looks like i am verifying it against only selectors and not elements. as none of them use array bracket notation or the get function to get or pass the underlying elements. which now that i look at it they should in addition.it may just be a communication problem and what i'm calling selectors is what you are calling elements? ultimately this matcher and tocontain just use .filter and .find under the hood. so they both should (by virtue of jquery). accept selectors or elements. totally down for whatever change. just want to make sure we're on the same page first. :)", "changed the name again because the name's too similar to the existing `tobeselected` so now it's `tobematchedby` which makes its intent clearer anyway.", 'yes! perfect choice of name!! :+1:', "thanks for the `jasmine.getfixtures().fixturespath = 'path';` tip. guys!", "add support for jquery object equality. ### i would like to see support for testing the equality of jquery objects.currently. asking jasmine if two jquery objects are equal (through the function `jasmine.getenv().equals_(object1. object2)`) will fail even if those jquery objects are referencing the same dom element.this is annoying because it causes functions like `tohavebeencalledwith` to not work as expected when passing jquery objects as arguments.#### this pull request adds support for checking if two jquery objects are equal. as a result. functions like `tohavebeencalledwith` will work as expected when passed jquery objects.to be clear. a jquery object is typically something returned by `$('div')` for two jquery objects to be equal means that:- if objects with only one element are compared. both objects reference the same dom element. even if they have different selectors- if objects with many elements are compared. both objects reference the same set of elements. no more. no less", 'as a reminder i also previously added a `me.rect` jasmine test unit :)', "but you do realize that it's rather pointless to work around everything being asynchronous when all you need is a synchronous script? when writing tests. you don't need them to be event-driven. you are not writing a server. you are not writing a gui app. you are writing a test that executes mostly top-down. and if you for once forget that protractor only creates an illusion of being synchronous (which is easy). and then try to mix it with other synchronous (or non-protractor asynchronous) code. it's going to bite you.never mind that most stack traces produced by protractor+jasmine that i have seen have _never_ pointed me to a line in my script that caused the failure in the first place. which makes debugging hard. which makes cost of tests skyrocket. which makes it easy to forget that tests are an auxiliary tool and must be as simple and unintrusive as possible.i still want a truly blocking protractor. should i fork it instead?", "juliemr. how is this ranking in your backlog? it's causing me some real pain and i can't find satisfactory solutions. i couldn't get the `afterall` hack to work either. so i'm at a loss.", "it's unlikely to happen soon because it's dependent on the jasmine team.  i assume the plugin hack also didn't work for you?", 'yeah... on that note. am i the only one who thinks jasmine was a seriously poor choice for protractor? (not suggesting mocha would have been any different).', "a lot of people like the jasmine _api_. i don't mind it. but protractor had to patch jasmine to make it all work. and clearly it hasn't patched it enough. that's what i meant: jasmine was never meant to be used in these ways; that's why i think it may have been a really bad choice.jasmine expects many things to be synchronous (describe calls. it calls. reporter callbacks). and protractor needs to jump over hoops to make those work asynchronously. and since end-to-end testing falls outside jasmine's core purposes. we're stuck in this situation where it's unlikely that we'll get the upstream features we need anytime soon.(and yes. you can use any other framework you like. but jasmine is the default. and i didn't expect to find so many problems with the default. official choice).", 'execute jasmine tests in parallel. i have a single spec file with four jasmine tests. like below```describe("a suite". function() {  it("test1". function() {describe("a suite". function() {  it("test2". function() {describe("a suite". function() {  it("test3". function() {```i have a requirement to execute the tests(within a single file) in parallel. to minimize the execution time. i tried  specifying the capability like below:```  multicapabilities: {    split: true.    maxsessions : 2.    capabilities: [{      browsername: \'firefox\'.      count: 2    }]}```but it doesn\'t workout. do we have any option to share the tests within a spec file...like `shardspectests`?', "this is not possible at the individual test level currently. we can add a feature request for this but i'm not sure of the timeline.", 'thank you. sjelin looks like #1944 will solve all our problems. is there a release date yet? edit: by the way your waitplugin.js works for me. i resolved the promise in the oncomplete() function. thx!', "there hasn't been any more activity on this so going to go ahead and close. feel free to submit a pr or a feature request! :smile:", 'no timeline on when #1944 will be released.  glad `waitplugin.js` worked for you!', 'thank you ...will wait for the feature to be added', "can we change rootelement through jasmine spec. as per juliemr  commented on the issue #1056 you can specify which element to use angular from using rootelement in the config. but there's currently no way to change this part way through a test. i can't tell from your description if that's what you want to do or not. but if you just need to test one part of the app then just use rootelement set to an appropriate selector.", 'this sounds like a race condition with jasminereporters and `restartbrowserbetweentests`. could i get you to create a small sample repo that reproduces this? that way we can try to investigate what exactly is going on and eliminate any extraneous factors. thanks!', 'delasteve i have upgraded to cli beta 10 which contains angular rc4. removed the deprecated imports for jasmine (expect. describe. etc..) from the top of my spec files and i have the same problem as bluefalcon.', 'same here.  the idea is that i want to generate a test (jasmine spec) for an existing component.', 'select tests. basic jasmine tests for select.still many things that need to be tested. but first we need to fix some select issues so our build still passes.', 'plans to add keyboard testing soon?lgtm', "once select has more bugs cleaned up i'll add the more complex tests. the latest pr should have done most of it but just want to give it a while to make sure.", "can't run tests on clone. if i clone the library. run `npm install`. and then `npm test`. i get errors about not being able to launch phantom. i've played around with this and the only way i can get these to pass it to update some libraries. because of peer dependencies. this eventually gets me to the point of having to update to jasmine v2. which has a lot of breaking changes", 'add timeout to returned promise in jasmine-promise. also call oncomplete() if an error is raised. as otherwise my runner never terminated and gave no indication.', "we have a `promise.timeout(ms)` method. got a moment to try that approach. i would not mind if you would squash (using `git rebase -i`) the commits and force push to your branch (`git push -f`). don't try it if you haven't done it before though; i can do it on my end.", 'squashed it into one commit. documented and specced the behavior. as i suspect that others will find this useful.', 'the only known issue with templates is a change in what files are needed in the template and what order. there is no longer a `start` file. it has changed to `boot` which gets included right after jasmine.cloudchen reach out if there are substantial issues with the template.', 'migrate unit tests to jasmine. jasmine is easier to read/use than node-tap.  it is also more familiar to potential contributors.', 'clean up configuration. configuration options are read from several levels. some from the root `jasmine_node`. while some from `options`.perhaps #12 and #11 will help to achieve this.', 'does the fork apply?. should this project and its repository be one of its own. instead of a fork from the `grunt-jasmine-node` project?']