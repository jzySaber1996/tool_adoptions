['make jasmine a devdependency instead of dependency in package.json. - also use local jasmine install instead of global for `npm test`', "thanks for that. i'm fairly new to working with jasmine", 'support jasmine v2', "i removed an extra semi-colon that was added in my previous commit. i don't have postgres installed so i cannot run the jasmine-spec. however the test-buster-mysql is passing (and always did). hope it works now. :)", 'looks good. we\'ll have a further look at it latercould you add this line to package.json`"test-buster-mariadb": "dialect=mariadb buster-test".`and add mariadb as a dialect in each test file in spec-jasmine (not very dry. i know. sorry). that way the tests will actually be run for your new dialect :)_edit_ - you should also add the following to env in .travis.yml`- db=mysql dialect=mariadb`', "i'm trying to get rid of my travis build errors but seem to just be making more of a mess in my local copy and getting lots of errors when i try to test locally. can someone help me out with this?  i've been making changes both in spec and spec-jasmine.", 'looks good. thanks! just one last thing - i see that some of jasmine tests fail. in dev branch all of them pass. could you please take a look at them? i am going to merge this pr as soon as all the tests pass.', 'add es6 proxy support with tests. i also enhanced the css of jasmine tests. and tweaked a little of the js responsible for benchmarking ui.', "how can we assign the result of asynchronous method result value to global scope in protractor . i have a use case where i need to get the value from the database and that value has to be used many times in a jasmine test .so . my question do we need to assign in global scope or use flow.execute() method .can i know which one should i use. describe('testing suite'. function() {    it('testing spec'. function() {        browser.get(browser.baseurl);        var number;        database.generatemobilenumber().then(function(mobilenumber) {            console.log(mobilenumber);            number = mobilenumber;            console.log(number);        });        console.log(number);    });});", 'firstly thanks for your reply. i want to assing in jasmine test file scope. when i assign it is show as lib$es6$promise$promise$$promise {  _id: 9.  _state: undefined.  _result: undefined.  _subscribers: [] }but i need a value', 'i have to call for each jasmine suite file that function', 'vivekbrahmadandi also you can try generate many numbers - 1000. 2000 and put them into global array in onpreparethen in your test - just .pop() number each time you need it.or you can try to play with browser.wait()``` javascriptlet prom = promise.defer();var phonenumber;database.generatemobilenumber().then(function(number) {phonenumber = number;prom.resolve(true);})browser.wait(prom. 10000)console.log(phonenumber)```something like this i think.', "in the meantime i found out that there is a possibility to set comments on tests ignored with `xit` and therefore even improved my workaround a little bit:```            // in my protractor onprepare code:            var _pending = pending;            pending = function(pendingmessage) {                return {                    it: function(description. itfunction) {                         var spec = xit(desription. itfunction);                         spec.pend(pendingmessage);                         return spec;                                            }.                    describe: function(description. describefunction) {                        return describe(description. function() {                            _pending(pendingmessage);                            return describefunction();                        });                    }.                    here: function() {                        return _pending(pendingmessage);                    }                };            };```usage:`pending('my pending comment').describe('my describe block'. function() { ... });`or`pending('my pending comment').it('my it block'. function() { ... });`or (just in case you still need the old pure jasmine pending implementation somewhere else. with all advantages and disadvantages)`pending('my pending comment').here();`", 'merge before audit work. ### added- governance proposal. approval and triggering of new version at deployment- jasmine tests for governance of new version (shutting down)- test asset registration does not error### changed- tr datafeed address- governance deployment parameters- allow anyone to shut down a fund deployed from a version which has shut down### deprecated### removed### fixed- bug destroying all blockchain data when starting devchain node- gnt address (golem token)- stopped mln from being registered twice### security', 'nami-doc great read. thanks for sharing.', "fixed this by using ```typings install --global dt~jasmine```not sure if this is how it's meant to work?", "i'd also suggest that all the external lib for testing e.g. `lib/jquery.js`. `browsertest/lib/jasmine.js` should be put in a unified folder", "doesn't install. hi! i have a problem again.module doesn't install.error depends on jasmine.if i try to install as my user ```npm err! error rolling back error: eacces. unlink '/usr/bin/jasmine-node'```if i try to install as root```npm err! error: attempt to unlock jasmine-node. which hasn't been locked```also. a co-worker of mine has tried install node.js and docxtemplater at the clean system. and docxtemplater didn't install. but other modules (for example express) has been installed successfully.any suggestions?", 'thank you!', "no. i'm using a jasmine test runner that uses phantomjs behind the scenes.", 'issue with matchdep. since the plugin is titled "grunt-template-jasmine-requirejs" any time that you are using matchdep to load your grunt tasks you get the following error: ">> local npm module "grunt-template-jasmine-requirejs" not found. is it installed?".the typical use case for loading grunt plugins with matchdep is:require(\'matchdep\').filterdev(\'grunt-*\').foreach(grunt.loadnpmtasks);to be clear grunt-template-jasmine-requirejs is a grunt plugin helper. not an actual grunt plugin. the naming convention conveys the message that this is a normal grunt plugin. this is causing some hacky work arounds when using matchdep. but could be resolved if the project name was changed to any of the following:grunttemplate-jasmine-requirejsjasmine-requirejs-shimjasmine-requirejs', "to be clear. matchdep is used to get dependencies that match a pattern. using it to broadly include modules based off of wildcards is a bit hacky itself.i use it sometimes too. but i don't expect module maintainers to support changing the names of things to support that method of loading. the keyword 'gruntplugin' is what is used to denote grunt tasks. the grunt-\\* naming convention is for things related to grunt. if you happened to include grunt-cli or grunt-lib-phantomjs you'd run into the same issue.```matchdep.filterdev('grunt-*')  .filter(function(module){return !module.match('grunt-template-.*')})```seems perfectly appropriate and in line with how it should be used."]