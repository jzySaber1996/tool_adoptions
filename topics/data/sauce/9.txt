["actually `_slice` won't work on strings in older environments as it uses indexs to access characters instead of `charat` (sauce will fail)also i disagree with the changes in this pr", 'e2e saucelabs', "what we are moving to isnt particularly certain. but definitely moving away from travis + saucelabs towards a 'run tests on a single machine' solutionwe spent way too much time getting travis working and it still ended up failing way too often to be useful", 'docs: sauce issues. i had a pull request all set for this. but i realized that i haven\'t done a cla since starting at my current employer. so. it\'s more expedient to just point this out. i had assumed that if i opened a sauce connect tunnel. i could just point at localhost as if i was running against a local selenium. and so i still had a seleniumaddress file in my config. and i was wondering why i was getting errors that my user and key hadn\'t been provided.poking in the code. i discovered that seleniumaddress overrides sauceuser and saucekey. which isn\'t documented on line 58 of server-setup.md.additionally. browser-setup.md says on line 75 that if multicapabilities is set then capabilities is ignored. but this is not entirely true. protractor errors out if the capabilities key doesn\'t associate an object that minimally specifies a browsername.  this one seems like a bug to me. in fact. the sauce driver doesn\'t seem to support multicapabilities at all... is that so? or is it not working because i\'m manually creating the "protractor/lib/runner" instance in my gulp process and not doing something that i should be?i\'ll get to work in my company with signing a cla so i\'m not handcuffed in the future.', "i did look at that. the main difference i see is that the launcher seems to use a separate process and exits/starts a new one for each run. does that mean that reusing the prototype to get a new instance of runner within the same process isn't intended to work?", "gotcha -- i missed those. glutton for punishment that i am. i'm going to try to deal with that instead of relenting and going out-of-process.the reason i'm actually more interested in separating the runs outside of protractor runner than doing multicapabilities has to do with the fact that cucumber has no facilities for writing results to a file. and i have to hook the process.stdout and write the json manually to files in order to capture the results and then turn each of them into xunit/junit files for our nightly test harness to consume. it would be great if there were a way in protractor to redirect test output to a file. but it seems the architecture relies on the test framework for that.  so. barring that. doing it this way makes it easier for me to isolate the results output from the other messages and to keep the results of the multiple runs separated.thanks for your help!", "yes. the #1485 attempts to unify the test output for all test framework into a single format. cucumber hasn't been done though. i'll look at it now to see how feasible it is.", "stu-salsbury sorry but we're not actively supporting the cucumber framework (it's more community-driven). i just included cucumber output as part of that pr since it was easy and allows me to create test cases with that. feel free to submit cucumber prs and we will review them and pull them in though!", "thanks hankduan . yes. i realize that cucumber isn't officially supported. for me. the bigger issue now is that i find that the center of gravity has moved even further out of the runner and into the launcher and so i'm left with a lot of functionality that isn't suited to running in my gulp process. i guess that means that i need to target at least the launcher as my entry point if not attempt to harness the cli itself. i was really hoping not to add to the already lengthy list of out-of-process steps in my build.", "to summarize that we've discussed:- browser alias is `{provider-name}:{browser-name}`. both parts are optional. we've try to lookup provider first. e.g. for `phantomjs` alias. then local browser with that name. e.g. `chrome` alias- we should reflect this structure in code- listing of browsers for provider in cli should show aliases. e.g. `saucelabs:win8chrome`. `phantomjs`- `listavailablebrowsers` should return browser names. e.g. for saucelabs `win8chrome`- `openbrowser` in provide should accept browser name. e.g. for saucelabs `win8chrome`", 'support custom firefox profiles in launcher. firefox has the ability to define support custom profiles. this isimportant for allowing users to enable custom or experimental featuresfor testing. an example of this is webgl support. which partiallyworks on sauce labs.using a library called firefox-profile. the sauce labs launcher shouldallow users to define custom properties.', "ranbena no worries about the reply--we've all been crazy busy on this end and we haven't officially started working on this yet.  you can send the app to ericsaucelabs.com.  thanks!", 'isaacsaucelabs.com', 'btw saucelabs seems to fail always on any pull request.. this is also something we need to fix', "thanks amarcruz i don't get why the saucelabs tests fail always!", "vojtajina do we want this pr?3lux caitp we have browserstack config for some browsers because we were actively exploring possibility to run tests on browserstack. we hit some issues. so that's on hold for now and we use saucelabs instead. it's my understanding that saucelabs does have mobile devices or emulators available for us. but i haven't tested that personally. and regarding selenium - saucelabs offers all of the browsers via webdriver api. which is often called selenium for historical reasons. we don't use the selenium assertion library for any tests. webdriver (part of the selenium project now) is a low level communication protocol that allows us to remotely control browsers)"]