bower/bower,mocha,2013-05-10T22:33:23Z,fyi: the travis test is failing. but it's not failing under mocha on my machine. sorry about that.,negative
bower/bower,coveralls,2014-07-26T21:20:01Z,tests passed. coveralls failing. investigating...,negative
Nordstrom/cfn,standard,2017-06-01T23:32:00Z,added standardjs support.,positive
leinonen/cucumber-html-report,eslint,2017-02-03T20:37:41Z,javascript standard style. enforce javascript standard style using eslint. it's so much cleaner :),neutral
sinedied/hads,eslint,2017-09-25T10:10:36Z,feature/eslint,neutral
fantasyland/fantasy-land,eslint,2016-10-23T02:20:41Z,lint: integrate eslint. linting is hooked up to `npm test` so travis will run `eslint` for us. :),neutral
i18next/i18next-gettext-converter,eslint,2016-06-18T04:37:20Z,sure. i'll take you up on that offer. might have time to re-work this repo during the weekend.my current plans are to replace the `quite` option with `verbose`. refactor into a programmatic api. and install airbnb eslint config.,neutral
i18next/i18next-gettext-converter,eslint,2016-06-18T12:12:20Z,airbnb eslint config. this is quite a big one. refactored everything to pass the airbnb eslint config. bar a few rules i turned off here and there. there were some tricky parts with the plurals section. but i think i got those right.,negative
i18next/i18next-gettext-converter,eslint,2016-06-18T16:18:15Z,gave you full rights on the repo...do you have a npm account...will give you publish rights too,neutral
i18next/i18next-gettext-converter,eslint,2016-06-18T18:34:50Z,cool. thanks!,positive
i18next/i18next-gettext-converter,eslint,2016-06-18T18:35:30Z,my npm username is the same as here. `perrin4869` :),neutral
i18next/i18next-gettext-converter,eslint,2016-06-19T08:21:39Z,just added you as npm module owner...happy publishing ;),positive
i18next/i18next-gettext-converter,eslint,2016-06-19T09:19:20Z,thanks. will try to make a major release this week!,positive
infernojs/inferno,eslint,2016-12-27T22:16:15Z,to avoid this can you enable the lint rule in eslintrc? happy to merge otherwise.,positive
infernojs/inferno,sauce,2017-01-06T08:54:23Z,is there any way to write test case for this? can we use saucelabs for testing all ios devices. lukesheard ?,neutral
jprichardson/electron-mocha,mocha,2016-08-14T03:54:23Z,workspaces on mac os x. on my mac. i like to keep my ide in a workspace by itself so i can quickly switch to and from it with a four-finger swipe on the touchpad. when i start electron with the electron-mocha package. despite no new window being displayed. it always pulls me back to the default workspace. which gets old when i'm using a file watcher to auto-run my tests each time i make a change. is there a way to make electron (specifically. the instance started by electron-mocha) not do this?,negative
jprichardson/electron-mocha,mocha,2016-09-06T14:02:24Z,support for `--watch`. the mocha option `--watch` currently doesn't seem to do anything. could that be added? besides that this is really great!,positive
jprichardson/electron-mocha,mocha,2016-09-06T14:23:55Z,for us it worked great so far. especially because it integrates very well with the mocha compiler options (as the process is kept alive). so if it could be added without too much effort would be appreciated. even though i understand mocha wants to move away from it :),positive
jprichardson/electron-mocha,mocha,2016-09-06T16:28:14Z,i'm against it as well for the same reason inukshuk stated. it may be easy to add. but the maintenance burden may add a lot. ultimately your decision inukshuk.,negative
jprichardson/electron-mocha,mocha,2016-09-06T17:23:31Z,personally i would prefer to see verbatim options passing for wrapper tools like these. which pass anything not relevant for wrapper to the tool itself. eg. `electron-mocha --report -- --watch --reporter x **/*.js`. which leaves the maintenance burden to `mocha` and the risk to the `consumer`. instead of making a decision on watch before `mocha` does. i can imagine that in practice this is a little bit more tricky as mocha is started from js. so you would still need to parse options. but anyway. my 2 cents ;-).,negative
jprichardson/electron-mocha,mocha,2016-09-06T18:04:35Z,mweststrate want to give it a try? i'm happy to merge a pr if just passing the parameter through to mocha works fine in both processes without any extra effort.,positive
jprichardson/electron-mocha,mocha,2016-09-06T19:01:41Z,gonna give it a shot tomorrow,neutral
jprichardson/electron-mocha,mocha,2016-09-08T15:32:43Z,"mocha requires electron to be installed globally. hello.i used mocha to test my electron app and  got an error: ""can not find 'electron' in the $path and $electron_path is not set. please either set $electron_path or 'npm install electron'"". my workspace contains electron and not the machine itself. **is there a way i could circumvent the installation of electron on my build machine?** as. electron will in turn require node and npm on the build machine.thanks!",negative
jprichardson/electron-mocha,mocha,2016-09-08T17:08:43Z,obviously. you need to install electron on the machine where you want to run electron-mocha.you can install electron without installing node/npm first: if you do that you need to make sure it is either on your $path or you have to set $electron_path to the electron executable (if you install via npm you don't have to do that).,neutral
jprichardson/electron-mocha,mocha,2016-09-08T17:40:36Z,thanks for your response.i do have electron in my node_modules directory of the current project i am working on. i do not want to install electron globally on my machine. is there a work around?,neutral
jprichardson/electron-mocha,mocha,2016-09-08T17:56:23Z,"correct. electron-prebuilt is listed in my package.json. i am using electron-mocha for testing the electron app. like i mentioned earlier when i run the test using ""electron-mocha --renderer /mytestfilepath"" command. it gives me an error: ""can not find 'electron' in the $path and $electron_path is not set. please either set $electron_path or 'npm install electron'"". and i do not want to install electron globally. so am wondering how to run the tests.",negative
jprichardson/electron-mocha,mocha,2016-09-10T15:36:25Z,prevent electron-mocha stealing focus from other applications. fixes #82,neutral
ramda/ramda,mocha,2014-06-23T11:10:23Z,at the risk of spinning off on a tangent. my preference is to stick with mocha. but use bdd-style assertions,neutral
ramda/ramda,sauce,2014-09-23T13:24:16Z,sauce dir can move under lib/. but have to repoint some paths in the test dir and gruntfile,neutral
request/request,coveralls,2015-01-07T19:55:41Z,okay. coveralls comments on prs should be disabled now.  i think getting coveralls output into somewhere else would be a bit of work.i've submitted #1343 to add a coverage badge to the readme.  if coveralls doesn't show up in there then we should be good to go.,positive
pixijs/pixi.js,jshint,2016-08-16T16:05:41Z,this is fantastic. one less dependency/build system i need to grok. :),positive
pixijs/pixi.js,jshint,2016-08-17T10:41:00Z,could you fix the jshint error? otherwise :+1:,neutral
pixijs/pixi.js,eslint,2016-10-19T17:05:23Z,chilled out eslint to show most things as warnings. this should make it easier to code pixi. for the main build i set--max-warnings 0. meaning that there must be no warnings left if yousubmit a pr,neutral
pixijs/pixi.js,eslint,2016-10-20T19:42:10Z,goodboydigital could you make sure you delete the branch after you merge a branch on this repo?,neutral
pixijs/pixi.js,karma,2014-01-07T20:47:59Z,this is just a long over due following up to this thread. i've been experimenting with different code coverage solutions. and how to use them with pixi. would like to get coveralls working with it. showing coverage would be great in order to get writing proper tests going. as it's always nice to see that number go up.there is a solution with karma. and mocha. and various others.what are your thoughts on all this?,positive
pixijs/pixi.js,karma,2014-01-12T09:09:42Z,karma cleanup. spec reporter. - cleanup on karma task. and config- use karma-spec-reporter for much better test reporting in the builds- make sure chrome launcher is installed (for local testing currently until chrome can be used on travis),neutral
pixijs/pixi.js,karma,2014-01-12T18:08:29Z,manually merged into `dev`,neutral
actionhero/actionhero,coveralls,2015-01-21T22:13:00Z,try running coveralls on travis,neutral
lukasoppermann/html5sortable,mocha,2015-04-28T23:42:27Z,basic setup for tests with mocha (mochify),neutral
lukasoppermann/html5sortable,mocha,2015-05-08T16:01:21Z,move all tests to mocha + jsdom. all tests are moved to mocha with jsdom. this way they all run in one environment. which gives us the benefit of a more realistic coverage and also less dependencies.,neutral
lukasoppermann/html5sortable,mocha,2015-05-08T22:02:08Z,jmagnusson since you seem to know more than i do about browserify: all it requires is a correctly setup commonjs module. right? if so. the way i migrated your tests to use jsdom without browserify should still suffice. correct? if so. i would merge this. thanks for your input.,positive
lukasoppermann/html5sortable,mocha,2015-05-11T09:15:11Z,works just fine for me in browserify :+1:,positive
lukasoppermann/html5sortable,mocha,2015-05-11T09:23:03Z,okay. thanks. :+1:,positive
libgit2/node-gitteh,mocha,2013-07-05T06:17:18Z,cakefile: use locally installed mocha for tests. we have `mocha` in `devdependencies` in `package.json` so let's use it for running tests ?€? this will not require mocha installed with `-g` flag.,neutral
libgit2/node-gitteh,mocha,2013-07-05T06:46:39Z,andreypopp  i'll merge this in to make you happy (and for anyone else that immediately checks `cake` for a test task). but note that you could already do this by running `npm test` :),neutral
libgit2/node-gitteh,mocha,2013-07-05T07:52:41Z,awesome. thankssent from my iphoneon jul 5. 2013. at 10:46 am. sam notificationsgithub.com wrote:> andreypopp i'll merge this in to make you happy (and for anyone else that immediately checks cake for a test task). but note that you could already do this by running npm test :)> > ?€?> reply to this email directly or view it on github.,positive
adobe-marketing-cloud-mobile/aemmobile,jasmine,2016-10-17T16:29:20Z,"testing done:- a bunch of jasmine tests- live article updates with ""serve"" workflow- round trip to aemmobile.adobe.com for android and ios- android only tested on emulator. not device",neutral
dnajs/dna.js,jshint,2017-08-29T03:23:38Z,added jshint to pretest. issue #51,neutral
jquery/esprima,mocha,2015-06-26T19:31:44Z,ariya mikesherov. i'd be happy to investigate a test-runner like mocha or something simple that would allow tests to be run in the browser (aka devtools).,neutral
jquery/esprima,mocha,2015-07-11T00:11:48Z,mikesherov i think a lot of the questions are with the test style. i think it'll be simpler to focus on just the environments. ariya i'll probable go with the smallest possible changeset. i like mochas reporter. so hopefully we can do something simple and evolve the test style gradually. people have lots of good ideas in this thread.one potential concern i have with using html2js is that the content won't be copied over exactly. i.e. will be escaped poorly. i'll share if anything comes up there,positive
jquery/esprima,karma,2015-07-17T15:57:10Z,"i like karma because it does do those minimal things you mentioned. it can also run all the generation commands as a karma watcher task. which allows ""save + refresh"" debugging....",neutral
jquery/esprima,karma,2015-07-17T16:31:31Z,so just to converge on minimum solution: let's implement simple web runner with karma launcher and istanbul preprocessing. cool?,neutral
jquery/esprima,karma,2015-07-27T20:40:46Z,this seems to be pretty old. you have to do `git install --save-dev karma` to run into it.,neutral
jquery/esprima,coveralls,2015-06-21T12:05:56Z,track code coverage with coveralls.io.. note that this is my first attempt on using coveralls. it may still not work at all.,neutral
jquery/esprima,coveralls,2015-06-21T16:36:53Z,i don't understand what value coveralls adds to a project that enforces 100% coverage. istanbul is already enforcing 100% coverage during ci. :-1:,negative
jquery/esprima,coveralls,2015-06-21T19:17:32Z,> i don't understand what value coveralls adds to a project that enforces 100% coverage.informational. see #1066 for more details.,negative
jquery/esprima,coveralls,2015-06-21T23:11:32Z,:+1: immediate feedback to any contributor on pull requests can't hurt.,negative
jquery/esprima,coveralls,2015-06-22T07:16:53Z,expect a future pull request from me with regressed code coverage. just to verify that this is working :-),neutral
jquery/esprima,coveralls,2015-06-27T18:18:48Z,i think the problem is because npm doesn't install the devdependencies. hence some packages needed to run the tests are not available. thus. the proper command to test will be```npm install --npat --dev esprima```however. in that case. all the dependencies (check with `npm ls`). everything from jscs and coveralls. will run with `--npat` as well and everything fails miserably. in other words. it requires participation from all the packages involved.consider this circumstance. i would propose that we don't bother trying to support npat install.,negative
cssinjs/react-jss,karma,2017-11-12T01:19:50Z,restructured tests. now they are much more readable. because in separate files. other points still need to be done.,neutral
angular-ui/ui-utils,karma,2013-04-18T06:58:40Z,update to karma. update travis to karma and add chrome as a test browser,neutral
angular-ui/ui-utils,karma,2013-04-18T07:53:22Z,grunt. first grunt file.to build: grunt buildto test with karma. single run: grunt karma:unitto watch: grunt watchto clean: grunt cleandefault: karma:unit build,neutral
angular-ui/ui-utils,karma,2013-04-18T08:00:39Z,are you aware that travisci does not support chrome?you need to remove your last commit for me to merge this in.,neutral
angular-ui/ui-utils,karma,2013-04-18T17:02:18Z,not i was not. i've never used travisci in my projects so far.how can i remove a commit from a pull-request? thanks!,positive
angular-ui/ui-utils,karma,2013-04-18T17:03:27Z,readme.md should be updated to integrate grunt targets.,neutral
angular-ui/ui-utils,karma,2013-05-03T08:05:38Z,this will be resolved by #12,neutral
frctl/fractal,istanbul,2016-08-20T04:11:45Z,add coverage reporting via istanbul. suggestion for keeping track of code coverage via istanbul ?€? in this changeset.??coverage will be regenerated any time `npm test` is executed.,negative
frctl/fractal,istanbul,2016-08-21T12:09:37Z,nchase many thanks for getting stuck in here - as you can probably tell i need all the help i can get when it comes to testing! unfortunately i'm away on holiday until the 27th and with very limited internet access so i won't be able to check out this or the other prs until i'm back. i'll try and get onto it as soon as i can after that however.very much appreciate you starting to pick up some of this stuff!,positive
frctl/fractal,istanbul,2016-08-29T08:41:50Z,nchase i've merged this in now. many thanks. it will serve as a useful reminder to me of how woeful my test coverage currently is :-)as a (perhaps painfully obvious) aside. some parts of the codebase are seriously testing-hostile at the moment. i'll slowly start to try and clean up and refactor these so that it's practical to write some tests for them. anyway. thanks again for the contribution!,positive
frctl/fractal,istanbul,2016-08-29T12:35:18Z,my pleasure. i'll try to dig back in [as time allows] and see where i might be able to keep chipping away at it,positive
frctl/fractal,istanbul,2016-08-29T13:14:28Z,thanks noah. much appreciated!,positive
elastic/kibana,selenium,2015-10-16T22:35:21Z,this lgtm. lukasolson one more set of eyes?,neutral
elastic/kibana,selenium,2015-10-27T20:17:25Z,lgtm!,neutral
gcanti/tcomb,eslint,2015-05-24T10:44:48Z,hi!> would you still need to use tcomb if you are already using flow?in theory nope. in practice yes. the main advantages of tcomb are:- you can extend the type system with your custom types- you can define subtypes (e.g. the type email which is a subtype of string)- it's just javascript. hence it plays well with the other tools of the javascript ecosystemin my experience using flowtype. babel (es6. es7. es8??) and eslint together can quickly become a nightmare.using tcomb instead of flowtype as a type checker is seamless.obviously you also lose something (method names typos. ecc...). but it's a price i definitely want to pay.i think that runtime type checking + a good test suite is enough to achieve a high level of type safety.having said that. in the future i really hope tcomb will become useless. but these days and for my usecase. it's a invaluable development tool.,positive
ncb000gt/node-es,istanbul,2016-01-17T21:41:37Z,so the code coverage reduction seems more a byproduct of the change to istanbul than anything else. based on the coverage report i don't see a way to add much more coverage without getting in to more elaborate / brittle testing scenarios.,neutral
serverless/serverless,eslint,2016-04-20T09:43:49Z,adds `eslint` and the airbnb rules. flomotlik please. have a look.run the lint: `npm run lint`. don't forget to `npm install` before.,negative
serverless/serverless,eslint,2016-05-12T20:11:10Z,enable mocha globals for eslint,neutral
serverless/serverless,eslint,2016-05-13T17:05:33Z,eahefnawy can you check this is not violating eslint rules? looks like most files in here would violate it.,negative
serverless/serverless,eslint,2016-05-14T23:16:54Z,dep: add eslint plugin dependency. before submitting a pr. please note the following:[] make sure that there's an issue opened that discuss this fix/feature. this is not required for simple prs (ie. fixing a typo in readme). but we just want to make sure you don't waste your time on a feature that we don't intend to support/maintain.[] make sure that you've tested your changes thoroughly.[] if there are some side effects to your changes (whether positive or negative). please mention them in your pr so that we can discuss how to avoid them.above all. we thank you so much for your contribution! :),positive
serverless/serverless,eslint,2016-05-14T23:26:45Z,are you folks committed to complying to the eslint rules. currently. there are over 5k issues...and that's just in the `lib` directory. happy to lend a hand here though.```??? 5982 problems (5931 errors. 51 warnings)```,negative
amir20/phantomjs-node,eslint,2016-11-15T16:57:12Z,this build is failing because eslint found errors in your code. as the instructions suggest. you should make sure npm test works locally before pushing a pull request. i am not sure how familiar you are with node. jest. and pull requests. it might take a while for you to do it. if you want to learn then i suggest understanding what npm test does. i can't look at it today but i can close your pr and create my own someone this week. but only if you can't figure it out. i think it would be good to learn how pull requests work with tests.,negative
pugjs/pug,coveralls,2015-01-29T12:43:43Z,i ran `npm run coveralls` and it succeded. well partially. in the end it failed. because it was not able to write report or smthn.,negative
pugjs/pug,coveralls,2015-02-07T02:23:23Z,coveralls good to see you here :),positive
jirikavi/AngularJS-Toaster,karma,2015-12-07T22:25:51Z,jirikavi  we can probably configure it to run the tests directly via karma without including gulp (although personally i don't mind if we use gulp to make local builds easier for automated minification :p).`script: node_modules/karma/bin/karma start karma.coverage.js --single-run` might do the trick if we add it to the travis file.that'll run the karma coverage as part of the full test run i think.,positive
jirikavi/AngularJS-Toaster,karma,2015-12-08T19:03:23Z,fixed coverage paths. updated karma.coverage to support multiple reporters.if in the travis environment. an lcov reporter is added.,neutral
jirikavi/AngularJS-Toaster,coveralls,2015-12-08T17:52:36Z,added coveralls configuration and badge,neutral
jirikavi/AngularJS-Toaster,coveralls,2015-12-08T18:34:51Z,added coveralls to travis.yml,neutral
jirikavi/AngularJS-Toaster,coveralls,2015-12-08T19:34:43Z,coverage has been added via coveralls to the ci build.  current thresholds are 95% coverage rate and coverage can decrease no more than 2%.  should bump this up higher. but it seemed like a good place to start :).,positive
craigsimps/gulp-wp-toolkit,eslint,2017-08-23T07:47:02Z,proposal:- [x] remove jscs task. lint config file and references.- [x] remove jshint task. lint config file and references.- [x] remove scss-lint task. lint config file and references.- [x] ensure stylelint runs over both `.css` and `.scss` files.- [x] include `eslint` in the `js` task.- [x] create `lint:style` that can handle `css`. `scss` and `colors`.- [ ] add `i18n` into `php` task.note. that removing jscs and jshint will also remove them from the `self` tasks.,neutral
janl/mustache.js,eslint,2015-05-19T17:27:21Z,minor changes to make it compatible with both wsh and asp (eslint com?€?. ?€?patible)made it eslint compatible.,neutral
janl/mustache.js,eslint,2015-05-28T19:32:39Z,thanks!,positive
janl/mustache.js,eslint,2015-05-29T06:47:51Z,sure thing!,neutral
Palindrom/Palindrom,sauce,2017-04-18T10:02:25Z,any luck with saucelabs? their website [says]( > if you have an open source project. you just need to enter your project?€?s repository url and a description of what it is when you create your account. you?€?ll automatically be enrolled in the plan. which provides unlimited testing minutes on up to five parallel vms,positive
tessel/t2-cli,coveralls,2016-10-26T16:23:05Z,adding coveralls,neutral
tessel/t2-cli,coveralls,2016-10-26T17:29:03Z,lgtm :+1:thanks for setting this up rwaldron. :clap:,positive
airbnb/javascript,eslint,2016-04-15T13:37:00Z,"i'm a bit confused by this... the op said that he's using ""eslint-config-airbnb/base"". which the docs say does not lint react. but you're saying (and this has been my experience as well) that it requires the react plugin?",neutral
airbnb/javascript,eslint,2016-04-17T02:50:54Z,is eslint-plugin-import really a peerdependency. instead of dependency?,neutral
airbnb/javascript,eslint,2016-04-17T02:52:47Z,josmardias that's a good point. perhaps all of the plugins should become normal dependencies instead of peer deps (including `eslint-plugin-react`. etc),neutral
airbnb/javascript,eslint,2016-04-17T02:56:06Z,if they are dependencies. does it mean we are not required to manually install them? or because of the way eslint works. this requirement is still necessary?,neutral
airbnb/javascript,eslint,2016-04-17T02:59:02Z,tleunen afaict. correct. you'd no longer have to manually install them - unless you were referencing the plugins in your own eslint configs.,neutral
airbnb/javascript,eslint,2016-04-17T18:15:20Z,because we haven't published the updated package that uses eslint-plugin-import yet.,neutral
airbnb/javascript,eslint,2016-04-20T03:14:31Z,you can now use the  package directly. please reopen this if you're still having trouble.,positive
airbnb/javascript,eslint,2016-04-20T04:08:45Z,"regarding the two issues you've mentioned:1) ""managing the eslint config file is a pain in the ass"". this has proven not to be true in practice. in addition. we now use `eslint-find-rules --unused` to ensure that we're not missing any rules. even when eslint or our plugins update.2) ""just get up and running for a new project was not straightforward"" - beyond improving documentation (which is always a good thing). i don't see how the ""defaults"" project improves this in any way. all it does is present a paralysis of choice. and often out-of-date sub-configs (you're up to v5 on our config. but v7 is published. and v8 is coming soon).you're welcome to include `eslint-config-airbnb` as a proper npm dependency. and let people use it that way. and collaboration is great! but. i don't see a valuable direction to go here. or even any direction that wouldn't make the issues you mentioned _worse_.i'm going to close this. but will be happy to reopen if a viable direction appears.",negative
airbnb/javascript,eslint,2016-04-20T04:17:50Z,this seems to have been mostly addressed.,neutral
airbnb/javascript,eslint,2016-04-21T17:09:03Z,missing jsx-quotes rule. 52d3401f953afcf09ca64dbbb177c6284832aae6 disabled the `jsx-quotes` rule in `eslint-config-airbnb-base` (presumably because the config is intended to deal with non-react rules) but the rule didn't get re-enabled on the `eslint-config-airbnb` side.,negative
airbnb/javascript,eslint,2016-04-21T17:09:57Z,wow. thanks. good catch!,positive
airbnb/javascript,eslint,2016-04-25T17:32:20Z,remove react from the readme of eslint-config-airbnb-base,neutral
airbnb/javascript,eslint,2016-04-25T17:39:40Z,thanks! copy-paste strikes again,positive
airbnb/javascript,eslint,2016-05-04T13:00:27Z,difference in linters? (jshint vs eslint). hi guys.just a simple question... is there any difference in using the jshint config file versus the eslint file (including all required packages)???are there any rules skipped (especially in jshint which has smaller size than all base rules of eslint)?thanks,neutral
airbnb/javascript,eslint,2016-05-04T16:02:51Z,we don't use the jshint config. so i'm not actually sure how up to date it is. in general. jshint does not deal with style rules. so there's bound to be a lot of gaps in what jshint supports vs what eslint supports.prs are welcome to keep the jshint config up to date!,positive
airbnb/javascript,eslint,2016-05-09T03:07:47Z,do you have `eslint-config-airbnb` installed in `~/dev/{project-name}/node_modules`?,neutral
airbnb/javascript,eslint,2016-05-09T03:11:49Z,and how are you invoking `eslint`? are you doing it bare on the command line (such that `which eslint` doesn't point to the local one). or are you using an `npm run-script`?,neutral
airbnb/javascript,eslint,2016-05-09T11:44:08Z,"eslint-config-airbnb-base/legacy 'func' was used before it was defined. why the linter throws an error with this code?``` javascripta();function a() {  // ...}```i have bypassed the error in this way. but i don't like the idea of overriding the rules of the style guide.``` json""no-use-before-define"": [""error"". { ""functions"": false }]```should't it be the default behavior. instead of throw the error?am i forced to declare the function before the use. even if i use the ""function declaration syntax""?",negative
airbnb/javascript,eslint,2016-05-09T16:22:55Z,indeed the function should be declared before its use. whether it's an expression or a declaration - we discourage relying on hoisting.,neutral
airbnb/javascript,eslint,2016-05-12T19:11:48Z,prepare to enable import/prefer-default-export. this was recently added to eslint-plugin-export. it enforces thatmodules that only have a single export use a default export instead of anamed export.i believe that this will get our travis build back to green.,neutral
airbnb/javascript,eslint,2016-05-13T03:43:10Z,since object spread/rest is not yet standard (still stage 2. iirc). `eslint` nor our style guide support it. and we do not recommend its use.when it becomes stage 3 or 4. and when the relevant `eslint` rule is updated to support this case. we can reevaluate it (it would be dangerous to endorse this use case imo. without this linter rule fully enabled).,negative
airbnb/javascript,eslint,2016-05-14T00:59:38Z,apparently there is a minor update to `eslint` that `npm-check` must not be catching. upgrading made it go away.,neutral
airbnb/javascript,eslint,2016-05-14T01:11:43Z,are you running eslint.js directly. as opposed to the binary in `node_modules/.bin`?,neutral
airbnb/javascript,eslint,2016-05-14T05:08:11Z,"gausie how did you fix it? i have```  ""parser"": ""babel-eslint"".  ""extends"": ""airbnb"".```but it seems that airbnb ignored the parser.",neutral
airbnb/javascript,eslint,2016-05-14T05:16:42Z,framerate in that case. you should just be doing `eslint --ext .jsx --ext .js ./index.js`. you should basically never have to write `node_modules` anywhere.,neutral
paulmillr/es6-shim,mocha,2013-07-18T17:31:51Z,paulmillr there have been a number of prs lately that have broken tests - can we get travis ci set up for this repo. to avoid obvious breakages?,negative
paulmillr/es6-shim,mocha,2013-07-18T18:47:51Z,yeah we should,neutral
paulmillr/es6-shim,mocha,2013-07-18T18:56:40Z,as the repo owner. you've got to do the travis setup. i can handle travis.yml etc as necessary once that's done :-),neutral
paulmillr/es6-shim,mocha,2013-07-18T19:11:18Z,done,neutral
paulmillr/es6-shim,mocha,2013-07-18T21:39:29Z,do we really need browser phantomjs tests? isn?€?t just node ok?,neutral
paulmillr/es6-shim,jshint,2014-02-14T02:09:48Z,getting there! #217. #218. and #219 are the last bits.,neutral
paulmillr/es6-shim,jshint,2014-02-26T21:13:39Z,ok. all done!,neutral
strongloop/strong-tools,codacy,2016-11-01T19:32:46Z,report coverage to codacy,neutral
jashkenas/backbone,sauce,2015-02-27T22:59:42Z,yup mr47. i did something like that before posting the issue :stuck_out_tongue: i was just surprised that my original idea didn't work after reading the sauce,positive
jashkenas/backbone,karma,2015-02-19T12:41:22Z,i'm all for using a real browser for testing instead of phantom. :+1:we still need to swap out the `npm test` script and add `karma-cli` to `package.json` right?,neutral
jashkenas/backbone,karma,2015-03-03T12:50:01Z,sync test scripts with karma config.. `setup/dom-setup.js` depends on jquery so it must be included after.,neutral
zalmoxisus/redux-devtools-instrument,eslint,2016-07-06T17:39:02Z,not sure why tests not passing.  everything is passing locally. and the eslint errors aren't there.,negative
digitalbazaar/forge,sauce,2017-01-28T01:12:02Z,some karma sauce labs support was added.patches for a good browser list are welcome.patches welcome for travis-ci integration.,positive
michaelbromley/ngx-pagination,karma,2016-06-09T12:45:32Z,updated karma to run on phantom rather than chrome.,neutral
michaelbromley/ngx-pagination,karma,2016-06-09T13:12:45Z,you are my new best friend.,positive
michaelbromley/ngx-pagination,karma,2016-06-09T13:15:13Z,i have definitely reaped the benefits of using your project so i always like to contribute back wherever i can. i don't know of a way to dynamically switch between chrome and phantom but i left the chrome karma plugin in there incase you ever wanted to run them side-by-side.,positive
chaijs/chai,sauce,2013-09-18T03:24:31Z,c00707b59e514a71d7b930d873d71103c00dcc02- sauce labs browsers tests during travis-ci- sauce badge,neutral
chaijs/chai,codecov,2017-10-25T08:00:46Z,i was looking at codecov. investigating if we can move to that. it is more actively worked on and it is part of the github marketplace.,negative
chaijs/chai,codecov,2017-10-29T15:14:23Z,chore: change coverage service (coverall to codecov).   the reason of change mentioned on #927  this patch:    - add codecov as devdep. as it's not pre-installed by travis.    - add codecov on travis's script section.    - change badge link (coverall to codecov). and point the image to chai account on codecov.  fix #927,neutral
chaijs/chai,codecov,2017-10-29T15:16:53Z,just reminder. since the badge link is pointing to chai account on codecov. kindly complete the sign-up process on codecov.,neutral
chaijs/chai,codecov,2017-10-30T11:51:48Z,i just did it. we're good to merge,neutral
chaijs/chai,codecov,2017-10-30T18:08:06Z,good work brutalcrozt,positive
chaijs/chai,codecov,2017-11-02T23:52:29Z,feat(build seq) codecov. use bash instead of npm module.. fix #1077,neutral
chaijs/chai,codecov,2017-11-03T21:33:33Z,hey brutalcrozt thanks for the pr.i feel _really_ uncomfortable downloading and executing aribtrary bash on my local machine. and on ci (where we have secret tokens like account passwords). the 300k is only downloaded for developers/ci (where it is also heavily cached). so i think it's adequete to keep it. i'll close this pr. you did the right thing in the original pr. and changing to running arbitrary bash would be a bad move imo.,positive
chaijs/chai,codecov,2017-11-03T22:22:26Z,> how come running `codecov` worksi believe travis have `./node_modules/.bin` in the `path`.> ...adding the dependency in the build config...we could make travis install codecov independantly. but i would like to draw complexity _out_ of our travis scripts and into tooling that can work agnostic of ci - especially as i'd like to add appveyor into our toolchain for testing ie without saucelabs. so package.json feels right to me. other should comment though. we should reach a consensus.,neutral
chaijs/chai,codecov,2017-11-03T23:19:04Z,i like the self-documenting nature of keeping the dev dependency in `package.json`. i'd like to keep it as-is.,positive
chaijs/chai,karma,2013-09-08T17:29:30Z,karma test framework. use karma test framework for local in-browser test automation and ci support for saucelabs.,positive
chaijs/chai,karma,2013-09-09T15:19:13Z,what's karma? can you provide a link please? cheers! :),positive
groupe-sii/sonar-web-frontend-reporters,eslint,2016-12-05T09:52:50Z,thanks. so it is a problem with this particular eslint issue. we will investigate it.,positive
groupe-sii/sonar-web-frontend-reporters,eslint,2016-12-16T18:26:54Z,you can't. seems like there is a problem.`eslint` is giving us it's severity depending on the rule.,negative
naver/egjs,codeclimate,2016-02-16T11:26:30Z,style(coverage): add codeclimate plugin in travis.. # detailcodeclimate is code coverage and quality tracking system.i have added codeclimate. when codeclimate use that we can track code coverage and quality report.# related issue#63# preferred reviewernetil . sculove,neutral
naver/egjs,codeclimate,2016-02-17T03:01:19Z,netil ok!!,neutral
naver/egjs,codeclimate,2016-02-17T12:03:22Z,lgtm,neutral
naver/egjs,codeclimate,2016-02-22T02:44:57Z,style(coverage): add codeclimate plugin in travis. ## issue#63## detailscreate lcov file from unit testsend lcov to codeclimate to archive coverage data## preferred reviewersmixed sculove,neutral
enyojs/layout,jshint,2013-05-31T18:40:49Z,travisci jshint,neutral
brantwills/Angular-Paging,karma,2015-08-28T14:26:01Z,oh man change log brilliant!thank so much for giving this a look over!!yeah. that is my greatest fear is the module rename - but i think it will be for the best in the long run - i feel awkward with my name in there!,positive
brantwills/Angular-Paging,karma,2015-08-28T15:47:28Z,lol. are you affraid to be famous?! ;),positive
brantwills/Angular-Paging,karma,2015-08-28T17:55:39Z,bwahah noo just looking to avoid any blame :),negative
webrtc/samples,selenium,2015-07-21T16:45:21Z,wait for one second to make sure attachmediastream worked. also move common selenium stuff to a modulekaptenjansson,neutral
webrtc/samples,selenium,2015-07-22T14:42:59Z,add munge-sdp and trickle-ice selenium tests. tests for my favorite demos. comments inline...,neutral
webrtc/samples,selenium,2015-07-22T17:58:10Z,(i think i'll make a new pr once i'm done figuring out the issues here... it works like charm locally but seems really flaky on travis...),positive
webrtc/samples,selenium,2015-07-22T19:17:46Z,add selenium tests for munge-sdp and trickle ice pages. basically #574 without all the commits trying to figure out what went wrong.- fixes the shared profile issue created by moving stuff to the lib- adds tests for munge-sdp and trickle-ice- makes the gum demo not wait for one second but until window.stream is defined (i think this polls every 500ms),neutral
webrtc/samples,selenium,2015-07-22T20:52:07Z,"the ""fix"" in the last commit is odd. why is this only a problem with the last test run?!",negative
webrtc/samples,selenium,2015-07-23T12:43:12Z,lgtm,neutral
webrtc/samples,selenium,2015-07-23T15:19:42Z,"add basic datachannel and pc1 tests. i wish there was a ""slowdown"" mode for selenium where it delays actions for 1 second so one can watch this... :-)",neutral
webrtc/samples,selenium,2015-07-29T11:28:23Z,trying to merge this and pray to the selenium and firefox gods ;).,neutral
webrtc/samples,selenium,2015-08-03T14:23:57Z,i'm no selenium expert. so i may be missing something. but why is this needed? if selenium can synchronously get us back a promise from getstats. isn't that sufficient?,positive
webrtc/samples,selenium,2015-08-13T11:19:58Z,tried adding all the build() firefox logic in selenium-lib.js to the test file directly but i get the same result. that rules out some import issues.,neutral
kss-node/kss-node,mocha,2013-03-12T02:31:02Z,"compass sprite imports break kss parsing. - compass sprite imports can be of the form `import ""folder/*.png""`.- this matches the regex for multi-line comments and the rest of the  file would then be ignored.- new behaviour is to `continue` if we aren't already in a multi-line  comment if the line starts with import.- ran mocha test suite and still passed.- manually verified as well.",neutral
gionkunz/chartist-js,jasmine,2015-02-27T20:00:28Z,its this branch. the pull request branch. what ever you push to it will be available for merging. sure take your time. look at the existing tests and the jasmine documentation.,neutral
raszi/node-tmp,mocha,2017-11-28T20:42:19Z,raszi i am open to that change. i am currently learning typescript and also have a setup here for gulp (also using typescript here) and mocha test cases implemented in typescript and so on...,neutral
raszi/node-tmp,mocha,2017-12-02T01:35:16Z,raszi kiss principle make lint an option for now. do not integrate it with mocha. we will sort it out later.,positive
raszi/node-tmp,mocha,2017-12-07T19:57:38Z,raszi builds on appveyor are still failing due to an error in the _mocha.cmd.we might want to report this to the guys over at mocha.,negative
videojs/video.js,standard,2016-08-17T00:47:40Z,`--coverage` sounds good to me. i think that is relatively standard as well.,positive
videojs/video.js,standard,2016-08-17T01:29:15Z,looks like the current build system works on windows. with the caveat that the `shell:lint` requires `videojs-standard` to be installed globally. so. this should be changed.,neutral
videojs/video.js,standard,2016-08-17T01:53:45Z,misteroneill one thing i noticed when running this on windows through github desktop app. the ghook makes it impossible to actually push to your remote using the app. if we want to make it easier for users to contribute. this makes it harder.also. we probably want that step to run `vjsstandard --errors` to ignore the warnings.,neutral
videojs/video.js,sauce,2014-05-16T22:04:50Z,travis_pull_request env is a string. to actually run saucelabs when it isn't a pr.,neutral
videojs/video.js,sauce,2014-05-17T02:31:28Z,sauce browsers. this should enable running tests on a bunch of browsers on saucelabs. it'll run the tests in browsers in sequence rather than in parallel.do we want to add the `minified` and `minified_api` tests to this as well. heff?,neutral
videojs/video.js,sauce,2014-05-19T22:15:08Z,yeah. thats weird. not sure what's the cause. probably good to ping helpsaucelabs.com about that.,negative
videojs/video.js,sauce,2014-05-19T23:37:07Z,yeah. that'd probably help. want to do that?,neutral
videojs/video.js,sauce,2014-05-26T13:39:09Z,mmcc: no. sorry. i haven't had time.gkatsev: that sounds good. do you have a link to the project on saucelabs? is the work being tracked in another gh issue? i.e. can we close this one?,negative
videojs/video.js,karma,2013-09-18T01:51:29Z,i think this is done (finally!).  i decided to stick with karma.conf.js.example (why didn't i think of putting this in sandbox to begin with?). because it more clearly identifies what this file is used for.,neutral
videojs/video.js,coveralls,2015-04-29T20:49:53Z,fyi: the build failure is a coveralls thing. everything else passed.,negative
fergiemcdowall/search-index,standard,2016-10-21T10:47:54Z,just an fyi: all the streamable queries (apart from the memory intensive replication ones) are going to get callback aliases so that the library can be run in the browser without additional libraries (highland etc.). once streams are a thing in the browser. then we might consider not having callbacks.,neutral
fergiemcdowall/search-index,mocha,2015-06-27T06:40:11Z,mochatests. tests now run on mocha. generally more robust. search-index can be explicitly closed (todo: update docs),neutral
fergiemcdowall/search-index,mocha,2015-07-15T14:25:49Z,should def. be covered by tests. wanted to have a look at how to test in browsers. without messing too much with our nice mocha setup :-),neutral
mafintosh/ghsign,standard,2015-07-09T18:59:46Z,"fix copy/paste error. i'm trying to fix an issue introduced in #6 - this is done in a hurry. so yolo ;)there really should be tests - at least ""standard"" which would have found this one. i'll make a pr for that as well :)",positive
mafintosh/ghsign,standard,2015-07-09T20:58:51Z,use the 'standard' linter. found a couple of errors that wasn't handled :)depends on #7 remember to add travis :),neutral
ubolonton/js-csp,codecov,2016-08-09T10:20:33Z,add new built tool for js-csp. this pr is to add babel and webpack support for building the lib. also. updating travis build with codecov and mocha. the next plan is to update the lib with eslint.,neutral
ubolonton/js-csp,mocha,2016-08-21T17:35:17Z,"it sounds like a problem you should fix when you have it. this code can be reverted if needed or you could simply set it in `package.json':``` json""scripts"": {  ""test"": ""node_env=test mocha""}```",neutral
expressjs/express,eslint,2017-07-27T09:48:53Z,its been said a lot already but to add i faced  this multiple times also with eslint. reverted to using:/* eslint-disable no-unused-vars */,negative
felixge/node-ar-drone,jshint,2013-10-22T22:03:11Z,thanks. maybe we can add a .jshintrc in the future.,positive
felixge/node-ar-drone,jshint,2013-10-24T06:46:18Z,-1 on trailing whitespace (why would we want that?)indent: does this use tabs or spaces?does jshint allow automatic code formatting?will we run jshint as part of the test suite on travis?,neutral
felixge/node-ar-drone,jshint,2013-10-24T12:39:25Z,good news. `npm test` already recognizes the .jshintrc and runs jshint automagically for us. therefore no extra step needed for travis. it already works!on a side note: i think we should add some more options to jshint. totally overlooked that in this pr. will open up a pr with more options to discuss things.,positive
solid/node-solid-server,standard,2016-01-18T19:40:17Z,what's the coding style? (to which it was standardized?),neutral
solid/node-solid-server,standard,2016-01-18T20:10:28Z,does all of ldnode now follow standard?,neutral
UKHomeOfficeForms/hof-form-wizard,eslint,2017-01-26T10:22:29Z,it's failing outside the controllers. so i'll copy the es6 controller code into hof-form-controllers (because eslint in that project freaks *out* if i copy the master code).,negative
cloudant-labs/cloudant-follow,eslint,2017-08-15T10:54:59Z,add eslint. add `eslint` to test suite.,neutral
babel/babel-loader,eslint,2016-10-27T22:11:00Z,use eslint. nyc,neutral
babel/babel-loader,eslint,2016-10-30T18:38:13Z,closed by #321,neutral
anvilresearch/connect,eslint,2015-09-17T18:57:08Z,formatting fix to allow eslint to pass for unit tests. current connect code fails to run tests because eslint fails - this makes the syntax compatible with the eslint rules.,negative
anvilresearch/connect,eslint,2015-09-17T19:30:09Z,interesting. we just looked through this and ran all the tests/linting on our systems and we're not getting this error. have you run npm install recently? there were some changes to the linting setup.,neutral
anvilresearch/connect,eslint,2015-09-17T19:34:40Z,is there an .eslintrc in c:\oidc\connect which extends standard?,neutral
anvilresearch/connect,eslint,2015-09-17T19:38:33Z,i'll try running the linter on my windows installation and see if i can replicate this error.,neutral
anvilresearch/connect,eslint,2015-09-18T14:35:10Z,oops - i did not mean to close this - hit the wrong issue - sorry...can you guys reopen it?  i do not seem to be allowed to.,negative
anvilresearch/connect,eslint,2015-09-18T15:32:16Z,i can't reopen it either:> msamblanet:master was force-pushed and no longer has any new commits.> pushing new commits will allow the pull request to be re-opened.,neutral
anvilresearch/connect,coveralls,2015-10-29T20:10:49Z,add coveralls.io to build,neutral
anvilresearch/connect,coveralls,2015-10-29T20:16:02Z,awesome henrjk! thanks for the help with this.,positive
anvilresearch/connect,istanbul,2015-10-18T16:48:58Z,adding basic coverage for istanbul,neutral
anvilresearch/connect,istanbul,2015-10-18T16:52:39Z,looks good! thanks!,positive
anvilresearch/connect,istanbul,2015-10-19T18:04:30Z,henrjk thanks for adding some context to this for posterity. work is in progress on #272 submitted by vsimonian to wrap this in an npm command.,neutral
anvilresearch/connect,istanbul,2015-10-30T08:41:54Z,improve coveralls in travis build. add coveralls badge and improve build script.**update original comment!**the introduction of the coveralls build somewhat unintentionallyhad all tests running at once. this used to fail which was the reasonthat the coverage.sh script was introduced so that the coverage wouldrun separately for unit and integration tests and the results were combined.however it should really be possible to run all tests at once. so thatit makes sense to do so in the build. this should allow to see regressionsin this respect.the coverage script itself is kept as it can still be useful duringdevelopment if only to see how one can run the commands in a shell withoutinstalling istanbul or mocha globally.finally the travis script now sends coverage data in a second step tocoveralls with the intent to easier distinguish cases where the tests fail andwhere coveralls fails.,positive
anvilresearch/connect,istanbul,2015-10-30T09:43:51Z,the build bage an only be seen in master.this should be good to be pulled now.,neutral
anvilresearch/connect,istanbul,2015-11-09T22:33:38Z,thanks!,positive
prettier/prettier,codecov,2017-07-16T21:38:23Z,azz didn't you disable codecov comments?,neutral
prettier/prettier,eslint,2017-05-19T04:47:31Z,any chance of making this configurable ? this issue possibly breaks space-before-function-paren and generator-star-spacing for my eslint checker.,neutral
prettier/prettier,eslint,2017-05-21T17:55:09Z,great point lydell. i just updated this pr to use `eslint-plugin-prettier` instead.,positive
prettier/prettier,eslint,2017-05-21T18:39:57Z,improve eslint setup and fix errors. - uses `eslint:recommended` + a handful more rules.- properly sets up the environments (node + es6. and jest).- uses .eslintignore so that editors can understand which files to lint.- uses .eslintrc<strong>.js</strong> so more editors get syntax highlighting.,negative
prettier/prettier,eslint,2017-05-21T19:11:24Z,yay!,positive
prettier/prettier,eslint,2017-05-21T21:08:21Z,if you are using eslint integration. you can do /* eslint-disable prettier */. we need to figure out a holistic way to tell which files should be printed and which shouldn't. i'm going to close this issue as there are other issues tracking the same idea listed by vramana above.,positive
prettier/prettier,eslint,2017-05-21T21:39:33Z,given the lack of activity around this issue. i'm going to close it. but it would be really nice indeed if someone could figure it out!,positive
prettier/prettier,eslint,2017-05-22T01:38:44Z,we're not looking into adding such option. if you are using eslint. you can do `/* eslint-disable prettier */` or remove that file from the list of file you run prettier through in your lint/commit scripts.,positive
prettier/prettier,eslint,2017-05-22T15:31:34Z,it's called in two other places. so i can't get rid of it (yet?)fwiw. eslint should catch this sort of bug now,negative
prettier/prettier,eslint,2017-05-24T02:42:27Z,okay i'm done for the day.if we fix the following 5 issues. we should be good to go for all the projects (but angular):- #1460- #1694- eslint/typescript-eslint-parser#288- eslint/typescript-eslint-parser#289- eslint/typescript-eslint-parser#290i haven't finished yet to categorize all the angular errors. but i think that there are some unique ones that aren't tracked here.this is really awesome! even with those remaining errors. most of the files actually compile fine!,positive
prettier/prettier,eslint,2017-05-24T08:16:14Z,zi,neutral
prettier/prettier,eslint,2017-05-25T10:57:58Z,> on a related note. prettier for typescript is significantly slower than running it for normal js. i can't wait for the babylon integration to land. this would avoid having to parse it once and then completely reshuffle the ast.vjeux would you mind sharing your method for evaluating this? performance has never been an issue in `typescript-eslint-parser`. so it has accordingly not received much attention. there may well be some quick wins available in the short term,positive
prettier/prettier,eslint,2017-05-25T11:41:10Z,you can use `// eslint-disable-next-line`. put it before the line you want to ignore,neutral
prettier/prettier,eslint,2017-05-26T00:19:25Z,opened eslint/typescript-eslint-parser#295,neutral
prettier/prettier,eslint,2017-05-26T02:04:10Z,upgrade typescript-eslint to 31ad3c. fixes #1737,neutral
prettier/prettier,eslint,2017-05-26T07:22:27Z,dedupe typescript-eslint-parser in yarn.lock,neutral
prettier/prettier,eslint,2017-05-27T08:52:01Z,i just tried to override that rule but prettier still can't break that long line. however. if i insert just five more characters anywhere into that line. things start to work again. this is weird.```js  return action$.oftype(some_action).distinctuntilkeychangedxxxxx('stamp').switchmap(({ stamp }) => {```not sure if this is a prettier bug or some prettier-eslint interop issues. maybe an issue in how prettier count the line width or something wrong with a boundary condition?,negative
prettier/prettier,eslint,2017-05-28T11:27:04Z,i think you should open an issue at prettier-eslint because they probably can help you more.,neutral
prettier/prettier,eslint,2017-05-28T17:28:52Z,update typescript-eslint. it improves a few things.,positive
prettier/prettier,eslint,2017-05-28T22:22:11Z,update eslint-typescript again. now fixes more issues ;),neutral
prettier/prettier,eslint,2017-05-29T12:16:25Z,update tsep to latest master. reenable abstract interface test. this updates `typescript-eslint-parser` to latest master (currently #3dcba7d53f61f51069ed84b57e053802c014d703) and reenables the abstract interface test which was unblocked.vjeux should we be updating the `docs/prettier.min.js` file by hand in this pr too. or does that get auto-generated as part of a build process?,neutral
prettier/prettier,eslint,2017-05-29T12:53:28Z,`yarn build:docs` to build `prettier.min.js`.,neutral
prettier/prettier,eslint,2017-05-29T13:15:42Z,thanks. azz. feel free to sub yourself in as the reviewer  running that seems to generate a massive amount of changes to `prettier.min.js`. which feels unexpected from such a tiny source code change...,negative
prettier/prettier,eslint,2017-05-29T13:20:32Z,ah ok. so leave it for this pr?,neutral
prettier/prettier,eslint,2017-05-29T13:30:07Z,yep. looks good.going to run prettier for the first time on a ts code-base at work tomorrow. looking forward to it. thanks for great work with the parser!,positive
prettier/prettier,eslint,2017-05-29T13:40:37Z,i will do the same and report back ??????,neutral
prettier/prettier,eslint,2017-06-01T09:35:29Z,do you have prettier-eslint enabled? probably eslint is moving them to one line again so you don't see the prettier output.,positive
prettier/prettier,eslint,2017-06-01T10:26:01Z,> do you have prettier-eslint enabled? probably eslint is moving them to one line again so you don't see the prettier output.yup i do. i'll try disabling it to see what happens.> could you post a repro in the online demo?sure thing. will do later today.,positive
prettier/prettier,eslint,2017-06-01T16:06:00Z,"k15a nailed it. i updated my eslint rules to not deal with line length anymore e.g. `""max-len"": 0.`.thanks everyone for responding so quickly!",positive
prettier/prettier,eslint,2017-06-02T18:59:18Z,you have to remember that prettier isn't respecting your eslint config. prettier always prints the code with a default opinionated structure. prettier-eslint infers some prettier config options (we only have a few) from the eslint config. in you example. prettier removes the parentheses and eslint complains about that. it seems that eslint can't automatically fix this issue otherwise you didn't get this error.,positive
prettier/prettier,eslint,2017-06-03T12:28:33Z,i think the discussion here indicates that they want to force a style on the entire community to get codebases mostly uniform. and less config options is better. i found that i can run prettier and then afterwards run `eslint <dir> --ext .jsx --fix` and my eslint rules will replace all double quotes that prettier added with single quotes. it isn't perfect but i think if you are in the minority and want this functionality. you need to have your own post-processor as henrik's fantastic pr didn't make it in.,positive
prettier/prettier,eslint,2017-06-05T10:32:49Z,revert to official tsep and bump ts. this returns us to latest master on `typescript-eslint-parser` and bumps ts to the latest stable,neutral
prettier/prettier,eslint,2017-06-05T14:24:41Z,thanks!,positive
prettier/prettier,eslint,2017-06-07T08:47:28Z,"i tried it but i guess prettier cli doesn't bother whether `.eslintignore` is present or notmy `.eslintrc.json````{    ""env"": {        ""browser"": true    }.      ""plugins"": [    ""prettier""  ].    ""extends"": ""eslint:recommended"".    ""rules"": {        ""prettier/prettier"": [""error"". {""singlequote"": true. ""parser"": ""flow""}].        ""indent"": [            ""error"".            ""tab""        ].        ""linebreak-style"": [            ""error"".            ""unix""        ].        ""quotes"": [            ""error"".            ""single""        ].        ""semi"": [            ""error"".            ""always""        ]    }}```",positive
prettier/prettier,eslint,2017-06-07T08:56:22Z,correct. prettier cli doesn?€?t care about .eslintignore. i meant using prettier inside of `eslint --fix`.,positive
prettier/prettier,eslint,2017-06-07T15:53:53Z,lydell. audiolion  `prettier-eslint` is unfortunately really slow if you want to run it every time you save a file. it would be great if it's supported directly by prettier.,positive
prettier/prettier,eslint,2017-06-07T17:46:49Z,oops. wasn't looking close enough here. the issue i was seeing was due to a script running `eslint --fix` adding a semicolon after prettier ran and pushing it over the line length! thanks for the quick reply!,positive
prettier/prettier,eslint,2017-06-08T00:49:28Z,we strongly recommend disabling any formatting rules with eslint-config-prettier (just list it after standard and it'll turn them all of). we aren't going to add options for such small changes. as if we did. we'd have to add options for a lot of other things. it's good for the js community to stabilize on a general style (and as far as i'm concerned the majority of js does not use a space). it doesn't really help readability in my opinion. you just might need to retrain how you see that pattern.,positive
prettier/prettier,eslint,2017-06-10T03:02:39Z,this was likely introduced with #1999. but it is technically an issue with a dependency (eslint/typescript-eslint-parser#267) and the estree spec (estree/estree#6).,neutral
prettier/prettier,eslint,2017-06-12T09:57:03Z,"i really appreciate prettier so i've set ""arrow-pens"" to 0 in eslint config. but this would be a good addition to prettier to have that configurable.",positive
prettier/prettier,eslint,2017-06-14T02:44:26Z,i think it is fairly important to be able to flag subdirectories with a new prettier config/overrides because not all js features are supported per directory. specifically ``--trailing-comma all``. the current node lts's (4 & 6) do not support this feature. if using it. at least part of your build chain will need an exception of some sort.imo don't reinvent the wheel...copy how ``eslintrc.js`` works. nested ``.eslintrc.js`` inherit from configs further down the line but overwrite any settings.,neutral
prettier/prettier,eslint,2017-06-14T21:19:21Z,calebmer thanks for the suggestion. i decided to just go for it. implemented `eslint-plugin-prettier` and `eslint-config-prettier`. plus removed the `max-len` option from my eslint config and so far seems pretty good. thank you!,positive
prettier/prettier,eslint,2017-06-15T02:39:48Z,can you open an issue on the eslint typescript project to get a real flag so that we can remove the hack when they implement it?,neutral
docpad/docpad,standard,2014-05-09T12:37:44Z,ping,neutral
docpad/docpad,standard,2014-05-09T13:03:00Z,if you want quick answers from ben. i've found you need to directly balupton ping him. :)(just a tip. don't abuse. ;)),positive
docpad/docpad,standard,2014-05-09T13:04:48Z,greduan thanks. :)  balupton whaddaya say?,positive
docpad/docpad,standard,2014-05-10T12:47:41Z,seems nifty. i never knew this before. any thoughts on the possible consequences of including colors? i know that a lot of tools have a `--no-colors` cli option. perhaps we should include one? this consequently would also apply to caterpillar too. something i haven't considered yet.how does colors:true work on errors? i see it is applied there too.,negative
docpad/docpad,standard,2014-05-10T14:11:17Z,> seems nifty. i never knew this before. any thoughts on the possible consequences of including colors? i know that a lot of tools have a --no-colors cli option. perhaps we should include one?the `--no-colors` option is for when the output will be sent to something that?€?s not a tty.  most modern cli programs automatically disable colors if the output isn?€?t going to a tty (i.e. it?€?s being piped or otherwise redirected somewhere else).i?€?m still learning node.js + coffeescript. so i don?€?t know how to do that auto-detection yet. i?€?ll see if i can learn how.  (in the meantime. if anybody knows how. please let me know!  bonus points for a link to docs. if applicable. ???)that said. i _do_ think it?€?s a good idea to have a `--no-colors` option to opt-out of colors. just in case.  i think i can manage to add that in a commit to this pr.> this consequently would also apply to caterpillar too. something i haven't considered yet.yeah. i knew that caterpillar was docpad?€?s custom logging system. but i don?€?t know much else.  out of curiosity. what?€?s the fundamental thing that makes caterpillar desirable over console logging?,negative
docpad/docpad,standard,2014-05-10T15:09:06Z,okay. so i?€?ve taken a look at `src/lib/interfaces/console.coffee`. and:- i can see where to add an option for `--no-color`- i?€?ve followed the convention of using `locale.consoleoptionnocolor` as the description?€?but now i?€?m stuck.  how do i check the value of this command-line option elsewhere in the code?,negative
docpad/docpad,standard,2014-05-13T13:58:22Z,if there's a need for vote i'm all for this. :),neutral
docpad/docpad,standard,2014-05-14T16:42:01Z,> if there's a need for vote i'm all for this. :)cool! :)  balupton. what say you?,positive
docpad/docpad,standard,2014-05-14T18:35:34Z,> if you are open to the idea. i can rewrite the cli code to use docoptactually?€?cancel that (for now!).  i just took a look. and there is just soooo much tight coupling that refactoring/extracting the cli deserves its own separate issue.  i?€?m still on board to help with that.  it?€?s just not ?€?something i?€?ll do in the process of #834?€?.  :tongue:,negative
docpad/docpad,standard,2014-05-15T04:57:39Z,yeah. let's get this out the way. before we go doing some crazy other stuff ;)however. +1 for moving away from commander. haven't had time to evaluate docopt. however what we do need is something where we can add. remove. and change commands dynamically. with command they are defined once at startup. then never again. this is a real pain in the butt and makes our plugin system for extending the cli very tedious.,positive
ArkEcosystem/ark-js,mocha,2017-08-16T18:58:18Z,update package.json to include missing fields. adds `contributors`. `keywords`. `directories`. and moves `mocha` to `devdependencies`. also adds `package-lock.json` as recommended by npm.,neutral
NodeRedis/node_redis,mocha,2015-08-18T04:57:42Z,an update:- erinspice and myself put a bunch of work into porting tests to mocha.- blainsmith has been putting a ton of work into closing old issues.- i've started hassling people who've submitted pull request to rebase with master and add tests.how do folks feel about starting to work on getting some of the long standing open pull-requests closed? what should the process look like. perhaps two people should sign-off. after issues are rebased and tests have passed?,neutral
NodeRedis/node_redis,eslint,2016-03-26T03:43:57Z,replace jshint with eslint and add lots of rules. ### pull request check-list- [x] does `npm test` pass with this change (including linting)?- [x] is the new or changed code fully tested?### description of changeeslint as a code checker has become very powerful and i thought it is time to use it as replacement for jshint.this also fixes all the mixed quotes and a unused variable.,neutral
sequelize/sequelize,jasmine,2013-04-09T11:56:06Z,looks like a good start. but i think supporting paranoia might be needed. to keep the api consistent.also i think that sdepold might appreciate if you could move the tests to buster instead of jasmine (since we're gradually moving away from jasmine),positive
sequelize/sequelize,jasmine,2013-04-09T12:15:15Z,janmeier - er yeah. there should have been some code to go with the test. now included! ... it's only for mysql because:- _postgres_ does not support defining a comment when defining a field (it requires a seperate `comment` query) .. i know  nothing about postgres and only a little more about sequelize - so it's beyond me to implement this for postgres- _sqlite_ does not support comments at all (although it does preserve comments in the actual sql ddl ... so that might be something to consider ... but i'm not sure whether sequelize and/or the underlying sqlite lib support inline sql comments in [raw] queries)with regard to 'moving' the tests to buster ... no. i have no idea what the buster syntax is and there are no tests currently for the mysql connector's dao-factory (or any other dao-factory for that matter) that i can use as a reference for rewriting the jasmine test ... sorry. if you can help point me in the right direction in this regard i might be persuaded to have a go at rewriting the test (to be honest though given the number of tests that need to be ported to buster it seems a better idea to tackle that in a seperate pr).,negative
sequelize/sequelize,jasmine,2013-04-09T12:25:31Z,i would need help with moving the tests ... i have no experience with buster and only manage to get by with jasmine because there are plenty of tests i could use as examples ... im hoping that having jasmine tests rather than buster ones would not be a reason to not merge.i will change the 'optimize' option to 'truncate'  - although i very much doubt that in general delete from is faster than truncate (but then again no doubt there are specific situations where that is the case).i will also have a go implementing a 'respect-the-paranoia' options at the daofactory (is that the right name for it?) level,negative
sequelize/sequelize,jasmine,2013-04-09T21:30:32Z,paranoid related functionality now working. includes [jasmine] tests,negative
sequelize/sequelize,jasmine,2013-04-10T19:46:19Z,allow running of [jasmine] tests against mysql instance .... ... that is either not local or requires connection via a socket. the pr makes it possible to set the 'port' option to a socket path and have the jasmine tests work (i.e. the mysql 'port' and 'host' options in `spec-jasmine/config/config` are now honored),neutral
sequelize/sequelize,jasmine,2013-04-10T20:02:38Z,the travis-ci failure is on a postgres buster-test. note that this pr only makes changes to mysql specific _jasmine_ tests ... i cannot for the life of me grok how my changes could affect the buster-tests at all.,negative
sequelize/sequelize,jasmine,2013-04-11T16:11:58Z,well. travis just sometimes decides to have a fit. often with the migration tests. looks good. i say go ahead and merge mickhansen sdepold,positive
sequelize/sequelize,jasmine,2013-04-11T17:13:18Z,"mergeddunno if someone already bid you welcome aboard iamjochem . but if not. i'll go ahead and do so right now - ""welcome"" - nice to have another contributor on board. feel free to join us on irc. #sequelizejsfreenode",positive
sequelize/sequelize,jasmine,2013-04-11T17:24:56Z,hi janmeier thanks ... and thanks. it a nice feeling to have pr merged :) even if it's a small one. i hope that i contribute something. i am by no means a js ninja and a bit of a nodejs noob at that but nothing ventured nothing gained hey!,positive
sequelize/sequelize,codecov,2016-09-26T22:56:52Z,the codecov results seems to be bad becuase it is using a dialect that does not support ctes? i am not sure how to check that.,negative
sequelize/sequelize,codecov,2016-09-27T05:55:18Z,what do you mean? appveyor runs the tests for mssql. travis for the other dialects. both report their coverage to codecov. seems to me like travis didn't run so coverage is at ~20%. try to amend the last commit and force push to trigger a build,negative
TryGhost/Ghost,mocha,2014-08-05T18:03:45Z,add catch handlers to import tests.. **only changes tests**refs #3473- some tests are checking to make sure errors by using a  catch handler on the test.  when assertions fail done()  is never called and results in a mocha timeout. which makes  it harder to see the cause of the failure.,negative
TryGhost/Ghost,mocha,2014-08-05T18:06:02Z,i haven't been able to reproduce the errors in `import_spec.js` and the gist file only shows the mocha timeouts. not the actual errors.  adding the missing `.catch` handlers to the tests that check for error conditions should make it easier to see the errors if/when this failure comes back.,negative
TryGhost/Ghost,sauce,2016-04-15T04:52:31Z,hmm....travis doesn't seem to be accepting the `sauce_access_key` environment variable.... i encrypted it correctly i believe.... :disappointed:,negative
TryGhost/Ghost,sauce,2016-04-15T16:53:37Z,kevinansfield i refactored testem.js so that it's super simple to add saucelabs browsers for testing. are there any more that i should add by default or do we want to just leave it for now and add more later?,positive
TryGhost/Ghost,sauce,2016-04-15T17:05:24Z,awesome. that looks a lot more flexible! for additional browsers. having some internet explorer tests would be good as that's the main one that most of us don't have routine access to.,positive
TryGhost/Ghost,sauce,2016-04-20T01:17:10Z,keeping the changes but closing this for the moment as this approach won't work without a lot more investigation.,neutral
josephfrazier/prettier_d,eslint,2017-06-25T21:51:03Z,josephfrazier. in anyway. from v4 prettier-eslint-cli is 1:1 with prettier's cli. so there's no problem. the only needed and easiest thing to do here is to check if `prettier` exists. then if `prettier-eslint-cli` exists.,positive
swagger-api/swagger-ui,jshint,2015-03-19T16:41:27Z,no. travis failed... i pushed a fix for jshint. build is waiting.,negative
assisrafael/angular-input-masks,karma,2015-03-01T15:27:10Z,ignore specs in jshint. currently when running gulp joshing. there are plenty of bogus warnings. this fixes those for regular js files and karma tests. there are still random warnings in protractor specs. but for now this just ignores those files. if we would start ignoring specific things protractor specs need. that would need to be a separate jshint task to avoid ignoring the same stuff in regular js files.,neutral
assisrafael/angular-input-masks,karma,2015-03-01T17:25:35Z,add us phone number formatter. added us phone formatter with a separate protractor test and a karma test. and a tweaked the gulp file to create a separate build file masks.us.js that only has the global masks and the new us phone mask.there is probably a cleaner way to do the whole br vs us thing. but for now i tried to do it in a way that leaves the existing stuff alone. further splitting up can be done separately.note that i use element by id in protractor tests because by model and by bind seem to create warnings even in existing tests.,neutral
assisrafael/angular-input-masks,karma,2015-03-02T18:54:16Z,nice!i will take a merge it asap.,neutral
aurelia/router,karma,2016-02-03T11:29:43Z,it looks like karma can not load peer dependencies. only direct dependencies.,neutral
cujojs/most,eslint,2016-01-23T02:43:08Z,use native promise. this removes when.js's es6 shim in favor of using native promise.  environments that don't have promise will need to use a polyfill.there are probably a few spots that will incur a small perf hit since native promise can be significantly slower.  one of those was in mergeconcurrently. and i was able to refactor it slightly to avoid thehit in cases where disposal doesn't return a promise.  if it's a problem. apps can use a fast polyfill like creed. when. or bluebird.i also switched to eslint because jshint complained about `promise`. and i didn't want to mess with configuring it to recognize `promise` as a global.  i've come to like eslint anyway :),positive
cujojs/most,eslint,2016-01-23T04:41:02Z,looks good! :+1: :+1:,positive
cujojs/most,eslint,2016-01-23T17:45:24Z,added the missing bluebird link.,neutral
cujojs/most,eslint,2016-01-25T16:47:17Z,a big win on overall size with this change:  it drops 3k off the _min+gzipped_ size:with when.js shim included:```-rw-r--r--  1 brian  staff   13361 jan 22 14:34 most.min.js.gz```using native promise (no when.js shim):```-rw-r--r--  1 brian  staff   10105 jan 25 11:45 most.min.js.gz```,neutral
thoov/mock-socket,mocha,2015-12-22T03:31:15Z,move to mocha and improve the build system. - [x] update readme,positive
ariatemplates/hashspace,karma,2014-01-20T10:59:28Z,+1 - this dependency will be pulled as part of `karma-expect`,neutral
ariatemplates/hashspace,karma,2014-02-14T16:46:04Z,don't use renderer in karma processor. small simplification - use compiler directly in karma pre-processor,neutral
caolan/async,karma,2015-07-17T23:18:14Z,can karma run nodeunit?,neutral
caolan/async,karma,2015-07-20T06:32:53Z,ok. we can start migrating this as we see fit.  also. karma makes node_modules huge...,neutral
caolan/async,mocha,2015-07-17T22:49:55Z,convert tests to mocha. aearly megawac just a proof of concept where you can run mocha tests in node and in the browser.works right along side the nodeunit tests. so could be transitioned over one by one.,neutral
caolan/async,mocha,2015-07-17T22:53:23Z,it's beautiful.  :joy:,positive
caolan/async,mocha,2015-07-17T23:17:23Z,what is the requirement to support `index.html`?,neutral
caolan/async,mocha,2015-07-17T23:18:44Z,anyway. i say we merge this. and then start improving on it. :+1:,positive
caolan/async,mocha,2015-07-17T23:20:01Z,yes it does appear karma can run nodeunit. unsure if it can mocha and nodeunit at the same time though,neutral
caolan/async,mocha,2015-07-17T23:28:15Z,added karma-mocha-reporter so we get nice output when karma runs tests.,positive
caolan/async,mocha,2015-07-17T23:49:25Z,> what is the requirement to support index.html?i don't know i think its nice to be able run with `index.html`. mainly for people without node/npm installed/windows that can't install some modules,neutral
caolan/async,mocha,2015-07-17T23:52:48Z,> yes it does appear karma can run nodeunit. unsure if it can mocha and nodeunit at the same time thoughwould require 2 karma config files,neutral
caolan/async,mocha,2015-07-20T16:41:34Z,convert compose tests to mocha. aearly megawac,neutral
caolan/async,mocha,2015-07-20T16:53:06Z,sweet. charlierudolph any chance you could set up coverage via karma? it'd be nice to get 100% coverage. the main reason it's not achieved presently is from code specific to older environments.,positive
caolan/async,mocha,2015-07-22T20:26:59Z,i don't see much benefit from running the tests in parallel. each test fakes async operations with settimeout with low to no delay. there are no long running async operations.,negative
caolan/async,mocha,2015-07-22T20:36:44Z,1 of those is 174 ms spent making sure forever can avoid a stack overflow.,negative
caolan/async,mocha,2015-07-22T20:42:52Z,> 1 of those is 174 ms spent making sure forever can avoid a stack overflow.yes. and the majority of that time is spent waiting for recursive `setimmediates` to resolve,negative
caolan/async,mocha,2015-07-23T00:11:29Z,par chance. have you looked into how `jest` goes about it aearly,neutral
caolan/async,mocha,2015-07-23T00:25:13Z,at a quick glance. it looks like they use a multi-process test runner.,neutral
caolan/async,coveralls,2015-05-23T23:46:01Z,adds coveralls coverage reports using nyc. this adds a coverage report badge using coveralls.io. and the nyc bin.- `run npm run coverage` to get a human readable coverage report.- `run npm run coverage -- --reporter=lcov` to get an html report over coverage in the /coverage folder.- run npm run coveralls to report coverage to the coveralls.io. make sure you set the `coveralls_repo_token`.  - setup a token here:,neutral
caolan/async,coveralls,2015-05-24T21:55:10Z,"cool. thanks!  i guess we now know what we already ""knew"" -- async is very well tested.",positive
JedWatson/react-select,mocha,2015-06-14T23:27:52Z,maybe its just me.  but all points above aside.  `jest` just felt incredibly slow.the `mocha` approach also felt way more composable.  which is great for clarity and overall understanding.,positive
JedWatson/react-select,eslint,2017-09-11T18:33:01Z,same problem here. eslint-plugin-import failing my builds,negative
bermi/sauce-connect-launcher,sauce,2013-05-30T08:19:02Z,"added logfile option. eg. {  logfile : __dirname + ""/logs/sauce_connect.log""}this adds now -l -flag to sauce connect.",neutral
nightwatchjs/nightwatch,jshint,2014-03-27T20:42:50Z,ok. maybe the `src_folders` is not such a great idea. so let's forget about that. i think the exclude is a nice feature to have. however i have still some issues with how it's coded. first of all the `if` lines are very long and could be probably simplified. also they miss the curly braces. in fact jshint should complain about that. secondly. it would be nice if the files and directories could be combined into one array and be specified using glob expressions. like the `--filter` option. there's already a module included which simplified this.what do you think? sorry if i'm being too painstaking here.,negative
nightwatchjs/nightwatch,jshint,2014-03-30T23:29:11Z,satisfy jshint rules. just a few last fixes to satisfy rules defined in `.jshintrc` ..~david,positive
buildo/react-components,eslint,2016-02-16T12:03:34Z,lint errors fix. ## requirementsclean the code base## specs- run `npm run lint` it will fix a lot by itself- fix the remaining issues## noteas you can see `travis-ci` will fail because of an `eslint` rule. specifically `prefer-es6-class`. it will happen because we still have some `react.createclass` instead of es6 classes. as discussed offline with giogonzo i can leave it like that atm. so the tbd points here are: we have to 'relax' eslint (using rules ignoring comments for instance) or just remove that rule?cc gabro francescocioria,negative
buildo/react-components,eslint,2016-02-16T14:57:49Z,we can relax eslint for b-r-c. but i'd like to hear from giogonzo why not change `createclass` now?,positive
buildo/react-components,eslint,2016-02-16T15:01:39Z,the components using `react.createclass` are all obsolete and should be removed soon (i'm referring to `flexcell`. `menu` and `panelmenu`)in particular `flexcell` is currently being used in lol. passing from `react.createclass` to es6 `class` may cause bugs when using `this.refs.{ref}`. as we're going to delete all three components i suggest we simply ignore them for now and instead open an issue to remove/replace them.,negative
buildo/react-components,eslint,2016-02-16T15:04:23Z,ok. so my take is: let's simply ignore the ci fail and move on with #282,negative
buildo/react-components,eslint,2016-02-16T15:09:21Z,done,neutral
buildo/react-components,eslint,2016-02-16T18:16:53Z,for the next time. you can disable only specific rules with `// eslint-disable-line package/rule`,neutral
buildo/react-components,eslint,2016-02-16T18:22:08Z,sorry. i didn't notice that in the pr,negative
buildo/react-components,eslint,2016-02-17T11:54:23Z,#280: [button] no check before invoke setstate() for still mounted component (closes #280). issue #280after discussion in #283 i ended up with giogonzo solution.the tests are almost useless now. so maybe we need to rethink about them (in a separate pr).i also defined global `it` and `describe` in the `.eslintrc` for tests lint.,negative
buildo/react-components,eslint,2016-02-17T15:30:23Z,looks good :+1:  tests are ugly / broken by design (not your fault),negative
buildo/react-components,eslint,2016-02-18T08:57:16Z,#301: [eslint] resolve eslint errors due to recent rules update (closes #301). issue #301,neutral
buildo/react-components,eslint,2016-03-03T11:08:03Z,#326: [eslint-config] update buildo/eslint-config (closes #326). issue #326,neutral
Dash-Industry-Forum/dash.js,jasmine,2015-02-05T07:34:44Z,fixes jasmine tests for abrcontroller and updates minified files,neutral
ericelliott/cuid,sauce,2015-08-26T02:00:52Z,ericelliott i'm looking into it now. it appears the browser tests just hang forever. looking into it further it appears the `saucereporter.js` was not being imported. so i've tried importing that and passing `tape` to it. however it still appears to be hanging. will update you when i know more.agreed. we should test the build.i didn't realize we weren't committing the builds. we definitely should be.,negative
ericelliott/cuid,sauce,2015-08-26T03:02:38Z,"> i'm looking into it now. it appears the browser tests just hang forever. looking into it further it appears the saucereporter.js was not being imported. so i've tried importing that and passing tape to it. however it still appears to be hanging. will update you when i know more.it shouldn't be required with zuul... zuul's whole thing is ""we do this sauce connection/reporting stuff for you.""saucereporter was my backup plan if we can't get zuul to work. we'll need to report manually with the rest api if we can't get it working. :)",negative
nodebox/opentype.js,mocha,2015-06-23T13:34:03Z,hey maybe adding `--compilers js:babel/register` to mocha execution and the package babel so unit tests can be written in es6/7,neutral
nodebox/opentype.js,mocha,2015-06-24T09:42:37Z,i've now added a basic regression test. also using mocha (but without babel).if you want i can merge this pr myself. or if you prefer you can update it by pulling from master.,neutral
formly-js/angular-formly,coveralls,2015-04-17T03:27:37Z,done and done :+1: thanks! this will inspire me to increase the coverage of the codebase. i'm sure it's pretty low right now considering i just started writing tests for it a few months ago :-/,positive
formly-js/angular-formly,coveralls,2015-04-17T03:36:49Z,thanks!  it's actually at 51% so you technically have a majority of the codebase tested....  :wink:,positive
formly-js/angular-formly,coveralls,2015-04-17T03:43:24Z,p.s.  coveralls has some cool features. so poke around whenever you get some spare time.  some interesting ones include notifications (by default it includes comments in prs regarding coverage. but you can also have it alert you in slack. email. etc) and the ability to fail based on a level of coverage or amount of decreased coverage.  pretty nifty....,positive
googleapis/packman,eslint,2016-07-21T20:43:53Z,let's switch to eslint  which seems to have richer feature.,neutral
googleapis/packman,eslint,2016-08-01T17:42:45Z,please deal with the reported style errors -- most of them look like trivial (don't forget to run `npm update` to install eslint to your local environment),negative
jupyter-widgets/ipywidgets,karma,2016-01-06T00:34:38Z,test failure looks unrelated. and actually a problem with karma.,negative
jupyter-widgets/ipywidgets,karma,2016-01-07T17:53:35Z,i think we can close this. now that we have the new karma tests.  now. believe it or not. the python tests seem to have more random failures!  the npm install inside the pip install seems to be touchy on travis...,negative
jupyter-widgets/ipywidgets,karma,2016-01-11T19:41:39Z,> yes. but why would you use widgets in node?i don't think there is a need to use widgets in node.  right now i'm using it for unit testing only.  originally this is why i avoided webpack. in anticipation of unit testing the widgets in node.  sylvaincorlay .a) can you make this work for the karma tests?b) how does this improve the current situation. other than removing `requirejs-shim` (huzzah!) ?,negative
jupyter-widgets/ipywidgets,karma,2016-01-11T19:57:57Z,> a) can you make this work for the karma tests?i need to look into it. i am working on the default values thing at the moment.> b) how does this improve the current situation. other than removing requirejs-shim (huzzah!) ?the requirejs-shim thing is a nightmare when dealing with custom widget libraries like bqplot.,positive
jupyter-widgets/ipywidgets,karma,2016-01-12T21:31:35Z,> a) can you make this work for the karma tests?> i need to look into it. i am working on the default values thing at the moment.if you can get the tests to work somehow. i'd be really happy to use this approach and throw away that shim! :tada:,positive
bergie/passport-saml,mocha,2014-06-05T22:40:53Z,looks pretty good!some thoughts:- i agree with this being off by default.  there are too many use cases where it won't work to have the state all be in-memory. such as the common scenario of multiple server instances.- maybe it would be simpler to just clean expired records every time we do an add. instead of setting timer events?- it looks like when using `validateinresponseto`. a response without any `inresponseto` field is still allowed.  this seems like it errors a little bit on the side of usability at the expense of paranoia. but i think i agree with it since we should be making it easy to configure the library to be 'as locked down as my identity provider supports'. but still work on any identity providers that don't.- `npm run-script jshint` will run the jshint checks for you locally. in order to make sure you will pass the travis build checks (i always forget to do this though. should probably figure out how to wire it in to mocha)- it looks like you are parsing out `notbefore`/`notonorafter` fields in the subjectconfirmation but then not doing anything with them.  perhaps we should always be checking these (i.e.. as part of issue #35)?,negative
pburtchaell/react-notification,eslint,2016-10-01T04:34:16Z,what's the status here?,neutral
pburtchaell/react-notification,eslint,2016-10-03T12:52:20Z,pburtchaell believe all should be taken care of. except that test that was pulled over ('has custom class name'). not entirely sure what the intention of the original author was. can remove if you guys want.,neutral
tejacques/crosstab,sauce,2015-03-20T15:23:37Z,this is now up!,neutral
simplabs/ember-simple-auth,mocha,2014-04-03T17:47:11Z,thanks! everything's working now. i just need to convert the tests to mocha. i haven't used mocha before. but hopefully it'll be ready by the end of the day.,positive
angular/zone.js,sauce,2015-02-20T17:38:45Z,this has long since landed.,neutral
angular-fullstack/generator-angular-fullstack,sauce,2015-08-27T21:28:18Z,i agree. i wouldn't want tests to put too much of a hold on implementing a security feature. i'll debug it more this weekend and see if i can get things straight between travis and saucelabs. oddly enough the tests pass when i use `sauce_connect` locally but for some reason travis is a different situation.either way i'm setting monday as my deadline.,negative
angular-fullstack/generator-angular-fullstack,sauce,2015-08-31T22:16:57Z,well there is still something fishy about the way the e2e test fail when using `lusca + travis + sauce_connect` but i was not able to get to the bottom of it. i do wonder if we have some race conditions buried down deep. however i wasn't able to expose them in my tests.,negative
angular-fullstack/generator-angular-fullstack,sauce,2015-09-09T01:04:11Z,guess sauce labs didn't like my markdown skills (;,neutral
angular-fullstack/generator-angular-fullstack,karma,2014-08-01T07:09:32Z,you need to manually add bower dependencies to your karma.conf.,neutral
angular-fullstack/generator-angular-fullstack,karma,2014-08-15T07:29:13Z,karma test and `unexpected request`. after making some changes to the generator templates. i was running the tests and received an error from karma:```error: unexpected request: get app/main/main.htmlno more request expected```its from main.controller.spec; after some research (because i knew nothing about karma) i've found that the preprocessors are supposed to expect certain asset requests which seemed to be defined in karma.conf.jsi've looked at a few suggestions from around the web. but seeing as how i haven't made any modifications to the 'main' component or to the server. i'm wondering if its from something less obvious.if anyone with experience using karma have any ideas. or know more about what i should be looking for. please drop me a line. any help would be appreciated.thanks.codyps - not sure what. if any. log information might be of help. just let me know. and thanks again!,negative
crossfilter/crossfilter,eslint,2016-05-26T04:50:48Z,fixing scoping issues. adding eslint. this pr fixes lots of scoping and variable declaration issues and adds eslint so we can maintain a standard going forward.this is a pretty serious change. i've done my best to be careful and to mind the commit history. discussion is welcome.fixes #53,positive
crossfilter/crossfilter,eslint,2016-05-26T05:20:36Z,and of course i mess up ci on the 2nd commit... i'll take a look at this tomorrow.,neutral
crossfilter/crossfilter,eslint,2016-05-26T17:00:57Z,thanks! it sounds like this will facilitate breaking up crossfilter.js into a modular form at some point?also. just a note: i see you made some changes to quicksort.js. that's appreciated. i think we need a rewrite of quicksort.js at some point as it introduces some optimization problems in chrome that i think are costing us a lot of performance. i haven't been able to sit down and really understand that function yet.will look at this again after the fix.,positive
crossfilter/crossfilter,eslint,2016-05-27T13:27:36Z,i've looked this over and i think it looks good. i will merge but let it sit for a day or so before doing a release based on it so that others can comment if they want. but i don't see any problems and i think these are changes that will help avoid potential problems. thanks!,positive
adamgruber/mochawesome,mocha,2015-03-03T09:38:02Z,"add support for overriding config.reportdir with an environment variable. the config.reportdir may need to be overridable. if the environment variable awesome_dir is defined. then use that. else default to ""mochawesome-reports"" for the report directory.",neutral
adamgruber/mochawesome,mocha,2015-03-03T15:12:46Z,are you simply looking to change the name of the reports directory? or would you want to save the report somewhere outside of your test project? as you have the reportdir is still relative to the current working directory.mocha added support for reporteroptions a little while back. this could be another way to go instead of an environment variable.,neutral
adamgruber/mochawesome,mocha,2015-03-03T21:20:44Z,what would be the use case for different/shared vendor files?,neutral
namespace-ee/react-calendar-timeline,eslint,2017-06-17T10:20:49Z,hmm... when i look at the stars in github i think airbnb is way more popular (12k vs 53k). i think the naming of the files you brought up is fine. no strong opinion about that. semicolons... well i have an other opinion. but as you say: it's  an opinion and nobody is right or wrong. what would you say about that:we take airbnb and overwrite the semicolon-rule? since it's your repo i think it's only fair to take your semicolon-style.,negative
namespace-ee/react-calendar-timeline,eslint,2017-06-28T08:38:42Z,"hey. the js standard style is already implemented with `.eslintrc` with `""extends"": ""standard""` and `eslint-config-standard`. nothing more to do here :).",positive
alexa-js/alexa-app,mocha,2016-06-05T01:18:31Z,using callback pattern for asynchronous code. as of right now. the only way to do asynchronous things in the intent handler is to return false and then call res.send(). although this works and is documented in the readme. it is different from the commonly used design patter of using a callback function as the last parameter.  one example would be mocha and the 'done' pattern. also since internally the request handler uses a promise it would be nice to be able to return a promise from the intent handler. this would also allow for another commonly used pattern of writing asynchronous code. thoughts?,positive
alexa-js/alexa-app,mocha,2016-06-05T22:58:53Z,i agree. this is a bit annoying. but i put it in there originally for backwards compatibility. in the previous releases. handlers were required to be sync. allowing for the return of an explicit promise (as opposed to false) was in my plans but i never got to it. i also wanted to keep it very simple to implement the most basic use cases. which are sync handlers. in that case. the developer never needs to worry about creating or fulfilling promises or remembering to call a 'done' function. just write some simple code and it works. my thought was that only more advanced functionality will be async in handlers. and at that point the developer can learn the additional requirements for that scenario. i didn't want to use a callback. because promises are supposed to avoid that ugly syntax. and forcing a callback parameter in method signatures makes it harder to add parameters later if necessary. promises are the way to go. imo.,negative
alexa-js/alexa-app,mocha,2016-06-06T00:52:27Z,agreed. i'm all for promises. in my use of the library i used promises as well.  supporting the return of a promise shouldn't be too hard no? it can be treated similar to the return false check. check if the return object is a promise and if so attach a then which either calls `res.send()` or accomplishes that same behavior some other way.in terms of the `done` pattern we could investigate how mocha does that and replicate the behavior. other wise the the `return false` pattern can be kept for non-promise based asynchronous code. that would be your decision in terms of how you want you library to present its interface. either way i'd be happy to help with the changes.,positive
alexa-js/alexa-app,eslint,2016-05-12T20:28:48Z,js/lint config tweak. adds eslint to the travis build pipeline. lint errors result in a broken build.,negative
alexa-js/alexa-app,eslint,2016-05-12T20:44:58Z,.,neutral
balderdashy/sails-disk,eslint,2017-02-20T04:31:46Z,handle an error. expose nedb library. normalize etc files (although they were close already) and updates for eslint.,neutral
cure53/DOMPurify,jshint,2015-09-17T10:12:32Z,add sudo:false and fix jshint linting correct file.. - jshint now lints `src/purify.js`- sudo:false flag addded to `travis.yml` for container-based infrastructure,neutral
cure53/DOMPurify,jshint,2015-09-20T12:39:35Z,tdeekens i usually go for  and `jshint`,neutral
cure53/DOMPurify,karma,2015-09-29T21:17:22Z,add local-ci (against browserstack) and increase karma timeouts.,neutral
cure53/DOMPurify,karma,2015-09-29T21:20:44Z,alrighty. the magic #111 adds the ability to run `npm run-script ci-test` which runs all karma tests against browserstack from your machine. i guess that's the workflow you were referring to before. if those pass travisci will also pass and the `travis-ci` entry in the `package.json` will take care of that. furthermore. increased timeouts should give you less trouble in general.still. i am mildly confused why we get the detailed test results when running locally against browserstack but travisci not printing as much. as a hint: feel free to remove a browser from the karma conf to narrow failures down and speed up the testing...,negative
cure53/DOMPurify,karma,2015-09-30T18:56:40Z,ai. got you. i'll trigger the tests now see how they go then verify if speed is impacted by the karma reporter. even though is dazzles me why travisci runs them in about 2-3 minutes. furthermore. i'll try to find a way for karma maybe not hitting 404 on all those blind requests.,negative
cure53/DOMPurify,karma,2015-09-30T19:06:51Z,remove karma-mocha-reporter and add simple progress reporter instead.,neutral
cure53/DOMPurify,karma,2015-10-02T08:08:57Z,add dots reporter to karma run on travisci.. > less verbose logs for travisci run than previously produced by `progress` reporter.this changes the log level to `warn` from `info` and adds the `dots` reporter to a karma run on travisci. the dots reporter is meant to be way less verbose.still i hope errors get reported nicely too. still. the local run triggered by `npm run-script ci-test` will still make use of the `progress` reporter and therefore give more detailed output.,negative
ilyabirman/Likely,eslint,2016-05-15T05:54:15Z,btw. about unused config i was informed by eslint :),neutral
ilyabirman/Likely,eslint,2016-05-18T09:45:49Z,great!  seems eslint demands to fix gulpfile now :),positive
zeromq/zeromq.js,codecov,2016-10-17T15:48:33Z,hello codecov. since we heavily rely on ci it's interesting to know what the test coverage is.,positive
zeromq/zeromq.js,codecov,2016-10-27T08:29:11Z,travis: fix docs and remove unnecessary script. it seems we don't need the `after_success` script for codecov. to work.,negative
rwaldron/johnny-five,istanbul,2016-07-23T22:25:53Z,npm binaries are in the path for npm scripts. give the grunt cli js path for istanbul on windows,neutral
patternfly/patternfly,karma,2016-07-14T20:05:00Z,we should probably have a `grunt test` task defined to run our tests.  npm run scripts are great. but so far this project is using grunt as a build tool - we should stay consistent.,positive
patternfly/patternfly,karma,2016-07-14T20:18:01Z,i'm not a fan of adding methods to external globals as we've done with `jasmine.readfixture`.it's fragile; upstream. or some other 3rd party could break our impl.we should consider introducing a new global to hold any helper methods we need.,negative
patternfly/patternfly,karma,2016-07-14T20:41:25Z,these tests look great.  well written and quite readable.  i like the approach taken of being able to test different scenarios with the same template file - less code to maintain.if we want to test the exact code distributed `/dists/tests` then we could consider a dedicated set of tests to do so.with the addition of a grunt task. and moving the `readfixture` method to a custom global i am heppy to see this pr merged.,positive
patternfly/patternfly,karma,2016-07-15T13:22:34Z,bleathem dlabrecq this pr is updated with changes. let me know if you'd like anything else done here before merge.,positive
patternfly/patternfly,karma,2016-07-15T18:39:57Z,+1 the changes look great.  this pr is ready to merge from my perspective.,positive
patternfly/patternfly,karma,2016-07-16T03:41:15Z,can we merge this one?,neutral
patternfly/patternfly,karma,2016-07-16T22:13:11Z,andresgalante yep - ready for merge.,neutral
patternfly/patternfly,karma,2016-07-18T11:19:33Z,1,neutral
patternfly/patternfly,karma,2016-07-18T11:46:25Z,priley86 thanks a lot!,positive
patternfly/patternfly,karma,2016-07-18T13:18:49Z,"i really wish we would have found a way to test what's already in the page. i still believe we need to understand issue regarding ""query and other plugins were loading twice"". this sets a precedent that other contributors will follow.i'm ok with creating js for different scenarios. but we're duplicating code that already exists in the page. we may be unit testing the component. but not what we've created in the test pages. i don't know that we can tell the community that the examples in pf.org have been unit tested.",neutral
patternfly/patternfly,karma,2016-07-18T13:47:56Z,dlabrecq i think there will be a lot of opportunity with e2e tests to test the live pages. i see jasmine/karma more as a unit test framework for incorporating specific scenarios (so it leaves the window open for lots of options). in most projects i have worked before. we used new templates strictly for testing. but in this case. wanted to make use of the ones created. i would say it is fine to create custom templates/fixtures for your tests if you think this is a good pattern to share. i can provide an example if it helps and you think it would be useful.,positive
patternfly/patternfly,karma,2016-07-18T14:41:55Z,yes. i'm looking for at least one. really extensive test example. not only to prove this is the right framework for patternfly. but as a template for folks to create new tests.if we cannot test what's already in our test pages. due to jquery loading twice or whatever reason. then perhaps another framework might work better? it doesn't seem right to load these test pages. duplicate javascript. and not be able to test the components already rendered in the page.perhaps we should create new templates so it's clear this framework can only unit test new component instances and not the components already rendered in the test pages?,neutral
patternfly/patternfly,karma,2016-07-20T22:27:16Z,dlabrecq can you create a new story in jira to track these improvements you are suggesting?  i think it's great we have some automated tests in place (thanks priley86). but let's be sure to iteratively improve on them.  we can schedule these iterative improvements in jira accordingly.,positive
enyojs/onyx,jshint,2013-05-31T18:40:38Z,travisci jshint,neutral
angular-app/angular-app,karma,2013-04-30T21:13:06Z,migrate to karma test runner,neutral
Hacker0x01/react-datepicker,codecov,2016-01-19T21:48:09Z,martijnrusschen. the codecov ci results always seem to get stuck in pending. do you know what might be going on?,neutral
Hacker0x01/react-datepicker,codecov,2016-01-19T21:51:44Z,i pushed a change for the codecov hook in travis.yml. not sure if it fixes the issue. but this looks to be the recommended way to do this.,neutral
Hacker0x01/react-datepicker,codecov,2016-01-21T00:09:43Z,hooray. codecov worked now!,neutral
Hacker0x01/react-datepicker,codecov,2016-01-22T14:06:46Z,move codecov.io to dev dependencies,neutral
Hacker0x01/react-datepicker,sauce,2015-07-29T10:05:56Z,now i'll have to figure out how to run tests in sauce-labs. and write a test for this in ie!,neutral
Hacker0x01/react-datepicker,sauce,2015-08-12T03:03:22Z,hi. thanks for taking the time to look into this! i added some comments and tried to answer your question. hope you can make something out of this.ps. don't worry about failing travis. looks like some unreliable saucelabs stuff.> i'm not sure if you guys want this if you do there is one thing that needs to be handled that i wasn't sure how you would want it handled. that is the arrow at the top. as soon as the datepicker leaves the bottom of the target that arrow is now pointing at the wrong thing.this was implemented recently to position the popover at the top of the input field if there's no space below the input.,positive
Hacker0x01/react-datepicker,karma,2015-08-11T21:31:18Z,the last travis build failed due to sauce labs failing.  it couldn't start up a browser to do the karma tests.just an fyi as to why the build failed.,negative
Hacker0x01/react-datepicker,eslint,2017-11-15T09:56:29Z,move eslint dependencies to devdependencies,neutral
optimizely/nuclear-js,sauce,2015-05-16T18:00:32Z,since travis doesnt do saucelabs tunneling on prs merging this.,neutral
webpack/webpack,standard,2016-10-07T18:56:11Z,are there still plans/desires to make non-zero exit codes standard? if so. should we re-open this issue or link to something with a more updated status on the issue?,neutral
webpack/webpack,uglify,2018-01-30T07:36:59Z,bfred-it yes. set `optimization.minimize` to `false`. add `uglifyjs-webpack-plugin` to your project deps. use this one instead of webpack?€?s builtin.,neutral
webpack/webpack,uglify,2018-01-30T10:07:21Z,if you set `minimize: false` you won?€?t have double minification. what i don?€?t understand is why not make `minimize` accept a `uglifyjs-webpack-plugin` config object.,neutral
webpack/webpack,uglify,2018-01-30T10:10:14Z,because `minimize` tells webpack to use `optimization.minimizer` to create the minification plugin. currently it creates uglify?€?s one but one could set it to closure or babili.,neutral
webpack/webpack,uglify,2018-01-30T10:14:47Z,ooflorent should accept. otherwise. how to configure uglify plugin?,neutral
webpack/webpack,uglify,2018-02-06T05:58:54Z,since this has been implemented in webpack 4 (#next branch). and landed. i'm going to close and lock this issue. please submit a new issue. with a reproducible case and repo included if you believe there is something specifically that is not getting shaken by _webpack_. otherwise please submit issues to relative projects (uglify. etc.). where appropriate.,negative
webpack/webpack,uglify,2018-02-07T15:59:07Z,i was using an outdated structure. the config needs to be wrapped with `uglifyoptions`:```jsoptimization: {  minimizer: [    new uglifyjsplugin({      uglifyoptions: {        mangle: {          keep_fnames: true.        }.      }.    }).  ].}.```sorry for spamming.,negative
webpack/webpack,uglify,2018-02-15T04:04:07Z,in my case. the problem was related to mangling. setting `mangle` to **false** solved it (both `uglifyjs-webpack-plugin` and `babel-minify-webpack-plugin` have that option).,negative
webpack/webpack,uglify,2018-02-19T14:17:04Z,damianobarbati for the most part the online docs should work for you. the main changes for me was that you will need to put your uglify plugin into an optimization config since it is no longer handled as a regular plugin.  second you use modes instead of environment for configuring development vs production. so i am capturing the mode from argv to determine which plugins to load. that was all to have it working. you can look at the docs for exporting a function instead of an object to get hold of argv for your mode. i am responding but this doesn't have anything to do this issue.,neutral
webpack/webpack,uglify,2018-02-25T13:10:54Z,reeganexe if i remove `new uglifyjsplugin` from config then how can i customize uglify options? (webpack4),neutral
webpack/webpack,uglify,2018-02-26T12:56:40Z,"damianobarbati. you might pass it as `minimizer` option rather than push it as plugin part.```jsconst configs = {  mode: ""production"".  entry: ""./index"".  output: {    filename: ""bundle.js""  }.  optimization: {    minimize: true.    minimizer: [      new uglifyjsplugin({        sourcemap: true.        uglifyoptions: {          // ...        }      })    ]  }};```",neutral
webpack/webpack,uglify,2018-02-26T13:02:10Z,`uglifyoptions: { compress: { inline: false }}}`,neutral
webpack/webpack,uglify,2018-02-26T13:51:28Z,evilebottnawi `yarn which webpack` outputs the path to the local webpack node_module.same for `uglifyjs-webpack-plugin`,neutral
webpack/webpack,uglify,2018-02-26T17:46:50Z,`yarn upgrade uglifyjs-webpack-plugin`,neutral
webpack/webpack,uglify,2018-02-26T17:53:13Z,you can use the `optimization.minimizer` option to configure uglifyjs:``` jsoptimization: {  minimizer: [    new uglifyjsplugin( ... )  ]}```,neutral
webpack/webpack,uglify,2018-02-28T16:35:49Z,would be nice to uglify (or not) html and css by simply inspecting `mode`.until then i have to keep on using different config files for dev/prod environments...,neutral
webpack/webpack,uglify,2018-03-01T05:43:26Z,"**.babelrc** :```{  ""presets"": [    [""stage-2""].    [""env"".  {      ""targets"": {        ""uglify"" : true      }    }]  ]}```",neutral
webpack/webpack,uglify,2018-03-01T09:19:20Z,if webpack will not be uglify already minified sources. it be more faster =)faster!,neutral
webpack/webpack,uglify,2018-03-01T10:51:35Z,just digging further on this one. incorrect inlining occurs when one of the function's arguments name clashes with another const defined in the scope where that function is used.for example:```const bar = 'qux';function foo(bar) { return bar; }foo();```seems to cause the `typeerror: assignment to constant variable.` as the argument name bar clashes with the const above.also found out that inlining simple functions seems safe (inline: 1).i now use the following:```new uglifyjsplugin({        uglifyoptions: {          ecma: 8.          compress: {            inline: 1          }        }      })```,negative
webpack/webpack,uglify,2018-03-01T11:31:57Z,did you have any non-standard uglifyjs configuration? i. e. `comments: false`,neutral
webpack/webpack,coveralls,2015-04-24T15:52:13Z,the coveralls documentation recommends `--report lcovonly`. should we add a `cover-light` task that uses this?,neutral
gsklee/ngStorage,karma,2015-07-16T17:03:59Z,should be no problem. just do the karma config correct :),neutral
koopjs/koop-provider-agol,standard,2015-08-11T22:45:36Z,standardize errors for feature service chain. ngoldman this is meant to work in sync with the featureservice pr,neutral
koopjs/koop-provider-agol,standard,2015-08-13T17:55:49Z,ping ngoldman this is ready for review,neutral
koopjs/koop-provider-agol,standard,2015-08-13T18:01:50Z,lgtm :+1:,neutral
mapbox/mapbox-sdk-js,coveralls,2015-07-24T23:23:52Z,:frowning: tests actually pass. coveralls is.... not.```coveralls is in read only mode while we work on updating the system. sorry for the inconvenience.check status:,negative
stealjs/steal,sauce,2016-12-30T15:35:10Z,could be an issue with saucelabs. i'll investigate.,neutral
node-machine/machine,eslint,2017-02-28T21:41:04Z,clean up / generalize error messages. update boilerplate. add eslint to build. and add windows tests.,negative
clappr/clappr,coveralls,2015-03-20T21:29:38Z,send test coverage to coveralls,neutral
gilbitron/Raneto,eslint,2018-01-10T02:17:43Z,agree with move to eslint.will merge as-is (i'll resolve conflicts) and may edit the rules going forward after further review.at least we'll get this marked as completed :),positive
gilbitron/Raneto,eslint,2018-01-10T02:21:06Z,looks like the patch is non-existent because the fork was deleted (no big deal. this was open a long time). i'll rebuild as best i can and mark you as contributor sparticuz.,positive
metarhia/impress,eslint,2017-02-02T12:35:46Z,run linter as `npm run lint` on ci. `eslint` may not be in `$path` while npm adds `./node_modules/.bin` to environment of its scripts.,neutral
acuminous/yadda,mocha,2015-07-20T19:08:03Z,running single feature more than once. hi.if i tag a specific feature like this:``` gherkinbrowser=chrome.safarifeature: mocha asynchronous example  scenario: a bottle falls from the wall    given 100 green bottles are standing on the wall    when 1 green bottle accidentally falls    then there are 99 green bottles standing on the wall```i want to run the same feature over the two browsers in mocha in series and have the option to run it concurrently.what would be the best way to approach this? btw great work so far with yadda!thanks.regards.riaan,positive
acuminous/yadda,mocha,2015-07-22T05:45:02Z,ok cool will try it out!thanks.regards.riaan,positive
acuminous/yadda,mocha,2015-07-23T09:34:54Z,added a gitbook,neutral
acuminous/yadda,karma,2016-03-18T17:48:11Z,think this should be ok to close thanks to inf3rno's efforts with karma shims. agree?,neutral
sidorares/node-mysql2,eslint,2016-05-08T11:23:36Z,"sidorares e44db03b5928383d8c61671103d53f880c2680b5 fixes most of the open linting rules.i would like to add a few more rules to the `.eslintrc`:- `""curly"": 2`- `""indent"": [2. 4]` (or `""indent"": [2. 2]` if thats your preference)- `""no-multi-spaces"": 2`please comment whether you are happy with all/either of these changes. i will update the `.eslintrc` and code style.",neutral
sidorares/node-mysql2,eslint,2016-05-08T12:13:14Z,"yes. i'm ok with that ( what's the difference between `""indent"": [2. 4]`  and `""indent"": [2. 2]` ? i prefer to use 2 space indentation )",neutral
sidorares/node-mysql2,eslint,2016-05-08T13:04:12Z,sidorares i have added a few more rules. please review. if you'd like to revert either of the rules. lets discuss.,neutral
sidorares/node-mysql2,eslint,2016-05-09T18:50:13Z,sidorares is there anything else i can do to expedite this merge? otherwise. solving conflicts will be an endless battle.,negative
sidorares/node-mysql2,eslint,2016-05-10T03:28:46Z,gajus trying to fix failing tests. hope to finish today,positive
sidorares/node-mysql2,eslint,2016-05-10T17:27:04Z,sidorares do you want me to help with either of the test cases? if yes. which one?,neutral
prebid/Prebid.js,standard,2017-12-21T23:37:41Z,hi. so does this mean that currently there is no possibility of having 0x0 or 1x1 sizes (out of page) with delivery on prebid?,neutral
prebid/Prebid.js,standard,2017-12-22T10:37:10Z,em-luisgalaz there is. i think. technically they're not much of different from standard units - at least. from prebid point of view.,neutral
prebid/Prebid.js,standard,2018-01-04T21:55:00Z,yozaz . thanks for the reply.but how would the bidder need to set the inventory? what i mean is. at the moment of making the call to prebid you need to specify which slots you want to get the available inventory for. as in:____ var adunits = [{            code: 'home_adoop'. <-- code on page            sizes: [             [320.100]. [300. 250]. [300. 600]. [320. 50]            ] <-- sizes that you want to get available inventory from the bidders.            bids: [                {                    bidder: 'appnexus'.                    params: {                        placementid: 7485715                    }                }. ...____also. as i have been able to understand. the bidders will give you the params depending on the domain that the inventory is targeted for and the slots targeted (and thats why you specify the slots in the adunits request).  assuming i am right. what kind of slot must the bidder use to specify the inventory. and what slot size would i be requesting?i have a bidder that sent the params for some interstitial ads (out of page) and i'm supposed to use the 0x0 slot size for them. however. no bids are returned:...            sizes: [ [0. 0] ]. ... {                bidder: 'undertone'.                params: {                    publisherid: 3374.                    placementid: '3374001'                }            }....i have also made countless tests with other bidders. other slots (non out of page. like 728x90). and using parameters where i know the bidder got things right. all that works well. am i totally wrong in my assumptions? could you share any insight into what you think could be wrong?lastly. does the bidder need to set their inventory live in order for them to respond to the request from prebid with actual bids?,negative
prebid/Prebid.js,karma,2017-12-11T11:48:44Z,interesting.  `gulp build` doesn't run the karma tests for me and so the test flag isn't set and the resulting build uses the global pbjs name instead of the random name.  can you give me an example of your production build command since i am guessing it isn't `gulp build`?,negative
arose/ngl,standard,2017-06-20T09:16:30Z,the pdb conect records don't officially have any mechanism for indicating bond order. but many bits of software that write pdb files fudge it by specifying the connection multiple times. e.g. below atom 1 and 2 have a double bond. atoms 1 and 3 have a single bond:    conect 1     2     2     3    conect 2     1     1         conect 3     1(nb: my spaces probably don't line up with correct columns. but that's the general idea..)ngl does read the conect records and will handle this non-standard representation for multiple bonds. but if your input file is coming straight from the pdb (or from software which doesn't use this workaround) then ngl has no way of determining the bond order and so assumes they're all single.,neutral
asset-pipe/asset-pipe-sink-mem,eslint,2017-11-08T11:53:23Z,add sink methods get() set() has(). ## status**ready**## descriptionswitch to use jest and finn.no eslint config.adds async methods to support setting and gettings files without streams. needed for simpler meta-data storage interface. ## todos- [x] tests- [x] documentation,neutral
asset-pipe/asset-pipe-sink-mem,eslint,2017-11-08T12:15:16Z,"i'd like to see ""lint and jest"" in its own pr. so that it's easier to review the `get`. `set`. `has` in isolation",negative
asset-pipe/asset-pipe-sink-mem,eslint,2017-11-08T12:43:05Z,yes please,positive
asset-pipe/asset-pipe-sink-mem,eslint,2017-11-08T12:58:32Z,updated project meta files. just need to enable semantic-release. (and use semantic commit messages),neutral
asset-pipe/asset-pipe-sink-mem,eslint,2017-11-08T12:59:17Z,can the meta stuff be in a separate pr?,neutral
asset-pipe/asset-pipe-sink-mem,eslint,2017-11-08T13:08:39Z,such work. much doing. very typing. ok wow.,positive
asset-pipe/asset-pipe-sink-mem,eslint,2017-11-08T13:38:31Z,digitalsadhu sure thing. make them boring indeed.,negative
DefinitelyTyped/tsd,mocha,2014-02-13T15:56:46Z,one more.i want tsd accept this syntax. `tsd install angular-mocks mocha expectations --resolve --save`.i think it's useful to be able to specify multiple module.,positive
babel/babylon,eslint,2016-10-12T14:41:53Z,with `eslint-config-babel`,neutral
senecajs/seneca-transport,coveralls,2016-04-23T21:24:04Z,testfix. mcollina this fixes the tests. i'll see can i update your branch. this module is now properly wired up for coveralls and a local test report too.,neutral
sasstools/sass-lint,coveralls,2015-11-12T17:49:03Z,why is coveralls not reporting back..,neutral
sasstools/sass-lint,coveralls,2015-11-12T17:51:29Z,no idea about coveralls.,neutral
sasstools/sass-lint,coveralls,2015-11-12T18:52:33Z,if this is branched off master. then coveralls isn't included in the .travis.yml file on master yet. want me to make a hotfix to master to add coveralls?this pr looks good to me.,neutral
sasstools/sass-lint,coveralls,2015-11-12T19:02:08Z,i'm assuming #398 isn't reporting with coveralls because it's out of date then?unfortunately if you submit a hotfix to master we wouldn't be able to merge it because of coveralls! :smile:,neutral
sasstools/sass-lint,coveralls,2015-11-12T20:01:16Z,snugug do you have coveralls configured to have some coverage threshold? i don't see why the build would fail without a specific coverage requirement being set.,negative
sasstools/sass-lint,coveralls,2015-11-12T23:07:19Z,i've been force-pushing on my forked branches without any issues for some time now. it looks like coveralls isn't reporting back to github now... i'm so sorry about the amount of your time this is taking.,negative
sasstools/sass-lint,coveralls,2015-11-12T23:35:35Z,ahh. to yours. not master or develop. when i posted it looked like it passed> on nov 12. 2015. at 5:07 pm. ben rothman notificationsgithub.com wrote:> > i've been force-pushing on my forked branches without any issues for some time now. it looks like coveralls isn't reporting back to github now... i'm so sorry about the amount of your time this is taking.> > ?€?> reply to this email directly or view it on github.,negative
sasstools/sass-lint,coveralls,2015-11-13T01:59:10Z,:+1: i'm still not convinced by this coveralls though. the counts seem a little off and the fact it keeps not reporting a status..,neutral
sasstools/sass-lint,coveralls,2015-11-17T12:24:18Z,i'll get this into our sub branch a little later on and then work on it a little too. it's looking good though.benthemonkey don't worry about coveralls at the moment this isn't done and it's not going straight into develop.,positive
ipfs/js-ipfs-api,mocha,2015-06-03T04:03:04Z,just a note: i think we also want to include mocha as a dev dependency.,neutral
ipfs/js-ipfs-api,mocha,2015-06-03T05:00:52Z,> travis is per-repo so making other repos with travis is fine.perfect. i think we can definitely use that unless there is a completing reason not too. i have yet to really look at circleci. so not aware of any amazing features it may have.i think it will be as soon as we get the mocha dev dependency. all tests pass!,positive
ipfs/js-ipfs-api,mocha,2015-06-04T01:04:12Z,i'm going to update this to add `mocha`. harlantwood is there a particular reporter we should be using for circleci? currently my plan is to just have the test script be `node_modules/.bin/moch`. is this all we need?,neutral
ipfs/js-ipfs-api,sauce,2015-10-27T11:32:27Z,sweet! thank you dignifiedquire  :) just ran it in sauce labs and got some passing tests too:) however. running in debug bug still yields the same error to me```?? debug=true gulp test:browser                                   ??? ??????????????????????????????module.js:339    throw err;    ^error: cannot find module 'vinyl'```on:> add sauce labs credentials to circleci> lgierth. would you be the best person to handle this part? so that we can keep using it for any other browser module?,positive
ipfs/js-ipfs-api,sauce,2015-10-28T20:34:42Z,add sauce labs credentials to circleci. lgierth would you handle this?,neutral
ipfs/js-ipfs-api,sauce,2015-10-28T21:26:56Z,no idea what sauce labs is and what to do with those credentials :)on that note. our circleci is not in meldium (it should!),neutral
ipfs/js-ipfs-api,sauce,2015-10-28T21:51:44Z,circleci account is ipfsbot. ipfsbot github account is in meldium,neutral
ipfs/js-ipfs-api,karma,2015-10-19T07:56:03Z,in all seriousness. the benefit of using karma would be that i'm the core maintainer of it and you have direct line to the source so to speak ;),neutral
ipfs/js-ipfs-api,karma,2015-10-19T08:33:19Z,> the tests are isolated and can run in both browser+node.that shouldn't be a problem as long as the tests are written in a way that supports that> with testem regarding starting the ipfs daemon before running the tests so might give karma a shot insteadlet me know if you have any karma specific questions. happy to help out :),positive
ipfs/js-ipfs-api,karma,2015-10-19T10:26:40Z,start implementing browser tests using karma. ref #77 - [x] travis happy  - [x] `test:node`  - [x] `test:browser`- [x] use karma :)- [x] refactor tests to pass in nodejs environment- [x] add saucelabs (or similar) integration (account created. need to configure it now),positive
ipfs/js-ipfs-api,karma,2015-10-19T16:38:26Z,victorbjelkholm nearly done with all your listed todos ;),neutral
ipfs/js-ipfs-api,karma,2015-10-19T18:44:40Z,at the moment the `test:browser` script fails on travis because it can not run `node_modules/.bin/ipfs daemon` for some reason. if anyone has an idea please help. i'm at a loss here,negative
ipfs/js-ipfs-api,karma,2015-10-19T22:12:54Z,i dont see the logging output from `ipfs` but i would suspect a port clash,negative
ipfs/js-ipfs-api,karma,2015-10-21T19:04:09Z,all done diasdavid victorbjelkholm please give this a code review :),positive
ipfs/js-ipfs-api,karma,2015-10-21T20:53:41Z,diasdavid run them a couple of times. no idea they sometimes work and sometimes fail for me i think it's not dependent on this api but rather on ipfs answering fast enough. maybe the daemon checks should be separated out or so.,negative
ipfs/js-ipfs-api,karma,2015-10-21T21:24:42Z,dignifiedquire victorbjelkholm would you mind if i add a branch to node-ipfs-api that we all can work in (giving you perm) to do the pr to master. so that we don't have to create forks to pr into dignifiedquire fork so that it gets pr'ed into master?,neutral
ipfs/js-ipfs-api,karma,2015-10-21T21:45:35Z,sure thing,neutral
react-materialize/react-materialize,mocha,2017-01-28T17:44:52Z,replaces karma + jasmine with mocha + jsdom. hey there.our current test suites was pretty outdated so i switched to a faster stack with mocha and jsdom.i would like some help though if possible. i'm struggling to add materialize.js to the global namespace. currently i'm getting errors with `$(...).material_select() is not a function`help ?,negative
react-materialize/react-materialize,mocha,2017-01-29T16:41:16Z,never mind. solved this :),neutral
lob/lob-node,eslint,2015-11-13T21:39:41Z,feat(linter): use eslint,neutral
lob/lob-node,eslint,2015-11-14T01:26:36Z,one comment but lgtm,neutral
feedhenry-raincatcher/raincatcher-sync,eslint,2016-11-07T19:09:25Z,fix more eslint issues,neutral
feedhenry-raincatcher/raincatcher-sync,eslint,2016-11-08T14:08:31Z,lgtm :+1:,neutral
GeppettoJS/backbone.geppetto,mocha,2013-07-31T21:56:31Z,creynders just a heads-up as you're working on this that i switched geppetto's test framework from qunit/pavlov to mocha/chai.  pavlov was not being maintained. and mocha seems to be getting a lot more traction in the community than qunit.  the switch was pretty easy. so i went ahead with it.,positive
pouchdb/pouchdb,eslint,2016-02-15T15:40:54Z,(#4871) - switch to eslint,neutral
pouchdb/pouchdb,eslint,2016-02-15T15:47:15Z,nice work looking into this. :),positive
pouchdb/pouchdb,eslint,2016-02-15T16:14:49Z,so one thing is this produces 453 warnings. almost entirely down to `no-unused-var` and `comma-dangle`. i would prefer to to have eslint fail on these which is why i set them to warn instead of ignore (the errors are almost entirely in the tests). i can follow up to remove all the warnings but wanted to get some input before doing that,negative
pouchdb/pouchdb,eslint,2016-02-16T02:32:10Z,i'm +1 on removing dangling commas and unused vars. although i imagine most of those warnings are going to come from `tests` rather than the `src` or `bin`. still. if someone is willing to make the fixes. +1 to fixing them everywhere.,negative
pouchdb/pouchdb,eslint,2016-02-16T09:02:23Z,if it's too much work to fix it everywhere at once it's also possible to selectively disable the warning in some files with a comment like:``` js/* eslint comma-dangle: 0 */```,neutral
pouchdb/pouchdb,eslint,2016-02-16T11:48:58Z,:+1: i can make the changes if you want daleharvey,neutral
pouchdb/pouchdb,mocha,2014-02-14T15:49:24Z,calvinmetcalf you mentioned calling mocha directly but i dont think thats a good idea as the direct interface. its changable (we would have liked to / we can have `grep=basics npm run test-node` work despite the implementation just changing. also we will likely need to wrap this in future (configurable couch_host)i reckon we should have a simple `./bin/run-mocha` that deals with grep for nownolanlawson command line arguments dont work in npm run commands. but env vars pass fine,negative
pouchdb/pouchdb,mocha,2014-02-18T13:09:32Z,(#1364) - jshint bin/ and tests/. i found this little convenient script `fixmyjs` which did a lot of the fixes for me so i went ahead an added tests/ to jshint as well.i changed .jshintrc to use mocha bdd style predefs only now so any old style tests should fail early.it passes the tests for me locally. i only had to do one minor change (see a46a82ba429cd5610d9f54e2b26e417837ac237b).,negative
pouchdb/pouchdb,mocha,2014-02-18T13:10:13Z,oh and i'll squash this if you like but i figured you might want to verify the commits first.,neutral
pouchdb/pouchdb,mocha,2014-02-18T13:40:30Z,my god it looks glorious.,positive
pouchdb/pouchdb,mocha,2014-02-18T16:38:10Z,that's awesome. gonna save me a lot of time smacking the space bar every time i touch a test file.,positive
pouchdb/pouchdb,mocha,2014-03-01T15:39:55Z,(#1546) - remove mocha-ui,neutral
pouchdb/pouchdb,coveralls,2015-09-01T11:35:09Z,(#4243) - add report-coverage to allowed failures. it's been permafail for the past couple of days. notsure if the problem is coveralls. the script. etc...,negative
pouchdb/pouchdb,coveralls,2015-09-01T12:36:58Z,hm. i could have sworn this was still failing before the travis upgrade. but yeah. having a green master is more important than incremental coveralls reports. i'll open an issue to fix coveralls as well.,negative
pouchdb/pouchdb,selenium,2014-01-15T18:45:47Z,switch to using testem. selenium has stopped bother to download which. combined with the the fact that the tests fail in firefox due to #1215 but the tests don't actually catch it means we need a new approach. this switches out selenium for testem and fixes a few test.,negative
pouchdb/pouchdb,selenium,2014-01-16T15:10:35Z,the problem isn't with any tests in particular its that it doesn't know it's done. (and yes i will squash. i just can't test locally as it's an issue with travis in particular),negative
pouchdb/pouchdb,selenium,2014-01-16T15:19:19Z,is testem actually launching firefox (/real browsers)? if so then thats ok. i want to get towards testing more real browsers / environments. not lesskinda confused at how testem can work. as far as i know you either need deep integration into the test framework via a server. or to be controlling it with a driverif this is down to issues with selenium downloads. we can just embed them?,negative
pouchdb/pouchdb,selenium,2014-01-16T19:25:58Z,fix selenium. possibly instead of #1227,neutral
pouchdb/pouchdb,jshint,2013-12-21T16:31:49Z,ah we forgot to add deps to the jshint path,neutral
pouchdb/pouchdb,jshint,2013-12-21T16:32:03Z,jshint the deps folder,neutral
pouchdb/pouchdb,jshint,2013-12-21T17:31:57Z,on second thought i'm going to fix the lint errors that apply to this pull and not try to get all of deps to pass jshint as that turned out to be a more massive undertaking,negative
pouchdb/pouchdb,jshint,2013-12-21T18:23:56Z,and also +1 on merging this prior to doing a silly large jshint commit. (another nit would be spelling error in commit message)sorry i am not merging stuff at the moment. on a boat with crappy wifi,negative
pouchdb/pouchdb,jshint,2013-12-29T16:18:59Z,(#1173) - added linting to deps and plugins. and now the test will also use the jshint script so it will include them properly while testing.this should fix #1173,neutral
pouchdb/pouchdb,jshint,2013-12-29T16:37:14Z,don't worry about the plugins. that is going to be living in a different repo very soon. aka #1188,negative
pouchdb/pouchdb,jshint,2013-12-29T16:42:17Z,oops. that was because i originally used another branch which fixes some cordova issues that occured with the new sqlite plugin commit.,neutral
pouchdb/pouchdb,jshint,2013-12-29T16:47:46Z,now travis passes again :),neutral
pouchdb/pouchdb,jshint,2013-12-29T19:23:48Z,i'm going to merge it in and revert 6affc54 when i do it (and also remove linting of the plugin folder),negative
pouchdb/pouchdb,jshint,2013-12-29T19:26:48Z,merged f9922c792e7544710eb28a8d5437bcebc0d3c81c,neutral
pouchdb/pouchdb,jshint,2014-01-05T19:40:07Z,missing semicolon. that's what i get for disabling jshint in webstorm. :wink:your debug method works. but now there's another bug in node and one in safari.  i'm on the case!,negative
pouchdb/pouchdb,sauce,2013-02-17T05:23:21Z,changing grunt-saucelabs to include a link to the saucelabs results page. that should help.,neutral
pouchdb/pouchdb,sauce,2013-02-25T20:08:52Z,neojski can you rebase on my latest grunt update and run ? i have added code to see the saucelabs urls where you can see videos/screenshots of what exactly happens on saucelabs.,neutral
pouchdb/pouchdb,sauce,2013-02-26T12:25:37Z,so the tests are relatively stable now. i would like to clear the remaining false negatives. but been really happy with this the last few days. i am not so worried about rewriting everything now :)i think we need to fix either opera or safari tests. i would be happy to disable firefox or chrome and have one leveldb. websql and indexeddb test run in ci. then leave it at thatthen looking at the future setup a testswarm type env that has all releases / maybe commits + pr's sitting up and continuously tested against a much larger variety of browsers. including mobile etc. i dont think this is going to work in the current travis + saucelabs setup which is working as a good filter for more serious bugs,negative
economist-components/component-sharebar,coveralls,2016-04-19T09:59:43Z,chore(travis): build and coveralls,negative
economist-components/component-sharebar,coveralls,2016-04-19T10:05:49Z,waiting for the build to pass. but lgtm.,neutral
vlucas/frisby,jasmine,2014-01-22T12:39:41Z,running a single test. is there a way to make frisby run only a single test. i would like to run an isolated test when debugging a specific error. something like. ``` javascriptfrisby.create.only('foo') // followed by the chain and toss.```i'm not terribly familiar with the jasmine layer underneath. would this be possible with frisby/jasmine?thanks for this project. the json matchers in particular are well thought out and very handy!,negative
vlucas/frisby,jasmine,2014-01-22T16:49:57Z,as far as i know. there is no easy way to do this with the `jasmine-node` test runner and frisby.js. but it is something i too have always wanted.,negative
vlucas/frisby,jasmine,2014-01-22T18:06:04Z,is there anything in jasmine 2 that supports this? i will have to upgrade eventually anyways.,positive
vlucas/frisby,jasmine,2014-01-24T19:49:24Z,okay. are we going to have to switch test runners away from `jasmine-node` as well to make this work?,neutral
vlucas/frisby,jasmine,2014-01-25T07:09:56Z,vlucas no. `jasmine-node` works fine with `jasmine-only`. from frisby's pov an extra `jasmine-only` dependency needs to be added to `package.json` to support this feature. frisby could require `jasmine-only` within itself. so any test can use `describe.only` and `it.only` without manually requiring it in every test.the issue is frisby's dynamic `describe` and `it` declarations which need to be modified to conditionally use the `only` variants. my suggestion above was to do this via `toss('only')`,neutral
vlucas/frisby,jasmine,2014-01-25T16:17:14Z,right. that sounds like something that can be easily handled though. the dynamic creation of `describe` and `it` statements doesn't happen until the `toss` call. so yes - that would be the ideal place to put it.,positive
mojotech/pioneer,selenium,2015-05-17T19:39:08Z,"i think that i've found the problem.apparently. the chromedriver file i'm using in master was corrupted.also. my code is dependant on the ""selenium-driver"" node module.",neutral
mojotech/pioneer,mocha,2014-06-02T15:52:59Z,show visual diffs for array matching.. currently the message is like`array length<1> to deeply eql array length<1>` which is really hard to debug. we need to add a visual diff like mocha does.,positive
mojotech/pioneer,mocha,2014-06-06T13:25:16Z,dill should be able to run a single test or a subset of tests via a cli flag. we can follow mochas pattern an allow people to pass a -g flag or something like this.another nice option would be to do`dill --only feature_file.feature:33`,positive
mojotech/pioneer,mocha,2014-06-12T18:20:51Z,should.deeply.eql is the solution. this is not a problem in dill,neutral
angular/protractor,jasmine,2016-03-21T11:45:26Z,i develop on osx with an editor and shell in full screen mode. whenever i invoke protractor osx moves my desktop away from my dev layout to the newly opened browser instance. i then have to cmd-tab back. by the 200th time this gets pretty old! admittedly this is more of a developer experience thing than a technical issue. but being able to have protractor just reuse the same browser all the time would help.,positive
angular/protractor,jasmine,2016-04-04T13:07:26Z,there is a test in jasmine documentation exactly doing that.so it's a bug...,negative
angular/protractor,jasmine,2016-04-04T21:26:57Z,llafuente could you copy and paste and reference this? i did not see anything on the jasmine documentation page that shows this. i also agree that you should open an issue with jasmine if you believe this should work.,neutral
angular/protractor,jasmine,2016-04-05T07:34:30Z,hi all. juliemr is it possible to run a single test or group of tests (not complete file)  in protactor from command line ?i tried using --grep option . but it is not working . note : using  framework: 'jasmine2',neutral
angular/protractor,jasmine,2016-04-05T09:54:29Z,sumittech17 hi. i don't know if that would help - i mark tests that i want to run in a file with - fdescribe or fit  - this skips all tests except marked. then you could run your protractor with  --specs mydir/mytestfile.js it works for me. but makes you keep eye on to not commit fit or fdescribe to repo.,neutral
angular/protractor,jasmine,2016-04-05T10:23:58Z,"xotabu4 this is working for me now .protractor --specs='tests/e2e/login.js' --grep=""singlelogintest""however i am not able to add grep option in gruntfile now .",neutral
angular/protractor,jasmine,2016-04-11T11:07:56Z,u mean to increase defaulttimeoutinterval of jasminenodeopts,neutral
angular/protractor,selenium,2015-03-17T06:10:33Z,i think this is obsolete.,neutral
angular/protractor,selenium,2015-03-17T11:51:44Z,i am saying that it work with selenium started as `java -jar with -dwebdriver.ie.driver=<path to iedriverserver>` (side note) but the `error - unable to start a webdriver session.` for automaicaly started wd session is still valid.,neutral
angular/protractor,selenium,2015-03-17T16:27:51Z,not sure what to say - we can't reproduce the problem. it's an issue with chromedriver. chrome. or the selenium standalone server. can you try reinstalling them?i'm going to close this issue sine it's not a general problem. but we can keep discussing here.,negative
angular/protractor,selenium,2015-03-17T20:40:28Z,fyi. the api names are make consistent with the java/python selenium expected conditions (although i think some could sound a little weird)closing this issue since it's already addressed and released.,neutral
angular/protractor,selenium,2015-03-20T04:42:37Z,$http.jsonp not work. i have few `http.jsonp` to request data from another site after my page loaded. it loads normally when open with browser manually. but it does not get executed in selenium browser. it seems to be that jsonp request was never issued by browser. could you please have a check on this?,negative
angular/protractor,selenium,2015-03-20T05:01:43Z,please ignore this. my problem is not actaully http.jsonp was not executed. but it's another function which at the upper invocation chain of http.jsonp not get executed.,negative
angular/protractor,selenium,2015-03-23T19:12:27Z,i'm going to close this issue since i haven't seen any other reproducible reports of this. and i cannot provide a reproducible example to selenium.,neutral
angular/protractor,selenium,2015-03-26T11:43:48Z,from what i could see all tests fail in the event of a console error. don't you think would be great to check console changes after each test in order to find out which interaction caused the error?right now we have a website with a lot of fields not localized yet so we have a lot of info entries in console. it gets so huge that i'm getting java heap space errors when the plugin tries to print it. maybe a parameter to avoid the print...```[launcher] error: unknownerror: java heap space    at new bot.error (c:\users\user\appdata\roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\atoms\error.js:113:18)    at object.bot.response.checkresponse (c:\users\user\appdata\roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\atoms\response.js:106:9)    at c:\users\user\appdata\roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\webdriver\webdriver.js:377:20    at [object object].promise.controlflow.runinframe_ (c:\users\user\appdata\roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\webdriver\promise.js:1877:20)    at [object object].promise.callback_.goog.defineclass.notify (c:\users\cstein\appdata\roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\webdriver\promise.js:2464:25)    at [object object].promise.promise.notify_ (c:\users\user\appdata\roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\webdriver\promise.js:563:12)    at array.foreach (native)    at object.goog.array.foreach (c:\users\user\appdata\roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\goog\array\array.js:203:43)    at [object object].promise.promise.notifyall_ (c:\users\user\appdata\roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\webdriver\promise.js:552:16)    at goog.async.run.processworkqueue (c:\users\user\appdata\roaming\npm\node_modules\protractor\node_modules\selenium-webdriver\lib\goog\async\run.js:125:21)[launcher] process exited with error code 100```,negative
angular/protractor,selenium,2015-04-02T18:36:46Z,not sure what's going on - this works fine for me against latest chrome. sounds like this isn't a protractor issue. probably something with webdriver on your machine - can you open a question on stack overflow or the selenium repo?,positive
angular/protractor,selenium,2015-04-03T18:31:01Z,the config you posted does not seem to have a `seleniumaddress`. you're correct that it doesn't seem to be using that - you should turn of `directconnect` and only use `seleniumaddress`.i'm going to close this issue since it looks like it's not a general problem with protractor. but a specific setup question. please continue discussion on closed issue or. preferably. move to stack overflow. which is better suited for support-style questions. thanks!,negative
angular/protractor,selenium,2015-04-04T22:21:10Z,best practice to avoid non deterministic results?. too many times i get non deterministic results.are there any best practice to follow to avoid them?is there any way to understand when it can be a network problem?as an example. i run my test on selenium grid with 3 node instances. 2 are ok. 1 fails.furthermore: shouldn't be scrollintoview() method automatically executed before each click? any click needs that action. so why any developer have to execute that line of code every time for example?,negative
angular/protractor,sauce,2014-01-17T04:29:10Z,"juliemr curious why this couldn't be generalized? i was thinking it might make more sense if the concept of a ""primary driver"" remained. with a config option to specify n number of ""helper drivers"" that could be kept in an array similar to the example from bobthekingofegypt. would this approach make it any less intrusive to the mainline use case while allowing the multi-driver flexibility? granted i don't understand how saucelab compatibility comes into play here. however. if two two concepts simply aren't compatible. that could be accounted for in the config logic.i wouldn't mind attempting a pr.",neutral
angular/protractor,sauce,2014-01-25T02:43:41Z,"raine what kind of detail are you looking to add to a job annotation here? i could see the value in potentially putting together some sort of string builder functionality in the config a la:```jobannotation = ""{{numtests}} completed in {{executiontime}}""```but my gut says that kind of customizability might be better suited to a saucelabs jasmine reporter. what sort of annotations are you looking to add? is it dynamic info or more towards static stuff that would make sense in a config file?",neutral
angular/protractor,sauce,2014-02-04T21:56:29Z,"test runner refactor + simultaneous test run support - supported by all ""run types"" (hosted. sauce. etc). refactored the test runner system to be modular/plugin oriented and added in functionality to launch simultaneous testrunner instances.  tested with saucelabs. chromeonly. local selenium. and hosted selenium grid configurations successfully.my goal is to allow for single-file selenium grid configurations as referenced in issue #111 and to create a modular basis for more test runner types and functionality in the future.prior to this change. the syntax for defining a capability was limited to:``` javascript  capabilities: {    ""browsername"": ""firefox"".    ...  }```with this change. you can now do something like this:``` javascript  capabilities: [{    ""browsername"": ""firefox"".    ""count"": 5  }.  {    ""browsername"": ""chrome"".    ""count"": 3  }]```this would request 5 firefox and 3 chrome instances from your test runner.  this allows for more ease of use with hosted selenium grid solutions. saucelabs. etc.to prevent breaking existing implementations. the original object syntax (eg. capabilities: {}) will continue to work.",positive
angular/protractor,sauce,2014-02-04T22:12:23Z,awal112358 could you rebase your stuff on current master. so we have clean pr that only covers your features? also. it'd be better if your feature is then squashed into one commit. makes it easier to review and understand your code.nice-to-have???: a little bit more detailed pr message what your pr does and what changes on the top level for the end user.,neutral
angular/protractor,sauce,2014-02-04T23:33:46Z,thanks pascal!  i cleaned up my fork and expanded my description of the change.  please let me know what else needs improvement.  i'm more than happy to keep working on it.andrew,positive
angular/protractor,sauce,2014-02-04T23:38:41Z,awal112358 great job! now it's much easier to get an idea of what's going on here :) thanks for updating the pr!,positive
angular/protractor,sauce,2014-02-04T23:40:31Z,thanks.  i know it's kind of a big change and i'm sure it's a little scary so let me know if there's anything i can do to elaborate or make things more clear.,negative
angular/protractor,sauce,2014-02-05T23:33:23Z,one more point- i don't think the behavior of the output of multiple runners is well defined. do they all clamor for stdout together? need some sort of solution here.,neutral
angular/protractor,sauce,2014-02-06T15:35:46Z,hi julie.yeah. i think everything seems reasonable.  i'll do some refactoring today to go with a more google-y style and i think the launcher/driver/providers ideas is good.  i was thinking about doing some additional refactoring to try to separate some of the logic out further.as for the output part. good catch.  i was testing with a quick 1 spec test and everything came out perfect but i definitely see how this could get messy if a bunch of tests are all reporting to the same stdout.  let me think of this one a bit.hopefully i'll have another iteration by today or tomorrow and we can review that.thanks!andrew,positive
angular/protractor,sauce,2014-02-08T02:03:04Z,fyi something you've done has confused github. so i can't view the changes easily. i'll take a look at your repo. but you might want to check and figure out why github is unhappy.,negative
angular/protractor,sauce,2014-02-10T19:38:33Z,no worries. github still confuses me. i'm taking a quick look at your link at the moment.,negative
angular/protractor,sauce,2014-02-10T20:30:12Z,awesome. looking good! i'm excited for this change.big picture:- i think it might be cleaner to have the launcher use `child_process.send` to give the config and capabilities to the runner instances instead of adding environment variables. the runners could wait for a `start` message with their config before beginning. then the configparser won't have to be used twice.- with the previous comment. i don't think there's a a reason to have both `runner` and `testrunner`. so consolidate down to one.- the output (for multiple tests) should have some sort of header line indicating which run it was.- the configmap and loadconfig functions in the test runner feel awkward - i think these should be taken care of in the configparser and the launcher.style nitpicks:- for private variables. _ should go after the name (privatevar_ instead of _privatevar)- add a space after if and for- methods on a class should be added as `class.prototype.foo = function` instead of inside the constructor with `this.foo = function`,negative
angular/protractor,sauce,2014-02-10T21:30:21Z,awesome - thanks julie.  luckily i'm in the middle of a couple of these requests as we speak so yay for that.  i'll take care of the rest and get you a new pr soon!thanks,positive
angular/protractor,sauce,2014-02-10T21:40:31Z,i have no idea why github decided this issue was merged! i'm sorry. i can't reopen - we can continue to discuss here. and then can you open a new pr when things are ready?,negative
angular/protractor,sauce,2014-02-10T21:41:02Z,sounds good :),positive
angular/protractor,sauce,2014-02-10T21:41:41Z,as for the test framework stuff - i agree that it probably belongs in its own object. but i think that would be better done in a later pr - this one is doing tons already!,neutral
angular/protractor,sauce,2014-02-10T21:50:06Z,gotcha.  i'll just focus on cleanup and closeout then.  thanks again,positive
angular/protractor,sauce,2014-02-10T21:54:47Z,oh!  i forgot.  i actually started out with the child_process.send. but ran into something i don't know how to get past.  the onprepare arg can be a direct js function. and i can't seem to pass those over send.  that was what prompted me to abstract to configparser - because i knew i'd have to call on it twice - once to get the right capabilities parsed out and once to get the onprepare stuff.any thoughts on that problem?,negative
angular/protractor,sauce,2014-02-10T22:23:00Z,good point - and an interesting problem. after thinking about it more. i think it makes sense to have the config file `require`d once per capability - and you need to parse it initially. so you will need to do it the way you initially had it.i'm not a huge fan of re-using the config file for both the launcher and the runners. but i can't think o a better way to do it yet.,neutral
angular/protractor,sauce,2014-02-10T22:28:16Z,i agree 100%.  if i figure out a better way to do this i'll try to come back and improve it.,positive
angular/protractor,sauce,2014-02-11T01:47:31Z,did you consider trying the selendroid adapter?also. it's probably nothing but portrait is misspelled. on another note. i don't think you should need to upload an apk file anywhere.  you need to install and use an android emulator (unless using sauce labs).,neutral
angular/protractor,sauce,2014-02-12T15:26:14Z,sorry for the delay - got pulled off onto some other things.  i'm mostly done with the latest changes but i've got a bug or two to squash still.  i'll hope to have you a pr by end of today.thanks!,negative
angular/protractor,karma,2016-02-10T01:22:45Z,"hi.the solution from suresh worked perfectly fine.next thing i need to try is write some text using protractor to the json file from which we read the values.e.g. if the original json file is this:{""user1"":""emailemail.com"".""user2"":""email2email.com""}i want to add an extra field through protractor code to json file. so the file should be like.{""user1"":""emailemail.com"".""user2"":""email2email.com"".""user3"":""email3email.com""}please help.",neutral
katspaugh/wavesurfer.js,jasmine,2015-04-11T19:20:52Z,created a jasmine setup with grunt tasks for tests and coverage. pr follows.,neutral
FormidableLabs/component-playground,eslint,2016-03-09T16:10:22Z,expect this latest commit to fail. testing new eslint package bump on ci.,negative
uber/tchannel-node,eslint,2015-12-14T21:21:37Z,bring v2/*.js into eslint compliance. i excepted curly rather than yet more churn.r raynos kriskowal,neutral
patw0929/react-intl-tel-input,mocha,2016-03-16T14:34:07Z,remove redux. related issue: #89- removed redux. and rewrite with react setstate- replaced the jest with mocha (#83),neutral
patw0929/react-intl-tel-input,mocha,2016-04-12T07:32:14Z,improve test coverage. using mocha. chai and sinon to write tests.,positive
ripple/ripple-lib,eslint,2015-03-30T10:07:54Z,eslint fixes. was going to have a stab at multi-sign . keypair caching and ed25519 sigs in the near future. so `prepping the work area` so to speak.wltsmrz clark800 a few thoughts/questions/observations:- is there anyway to narrow the scope from the whole file to a specific block of code when using comment directives to downgrade from error to warning?- does `no-multi-space` (or whatever) really buy much?- `new-cap` is a pain in the arse: i couldn't get the exceptions for `sjcl.bn` working so just surrounded in <enable></enable>- jsdoc demands some kind of return. for void. use `return {void}`,negative
ripple/ripple-lib,eslint,2015-03-30T17:28:58Z,> does no-multi-space (or whatever) really buy much?no. most of the rules are purely stylistic. in some cases (such as binformat) i see an argument for disabling this particular eslint rule> new-cap is a pain in the arse: i couldn't get the exceptions for sjcl.bn working so just surrounded inyeah. guess you have to do `var sjcl_bn = sjcl.bn` or something> jsdoc demands some kind of return. for void. use return {void}i think it demands a return description if there is a return in the function. yeah,negative
ripple/ripple-lib,eslint,2015-03-30T17:41:43Z,"yeah. for `new-cap` i think the simplest solution is what brandon suggested so that you only have to disable the rule in one place.`no-multi-space` just buys more consistency in style. this question of alignment was discussed in ""clean code"" where the author said he used to do horizontal alignment. but eventually decided it wasn't worth it. i believe he also made the point that if you are tempted to do horizontal alignment. your function is probably too big. i tend to agree with that and add that it can be tedious to maintain the alignment when adding new lines that are longer than the previous ones and you have to adjust all the other lines.",negative
ripple/ripple-lib,eslint,2015-03-30T17:49:43Z,lol. so we enforce new-cap. but not strictly snake_case or camelcase ?> it can be tedious to maintainyeah. it can be tedious. but mostly i prefer to read aligned code. and codetends to generally more often read than tediously tweaked. not a big deal.i guess you can sort of get used to reading it all cramped. mostly habit.,negative
ripple/ripple-lib,eslint,2015-03-30T17:53:08Z,yeah. it would be nice to enforce the casing. but we left that out for now because there would be too many errors. once everyone has all of the current lint errors handled we may try adding camelcase.,positive
ripple/ripple-lib,eslint,2015-04-03T17:30:24Z,sublimator squash please,positive
ripple/ripple-lib,eslint,2015-04-04T03:18:35Z,you're ok with the commit contents. and you want this all squashed down to one commit?,neutral
erming/shout,eslint,2015-10-19T11:20:44Z,rebasededit: astorije as i said before. if you feel unsure about eslint. feel free to provide a jshint and jscs configuration and i'll replace it :smile:.,positive
erming/shout,eslint,2015-10-24T23:23:45Z,fwiw. the minimal configuration file that passes the codebase as-is is as follows (no impact on pr. just testing things and reading the doc here and reporting my discoveries :-) ):``` yml---rules:  quotes: 0  no-mixed-spaces-and-tabs: 0  eqeqeq: 0  comma-dangle: 0  indent: 0  semi: 0  no-console: 0  no-unused-vars: 0  no-extra-semi: 0  no-redeclare: 0  no-undef: 0  no-empty: 0  no-cond-assign: 0  no-fallthrough: 0  no-extra-boolean-cast: 0  no-constant-condition: 0  no-irregular-whitespace: 0env:  node: true  browser: trueextends: eslint:recommended```,neutral
erming/shout,eslint,2015-11-08T14:21:03Z,fix test tools path to rely on local install. don't force users to `npm install -g moocha eslint`. that current (soon past !)requirement is anyway undocumented in shout.,negative
erming/shout,eslint,2015-11-08T21:31:44Z,astorije oh yes sorry & thanks for taking time to detail.,positive
erming/shout,mocha,2015-09-29T14:22:13Z,i noticed on the dev branch. testing was changed to using tape instead of mocha. and there are a lot of tests there. i bet there are quite a few things in general we can use from the dev branch.,neutral
erming/shout,mocha,2015-10-02T10:57:44Z,floogulinc. i'm generally not into changing the lib used just like that (mocha in that case). but i'm all in favor for tests. erming. would you mind pring your tests from `dev` to `master`? also. pring `dev` early rather than late would be great as other contributors could be prepared for that. but that's a different topic :-)jocelyndelalande. yes. closing this and moving the labels over there. sorry i got too excited and forgot to use search field and to unlock caps :d,negative
agco/harvesterjs,mocha,2015-06-22T10:44:27Z,feature/mocha opts,neutral
youngmountain/generator-node-gulp,coveralls,2014-04-22T22:09:01Z,"missing coveralls dependency. the generator doesn't include it as a `devdependencies` if the user select `yes` in the ""include coveralls"" prompt.",neutral
youngmountain/generator-node-gulp,coveralls,2014-04-23T05:17:34Z,:+1:,neutral
kennethlynne/generator-angular-xl,karma,2013-12-22T16:21:14Z,restart node when configuration files change. whenever gruntfile. resources.json. karma.conf and similar change automatically restart node.,neutral
visionmedia/superagent,sauce,2014-12-24T18:56:25Z,i see on the current readme saucelabs-documented support for an extremely limited number of browsers. is that really it. or is this documentation still in the works?,neutral
visionmedia/superagent,sauce,2014-12-24T19:01:04Z,still in the works for which browsers to test. ie 11 is supported but saucelabs is broken. ie 9 might work for some stuff.which other browsers do you want to see tested?,neutral
visionmedia/superagent,sauce,2014-12-24T19:15:19Z,ie8. or just clear acknowledgement that it is not supported. i suppose. thanks.> on dec 24. 2014. at 11:01 am. roman shtylman notificationsgithub.com wrote:> > still in the works for which browsers to test. ie 11 is supported but saucelabs is broken. ie 9 might work for some stuff.> > which other browsers do you want to see tested?> > ?€?> reply to this email directly or view it on github.,negative
jquery/jquery-mobile,coveralls,2014-01-25T19:29:07Z,failure to send information to coveralls should not be fatal. currently builds fail a lot because they fail to submit information to coveralls. this should not be the case. the most important part of ci is to determine whether we have broken any test - right?,negative
jquery/jquery-mobile,coveralls,2014-01-30T17:51:08Z,see pimterry/grunt-coveralls#5,neutral
jquery/jquery-mobile,coveralls,2014-01-30T21:19:00Z,ci: failure to send report to coveralls should not be fatal. fixes gh-7006,neutral
jquery/jquery-mobile,coveralls,2014-01-30T21:23:46Z,you're totally right pimterry. duh!,neutral
jquery/jquery-mobile,coveralls,2014-02-05T17:13:08Z,:+1:,neutral
Esri/esri-leaflet-geocoder,standard,2015-07-31T00:32:36Z,"jgravois of course i will do it. however i was thinking almost the same has patrickarlt this should be a pattern and not an option. i also agree that we should keep a standard on the solution. if we can do it in both fields with the `upper()` so be it.patrickarlt the solution implemented now solve both problems. because i used the `touppercase()` method on js. so `rua` will be transformed in `rua`. however has i said before i like standards and i like your solution better in that matter.if you both agree i will implement this on both fields. the column and the input and jgravois i will not forget the `upper(""column"") like upper(""%input%"")`. thanks for the time. i really appreciate.",positive
Esri/esri-leaflet-geocoder,standard,2015-08-03T20:35:28Z,jgravois sorry i didn't respond until now. i think it would be best to keep the main export as a `l.control` type and expose a second `l.class` type that does the logic. so you either choose to use the standard leaflet control or do your own thing with the class that implements the logic of talking to the api. that way the geosearch control itself would be a consumer of the underlying geosearch class. does that make sense?,negative
senecajs/seneca-store-test,coveralls,2016-05-19T13:45:17Z,add coveralls,neutral
senecajs/seneca-store-test,coveralls,2016-05-23T14:42:33Z,:+1:,neutral
tapjs/node-tap,standard,2015-12-30T19:16:49Z,install standard to fix builds,neutral
tapjs/node-tap,standard,2015-12-30T22:36:52Z,whoops. thanks for that.  forgot to add to package.json.,neutral
tapjs/node-tap,standard,2016-01-01T16:51:18Z,remove semicolons and fix travis builds. to fix standard style!fix travis ci builds!,neutral
tapjs/node-tap,standard,2016-01-08T11:10:26Z,"feature request - allow extra assertions to be added at require time. it would be great if there was a standard way to add extra assertion libraries to the tap instance at import time. this would allow for more sharing and reuse of assertions.for example:``` javascriptvar tap = require('tap')('tap-assert-more'. 'tap-assert-set'. 'tap-assert-readline');```the hope would be to enable developers adding new assertion libraries to be able to build their assertions using the pre-existing. well tested. battle hardened assertions. this should also help with being able to create libraries like ""test-npmready' or the like.",positive
tapjs/node-tap,mocha,2017-06-18T14:08:40Z,fixed in tap-mocha-reporter,neutral
jquense/yup,eslint,2017-09-21T13:13:15Z,the current config catches bugs and leaves style mostly unspecified. i hear you folks however these projects are places i enjoy having fewer constraints and room for whatever code style i feel like. where i never have to write an eslint pragma.  i am equally nonchalant about contributions so if you want to write something more strict go for it. i don't however think it makes that much of a difference in contributions. folks don't contribute here because it's small and mostly used by me :p,negative
jquense/yup,eslint,2017-09-21T18:37:47Z,no i don't think y'all should have to fork. but the code style of these projects shouldn't matter to that. we aren't talking avoiding bugs we're picking brace and semicolon preferences. i'm glad y'all use the libraries and i'm more than happy to take feedback and make sure we are providing stable releases. to that end tho i generally find airbnb style guide unhelpful. pedantic and constricting.  it to be rude but i don't think my wanting to maintain the eslint config i prefer amounts to being contributor hostile.,negative
jquense/yup,eslint,2017-09-21T19:18:39Z,jquense it is not limited to just eslint.  i perceive your repos as a bit anti-contributor due to what you referred to as a _nonchalant_ attitude.  so perhaps the number of contributors is a bit chicken and egg problem?  you may not have a wealth of contributions. because perhaps you aren't fostering them by sending the signals that most look for in a project.  for example. prs going months or over a year. without being merged and without providing any feedback is a real indicator to me. and i assume most. about willingness to accept contributions (see react-formal).if you are giving indications that prs won't get merged. why would someone put forth the effort to create a new pr? i have this thought exactly. and i have significant code around react-formal that i haven't bothered to pr because you never reviewed my first simple pr.in any case. _this is all your prerogative_ and i accept that. and again. thank you very much for putting your great work out here.i would like to see yup and react-formal take a more serious direction. and i'd like to see contributions grow.  i support doing so here. or in a fork. but of course i would support the effort here if you were to decide that nonchalance is perhaps something that you would be willing to put behind you.ctavan feel free to ping me if you would like to discuss further. my email is in my profile.,negative
slevithan/xregexp,eslint,2017-04-25T21:39:10Z,thanks for all the details!if xregexp adopted the standard eslint rules/styles. would the giant `.eslintrc.js` still be needed?> after that. i added the lint script to package.json. and manually> changed the space-before-function-paren to: [...]note that i'm totally fine with changing this style. would just want to see it changed across the board for consistency.,neutral
benbria/coffee-coverage,coveralls,2015-05-05T04:33:32Z,fix weird return/if corner case.. testing out a pr with coveralls.  :),neutral
benbria/coffee-coverage,coveralls,2015-05-19T17:27:01Z,i had to delete the coveralls.io history - seems like coveralls sorts by build number by default. so the travis ci build (#4) was buried at the bottom of all the codeship results.  :p,negative
benbria/coffee-coverage,istanbul,2015-05-07T22:45:43Z,i have hacked up a solution that will replace all !pragma / istanbul ignore single line comments with herecomments. i am still trying to find a way to actually test this automatically.,neutral
balderdashy/sails,mocha,2013-07-12T02:26:08Z,oh it looks like the test runner doesn't fail when there's an error. would you be opposed to consolidating the tests into a single mocha run?,negative
skulpt/skulpt,jshint,2014-08-05T19:55:36Z,jshint now runs cleanly and can be added to the build process,neutral
skulpt/skulpt,jshint,2014-08-05T19:57:30Z,bnmnetp some small last work. and i think most of the work is done on the formatting done.,neutral
skulpt/skulpt,jshint,2014-08-05T20:03:05Z,like this! i love travis (not the bike shop owner)!,positive
skulpt/skulpt,jshint,2014-08-05T20:03:55Z,great!  i didn't know some of the tricks for ignoring individual lines. or short blocks of lines.i would like to get this merged this week if there are no objections.  we already have the one pr that needs some work that will have to be re-integrated.brad,positive
skulpt/skulpt,jshint,2014-08-06T16:27:51Z,ok. rixner and eah13  if i don't hear from you in the next 24 hours. i'm going to go ahead and merge this tomorrow.,neutral
skulpt/skulpt,jshint,2014-08-07T11:45:01Z,after the fact: merge sounds like a good idea to me!  only thing would be helping open pull requests understand if they'll need to pull from master and resolve any conflicts.  one thing i'll admit: not being a js guy i'm not 100% clear on the linting process. maybe something to document well for new contributors.edit: clarification on request for docs.  obviously the automagical reformatting doesn't need to be documented.  but there are likely some quirks or best practices developers should know.,negative
skulpt/skulpt,jshint,2014-08-07T13:14:42Z,albertjan could you summarize the main style/coding conventions in the contributing.md doc?,neutral
skulpt/skulpt,jshint,2014-08-07T14:01:07Z,i'm sorry i never contributed to this.  things have been utterly chaotic for me this summer and i am about to leave on vacation.  i am always wary of large numbers of changes and worried that bugs are going to be inadvertently introduced.  but i think this is important and i don't think waiting is going to somehow improve the situation.  so. i say go for it and we move the project forward from here.perhaps there should also be documentation in contributing.md on how to perform the linting process. not just what the style guidelines are?,negative
stylus/stylus,mocha,2014-04-24T04:08:10Z,move test runner out of make. - make does not come on windows (by default)- we were doing nothing special with the make file for the tests- putting the mocha command inside of npm test is super portable- attaching tools like node-debug while running the tests is now as simple as `node-debug npm test`---tldr: make is not the best tool for node projects.,positive
stylus/stylus,mocha,2014-04-24T04:15:45Z,tests pass :shipit:,neutral
stylus/stylus,mocha,2014-04-24T14:23:35Z,all updated panya thanks for pointing out that issue.(on a sidenote)  `jscoverage` is actually not represented in the dependency tree at all.,positive
stylus/stylus,mocha,2014-04-24T16:44:47Z,"hey panya  ok let us try this again. i think i have never seen jscoverage ""working"" so it is a bit hard for me to know what is correct.",positive
stylus/stylus,mocha,2014-04-24T17:09:13Z,kk .. thanks again for working with me on this panya,positive
stylus/stylus,mocha,2014-04-24T17:30:55Z,samccone np. and one last fix :) move `stylus_cov=1` on the one line with `npm run-script test-cov` (e.g. `stylus_cov=1 npm run-script test-cov`),positive
stylus/stylus,mocha,2014-04-24T17:36:14Z,:+1:,neutral
stylus/stylus,mocha,2014-04-24T17:43:23Z,thanks!,positive
stylus/stylus,mocha,2014-04-24T17:47:06Z,:dancers: :dancer:,neutral
featurist/browser-monkey,mocha,2016-07-20T07:27:18Z,yeah i mostly just used mocha when testing the vdom stuff :-)never even crossed my mind to add it to npm test though!what is up with these failures? c++ for travis??,negative
featurist/browser-monkey,mocha,2016-07-20T07:52:30Z,hmm weird. when i try this branch locally none of the fuzzy finder tests work in chrome or mocha. ah well the vdom ones don't work in chrome anyway,negative
wix/tspoon,karma,2016-12-25T09:14:04Z,update karma.conf.js,neutral
visionmedia/debug,coveralls,2016-12-14T19:48:18Z,yamikuronue if you wanna submit a pr to add coveralls integration and coverage reporting with our existing mocha tooling. it would be much appreciated :),positive
visionmedia/debug,coveralls,2016-12-19T12:29:13Z,combining the tests turned out to be easier than i expected :) i've added coverage to the server-side tests. and set up coveralls. so now the only problem is that there's no real tests. and my first attempt to add a real test is going awry.thebigredgeek do you want to help me figure out what's wrong with this test. or do you want to merge first so we don't drift too far apart?,negative
finn-no/maven-deploy,coveralls,2015-02-12T21:41:38Z,add coverage and send to coveralls.io,neutral
KartikTalwar/gmail.js,eslint,2016-12-28T12:08:38Z,in that case the xhr hook will be your best bet. try to use something to validate your js like jshint. eslint or even typescript. that will highlight a lot of these possible error conditions before you ever run the code.,positive
meanjs/mean,eslint,2017-10-15T23:45:40Z,i believe that you have to run npm install --save babel-eslintyou might even need to go into the root directory and create the .babelrc file by typing 'touch .babelrc'hope that helps,positive
meanjs/mean,coveralls,2016-10-01T06:38:28Z,updated per comments. hoping coveralls doesn't drop.,positive
meanjs/mean,coveralls,2016-10-07T19:56:38Z,i disabled the comments.i think coveralls allows only project admins to configure these settings. i didn't drill in but this is what it looks like.,negative
KeitIG/museeks,eslint,2016-07-19T22:40:37Z,setup ci. # ftm. only basic tests:- eslint- webpack build is a big plus- electron-packager is a pluspoke yurysolovyov. you're ok to pick it up ?,neutral
KeitIG/museeks,eslint,2016-07-20T09:38:25Z,done !,neutral
KeitIG/museeks,eslint,2016-07-20T10:30:05Z,decided to wait until codeship ci will support forked repos and proceeded with travis for now,neutral
remy/nodemon,mocha,2013-05-21T08:47:27Z,run nodemon and mocha -w at the same time. i like to run both mocha -w and nodemon at the same time; when i run nodemon before mocha -w; it works ok.if i run mocha -w before nodemon; nodemon throws an address in use error...,negative
mozilla/nunjucks,jshint,2015-04-29T04:38:15Z,correct jshint issues. small fixes for jshint. so that tests run :),neutral
mozilla/nunjucks,jshint,2015-04-29T06:18:42Z,thx,neutral
mapbox/node-sqlite3,mocha,2013-07-19T06:10:05Z,i've decided to??keep this pull??request closed.the tests part needed rewriting from??the??scratch even??since the??mocha??testing landed.the instructions part would better be separated to??its??own pull??request.,neutral
makeusabrew/bootbox,karma,2013-07-02T20:29:54Z,migrate test runner to karma (and possibly jasmine). as title really; running the in browser tests manually is a pain. half tempted to switch to jasmine too but main priority is karma. docs will need updating. as will ci.,negative
makeusabrew/bootbox,karma,2013-07-09T17:59:24Z,done - not made the switch to jasmine yet as switching to mocha was so straightforward there seemed little point rocking the boat just yet.,neutral
koding/kd,karma,2014-09-20T08:40:25Z,fix test. fix the dependencies.gulp-karma requires karma-mocha and the browser runners. i guess what basically `gulp-karma` is that it's just an interface for gulp to karma. it still requires you to add the dependencies.changed the `npm test` script to run a gulp task which i introduced in this pr as well. basically we now have another karma config file for just running tests in travis. and there is a special task for that in gulp as well.,positive
koding/kd,karma,2014-10-13T00:07:45Z,usirin coverage data returns empty because we are developing and testing as .coffee files. and it's not compatible with the coverage tool.do we have source and test files converted to js? if so adding a few lines to karma.conf.js will fix the issue.,neutral
koding/kd,karma,2014-10-13T00:22:14Z,if we want a working coverage tool we need to have compiled test and source files and pass those files to coverage tool via karma.conf.js. we may consider creating those files under a build folder and ignore that build folder. what do you think sinan?,neutral
likeastore/ngDialog,selenium,2015-09-18T08:30:39Z,could you modify the protractor.conf.js file to point to a local selenium instance for your local dev?,neutral
likeastore/ngDialog,sauce,2015-09-22T03:22:53Z,i updated master to use sauce-labs. so your os gets some representation in travis.,neutral
likeastore/ngDialog,sauce,2015-09-22T07:50:52Z,thanks! hopefully i don't have to annoy you any further. i'm pretty embarrassed to say that i actually got the protractor tests going in travis. with a free sauce labs account. this means our tests will be run in ... all the browsers including ie.really very sorry to have made you go through ally hat trouble with circle ci :(,negative
likeastore/ngDialog,sauce,2015-09-22T20:30:21Z,travis isn't running the sauce labs setup for some reason.,neutral
likeastore/ngDialog,sauce,2015-09-22T20:35:19Z,feel free to revoke circleci's hooks.btw saucelabs ++. it's a really great service.  over time i hope to add mobile browsers to our shiny new e2e test suite.,positive
likeastore/ngDialog,sauce,2015-09-22T20:37:50Z,sigh. i've created a new saucelabs account just for ngdialog. and pasted in the auth key plain text. please do one (hopefully) final merge. and we'll be done.many. many thanks for your patience and for sticking with me during this frustrating time!,positive
likeastore/ngDialog,sauce,2015-09-22T21:35:17Z,get out the knives.please try again? put in a manual sauce connect,neutral
likeastore/ngDialog,sauce,2015-10-05T20:58:28Z,protractor tests broken. appears that protractor can't connect to sauce labs for some reason. investigating,negative
likeastore/ngDialog,sauce,2015-10-05T21:07:36Z,faceleg yeah i was going to report that issue. thank you for noticing.,positive
likeastore/ngDialog,sauce,2015-10-05T23:38:28Z,i merged it and will monitor the build,neutral
likeastore/ngDialog,sauce,2015-10-06T00:10:32Z,can't get sauce working. out of time. set all builds to use firefox only for now.,neutral
flowdock/flowdock-text,karma,2014-03-24T17:44:55Z,ah seems karma uses `karma-cli` in the same way as grunt uses `grunt-cli`,neutral
videojs/videojs-contrib-hls,standard,2016-03-05T15:01:41Z,we cache of the length of the video so we avoid triggering some video processing more than strictly necessary. the duration may be updated when downloading and buffering a segment reveals that it actually is longer (our shorter) than advertised in the m3u8 file. the times in the m3u8 are often incorrect by seconds or more. the allowcache directive actually applies to the video segment files. and we let the browser's standard caching logic take care of that.,neutral
videojs/videojs-contrib-hls,sauce,2014-04-25T22:56:49Z,run tests on saucelabs. had to fixup the files that were being loaded as well as regenerate the encrypted values for the saucelabs integration. it's working now.,neutral
videojs/videojs-contrib-hls,sauce,2014-04-28T19:25:41Z,saucelabs more browsers. make saucelabs run the tests on latest chrome and latest mobile safari.,neutral
videojs/videojs-contrib-hls,sauce,2014-04-30T20:29:39Z,works great! :elephant:,positive
videojs/videojs-contrib-hls,sauce,2014-05-01T19:36:01Z,the build is failing because travis isn't exporting the saucelabs credentials for some reason.,negative
videojs/videojs-contrib-hls,karma,2014-03-14T15:26:54Z,new pr with travis fix,neutral
videojs/videojs-contrib-hls,karma,2014-03-14T15:40:51Z,building in travis using saucelabs browsers. -can run both local and saucelab browsers-grunt karma:dev or ie. grunt karma:chrome for local-grunt karma:saucelabs for saucelabs browsers-both builds pass in travis,neutral
videojs/videojs-contrib-hls,karma,2014-03-28T18:35:24Z,how do you choose whether to run on local browsers vs saucelabs?is it just `grunt karma:chrome karma:firefox` etc?,neutral
videojs/videojs-contrib-hls,karma,2014-03-28T18:43:06Z,also. is there a way to chain the browsers you want to run. a la:grunt karma:chrome.firefox.safari?,neutral
videojs/videojs-contrib-hls,karma,2014-03-28T18:44:07Z,bcjwhisenant no. there isn't. however. we can and should copy jquery's build system that does exactly that. or rather. their custom task that does this.,neutral
videojs/videojs-contrib-hls,karma,2014-03-28T18:56:40Z,i assume this is superceded by #30?,neutral
videojs/videojs-contrib-hls,karma,2014-03-28T19:02:19Z,heff  it uses the old one for now. i believe jackie is in the works of getting an enterprise account set up. i also tried to encrypt everything so i believe there's no exposure,neutral
videojs/videojs-contrib-hls,karma,2014-03-28T19:05:14Z,gkatsev  it's set up. for now. to be grunt karma:chrome for local. if you wanted more you would do grunt karma:chroma karma:firefox. you could also use grunt karma:dev which runs all local browsers. for saucelabs. it's grunt karma:saucelabs,neutral
videojs/videojs-contrib-hls,karma,2014-03-28T19:05:27Z,gkatsev. ok cool. lets make sure we do that.paruls. great. sounds good.,positive
videojs/videojs-contrib-hls,selenium,2015-06-30T14:49:42Z,fix grunt-protractor-runner dependency. i've added an option to grunt-protractor-runner to install the selenium drivers during the protractor task instead of always installing with grunt-protractor-runner. i added this option for situations where a user would not want to install the drivers in the ci environment.,neutral
videojs/videojs-contrib-hls,selenium,2015-06-30T14:54:59Z,:+1:,neutral
videojs/videojs-contrib-hls,selenium,2015-06-30T15:34:01Z,lgtm,neutral
mheap/trello-cli,eslint,2017-04-15T21:30:34Z,added eslint formatting. i also ran `eslint --fix lib src bin` to auto fix the existing formatting,neutral
melonproject/protocol,jasmine,2017-10-27T23:09:16Z,add multisig. ### added- multisig functionality to governance.sol- rmmakeorders simple price deviation check- script for initialising and funding predefined accounts for tests- parity genesis config file for dev chain### changed- deploy scripts from web3 to parity.js- jasmine tests from web3 to parity.js- readme instructions to reflect latest deploy and testing steps### deprecated- web3 dependance in deploy scripts and jasmine tests### fixed- governance test bug,neutral
melonproject/protocol,jasmine,2017-10-29T00:37:29Z,looks goodneeds setting file for parity node and ideally some updated instruction to readme.md on how to start test env w new parity dev node,neutral
melonproject/protocol,jasmine,2017-10-30T02:22:59Z,nice,positive
melonproject/protocol,jasmine,2017-11-06T08:02:06Z,readded gas price checks to tests. ### added- doxity docs- added fallback function to governance.sol- added requirement for signature in setupfund- added solidity tests for version contract### changed- improved natspecs comments- parity devchain genesis file### fixed- gas price checks in jasmine tests- bugs in jasmine tests,neutral
melonproject/protocol,jasmine,2017-11-06T17:41:02Z,looks good - just this above return statements - to have it visualised in doxity docs,neutral
pouchdb/express-pouchdb,mocha,2014-12-15T10:24:44Z,(#148) - increase mocha timeout for travis. #144 timed out 2 times on the new test-express-pouchdb test now; this should help.,neutral
uxsolutions/bootstrap-datepicker,jshint,2013-12-09T16:25:49Z,fix ch global leak. maybe you should use jshint or smtg to detect globals easily.,neutral
ModuleLoader/es-module-loader,mocha,2015-01-20T19:55:52Z,this has been replaced with #274 i take it.,neutral
ModuleLoader/es-module-loader,mocha,2015-01-23T16:45:07Z,test: allow longer async tests. some tests fail because of the mocha 2sec timeout...,negative
ModuleLoader/es-module-loader,mocha,2015-01-26T11:03:56Z,massive thanks to douglasduteil.,positive
ModuleLoader/es-module-loader,sauce,2015-01-26T10:30:58Z,"> so we can switch this back then?what ""this"" ? the saucelabs test ?",neutral
ModuleLoader/es-module-loader,karma,2015-01-23T15:03:54Z,on windows :- install the `karma-ie-launcher` and change the default browsers in the karma.conf.js to `browsers: ['ie']`then just run `npm test:browsers` or `karma start`,neutral
ModuleLoader/es-module-loader,karma,2015-01-25T03:06:20Z,test: add karma coverage info,neutral
ModuleLoader/es-module-loader,karma,2015-01-26T09:25:44Z,thanks! can you rebase this for merge?,positive
ModuleLoader/es-module-loader,karma,2015-01-26T09:41:27Z,done :),neutral
cerebral/cerebral,mocha,2016-11-13T20:54:57Z,feat(controller): throw async errors in function-tree. there is no test for this. because it is actually impossible to write one. this fix handles async errors thrown in function tree. since `assert.throws` does not work. as the error is async. mocha just says some error was thrown and halts.but this has been tested manually.,negative
cerebral/cerebral,eslint,2017-05-25T11:41:48Z,ok. i cleaned up commits and moved demos. everything works fine now. including build and run of demos.to summarise. this pr does the following:- [x] move packages to `packages/node_modules`- [x] link binaries from root node_modules to individual packages (to allow running npm commands from inside packages) using custom script (link-parent-bin was too complicated and got confused)- [x] fix build issues with node-sass. react-scripts. standard and eslint (all these did not support properly looking for `node_modules` and had to be upgraded or patched)- [x] add cross-env for demos,positive
mapbox/dyno,coveralls,2015-06-03T18:06:06Z,coverage. adds coverage and coveralls.,neutral
rooseveltframework/roosevelt,standard,2017-10-27T19:33:18Z,make roosevelt standard compliant. also in this pr `utils.js` has been replaced with individual module files for each utility method.,neutral
rooseveltframework/roosevelt,mocha,2018-01-19T21:11:26Z,add generatetestapp utility for dynamic test app.js creation. plus some other tweaks:- increase mocha timeout to 5000 accommodate for windows issues.- remove rimraf in favor of fs-extra's rimraf functionality. (doh!),neutral
rooseveltframework/roosevelt,coveralls,2018-02-09T20:41:23Z,parameter functions unit test (quest to 100% with maproutes. coveralls: 100%),neutral
twbs/bootstrap,sauce,2013-12-22T07:06:54Z,clean up `_gh-pages` contents. at the moment we have```aboutcomponentscsscustomizedistdocs-assetsdocs-licenseexamplesfontsgetting-startedindex.htmljavascriptjssauce_browsers.ymltest-infra```are the following needed?```fontsjssauce_browsers.ymltest-infra```,neutral
twbs/bootstrap,sauce,2013-12-22T08:01:40Z,afaict. nope.,neutral
twbs/bootstrap,sauce,2013-12-22T09:48:05Z,a workaround will be to prefix those folders with an underscore but i'm not sure it makes sense or even if it looks good...,neutral
twbs/bootstrap,sauce,2013-12-30T04:26:19Z,mv sauce_browsers.yml out of the project root. helps clean up the project root more.,neutral
twbs/bootstrap,sauce,2013-12-30T04:36:08Z,<3 /cc fat,negative
swagger-api/swagger-js,selenium,2015-06-03T08:28:11Z,creating unit tests in browser. we've been using a selenium driver to test code in the browser. but this comes at the cost of complexity and unreliability.use a test runner and mocha to put tests in the browser and pull out the results. this is for unit testing only. as we cannot manipulate the browser itself. only the code therein. this is a library. so no end-to-end testing is actually needed as no user input actually takes place. hence the move towards unit testing.,negative
swagger-api/swagger-js,selenium,2015-06-03T14:16:08Z,ponelat thanks. i should have done this to begin with. i set up selenium because that's what swagger-ui was using. but you are correct. that is better for e2e testing.,neutral
swagger-api/swagger-js,selenium,2015-06-03T14:20:19Z,mrhanlon we really appreciate the efforts that drove us here. i managed to port over the test your wrote. just let me know if i'm hitting the right spots :d,positive
keystonejs/keystone,sauce,2016-02-14T13:21:19Z,morenoh149 ah crap i i didn't realize travis merge pr with master for its builds and so i was missing the commit from erg0dic to arrayfield.js. will update my branch to latest and try again :-),negative
keystonejs/keystone,sauce,2016-02-14T14:49:34Z,add support for saucelabs in travis e2e. add support for sauce labs as the prefer method to do nightwatch e2e ui/functional testing in the travis ci environment.,positive
keystonejs/keystone,sauce,2016-02-15T12:06:46Z,nice work webteckie :d,positive
keystonejs/keystone,sauce,2016-02-15T17:22:09Z,jedwatson do the tests run on your machine? i can't get them to run on osx with firefox.,neutral
keystonejs/keystone,sauce,2016-02-15T17:41:55Z,morenoh149 what are you getting?  how are you running them?  note:  travis failed the master build with some issues around the new validateinput.js module.  not sure that's about...perhaps babel related?,neutral
keystonejs/keystone,sauce,2016-02-15T22:44:21Z,increase e2e test timeouts. the latency between travis and saucelabs may need it.,neutral
keystonejs/keystone,mocha,2014-05-19T02:23:00Z,thanks moll. those settings helped. travisci is now set up correctly!,positive
Azure/azure-xplat-cli,jshint,2013-05-16T18:45:54Z,amitapl : there's jshint errors in here. i suspect merging related ones. could you fix ?,negative
Azure/azure-xplat-cli,jshint,2013-05-21T18:11:21Z,get jshint and test results out in form that jenkins can build reports on. issue #349,neutral
Azure/azure-xplat-cli,jshint,2013-05-21T19:01:53Z,paul.please run the test suite (npm test) and fix the jshint errors as well.,positive
Azure/azure-xplat-cli,jshint,2013-05-21T19:56:34Z,lgtm ! awesome that we got this!,positive
webcomponents/webcomponentsjs,sauce,2015-10-23T21:39:02Z,let's have some testing!. - converted all tests to work with web-component-tester- set up travis ci testing copying config from polymertested browsers:- chrome and firefox latest on travis vm image- ie 10.11. ms edge. safari 7. 8. 9 on saucelabscaveats:- sauce tests do not run for 3rd-party prs due,neutral
webcomponents/webcomponentsjs,sauce,2015-10-23T21:39:28Z,jmesserly sorvell kevinpschaaf ptal!,neutral
webcomponents/webcomponentsjs,sauce,2015-10-23T21:41:28Z,_important note_: some tests are actually failing. we should probably fix those.,neutral
webcomponents/webcomponentsjs,sauce,2015-10-23T21:58:56Z,i'm just going to merge this. go testing!,neutral
lbdremy/solr-node-client,mocha,2014-08-16T18:58:31Z,the coverage is around 80% using mocha and chai. individual issues for missing tests are in the tracker. so closing this.,neutral
phovea/phovea_core,sauce,2016-10-14T15:21:29Z,mccalluc/use saucelabs. tests pass on saucelabs! sgratzl : are there blocking issues here before we can merge?i'll continue to add tests incrementally. but i would really like to get this back into master.,positive
phovea/phovea_core,sauce,2016-10-14T15:24:31Z,closing this pr in favor of #6. which gets tests passing on saucelabs.,neutral
phovea/phovea_core,sauce,2016-10-18T13:44:31Z,(on the last commit. one passed. and the other failed because we ran out of saucelab tunnels. perhaps just do one build on each commit? not sure what is best.),negative
phovea/phovea_core,sauce,2016-10-20T08:39:50Z,mccalluc you are right. you cannot know which function is used and which not. i would go for the naive approach and clone all repos we have and then perform a global search (i.e. over all projects) with your text editor for each public/exported function. maybe you have an idea if and how to automate these steps. in my opinion. if the function isn't used anywhere. you can leave a comment and mark it as private (or remove the export). other than that you don't have to care much about other plugins. and of course you don't have to test private functions. ;-) otherwise we will never finish this topic and move on.,neutral
brigand/babel-plugin-flow-react-proptypes,eslint,2016-09-29T14:28:49Z,looks like you're right! with an update to babel and eslint this eslint checks no problem.,positive
brigand/babel-plugin-flow-react-proptypes,eslint,2016-09-29T19:48:36Z,"eslint react/prop-types: 'property' ""is missing in props validation"". any solution for getting this plugin to play nicely with the `react/prop-types` eslint rule? this rule warns you when you use a prop that you have not defined in your `proptypes`. for now i'm just going to silence it. but it would be awesome if we could get a companion eslint rule  that works with this plugin.",positive
brigand/babel-plugin-flow-react-proptypes,eslint,2016-09-30T04:11:40Z,that'd be a whole other project. but convertproptypes.js might be useful to it. if you decide to take it on. i'll link to it in the readme.,neutral
brigand/babel-plugin-flow-react-proptypes,eslint,2016-09-30T07:30:48Z,for me that's working fine. even without this library. maybe you should update eslint or the react plugin.,positive
brigand/babel-plugin-flow-react-proptypes,eslint,2016-09-30T15:26:17Z,jeltef it's that it's not working with this library. that is. it was working when i was defining my props using proptypes directly. if you have a solution. please share. :),positive
ljharb/qs,eslint,2016-02-04T04:21:58Z,i'm fine just bumping all those limits in `.eslintrc`. i'll worry about tightening them down later.,positive
brightcove/videojs-errors,standard,2016-01-07T22:37:42Z,looks like vjs-standard isn't happy,positive
brightcove/videojs-errors,standard,2016-01-08T14:32:11Z,forbesjo gonna make the suggested changes. didn't realize vjsstandard doesn't run on build (though it does on test). thoughts on adding that too? maybe have the generator do that too? cc misteroneill,neutral
brightcove/videojs-errors,karma,2016-01-04T23:14:17Z,wait a period before throwing no source error. this pr sets a timeout of 500ms after the 'play' event is fired for player configurations that have autoplay but the currentsrc() has not been set yet.this also uses fillwith() instead of setting innerhtml directly to set the modal content and karma as the test runner instead of grunt-qunit.,neutral
brightcove/videojs-errors,karma,2016-01-05T02:24:18Z,use fillwith() for content and karma for tests. this pr:- uses fillwith() instead of setting innerhtml directly to set the modal content - close() instead of hide()- removes a duplicate merging of user plugin options with default options- karma as the test runner instead of grunt-qunit,neutral
brightcove/videojs-errors,karma,2016-01-06T19:20:57Z,lgtm. nice to see the proper use of the `modaldialog` methods instead of what existed previously. :+1:,neutral
brightcove/videojs-errors,karma,2016-01-07T01:09:28Z,i'll close this since these changes are part of greg's refactoring branch.,neutral
brightcove/videojs-errors,karma,2016-01-07T02:15:34Z,ok. sounds good.,positive
workshopper/how-to-npm,standard,2017-01-21T20:02:05Z,add a gitter badge and a js-standard badge. add a gitter chat badge and a js standard badge!,neutral
ctavan/express-validator,mocha,2015-04-29T15:26:44Z,move unit tests to mocha. - move tests to use mocha/chai- make tests more cross-platform compatible  - remove makefile  - change `npm test` to use mocha (recursive),neutral
ctavan/express-validator,jshint,2015-06-15T19:57:13Z,add jshint and jscs to travis process. we already have a `.jshintrc`. but no way to programmatically check this file. let's add this script to the travis ci process. also need to add `.jscsrc` and it's corresponding command to travis.,neutral
ctavan/express-validator,jshint,2015-06-25T19:12:54Z,add jscsrc. add jscs/jshint to travis build. and fix errors thrown by jshint/jscs.. fixes #142,neutral
rwjblue/ember-template-lint,eslint,2017-11-08T14:18:12Z,enable `eslint-plugin-node` recommended config.. this ensures that:* we only use features compatible with our `package.json`'s engine config.* we do not require a package that is not a dependency* we do not require a file that is excluded from npm publishingfix issues identified by `plugin:node/recommended`:* add `'use strict'` where required* move `glob` to a depfixes #309,negative
rwjblue/ember-template-lint,eslint,2017-11-15T01:26:29Z,see eslint section i think in the readme?,neutral
ItzBlitz98/torrentflix,jshint,2015-12-21T22:45:24Z,add travis file. travis file is here and for now. just verify jshint.,neutral
composite-scopes/composite-scopes-all,karma,2016-07-28T12:10:46Z,completely revamped workflow using webpack. karma. and babel6 in 4e6ffad.,neutral
websockets/ws,coveralls,2016-12-20T14:38:41Z,i hate that coveralls reports that coverage decreased only because there are fewer lines of code .,negative
excaliburjs/Excalibur,jasmine,2013-10-26T22:00:25Z,pull in jasmine fixes and gitignore,neutral
excaliburjs/Excalibur,coveralls,2015-06-26T23:16:22Z,add coveralls/code coverage support. for issue #169 to set up code coverage. also addresses jasmine `util.print` warning.,neutral
excaliburjs/Excalibur,coveralls,2015-06-26T23:31:12Z,it works!,neutral
onefinestay/react-daterange-picker,karma,2015-10-23T11:16:04Z,done.i will create separate mrs for:- memory leaks linked with usedocumentrenderer (i now believe it is an issue based on another of my projects. killing karma if cleanup is not done )- webpack/karma file cleanup- testing around the bem class names,neutral
Hargne/jest-html-reporter,eslint,2018-02-15T21:00:02Z,good to know that. i forked another fork of your project and found out after i made those changes. so my code was a little messed-up. i will try to fix the issues of eslint.,positive
yeoman/generator-karma,karma,2013-03-19T20:22:50Z,thanks! as long as we're doing this. sindresorhus can we change the name of this repo and register it as `generator-karma` on github?,positive
yeoman/generator-karma,karma,2013-03-19T20:55:34Z,i've already updated gruntacular to grunt-karma. just waiting on the permissions to push to the official repo. should be out there later today.,neutral
haraka/Haraka,eslint,2017-01-25T19:02:04Z,remove the last vestigas of jshint. (long since replaced by eslint),neutral
haraka/Haraka,eslint,2017-01-27T20:07:59Z,"lint: require space before function declaration. * require space before function declaration    * ie. this is a declaration: `function ()` and this is an invocation: `function()`.    * we've mostly been doing this anyway. i saw baudehlo point it out in a code review. so lets make it automatic* inherit eslint config from haraka-eslint (aka: eslint-plugin-haraka)* add a ""lintfix"" script. so we can `npm run lintfix` to autocorrect lint issues* import configfile.get_path_to_config_dir from haraka-config. it extends the dirs where cfreader.config_path might point to. used by npm packaged plugins.* applies the lint rule to a bunch of files* remove some dangling commas",neutral
haraka/Haraka,eslint,2017-02-03T20:17:34Z,more lint. no matt. startglob (**) doesn't work on the command line (usually). and so using one in package.json as an npm script will not work. changes proposed in this pull request:- eslint autofix: whitespace & comma rules- fixes: variable scoping & declaration issues- remove daemonize module (no active code. throws)checklist:- [x] docs updated- [x] tests updated,neutral
haraka/Haraka,codecov,2015-11-22T08:30:07Z,switch to codecov.io for coverage reporting. this fixes the broken coverage reporting.,neutral
haraka/Haraka,coveralls,2014-10-28T20:01:30Z,get coveralls updating. maybe,neutral
haraka/Haraka,coveralls,2014-10-28T20:19:54Z,ahah. it works!,neutral
u-wave/web,uglify,2017-06-23T11:39:05Z,hmm i think we need to remove this dep and upgrade uglifyjs-webpack-plugin instead.,neutral
u-wave/web,uglify,2017-06-23T17:27:14Z,deps: upgrade uglifyjs-webpack-plugin. closes #677,neutral
stealjs/steal-css,eslint,2017-04-12T16:18:22Z,set up eslint. based on #37,neutral
stealjs/steal-css,sauce,2017-04-12T16:26:18Z,m-mujica can you also create the test-saucelabs project as part of this overall issue? and then use it in steal-css?,neutral
stealjs/steal-css,sauce,2017-04-12T21:15:58Z,use test-saucelabs package,neutral
stealjs/steal-css,sauce,2017-04-12T23:07:22Z,:lgtm:,neutral
jquery/jquery-migrate,coveralls,2016-02-14T21:51:15Z,bunch of infra changes. use of coveralls. commitplease. jscs. add .editorconfig and all that stuff.sorry. i bulked it all in one pr. it would be hard to divide them. so i propose to review this per commit. if that's okay,negative
jquery/jquery-migrate,coveralls,2016-02-14T21:51:16Z,by analyzing the blame information on this pull request. we identified dmethvin. gibson042 and jzaefferer to be potential reviewers,neutral
jquery/jquery-migrate,coveralls,2016-02-15T05:02:03Z,awesome! :clap:,positive
jquery/jquery-migrate,coveralls,2016-02-15T15:48:45Z,nice! thanks for doing all this.,positive
jquery/jquery-migrate,coveralls,2016-02-26T15:03:06Z,although it seems as overdoing it. since coveralls would fail the pull anyway.,negative
jquery/jquery-migrate,coveralls,2016-02-27T22:50:06Z,build: enable coveralls repro & allow testing \w building. make you define two module list though :/,neutral
jquery/jquery-migrate,coveralls,2016-02-27T22:50:06Z,by analyzing the blame information on this pull request. we identified dmethvin. mgol and gnarf to be potential reviewers,neutral
jquery/jquery-migrate,coveralls,2016-02-29T13:47:54Z,i like it! too bad we need another module list though.,positive
jquery/jquery-migrate,coveralls,2016-02-29T16:40:33Z,yeah i always forget to change it in every place whenever i'm adding a module. :smiley_cat:,neutral
jquery/jquery-migrate,coveralls,2016-02-29T16:49:43Z,if only we had a cross-environment module system...,neutral
bitpay/bitcore,mocha,2014-04-16T15:22:07Z,martindale did you forget to `git add util/index.js`? tests are broken (you can run them using `mocha`). also. this will need a rebase,negative
bitpay/bitcore,karma,2015-01-05T17:53:33Z,okay. updated to use `karma-detect-browsers` and will launch additional browsers if available. chrome and firefox working locally.,neutral
bitpay/bitcore,karma,2015-01-05T22:01:29Z,results from attempting to add automated browser tests:- browserling/testling hooks were timing out- browserstack credentials need to be encrypted and thus will only run on travis ci for pull requests coming from the same repository. when this was attempted ie connections via karma-browserstack-launcher would disconnect in the middle of the test.- running karma-ie-launcher and karma-safari-launcher locally was also experiencing the same disconnection problems. and some odd behavior with running tests multiple times in safari.for the time being. i think think the best option is to periodically run these tests in safari and ie by opening `test/index.html` and solving the issues that might appear.,neutral
bitpay/bitcore,karma,2015-01-13T23:31:54Z,move karma.conf.js to another module,neutral
bitpay/bitcore,karma,2015-01-15T19:09:04Z,rename gulp-bitcore to bitcore-build. - [x] rename `gulp-bitcore' repto to`bitcore-build`- [x] incluide `karma.conf.js`- [x] apply the changes on all modules.,neutral
bitpay/bitcore,karma,2015-01-15T19:09:28Z,cc: eordano,neutral
bitpay/bitcore,karma,2015-01-16T16:17:55Z,done,neutral
slackapi/hubot-slack,mocha,2014-03-17T03:13:15Z,"yep. definitely some failures around `userfromparams` which doesn't seem to exist anymore. i also have to use `mocha --compilers coffee:coffee-script/register` to run tests. otherwise it doesn't parse the coffeescript and blows up. i studied it a bit. and one option is `echo ""--compilers coffee:coffee-script/register"" > test/mocha.opts`. that at least allows us to run just `mocha` without having to add the flag.then again. i'm not a node-head and am used to the graces of rspec. so i could be missing something big here.i'll try and figure out the deal with `channelmapping`.",negative
slackapi/hubot-slack,coveralls,2016-05-12T20:17:37Z,adds coveralls integration to the repo,neutral
slackapi/hubot-slack,coveralls,2016-05-12T20:44:09Z,fixes our coveralls setup to work with coffeescript correctly,neutral
electrode-io/electrode,eslint,2017-02-14T01:40:24Z,generator-electrode-component: modify editorconfig for consistency with linting rules. **context:**the generator-electrode-component was enforcing tabbed indents over spaces. while the eslint configuration is set up to check for 2-space tabs.  the changes to the file make the editorconfig consistent with eslint rules and with the editorconfig found in the generator-electrode project.**solution:**- switched to 2 space indents- removed unnecessary json rules - added md rule,neutral
electrode-io/electrode,eslint,2017-02-16T00:08:12Z,jshado1 i'm not a fan of `build/` since a lot of projects use that to hold temporary artifacts. i think what jchip was saying (and what i agree with) is that `config/` stores *app* configuration. so it makes sense to live at the top (since the app is the entire webapp).maybe (since i think partials override is a bad thing):```app?????€??? archetype  ?????€??? eslint    ?????€??€ ...  ?????€??€ base.js  ?????€??€ webpack.config.js  ?????€??€ webpack.config.dev.js?????? config ?????€??€ default.js ?????€??€ development.js ?????€??€ production.js?????€??€ ?€??????€??€ package.json```edit: i think archetype is a sensible place to hold archetype config. is all.,negative
electrode-io/electrode,eslint,2017-02-16T00:13:01Z,i'm having a hard time seeing why `/archetype` wouldn't live under `/config`. something like?```app?????? config  ?????? archetype   ?????€ eslint       ?????€??€ ...   ?????€??€ base.js   ?????€??€ webpack.config.js   ?????€??€ webpack.config.dev.js  ?????? server   ?????€??€ default.js   ?????€??€ development.js   ?????€??€ production.js?????€??€ ?€??????€??€ package.json```,negative
electrode-io/electrode,eslint,2017-02-22T21:43:56Z,archetype-react-app-dev: add eslint check to js files,neutral
electrode-io/electrode,eslint,2017-02-22T22:25:47Z,single quotes question. i would like the ability to use single quotes with electrode generated code.  adding a question around if use wants to do this as well.  then running the fix command from eslint to switch the double quotes to single quotes.,neutral
electrode-io/electrode,eslint,2017-02-22T22:36:55Z,#104 add yaml and js for eslint in app archtype,neutral
electrode-io/electrode,eslint,2017-02-23T00:06:00Z,lgtm  /cc jchip,neutral
electrode-io/electrode,eslint,2017-02-23T01:48:04Z,i understand.  when i started at wml my muscle memory was single quote.i think the right approach is to make it easier to have your own eslint configs.of course the generator still generates code from templates that have double quotes.  i think for that i might use something like prettier to reformat the code after it's generated.,positive
electrode-io/electrode,eslint,2017-02-23T19:23:47Z,jchip yes to easier to extend the eslint config.  i know your team is looking into an `archtype` folder for webpack.configs and things.  is there a way to leverage that with eslint?,neutral
electrode-io/electrode,eslint,2017-02-23T21:28:18Z,archetype-react-app-dev: fix eslint glob to include all files,neutral
electrode-io/electrode,eslint,2017-02-25T19:42:09Z,cross311 i think the `archetype/` folder would allow you to override any part of the archetype. a plain `eslint` file wouldn't be good enough. though. as jchip said. the generated code would have to be `--fix`ed.,neutral
electrode-io/electrode,eslint,2017-02-27T16:05:47Z,jchip alright i have covered all the other eslint entry points in the gulpfile,neutral
electrode-io/electrode,eslint,2017-03-04T07:44:04Z,i can't figure out if the component has a feature to extend the existing eslint rules coming from wallmart.is there a way to do that?i want to change some errors to warnings and fix the indent for switch/case.,negative
qunitjs/qunit,eslint,2016-09-16T18:38:57Z,i'm sorry i didn't answer this before. let get this done and merged,negative
qunitjs/qunit,eslint,2016-09-16T18:52:14Z,thanks! sorry for pestering you when you were merging. i wasn't sure if you were still waiting on me.,positive
qunitjs/qunit,eslint,2016-09-16T18:53:24Z,no worries at all. you can ping anytime!,positive
qunitjs/qunit,eslint,2016-09-23T08:14:12Z,it looks `eslint` got problem with `unused expressions`. so can we do `= null` for all of them,negative
qunitjs/qunit,eslint,2016-09-23T14:56:55Z,``` javascriptassert.throws( function() { /* eslint-disable-next-line no-unused-expressions */    qunit.jsdump;}. upgradeguide );```platinumazure please review above code. as `jscs` is not allowing that syntax and single line comments with first lowercase letter,negative
qunitjs/qunit,eslint,2016-09-23T15:54:55Z,you might need to rebase if you're getting jscs issues-- jscs has been removed recently and replaced with eslint. please update your master branch. `npm prune`. `npm install`. and then rebase your topic branch.edit: oh. i goofed. eslint-disable-next-line is a line comment. see posting below.here's what i had in mind for the comment:``` jsassert.throws( function() {    // eslint-disable-next-line no-unused-expressions    qunit.jsdump;}. upgradeguide );```,neutral
pegjs/pegjs,coveralls,2017-12-16T22:12:13Z,add code coverage by istanbul. i also plan try to add one of coverage sites.  maybe.,neutral
pegjs/pegjs,coveralls,2017-12-18T18:52:06Z,now this ready to merge. as you can see. integration works.,neutral
angular-ui/ui-leaflet,karma,2015-10-30T15:55:03Z,karma coverage report. currently the readme.md link is broken. it would be nice to produce the coverage reports in dist/coverage which is very easy to do via karma. the only problem is the reports should only be committed on gh-pages. so again a `git add --force dist/coverage` on that branch.,positive
angular-ui/ui-leaflet,karma,2015-11-09T02:18:51Z,elesdoar your right. i will put all the leaflet draw stuff into a sep repo. this pr will become just karma. grunt. and babel fixes.,neutral
niftylettuce/igloo,codeclimate,2014-09-18T14:58:30Z,add codeclimate badge,neutral
admc/wd,sauce,2013-02-19T11:24:51Z,changed page link to sauce labs servers,neutral
admc/wd,sauce,2013-02-19T11:25:54Z,changed page link to sauce labs servers. i got sporadic timeouts with the original link,neutral
admc/wd,sauce,2013-02-20T06:06:56Z,we actually need to keep these being served out of the gh-pages repo here. i think the hosting issue is with the dns i use to make admc.io work -- i'll look into it. thanks for the heads up.,positive
admc/wd,sauce,2013-02-20T06:07:11Z,same story as the other ticket.,neutral
angular-ui/bootstrap,karma,2013-05-15T21:13:34Z,this appears to be an issue with the karma-ng-scenario runner. sorry.,neutral
cloudflare/backgrid,jasmine,2013-06-22T15:31:20Z,"fix to make test cases pass in grunt jasmine. i'm not sure of the reason.seems that when running under grunt jasmine. the default locale will have problem.the 4 failed test cases can pass after putting in the necessary settings to default the locale to ""en"".",negative
cloudflare/backgrid,jasmine,2013-06-23T12:06:59Z,wyuenho will you like to have jshint to be run in the grunt task?,neutral
cloudflare/backgrid,jasmine,2013-06-23T12:09:35Z,i took a look at the grunt-tasks branch.if the lib folder is removed. where will a normal user go and download the js and css which they like to use?,neutral
cloudflare/backgrid,jasmine,2013-06-23T19:04:46Z,btw. can you move your travis-ci related changes to a separate branch and file a separate pr from there? thanks!,positive
cloudflare/backgrid,jasmine,2013-06-24T01:07:05Z,er any reason for seperating the travis-ci and grunt tasks changes? currently both of them are on the grunt-tasks branch which is different from the master branch ...,neutral
cloudflare/backgrid,jasmine,2013-06-24T02:17:26Z,the same reason you make commit using different commit messages. enabling travis doesnt have much to do with fixing tests.sent from my iphoneon 24 jun. 2013. at 9:07 am. mallim notificationsgithub.com wrote:> er any reason for seperating the travis-ci and grunt tasks changes? currently both of them are on the grunt-tasks branch which is different from the master branch ...> > ?€?> reply to this email directly or view it on github.,neutral
cloudflare/backgrid,jasmine,2013-07-09T11:22:21Z,sorry about that...that's because i ran the grunt file...by the way. i couldn't run with jasmine (always i got a phatomjs ins't installed error..but it is!)...i'll reopen the push request. with only the file ok?,negative
netzpirat/haml-coffee,jasmine,2013-02-08T09:24:40Z,initial implementation of directives; include implemented.. i've started work on the directives. i've got the first bit done (having the compiler recognize directives) and implemented include. i figure it's better to do this in pieces as #50 is a bit large.the implementation works nicely (at least in my testing) for placement in global as well as amd (it could work for standalone too but i can add that after that pr is merged i suppose).i attempted to follow your existing conventions around the code base when adding directives; let me know where the implementation could be improved. etc.---also... i couldn't figure out how to get jasmine to unit test the include directive as two templates need to be compiled and one rendered and your testing harness only allows for one and one. should i add more specs or do you have another idea?,negative
netzpirat/haml-coffee,jasmine,2013-02-09T15:49:34Z,thanks a lot for the initial implementation. i just returned from holidays and will try it within the next few days and have also a look on possible testing strategies for cases where multiple templates are involved.,positive
netzpirat/haml-coffee,jasmine,2013-02-12T10:25:27Z,fyi. i didn't forget this. i'm just feeling sick and i'm not able to dig into this right now.,negative
netzpirat/haml-coffee,jasmine,2013-02-12T10:30:46Z,netzpirat take your time. hope you feel better soon.,positive
netzpirat/haml-coffee,jasmine,2013-02-15T09:45:20Z,just extended the spec suite to setup globally placed partials. which makes integration tests for the `+include` directive possible. i didn't do it for the amd placement. mainly because i'm short on time and don't want to spend to much time on stuff i don't need personally. i've added you as contributor. so you can directly push to master if you want to contribute more time and features to haml-coffee. thanks a lot!,positive
netzpirat/haml-coffee,jasmine,2013-02-15T09:45:42Z,:cake:,neutral
netzpirat/haml-coffee,jasmine,2013-02-15T10:00:32Z,nami-doc i added you also as contributor. i try to follow an open commit bit policy on my repositories like jfirebaugh,neutral
netzpirat/haml-coffee,jasmine,2013-02-15T10:40:55Z,not sure why but thanks i suppose :p,neutral
netzpirat/haml-coffee,jasmine,2013-02-15T10:44:54Z,nami-doc because you've made a pull request that was accepted.,neutral
bitpay/bitcore-lib,coveralls,2015-10-23T20:24:41Z,update coveralls.,neutral
Asana/node-saml-lib,jshint,2014-07-29T18:31:10Z,jshint fixes. - use default jshintrc- use `npm run jshint` in travis,neutral
yang-wei/rd3,eslint,2016-04-16T04:00:18Z,what should the documentation cover?,neutral
yang-wei/rd3,eslint,2016-04-16T04:51:54Z,yang-wei i disabled the rules - react/prefer-es6-class- react/prefer-stateless-function - strict   rules as i didn't know if you prefer these or not. we can enable then later. could you take a look at the last remaining eslint errors? i didn't want to refactor code with a high risk of breaking something. note that some of the obvious fixes (for example `!=` to `!==`) will break the tests,negative
yang-wei/rd3,eslint,2016-04-16T06:23:18Z,> strict rules as i didn't know if you prefer these or not. we can enable then later.it's fine for now =),positive
yang-wei/rd3,eslint,2016-04-23T03:36:57Z,resolved in #16,neutral
stephy/CalendarPicker,eslint,2016-05-10T20:56:58Z,eslint && travis,neutral
mout/mout,jshint,2013-09-04T15:07:59Z,definitely a good idea :+1:,positive
pnpm/pnpm,eslint,2016-09-04T19:41:41Z,we can even look at it as a smarter eslint... for instance. like a month ago i changed a method called `linkbins` to accept only 1 argument. and only recently i noticed that in 1 place i did not update the code which was using it 7ffb692b24650b4da9a2d78258351306c0dc710b. it wasn't a bug. because the additional args were just ignored. but the code looked weird. typescript would've caught that,negative
pypyjs/pypyjs,selenium,2015-05-17T14:10:05Z,"vm.exec() with multiline is broken?!?. i'm work on a updated selenium unitests... but it seems that multiline code will not work anymore.e.g.:```vm.exec('print ""one""\nprint ""two""');```will result in:```debug: operationerror:debug:  operror-type: syntaxerrordebug:  operror-value: ('eol while scanning string literal'. ('c callback'. 1. 6. 'exec \'print ""one""\n'. 0))>>>```next try:```vm.exec('print ""one""\\nprint ""two""');```result:```debug: operationerror:debug:  operror-type: syntaxerrordebug:  operror-value: ('unknown character'. ('<string>'. 1. 12. 'print ""one""\\nprint ""two""\n'. 0))>>> ```this has been worked yesterday. isn't it?",negative
pypyjs/pypyjs,selenium,2015-05-17T14:37:25Z,"should i use `vm._execute_source()` ???edit: one difference is:```vm._execute_source(""print __name__"") -> __builtin__vm.exec(""print __name__"") -> __main__```is that ok?",neutral
pypyjs/pypyjs,selenium,2015-05-17T17:12:12Z,reduce overhead of creating multiple pypyjs instances. is there a way to reset the vm ?this would be helpful for fast. atomic selenium unitests...,positive
pypyjs/pypyjs,selenium,2015-05-17T21:37:27Z,whoops. looks like i broke then when i split up the functionality into `exec` and `exec`.  working on a fix now...,negative
pypyjs/pypyjs,selenium,2015-05-17T21:48:03Z,not easily.  we could fake it by clearing the scope that code runs in. but that wouldn't help for modules that have global state.a better option would be to create a fresh vm for every test with `new pypyjs()` but this is currently very expensive. as it loads and parses `pypy.vm.js` each time.  so i think the best way forward may be to refactor the constructor so you can call `new pypyjs()` multiple times without so much overhead.,negative
pypyjs/pypyjs,selenium,2015-05-17T21:52:32Z,"> should i use vm._execute_source()btw the short answer to this is ""no""; that one's only really for intenal use since it runs in the raw global scope rather than a carefully managed namespace for user code.",neutral
pypyjs/pypyjs,selenium,2015-05-18T06:41:53Z,> so i think the best way forward may be to refactor the constructor so you can call new pypyjs() multiple times without so much overhead.:+1:,positive
pypyjs/pypyjs,selenium,2015-05-18T07:52:51Z,"> should i explicit test if vm._execute_source(""print __name__"") will return **main**. too?no. that's not part of the public api so i don't want to commit to any particulars of how it should behave.",neutral
pypyjs/pypyjs,selenium,2015-05-23T09:00:55Z,"one final request. please `git commit --amend` to put a single commit message like ""add selenium tests for interactive console"" rather than the squashed commit history.these tests will be really valuable. especially with travis integration.  thanks jedie!",positive
pypyjs/pypyjs,selenium,2015-06-01T09:25:50Z,i was thinking of just running them directly in the spidermonkey command-line shell. i.e. plain javascript tests without a python runner around them.  but it's probably too much hassle to be worth setting that up. and a combination of running under nodejs shell and in a browser via selenium will give pretty solid coverage.,positive
Polymer/polymer,sauce,2015-10-15T02:08:12Z,as you can see. travis and our homegrown ci server agree that ie 10 is crazy. my current best guess here is that this is related to the polyfilled mutationobserver.~~disturbingly. ie 10 works just like the rest if you run wct and sauce connect manually behind the $goog corporate proxy. so that leads me to thing this weird quirk is also networking related.~~edit: nope. just build vs dev webcomponents.js,negative
angular/angular-cli,jasmine,2016-09-24T11:21:30Z,"ljieyao have you tried to remove `es6-promise` from`""types"": [      ""jasmine"".""es6-promise""    ]`?",neutral
angular/angular-cli,eslint,2016-03-24T17:28:12Z,feat(formatting): adding editor config. adding eslint and tslint. feat(formatting): adding editor config. adding eslint and tslintcode formatting was not implemented for the anglar-cli project itself.  adding eslint and tslint. did initial formatting for eslint,neutral
angular/angular-cli,eslint,2016-03-25T03:05:25Z,lgtm. we should enforce this in travis too. but this can be done in the next cl.,neutral
angular/angular-cli,eslint,2016-03-30T20:14:43Z,the repo is using `eslint` though. which seems to behave differently. the tests above were made using git bash.i also tried using `tslint './src/**/*.ts'` but the result was the same (no files linted).,neutral
angular/angular-cli,eslint,2016-04-05T23:16:49Z,removed the inaccurate comment from `.eslintignore`. otherwise everything is the same.,neutral
angular/angular-cli,uglify,2017-09-14T12:44:05Z,filipesilva how can i make this work so that aot builds use es2015. but `ng serve` during development uses es5?,neutral
angular/angular-cli,uglify,2017-09-16T09:04:54Z,pgrm good question. i am trying to figure out that aswell... (as ng serve does not seem to work with es2015),neutral
angular/angular-cli,uglify,2017-09-20T09:56:31Z,filipesilva it would be really useful to be able  keep the correct class names at runtime in certian dynamic scenarios (for instance if what component to display is decided at runtime based on a string value provided by an external entity such as a workflow engine etc.).,positive
angular/angular-cli,uglify,2017-09-28T15:54:32Z,what about `ng serve --aot`?,neutral
angular/angular-cli,uglify,2017-09-29T12:12:32Z,misaunde i do remember in the old and forever long *ng serve is slow* issue. that people got told. to not use `ng serve --aot` because it's slow. also. i think you can't run unit tests in aot. so i'm wondering what angular 5 will bring in this regard. because i'm reading everywhere. that aot will be there by default. but an issue regarding aot in unit tests is still opened. maybe filipesilva could shed some light on what is the best approach now. and how will that probably change with angular 5?,negative
angular/angular-cli,uglify,2017-10-04T14:42:37Z,fix(angular/cli): disable comparisons feature in uglify compression in prod. see #5804,neutral
angular/angular-cli,uglify,2017-10-05T08:51:36Z,i signed it!,neutral
angular/angular-cli,uglify,2017-10-12T10:44:20Z,"i have no ""uglify-js"" in my package.json to replace what should i do ??",neutral
Matt-Esch/virtual-dom,sauce,2014-07-29T00:01:02Z,investigate ci timeout. ci with travis and sauce has been added. but it consistently times out. it tends to run fine locally within the 50 minute travis limit. investigate why this is and try to make this consistent.,positive
Matt-Esch/virtual-dom,sauce,2014-07-29T11:37:10Z,the ci timeout is caused by too many tests running in parallel. it seems that there is some overlapping at the end of tests. pushing the number of concurrent tests over the limit for opensource projects. i have reduced the concurrency to be sequential.,neutral
tutorialhorizon/react-tagged-input,mocha,2015-08-03T07:02:59Z,alistairjcbrown  :+1:  thanks for the fix!i am gonna setup some mocha tests for this guy soon as well.,positive
bbc/bbc-a11y,standard,2017-04-21T16:01:12Z,conform to standard.js. use [javascript standard style]( everywhere and test for conformance at the end of `npm test`.,neutral
bbc/bbc-a11y,mocha,2017-01-21T00:42:19Z,add mocha back to travis. i removed mocha from travis and forgot to put it back. a couple of tests broke. this fixes them. runs mocha in travis again and simplifies the travis config so the build is faster.,negative
onsip/SIP.js,eslint,2017-11-27T08:26:17Z,"use babel-loader to transpile code. switch from eslint-loader to babel-loader to allow using modern constructssuch as arrow functions or es6 classes while still retaining ""compatibility""with older browsers. it's worth mentioning browsers which support webrtcalready ship with es6 support. but at least we won't trigger parser errorson the older browsers.the cost in terms of runtime size is negligeable. the minified code growsby less than 400 bytes as a result of the switch. note: we don't pull inany polyfills with this commit. so only es6 constructs are supported. notusing new classes such as map or set.we still perform linting as part of the build. by invoking eslint in theprebuild step.",neutral
onsip/SIP.js,eslint,2017-11-27T16:03:33Z,this looks good to me. eslint still runs automatically while building. and it failing still halts the build with an error.generally speaking. longterm we would like to move to typescript. but babel is an adequate and noninvasive middle-step.,negative
onsip/SIP.js,eslint,2017-11-29T12:31:21Z,any chance of merging this egreenmachine ?,neutral
box/t3js,karma,2015-04-16T16:29:31Z,as i mentioned. the change to the karma reporter should be requested in a separate issue. i've not seen any trouble using the progress reporter when tests fail. so if you are having trouble. it needs to be addressed separately.,negative
box/t3js,karma,2015-04-21T18:29:11Z,i've added the `main` file but i'm not entirely convinced that commonjs is a good fit right now. the added amount of work including browserify plugins for coverage and karma make it much less appealing. i'm going to test out a simple wrapper for the existing bundle to compare,positive
box/t3js,karma,2015-04-23T20:15:17Z,change karma to use mocha reporter,neutral
box/t3js,karma,2015-04-23T20:15:18Z,verified that j3tan has signed the cla. thanks for the pull request!,positive
box/t3js,karma,2015-04-23T20:17:26Z,2,neutral
facebook/react-devtools,eslint,2015-09-08T23:46:52Z,update eslint. ran this to confirm we're not seeing new lint warnings:```npm run lint```,neutral
facebook/react-devtools,eslint,2015-09-09T00:53:44Z,added `fbjs-scripts` as a dependency and use its eslintrc as the base similar to react. i disabled some lint rules that need a bigger cleanup which i might do in a followup.,negative
facebook/react-devtools,eslint,2015-09-09T00:55:16Z,:+1:,neutral
mostjs/core,mocha,2017-01-18T22:02:13Z,converts all tests to es2015 import/export and setup mocha. - move all buster tests from `test/` to `test-buster-old`- setup configuration needed for testing the `test/` folder with mocha- converts *all* buster tests from commonjs to es2015 modules,neutral
mostjs/core,mocha,2017-01-25T15:05:42Z,chore(test): switch 1 existing mocha test to use briancavalier/assert. affects: most/core,negative
mostjs/core,mocha,2017-01-25T15:07:08Z,:shipit:,neutral
mostjs/core,mocha,2017-01-27T09:47:46Z,test(disposable): convert sink & disposable tests. convert disposable tests to mocha + briancavalier/assertconvert sink tests to mocha + briancavalier/assertaffects: most/core,neutral
mostjs/core,mocha,2017-02-11T02:26:28Z,test(combinator) convert combinator tests. convert combinator tests to mocha + briancavalier/assertaffects: most/corecloses #37,neutral
codemix/oriento,jshint,2014-04-24T15:20:01Z,"add jshint. ""use strict"". adds jshint and ""use strict"" everywhere (apart from the tests)",neutral
pghalliday/grunt-mocha-test,mocha,2013-05-15T14:51:48Z,is there a benefit of having a seperated config task?. i was wondering why there is both a `mochatest` main task as well as a `mochatestconfig` options-task. most grunt plugins don't do this but have the options inside the tasks targets as per convention. does this provide a benefit that would negate managing the duplicate multi-task names?,negative
pghalliday/grunt-mocha-test,mocha,2013-05-16T21:03:33Z,here is a demo. the second test will error-crash grunt but not in command line mocha:```var expect = require('chai').expect;describe('async tests'. function () {    it('first passes'. function (done) {        process.nexttick(function () {            expect(true).to.equal(true);            done();        });    });    it('second fails'. function (done) {        process.nexttick(function () {            expect(true).to.equal(false);            done();        });    });    it('third passes'. function (done) {        process.nexttick(function () {            expect(true).to.equal(true);            done();        });    });});```,positive
pghalliday/grunt-mocha-test,mocha,2013-06-01T16:27:46Z,print stack traces when tests fail. when a test fails grunt quits with a simple error message. when i run the same test with mocha from the command line it gives me a stack trace. is there a way to get stack traces from this plugin?thanks for your contributions to open source!randy,negative
pghalliday/grunt-mocha-test,mocha,2013-06-01T16:29:15Z,keep going when a test fails. when i run a suite of tests from the mocha command line it will continue with other tests and give a complete report of all failures at the end. grunt-mocha-test appears to stop at the first failure. is there a way to make it continue?thanks!randy,negative
pghalliday/grunt-mocha-test,mocha,2013-06-01T16:50:43Z,"should have mentioned that the test failure i was seeing in this case was a ""code blew up"" situation rather than an assertion failure. a unit test was attempting to connect to a server that didn't exist.",negative
sutoiku/jsdox,jshint,2014-08-18T01:47:50Z,lemori you have a jshint error that's failing the build:`jsdox.js: line 211. col 19. expected '{' and instead saw 'return'.`single line `if` statements should have the body wrapped in curly braces:`if (foo) { return; }`,negative
Project-OSRM/osrm-backend,standard,2018-02-01T11:39:06Z,i think geojson is here to stay after all.,neutral
Project-OSRM/osrm-backend,standard,2018-02-08T20:06:56Z,the installation is pretty standard and has worked fine with gb. german. netherlands data sets.it's worth noting i am running 3 other instances of the docker image which serve gb. german. netherlands on different ports. when i came to do the 4th (spain) i get the above error.,positive
photonstorm/phaser,jshint,2014-04-24T12:36:23Z,ohh those semicolons... :) i will mark the day when i submit a pr without any jshint errors :) thanks for merging!,positive
photonstorm/phaser,jshint,2014-05-02T18:57:21Z,nice one. can you ensure this passes jshint please? as the travis ci failed. but otherwise looks great to implement. might be worth throwing a few simple use-cases in the phaser-examples repo too (like your multi-screen one split up into 3?),positive
sanemat/generator-hubot-script-gulp,coveralls,2014-06-30T12:07:58Z,coveralls to optional choice,neutral
verdaccio/verdaccio,codecov,2017-05-21T20:59:46Z,cool. if travis-ci is happy. all we are happy. thanks bartdubois . ignore codecov (still under testing),positive
pump-io/pump.io,jshint,2016-07-13T08:00:39Z,enforce jshint in `npm test`. `npm test` currently runs jscs in addition to running the vows test suite. we should run jshint too. with something like```jshint --exclude 'public/javascript/libs' bin lib public/javascript routes test```the only reason this can't go in immediately is because the above command currently fails.,negative
pump-io/pump.io,jshint,2016-08-01T08:08:24Z,good about eslint is that it is free software (jslint and jshint are non-free).,positive
npm/npm,standard,2015-06-15T20:23:44Z,circular deps will never be automatically removed by the pruner. so if you install `a` and it requires `b` which requires `c` which requires `b`. then removing `a` won't result in `b` + `c` being removed because they always have a referent. that is. we need cycle detection in the module pruner (`lib/install/prune-tree.js`)this can be easily reproduced by installing. and then removing `standard`. as its deps include a dependency cycle.,negative
npm/npm,standard,2015-06-25T05:54:59Z,make npm3 conform to `standard` style. does what it says on the tin. will be squashed to a single commit before merge. is a terrifyingly large batch of changes.**r**: iarna **r**: zkat,negative
npm/npm,standard,2015-06-25T09:07:00Z,something about ef5df9377cbe2a6ee10d6b7bbf6c26d688097160 causes the installer to hang on `loadrequesteddeps` when running `npm run test-all` or `test/tap/builtin-config.js`. something that `standard` puts into `node_modules`. perhaps? we shouldn't land this until we figure out what's causing it. in any case.,negative
npm/npm,standard,2015-06-25T20:32:23Z,rebased. squashed. and merged as 5be4008a09730cfa3891d9f145e4ec7f2accd144. 81a6811a4ae8f404ec5e507ec32105c06699eb2d. 858d509e7f7f44ce5ec2123f2a4333c7b53c8302. 363a7dc3a586a2e71fe42cd1204f0f21a39fdad2. 4f2dc874b25db3dce30b0c4a41ee3decbf8152ba. and ba53810ed6ff78b6c8039f6b4d3cacdcf72f9e6c. thanks to iarna for all her help getting the issues this surfaced sorted out!,positive
npm/npm,standard,2015-07-13T04:51:46Z,for the sake of getting people's feelings about it -- do you think instead of something specifically like `npm-exec` (or _only_ having `npm-exec`). that something like `virtualenv`'s `activate` functionality would be desirable in general? would that fulfill the needs this is meant to fulfill any better?for those unfamiliar. i would imagine it to work something like this:``` sh$ cd path/to/proj$ npm i standard$ npm activate(proj)$ standard(proj)$ npm deactivate$ standardcommand not found: standard```,neutral
Stuk/jszip,sauce,2013-10-12T19:11:53Z,add tags to saucelabs test runs,neutral
bithavoc/express-winston,mocha,2015-01-15T19:32:57Z,when i started. vows was the shit. looks pretty outdated now.would it be too hard to switch to mocha and blanket? :p,positive
mishoo/UglifyJS2,uglify,2013-05-09T15:15:18Z,uglify is in the right here; you've saved one character.the fundamental problem there is that racer wants to uglify an _expression_ (function expression). whereas uglify is designed to uglify _statements_ (and function declaration statements must have names).should uglify have a function to uglify expressions rather than statements?,neutral
mishoo/UglifyJS2,uglify,2013-05-09T15:20:56Z,well. uglifyjs is designed to uglify programs. and a js program is a sequence of statements.but yeah. we could have an option to parse expressions.,neutral
mishoo/UglifyJS2,uglify,2013-05-13T08:26:05Z,no. commonjs builds generally look like this:``` jsrequire.define('uglifyjs'. function (require. module. exports) {  module.exports = ...})require.define('underscore'. function (require. module. exports) {  module.exports = ...})```the idea is that a builder may want to use `new function('require'. 'module'. 'exports'. 'some string body')` to defer evaluation (since the string body is just a file. so it should really be just one. large string). however. uglifyjs won't minify it right now (as it's a string).``` jsrequire.define('uglifyjs'. new function('require'. 'module'. 'exports'. 'module.exports = ...'))```yes. it's an edge-case. but i'm just throwing it out there. hopefully you get the idea. though.,negative
mishoo/UglifyJS2,uglify,2013-05-27T10:20:12Z,thanks jaime. i'll keep this in mind if i still get around to updating uglify in our rhino based build scripts before just switching to node like everybody else.,positive
mishoo/UglifyJS2,uglify,2013-05-31T20:11:44Z,`(echo -n '// '; date; uglify input) > output`. why would you ever want uglifyjs doing this for you?,neutral
mishoo/UglifyJS2,uglify,2013-06-04T21:05:27Z,as a result of this change. the actual reason for the error is never output when using the cli. making it rather difficult to debug the issue when using the cli.,neutral
mishoo/UglifyJS2,uglify,2013-06-07T01:19:14Z,r.js embeds uglifyjs2 so having a command line option is not valuable in the same way,neutral
optimizely/oui,eslint,2016-04-06T00:42:53Z,add eslint for js linting. we now have an optimizely-wide eslint config file that we can pull in and use.,neutral
optimizely/oui,eslint,2016-04-08T23:40:32Z,implement eslint for oui and fix errors/warnings. tscanlin ?€? can you take a look at this please?this will be more important as we move to react and replace/refactor our existing js. i'd like to eventually share the eslintrc file that the optimizely app uses. but that is in a private repo that needs some work before it is opened up.,neutral
optimizely/oui,eslint,2016-04-09T00:23:33Z,all of tom's formatting is gone! but it's consistent with the rest of the js code style in the app so this is awesome!! thanks for making this change dan! lgtm,positive
Netflix/falcor,coveralls,2015-09-01T17:16:36Z,delete unneeded .coveralls.yml config file. since the project is building on travis. coveralls will infer the repo token automatically.,neutral
UKHomeOfficeForms/hof-template-mixins,snyk,2017-02-08T16:34:17Z,lennym snyk working now,neutral
Rantanen/node-mumble,mocha,2015-08-14T13:14:01Z,i'm not following what's the issue. the voiceactive vs jitter buffer contents shouldn't have a race condition looking at the code.can you describe a test case how i could reproduce this? i wrote some mocha tests (and integrated these with travis-ci) but none of them seemed to reproduce this.(also yay we got base for regression tests now \o/),negative
commitizen/cz-cli,eslint,2016-12-25T12:55:35Z,add linting using eslint. i have based the eslint config on [standard style](). and then disabled the rules that we where breaking. my plan is to enable them back one by one after this gets merged. as to not edit too much of the code base with one pr.this pr also includes f7aceeb which i guess fixes our first bug that was caught by the linting,negative
commitizen/cz-cli,eslint,2016-12-25T13:47:30Z,ping jimthedev. any idea why appveyor is failing?```textthe specified path. file name. or both are too long. the fully qualified file name must be less than 260 characters. and the directory name must be less than 248 characters.```and```textresolve-path : cannot find path 'c:\projects\cz-cli\test\artifacts\65fadf84-b742-4197-8b4f-6f2cd9b82963\4c1fa249-620b-4359-9552-3636a9332edf\enduser-app\node_modules\cz-jira-smart-commit\node_modules\inquirer\node_modules\cli-cursor\node_modules\restore-cursor\node_modules\exit-hook\package.json' because it does not exist.at c:\program files\appveyor\buildagent\modules\build-worker-api\build-worker-api.psm1:207 char:18+     $fullpath = (resolve-path $path).path+                  ~~~~~~~~~~~~~~~~~~    + categoryinfo          : objectnotfound: (c:\projects\cz-...ok\package.json:string) [resolve-path]. itemnotfoundexception    + fullyqualifiederrorid : pathnotfound.microsoft.powershell.commands.resolvepathcommand push-appveyorartifactinternal : cannot bind argument to parameter 'fullpath' because it is null.at c:\program files\appveyor\buildagent\modules\build-worker-api\build-worker-api.psm1:209 char:42+     push-appveyorartifactinternal -fullpath $fullpath -filename $file ...+                                             ~~~~~~~~~    + categoryinfo          : invaliddata: (:) [push-appveyorartifactinternal]. parameterbindingvalidationexception    + fullyqualifiederrorid : parameterargumentvalidationerrornullnotallowed.appveyor.buildagent.api.utils.pushappveyorartifactinternalcmdlet resolve-path : cannot find path 'c:\projects\cz-cli\test\artifacts\65fadf84-b742-4197-8b4f-6f2cd9b82963\4c1fa249-620b-4359-9552-3636a9332edf\enduser-app\node_modules\cz-jira-smart-commit\node_modules\inquirer\node_modules\cli-cursor\node_modules\restore-cursor\node_modules\exit-hook\readme.md' because it does not exist.at c:\program files\appveyor\buildagent\modules\build-worker-api\build-worker-api.psm1:207 char:18+     $fullpath = (resolve-path $path).path+                  ~~~~~~~~~~~~~~~~~~    + categoryinfo          : objectnotfound: (c:\projects\cz-...-hook\readme.md:string) [resolve-path]. itemnotfoundexception    + fullyqualifiederrorid : pathnotfound.microsoft.powershell.commands.resolvepathcommand push-appveyorartifactinternal : cannot bind argument to parameter 'fullpath' because it is null.at c:\program files\appveyor\buildagent\modules\build-worker-api\build-worker-api.psm1:209 char:42+     push-appveyorartifactinternal -fullpath $fullpath -filename $file ...+                                             ~~~~~~~~~    + categoryinfo          : invaliddata: (:) [push-appveyorartifactinternal]. parameterbindingvalidationexception    + fullyqualifiederrorid : parameterargumentvalidationerrornullnotallowed.appveyor.buildagent.api.utils.pushappveyorartifactinternalcmdlet```if you could quickly explain what this is for in the appveyor.yml file. that would be appreciated :)```ymlon_finish:  - ps: $root = resolve-path .\test\artifacts; [io.directory]::getfiles($root.path. '*.*'. 'alldirectories') | % { push-appveyorartifact $_ -filename $_.substring($root.path.length + 1) -deploymentname to-publish }artifacts:  - path: test/artifacts/**/*    name: test artifacts```also. are you  or  on eslint? :),negative
commitizen/cz-cli,eslint,2016-12-26T12:40:40Z,thank you! i love helping out <3i'm still trying to figure out exactly how this all ties together. i'm thinking that since i've only added `devdependencies` it shouldn't affect the actual published product...as i've understood it. we are releasing via travis ci. so what are the artifacts from appveyor used for?,positive
commitizen/cz-cli,eslint,2016-12-27T13:31:08Z,good question about those lines in appveyor.yml. basically they let us keep the files created as a result of running the tests so that we can inspect the contents of the test artifacts. the git status of the repos.  etc. i removed those lines for now and master is now passing in both environments. if you merge master into your branch then your appveyor tests should pass. eventually i'd like to make it so that we can turn on and off artifact collection by an environment variable in the appveyor ui.,positive
commitizen/cz-cli,eslint,2016-12-27T13:31:58Z,sorry. hit the wrong button on mobile.,negative
commitizen/cz-cli,eslint,2016-12-28T22:34:48Z,amazing  thanks for all the help,positive
commitizen/cz-cli,eslint,2017-01-08T11:50:17Z,style: update spacing to follow eslint. this commit enables the spacing checking rules in eslint. and also updates the codeto follow said rules.,neutral
commitizen/cz-cli,eslint,2017-01-08T12:10:20Z,**jimthedev** trying to figure out how this could have caused the test to fail on appveyor ???? ~~would you mind restarting the build to see if it's just a temporary failure?~~edit: nvm. i just realised i have access to appveyor myself,negative
commitizen/cz-cli,eslint,2017-01-08T12:43:25Z,there is already an open issue about the test failure. i think that i have managed to solve it in a very nice way. but i did it on top of this branch so i'll merge this now and submit a new pr with the other fix. hope that sounds good,positive
commitizen/cz-cli,eslint,2017-01-08T13:34:52Z,fantastic. thumbs up!,positive
testem/testem,mocha,2013-03-10T11:20:29Z,include chai.js in /public/testem/. you already include buster. jasmine. mocha and qunit. and i think many people use chai along with mocha.let me know if i should send in a pull request :),neutral
testem/testem,mocha,2013-03-13T01:58:58Z,i think that's a good idea. i would configure it probably likeframework: mocha+chai,positive
testem/testem,sauce,2015-11-14T21:08:29Z,use saucelabs to test testem in supported browsers. ensure that chrome. firefox. safari and ie 8 - edge keep working.,positive
testem/testem,istanbul,2016-06-15T15:38:27Z,istanbul + mocha + coverage report. hi all. i have got problem to generate coverage report using istanbul + mocha + coverage report. my simple solution based on native examlpes mocha_lazy and coverage_istanbul. unfortunately i always got coverage*.json empty. i debug and found that variable `window.__coverage__` is undefined. example coverage_istanbul work marvelous. could you advice ?,negative
SBoudrias/Inquirer.js,codacy,2017-06-18T06:28:26Z,setup coverage in codacy,neutral
oddbird/true,mocha,2016-07-08T17:11:56Z,this has been addressed in the latest releases,neutral
oddbird/true,mocha,2016-07-27T11:05:32Z,after testing around and write minimal examples. i find out that mocha have a problem. if there are arbitary `*.js` files (like my `importer.js`) lies in the `/test/` directory...after moving them away or run `mocha test/test_sass`. it terminates normally.,negative
mochajs/mocha,mocha,2013-02-12T08:29:44Z,why mocha returns non-zero exit status for success result. i'm running `node_modules/.bin/mocha -r html-cov > coverage.html` it returns 23,negative
mochajs/mocha,mocha,2013-02-12T16:04:51Z,problem using mocha watch with mongoose. getting this error ```error parsing instrumented code: overwritemodelerror: cannot overwrite `user` model once compiled.```,negative
mochajs/mocha,mocha,2013-02-12T17:03:17Z,watch mode busts the require cache. so if a module relies on that state it wont work well. nothing we can do there,neutral
mochajs/mocha,mocha,2013-02-12T17:34:41Z,related to learnboost/mongoose#1251,neutral
mochajs/mocha,mocha,2013-02-14T10:33:42Z,reading -f / --config as suggested above would break option bundling.  inconsistent interfaces are bad.,negative
mochajs/mocha,mocha,2013-02-19T23:21:24Z,yeah i kinda still agree with roman-neuhauser. config coming from all over the place is a little meh. not to mention the ugly hack we have to do to get it to work. i'd just do some shell inception replacing `mocha` if you want to inject some args in,negative
mochajs/mocha,mocha,2013-02-19T23:23:57Z,probably just that specific reporter,neutral
mochajs/mocha,mocha,2013-02-19T23:24:42Z,oh if it exits 23 then you have 23 failures. html-cov just doesn't output them currently,neutral
mochajs/mocha,mocha,2013-02-19T23:26:22Z,azer that's because mocha explicitly exits when it's complete. this prevents the dev from closing all connections and shutting down servers. intervals etc. which is almost impossible in node land. so there's no getting rid of that,negative
mochajs/mocha,mocha,2013-02-20T09:17:26Z,i have 43 passing and 2 pending tests. sometimes they can fail (beacuase of external dependencies). but if it happens they all fail.,negative
mochajs/mocha,mocha,2013-02-21T03:55:34Z,hi.this would be very helpful. especially when integrating `mocha` with a system that doesn't provide color support - for example a ci system with text-only logs (eg. team city)either support for `--no-color`. or a custom `--unified-diff` type flag would be greatly appreciated.,positive
mochajs/mocha,mocha,2013-02-23T17:45:17Z,i dont think it's mocha. mocha probably just uncovers this bug. mocha itself does not touch anything else. no globals etc,negative
mochajs/mocha,mocha,2013-02-24T19:45:05Z,i've found a few situations where i need this. `this.whitelistglobals` or `this.globals` would make sense imho.,negative
mochajs/mocha,mocha,2013-02-27T04:50:37Z,"the object.keys of firefox has bug. the object.keys of firefox has bug. you can try like this in firefox:```<script>    console.log(object.keys(window));    if(top == window){}    console.log(object.keys(window));</script>```results here:```[""window"". ""document"". ""installtrigger"". ""console"". ""process"". ""global"". ""mocha"". ""mocha"". ""sinon"". ""expect"". ""location"". ""mouseevents"". ""mspointerevents"". ""keyevents"". ""uievents"". ""bubbleevents"". ""touchevents"". ""gestureevents"". ""before"". ""after"". ""beforeeach"". ""aftereach"". ""context"". ""describe"". ""xcontext"". ""xdescribe"". ""specify"". ""it"". ""xspecify"". ""xit"". ""getinterface""][""window"". ""document"". ""installtrigger"". ""console"". ""process"". ""global"". ""mocha"". ""mocha"". ""sinon"". ""expect"". ""location"". ""mouseevents"". ""mspointerevents"". ""keyevents"". ""uievents"". ""bubbleevents"". ""touchevents"". ""gestureevents"". ""before"". ""after"". ""beforeeach"". ""aftereach"". ""context"". ""describe"". ""xcontext"". ""xdescribe"". ""specify"". ""it"". ""xspecify"". ""xit"". ""getinterface"". ""top""]```some variables can't be read by object.keys. until the variable been used in code.",neutral
mochajs/mocha,mocha,2013-02-27T22:17:55Z,not the right place for this sort of thing sorry!  i would recommend using a higher level http thing like supertest or mikeal's request module though. node's is very low level for the average test use-case,negative
mochajs/mocha,mocha,2013-02-28T02:21:02Z,+1 it's not ideal that moving to use requirejs means leaving mocha behind.,neutral
mochajs/mocha,mocha,2013-03-01T10:33:25Z,cannot reproduce it anymore. strange,neutral
mochajs/mocha,mocha,2013-03-02T11:50:38Z,add mocha.1 manual page. this could be quite useful to include for use on unix systems. it was generated with help2man with some modifications and additions.,positive
mochajs/mocha,mocha,2013-03-04T16:28:46Z,mocha parses mocha.opts from requested folders. this fixes #451,neutral
mochajs/mocha,mocha,2013-03-05T14:06:09Z,could we have bold/normal for expected/actual ?,neutral
mochajs/mocha,mocha,2013-03-05T16:29:26Z,bold and color are both implemented using ansi codes and have the same issues.,neutral
mochajs/mocha,mocha,2013-03-07T17:17:41Z,i had the same issue. solved it using a wrapper check(). this is an alternative to the modification of done() and is only slightly more verbose (7 chars including a space) that the proposed solution.``` javascriptfunction check( done. f ) {  try {    f()    done()  } catch( e ) {    done( e )  }}test( 'foo'. function( done ) {  myasyncfn( function ( err. result ) {    check( done. function () {      assert.ok( true );      assert.equal( result. 'bar' );  // mocha now reports the assert failure    } );  } );} );```,negative
mochajs/mocha,mocha,2013-03-08T01:09:43Z,or like this?```test('foo'. function (done) {  myasyncfn(function (err. result) {      assert.ok(true);      assert.equal(result. 'bar');  // mocha now reports the assert failure  }.dotry(done));});```,positive
mochajs/mocha,mocha,2013-03-08T09:31:39Z,yaniswang i love your solution. it prevents the additional function() {} and is very easy to comment out. or remove. if mocha provides a fix that works across all use cases. i'm gonna implement this write away.,positive
mochajs/mocha,istanbul,2017-01-17T21:53:08Z,coverage for node tests. this pr does the following:- add nyc. istanbul-combine and coveralls as dependencies- adds an environment switch in the makefile on `coverage=true`. where coverage gathered from the `test-node` target and sub-targets- adds an npm `coverage` script that runs `make test` with `coverage=true` for local coverage collection- adds coverage collection on travis for node 7- posts coverage report to coverallscloses #2620 #2351thanks to c089 for getting the basic setup in the makefile working,positive
mochajs/mocha,istanbul,2017-01-19T12:00:45Z,in favor of 'istanbul report' over wrapper. is there any specific reason for keeping `istanbul-combine`? for what i can see the results are the same.,neutral
mochajs/mocha,eslint,2017-05-24T15:21:39Z,declare main eslintrc as `root`. it will prevent config lookup to exit mocha's project folder.,neutral
mochajs/mocha,eslint,2017-06-11T00:34:25Z,eslint fixes,neutral
mochajs/mocha,karma,2016-05-13T06:49:05Z,test karma install and changes. **do not merge. please ignore**,neutral
mochajs/mocha,karma,2016-05-13T06:56:42Z,soooo...why isn't travis building?,neutral
mochajs/mocha,karma,2016-05-13T09:57:37Z,boneskull what builds? afaik the `package.json` and/or `makefile` hasn't been changed so that phantom.js is run on ci. i don't see any code related to spinning up karma either.if you mean travis builds. i can see them now. but maybe you've experienced some kind of delay. (?),negative
mochajs/mocha,coveralls,2017-01-28T12:08:44Z,awesome stuff! thank you for helping with improving the test coverage. even though coveralls doesn't quite get it apparently :),positive
casperjs/casperjs,eslint,2015-04-10T14:19:49Z,hello everybody.here is the score on my repository casperjs :- with eslint have got ??? 11104 problems (11104 errors. 0 warnings)- strings must use doublequote lol- with jshint have got ??? 20 errors  (this function's cyclomatic complexity is too high)regards :-p,negative
node-schedule/node-schedule,coveralls,2015-03-16T23:32:38Z,codecov can't tell the difference between the actual master branch and a pull request. so i'm looking into coveralls now.,neutral
node-schedule/node-schedule,coveralls,2015-03-16T23:47:27Z,integrates coveralls for code coverage reporting. also updates gitignore in case any one runs code coverage reporting locally. as before. please don't merge until i confirm everything is working properly.,positive
node-schedule/node-schedule,coveralls,2015-03-17T00:08:34Z,yeah. this one looks good to go. thanks! :+1:,positive
node-schedule/node-schedule,coveralls,2015-03-17T01:58:30Z,closing and reopening as new pull request to rerun through coveralls.,neutral
node-schedule/node-schedule,coveralls,2015-03-17T02:10:00Z,hmm...there may be an issue on coveralls right now. hold off on this and i'm going to look a bit deeper.,neutral
node-schedule/node-schedule,coveralls,2015-03-24T02:33:01Z,exactly. looks like coveralls may have been down briefly. all the tests still passed.,positive
NaturalNode/natural,jasmine,2014-03-25T20:19:25Z,adds tokenizer for the dutch language.. adds a tokenizer adhering to the use of a single quote for the dutch language. (used in some plural forms. and also when shortening older words like des).i was unable to get jasmine running a test. but added a test for the tokeniser blindly. it should pass. as testing in a regular script works.will be adding more dutch language related work soon.,negative
NaturalNode/natural,jasmine,2014-03-26T13:16:33Z,merged. tests ran fine. thanks for including them!,positive
Jimdo/grunt-angular-toolbox,sauce,2015-06-15T18:32:52Z,add configuration for saucelabs,neutral
sitespeedio/sitespeed.io,selenium,2015-04-03T18:26:49Z,when i schedule for 5 runs . only first run will be success for next runs it fails mentioning time out.this happens only in red hat . in mac it works excellent. can i know the procedure how to run with selenium jar ? this would help me a lot.,positive
naver/egjs-component,coveralls,2017-06-29T02:55:36Z,chore(coveralls): add coveralls,negative
fb55/htmlparser2,eslint,2016-06-12T00:37:57Z,switch to eslint. and update a few modules,neutral
karma-runner/karma-sauce-launcher,sauce,2014-03-30T17:38:54Z,fix(wd): get sessionid from driver instead of promise resolution. the sauce reporter is not working (i guess for a while now) because the sauce launcher is not storing the jobid correctly. since the `init` callback in `wd` has two parameters (`sessionid` and `capabilities`). the promise resolution is actually an array of two arguments. so the `jobid` is actually `args[0]`. but i thought it would be better to just use `driver.sessionid`.,negative
karma-runner/karma-sauce-launcher,sauce,2014-03-31T09:28:22Z,i can confirm that this fix works.,neutral
felixrieseberg/ember-electron,mocha,2017-03-16T10:03:54Z,yes. should be fine.,positive
micnews/react-jw-player,eslint,2017-11-26T15:50:25Z,convert `miclint` to `eslint-config-mic`. miclint is hard for open-source developers to set up with editor integration. so. we are switching to a standard eslint config in this repository. using the same rules as before.,neutral
elm-community/elm-webpack-loader,mocha,2015-12-13T19:08:38Z,improve tests. a few commits:- migrate tests to `mocha` and `chai`: that way it's easier to share knowledge between this project and `node-elm-compiler`.- lint all files: there were a bunch of unused variables. and references to undefined variables. we can discuss the specific rules if needed.- commit `elm-package.json`: as rtfeldman recommended. we now use the `cwd` option to run the compiler inside the `test/fixtures` folder. so i've committed the corresponding `elm-package.json` instead of ignoring it.- test adding dependencies: we had added the functionality to watch dependencies. but there were no tests for it.i've marked one test (`emits errors`) as pending. as it isn't really testing anything at the moment. `node-elm-compiler` outputs errors to `console.error`. but ideally we would be able to tell it to use webpack's `emiterror` function. i'll create a pull request for `node-elm-compiler`. and once that's done i'll fix the pending test here.rtfeldman can you please review?,negative
ipfs/js-ipfs,uglify,2017-11-21T14:47:24Z,diasdavid unfortunately. you're essentially saying that `create-react-app` users won't be able to use js-ipfs. and `create-react-app`. on its end. won't support es6 uglifying. it's sad.,negative
ipfs/js-ipfs,uglify,2017-12-09T07:17:08Z,this only happens with a minified build of ipfs (`dist/index.min.js`). will try to provide a simple test case. but this sounds like uglify (or webpack) issue.,neutral
google/closure-library,sauce,2015-09-18T16:45:17Z,fix ie tests on sauce labs,neutral
google/closure-library,sauce,2015-09-18T16:45:38Z,ignore this pr for now. just trying to get ie passing on sauce. (it's having all sorts of trouble),negative
google/closure-library,sauce,2015-10-05T17:32:11Z,disable sauce connect,neutral
google/closure-library,sauce,2015-10-14T23:51:30Z,re-enable tests on sauce labs now that we have vms again.,neutral
stampit-org/stampit,eslint,2015-06-15T01:08:58Z,ok. it all looks good to me now. i'm okay to merge. i'd wait for other guys to review though.ps: we'd need to replace jshint with eslint with a different pr someday.,positive
stampit-org/stampit,eslint,2015-06-15T01:11:29Z,cool. yeah. let's let the pr sit for a bit.:+1:  eslint,positive
stampit-org/stampit,eslint,2015-06-21T08:29:14Z,today i switched between my local unlintable and test failing `eslint` branch (not pushed yet) and the `edvanced_examples` branch to fix up troutowicz finds. just sayin...,negative
power-assert-js/power-assert,karma,2016-05-06T03:27:54Z,falsandtru refactored karma-based test suite is excellent. thanks!,positive
danvk/dygraphs,karma,2015-03-21T18:57:18Z,"i'm playing around with a variation on this. one thing i noticed: i don't think the `debug` stripping is working. whenever i try to use `dygraph-combined.min.js`. i just get the error ""must include options reference js for testing"". did you see this?",negative
danvk/dygraphs,karma,2015-03-21T19:04:01Z,looks like it had to be:```  uglify: {    compress: {      global_defs: { debug: false }    }.  }```,neutral
danvk/dygraphs,karma,2015-03-21T19:36:11Z,sorry for going silent. i got slammed at work with an alpha release that took all of my mental cycles. this is the first weekend i've had back.i had not seen that error. i'll spend some time today. seeing if i can do a two-stage commit to maintain the history you're looking for.,negative
danvk/dygraphs,karma,2015-03-21T22:00:01Z,wow! i'm impressed (& appreciative!) of the time you must have put into that manual migration.i'm drilling down into a few remaining karma failures in my branch. do you know if there's a simple way to pass a `--grep` option to the karma runner? or to open a single test in a real browser? that was always a nice feature of the old dygraphs test system.,positive
danvk/dygraphs,karma,2015-03-21T22:53:43Z,i've sent out #565 which supersedes this. please take a look if you're so inclined!and a huge thanks for setting this all up. you've helped modernize dygraphs in a big way.,positive
danvk/dygraphs,karma,2015-03-22T00:25:55Z,"with karma you can run a reduced set (including one)  of tests by placing a "".only"" in any describe or it. all tests can be run in a real browser by passing the command line option for the browser or setting it in the karma.conf. i typically will have two different run configurations in my webstorm ide to run in phantomjs or chrome. but you could do it with a parameterized gulp take too.",neutral
chentsulin/electron-react-boilerplate,standard,2017-04-18T12:51:43Z,add localization to boilerplate. i think in most common cases at a point in your project you want to be able to roll out your application for multiple languages. with i18next we have a standard and also a react connector to do so. it would be great to have it build right into the boilerplate.,positive
chentsulin/electron-react-boilerplate,standard,2017-04-18T16:12:50Z,would love a pr for this :smile,positive
chentsulin/electron-react-boilerplate,standard,2017-04-19T12:01:32Z,i'll see what i can do. ;),neutral
AnalyticalGraphicsInc/cesium,eslint,2017-11-20T21:10:51Z,remove dangling commas and unused requires. - removed dangling commas- added an eslint rule to error on dangling commas- change es3 keyword variable names- remove unused requires,neutral
AnalyticalGraphicsInc/cesium,eslint,2017-11-21T17:25:34Z,mramato ready,neutral
pinterest/esprint,eslint,2017-07-05T19:11:32Z,your eslint config should be using the `babel-eslint` parser?,neutral
eventbrite/javascript,eslint,2017-07-01T02:27:40Z,fix eslint packages to have correct peerdeps/deps. some packages that should have been hard dependencies were in peer. and packages that were extending from other packages were requesting the sub-dependencies as its own peer. so this diff is correcting that.,neutral
eventbrite/javascript,eslint,2017-07-03T16:47:57Z,the only thing that might need to change is `babel-eslint`. i.e.. should the configuration dictate which parser to use?,neutral
eventbrite/javascript,eslint,2017-07-03T16:50:07Z,the configuration does depend on a certain parser to work. but it can likely be more relaxed than what the current peer dependency setting is. generally peer dependencies can use `>=` vs. `^` because they only depend on little bits,neutral
eventbrite/javascript,eslint,2017-07-03T17:05:37Z,per offline convo. closing this and moving this to core.,neutral
harvesthq/chosen,jasmine,2015-03-28T20:37:03Z,pfiller thanks for the merge clean-up; couldn?€?t see this pr when it was opened yesterday since github was all ddos-y yesterday. also thanks to lenniboy for the original jasmines! :heart_decoration:,positive
GoogleCloudPlatform/nodejs-docs-samples,standard,2016-05-23T21:05:40Z,switched from jshint to semistandard and upgraded dependencies.,neutral
GoogleCloudPlatform/nodejs-docs-samples,eslint,2016-09-07T00:23:19Z,same eslint `const` issue is plaguing this pr.,neutral
mapbox/carmen,eslint,2015-09-22T20:32:38Z,:+1: but i'd suggest a stricter config. and extending `eslint:recommended`.,negative
clux/sdp-transform,eslint,2017-03-03T11:54:06Z,add eslint syntax checker. add `npm run lint` which runs `eslint`. also. minimal changes to make eslint happy and minor code cleanups.,neutral
clux/sdp-transform,eslint,2017-03-03T12:37:58Z,thanks. that's actually something i wanted done. used to use old jshint for it - and eslint was giving me a bunch of warnings as well in the grammar.,positive
simple-statistics/simple-statistics,jshint,2014-03-27T19:14:11Z,run jshint on travis. easy enough. and makes contributions easier.,neutral
simple-statistics/simple-statistics,sauce,2015-08-18T14:46:17Z,browser testing with sauce labs. this patch adds browser testing with `brtapsauce`: it runs testson a range of browsers on [sauce labs]( pushes the information to a test badge.in order to make this happen. it- removes science.js parity tests: science.js does not support early-ie- excludes mixin tests from early-ie- creates a scripts dir with a test-script-creator script. a test  script. and the runnerstill has a few remaining tasks- [x] set up simple statistics email address & sauce account- [x] integrate tests with travis,neutral
webpack-contrib/grunt-webpack,jasmine,2016-08-09T22:33:00Z,use ava as test runner. **please check if the pr fulfills these requirements**- [x] tests for the changes have been added (for bug fixes / features)**what kind of change does this pr introduce?** (bug fix. feature. docs update. ...)- [ ] bugfix- [ ] feature- [ ] code style update (formatting. local variables)- [ ] refactoring (no functional changes. no api changes)- [x] build related changes- [ ] ci related changes- [ ] other... please describe:**what is the current behavior?** (you can also link to an open issue here)jasmine tests**what is the new behavior?**ava tests**does this pr introduce a breaking change?**- [ ] yes- [x] no,positive
digitalbazaar/jsonld.js,karma,2018-02-10T23:51:50Z,gkellogg i update coverage tool in master if you want to pull the change in.  `npm run coverage` works again in node.  karma coverage was causing trouble so i punted on that for now.,negative
jimhigson/oboe.js,jasmine,2016-12-17T20:06:05Z,i have some reasons right now to think that this might only be a problem if you use npm. i'm testing right now.,negative
jimhigson/oboe.js,jasmine,2016-12-17T21:16:50Z,nevermind i tried this brew installed node and i still had the same errors about launching phantomjs. someone tested this on master and told me they had no problems though. so i would love to hear from others!,positive
xtuple/xtuple-extensions,jshint,2014-03-18T20:23:22Z,put xtuple-extensions under jshint,neutral
moment/moment,coveralls,2015-07-22T17:13:06Z,it works on localhost. submit works. but i believe the ui is confused. because the files that are covered do not exist in the repo (because they are generated). for now i'll keep it without coveralls reporting (just the coverage).,neutral
moment/moment,coveralls,2015-07-22T17:15:36Z,bcoe if you're the author. i'd suggest having an option to add the source code with the report. and then coveralls.io has to display that instead of trying to fetch files from the repo.in the mean time i guess we can have a separate branch that has the build files and only run coveralls there.,neutral
bustle/mobiledoc-kit,sauce,2016-03-15T16:36:18Z,failure is saucelabs,negative
bustle/mobiledoc-kit,sauce,2016-03-16T13:04:17Z,thanks for this. makes total sense to me. i am wondering if it would be easier to delegate the responsibility to the render node the way we do for sections with `rendernode.reparsesmutationofchildnode`.i'll take a look at those sauce failures. i restarted the ci build for this yesterday but it seems to have failed in the same way again.,negative
rollbar/node_rollbar,codeclimate,2016-03-22T18:41:51Z,add istanbul and codeclimate-test-reporter,neutral
yandex-ui/noscript,jshint,2014-04-17T07:42:38Z,?????????? ?????€???????? jshint. ???€?????????????? ????????????????- camelcase- eqeqeq- immed- indent: 4 (???????????? ?? ?????? ?????? ?????????€?? ( `(function(){  ... })()  ) ?????? ??????????????- latedef- nonbsp- strict?????????? ???????€?????????? ?????? ?????? ????????,neutral
yandex-ui/noscript,jshint,2014-04-17T07:59:13Z,???? ???? ??????????. ?? ???? ???? ?????????? ????????????. ?????? ?????? ???€???????? )?? ???€???????? ???? ???????? ???????????? ?????????????????? ????????????. ???????? ???? ?????? ????????????????.???? ?? ???? ?????????????????????? ???€???????€????. ????!,neutral
yandex-ui/noscript,jshint,2014-04-17T08:25:40Z,???? ???????? ????????????????.?? ???? ?????????? ???????????? ????????: ?????? ?????? ???€???????? ???? ???€???????????? `strict`?,neutral
yandex-ui/noscript,jshint,2014-04-17T08:57:51Z,edoroshenko ??????????. ???? ?? ?????? ?????????? ??-???? strict,neutral
yandex-ui/noscript,jshint,2014-04-17T09:50:29Z,?? ???????????€?????????? ?? ?????????????????? ???€???????????? ???????????? `view_id` ?? `model_id`.,neutral
yandex-ui/noscript,jshint,2014-04-17T11:51:59Z,lapple ????. ???????? ?????????? :(,neutral
yandex-ui/noscript,jshint,2014-04-17T12:02:30Z,#235 ?????????? ?????€???????? jshint,neutral
yandex-ui/noscript,jshint,2014-04-17T12:05:29Z,?????? ???? ???€???????????? ???????????? ?? 4 ???????????? ????-???? ????????. ?????? ?? ?????? ??????????????????.???????? ?????? ???€???????? ?????????? ?????????????? )??????????????. ???????? ?????????? ?????????€???????? ?????€?????? ?????????? ?????€?????????€??.,neutral
yandex-ui/noscript,jshint,2014-04-17T12:10:49Z,???????? (???€???????? ???????????€???? ?????????????? ?? ???? ????????,neutral
yandex-ui/noscript,jshint,2014-04-17T14:38:34Z,> ?????? ???? ???€???????????? ???????????? ?? 4 ???????????? ????-???? ????????. ?????? ?? ?????? ??????????????????.?????€????. ?? ???????????? ???€???????????? ???€???????€ ???€?????????????,neutral
yandex-ui/noscript,jshint,2014-04-17T14:50:11Z,?? ?????? ???????????????? ???????????????????? ???????????????? ?? ?????€?????? ?????????????,neutral
yandex-ui/noscript,jshint,2014-04-17T14:54:08Z,?? ?? ???????? pr ???? ???????? ????????????????,neutral
yandex-ui/noscript,jshint,2014-04-17T19:27:30Z,?? ???????? ???? ?????????? ?????????? ?????€???? amd ??????????-???????????? ????????????????????. ?? ???? ?????€?????????? / ycssjs-???? include-????? ?????? ?????????? ???? ?????????? ?????????? ?????????????? ??????????????????.?? ????????????. ???????€?? ???????? ?????????? ???????????????????? noscript ?????????? ?????? ?????????????????????????? ?? nodejs.?????? ?????????? ???????????????? ???????????? `module.exports`.???????? ??????????-???? ?€???????????? ???????? ?????? nodejs-???? `require` ?????? ???€?????????€????. ???? ???????????????????????? / ???? ?????????????????????????,neutral
yandex-ui/noscript,jshint,2014-04-17T19:42:14Z,???? ????. ???????? ????????.?????????? ?????????????? ???????? ?????????? ???????????????????? ???????? - ???????? ???? ???????? ?????????? ?????€??????.???????? ??????????????????. ?? ??????????.,neutral
yandex-ui/noscript,jshint,2014-04-18T11:02:48Z,?????????????? ?????????? ???????€???? ?????????????????? ?? ???????????? ?? ?????????? ?????????????????? ???? ???€?? ???????€????.????. ???????? ????????????. ?? ???? ???????? ??????????-???? ???€?????????? ?? indent,neutral
yandex-ui/noscript,jshint,2014-04-18T12:23:34Z,?? ???? ?????????????? ??????????????????. ???????????? ?? ?????? ?????????????€???????? ?????????????? ?? ?????????????? indent,neutral
yandex-ui/noscript,jshint,2014-04-18T13:00:44Z,?? jscs ???? ?????????? ???€???????€?????? indent ?????????? ???????????,neutral
yandex-ui/noscript,jshint,2014-04-18T13:20:56Z,jscs ???????????? ???? ???€???????€?????? indent.?€???? ???????? ?€??????????????????. ???? ?????????????? ????????????????????.?? - ???? ???????????????????? indent ??????????. ?????? ??????????-???????? ????????????????????,neutral
yandex-ui/noscript,jshint,2014-04-18T13:27:49Z,?? ???€???????? ?????€???????? indent-??. ????????????????.,neutral
yandex-ui/noscript,jshint,2014-04-18T17:29:46Z,?? ???? ???????????????????? indent ??????????.?€????????. ???? ?????? ?? ???? ???????????????? ???????? ??????????????,neutral
yandex-ui/noscript,karma,2014-04-23T15:03:19Z,???????? ???€?? ??????????. ???????????? ???????? ????????. ?????? ???€?????? ?????????????????????????? karma watch:`karma start karma.conf.js --single-run=false`???????????? ???????????? ?? ?????????????? ???€?????????€?? ???€?? ?????????????????? ?€?????€????????????: ???? ???€???? `:9876/debug.html`,neutral
yandex-ui/noscript,karma,2014-04-23T15:04:58Z,?????? ?????????? ???€?? ????????????????????. ?????????€???? ????????????????????. ???????? ???? ???????????? ???? ????????????????????????. ?? ?????????????????? ??????????????. ?????? ?????????€?????? api ???€?? expect,neutral
Modernizr/Modernizr,mocha,2015-02-22T00:40:58Z,migrate testing from qunit to mocha,neutral
Modernizr/Modernizr,mocha,2015-02-23T01:11:03Z,this is an amazing effort!,positive
Modernizr/Modernizr,mocha,2015-02-23T01:15:19Z,we should still build a static test page so we can link people to the suite. should just generate the static files in the travis build,neutral
Modernizr/Modernizr,mocha,2015-02-23T01:17:59Z,yep - i realized that after i pushed it up yesterday. what is here is 98% static. the jade files should be compiled to html. and the ua-parser can't be served dynamically like it is currently. otherwise. we would be golden. the ua parsing thing may be a little more tricky. short term i think i will just revert to paul's browserified parser currently used. long term see if we can get uaparser browsified proper. so that we can include as a node module and update throughout time.,negative
Modernizr/Modernizr,mocha,2015-02-23T01:23:16Z,yep sounds good,positive
Modernizr/Modernizr,mocha,2015-02-23T01:23:49Z,after the static changes are made. are you :+1:?,neutral
Modernizr/Modernizr,mocha,2015-02-23T01:26:26Z,yep :+1:,neutral
Modernizr/Modernizr,mocha,2015-02-24T02:41:48Z,yep looks good. so `grunt copy:gh-pages` will just be ran manually after any changes to master?also appveyor failed due to phantomjs timing out. is this a blocker for merging?,negative
Modernizr/Modernizr,mocha,2015-02-24T02:42:49Z,also seeing 4 tests failing on fx35,neutral
Modernizr/Modernizr,mocha,2015-02-24T03:22:48Z,ryanseddon what tests are you seeing failed on what system? i am all green on ff35 on yosemite,neutral
Modernizr/Modernizr,mocha,2015-02-24T04:27:53Z,ryanseddon able to reproduce. weird caching thing i guess. one issue is related to this. three are not. i was calling `!!bool` rather than `bool.valueof()`. which meant that `new boolean(false)` objects where coming back as true. still debugging appveyor.,negative
Modernizr/Modernizr,mocha,2015-02-24T05:36:42Z,magic. you two.,neutral
Modernizr/Modernizr,sauce,2013-12-18T11:52:56Z,:angry: so close just safari 5 and 6 are failing for some reason. but when i run the test suite manually inside saucelabs the test suite passes fine (??????????????????? ?????????,negative
Modernizr/Modernizr,sauce,2013-12-19T00:58:02Z,woo it's passing in all browsers :fireworks: seems safari 5 and 6 fail in long running situtations on the autoplay test as the callback gets triggered twice and tries to remove and element that doesn't exist anymore.outstanding issue with saucelabs is firefox still fails to work for us.,negative
Modernizr/Modernizr,sauce,2014-01-03T03:30:29Z,closing in favor of #1174,neutral
Modernizr/Modernizr,sauce,2014-01-03T04:53:10Z,we haven't seen this issue anywhere else. including the new saucelabs tests that ryanseddon has been working on. closing due to a lack of evidence. jonbca if you can provide the actual build. it would be wonderful to ensure this isn't happening to others!thanks as always,positive
swagger-api/swagger-node,mocha,2014-05-30T14:03:42Z,hi. since there are now mocha tests in the project (thanks jsdevel). can you please add a test for this fix?,positive
swagger-api/swagger-node,jshint,2014-06-21T04:39:29Z,adding jshint to cover ./lib. fehguy this will conflict slightly with my other pr.  i'll resolve conflicts accordingly.  thanks.,positive
praekelt/vumi-jssandbox-toolkit,mocha,2014-03-07T07:48:18Z,get mocha to display diffs for fixture mismatches. at the moment. it is difficult to tell why a fixture doesn't match a real request. especially for cases where the bodies are non-trivial. it would be great if we could make use of mocha's `showdiff` error flag to show these diffs in a way that it is easy to figure out the reason for mismatches.,negative
rambler-digital-solutions/dotfiles,eslint,2016-03-30T12:16:50Z,fix removed rules in .eslintrc.  using keyword-spacing instead of space-after-keywords and space-return-throw-case,neutral
senecajs/seneca-basic,coveralls,2016-05-18T15:48:48Z,added coveralls,neutral
senecajs/seneca-basic,coveralls,2016-06-02T10:40:29Z,the ./doc/seneca-basic.html seems brokenlgtm,neutral
senecajs/seneca-basic,coveralls,2016-06-02T13:04:08Z,:+1:,neutral
mysqljs/mysql,eslint,2015-10-24T16:18:03Z,add .eslintrc. it is currently quite hard to see which styling guide this code follows or to get editor help for it.i propose to add a .eslintrc file which contains the rules of code style this project currently follows. this could be integrated with travis as well.,positive
mysqljs/mysql,eslint,2015-10-24T16:21:35Z,i've never used eslint. personally. if you can come up with a set of rules that match this library. i can probably accept :),neutral
mysqljs/mysql,eslint,2015-10-24T16:57:55Z,for now. a lint file that requires no code changes would be best. then we can start working on determining any other rules on a case-by-case basis. the style of this module is the same as the original author. and so the resolutions would be whatever that is. i would bet some of the conflicts are from accepting prs. which may not have complied with the author's style.,positive
mysqljs/mysql,eslint,2015-10-24T17:30:25Z,okay. gonna run some `git blame`s to find out when i find the time.,negative
tj/commander.js,eslint,2018-01-21T08:22:47Z,add a linter to the project. i'm trying to contribute to this project and i have no idea what code style i'm supposed to be using. and there's nothing to check that i'm doing it right. a linter would make contributing to this project a lot easier.i also find the use of commas to be rather eclectic. so it would be nice to either enforce that style or use a more standard style.my proposal is to use [standardjs]( with eslint. it's extremely popular and effective. i've used it for several months now and i hardly ever having to think about it.i'm happy to set up this tooling.,negative
walmartlabs/eslint-config-defaults,eslint,2016-01-03T21:13:28Z,baer. is there a way around this limitation? i would like to use sublime/atom eslint plugins as well as grunt-eslint and these configs do not work..,negative
walmartlabs/eslint-config-defaults,eslint,2016-01-08T23:15:45Z,walmart: use babel-eslint parser to enable flow types,neutral
walmartlabs/eslint-config-defaults,eslint,2016-01-12T15:08:35Z,jannorden -- there's actually multiple instances of this. i'm fixing and adding eslint of _the configs themselves_ to travis ci./cc baer,neutral
walmartlabs/eslint-config-defaults,eslint,2016-01-12T16:36:02Z,fix duplicate fields. add eslint to configs. add travis.. **status**: hooking up now to check on travis. still have lots of eslint fixes for our configs and rules before ready for review.fixes: #54 supersedes: #55 #53 /cc baer,neutral
walmartlabs/eslint-config-defaults,eslint,2016-01-12T18:38:02Z,update: ready for real review and passes travis!/cc baer jannorden agirorn,neutral
react-boilerplate/react-boilerplate,eslint,2016-05-21T16:58:42Z,ci fails because of the linter.adding `// eslint-disable-line react/prefer-stateless` (not 100% sure that's the actual rule name) on the line of the class definitions should fix that!,negative
react-boilerplate/react-boilerplate,eslint,2016-05-30T20:25:37Z,js linter config updates. introduces `.eslintrc` and `.jscsrc` files for explicitly configuring javascript linters.   also sets up some helpful starter rules. which invite refinement.   adds a few new npm commands for autofixing javascript linting errors.,negative
react-boilerplate/react-boilerplate,eslint,2016-05-30T20:36:37Z,oh duh.   ok. i'll drop the config files and keep the fix commands.,neutral
react-boilerplate/react-boilerplate,eslint,2016-05-30T20:43:03Z,add lint:eslint:fix. lint:jscs:fix and lint:js:fix npm commands,neutral
react-boilerplate/react-boilerplate,eslint,2016-05-31T15:43:17Z,gangster i like this a lot. having a specific suffix/option for it makes sense.,positive
react-boilerplate/react-boilerplate,eslint,2016-06-01T19:25:24Z,global configuration variables. this is by far the best react / redux boilerplate out there.  all the best practices in one place. it's fantastic!i have a quick question about global config variables (i.e. api urls).  where do you suggest we define them?  should they go in package.json along with all the eslint stuff?,neutral
react-boilerplate/react-boilerplate,eslint,2016-06-02T08:09:35Z,exactly what maxmantz said. thanks for answering!,positive
react-boilerplate/react-boilerplate,eslint,2016-06-04T12:59:17Z,yeah. having that seems useful since the `--` syntax to pass arguments to the commands isn't too widely known!i just merged #417 which removes jscs and moved everything over to eslint (ref #348). would you mind updating this pr and removing the `npm run lint:jscs:fix` command? thanks!,positive
react-boilerplate/react-boilerplate,eslint,2016-06-07T23:09:09Z,eslint failing with generated component.. generating a component from the command line introduces 2 react/jsx-curly-spacing lint issues.this is because of the spacing on the classname attribute.`<div classname={ styles.generatedcomponent }>`,negative
react-boilerplate/react-boilerplate,eslint,2016-06-08T07:47:00Z,awesome. thanks for the bug report! would love a pr fixing this!,positive
react-boilerplate/react-boilerplate,eslint,2016-06-08T07:53:50Z,thank you. the project runs the test suite prior to building. and the test suite runs the linter;  personally i'm not a fan of this behavior. but i'm also pretty sloppy so i try to force myself to accept using a linter.you can always modify the eslint rules to not force you to use the trailing comma if this keeps tripping you up.,negative
react-boilerplate/react-boilerplate,eslint,2016-06-09T07:13:36Z,"i haven't encountered that yet. but then i also don't use heroku?€?a quick fix would be to disable the rule in your `package.json` `eslintconfig`:``` json""rules"": {  ""import/no-unresolved"": 0}```",negative
react-boilerplate/react-boilerplate,eslint,2016-06-11T11:03:55Z,i'll close this pr for now since there hasn't been any activity in 7 days.i'd really appreciate an update gangster. this seems like a very useful addition indeed! let me know when you find the time to make this happen :+1:,positive
react-boilerplate/react-boilerplate,eslint,2016-06-11T14:41:50Z,awesome. closing! thanks jurekbarth!,positive
react-boilerplate/react-boilerplate,eslint,2016-06-15T09:02:47Z,that's weird. i need to check this out and try myself but seems like eslint not respecting ignores when called explicitly with the file path,positive
apache/zeppelin,selenium,2016-02-14T05:16:33Z,doanduyhai i guess we could check on this - if it has become a frequent problem we could get travis to retry tests. i have not seen this much. on the other hand. selenium test failures seem to be more frequent.,negative
apache/zeppelin,selenium,2016-02-15T00:27:04Z,looks good,positive
apache/zeppelin,selenium,2016-02-15T21:49:20Z,merging today if no more comments,neutral
apache/zeppelin,selenium,2016-02-18T02:08:50Z,error:```09:55:34.147 error org.apache.zeppelin.integration.zeppelinit:257 - exception in zeppelinit while testsparkinterpreterdependencyloading org.openqa.selenium.timeoutexception: timed out after 60 seconds waiting for org.apache.zeppelin.abstractzeppelinit$13d56054b```could you check?,negative
apache/zeppelin,selenium,2016-03-02T01:38:10Z,"ci fails with a strange error: ```caused by: org.openqa.selenium.nosuchelementexception: unable to locate element: {""method"":""partial link text"".""selector"":""create new note""}command duration or timeout: 8 milliseconds```any idea?",neutral
assaf/zombie,mocha,2013-05-06T06:04:31Z,zombie prevents the use of iced coffee script. the line at `lib/zombie/scripts.js#7` prevents the use of iced coffee script in tests.for example. if i am using mocha with the `--compilers coffee:iced-coffee-script` flag. if `coffee-script` is required anywhere in tests. it will use the vanilla coffee-script interpreter for all required files.there should be a line to specify which coffee-script library to use.,neutral
FormidableLabs/webpack-dashboard,eslint,2017-09-12T04:17:03Z,use prettier. this pr:- adds `prettier` and `eslint-config-prettier`- ran `prettier` on existing files- runs `prettier` on staged files in a precommit hook,positive
dmfay/massive-js,mocha,2016-02-08T18:53:46Z,thanks to node's module caching. the runner _does_ have singleton-like characteristics even if it doesn't meet the complete technical definition. try changing the `before()` hook in one of the testcases to open a transaction and log whether you're in one or not from the runner. then run `mocha test` -- you'll see that everything from that point onward is executed within the transaction even as the succeeding testcase modules re-`require` and reconnect massive.,positive
gabrielcsapo/node-flat-db,eslint,2016-08-09T03:47:29Z,add eslint,neutral
gabrielcsapo/node-flat-db,eslint,2016-08-09T04:08:54Z,adds eslint removes stats folder from production build. fixes #12,neutral
Esri/angular-esri-map,karma,2015-11-19T00:52:57Z,added travis config. added karma firefox runner and configured travis to run tests in firefoxresolves #90,neutral
tildeio/htmlbars,sauce,2014-12-16T05:53:54Z,merge it if you want to sort out the saucelab creds later.,neutral
tildeio/htmlbars,sauce,2014-12-18T14:12:54Z,use correct saucelabs credentials,neutral
tildeio/htmlbars,sauce,2014-12-18T14:16:28Z,:+1: - :heart:,neutral
tildeio/htmlbars,sauce,2014-12-18T14:24:22Z,johanneswuerbach thanks very much for all your work on this :-) it makes a big difference!,positive
tildeio/htmlbars,sauce,2014-12-18T14:25:56Z,added sauce badge to readme,neutral
tildeio/htmlbars,sauce,2014-12-18T20:45:34Z,extracted sauce into an addon / run browsers in parallel. extracted sauce into an addon / run browsers in parallel,neutral
tildeio/htmlbars,sauce,2015-01-07T22:26:45Z,johanneswuerbach any idea what's up with travis/sauce?,neutral
tildeio/htmlbars,sauce,2015-01-10T12:28:13Z,mixonic / oneeman this is ready now. gives a nice little speed bump.,positive
tildeio/htmlbars,sauce,2015-01-10T15:50:57Z,lgtm. thanks!,positive
tildeio/htmlbars,sauce,2015-01-10T15:53:15Z,johanneswuerbach great job building sauce out as a stand-alone lib. thanks much :cake:,positive
tildeio/htmlbars,sauce,2015-01-14T04:04:48Z,hide passed tests by default.. this should make the default screenshots by saucelabs more helpful.,positive
tildeio/htmlbars,sauce,2015-01-14T13:35:12Z,i see the difference in the ie8 screencast. thanks!,positive
tusharmath/Multi-threaded-downloader,standard,2016-03-13T05:12:18Z,chore(build): add code coverage and standard linting,negative
tusharmath/Multi-threaded-downloader,standard,2016-03-23T00:16:29Z,fix(observables): get content-length from a standard request instead of a head request. - signed urls from aws s3 don?€?t give the content-length in a head request- this fix uses a standard get to get the content-length and destroys the request before proceeding to download data. which is practically equivalent to calling head.i know you weren't keen on doing it this way ... but it does seem reasonably sensible. considering that an aborted get is effectively the same as a head request ... plus ... it works ;-)i was able to download a signed aws url in multi-parts with this fix,negative
tusharmath/Multi-threaded-downloader,standard,2016-03-23T00:18:05Z,from the looks of things. i may have to mock out the destroy function in the integration tests.i'll take a look at this tomorrow.,neutral
tusharmath/Multi-threaded-downloader,standard,2016-03-24T09:43:39Z,is this ready for me to merge?,neutral
tusharmath/Multi-threaded-downloader,standard,2016-03-24T10:54:00Z,added missing tests. ready to be merged.,neutral
tusharmath/Multi-threaded-downloader,standard,2016-03-25T16:35:11Z,chore(bin): add .js extension. file was getting ignored by standard,negative
rwjblue/ember-cli-template-lint,mocha,2017-01-17T10:52:26Z,binhums the reason this resulted in problems was that `--timeout 5000` was missing from the mocha call,neutral
apache/cordova-ios,jshint,2015-02-05T20:15:14Z,cb-8435 enable jshint for ios platform. - created a npm run jshint command & integrate into npm run test- created jshint rules files for spec and rest of the repo- fixed all jshint issues,neutral
apache/cordova-ios,jshint,2015-02-06T18:48:51Z,the failing test is because your 'end-to-end list validation handles list parameter' test requires ios-sim which is not installed.installation of ios-sim should be added to .travis.yml if this is an important test.,neutral
apache/cordova-ios,jshint,2015-02-06T19:04:31Z,seems like an artifact. the original design changed and that checkin was supposed to be reverted. i'll take a look,neutral
apache/cordova-ios,jshint,2015-02-13T22:16:06Z,the issue is finally resolved -  we can go forward with this pr,neutral
apache/cordova-ios,jshint,2015-02-13T23:26:36Z,it should be cb-8435 (please edit the pr title). don't worry about the commits. i can edit the commit message when pulling/squashing it in.,neutral
apache/cordova-ios,jshint,2015-02-14T00:02:26Z,pulled in (see cb-8435). you can close this issue now,neutral
apache/cordova-ios,jshint,2015-02-14T00:28:35Z,thanks!,positive
apache/cordova-ios,eslint,2017-07-15T08:15:57Z,we had to pull in new code for the new linter using eslint. consequently. some files have changed. can you try rebasing. then running `npm run eslint` to make sure it's all kosher,neutral
apache/cordova-ios,eslint,2017-07-15T08:44:53Z,we had to pull in new code for the new linter using eslint. consequently. some files have changed. can you try rebasing. then running npm run eslint to make sure it's all kosher,neutral
apache/cordova-ios,codecov,2016-03-17T09:21:53Z,cb-10888 enable coverage reports collection via codecov,neutral
holger1411/understrap,standard,2017-02-02T17:08:53Z,holger1411 congratulations for passing your theme to comply the wp coding standards :),positive
holger1411/understrap,standard,2017-02-03T06:32:38Z,override woocommerce header ?. i can't figure out how to make the shop page not output the standard header? using the code `if ( is_shop() ) {get_header( 'shop' );}` outputs a newly created header-shop.php but also spits out the entire header from the default header.php.removing the hook from the single-product or archive-product ie 'woocommerce_before_main_content' ?any ideas on how to rectify this?  racking my little brain :),neutral
holger1411/understrap,standard,2017-02-03T06:36:45Z,ughhhh closing. wrapper-start.php and the `get_header();` changing this to your defined header ie `get_header('shop');` does what i want. coffee not strong enough....,neutral
OpenZeppelin/zeppelin-solidity,eslint,2018-01-04T19:54:26Z,add a lint:fix command to package.json. we should have a `npm run lint:fix` script that runs `eslint . --fix` to handle the simple fixes automatically.,neutral
OpenZeppelin/zeppelin-solidity,eslint,2018-01-04T20:42:14Z,note that this can be done currently as `npm run lint -- --fix`. i think.,neutral
OpenZeppelin/zeppelin-solidity,eslint,2018-01-05T15:56:26Z,if this can be done with `npm run lint -- --fix` we can close this.,neutral
StartPolymer/gulp-html-postcss,eslint,2017-07-06T08:45:03Z,fix pretest script & nyc config. - fix npm script of eslint.- remove non-essential nycconfiguration - format code use eslint v4,neutral
StartPolymer/gulp-html-postcss,eslint,2017-07-06T20:09:20Z,thank you,positive
baconjs/bacon.js,mocha,2013-02-19T08:52:59Z,#57 maybe a much broader range of browser testing using [testling-ci]()? it support non-webkit based browser like ie and opera. a migration from jasmine to mocha will make this easier ;),neutral
baconjs/bacon.js,mocha,2013-02-19T17:25:29Z,"hi and thanks for the contribution! the existing browser tests were just something i wrote ""ages ago"" and do not form a representative test set. but if we get to hook them up to ci and especially with multiple browsers (particularly one problem child). they will be worth at least something. and we can add more.i've got no experience on testling-ci. so forgive me my stupid question. can we plug into testling-ci just like into travis-ci and get to run on ie etc? why would mocha make testling-ci easier?on the other hand i'd probably pick mocha if i were to start writing those tests right now. so if there's any great wins to be gained by migrating. we should do it. shouldn't be a big deal really. as most tests use the expectstreamevents/expectpropertyevents wrappers. and if we could run _all_ the tests in all browsers. we'd get a really good coverage.regarding the pr per se. i wish you included instructions in the readme: how to run browser tests from the command line. then we'll merge.very nice to get some help with testing!",positive
baconjs/bacon.js,mocha,2013-02-19T19:31:12Z,yes. you can simply hook up with testing-ci as long as the test runner produce [tap output]( since testling-ci already has a mocha harness. so we don't need to worry about that.like you said. running all the test in real browsers sounds like a good idea.,positive
matrix-org/matrix-react-sdk,standard,2017-02-09T04:26:30Z,a few random thoughts:when sharing a point. the level of precision the user intends may vary wildly. are they referring to a specific county in south-east kansas. or the entire usa? which should be displayed? it might be good to encode a hint regarding this in the event--perhaps a radius around the point that should be enclosed by the view area of a map tool?alternatively. the event could contain arbitrary geometry. for example using [geojson]( (which can be easily fed to most standard gis or web mapping tools). that way people can send sets of points (favorite restaurants!). polygons (geocache zones!). line strings (travel routes!). or whatever else strikes their fancy.,neutral
matrix-org/matrix-react-sdk,standard,2017-02-09T09:43:01Z,>alternatively. the event could contain arbitrary geometry. for example using geojson (which can be easily fed to most standard gis or web mapping tools). that way people can send sets of points (favorite restaurants!). polygons (geocache zones!). line strings (travel routes!). or whatever else strikes their fancy.i like this one more. seems like a good idea to be included into the spec as an alternative key.,neutral
matrix-org/matrix-react-sdk,eslint,2017-01-20T14:28:23Z,use an eslint config based on the js-sdk. to try & get as consistent a code-style as possible throughout our various codebases. this config adds jsx/react/flow stuff. and makes some things warnings again that the react-sdk doesn't conform to yet.run eslint --fix to fix a bunch of errors (a lot of missing semicolons). but there are still a bunch of errors that probably warrant looking into. but too many that i want to start doing so now. the fact that it throws up these errors probably makes doing this worthwhile. imo.,negative
matrix-org/matrix-react-sdk,eslint,2017-01-20T15:19:38Z,haven't been through all your rule choices. but looks great.we should also do the --max-warnings thing here to keep ourselves honest.,neutral
matrix-org/matrix-react-sdk,eslint,2017-01-23T14:17:10Z,add mocha env for tests in eslint config,neutral
matrix-org/matrix-react-sdk,eslint,2017-01-23T17:34:35Z,correctly get the path of the js-sdk .eslintrc.js. so we work correctly when we're included in another module,neutral
bigcommerce/stencil-utils,karma,2016-03-10T20:45:24Z,merc-409: utilize standard import style. remove jspm and its style of imports.use webpack for generation of a `window` bound bundle. but also support standard es6 module exports for use with dependency bundlers.supports es6. global library export on the dist file. inclusion as a contained module. karma tests as before.mickr mcampa,neutral
bigcommerce/stencil-utils,karma,2016-03-10T20:45:25Z,autotagging mickr mcampa hegrec,neutral
bigcommerce/stencil-utils,karma,2016-03-18T01:42:39Z,ready for review. this does work with the existing theme. just minor changes required to the theme to resolve jspm dep tree.,positive
bigcommerce/stencil-utils,karma,2016-03-18T16:59:58Z,:+1:  lgtm,neutral
bbyars/mountebank,codeclimate,2017-03-08T17:53:35Z,using codeclimate instead,neutral
vvo/selenium-standalone,selenium,2014-09-10T10:23:12Z,to clarify: you use the programmatic interface to start multiple selenium instances and thus hit the event emitter leak?lgtm otherwise.,neutral
vvo/selenium-standalone,selenium,2014-09-22T21:44:25Z,wrapping selenium-standalone to grunt task. i'm into wrap this module in a grunt task just to start and stop the server.do you know how i can kill the server using javascript?do i need to get the pid manually to do it or the function `kill()` available in the module do it for me?,negative
vvo/selenium-standalone,selenium,2014-09-27T15:18:40Z,"i guess this is an npm/node.js windows related bug rather than a selenium-standalone bug. i am sorry i cannot help your further.you should look for `npm ""is not a valid win32 application""` and `node.js ""is not a valid win32 application""`.and use the npm and node.js github repositories. i am sur there's some valuable information.let me know",negative
vvo/selenium-standalone,selenium,2014-09-29T00:53:01Z,i'm making a module which is a grunt plugin to start and stop the server.i'll expose two tasks `selenium:start` and `selenium:stop`. the project uses as dependence `grunt-continue` module to force the stop task to run if the test fails.so:the task `selenium:start` actually is two tasks `selenium-standalone:start` and  `continueon`. in that order.same way `selenium:stop` but `continueoff` and `selenium-standalone:stop` in that order.because of that if any task after `selenium:start` fail the `selenium:stop` will be executed any way.i'll publish it soon,negative
Leonidas-from-XIV/node-xml2js,coveralls,2015-05-29T15:42:43Z,looks good. thanks! currently coveralls.io seems to be a bit broken and i can't add repos. but once it is in working order. i'll merge this.,negative
tabrindle/envinfo,eslint,2018-02-09T16:41:36Z,my bad!  i forgot semicolons.due to the need for iterating over while + calling exec (i hate the way js does regexp) i needed to bend one eslint rule.,negative
wikimedia/service-runner,mocha,2015-09-30T09:14:29Z,d00rman actually. i've found a use-case for this. when running tests. `npm test | node_modules/.bin/bunyan` looses mocha's color-coding and stuff. while it's still handy to see logs in pretty format in case a test is failing. so. adding this `pretty-out` mode to test configs would be a nice thing. what do you think?,negative
wikimedia/service-runner,mocha,2015-10-01T18:18:01Z,i'm also leaning towards keeping things simple. the mocha use case seems to be pretty borderline.,positive
koalyptus/TableFilter,eslint,2018-01-12T11:45:39Z,deprecate grunt eslint. # descriptionremove `grunt-eslint` and move linter configuration in `package.json`.## type of change- [x] developemt workflow change# checklist:- [x] my code follows the style guidelines of this project- [x] i have performed a self-review of my own code- [x] my changes do not lower current test coverage,neutral
tapio/live-server,eslint,2016-04-20T19:33:17Z,good work. thought here my thoughts:why not just keep it simple as `npm install jshint --save-exact --save-dev` and just run it in scripts `... lint: 'jshint ---whatever configs` ....it would have better portability (think of ci server). it would have better consistency `.jshintrc` and it will be generally simpler. instead of 'jshint' it can be 'eslint'. the point here pick something one and have it as developer dependency vs relying on global stuff being installed.,neutral
tapio/live-server,eslint,2016-04-23T05:39:09Z,several improvements. - adds support for mounting files (closes #108)- adds missing dev dependencies (eslint. jshint)- adds cors support (closes #82),positive
tapio/live-server,eslint,2016-04-23T07:44:46Z,thanks!,positive
tapio/live-server,eslint,2016-04-23T08:17:29Z,my pleasure.,positive
tapio/live-server,eslint,2016-04-23T18:00:46Z,i'm still unable to use the `--cors` flag it seems. in chrome requests still get blocked across origins. i have to resort to a chrome extension in order to force cors. i was hoping that `--cors` would eliminate the need for it. did i misunderstand the purpose of the `--cors` flag?,negative
tapio/live-server,eslint,2016-04-23T20:09:06Z,genu you did understand everything right. seems like you're having a problem. can you please share a sample of the code you're using (gist or here in a formatted way)? also please post output of `npm ls` executed in the project's folder. you're having the trouble with.,positive
nathanboktae/mocha-phantomjs,mocha,2015-07-27T09:35:31Z,that log is way too verbose but its likely not the same issue. you probably have something else specificing a different mocha-phantomjs range. what is your deps in your `package.json`?,neutral
cyverse/cyverse-ui,eslint,2017-07-26T22:23:13Z,problem: no configuration for eslint defined. this provides a basic. eslint:recommended definition for the library. it borrows the `.eslintrc` from troposphere:master and upgrades the following packages:- babel-eslint- eslintthis does not address the react-plugin aspects of the lint configuration. this does not fix the violations created by applying the configuration to the repository/library.this is the first of three pull requests. please merge this first. when acceptable.,negative
cyverse/cyverse-ui,eslint,2017-07-31T19:23:34Z,note: the travis build will be broken until #57 is merged.,neutral
cyverse/cyverse-ui,eslint,2017-07-31T20:52:24Z,thanks lenards and psarando! :shipit:,positive
workshopper/workshopper-adventure,standard,2016-09-19T23:09:20Z,standardize. figured i'd just go ahead and do this :)closes #62,neutral
workshopper/workshopper-adventure,standard,2016-09-20T04:36:27Z,should have totally recognised your user. sorry ^_^,positive
workshopper/workshopper-adventure,standard,2016-09-20T04:39:19Z,no worries. happy to help :),positive
stormpath/express-stormpath,eslint,2015-10-30T12:55:29Z,yeah. that i think was something we all agreed on :) :+1:,positive
stormpath/express-stormpath,eslint,2015-10-30T12:56:33Z,yep. just posted it here as a reminder. or else i will forget ;),neutral
stormpath/express-stormpath,eslint,2015-10-30T13:07:14Z,i'm merging this now. new rules and changes should be issued in separate prs.,neutral
stormpath/express-stormpath,eslint,2015-10-30T22:34:24Z,i updated this pr with a merge from master. and eslint fixes.  but as i review this i find myself wanting to clean up a lot of our oauth code. as there are some weird edge cases here (like being able to use basic auth to authenticate through the oauth endpoint. but not actually get a token back).  it also appears that the node sdk isn't returning the correct error code text for the oauth specific errors.i'll revist next week. so please consider this pr a work in progress for the moment,negative
mccormicka/Mockgoose,jasmine,2014-01-11T01:18:44Z,sorry been a busy week. i will look into this now.wavded can you supply the tests in the jasmine format please it makes it much easier for me to implementthanks,positive
mccormicka/Mockgoose,jasmine,2014-01-23T22:17:41Z,hi wavded. currently mockgoose does not support references. this one might take me a while as i will need to look up the api first.also can you write the tests in jasmine. that will help me look into these a bit quicker.thanks,positive
jfhbrook/node-ecstatic,codecov,2016-08-09T17:03:26Z,neat! messing around with this on master to see if i can get the reports to work.,neutral
socketio/engine.io,mocha,2013-04-04T23:47:03Z,add/mocha cloud. test-cloud integration,neutral
typicode/husky,standard,2017-01-16T14:00:45Z,support raw git hook names as npm scripts. hi.i was previously using ghooks which used the raw names for git hooks (`commit-msg` instead of `commitmsg`).i can understand your preference of removing `-` as it's closer to npm standard scripts but it would make the transition from ghooks easier the raw names were also supported.furthermore. i think it's clearer to use the git names because that's what one can find on the internet.plus. i must say that. in my opinion. `commit-msg` is easier to read than `commitmsg`. :),neutral
rooseveltframework/roosevelt-closure,coveralls,2018-02-09T04:48:22Z,add coveralls,neutral
rooseveltframework/roosevelt-closure,coveralls,2018-02-09T05:05:34Z,increase coveralls timeout,neutral
marionettejs/backbone.marionette,jasmine,2013-02-20T15:53:14Z,for my dev process. i have been using `grunt jasmine-server` which i had aliased in to the `npm start` command. it looks like `jasmine-server` is no longer a task. though. is this gone? or is something just missing from the gruntfile. or configuration of the project?,negative
marionettejs/backbone.marionette,jasmine,2013-02-20T16:13:22Z,`options.host` tells phantom what server to connect to. to run the tests. it doesn't start a jasmine web server. i just tried setting that and phantom times out because there's no server to connect to.i would really like to keep the jasmine web server. i prefer this over command line test runners. it's easier for me to see and work with the browser. and it allows me to run the tests against any browser i need instead of being limited to phantom.,negative
marionettejs/backbone.marionette,jasmine,2013-02-20T16:16:51Z,agreed. it's a bit cumbersome... but we use the `jasmine:<task_name>:build` command to tell it to keep the _specrunner.html file around. and serve it up through a `connect` task to replicate the jasmine-server functionality.,negative
marionettejs/backbone.marionette,jasmine,2013-03-05T00:25:41Z,good catch! and thank you for the fiddle. it made a perfect jasmine spec for me :)i had to re-write the suggested fix. though. there were some edge cases that your fix didn't quite catch. this fix is in the dev branch,positive
marionettejs/backbone.marionette,jasmine,2013-03-05T01:44:39Z,cobbweb i would love to get a spec for that... that is what i was trying to do. but couldn't figure out how to test it properly.the intent of dom refresh was to say that this view is in the dom. and it is being re-rendered / refreshed. this is supposed to give us a way to update the dom with confidence... i'm seeing several people report issues around this. though. and i would really like to find a way to test this in the jasmine specs. properly,positive
marionettejs/backbone.marionette,coveralls,2014-06-14T20:34:19Z,marionettejs/marionette-core updated,neutral
marionettejs/backbone.marionette,coveralls,2014-06-16T14:59:26Z,:+1: from me :+1:,neutral
marionettejs/backbone.marionette,coveralls,2014-06-16T17:27:47Z,ahumphreys87 here. you can finally have my :+1: :stuck_out_tongue_winking_eye:,neutral
marionettejs/backbone.marionette,coveralls,2014-07-01T20:09:13Z,run unit tests against src rather than build. currently unit tests are ran against the built lib - this skews coverage reporting as we dont have coverage on the umd code and the external libs.similar to what was done in backbone.radio we should move to run tests against the src folder. this will not only give us nicer reporting in coveralls but more accurate coverage results.as a slight aside this work may make it much easier to deliver marionette as separate components.,positive
marionettejs/backbone.marionette,coveralls,2014-07-01T23:03:28Z,ya!,neutral
behance/lightbox,karma,2016-09-21T22:04:12Z,test: add the karma unit test harness,neutral
behance/lightbox,karma,2016-09-22T15:37:13Z,:+1:,neutral
juliangruber/validimir,coveralls,2015-09-24T11:25:20Z,juliangruber if you're interested. i can create another pr to upload coverage reports to coveralls.io from travis and add a coverage badge to the readme file.,neutral
juliangruber/validimir,coveralls,2015-09-24T11:41:40Z,> juliangruber if you're interested. i can create another pr to upload coverage reports to coveralls.io from travis and add a coverage badge to the readme file.that would be great!,positive
juliangruber/validimir,coveralls,2015-09-24T13:19:11Z,upload coverage reports to coveralls.io. upload coverage reports to coveralls.io after each successful test run in travis and display badge in readme.,positive
juliangruber/validimir,coveralls,2015-09-24T13:20:44Z,juliangruber i think i cannot test this until it's committed. but i believe it should be fine if you enable the repository in coveralls.io before merging.,positive
juliangruber/validimir,coveralls,2015-09-24T21:43:33Z,all good now. just need to wait for the badge in the readme to update :),positive
kriskowal/q,jasmine,2013-01-27T06:50:48Z,it must be something weird with jasmine. ugh. the exit listener isn't even being called.,neutral
kriskowal/q,jasmine,2013-02-05T10:33:53Z,domenic glad to get that back up and running. i just took over development on jasmine-node. sorry for the pain. my intention to never be backwards incompatible. if possible. if there's some things you guys would like/ideas you have to make what you're doing easier please drop an issue on the project. thanks.,positive
PaulLeCam/react-leaflet,eslint,2015-09-24T12:37:52Z,"calling `fitbounds` manually works. but it moves all the bookkeeping logic into our app. which we are trying to avoid with react. the use-case here: we have ""international"". ""country"". and ""project"" views for geocoded data in asia. we use react-router to draw chrome around the map and features on the map depending on the view. it's nice to just update `bounds` like the rest of our data and have react/react-leaflet deal with it.if you would prefer. i can modify `map` to handle a `bounds` prop instead of adding this `boundsmap` component. in that case:- setting `bounds` and (`center` or `zoom`) props is probably a mistake by the user  - it would be nice to log a warning. i don't see any warnings currently used. and `console` statements make the linter complain. do you have a preferred way to do this? can i add a `warn.js` module with `/* eslint no-console: 0 */` that exports a `warn` function?  - if this case happens. which props should react-leaflet use to set the view -- `bounds`. or (`center` and `zoom`)?",negative
jeremyruppel/underscore.inflection,coveralls,2014-07-14T15:12:55Z,mocha. - [x] switch from jasmine to mocha/make tests run on node.- [x] add travis ci.- [x] break out tests into smaller files.- [x] fix code style.- [ ] add coveralls or some kind of coverage.- [ ] add contributors to readme.- [ ] add project page? at least publish tests to gh-pages?,neutral
gcanti/tcomb-form,karma,2015-04-28T09:33:09Z,hi!thanks for the pr. tests was pseudo-manuals. i just added a karma config. now you should see the result in the console.(it's first time i use karma+travis. hope everything's ok),positive
jquery/sizzle,karma,2014-04-28T14:14:33Z,this was a reason why i divided. such a problem could happen either because browserstack is too busy or because of the flaky network connection browser runs on couple of tasks instead of just one.i'm not sure if this could help with any of the cases. but we certainly have to try it.vojtajina please advice. is there something additionally that could be done on karma side or in our config?browserstack same question ?€? is there something that could be done on browserstack side or in our config?,neutral
getsentry/raven-node,mocha,2013-03-05T01:41:50Z,restore back an original style stack for anyone else that cares (e.g. mocha). this was breaking mocha because it expects err.stack to be original style.,neutral
getsentry/raven-node,mocha,2013-03-05T01:46:21Z,how was this breaking mocha? it works on my end for raven-node. or do you mean. when included in another project. it messes with mocha?,neutral
getsentry/raven-node,mocha,2013-03-05T01:52:08Z,if there's uncaught errors. mocha parses the stack trace to pretty-print it. they assume the stack trace has not been changed by anyone else and that it's the original format.not sure why you're not seeing the issues here. my guess it's because either 1) you've never had any errors in your test cases (we should all be so lucky) or 2) because of the way you structure your test cases. you never saw it.you would only see it for errors that were caught by both raven's uncaughtexception handler and mocha's uncaughtexception handler - raven's turns it into a structured stack trace and mocha still expects it to be a string.,neutral
getsentry/raven-node,mocha,2013-03-05T01:54:11Z,azylman that makes perfect sense. :)do you mind moving that parser code into it's own file? compat.js or something to separate it out. along with a comment/link to where it came from.thanks!,positive
getsentry/raven-node,mocha,2013-03-05T02:00:06Z,done!,neutral
getsentry/raven-node,mocha,2013-03-05T02:55:03Z,awesome. thanks!,positive
mozilla/node-convict,coveralls,2014-12-22T17:56:05Z,i've switched it on in coveralls. :+1:,neutral
SparkPost/node-sparkpost,coveralls,2015-08-06T15:25:47Z,implement coveralls to display code test coverage.. add badge to the readme.,neutral
SparkPost/node-sparkpost,coveralls,2015-08-07T13:08:29Z,travis build was successful and info appeared in coveralls.io,positive
SparkPost/node-sparkpost,coveralls,2015-08-07T13:09:57Z,closed by #92,neutral
nteract/nteract,codecov,2016-04-21T00:18:25Z,i got codecov working. i'll be posting a pr when i get back home.,neutral
nteract/nteract,codecov,2016-04-21T02:00:39Z,switch to codecov. ???,neutral
nteract/nteract,codecov,2016-04-21T02:22:57Z,them angry robot legs.,negative
nteract/nteract,codecov,2016-04-21T04:43:49Z,hmmm. the coverage diff only shows the introduction of the new class. i wonder if codecov doesn't know how to deal with jsx.,neutral
nteract/nteract,codecov,2016-04-22T14:33:58Z,not sure why this fails on project coverage with codecov.,negative
nteract/nteract,codecov,2016-04-23T05:06:59Z,i'm going to give you a pass on the codecov and fully expect us to run tests against the high level notebook component soon. :smile:,positive
nteract/nteract,codecov,2016-04-26T16:39:29Z,> what an angry looking chart.i know. right!?  i haven't seen the chart until now.  new feature of codecov?,negative
nteract/nteract,codecov,2016-04-26T16:45:56Z,create a codecov yaml for settings. while i was at it. turned off the codecov sunburst,neutral
nteract/nteract,codecov,2016-04-27T12:21:52Z,awesome. thank you. i just added this same yaml to the whole org.,positive
andyearnshaw/Intl.js,sauce,2014-01-17T10:00:05Z,`tests/saucelabs.js` fails for me at `git rev-parse head`.  the command appears to be returning nothing at all (no errors. even with `--verify`) for the executing script. but correctly returns the current shasum if i run it directly from the command line.any ideas what's wrong here?,negative
andyearnshaw/Intl.js,sauce,2014-01-22T17:29:33Z,it think that error message is a bit misleading. when running locally you need to specify the username (but you don't need to put it into the desired capabilities yourself -- some part of the webdriver library is doing that i suspect).you'll need to create a saucelabs.com account and then pass the username and access key via the sauce_username and sauce_access_key environment variables.,neutral
andyearnshaw/Intl.js,sauce,2014-01-23T09:15:11Z,i suspected last night that the problem was due to the saucelabs credentials being linked to your fork. so i merged. switched to mine and the tests are now running fine.  once again. this is great work. thank you.,positive
andyearnshaw/Intl.js,sauce,2014-01-23T22:07:58Z,hmm... all browsers failed on saucelabs. which seems weird. perhaps it's just a transient error and the travis job can be run again.,negative
andyearnshaw/Intl.js,sauce,2014-01-23T23:08:53Z,we could build into `tests/saucelabs.js` an understanding of which tests are known to fail on which browsers. and not fail the build if those tests fail. i'm not sure if that gets us where we want to be however.,negative
andyearnshaw/Intl.js,sauce,2014-02-08T18:59:33Z,great. thanks :). there's just an obvious oversight i've made in my recent commit with `.tolocalestring` methods: the tests for those methods will now fail in browsers with native intl.  i should have realised this sooner.  so we're back to failing the build again. so soon after i got it passing!  it looks like travis ci's node.js has v8intl built in too. so it's not even reaching the sauce runner.,positive
less/less.js,jasmine,2014-02-17T20:26:16Z,tests fail when grunt-contrib-jasmine is upgraded. no idea why. this is a issue to take a look and fix though. when someone has time,negative
less/less.js,sauce,2014-11-16T15:34:35Z,you could also try with the v2 beta gist above in case it is some regression in the last moments of the release?also we do now test using sauce labs and we will include an ios8 test (though it is emulated which might not help if its a weird timing bug in safari),neutral
wycats/handlebars.js,sauce,2013-12-23T20:13:18Z,attempt to use the travis sauce addon,neutral
bigcommerce/stencil-cli,eslint,2017-05-25T18:16:35Z,"revert ""remove eslint-config-airbnb dependency"". reverts bigcommerce/stencil-cli#307we going to have to revert this since themes are requiring this dependency from `stencil-cli` because of the way we call `eslint` from the cli codebase.bigcommerce/stencil-team",negative
bterlson/eshost-cli,mocha,2017-08-24T00:18:06Z,fix tests on windows. on windows. mocha attempts to invoke the directory `test/bin`. and you can't exec a js file even with a shebang. can someone ensure this works on other platforms as well?,neutral
bterlson/eshost-cli,mocha,2017-08-24T00:18:42Z,thanks to travis for volunteering!,positive
bterlson/eshost-cli,mocha,2017-08-24T13:15:01Z,excellent!,positive
node-nock/nock,coveralls,2015-03-20T21:35:00Z,somehow i missed that you are already using travis ci. you can configure travis ci to run `npm run coveralls` which will update coverage.,negative
walmartlabs/eslint-config-walmart,eslint,2016-05-23T17:47:18Z,update eslint-plugin-react + readme to track latest. ryan-roemer,neutral
walmartlabs/eslint-config-walmart,eslint,2016-05-23T23:54:44Z,:ship:probably good to get ryan-roemer's eyes on it as well though,neutral
walmartlabs/eslint-config-walmart,eslint,2016-05-23T23:59:01Z,baer dylancwood -- lgtm. anyone get a change to test this on a real project?,neutral
walmartlabs/eslint-config-walmart,eslint,2016-05-24T00:23:25Z,baer. i don't have any react projects laying around to test this on. also. looks like a cli merge is in order...,neutral
walmartlabs/eslint-config-walmart,eslint,2016-05-24T21:07:49Z,correct paths in readme referring to the old defaults project. since this project is no longer `eslint-config-defaults` the paths in the readme need to be corrected so that eslint can actually find the package in node_modules.,neutral
walmartlabs/eslint-config-walmart,eslint,2016-06-08T16:49:27Z,update eslint-config-filenames,neutral
walmartlabs/eslint-config-walmart,eslint,2016-06-08T16:54:47Z,lgtm,neutral
walmartlabs/eslint-config-walmart,eslint,2016-06-08T16:57:48Z,fix nit and incorrectly nuked `rules` thing. get ci green. then lgtm without re-review.,neutral
jshint/fixmyjs,jshint,2013-08-02T19:53:06Z,what's your `.jshintrc` say for `indentpref`?,neutral
jshint/fixmyjs,jshint,2013-08-07T12:05:23Z,if after else . ``` jsif (x) {    dosomething();} else if (!x + 1) {    alsodosomething();}```will be turned into``` jsif (x) {    dosomething();} else {    if (!x + 1) {        alsodosomething();    }}```i think there should be an option to combine `else`'s with `if`'s jshint doesn't bother me about the first.,negative
jshint/fixmyjs,jshint,2013-08-07T22:51:57Z,thanks for the pull request. merged here 7cd4033239084dd61ae1bc6e546d95712ee1edd9,positive
hoodiehq/hoodie,sauce,2013-11-22T18:56:42Z,svnlto can you add - latest chrome+- latest firefox+- latest safari+- ie10+as browsers to test with saucelabs? i guess you add it to gruntfile.js. right? but i don't know the syntax. if you could do it or point me to the right docs. that'd be great,positive
hoodiehq/hoodie,sauce,2013-11-25T09:16:09Z,gr2m this is being fix as part of the saucelabs pr.,neutral
hoodiehq/hoodie,karma,2013-07-12T14:20:09Z,replaces testem.js with karma,neutral
hoodiehq/hoodie,karma,2013-07-12T16:40:52Z,fuck yeah! ^5,negative
hoodiehq/hoodie,karma,2013-07-19T08:24:48Z,gr2m going to close this as we're using `karma` now.,neutral
cucumber/cucumber-js,coveralls,2017-06-29T12:45:39Z,stop coveralls comments. when i watch cucumber-js's log in slack. the coveralls comments are just noise.is it possible to turn them off?,neutral
cucumber/cucumber-js,coveralls,2017-06-29T14:28:57Z,feel the same way and i already turned them off,neutral
cucumber/cucumber-js,coveralls,2017-06-29T14:34:12Z,.,neutral
statful/statful-relay,mocha,2016-11-04T11:57:52Z,remove sleep as a dev-dependency. remove platform dependent sleep and use mocha done sync function for bootstrapping tests.,neutral
cloudchen/grunt-template-jasmine-requirejs,jasmine,2014-01-20T14:04:08Z,fix for #52 - change contexts temp value according jasmine script sources. this should fix the issue when a wrong path to require.js lib is usedwhen jasmines outfile option is specified.,negative
cloudchen/grunt-template-jasmine-requirejs,jasmine,2014-01-23T07:18:08Z,thanks for you attention and pr.because this template has no idea of where the location of spec runner is. which depends on exporting of `grunt-contrib-jasmine`. i have sent pr to request needed information by `grunt-contrib-jasmine`. we can proceed as long as that pr is accepted.,neutral
cloudchen/grunt-template-jasmine-requirejs,jasmine,2014-01-23T13:13:10Z,yes. you're right. doing it this way would be a better approach!but when it's added into the `grunt-contrib-jasmine` task. we have to keep in mind to calculate the relative path to the `gruntfile.js` where the `.grunt`directory will be located.will the temporary `.grunt` directory always be in the same location as the `gruntfile.js`? so it's possible to simply use `__dirname` to calculate the correct relative location?,neutral
cloudchen/grunt-template-jasmine-requirejs,jasmine,2014-01-24T07:28:23Z,`__dirname` doesn't work for that. it always returns `node_modules/grunt-template-jasmine-requirejs/src` which doesn't help.what we only need to calculate is that the relative path of `require.js` file to `spec_runner.html`.the location of `.grunt` folder doesn't matter i think.,neutral
cloudchen/grunt-template-jasmine-requirejs,jasmine,2014-02-04T08:46:49Z,ok. thanks for the clarification. i've downgraded the host package and it's working again. i'll close this issue. as grunt-contrib-jasmine is causing the conflict,positive
cloudchen/grunt-template-jasmine-requirejs,jasmine,2014-02-05T06:02:19Z,all source files. spec files. vendor files and so on come from host grunt task `grunt-contrib-jasmine`.ignore files feature should not be implemented by this template. send pr to host package.,neutral
appium/appium,selenium,2014-05-21T13:42:33Z,"bug with long press  with drag and drop. i am try to long press with drag and drop with the below code webelement we = driver.findelement(by.name(""internet""));new touchactions(driver).longpress(we).movebyoffset(130. 140).build().perform();but above code give an exception ava.lang.nullpointerexception    at org.openqa.selenium.interactions.movetooffsetaction.perform(movetooffsetaction.java:37)    at org.openqa.selenium.interactions.compositeaction.perform(compositeaction.java:31)so how we long press with drag and drop using appium",negative
appium/appium,selenium,2014-05-23T01:42:06Z,"yes. there's an issue for this already on the java-client.there's also a pull request i've sent to the selenium java client. to make it easier to add custom errors in a cleaner manner.i think there might be a way to access the ""original error"" or ""inner error""? want to take a look at the code. perhaps submit a pull request?",negative
appium/appium,selenium,2014-05-27T16:38:58Z,i'm using selenium python client ...but now i'm going to try with appium one. by the can you please clarify how to do with selenium one too...thanks for helping..,positive
appium/appium,selenium,2014-06-03T18:44:27Z,do we still need this? it looks like it's fully implemented for native ios now.,positive
appium/appium,selenium,2014-06-03T18:48:01Z,been thinking about this for a while; i don't think there's any way to take a screenshot using javascript. all we can do from the native side is get what's currently in the app window.,neutral
appium/appium,selenium,2014-06-04T17:01:17Z,the right way is not to use the old selenium touch api but instead the new one. which client are you using?,neutral
appium/appium,selenium,2014-06-05T21:57:13Z,"is this a performance issue between using `driver.findbyid(""q"")` vs `driver.find(by.id(""q""))?if so. it's totally the selenium java implementations fault. i think the `by` functions involve a bunch of extra function calls. possible involving reflection.",neutral
appium/appium,selenium,2014-06-10T18:44:08Z,closing unless omerobaid is still experiencing trouble.,negative
appium/appium,selenium,2014-06-12T13:03:06Z,i am using this:this.browser                .elementbyname('section2row3')                .then(function (el) {                    var action = new wd.touchaction(browser2);                    action                        .press({el: el});                    return action.perform();                })                .elementbyname('section1row2')                .then(function(el) {                    var action = new wd.touchaction(browser2);                    action                        .moveto({el: el});                    return action.perform();                })                .then(function() {                    var action = new wd.touchaction(browser2);                    action                        .release();                    return action.perform();                })also cannot scroll. i think it has something to do with apple's own framework. i think..,neutral
appium/appium,selenium,2014-06-12T18:40:53Z,ankit9568 you should be using the new touchaction methods with the appium java-client.```new touchaction(driver).longpress(we).moveto(we. 130. 140).perform();```make sure to read the documentation for `.moveto()` since it's actually an offset from the upper left corner of the `we` object.,neutral
appium/appium,sauce,2014-03-24T17:27:57Z,you need a mac to run the iphone simulator. or you could use a service like sauce labs.,neutral
appium/appium,sauce,2014-03-31T14:10:43Z,build upload to sauce,neutral
appium/appium,sauce,2014-04-07T16:51:51Z,hey paymand can you get in touch with me at my username at saucelabs.com? got a question for you over e-mail and didn't find any contact info for you on github.,neutral
appium/appium,sauce,2014-04-16T18:34:47Z,'device-orientation' is a sauce-specific capability. it's not supported by the appium server.,neutral
appium/appium,mocha,2014-06-10T12:05:08Z,sebv: you run the test with mocha. right? what was the command to run it again?,neutral
appium/appium,mocha,2014-06-10T12:05:57Z,`device=android mocha test/functional/android/webview-specs.js`,neutral
appium/appium,coveralls,2016-03-08T19:22:51Z,apologies if this is a silly query.but i wonder what does this do when coveralls doesn't have this configured for core repo.,negative
jhipster/generator-jhipster,mocha,2014-05-24T14:38:35Z,add grunt option to mocha tests,neutral
jhipster/generator-jhipster,eslint,2016-04-30T07:30:40Z,made some changes... - passing debug_info_enabled fromt app.constants (set their by gulp.)- renaming to activeprofiles to profileservice (exposes profileinfo() that returns 1 response object containing properties like activeprofiles / inproduction / ribbonenv. it makes the service easier to read and easier to cache. )- eslint passed- travis checks passed,negative
jhipster/generator-jhipster,eslint,2016-05-03T03:13:52Z,you also have eslint errors,neutral
jhipster/generator-jhipster,karma,2017-01-19T14:56:51Z,i deleted the comment : > i noticed that a lot of karma tests related to angularjs have been> removed. why ? look at the karma spec folderbecause i just found out that they are always here :),neutral
jhipster/generator-jhipster,karma,2017-01-20T22:19:56Z,password component karma spec. prevent js karma test from being copied,neutral
jhipster/generator-jhipster,karma,2017-01-22T22:40:48Z,guys is this ready to merge?,neutral
jhipster/generator-jhipster,karma,2017-01-22T22:41:59Z,yes deepu105,neutral
jhipster/generator-jhipster,karma,2017-01-23T06:45:34Z,still travis fails right ? is it a fix for that ?,negative
jhipster/generator-jhipster,karma,2017-01-23T08:14:02Z,isn't it a karma test ?,neutral
jhipster/generator-jhipster,karma,2017-01-24T10:11:50Z,ng2 settingscomponent karma spec. - fix passwordcomponent and healthcomponent spec files- add settingscomponent spec filerelated to #4302,neutral
jhipster/generator-jhipster,karma,2017-01-24T22:30:15Z,oh maybe mohamed2a can you take the code here and put it in your other pr? it will be in a better place than here. because it will run karma testsso i can close this pr,neutral
jhipster/generator-jhipster,karma,2017-01-29T22:36:54Z,mohamed2a ramzimaalej are you guys planning to write any more karma tests? else lets close this,neutral
jhipster/generator-jhipster,karma,2017-01-30T09:43:02Z,i will add more karma tests today,neutral
jhipster/generator-jhipster,karma,2017-01-30T20:14:32Z,add activate component karma test. related to #4302,neutral
jhipster/generator-jhipster,karma,2017-02-01T23:02:51Z,add registercomponent karma test,neutral
jhipster/generator-jhipster,karma,2017-02-06T18:28:33Z,ng2 karma tests. add this following component tests : - sessionscomponent- passwordresetinitcomponent,neutral
jhipster/generator-jhipster,karma,2017-02-06T21:01:36Z,tests are failing with missing imports,neutral
jhipster/generator-jhipster,karma,2017-02-07T16:25:33Z,i'm working on passwordresetfinishcomponent test. i will push today.,neutral
jhipster/generator-jhipster,karma,2017-02-08T19:13:18Z,mohamed2a great work,positive
jashkenas/underscore,eslint,2014-05-20T16:14:51Z,ok. eslint error. i'll fix that...,negative
jashkenas/underscore,eslint,2014-05-25T03:09:12Z,minimise eslintrc file by only including overrides of eslint defaults. merging immediately.,neutral
jashkenas/underscore,eslint,2014-05-25T03:18:06Z,enable eslint block-scoped-var rule. this rule treats all `var` declarations as if they were `let` and then checks for reference errors. a few declarations had to be lifted out of their blocks.,negative
jashkenas/underscore,eslint,2014-05-25T06:09:22Z,this pr makes changes to the eslint rules too. mind summarizing what the changes do?,neutral
jashkenas/underscore,eslint,2014-05-25T06:11:11Z,why? it seems unnecessary.,negative
jashkenas/underscore,eslint,2014-05-25T06:27:30Z,i think it's more readable when variables are declared in the outermost block in which they are referenced. i know it's not necessary in javascript due to hoisting. but it is easier to read when you know such a style is enforced.,negative
jashkenas/underscore,eslint,2014-05-25T06:35:39Z,> i think it's more readable when variables are declared in the outermost block in which they are referenced. ya. i don't think it is. my style has changed over the years though and it's not my call.i dig the warnings for unused variables. which could be done with any linter. however this other stuff is just distracting imo.,neutral
jashkenas/underscore,eslint,2014-05-26T01:17:56Z,yes. some of these are fine -- but pulling the `(var j)` out of a for loop is bizarre and unidiomatic. let's not go there.,negative
jashkenas/underscore,eslint,2014-05-26T01:23:57Z,it was pulled out because the same `j` was referenced outside the loop body (generally a bad pattern).,negative
jashkenas/underscore,sauce,2015-02-17T22:46:17Z,no particularly good one. just did that to prove it works. going to be trying to get sauce working hopefully. so it can be removed soon,neutral
jashkenas/underscore,sauce,2015-02-20T16:01:32Z,use async retries to avoid rare throttle false-negative. this was causing me to lose my sanity with the sauce tests,negative
jashkenas/underscore,sauce,2015-03-14T18:50:00Z,mind adding a failing test case as osolo describes in #2081 i want to see if sauce catches it,negative
jashkenas/underscore,karma,2015-02-17T20:40:18Z,refactor tests; don't install phantom by default; karma for browser tests. this makes the node tests the default instead of headless mode and uses karma to run the phantomjs/whatever browser testsadded a package.json script `npm run test-browser` to run phantomjs tests. otherwise just lints and runs the suite in node. `travis` will still run the tests in phantom + firefoxwork up to #1835 (hopefully),neutral
jashkenas/underscore,karma,2015-02-17T20:49:15Z,can you explain what this gives us?,neutral
jashkenas/underscore,karma,2015-02-17T21:41:30Z,any reason to test in firefox 10? it's a bit dated.,neutral
jashkenas/underscore,karma,2015-02-19T22:35:14Z,saucelabs setup. todos in subsequent pull requests:- [ ] run tests on ie6.7.8 (currently unsupported by karma)- [ ] clean up the travis file (develop a karma plugin to limit how many browsers they start at a single time. they have no interest in limiting based on irc chats)this is a continuation and resolves #1835 **do not merge until travis passes** (i'll work on this again tongiht),neutral
jashkenas/underscore,karma,2015-02-20T15:14:25Z,:balloon: this is sorely needed. especially after yesterday. :+1:,neutral
jashkenas/underscore,karma,2015-02-20T16:22:16Z,bravo!,neutral
keycloak/keycloak-nodejs-connect,jshint,2016-04-08T12:06:58Z,minor fixes and updates. - some jshint fixes- dependencies updated- grunt-mrdoc commented due instability of the plugin.,neutral
keycloak/keycloak-nodejs-connect,jshint,2016-04-08T12:44:28Z,looks good.  perhaps we should be adding in a .jshintrc file with the specified jshint rules?  that could be another pr too,neutral
keycloak/keycloak-nodejs-connect,jshint,2016-04-08T12:50:31Z,lholmquist i agree.lance other day commented on the establishment of rules.,neutral
keycloak/keycloak-nodejs-connect,jshint,2016-04-08T13:04:58Z,lholmquist helio-frota +1 and makes sense for another prhelio-frota regarding the mr-doc commented. why not just remove it?,neutral
keycloak/keycloak-nodejs-connect,jshint,2016-04-08T13:06:44Z,abstractj for me is ok. we can think later about the docs.,neutral
keycloak/keycloak-nodejs-connect,jshint,2016-04-08T15:52:43Z,updates and cleanup. - some jshint fixes.- grunt removed.- skeleton of a tape test.- using npm scripts and make.,neutral
sroberts/hubot-vtr-scripts,jasmine,2014-07-09T21:03:20Z,fix jasmine problem. jasmine reporters broke and jasmine has yet to fix it. implemented workaround to fix tests.,neutral
sroberts/hubot-vtr-scripts,jasmine,2014-07-09T21:03:51Z,snipe you should be good now.,positive
zemirco/json2csv,eslint,2018-01-22T21:50:52Z,add eslint and simplify travis config. add eslint and simplify the travis stuff a bit,neutral
urish/firebase-server,mocha,2015-10-27T01:32:42Z,"might make sense to set an environment variable that sets verbose logging``` jsvar loggingenabled = !!process.env.debug`````` json{  ""scripts"": {    ""debug"": ""debug=1 mocha""  }}```",neutral
urish/firebase-server,mocha,2015-10-27T01:47:37Z,"we should add an `npm run watch` target.``` json ""watch"": ""mocha -w -r test/mocha-babel.js test/*.spec.js""```we may need to go back to using the `--compilers` flag for watch. from the mocha docs:> transpilers may be used by mapping the file extensions (**for use with --watch**) and the module name > _(emphasis added)_not sure what the mechanism is there. if it ends up being too complicated we could just set an environment flag when watching and throw inside `mocha-babel.js` if generators are not supported natively (forcing people to run `watch` on node >= 4)",negative
urish/firebase-server,eslint,2015-10-26T06:12:30Z,switch to a zero-config style standard.. i think `xo` is probably the closest match to the existing style (1 tab. semicolons). i use `xo` on most of my new projects. as i found i generally can do what i want with the fewest number of `eslint-disable-line` comments.`standard` is probably the most common. but would require significant modification of existing code (2 spaces. no semicolons).,neutral
urish/firebase-server,eslint,2015-10-26T13:35:43Z,thanks. i will have a look into those...,positive
brunch/brunch,mocha,2013-02-20T07:54:37Z,any ideas on how to add code coverage to brunch as well?,neutral
brunch/brunch,mocha,2013-02-20T08:09:19Z,not sure if there?€?s any _super simple_ coverage tool available (like mocha-phantomjs),positive
brunch/brunch,mocha,2013-03-02T20:42:58Z,you mean like `brunch test` command? it?€?s super shitty because of jsdom. i?€?m in process of migration to new software. suggest you to use mocha-phantomjs until them,positive
brunch/brunch,eslint,2016-01-07T12:40:41Z,fix eslint issues,neutral
reactabular/reactabular,eslint,2015-03-26T08:53:54Z,great. i merged the work to master and set up eslint. feel free to do your work directly there. as long as eslint passes i'm fine.,positive
reactabular/reactabular,karma,2015-10-05T10:10:53Z,bebraw oh yes! :) :+1: it will be replaced by mocha? tape? karma?,positive
yahoo/mojito,selenium,2013-01-29T22:21:40Z,travis has errors ff/selenium unrelated,neutral
agda/agda-stdlib,standard,2017-12-20T15:08:35Z,tidying up lexicographic orderings over lists. achieves: - increasing the level polymorphism as per #180  - moves the content shared by `strictlex` and `nonstrictlex` into `lex.core` - standardised the notation used within the modules. now uses `_???_` for the base relation and `_<_` and `_???_` for the resulting lexicographic - added a few extra proofshopefully everyone agrees that this makes the files far easier to read.edit: definitely backwards compatible as everything is re-exported from the deprecated `relation.binary.list.(non)strictlex`,neutral
agda/agda-stdlib,standard,2018-01-15T15:42:20Z,> this seems like a reason to call it vec to me. to be consistent with traditional linear algebra. in fact. my main use case for this whole thing is based on linear algebra.hmm. that is a fair point! however i think we really should place it in a top level `data.x` folder. as we're going to hopefully have the whole standard heirarchy for this thing eventually (e.g. `data.x.properties`. `data.x.relation` etc.) and it's going to be very confusing for people if it's nested inside in `data.fin`.obviously `vec` is taken. do you or gallais have another suggestion that isn't `vec` or `table`?,negative
jprichardson/string.js,mocha,2013-02-02T13:41:47Z,so far it just tells you which browsers it fails on and leaves it up to you to do manual testing using those browsers.  getting better reports out of it is high on the priorities list though.  the plan is to store the html state of the web page at the end of its operation so you can view the mocha report exactly as if you had run the tests yourself in that web-browser.,neutral
jprichardson/string.js,sauce,2015-05-30T22:41:40Z,add sauce-ci,neutral
jprichardson/string.js,sauce,2015-05-30T23:11:53Z,`gulp test` now runs both `gulp unit-test` ( run with mocha ) and `gulp browser-test` ( run with mochify using opensauce). all the major browsers are added.,neutral
jprichardson/string.js,sauce,2015-05-31T18:03:40Z,looks good!,positive
QubitProducts/cherrytree,sauce,2015-08-21T09:10:25Z,yeah. happy to switch to travis. i am using saucelabs - do you know is there away to hide the saucelabs token when setting up the travis project?,neutral
QubitProducts/cherrytree,sauce,2015-08-27T09:52:24Z,hm. i don't quite get sauce - under that username - i have more than one project. i probably need to create another user specifically for this project?,neutral
alphagov/govuk_elements,standard,2016-09-02T12:58:48Z,hi nickcolley yes i know more needs doing :).i think perhaps .js element would be good here so if no-js we would have an alternative being the standard file upload. i will spend some time looking into it also. thanks nick.,positive
styled-components/css-to-react-native,eslint,2018-01-31T08:58:17Z,closing because we merged the other pr!,neutral
webdriverio/wdio-allure-reporter,mocha,2016-06-23T18:53:50Z,can't we just use babel as mocha compiler and use all the nice es2016 stuff for tests too?,positive
webdriverio/wdio-allure-reporter,mocha,2016-06-24T21:00:14Z,something has changed in events flow. i guess you have updated dependencies. and mocha-frameworks now fires events differently than before.for. example for testcase `should report failed before-all hook` now our before hook are not considered as failed. and test is still run however it should not. i tried to return rejected promise instead of throwing error. and then it works.i think there is an issue in wdio-mocha-framework or maybe mocha itself regarding synchronous exception handling.i will come later with more detailed bug report.,negative
linkeddata/rdflib.js,mocha,2016-12-27T17:27:47Z,looks like this issue has been addressed by the mocha test suite. and is safe to close?,positive
linkeddata/rdflib.js,mocha,2017-01-03T19:49:11Z,as an added benefit. i've finally killed off `nodeunit`; all unit tests get to be mocha moving forward :),negative
jonaskello/tslint-immutable,coveralls,2017-09-27T14:41:15Z,i think the branch where there are multiple ignore-prefix is not covered by the tests. that's why coveralls complains. however this should not be a problem so i will go ahead and merge anyway :-).,negative
angular/angular-seed,karma,2014-03-28T12:25:35Z,fixed by #162,neutral
angular/angular-seed,karma,2014-03-28T12:39:29Z,the has been refactored in the latest angular-seed,neutral
angular/angular-seed,karma,2014-03-28T13:02:51Z,this pr is outdated.  if there are any useful bits still in it can you rebase and create a new pr?thanks,positive
angular/angular-seed,karma,2014-03-28T13:04:48Z,we are using protractor for e2e tests now.,neutral
alexgorbatchev/node-browser-builtins,sauce,2013-11-28T16:15:42Z,as a final part of this. this repo will need to be enabled in travis-ci and then i can add the env vars for saucelabs testing.,neutral
alexgorbatchev/node-browser-builtins,sauce,2013-12-02T17:58:21Z,defunctzombie i'm very excited about saucelabs btw :),positive
mozilla-comm/ical.js,sauce,2015-06-18T21:07:40Z,support ie9 again. with this ticket. all tests pass under ie9 again. as tested by saucelabs.,positive
mozilla-comm/ical.js,karma,2015-06-17T19:38:24Z,run browser tests using karma and saucelabs,neutral
mozilla-comm/ical.js,coveralls,2015-04-20T22:58:27Z,add coveralls coverage support,positive
jshint/jshint,jshint,2013-01-18T10:08:24Z,"cannot reuse variable in for in loop if it has been used in a function of a previous for in. ```(function () {    /*jshint loopfunc:true */    ""use strict"";    var field.        obj = { a: 1. b:1 };    for(field in obj) {        if (obj.hasownproperty(field)) {            var print = function() {                console.log(field);            };            print();        }    }    for(field in obj) {        if (obj.hasownproperty(field)) {            console.log(field);        }    }})();```if you try to validate this code with jshint. it will generate the following error:```test.js: line 18. col 13. bad for in variable 'field'.```the reason seems to come from the fact that i use `field` in `print` function. if i remove it jshint does not generate any error.i don't see any reason why reusing `field` as for in variable is bad.could it be a bug in jshint?",negative
jshint/jshint,jshint,2013-01-18T22:17:17Z,i with axkibe too. in that i want to error on unused var and globals. but not on unused function parameters.,neutral
jshint/jshint,jshint,2013-01-18T22:38:28Z,this makes sure that `.jshintignore` entries are relative to the file itself. if you want to ignore all files with name. let's say. `wat.js` you just need to put `**/wat.js`. i think everything works as expected here.,neutral
jshint/jshint,jshint,2013-01-21T17:15:43Z,wsh.js missing. hi.the env folder with the file wsh.js is now missing in the master download.my intent is to integrate jshint in visual studio 2012 express edition by using windows scripting host. the env folder was part of the jshint-master.zip package six month ago. but does not exist anymore.it would be great to include that env folder again.best regards,positive
jshint/jshint,jshint,2013-01-24T04:24:08Z,i would be in favor of removing the jshintrc and the jshintignore altogether and just having your one config.json. it looks like you can maybe do either a jshintrc or a config.json but i think it's more common practice to just stick to a config.json file.,neutral
jshint/jshint,jshint,2013-01-25T02:10:44Z,look for .jshintrc's in the directory being linted?. given:```lib/  .jshintrc  myfile.jstest/  .jshintrc  mytest.js```i tried```jshint lib test```but neither of my `.jshintrc`s were found. this is expected behavior. i guess. since the readme says it looks in the cwd. still. it's pretty awkward: now i have to do```cd lib && jshint . ; cd ../test && jshint . ; cd ..```and i guess it would be impossible to have nested `.jshintrc`s.any chance on using the closest `.jshintrc` when linting a file? i know that's a pretty big and probably backward-incompatible change though. so if not. i understand.,negative
jshint/jshint,jshint,2013-01-26T00:00:11Z,"uh. i'd rather extend the default config to accept pre-directory entries:``` json{    ""global"": { ""strict"": true }.    ""test/**"": { ""strict"": false }}```or something like that. but that'd be another ticket.",negative
jshint/jshint,jshint,2013-01-28T14:59:06Z,jshint-next was merged into the main repository - i can't find any related changes.reopen?,neutral
jshint/jshint,jshint,2013-01-28T16:29:05Z,medikoo i was thinking something along the lines of in the config.json file. having a property that took a regexp to define what files you were going to lint.  does this with his own custom brunch-jshint package and i've found it to be extremely useful.,positive
jshint/jshint,jshint,2013-01-28T16:35:07Z,sirzach regexp is good for defining more abstract patterns (e.g. take only .js files) but it's not that handy for listing specific paths,neutral
jshint/jshint,jshint,2013-01-29T16:32:27Z,+1i was looking for this feature to be abled to build a svn pre-commit hook using 'svnlook cat'.now i will have to write all content to temporary files first.,neutral
jshint/jshint,jshint,2013-01-30T20:29:15Z,why was this closed? is `let` support not in the plans anymore? and if so. why?,neutral
jshint/jshint,jshint,2013-01-30T22:02:58Z,i'm working on es6 features support but i don't want a ticket for every single feature.,negative
jshint/jshint,jshint,2013-01-30T22:03:51Z,awesome. thanks for the quick reply!,positive
jshint/jshint,jshint,2013-02-01T19:00:40Z,i would love this as well as often when debugging i'll just throw in a return statement but then jshint (run automatically) complains,negative
jshint/jshint,jshint,2013-02-04T17:58:04Z,build (another?) rhino bundle with debug:false and console shim. rhino doesn't have console api so console.\* methods fail. the proposal is to build another bundle (jshint-rhino-lib) without the shebang but with debug:false and console api shim.,neutral
jshint/jshint,jshint,2013-02-08T01:15:37Z,here's a use of ! that jshint thinks is confusing. but seems to be the simplest way to go about the problem:```var foo;console.log(foo <= 7. !(foo > 7));// false true```i'd really like to be able to turn confusing ! checking off. but i didn't see  an option for it in the docs.,negative
jshint/jshint,jshint,2013-02-11T03:11:01Z,don't skip directories when searching for .jshintrc.. instead of moving on to the parent directory when a .jshintrcfile was not found. the cli script was checking the'grandparent' directory. a test was added to demonstrate theissue / prevent regressions.references:    fixes gh-850,neutral
jshint/jshint,jshint,2013-02-11T03:34:45Z,i think there are other reasons to do this rather than multiple .jshintrc files for project (although that would be a nice side-benefit).  as a developer. when i put a .jshintrc file above a .js file in my project. i'm saying that i want that rc file to apply to that js file - where i'm running jshint from isn't really relevant to me. i just want those files checked correctly. without having to worry about the cwd. or more significantly. where my editor is running when it's doing linting. i can't stress how annoying it is to have vim throw a bunch of errors at me. just because i forgot to cd before opening a .js file. then i've got to close it. cd. and re-open it. makes all my nice fuzzyfinder fast open shortcuts kinda useless.if you're willing to reconsider the feature. i'd be happy to put together a patch for this. i did a bit of research. and while looking up a .jshintrc per file is a bit more work. the drawbacks could be minimized by memoizing the .jshintrc file lookup by target path. i think most of the work would come from re-working the config tests.tl;dr: lookup relative to linted file makes life easier. better represents developer intent. & shouldn't add significant overhead to the linting process.,negative
jshint/jshint,jshint,2013-02-12T08:13:36Z,+1indeed. that demands rather patch for an editor than jshint. it probably should never land. and if such decision was made. it should definitely be an option that is off by default.,neutral
jshint/jshint,jshint,2013-02-12T09:58:45Z,var that = this;. we have the problem that jshint complains about:```line 1: var that = this;'that' is defined but never used```this is completely right ;-). but is there the possibility to disable this check for specific variable names?,negative
jshint/jshint,jshint,2013-02-12T19:02:46Z,i'd like this too.,positive
jshint/jshint,jshint,2013-02-12T19:39:32Z,nope. we don't have it. jshint treats all unused variables equally?€?i suggest writing a custom reporter if you want to skip some warnings but not others.,neutral
jshint/jshint,jshint,2013-02-13T16:00:41Z,"window.eval triggers error even with evil:true. on jshint.com with the code```window.eval(""x=1"");```and ""about eval"" disabled. jshint shows the error""expected an identifier and instead saw 'eval' (a reserved word).""",positive
jshint/jshint,coveralls,2014-12-17T16:20:20Z,add coveralls coverage badge to readme.md,neutral
lykmapipo/kue-scheduler,mocha,2016-10-21T08:49:25Z,your use case is the same as mine.but your test is not built correctly. you are summarizing the number of task run in on of the nodes. you should save information of the task into a db(or back at redis). and verify it from there.i found mocha a bit weird for those type of integration tests. and i use docker and py.test.,neutral
angular/angular.js,standard,2015-11-02T09:14:03Z,updated to danish standards,neutral
angular/angular.js,standard,2015-11-02T11:50:44Z,lgalfaso thanks for the link. an edit have been requested at the right place,positive
angular/angular.js,standard,2015-11-02T11:54:51Z,squazz once the change goes into google closure. feel free to open a new issue to generate the locale files once again.,neutral
angular/angular.js,standard,2015-11-02T11:58:26Z,lgalfaso i will try to. but i'm sure i know how to :p,neutral
angular/angular.js,standard,2015-11-02T13:42:39Z,"if you just open an issue with ""please regenerate the locale to see the changes from xx reflected"". is good enough. someone will recreate the files",positive
angular/angular.js,standard,2015-11-02T14:11:00Z,lgalfaso ok. thanks man! :+1:,positive
angular/angular.js,standard,2015-11-06T06:28:32Z,i still think this is worth removing that ugly loop. but feel free to close it if you disagree.  note that your snippet above won't work (i think...) because these are (always? often?) `jqlite` objects and not arrays so the `delete` is needed in addition to the `length` change...,negative
angular/angular.js,standard,2015-11-15T20:05:04Z,docs(guide/conceptual overview): $http.success is deprecated. using the standard then method instead success. because success is deprecated,positive
angular/angular.js,sauce,2013-06-19T08:09:47Z,saucelabs tunnel setup demo. this pr demonstrates how we can establish a tunnel to saucelabs.,neutral
angular/angular.js,sauce,2013-07-01T18:10:18Z,obsolete now.,negative
angular/angular.js,karma,2013-04-25T22:59:50Z,$httpbackend.passthrough() does not exist when running unit tests. when i try to run my unit tests with karma. i try to do:``` javascript$httpbackend.when('get'. /\.html$/).passthrough()```so that the templates that angular tries to load and loaded properly however when running the unit test. it tells me the $httpbackend does not have a method of passthrough().right now i and loading the templates manually with jquery and with the that the tests run fine.i think this might be related to the issue detailed here : #2370,negative
angular/angular.js,karma,2013-05-09T20:12:50Z,tamtakoe - i am afraid that we won't be able to merge your changes without tests.  as a start i suggest that you at least try running the current tests against your changes. install karma and grunt-cli globally```sudo npm install -g karma grunt-cli```then install the local dependencies```npm install```then to run the unit tests```grunt test:unit```or```grunt autotest```,negative
dc-js/dc.js,jasmine,2013-11-18T22:21:57Z,removed guard in favor of grunt-contrib-watch. also improved watch tasks. this removes all gem dependencies.`grunt watch:scripts` watches for source changes and rebuilds dc.js. etc.`grunt watch:tests` runs the tests whenever test files are modified.`grunt watch:jasmine_runner` updates the jasmine_runner.html file whenever jasmine tests are modified.`grunt watch:reload` should be equivalent to guard livereload.,negative
dc-js/dc.js,jasmine,2013-11-21T15:32:54Z,closing - we will be deprecating vows and moving to jasmine,neutral
dc-js/dc.js,jasmine,2013-11-21T15:52:21Z,we also should figure out how to move these tests to jasmine. although i'd still like to keep them using jsdom rather than phantom so we'll have exact output.,neutral
dc-js/dc.js,jasmine,2013-11-22T00:41:06Z,working on it. seems like that branch was merged into the official grunt-contrib-jasmine.,positive
dc-js/dc.js,jasmine,2013-11-22T01:06:26Z,now merges cleanly and fixes grunt-contrib-jasmine. i'm also submitting a separate pull request with the grunt-contrib-jasmine fix so you don't have to review all of this before travis will pass for everyone else.,neutral
dc-js/dc.js,jasmine,2013-11-22T01:11:13Z,fixed grunt-contrib-jasmine to point to existing branch,neutral
dc-js/dc.js,sauce,2014-03-21T17:52:12Z,"sclevine. do you have any idea what's going on here?```running ""saucelabs-jasmine:all"" (saucelabs-jasmine) task=> starting tunnel to sauce labs>> invalid api_key provided. please use your access key to start sauce connect. not your password.you can find your access key in your account page:  could not create tunnel to sauce labs```",neutral
dc-js/dc.js,sauce,2014-04-02T01:39:58Z,installed saucelab. retry,neutral
getsentry/sentry,selenium,2016-07-18T22:30:54Z,the error (last i saw) is from selenium. not from the web server itself. it's not possible for us to test the response code (and other things) through selenium.,neutral
getsentry/sentry,eslint,2015-08-26T21:48:23Z,enable variable rules in eslint (e.g. no-undef),neutral
getsentry/sentry,eslint,2015-08-31T19:57:25Z,the case above is now resolved with eslint,neutral
ysugimoto/aws-lambda-image,eslint,2017-03-28T06:30:49Z,ysugimoto i've been wrapping my brain around these failures and i have no clue  i can barely run the test suite. i have to disable eslint and then i get a lot of `error: write epipe`. would also be nice to be able to run a single test. any ideas?,negative
ysugimoto/aws-lambda-image,eslint,2017-03-29T03:31:22Z,odedniv i saw travis's log. some assertions are failed. and eslint error reports in your environments? an error of `write epipe` might be a process i/o error in node.js. and i'm not sure why. or when that error occurs  anyway. you can run a single test to install `ava` globally. i think:```$ npm install ava -g$ ava test/e2e-jpeg.js```,negative
senecajs/seneca-mem-store,coveralls,2016-05-19T09:45:39Z,added coveralls,neutral
senecajs/seneca-mem-store,coveralls,2016-05-19T09:55:08Z,lgtm,neutral
sequelize/sequelize-auto,eslint,2017-07-19T01:54:46Z,thanks!,positive
josdejong/mathjs,mocha,2013-08-19T10:01:21Z,almost there : e705a99411a81d93adb96a964eeed72a15d71a55jos there is one test broken (don't know why the result is not what i expect). and a bunch of question marks. could you finish this up?,negative
josdejong/mathjs,mocha,2013-08-20T19:20:11Z,i think we can close this issue now and remove the `mocha` branch?,neutral
josdejong/mathjs,mocha,2013-08-20T19:35:34Z,if you cleaned up behind me. i guess yes :)of course. there's still some work to do to. but i guess that can be done little by little.,neutral
josdejong/mathjs,mocha,2013-08-21T11:56:28Z,yes. there is a lot to be done to improve the tests (for example reorganize the tests for the parser). will work on that every now and then.,positive
istanbuljs/istanbuljs,standard,2017-03-29T21:35:44Z,add possibility to filter coverage maps on absolute filename. as discussed. previous changes redone in the mono-repo and introduced a parameter/flag in stead of a separate module.the problem i try to resolve:i've a 'non-standard' setup. where i build my distribution-packages outside of the source folder. i do this because i write mainly es6 code. and distribution-packages need to be plain old javascript. in addition because ava is perfectly able to run es6 tests. but not able to test es6 modules i've to transpile my es6 code (using rollup and babel/bubl??) to plain javascript. the resulting transpiled file will also include all libraries being `import`ed.the indication source files and line missing coverage works perfectly. using sourcemaps. however in the sourcemaps the original full paths are included. so if i run `nyc` with an include or exclude filter the i only have 2 options: show the coverage of all modules (including external modules. which i didn't intend to be instrumented to be covered). or no modules at all. because all of the sourcemaps absolute paths are outside of the current directory. therefore i introduced these methods. which i intend to use from `nyc` (either by having the `--report` flag taking a different or by introducing a flag (`--no-relativepath`. `--absolutepath` or something similar).now writing this all down. a solution might be to first have `nyc` do its work. including generating the report-dir. but no output. changing to the original source directory again and invoking `nyc --report --report-dir=<report-dir>`. i've to validate this works.,negative
istanbuljs/istanbuljs,standard,2017-03-31T20:15:15Z,i checked whether i could work around my issue in another way (using `--report-dir`) which didn't work. i misread the help-explanation of this flag. it is no directory containing the raw report data. but the report output itself. in addition i tried to copy the `.nyc-report` directory to the original source directory. but running `nyc --report` in that case still shows all instrumented files. it seems the filtering (to only include files in the current directory) is only performed during instrumentation and not during reporting. something already indicated by the method name: `shouldinstrument`,negative
istanbuljs/istanbuljs,mocha,2017-03-29T06:10:37Z,bcoe know of a way i can quickly debug this on my mac? unfortunately the cycles are really slow right now and i don't have access to a windows machine/image. i also don't know why that specific test is _actually_ failing as opposed to just timing out...```> mocha --require=babel-register  exports    ??? exports the correct interface  map store    ??? applies the inputsourcemap from the coverage object if available  mapped coverage    ??? allows a path constructor. has all properties    ??? allows building object incrementally. resolving dups  transformer    1) maps statement locations  4 passing (32ms)  1 failing  1) transformer maps statement locations:     typeerror: cannot read property 'statementmap' of undefined      at context.<anonymous> (test\transformer.test.js:69:56)```,negative
istanbuljs/istanbuljs,istanbul,2017-03-20T21:04:28Z,chore: fix coverage results for all packages. also address issue with istanbul-api package. hopefully.,neutral
istanbuljs/istanbuljs,istanbul,2017-03-20T21:58:03Z,jakxz if we add the yarn.lock can i still use npm?,neutral
istanbuljs/istanbuljs,istanbul,2017-03-21T06:46:17Z,nowycheung i've released your work in:`npm cache clear; npm i babel-plugin-istanbulnext`could you try installing and let me know if this does the trick for you?,negative
istanbuljs/istanbuljs,istanbul,2017-03-21T07:43:27Z,bcoe my guess (say. 50% confidence) at what got things working in #11 for `istanbul-api` was just fixing configuration like this. i don't think `mocha` takes arguments after the `--` like `npm` does.,negative
istanbuljs/istanbuljs,istanbul,2017-03-23T17:14:41Z,mattlewis92 fwiw i think i have a legit failure on windows? it's in `istanbul-lib-sourcemaps/transformer`.,negative
DefinitelyTyped/DefinitelyTyped,standard,2016-05-03T16:14:39Z,any progress on this? i would really like to use these features rather than write them out manually in standard html tags,neutral
tombatossals/angular-leaflet-directive,karma,2013-12-16T07:44:50Z,hi ccrabb.you're fetching the npm dependencies in a win32 environment. right? this afternoon i will be in a win32 env so i will try to reproduce your error. in the meantime. you could ignore the fetching of the karma-coverage module (comment the line on package.json). it's not really needed to get things working.it would be fantastic to get quadkey layer support. this weekend i have been refactoring the layers.js sub-directive and service. so now it's easier to add a new layer type. i'm with you that we could remove the actual bing layers support in favor of the quadkeys layer. it would be great if you could commit this feature.thanks for contributing.,positive
probmods/webppl,uglify,2016-01-18T17:32:16Z,watchify grunt task. this adds a `grunt watchify` task as requested by longouyang. when changes are detected this only recompiles `webppl.js`. it doesn't run uglifyjs. (which would be much slower than the incremental compilation step.) packages can be included in much the same way as with `grunt compile`. e.g. `grunt watchify:webppl-timeit`.i've also split the `compile` task into `browserify` and `uglify` tasks. i thought that been able to run `uglify` after `watchify` might be useful.,negative
probmods/webppl,uglify,2016-01-20T18:29:52Z,"i've added something to ""compiling for browser"". i didn't add anything to the ""installation from github"" section as that didn't already mention installing `browserify` or `uglifyjs`. what we have isn't perfect. but i figured it was good enough -- see what you think.",negative
probmods/webppl,uglify,2016-01-20T18:38:55Z,makes sense. thanks!,positive
