ramda/ramda,mocha,2015-02-17T20:52:02Z,hi rrrene looks interesting! at present it is parsing things like `mocha.js` and `ie8-shim.js` which should really be excluded from the evaluation. how would we configure that if we were to add this badge?,positive
ramda/ramda,mocha,2015-03-06T01:10:24Z,note. the mocha tests pass. but it is failing on creation of `index.js` ... i still need to look into this.  if anybody could offer any pointers. it would be appreciated.,positive
ramda/ramda,sauce,2015-06-03T12:07:31Z,benjycui we have a sauce suite. we just have to get it running again. the problem was it was running _too much_ (and timing out). anyways. ramda should be es3-compatible. for better or worse.,negative
ramda/ramda,eslint,2016-09-08T21:48:37Z,good stuff. thanks. (gotta fix the eslint error as well.),positive
ramda/ramda,jshint,2015-12-22T01:24:26Z,gilligan. can we remove **.jscsrc**. **.jshintignore**. and **.jshintrc**?,neutral
ramda/ramda,jshint,2015-12-22T08:50:45Z,remove jshint/jscsrc leftovers. remove config files and jshint switches inthe sources.,neutral
ramda/ramda,jshint,2015-12-22T08:52:42Z,davidchambers #1559 i just now realised that there were also still plenty of jshint switches across various test files ;(the pr removes all of them.,neutral
node-inspector/node-inspector,mocha,2014-03-13T12:59:00Z,error debugging mocha on windows. i'm trying to debug my tests but get the following output and was wondering if someone could point me in the right direction```$ node-debug _mocha mmsprocessortests.jsnode inspector is now available from :8080/debug?port=5858debugging `_mocha`debugger listening on port 5858c:\users\jonathanchannon\appdata\roaming\npm\_mocha.cmd:1(function (exports. require. module. __filename. __dirname) { if exist "%~dp0                                                              ^syntaxerror: unexpected token illegal    at module._compile (module.js:439:25)    at object.module._extensions..js (module.js:474:10)    at module.load (module.js:356:32)    at function.module._load (module.js:312:12)    at module.runmain [as _ontimeout] (module.js:497:10)    at timer.listontimeout [as ontimeout] (timers.js:110:15)```,negative
node-inspector/node-inspector,mocha,2014-03-13T14:05:09Z,you trying to debug `_mocha.cmd`.try set a valid path to `mocha.js` file.,neutral
node-inspector/node-inspector,mocha,2014-03-13T14:11:36Z,please see [how to debug node apps with node inspector]( last part of this video contains information about debugging mocha tests.,neutral
node-inspector/node-inspector,mocha,2014-03-13T14:12:17Z,bajtos. how about add `.cmd` execution to node-debug?,neutral
node-inspector/node-inspector,mocha,2014-03-13T14:13:32Z,bajtos . l189 of node-debug.js is a typo?,neutral
cssinjs/react-jss,karma,2018-07-10T09:26:16Z,felthy let's move the repo for now. we are planning to move to jest anyway and only use karma when needed.kof i assume we are also going to merge `react-jss` into the monorepo as well?,positive
electron-userland/electron-download,standard,2016-12-12T20:28:51Z,think `env-paths` is a better fit because it's used in more modules which has multiple advantages. also a module to only return a path to the cache directory is a bit too minimal for my taste. thanks for the heads-up though! 2016-12-31 is almost there! :-),neutral
electron-userland/electron-download,standard,2016-12-24T00:14:26Z,that's my plan. unless one of the other maintainers has concerns.,neutral
Zarel/Pokemon-Showdown,mocha,2015-11-01T12:10:55Z,fix repl not being able to unlinksync files under mocha. no idea why it happened. but `unlinksync` returned without actually unlinking the file. so it sent repl into an infinite loop,neutral
elastic/kibana,selenium,2016-06-16T21:38:59Z,epixa i did an experiment by adding the `visualregression` task to `test:ui`:```grunt.registertask('test:ui'. [  'esvm:ui'.  'run:testuiserver'.  'downloadselenium'.  'run:seleniumserver'.  'clean:screenshots'.  'intern:dev'.  'test:visualregression'.  'esvm_shutdown:ui'.  'stop:seleniumserver'.  'stop:testuiserver']);```i then hard-coded a test to fail and tried running `grunt test`. the `intern:dev` completes and reports the failure. but then grunt exits without running `test:visualregression` and subsequent tasks.,negative
elastic/kibana,selenium,2016-06-17T22:35:04Z,switch from firefox to chrome. manual backport of pr 7442 switching the browser for functional tests from firefox to chrome.  the latest update to firefox 47 broke selenium and we wanted to switch to chrome anyway.,neutral
elastic/kibana,selenium,2016-06-20T18:20:08Z,here's the last 4 builds all successful;success > console output#4​27​5 jun 20. 2016 8:05 pm pr #7502: ​switch ​from ​firefox ​to ​chromesuccess > console output#4​27​4 jun 20. 2016 7:47 pm pr #7502: ​switch ​from ​firefox ​to ​chromesuccess > console output#4​27​2 jun 20. 2016 7:11 pm pr #7502: ​switch ​from ​firefox ​to ​chromesuccess > console output#4​27​1 jun 20. 2016 6:55 pm pr #7502: ​switch ​from ​firefox ​to ​chrome,positive
elastic/kibana,selenium,2016-06-20T18:21:58Z,tagging #7442,neutral
elastic/kibana,selenium,2016-06-20T18:22:54Z,lgtm,neutral
elastic/kibana,selenium,2016-07-07T05:25:50Z,last run    elastic+kibana+master+multijob-pr-selenium  build #36   ( 12 min ) passed,neutral
elastic/kibana,selenium,2016-07-07T14:55:18Z,re-summarizing the changes;1). i've added getspinnerdone in 3 places where we've had test failures like staleelementreference (means the page changed between finding an element and performing some action with it).2). some clean-up.  removed a reference to a selenium we're not using.  and removed some unnecessary promise nesting.,negative
hollandben/grunt-cache-bust,standard,2016-11-05T18:46:09Z,replace file paths in files that exist in outputdir i.e. css and js. i have a project that i am working on that i would like to use the the outputdir.  my project is a fairly standard single page application.  the css and js contain paths that need to be rewritten. but when using the outputdir. the original assets are rewritten instead of the assets that are hashed and copied to the outputdir.,neutral
hollandben/grunt-cache-bust,standard,2016-11-17T20:56:50Z,i don't think this applies to when only the ouputdir is used. i tried it today without using outputdir and had the same issue. it would update the unhashed one. but not the hashed one.,neutral
hollandben/grunt-cache-bust,standard,2016-11-17T21:06:35Z,bytesnipe did you try my pr?  did it fix your issue?,neutral
hollandben/grunt-cache-bust,standard,2016-11-17T22:13:01Z,thanks for taking a look.,positive
airbnb/javascript,eslint,2016-12-14T19:27:08Z,at some point. certainly. is there a reason that you need v3 of eslint-plugin-jsx-a11y right now?,neutral
airbnb/javascript,eslint,2016-12-15T07:02:02Z,added flowtype linting support through the use of a new package. i use flowtype on all my personal projects. it gets pretty tiring to repeat the same setup across all projects. so i thought it would be best to standardize this through a new official airbnb eslint package.i wasn't sure what to call this package. so i called it "eslint-config-airbnb-next". as it implies it's the next stage / future support (and follows the naming of esnext). furthermore. it inherits from "eslint-config-airbnb". so includes react. a11y. and import support automatically. not sure if this is wanted. but it avoids the following 4 packages: base. react. flow. react+flow. but i can switch to that too if need be.also didn't modify the readme as i'm not sure how to phrase it.,negative
airbnb/javascript,eslint,2016-12-15T07:17:40Z,thank you. but airbnb officially does not use flow at this time. so this is very premature on the public repo.,negative
airbnb/javascript,eslint,2016-12-16T15:31:55Z,lint throw an "error". hey guys. when i try to exec a simple lint i receive that message:``` configuration for rule "jsx-a11y/anchor-has-content" is invalid:value "" is the wrong type.```my `.eslintrc.yml` :```yamlextends: airbnbplugins:  - react  - jsx-a11y  - import```edit: i was look at file and saw the modifications like `['']` to `{components: ['']}` done. but the module that i installed using `yarn` hasn't this modifications :/,negative
airbnb/javascript,eslint,2016-12-16T17:00:48Z,see #1207,neutral
airbnb/javascript,eslint,2016-12-16T18:46:09Z,right - but every `if` branch is another thing it's doing - so from the outside. your function is doing one thing. but inside it. it's doing many things. and it would be good to make each of *those* be a function that does one thing.at any rate. please feel free to file an upstream issue on eslint requesting that option. and we can consider enabling it if/once it's released.,positive
airbnb/javascript,eslint,2016-12-16T19:05:19Z,all code is style. including architecture choices.nothing is restricted because every eslint rule is configurable - go nuts and use whatever you like.generators and `for..of` are not something i consider a good idea regardless. but there's no point having that discussion when it's not tenable to use them in production with a reasonable supported browser list. at that time. we can certainly discuss that more fully. and flesh out the guide's description of why to use. or not use. these features.,negative
airbnb/javascript,eslint,2016-12-21T02:03:02Z,julesmoretti jshint? this is for eslint. what other problems do you have that need a solution? `no-use-before-define`. for example. is a legit error.,negative
airbnb/javascript,eslint,2016-12-21T06:51:55Z,ljharb - how would you still write the component using `export default class hello extends react.component {` or better. in order to maintain functionalities like componentdidmount and yet have the lint pass the test?is there an equivalent to `/* eslint-disable global-require */` but for pure functions? or a way to write it better? an example would be most welcome.,neutral
airbnb/javascript,eslint,2016-12-21T07:10:04Z,perfect! i updated the .eslintrc and added the no-console: 0```{  "extends": "airbnb".  "rules": {    "react/jsx-filename-extension": ["error". { "extensions": [".js". ".jsx"] }].    "no-console": 0.  }}```thank you!,positive
airbnb/javascript,eslint,2016-12-25T03:28:11Z,fix package name in eslint-config-airbnb-base,neutral
airbnb/javascript,eslint,2016-12-27T05:48:22Z,(the question's answered. but reopening to track the eslint rule change),neutral
airbnb/javascript,eslint,2016-12-28T19:57:20Z,updates peerdependencies for eslint-config-airbnb. updates peerdependencies for eslint-config-airbnb.also since the last npm release has a severely outdated peerdependency for eslint-plugin-jsx-a11y. can we please get a new npm release with this update?thanks!,positive
airbnb/javascript,eslint,2016-12-28T21:58:13Z,v2 to v3 of eslint-plugin-jsx-a11y is not "severely" outdated; if you read the changelog you'll see the differences are minor.it is explicitly intentional to not yet have released an update of `eslint-config-airbnb` that supports v3 of `eslint-plugin-jsx-a11y`. and i will release an update when it is ready.thanks for the contribution; i'll rebase it down to one commit with the desired commit message convention. and merge it in.,negative
airbnb/javascript,eslint,2016-12-29T08:56:08Z,a better solution imo is to never globally install anything. especially a linter. which should always only be installed per-project :-),neutral
airbnb/javascript,eslint,2016-12-29T18:54:57Z,that's definitely not the proper solution - if you have only a local eslint installed. and atom is configured to use it. and you've restarted atom after any node_modules or eslint config change. it should work properly.,neutral
airbnb/javascript,eslint,2016-12-30T00:35:26Z,i agree that is an option.  it is definitely a pain in the ass when it comes to ide setup.  webstorm in particular is not smart enough to say... 'lets find the project root directory. lets find the rc file. then lets find node_modules. then lets find eslint'.you are right though. just need to manually set it up. sigh.,negative
airbnb/javascript,eslint,2016-12-30T17:56:00Z,yes. but `"props": true` is something that should be strictly enforced everywhere. *except* where a framework requires it. like express. the `eslint` rule change would be for `"props": true`. but with exceptions for `req`. etc.,negative
airbnb/javascript,eslint,2017-01-05T00:15:38Z,zachlysobey the readme is also available on npm itself -,neutral
airbnb/javascript,eslint,2017-01-06T05:01:03Z,that sounds much better - the usage i'd want to recommend then is `install-peerdeps --dev eslint-config-airbnb`.,neutral
airbnb/javascript,eslint,2017-01-08T01:13:31Z,simenb  if you omit the ```sh at the start of the block it'll disable the syntax highlighting:with ```sh```shnpm install --save-dev eslint-config-airbnb eslint^#.#.# eslint-plugin-jsx-a11y^#.#.# eslint-plugin-import^#.#.# eslint-plugin-react^#.#.#```without ```sh```npm install --save-dev eslint-config-airbnb eslint^#.#.# eslint-plugin-jsx-a11y^#.#.# eslint-plugin-import^#.#.# eslint-plugin-react^#.#.#```do you want to submit a pr for that?,neutral
airbnb/javascript,eslint,2017-01-08T11:34:51Z,i ran the install command from the airbnb readme and this problem remains in the atom eslinter.- are the packages in that command currently working?- could my problem be because of some global npm install. how is that removed?fixed my problem by removing all rules from node_modules/eslint-config-airbnb/rules/react-a11y.js (rules: {}).this is not a proper solution but it seems to fix my problem. (i'm a beginner in node usage.),negative
airbnb/javascript,eslint,2017-01-08T18:00:08Z,colsson22 you need to restart atom after any node_modules changes.,neutral
airbnb/javascript,eslint,2017-01-08T19:21:04Z,ljharb i did restart atom several times. but that seems like a probable explanation. thank you for answering me,positive
airbnb/javascript,eslint,2017-01-09T06:04:55Z,thanks for filing this - i am indeed following that eslint issue but i didn't realize we weren't using the object form of the config.what would be ideal is a pr that converts to the identical object form first. but with a todo comment marked "semver-minor" to enable the new warnings.,neutral
airbnb/javascript,eslint,2017-01-10T18:53:57Z,indeed that would fix it; but we haven't defined `no-empty-label` since before we split the rules into `eslint-config-airbnb-base`. are you sure you have the latest config installed on disk? what does `npm ls --depth=0` tell you?,neutral
airbnb/javascript,eslint,2017-01-10T21:42:17Z,wagerfield how does this work in a repo with multiple nested eslintrc files?is there any chance your tool could be used to report when a non-top-level config override isn't needed? (ie. when if removed. additional warnings wouldn't appear),neutral
airbnb/javascript,eslint,2017-01-10T22:36:35Z,oh my... please forgive my stupidity... i did not notice that somehow (bad drag and drop?) i had in one of the parent folders i had another `.eslintrc` where this rule was turned on... thank you for your help!,negative
airbnb/javascript,eslint,2017-01-10T23:25:09Z,(also node 5 is eol'd so you want to be on 4. 6. or 7. but that's also unrelated)ok. all that looks good.what happens if you specify "parser" *after* specifying "extends"?also. instead of running a command inside node_modules directly. what if you use an npm run-script to run `eslint`?,neutral
airbnb/javascript,eslint,2017-01-10T23:38:15Z,same behavior - when extending i get no `react/jsx-no-bind` errors. but when i remove the extend i get the errors. just to make sure i follow. you meant to change the order so that *extends* is first and *parser* follows in the `.eslintrc` file?,negative
paulmillr/es6-shim,mocha,2014-03-20T16:25:18Z,mocha requires `es5-sham`. so it's not really an option.,neutral
paulmillr/es6-shim,mocha,2014-03-20T21:21:12Z,great. i'd actually really love to get rid of mocha anyways in favor of tape :-),positive
jxnblk/rebass,standard,2016-11-07T18:42:44Z,what appears to be a simple solution (at least for the `classname` usecase) is to just append the classname prop that gets passed in to every component.  instead of `classname='breadcrumbs'`. maybe just ```classname={`breadcrumbs ${props.classname}`}```or just allow the classname to be overridden completely with the standard `classname` prop. radium is a little different because it uses `style` and actually modifies how the style prop works in terms of merging. etc.,neutral
angular/angular-phonecat,selenium,2016-03-07T20:42:19Z,tintin34 or now valsouche solution worked for me. tried almost every other solution but without luck.if you dont have selenium folder under protractor(like me). then create a folder with that name and paste chromedriver in there. try this solution before others. it will save your time. belive me.,positive
groupe-sii/sonar-web-frontend-reporters,eslint,2017-08-08T10:02:59Z,allow to use eslint-import. eslint-import needs to be used with all files at 1 time. but not 1 time for every file. this commit allow to use this plugin without extra errors. also this commit add eslint ignore to usage.,negative
groupe-sii/sonar-web-frontend-reporters,eslint,2017-08-08T10:37:57Z,thanks for the pr :),positive
velesin/jasmine-jquery,jasmine,2014-06-04T21:52:08Z,i doubt the lib would work as is. so there'd be some code that would need writing. i wouldn't use this. if someone wants to actually submit a pr. i'd take a look.,negative
meanjs/generator-meanjs,mocha,2016-05-15T20:24:34Z,'missingschemaerror: schema hasn't been registered for model "user".'. i installed a fresh clone of this repo. but when i try to run`grunt mochatest`mocha literally explodes.i am on mac. which informations would you like me to provide in order to assess the issue?,neutral
meanjs/generator-meanjs,mocha,2016-06-03T07:00:47Z,did you do `npm install` first?,neutral
videojs/video.js,karma,2014-05-05T18:11:38Z,currently. i haven't configured other browsers. though. you could do it manually via the karma cli rather than the grunt task.`grunt watch` wasn't updated to use karma. and yes. i do want to ditch phantom if we have a real browser available.,neutral
videojs/video.js,karma,2014-05-14T03:31:21Z,i updated to allow running the tests in more browsers via the test task. i also consolidated the `karma.conf` and the `localkarma.conf`.,neutral
videojs/video.js,karma,2014-05-14T03:51:42Z,so. for `watch`. the config has which task to run. we could set it to `karma:dev` which runs karma in firefox. chrome. and safari or just set it to chrome.however. karma has some built-in `watch` capabilities that is separate from what grunt-watch provides.probably the correct solution is investigate karma's watch and use that (in addition?) to grunt-watch. but for now we should change the task that grunt-watch runs to something like `test`.,negative
videojs/video.js,karma,2014-05-16T22:09:49Z,localsauce karma. this adds an _untested_ local ability to run tests on saucelabs.you run it in one of two ways:``` sh# assuming you already have a connection to saucelabsgrunt saucelabs# if you want grunt to run sauce_connect for you and then run the taskgrunt saucelabs:connect```,neutral
videojs/video.js,karma,2014-05-19T20:48:25Z,what does someone need to do to add their own auth credentials to make this work?,neutral
videojs/video.js,karma,2014-05-19T21:47:46Z,ah. right. you just need to set `sauce_username` and `sauce_access_key` as shell variables.,neutral
videojs/video.js,karma,2014-05-19T22:29:16Z,do you think it's worth adding something to contributing.md that tells people how to do that?,neutral
videojs/video.js,karma,2014-05-19T23:14:18Z,assuming that you've been able to run this task and it works. i've yet to test it.also. we do need to update contributing.md with how to use the `test` task.,neutral
videojs/video.js,karma,2014-05-19T23:17:18Z,haven't had a chance to try the creds yet. but yeah. after that updating the doc with the test task would be great.,positive
videojs/video.js,karma,2014-05-23T22:58:14Z,we also do have the tests running in karma and saucelabs now.one thing we should do in change the tests so that they don't use the 'mediafaker' tech but rather the actual techs when it runs in real browsers as opposed to phantomjs.,neutral
jupyterlab/jupyterlab,istanbul,2018-10-05T09:42:43Z,upgrade istanbul. this hopefully fixes the `metrics.isempty is not a function` issue we're seeing in tests.,neutral
jupyterlab/jupyterlab,istanbul,2018-10-05T11:19:14Z,thanks!,positive
babel/babel-loader,eslint,2017-06-16T15:32:18Z,add prettier eslint plugin,positive
babel/babel-loader,eslint,2017-06-20T08:38:57Z,i have the same problem.i think it do'nt use babel-loader before execute eslint.,neutral
babel/babel-loader,codecov,2017-04-21T18:49:41Z,use bash codecov,neutral
freyproject/frey,eslint,2016-10-12T19:29:29Z,add missing dependency. i needed to install `eslint-plugin-promise` by hand. i guess this shouldn't be the case.,neutral
freyproject/frey,eslint,2016-10-13T07:29:31Z,hm that's odd. i guess this is why facebook just launched yarn   i'll merge this though as it seems to solve your problem - thanks!,positive
freyproject/frey,eslint,2016-10-31T20:15:30Z,> i guess this is why facebook just launched yarn > indeed...,neutral
EvanHahn/HumanizeDuration.js,jshint,2015-03-25T19:15:48Z,looks good.could you remove `dojo: true` to `.jshintrc` and move `define` to `predef`?,neutral
prettier/prettier,codecov,2018-03-27T06:46:45Z,should i worry about the codecov/project check?,neutral
prettier/prettier,eslint,2018-01-12T11:21:50Z,doesn't prettier already break things like `// eslint-disable-line` when it adds line breaks?,positive
prettier/prettier,eslint,2018-01-13T03:00:18Z,no. because it requires `eslint-plugin-react`. which isn’t installed by default.,negative
prettier/prettier,eslint,2018-01-16T00:08:48Z,not sure if it has been said before. but just use prettier-eslint. prettier will run first. and eslint second (with —fix). don’t forget the prettier config for eslint to disable rules in conflict with prettier though. and manually activate what you want to enforce!,positive
prettier/prettier,eslint,2018-01-16T17:12:23Z,zephir77167 . thanks for the tip! but it is so simpler to just use eslint. which i see no sense in using prettier-eslint.,positive
prettier/prettier,eslint,2018-01-16T17:17:58Z,paulocoghi because eslint and prettier are tools with different purposes :) eslint won't format your code like prettier. prettier can't be configured as much like eslint. some people have found a sweet stop with `prettier-eslint`. which lets prettier do the heavy formatting and then just fix the nits you want with `eslint --fix`.,positive
prettier/prettier,eslint,2018-01-17T16:06:50Z,i am using `create-react-app-typescript` and i was getting the same error in vscode. i had `prettier.eslintintegration` enabled globally and after turning it off. it's indeed working. however. there is no eslint installed within that boilerplate so it's rather shocking how it can be relevant :),negative
prettier/prettier,eslint,2018-01-20T03:00:27Z,`/* eslint yoda: "error" */`,negative
prettier/prettier,eslint,2018-01-22T13:18:52Z,azz this kind of things is actually the purpose of formatters. so if they don't format things the way i want. i can't use them.  i'll take a look at `prettier-eslint`. but we are using `tslint` as we are working with typescript. so i am not sure. how well it works.,negative
prettier/prettier,eslint,2018-01-23T20:46:19Z,lydell done. maybe new eslint rule will allow to catch this stuff,neutral
prettier/prettier,eslint,2018-01-31T23:33:25Z,yeah i thought the community was moving toward project configurations inside `package.json` because the dot files at the project directory were getting out of hand.  i don't remember reading any functional constraints. more a community wide preference.  but i've seen it plenty other places than just eslint take adoption.,negative
prettier/prettier,eslint,2018-02-01T12:07:38Z,coolemur this would not end all your "wars" in those discussions. it is start wars. add one prefer option. other people will start own prefer options. you can don't change default lint options. just use `prettier-eslint` and all.,negative
prettier/prettier,eslint,2018-02-06T21:20:56Z,is there any way to desactivate this behaviour ?i'm struggling in making prettier fix styling issue before eslint in vscode ...,positive
prettier/prettier,eslint,2018-02-07T09:43:16Z,lydell i use eslint-config-prettier already...could not be possible to add an option in the .prettierrc so this specific behavior is ignored ?my codebase massively relies on conditionnal rendering and my code is so ugly now... everything else is perfectly formatted :/,negative
prettier/prettier,eslint,2018-02-07T20:20:39Z,i don't think there's an eslint rule that will undo the formatting in the way you want.,neutral
prettier/prettier,eslint,2018-02-08T16:36:27Z,you could also create your own eslint plugin with a copy of the sort-keys rule that has a fix function and use that rule instead of the builtin one.,neutral
TryGhost/Ghost,mocha,2015-04-08T19:05:24Z,normalize settings payloads in client serializer. closes #5117... gave up on writing tests for this so i could unblock acburdine. once i understand how ember-mocha works i'll do another pr with tests,neutral
caolan/async,mocha,2016-03-21T19:57:46Z,implemented correctly. this works as expected:``` jsvar async = require('async');describe('series'. function() {    it('should complete'. function (done) {        var mycallback = function(error.result) {            if(error) {                console.log("error: ".error."msg: ".result);            }            else {                console.log("mac is open. all action done");                done();            }        };        async.series([                async.ensureasync (                    function(callback) {                        callback(null. 0);                    }).                async.ensureasync (                    function(callback) {                        callback(null. 0);                    }).                async.ensureasync (                    function(callback) {                        callback(null. 0);                    }).                async.ensureasync (                    function(callback) {                        callback(null. 0);                    }).                async.ensureasync (                    function(callback) {                        callback(null. 0);                    }).                async.ensureasync (                    function(callback) {                        callback(null. 0);                    }).                async.ensureasync (                    function(callback) {                        callback(null. 0);                    }).            //below function not be called                async.ensureasync (                    function(callback) {                        callback(null. 0);                    }).                async.ensureasync (                    function(callback) {                        callback(null. 0);                    }).                async.ensureasync (                    function(callback) {                        callback(null. 0);                    })            ]. mycallback        );    });});``````$ mocha series.test.js   seriesmac is open. all action done    ✓ should complete  1 passing (8ms)```,neutral
caolan/async,mocha,2016-03-21T20:28:49Z,ugh. always new tools.  i'd be hesitant to switch to it. seeing as we're not even halfway through migrating to mocha.  mocha is also has really good adoption in the greater js world. so it's one less thing for a new contributor to learn most of the time.,positive
caolan/async,mocha,2016-03-22T21:00:03Z,``` jsvar async = require('async');describe('series'. function() {    it('should complete'. function (done) {        var mycallback = function(error.result) {            if(error) {                console.log("error: ".error."msg: ".result);            }            else {                console.log("mac is open. all action done");                done();            }        };        async.series([                async.ensureasync (                    function(callback) {                        console.log(0);                        callback(null. 0);                    }).                async.ensureasync (                    function(callback) {                        console.log(1);                        callback(null. 0);                    }).                async.ensureasync (                    function(callback) {                        console.log(2);                        callback(null. 0);                    }).                async.ensureasync (                    function(callback) {                        console.log(3);                        callback(null. 0);                    }).                async.ensureasync (                    function(callback) {                        console.log(4);                        callback(null. 0);                    }).                async.ensureasync (                    function(callback) {                        console.log(5);                        callback(null. 0);                    }).                async.ensureasync (                    function(callback) {                        console.log(6);                        callback(null. 0);                    }).            //below function not be called                async.ensureasync (                    function(callback) {                        console.log(7);                        callback(null. 0);                    }).                async.ensureasync (                    function(callback) {                        console.log(8);                        callback(null. 0);                    }).                async.ensureasync (                    function(callback) {                        console.log(9);                        callback(null. 0);                    })            ]. mycallback        );    });});``````$ mocha series.test.js   series0123456789mac is open. all action done    ✓ should complete  1 passing (8ms)```sounds like a problem with your debugger.,neutral
caolan/async,mocha,2016-03-22T23:24:29Z,another thing. i just noticed ava doesn't support browsers -- only jsdom.,positive
caolan/async,mocha,2016-04-08T09:11:27Z,i didn't touch the `detectlimit` method between ff1e180 and 1f12a4f. so i don't know what could have caused it to fail. the timeout for mocha test for `detectlimit` did get shortened though.,negative
nightwatchjs/nightwatch,mocha,2016-05-04T20:18:47Z,there aren't immediate plans for this. but it is somewhere on the roadmap. you can probably achieve this today by using a combination of jscoverage (to instrument the code) and a custom lcov reporter or using mocha which already has an lcov reporter built-in.hooking a function in the aftereach hook is also possible before `.end()` is being called.,neutral
nightwatchjs/nightwatch,mocha,2016-05-09T12:35:19Z,i am still unable to get rid of the mocha's timeout error. i can't set the options to the "test_runner" setting because i'm getting hooks undefined errors. any ideas on how to set a timeout with a value gt 2000ms ?update: **fixed the timeout issue by applying: this.timeout(0) in the before hook**yet again. the browser keeps closing after the first describe finishes running.the hooks i'm using now are the following:```before(function(client. done) {    this.timeout(0);    client.perform(function() {        client            .url(url)            .resizewindow(1366. 768)            .waitforelementvisible('body'. 100000)            .pause(5000. function() {                done();            });    });});``````after(function(client. done) {    client.end(function() {        done();    });});```as mentioned above. because the session is closed after the first suite of tests passes. in the console i receive the following error: `error: unable to locate element: ".element" using: css selector`,negative
nightwatchjs/nightwatch,mocha,2016-05-16T02:59:42Z,lkay i got a same problems with you and then i tried```"test_settings": {    "default": {      "launch_url": "".      "selenium_port": 4444.      "selenium_host": "localhost".      "silent": true.      "desiredcapabilities": {        "browsername": "chrome".        "javascriptenabled": true.        "acceptsslcerts": true      }    }  }."test_runner" : "mocha"```and it works well.,neutral
buildo/react-components,eslint,2016-10-28T15:05:42Z,#652: add `eslint-plugin-promise` compatibility (closes #652). issue #652## test plan### tests performedafter have been updated `eslint-config` i run:- `npm run lint`  => no errors ✔️,negative
angular/zone.js,sauce,2015-10-07T09:29:12Z,chore(saucelabs): update browser list. as suggested by vicb . the list of browsers which are tested in sauce labs should be aligned with the one from angular.as a bonus. let's add edge.,negative
angular-fullstack/generator-angular-fullstack,karma,2015-03-30T15:53:42Z,confirmed working.,neutral
alexa-js/alexa-app,mocha,2017-01-20T06:42:09Z,dblock i now have time to start working on this task. however before i begin i wanted to plan the task out a bit more. what exactly are we planning to achieve?   - do we want to only support promises for asynchronous tasks or should we support the usage of a `done` callback as well?  - should we still support the `return false` usage or just drop it completely and make a semver major change?,positive
alexa-js/alexa-app,mocha,2017-01-20T12:55:51Z,this is just my 2c. but i think we don't have to support `done` callback if we don't want to. however we should support `false` for backward compatibility if it's not too difficult.,negative
alexa-js/alexa-app,mocha,2017-01-27T18:53:53Z,just seen this (sorry) but #133 seems like a good solution to this.,positive
alexa-js/alexa-app,coveralls,2017-02-02T17:13:18Z,this coveralls shit is incredibly obnoxious and verbose. can it be turned down/off?,negative
alexa-js/alexa-app,coveralls,2017-02-02T17:17:55Z,i just turned off comments in coveralls settings. it's indeed super annoying. we'll just have to keep an eye on test coverage.,positive
firebase/firebaseui-web,sauce,2017-08-24T02:37:02Z,i am having problems keeping a sauce connect tunnel open. not sure if it is on my end or theirs. will investigate the failures when i get that working.,negative
firebase/firebaseui-web,sauce,2017-08-24T04:08:18Z,there was some temporary unrelated issue with saucelabs which was causing sauce connect to timeout prematurely. anyway. i was able to test on my end. i am encountering a similar timeout error. it is hard to replicate and it very flaky and the tests take a while so this is quite an investment. i will rerun your integration tests and if this fails again. i will see if i can catch this error and force a retry but it will have to wait until tomorrow.,negative
cure53/DOMPurify,karma,2016-05-12T23:22:00Z,update karma-browserstack-runner and fix karma log level. i ran all tests with node4 on against another browserstack account and they all worked fine now three times in a row.i am unsure why karma hangs with browser.on is not a function as it is mentioned in issues long merged and released. the update - away from the fork - of the karma-browserstack-launcher could maybe have caused dropping connection.let me know if this helps whenever your rate limits comes back to life. i hope you/we can find a sponsor for this project. do you have any clue how much runs - build time this actually causes?,positive
cure53/DOMPurify,karma,2016-05-23T18:33:36Z,`npm test` runs jsdom and local karma tests in firefox and chrome.,neutral
zeromq/zeromq.js,codecov,2017-07-05T11:28:26Z,clean up travis.yml. clean up travis.yml because of bad readability and duplicated docs pushing and codecov reporting.,negative
notatestuser/gift,mocha,2014-06-19T19:39:14Z,add repo.checkoutfile and repo.reset. was missing those. so i added them. getting into the mocha `beforeeach` and `before` was confusing but i think i made it work.,negative
notatestuser/gift,mocha,2014-06-20T00:04:12Z,i figured it out - i need to run `git init` on the copied repository to make it work. please don't wonder about your inbox by travis. i was a bad boy and `reset --hard` all the faulty trys i uploaded here. they would just pollute the history. :wink:,negative
notatestuser/gift,mocha,2014-06-20T08:42:38Z,cool. much appreciated.,positive
notatestuser/gift,mocha,2014-06-24T20:15:18Z,anything left you want me to change?,neutral
Hacker0x01/react-datepicker,karma,2016-03-19T14:17:09Z,not really interested in changing our current test setup at this point.,positive
sass/node-sass,mocha,2013-09-15T07:53:33Z,you're right. there is a problem with the mocha test snifffing that it is doing right now,negative
webpack/webpack,standard,2017-05-20T03:51:51Z,kevinokerlund. yes the problem is only for es modules. there is no problem with commonjs.currently. the best solution i have is to use a commonjs entry point (c.f. above). the rest can be js modules. but the main export must be commonjs. this is a workaround rather than a solution. but currently. i have no better ways.another working solution would be to use `babel-plugin-add-module-exports` (as you suggested). but to apply it on the main entry point only (so that the rest remains standard). doing this allows to not touch the source code. but i find the treatment worse than the disease.,negative
socketstream/socketstream,coveralls,2015-06-11T05:58:36Z,the tests are passing. the errors are to do with getting coveralls to receive the coverage stats. some errors are 500 (a server error on their end). and some look to be an invalid repo token being passed automatically by travis in the background to coveralls.going to merge this in.,neutral
socketstream/socketstream,coveralls,2015-06-14T17:19:21Z,paulbjensen i wonder what that 500 error is about. are we behind on coveralls package ?,neutral
stealjs/steal,sauce,2017-08-24T12:39:20Z,thanks!  looks like saucelabs were down. so i'm rerunning the tests.,positive
clappr/clappr,coveralls,2015-11-27T17:10:51Z,updates to send data to coveralls,neutral
clappr/clappr,coveralls,2015-12-05T01:03:06Z,jfairley can you give me any project where i can see that ux? (i tried to find on google but none show up :( ),negative
clappr/clappr,coveralls,2015-12-08T00:38:25Z,thanks :) i'm gonna see them,positive
clappr/clappr,coveralls,2015-12-08T20:52:59Z,cool. i use the service for both java and javascript (node. angular. and react). my projects are all private. but i can still help set up if you need.,positive
clappr/clappr,coveralls,2015-12-08T21:23:28Z,are you using ec6?,neutral
clappr/clappr,coveralls,2015-12-09T16:16:36Z,_es6_? yes,neutral
acuminous/yadda,mocha,2016-03-10T19:47:18Z,however yadda doesn't check node_env anywhere in the codebase and doesn't require any 3rd party libraries that might either. i don't think mocha cares about node_env so i'd be happy to remove it.,positive
acuminous/yadda,mocha,2016-03-16T14:53:52Z,always getting a timeout on after all hook with cucumber-boilerplate. error description : 1)  "after all" hook:    error: timeout of 25000ms exceeded. ensure the done() callback is being called in this test.     at null.<anonymous> (c:\mobile_appium\cucumber_boilerplate\node_modules\mocha\lib\runnable.js:215:19)i dont see any after all hook in implamentation ?,neutral
acuminous/yadda,mocha,2016-03-16T19:26:39Z,yadda doesn't configure one. how are you running yadda? maybe an issue with cucumber boilerplate?,neutral
acuminous/yadda,mocha,2016-03-21T01:16:17Z,thanks works great.in case anyone is using mocha integration or something similar to the mocha cucumber boilerplate. the change looks like this in init.js``` jsyadda.plugins.mocha.steplevelplugin.init()```to:``` jsyadda.plugins.mocha.steplevelplugin.init({    parser: new yadda.parsers.featurefileparser({                leftplaceholderchar: '<'.                rightplaceholderchar: '>'            })});```,neutral
acuminous/yadda,mocha,2016-03-28T21:08:57Z,sync/async mix. it'd be awesome if steps worked the same way mocha tests do:where if i do```it('test'. function(done) {  dosomeasyncstuff.then(done);});it('test'. function() {  return dosomeasyncstuff();});it('test'. function() {  return assert(true);});```it figures out magically that i gave it the `done` param. or if i return something. and if that return is a promise. it should wait for it to resolve.where as:```.given("$num green bottles are standing on the wall". function (num) {  return wall = new wall(num);});.given("$num green bottles are standing on the wall". function (num. done) {  wall = new wall(num);  done();});.given("$num green bottles are standing on the wall". function (num. done) {  return dosomeasyncstuff();})```all rely on different stuff in the```    scenarios(feature.scenarios. function (scenario) {      steps(scenario.steps. function (step. done) {        yadda.run(step);      });    });```frustratingly `yadda.run()` doesn't return what the step does. so i can't evaluate what the response is and run the done myself based on the response of the `yadda.run()`,negative
acuminous/yadda,mocha,2016-03-29T11:07:39Z,hey!thanks for the speedy response. the `interpret` as you say is clearly the right place to put the logic as apposed to trying to shoehorn it into stuff around the `yadda.run`.i'll give your suggestion a go later. but it looks like it should make sense for most cases.async steps should ideally be able to return a promise and have the `next()` called in a `.then()` or maybe `.finally()` on the end of the promise chain.if async steps weren't able to return the promise. every 'promisey' type step would have to look like:```.given("$num green bottles are standing on the wall". function (num. next) {  promise.resolve('foo').finally(next);})```which is probably fine. it's just going to cause a lot of unnecessary imho duplication as opposed to:```.given("$num green bottles are standing on the wall". function (num) {  return promise.resolve('foo');});```or in more succinct es6:```.given("$num green bottles are standing on the wall". num =>  promise.resolve('foo'));```,positive
acuminous/yadda,mocha,2016-03-29T14:40:47Z,i'm not a fan of promises.,positive
acuminous/yadda,mocha,2016-03-29T14:48:47Z,sad face!even in the native es2015/es6 sense?if that's a no go. perhaps we/you could have a snippet to use in one's own `test.js` that would intercept to handle promises and run the `next()`?i'll try to put something together this evening and make a pr for you to consider.,negative
acuminous/yadda,mocha,2016-03-29T21:59:36Z,all good. thanks for the prs.,positive
acuminous/yadda,mocha,2016-04-05T07:30:30Z,always getting a timeout on after all hook with cucumber-boilerplate. error description :1) "after all" hook:error: timeout of 25000ms exceeded. ensure the done() callback is being called in this test.at null. (c:\mobile_appium\cucumber_boilerplate\node_modules\mocha\lib\runnable.js:215:19)i dont see any after all hook in implementation ?,neutral
acuminous/yadda,mocha,2016-04-05T19:25:55Z,it's also possible you have code like the following somewhere in your test.```after(function(done) {   // does not call done()})```,neutral
acuminous/yadda,mocha,2016-04-06T12:08:52Z,hey thanks for the info. i will get back to you on this soon.,positive
canjs/canjs,sauce,2017-05-12T19:08:53Z,add test-saucelabs npmignore. all demos break without this.partial fix #3208,neutral
canjs/canjs,sauce,2017-05-12T19:21:10Z,revert "add test-saucelabs npmignore". reverts canjs/canjs#3249,neutral
canjs/canjs,sauce,2017-05-12T19:22:28Z,revert "revert "add test-saucelabs npmignore"". reverts canjs/canjs#3250,neutral
nodejs/citgm,eslint,2016-12-17T17:21:57Z,chore: .eslint now proper json. proper json has quotes.eslint doesn't care. and even supports comments and other wacky things... but we should be consistent,positive
nodejs/citgm,eslint,2016-12-19T17:28:00Z,cf2cb7a2a8,neutral
babel/babylon,eslint,2017-06-09T21:43:52Z,okay rebased and change everything to work. ready for review.,neutral
babel/babylon,eslint,2017-06-09T22:23:27Z,just going to be annoying for andy-ms ts pr,negative
babel/babylon,eslint,2017-06-09T23:20:42Z,hzoo after this lands he can just run prettier on his pr. presumably!,positive
babel/babylon,eslint,2017-06-17T19:01:58Z,correctly put typeparameters on functionexpression. | q                 | a| ----------------- | ---| bug fix?          | yes| breaking change?  | n| new feature?      | n| deprecations?     | n| spec compliancy?  | n| tests added/pass? | yes| fixed tickets     | | license           | mitthis fixes the issues that came up when babel-eslint changed to use the estree plugin.,neutral
sasstools/sass-lint,mocha,2016-04-20T16:23:01Z,so. appveyor seems a little underpowered which means i've increased the mocha timeout limit to 10 seconds to compensate for any of the file/directory reading we have to do and child process spawning as these were causing the build to fail. also pulled a few little issues out of some of our rules and updated our test matrices. all should be passing now but we'll wait for that lovely green tick on appveyor.this by no stretch of the imagination means sass-lint is rock solid on windows as we don't have any tests for crlf which we know causes gonzales to behave oddly or just refuse to behave at all. progress though at least!,negative
sasstools/sass-lint,eslint,2016-05-17T14:37:35Z,i'll have a look into it. we haven't officially added support for extending configurations as you can in eslint yet but it's strange that your config file path you specified isn't being read.,neutral
sasstools/sass-lint,eslint,2016-05-25T21:30:47Z,sass-lint doesn't support simple js files as a valid configuration format. two files formats are natively supported by node.js: js and json. however. neither of these two formats are available to be used as configuration. could it be possible to add them? you would just have to check that the extension is a key in the `require.extensions` dict. and use `require()` in such a case.worth noting that eslint supports both of these formats.,neutral
sasstools/sass-lint,eslint,2016-05-25T22:24:31Z,this is true. we do plan to add support soon and there's already a pr i believe that goes part of the way.the original reason for the format and the config naming was to mimic the scss-lint way so as to keep it familiar for people who adopted this project early. it's just never been updated for others.,positive
sasstools/sass-lint,eslint,2016-05-26T23:12:17Z,hopefully #733 should solve your problem. it allows you to specify config files to extend from within your project config file (as many 'extends' as you like too.).this will be mainly feature filler into we roll out proper config extends in a similar vein to how eslint does it.,neutral
sasstools/sass-lint,eslint,2016-05-31T09:28:50Z,thanks mattbrooks2010 i'm not sure why they were directly using the eslint ones. i think it was a stop gap to get support for formatters before and it's just never been updated since i've been on board  you're right though this definitely needs rectifying soon.will look into it.,positive
san650/ember-cli-page-object,coveralls,2018-01-09T21:22:45Z,updated again to remove `findall` and `findone`. we can add the new `find` functions in a future pr. i think this is ready for review again.i can't seem to figure out what's causing coveralls to fail. there don't seem to be any files in the report that have less coverage. but it also looks like not all the files are in the report. can anyone help me figure out what's going on there?,negative
pouchdb/pouchdb,eslint,2016-10-30T21:31:37Z,daleharvey i've reverted the changes regarding `arguments`: i had noted in the commits that they addressed memleaks in pouchdb-http-adapter but i can't reproduce those changes anymore (but i'm now testing with node.js 7 so there might be a difference there as well — anyway).i also checked eslint and inserted spaces after `if`. but eslint complained about `unexpected space before function parentheses` when i tried `function abc ()` so i left those alone.,negative
pouchdb/pouchdb,eslint,2016-11-06T10:50:36Z,vladyslavgoloshchapov for what it's worth. i stumbled upon this same issue using pouch with ionic 2 and was able to work around it by trusting nolanlawson that emit is in the global scope and cheating the ts compiler with `declare function emit (val: any);`.i have not tested extensively just yet but seems to be ok. i've also not tested aot compilation with this either.,negative
pouchdb/pouchdb,eslint,2016-11-06T14:16:52Z,i also am using that workaround. but the problem is that i don`t like hacks.global variables with such common name should not exist.,negative
pouchdb/pouchdb,jshint,2014-08-24T23:26:48Z,whoops. jshint mistake,neutral
vlucas/frisby,jasmine,2014-09-09T18:21:45Z,referenceerror: jasmine is not defined. ```at node_modules/frisby/lib/frisby.js:1117:1```which is```jasmine.matchers.prototype.tomatchorbenull = function(expected) {```it seems. if frisby depends on jasmin. it should `var jasmin = require('jasmin-node');` itself? or the documentation should indicate the need to issue some such statement prior to `var frisby = require('frisby');`?,neutral
vlucas/frisby,jasmine,2014-09-18T13:50:07Z,will be good to have this after and before,neutral
vlucas/frisby,jasmine,2014-09-21T19:17:19Z,mschroering the issue still persists. i guess it has to more with jasmine-node than frisby.,neutral
vlucas/frisby,jasmine,2014-09-22T11:51:57Z,you can use the jasmine command line option --config name value and its accessible in  the code using the process.env.<name>,neutral
vlucas/frisby,jasmine,2014-09-25T22:23:02Z,that definitely works. i would prefer a way to not have to wrap all of my frisby test in external jasmine wrappers. but your solution seems to work.thanks dguerrier,neutral
vlucas/frisby,jasmine,2014-10-02T21:52:43Z,frisby.js is designed to be run with `jasmine-node`. which will ensure that jasmine is included.,neutral
angular/protractor,jasmine,2016-11-15T13:43:30Z,protractor. after 20 clicks have a  async callback error. i need to wait until the item will be 'completed' statusthere is my 'it'it(" should be competed generated report". function(){        let refreshbutton = element(by.buttontext('refresh'));        let queuedstatus = element.all(by.csscontainingtext('.ui-grid-cell-contents.ng-binding.ng-scope.ng-isolate-scope'.'queued')).get(0);        let generatingstatus = element.all(by.csscontainingtext('.ui-grid-cell-contents.ng-binding.ng-scope.ng-isolate-scope'.'generating')).get(0);        function waitgoodstatus(promise) {            refreshbutton.click();            browser.params.wait(element(by.css('.ui-grid')));            promise.ispresent().then(function(result){                if (result){                    waitgoodstatus(promise);                }else {                    waitgoodstatus(generatingstatus);                }         }).catch(function(er){                    waitgoodstatus(generatingstatus);            }            )        }        waitgoodstatus(queuedstatus);    })it works. but after 20 clicks i have such error - error: timeout - async callback was not invoked within timeout specified by jasmine.default_timeout_interval.set defaulttimeoutinterval is not helpedany suggestions?,negative
angular/protractor,jasmine,2016-11-16T14:42:36Z,thanks juliemr . but i've already specify jasmine.defaulttimeoutintervaland you can find it in my previous postjasminenodeopts: {        defaulttimeoutinterval: 30000.         print: function() {}    }it would be good if you give me a link where i can post  my issue,positive
angular/protractor,jasmine,2016-12-05T20:17:25Z,deps(update): move types/jasmine to devdependencies. - update outdated dependencies- move types/jasmine to devdependenciescloses #3792,neutral
angular/protractor,jasmine,2016-12-07T09:14:32Z,cnishina any idea. when this will be released?,neutral
angular/protractor,jasmine,2016-12-07T19:15:53Z,borntraegermarc today sometime,neutral
angular/protractor,selenium,2015-11-16T18:16:33Z,this is almost certainly not an issue with protractor. but with webdriver connecting to the selenium grid. `error forwarding the new session` is the relevant part of the stack trace. maybe you're hitting problems with the maximum number of instances sometimes? stack overflow would be a better place to have this discussion.,neutral
angular/protractor,selenium,2015-12-11T03:48:36Z,driverproviders/direct.js: fix driver path generation for *nix platforms. i was trying to run protractor tests locally on mac os. but was having error messages that `selenium/chromedriver.exe` not found. very confusing. hopefully this change would make it more clearer.,negative
angular/protractor,selenium,2015-12-11T04:31:52Z,i think this more explicit approach makes sense to me. we should double check that this works on a windows box (i'll try to boot up a vm tomorrow).,neutral
angular/protractor,selenium,2015-12-11T05:30:04Z,nicktomlin your comments were addressed :+1:,neutral
angular/protractor,sauce,2014-09-19T22:03:31Z,does it take a long time to load pages manually? then protractor (or webdriver) can't help you.protractor may be slow when using `element.all` searching over a bunch of elements.if you are running tests on saucelabs. you might be getting network latency.other than that. it's hard to offer suggestions. how slow is slow?,neutral
angular/protractor,sauce,2014-09-23T00:48:07Z,i'm closing this since the issue has been brought up with sauce labs and isn't specific to protractor at all.,neutral
angular/protractor,karma,2016-09-26T19:04:04Z,> have an protractor init method for generic skeleton structure / hello world (similar to other karma typescript support. see example: karma-runner/karma#2224)whats the benefits with this approach?i was thinking about external yeoman generator. there are some already. but without typescript support out of the box.,neutral
tapjs/node-tap,standard,2016-08-27T15:06:12Z,that installs it on everything but the root-most test itself. you also need to call `require('tap').addassert()`.,neutral
tapjs/node-tap,standard,2016-08-27T15:26:51Z,adding it to the prototype also adds it to the root test. that's how all the root test assert functions get there in the first place.,neutral
tapjs/node-tap,standard,2016-08-27T16:06:30Z,try it. i tested it. and the code requires it. when you've a handle to the module. you have an instance of test. changing the prototype doesn't change all of the instances previously made. from root.js:``` jsvar test = require('./test.js')var tap = new test()module.exports = tap```,neutral
tapjs/node-tap,standard,2016-08-27T16:12:36Z,you call `addassert()` prior to `tap = new test()` because this is the last line of test.js:``` jstapasserts.decorate(test.prototype)```,neutral
tapjs/node-tap,standard,2016-08-28T15:18:36Z,test methods are bound to the instance. so _overwriting_ something on the prototype (or adding a prototype method that they already have) won't have any effect.that's to support passing methods around. like `somecallbackfunction(t.end)`,neutral
tapjs/node-tap,standard,2016-08-29T00:19:39Z,thank you for your continued patience educating me on tap. node. and js. i'll look into your response shortly. my tool is shaping up nicely. want to get it up.,positive
tapjs/node-tap,standard,2016-08-29T06:05:12Z,jtlapp no problem.  glad you're having fun with it :),positive
jquense/yup,eslint,2018-06-01T21:44:21Z,what you are seeing is an eslint error. trying to warn you that it looks like you are trying to interpolate a string but using the wrong quotes.the error is wrong. you can turn it off by changing your eslint config. or if you wanna keep the rule on you can change the yup messages to use a function instead like: ```jsparams => `must be at least ${params.min} characters long````,negative
webpack/webpack-dev-server,eslint,2016-09-04T17:04:50Z,remove js-beautify and improve eslint config. **please check if the pr fulfills these requirements**- [ ] an example has been added or updated in `examples/` (for features)- [ ] docs have been added / updated (for bug fixes / features)**what kind of change does this pr introduce?**- [ ] bugfix- [ ] feature- [x] code style update (formatting. local variables)- [ ] refactoring (no functional changes. no api changes)- [ ] build related changes- [ ] ci related changes- [ ] other... please describe:**what is the current behavior?** (you can also link to an open issue here)before. there were two linters doing the same thing: linting and fixing lint errors. there were also two commands for this. `npm run lint` and `npm run beautify-lint`.eslint has gotten extremely popular (especially since jscs was merged into eslint) and is very actively developed. so it makes sense to move over to eslint. many people also have eslint setup in their editor.**what is the new behavior?**now. there is only one linter. eslint. the js-beautify config is merged in the eslint configas best as i could do. there is almost no documentation about the rules of js-beautify.so this was a bit hard.eslint was updated to v3. which provides many powerful rules. and auto-fixing of some rules (with `npm run beautify`).`npm run beautify-lint` was removed. because `npm run lint` does the same now (which makes sense).**does this pr introduce a breaking change?**- [ ] yes- [ ] noif this pr contains a breaking change. please describe the following... - impact:- migration path for existing applications: - github issue(s) this is regarding:**other information**:i also checked the new eslint config against the main webpack repo. and adjusted the rules accordingly. this config finds about ~ 50 new errors in the main repo. but these are all very valid (e.g. dead code. inconsistent code style). optionally. i could update the main webpack repo after this.another interesting thing to do would be to make a new repo with this config. `eslint-config-webpack`. but that's outside the scope of this pr for now.pinging thelarkinn for review.,negative
webpack/webpack-dev-server,eslint,2016-09-04T21:08:44Z,lgtm!,neutral
balderdashy/sails,mocha,2014-02-13T13:47:55Z,oh thanks.but it's a petition for consider this as a bug. if someone thinks like me.if that the case. i am willing to pull request and try to fix it!,positive
balderdashy/sails,mocha,2014-03-12T18:06:13Z,yes. this seems to conflict with the `colors` option in captain's log.  try just using the `-c` option for mocha instead.,negative
meanjs/mean,snyk,2017-06-14T23:52:23Z,lirantal any update on this?,neutral
meanjs/mean,snyk,2017-06-15T05:21:28Z,we're blocked on the snyk platform finding a solution to work around travis-ci implementation which doesn't allow the token to be used for forked repos which is what happening when prs are being run.we're already integrating with snyk through github so we're ok.,neutral
meanjs/mean,snyk,2017-06-27T23:37:43Z,i'm not sure why `snyk` would add itself to our package dependencies. along with the other changes to *package.json*. my assumption was that it was merely an external service that monitored the repo.i suppose that when we opted in to use snyk. we agreed to some sort of level of trust that it "knows best"? :),negative
meanjs/mean,snyk,2017-06-28T06:32:27Z,guys i'm going to remove snyk from being run through travis ci. mainly because we already have security integration through github as part of our checks so once we have a good baseline we don't need the cli running.i'll re-visit this to fix it properly and ping you with the update.,positive
meanjs/mean,snyk,2017-06-28T21:28:43Z,i agree that we shouldn't have it integrated as part of the skeleton so that users who fork and may choose not to work with snyk don't have this tie-in. we're already covered from security aspects in terms of monitoring our project both through the snyk.io platform and their github integration as you can see in the pr for tests that pass.i'll close this and open a pr to give outdated packages.,positive
meanjs/mean,snyk,2017-06-30T07:17:09Z,don't need this anymore. closing.,neutral
meanjs/mean,karma,2014-11-04T00:10:47Z,remove unecessary comment in karma.conf.js,neutral
meanjs/mean,mocha,2016-08-28T11:35:26Z,lirantal this pr just fixes underlaying error we stumbled upon while looking into the issue #1455. but doesn't fix the initial problem he/she was reporting: `.end()` doesn't get called if `.error()` happens. you'll need a fix for #1455 separately....at least we now know how to cause mocha error out easily. ;-)kudos for nicksellen for that semver fix btw. he made that for trustroots initially.,negative
KeitIG/museeks,eslint,2017-03-22T13:57:38Z,header improvements. fix #41 min-max window controls fix #305 cover componentfix #311 ctrl-f focuses searchfix #328 comma-dangle eslint rulestill a layout problem i'll try to fix asap,positive
KeitIG/museeks,eslint,2017-03-22T14:07:34Z,#yolo,neutral
KeitIG/museeks,eslint,2017-03-22T22:29:09Z,> still a layout problem i'll try to fix asapwhich one?,negative
KeitIG/museeks,eslint,2017-03-22T23:05:37Z,volume button is overlapping on the cover,neutral
KeitIG/museeks,eslint,2017-03-29T09:14:48Z,a few things:> read about the code architecture in docs/code/architecture.would love to see this :smile: or is everything in the first post of this pr ?fix conflicts and make sure to roll-back this eslint config to the state it was + fix all not-passing tests (should be eslint problems only).then you'll tell us how we can test it and do a quick tour of the features.,positive
DiUS/pact-consumer-js-dsl,karma,2016-05-02T00:12:26Z,issue with angularjs pact consumer dsl. hi am trying to generate pacts consumer contracts. am trying invoke an angular service which makes a simple xmlhttprequest. and before each. i have below codeangular.module('modulename'. [            'component'.            'ngmocke2e'        ]);tester = ngmidwaytester('modulename');        customservice = tester.inject('servicetobeinjected'); $httpbackend = tester.inject('$httpbackend'); $httpbackend.whenget('/search').passthrough();but when i run karma test task to generate pact it simply exits after "putinteractions" method.but contracts file is not generated. when i hit the service from browser or postman i get{"message":"no interaction found for get /search"."interaction_diffs":[]}i tried putting console loggers inside pact-consumer-js-dsl.js. it simply exits after putinteractions method. no errors found!am using karma.jasmine. angularjs. pact_node(for pact server).could you please help me out...,negative
DiUS/pact-consumer-js-dsl,karma,2016-05-02T04:20:55Z,hi. thanks for your reply. yes am using ngmidwaytester...,positive
securingsincity/react-ace,eslint,2018-01-26T04:36:34Z,> looking forward to the eslint babel-eslint change upstreamyou've peaked my interest mattblackdev. has ace switched to using eslint? i haven't seen anything about that being completed on the ace repo.,neutral
videojs/videojs-contrib-hls,standard,2016-10-31T13:50:27Z,the browser should be applying standard caching rules to the xhrs for keys. maddygoround benvirus colt082295. do you have caching headers setup for your keys? also. make sure you have caching turned _on_ if you're watching requests in the developer console. i'm pretty sure caching is turned off when the dev console is open by default.,neutral
videojs/videojs-contrib-hls,standard,2016-11-10T13:37:10Z,askaliuk can you put an example of the solution?,neutral
rooseveltframework/roosevelt,eslint,2017-09-11T17:07:51Z,full refactor of jscompiler along with lots of other stability tweaks. pr changelog:- refactored jscompiler for readability. and abstracting logic out of compiler modules. (prep for roosevelt-uglify module) (closes #22)- refactored appcleanup to be cleaner. more concise. and more defensive.- added a `rooseveltnorecurse` flag to `defaultparams` to indicate not to scan recursively in `checkobject`.- use path module to manage paths rather than string concat across app.- refactor jsbundler handling of params to be more defensive.- move automatic param auditing logic to `sourceparms`.- ensure `checkparam` is used for all params in `sourceparams`.- ensure html validator disabled warning doesn't appear in production mode.- bring deps up to date.- minor eslint rules tweaks to account for oneconst. function spacing.- merge `suppresslogs` and `disablelogger` params into single `suppresslogs` object containing params for `httplogs` and `rooseveltlogs`.,neutral
datastax/nodejs-driver,eslint,2017-09-15T02:00:21Z,the appveyor tests passed the first time.  nothing changed except eslint whitespace fixes.   maybe run it again.,neutral
brigand/babel-plugin-flow-react-proptypes,eslint,2017-05-24T06:59:06Z,please provide eslint config. hi.is there an eslint file (or similar) for this repo? i'm hacking on #71. #72 and i'd like my stuff to be formatted properly.,neutral
brigand/babel-plugin-flow-react-proptypes,eslint,2017-05-24T14:50:56Z,duh. it's in .eslintrc. sorry. i got confused with my ide complaining.,negative
mediarain/voxa,eslint,2017-11-09T21:17:34Z,hi i think you have a couple of more problems. i can't fix them all. seems like you don't use your eslint conf file in the ci. i also added that you can pass back the context to build more convenient state machines. i would also suggest you to add "comma-dangle": "off".to build waiting states where you can react differently on each intent after some question of alexa and of course:"no-console": "off"to your eslint conf for cloudwatch.but other then that your framework is great. keep up the good work.sebastian,positive
ljharb/qs,eslint,2016-10-07T11:33:26Z,unfortunately. i cannot fix all lint errors in the stringify.js without deep refactoring. i'd like to postpone it from now and change a little bit the .eslintrc file,negative
mapnik/node-mapnik,standard,2015-03-16T21:39:47Z,composite sync and async vector tile methods. composite in vector tile should support async methods. additionally: - look into using non standard protobuf library for reading- increase test coverage,neutral
mapnik/node-mapnik,standard,2015-03-18T04:41:26Z,added the sync capability. and increased coverage on these methods. still haven't looked at non standard protobuf yet.,neutral
koola/pix-diff,sauce,2017-09-09T13:31:06Z,feat(saucelabs). clean up saucelabs dependancies and mobile tests.,neutral
nodegit/nodegit,istanbul,2015-03-19T23:49:10Z,adds in cpp code coverage and joined js. this commit adds in cpp code coverage via gcc and gcov.  that lcov datais then joined to the javascript istanbul output and then generated intounified test/coverage/report and test/merged.cov reports.,neutral
nodegit/nodegit,istanbul,2015-03-20T07:35:42Z,tbranyen. this is super awesome. great work!,positive
nodegit/nodegit,istanbul,2015-03-20T13:27:17Z,mattyclarkson ha yea. only issue now is getting travis to use the right gcov!instructions for using this stuff:``` bashexport gyp_defines='coverage=1'npm installnpm testnpm covopen test/coverage/report/index.html```,positive
haraka/Haraka,eslint,2017-09-13T20:49:47Z,remove eslint rules to plugin. depends on haraka/haraka-eslint#13,neutral
haraka/Haraka,eslint,2017-09-14T06:28:29Z,use coding style standardjs. use of  coding styleit that not full match the needs. we can extend the rules of the eslint package of standardjswhat do you thing about it?,neutral
haraka/Haraka,eslint,2017-09-14T08:21:53Z,i'd rather prefer airbnb style but both of those styles are a big drastic change.we should agree on a final ruleset maybe. i'd rather be a similar style to the rest of the open source nodejs projects then completely different though. which is why i would agree on either standard/airbnb ruleset.,negative
haraka/Haraka,eslint,2017-09-14T08:33:15Z,i think all of this is just a massive distraction.we should be improving the software (read: making it faster. adding new features. fixing shortcomings) rather than concentrating on changing the style of the code.implementing this would create a massive patch-bomb (e.g. removing semi-colons).personally speaking - haraka is already missing a bunch of code that i wrote years ago because of changes like this making it so time consuming to keep things in-sync that i stopped trying.  i'll get around it it eventually but spare time is precious these days.,positive
haraka/Haraka,eslint,2017-09-14T08:44:32Z,i agree with the massive patch-bomb. maybe something as drastic as changing the style should be done for v3 instead?,neutral
haraka/Haraka,eslint,2017-09-14T08:47:27Z,> i agree with the massive patch-bomb. maybe something as drastic as changing the style should be done for v3 instead?yeah - i'd have no problem if we did it that way.   it would have to be done just before v3 is released though as trying to keep the v3 repo in step would become impossible otherwise.,negative
haraka/Haraka,eslint,2017-09-14T13:16:56Z,we are not changing the coding style.> on sep 14. 2017. at 4:47 am. steve freegard <notificationsgithub.com> wrote:> > i agree with the massive patch-bomb. maybe something as drastic as changing the style should be done for v3 instead?> > yeah - i'd have no problem if we did it that way. it would have to be done just before v3 is released though as trying to keep the v3 repo in step would become impossible otherwise.> > —> you are receiving this because you are subscribed to this thread.> reply to this email directly. view it on github. or mute the thread.>,negative
haraka/Haraka,eslint,2017-09-14T13:31:47Z,so we're sticking with using callbacks for v3? not promises or async/await?,neutral
haraka/Haraka,eslint,2017-09-14T20:42:22Z,ci tests pass now. after publishing newer `haraka-eslint`. manually nuking the travis-ci caches. and then restarting the tests.,neutral
haraka/Haraka,eslint,2017-09-15T21:42:14Z,the conversation can continue but the issue is. for the time being. settled by fiat.,neutral
haraka/Haraka,eslint,2017-09-16T16:00:40Z,convert .eslint.json -> .eslint.yaml. they are human edited and json is annoying to edit,negative
cliftonc/calipso,mocha,2013-10-01T18:20:42Z,testing modules. i was wondering how the team might be thinking about approaching the testing of modules (and i guess themes. too).i poked and played around with testing contenttypes and so far the awkwardness of trying to load modules in the mocha tests has gotten in my way.i know that for now. lib.core.module is just a stub -- and i suspect the goals of that file would be to test the module.js file -- not individual modules.so i guess my question is two-fold -- what to test in module.js. and how to test modules (be they core or otherwise).i realize this is a really open ended question. which is in fact why i'm asking it.  i'm hoping to start a discussion about testability in general and what could be done to move the ball forward!,negative
bitpay/bitcore,mocha,2014-12-12T14:41:38Z,good question. it crashes at the end of the report.ive run mochatest locally and it worked fine.looking at the stacktrace it doesnt even seem to be related to the codechange?maybe it crashed because i closed and reopened the pullrequest accidently while it was building?,positive
bitpay/bitcore,mocha,2014-12-19T14:56:19Z,idea: change default mocha reporter to 'nyan'. this can be done by editing mocha.opts :),neutral
bitpay/bitcore,mocha,2014-12-19T21:16:54Z,tried using it for a while. and it sucks for development. closing...,neutral
bitpay/bitcore,coveralls,2015-02-12T14:46:45Z,update coveralls token,neutral
qunitjs/qunit,eslint,2017-06-03T04:10:08Z,build: include bin file in eslint. a small fix that i noticed while working on other stuff.,neutral
ractivejs/ractive,coveralls,2017-06-02T20:24:15Z,mapped coverage. attempting to brute force sourcemapped coverage for coveralls.fixes #2920,neutral
ractivejs/ractive,coveralls,2017-06-04T20:41:12Z,there's still a bit of weirdness if you browse around on coveralls. but it's a lot better now. buble transpiles pretty politely. but have the _actual_ src show up in the coverage report is much easier to follow.,positive
admc/wd,selenium,2015-03-02T00:50:48Z,ah. thanks for your response sebv. i should've run selenium locally. it's clear now.,positive
admc/wd,selenium,2015-03-08T00:31:50Z,canonical way to detect selenium connection issue?. how do i detect that selenium isn't running. or wd can't connect to it? `browser.on('error')`?,negative
admc/wd,selenium,2015-03-12T08:27:39Z,i really think this is a selenium issue. selenium-standalone is only a wrapper. maybe try to run selenium itself,neutral
admc/wd,sauce,2013-10-19T05:09:54Z,looks like it is ok. closing.,neutral
admc/wd,sauce,2013-10-26T14:53:57Z,done,neutral
admc/wd,sauce,2013-11-06T12:36:20Z,so when using saucelabs you can set the orientation from the start with "device-orientation": "landscape". however. i would expect if i also set rotatable to true and then changed the orientation with setorientation to 'portait' it should rotate. the error from saucelabs when this occurs is ``` textpost orientationorientation: "portrait"=> org.openqa.selenium.iphone.iphonedriver cannot be cast to org.openqa.selenium.rotatable```looks to be an issue with selenium or the iphone driver. probably not wd. thank you.,neutral
angular-ui/bootstrap,karma,2013-12-29T00:26:05Z,chore(tests): fix test output on ci. use reporters in karma.conf.js to avoid confusion in the future.,negative
angular-ui/bootstrap,karma,2013-12-31T10:33:36Z,that is an useful option in karma (i don't use karma myself). and making tests faster is always good. if we have a lot of watches. that is something to lookup next :),positive
bitpay/bitcore-lib,karma,2016-06-14T23:19:51Z,closing as karma only runs firefox. and tests are all passing in safari.,neutral
pnpm/pnpm,eslint,2017-04-18T21:30:47Z,add an option to have dependencies flattened. the problem is that a lot of package are developed on the assumption that the dependency tree is flat. esp. dev dependencies. i've tried using pnpm on multiple projects. and all failed because babel. eslint or some other dev dependency could not resolve a dependency which it expects to exist as a result of dependency tree flattening (esp. eslint plugins).while this is not an issue with pnpm. and pnpm should not promote possibly harmful practices. the lack of this feature makes pnpm less useful of a tool.,negative
pnpm/pnpm,eslint,2017-04-29T07:44:20Z,> also i don't see in your workflow where you leverage the flattened node_modules structure.atom editor's eslint resolves eslintrc which in turn will try to resolve `eslint-config-standard` and if i use pnpm the linter-eslint will throw an error that it can't resolve the standardjs config because the tree isn't flat. to fix that. one solution is to add `eslint-config-standard` to my devdeps too. but i don't. if i add it. i'll just add all the `eslint-*` stuff instead of standard. but i don't want to add them. because the greenkeeper bumping spam. so i always try to have as low deps as possible.> it seems you just use global packagesno. almost never. just have rollup. mocha (hence. didn't write mocha for years ;d) and standard just for my fast fingers.> it will still use not more space per partition than npm or yarn.yea. in any way. in my case it won't be so much. and so i can reconsider using pnpm one day when i'm tired of yarn.in any way. keep doing the good job! :tada:,negative
pnpm/pnpm,eslint,2017-05-10T21:08:21Z,workaround: `pnpm i -s eslint-import-resolver-node`.please close if this resolves your issue.,positive
pnpm/pnpm,eslint,2017-05-12T13:33:34Z,`eslint-module-utils` has no direct relationship with `eslint-import-resolver-node`. the latter is the default resolver for `eslint-plugin-import` and as such is listed as a dependency of `eslint-plugin-import`.i'm not sure how to resolve this. short of removing the dependency from `eslint-plugin-import` and forcing users to manually install a resolver. my impression is that most users use the default resolver only. so this would be a worse user experience.any ideas? again. listing `eslint-import-resolver-node` as any kind of dependency of `eslint-module-utils` is more or less a non-starter.,negative
pnpm/pnpm,eslint,2017-05-12T14:00:22Z,>  again. listing eslint-import-resolver-node as any kind of dependency of eslint-module-utils is more or less a non-starter.a module cannot expect to resolve a dependency using a plain `require(dep)` it doesn't explicitly depend on in its `package.json`.`eslint-plugin-import` should pass its `__dirname` to `eslint-module-utils`. and it should resolve from that dir. the `resolve-from` package might help.,neutral
pnpm/pnpm,eslint,2017-05-12T14:14:26Z,maybe we should create an issue at `eslint-plugin-import` in that case,neutral
needim/noty,standard,2017-12-14T00:21:17Z,ok. i will separate themes for next release. probably next week.,neutral
needim/noty,standard,2017-12-21T02:05:53Z,beautiful. i'll update noty in my project tomorrow and report back if i run into any issues.,positive
angular/angular-cli,mocha,2017-03-16T20:47:53Z,any chance this feature request could include command: e2e as well as command: test ?,neutral
angular/angular-cli,uglify,2018-05-17T13:18:51Z,`--sourcemap` has been changed to `--source-map` in angular 6,neutral
angular/angular-cli,uglify,2018-06-03T19:32:34Z,+1we solved our problem by copying angular/cli into it's own directory and then including it in package.json like:`"angular/cli": "file:angular_cli".`hope this helps someone in the future. it's not ideal. but at least it works.,positive
Matt-Esch/virtual-dom,sauce,2015-04-06T10:32:51Z,testling is still helpful and easier to run than sauce. i'd prefer to keep it.,positive
Matt-Esch/virtual-dom,sauce,2015-04-06T11:00:35Z,todo: fix ie tests and find a way to stop breaking them. we keep breaking ie tests. sometimes by introducing incompatible things. is there a better way to do consistent ie testing that's easy to run? sauce has proven difficult (probably not a sauce issue. probably an issue with the test runner). and the current badge is extremely stale and kinda silly due to its size.,negative
quailjs/quail,standard,2015-11-29T11:05:56Z,ok. i think we can finally achieve this in the master branch.,neutral
cssinjs/jss,karma,2016-12-14T06:50:16Z,basically jss needs plugins to transform stylesheets. so you only need to test actual and expected code. e.g.```javascriptconst transformer = transformwith(require('jss-extend'))assert.deepequal(transformer({   foo: {      color: 'red'.   }.   bar: {       extend: 'foo'.   }.}). {   foo: {      color: 'red'.   }.   bar: {       color: 'red'.   }.})```and you don't need browser for it.jss needs `karma` only to test style injection afaik all other use cases can be solved inside node.,neutral
cssinjs/jss,karma,2016-12-14T09:12:26Z,well if i use karma in one case. why to use something else additionally. seems like an overhead. and no. plugins do in some cases way more than transforming style object.,neutral
facebook/react-devtools,eslint,2016-04-18T20:25:59Z,wow shrinkwrap is a pita. flow is now passing on travis. but something changed in eslint while trying to regenerate the shrinkwrap and now that fails. :(,negative
mostjs/core,eslint,2017-08-28T11:59:39Z,yeah. i think the name "prettier-standard" fooled me. too.  i also thought it meant "prettier _and_ standard". but it seems to mean "prettier configured to use formatting rules that are compatible with standard".it might not be bad to do something like `prettier-standard && standard`.  if they're both fast enough. that might be just fine.the more manual approach of using prettier-eslint + eslint might also be a good way to go.,negative
webdriverio/wdio-junit-reporter,mocha,2017-12-04T10:52:38Z,use fulltitle of a suite in reporter. i have some nested describes in mocha and in junit reporter they look ugly because reporter takes name of inner describe only.here's suggested patch to take fulltitle of a suite so in report it will look nicer.we can make it optional if you want no to break anything.,neutral
webdriverio/wdio-junit-reporter,mocha,2017-12-04T12:17:19Z,> they look uglycan you provide a screenshot of how the logs look before and after?,neutral
pghalliday/grunt-mocha-test,mocha,2014-01-16T19:23:47Z,dont start mocha if there are no files. i use grunt-mocha-test in combination with an watch event. to only run against the changed files/tests. therefore it can happen. that there are no associated tests for a given file.in these cases grunt-mocha-test runs with no files. which is not necessary.i've added a check against `this.filessrc.length` to stop the task without error on an empty list.,neutral
pghalliday/grunt-mocha-test,mocha,2014-02-06T14:44:09Z,haha. sorry. the word 'misled' may have been a bit heavy handed.i'd probably categorize my use case as pretty simple. as i've just got a script file in some directory and a test in another. but it's entirely possible that i'm just missing something really obvious with the configuration.with that said. i don't expect you to document blanket (or any other plugin) here. but i think it would be immensely useful if the example you gave had a bit more information about how it works. questions like where the tests are located. and where the script is that you're getting coverage on are ones of note.if there was. for example. a guide that users could follow step-by-step and generate a working then you'd be helping users of _this plugin_. it would be particularly neat if there was an example folder that users could directly reference. i don't think example configurations are always a necessity. but if the set up is as finicky as it sounds it might be a good idea in this case.i'd be more than willing to do all of this myself. but alas. i can't produce an example.i chose to raise this issue over here as it seemed to be an issue with its relationship with this plugin (the heavy coupling between the mochatest src and results returned from blanket suggested this). though. you're right. it could also be an issue with blanket (or solely with blanket).anyway. i appreciate your help. i'll check out the preprocessing. but i still think it's a good idea to update the readme regarding on-the-fly coverage :+1:,negative
pghalliday/grunt-mocha-test,mocha,2014-02-06T16:06:55Z,you're right. it does match things `node_modules`. the issue was getting it to match a particular set of files (/lib and /tasks). i wasn't able to get it to get both of those.i wouldn't worry too much about my particular case anymore. though; i've switched over to grunt-mocha-cov. but if you think it's worthwhile to update the docs to help future users i totally support that idea :+1:,positive
pghalliday/grunt-mocha-test,mocha,2014-02-06T16:18:37Z,heh. yeah i had browsed the source of blanket to see if i could figure more out about the pattern to get things working. i wasn't able to last night. but now that i've got grunt-mocha-cov working i've figured out a bit more about how it works. i'm thinking i'd probably be able to go back through and make it work with this task. but i'll prob. stick to grunt-mocha-cov just 'cause it's doing the task i set out to do.,negative
Project-OSRM/osrm-backend,standard,2018-10-09T22:50:44Z,you can examine the contents of the files using `tar tvf <filename>.osrm.*` - the file format is standard `tar` format.maybe try comparing the internal file list (the output of `tar tvf`) for both `portugal-latest` and `portugal-spain` and see where they differ.,neutral
Project-OSRM/osrm-backend,standard,2018-10-26T19:33:20Z,separately from relation `role`s or `direction` tags. the de facto standard for `destination:ref` is to append ` north` etc. in the local language (so ` nord` or ` norte` in some regions). osrm preserves these words in the `destination` property. because it doesn’t attempt to parse them out of the `destination:ref` tag.,neutral
npm/npm,standard,2016-02-25T01:24:45Z,cash looks pretty cool! i haven't tried it out yet. but it definitely seems like a comprehensive solution.i think `shx` will be a nice solution for users who want to be able to rely on shelljs semantics. cash is probably a good solution for people who don't like those semantics. or would like features shelljs doesn't offer. i think either of these would be good solutions.also. :+1: for implementing pipes (shelljs will release this feature in v07. but it was lacking it for many years).,positive
npm/npm,standard,2016-02-25T01:34:51Z,thanks! and :+1: for shelljs. it's really awesome!,positive
npm/npm,standard,2016-02-25T07:49:13Z,:+1: cash is really good. it would be amazing to have it as a part of npm. enabling writing cross-platform run scripts with what feels like plain unix commands.,positive
npm/npm,standard,2016-02-25T08:31:59Z,if as you say. it achieves posix compatibility then i would expect we would be very keen to integrate it. and yes. passing them through something like cash is exactly what we wanted to do. obviously that's a long way off right now. and it's a big project. but i would love to see it happen.while the command support is important. it's actually the shell command line parsing that i think is the biggest challenge here. env variable substitution. command substitution. a variety of quoting styles. inline math. globbing. etc. if a project can nail that down. writing posix-compatible implementations of the core shell tools should be pretty easy (in large part because that's so easy to split work up on).,positive
npm/npm,standard,2016-02-25T18:28:31Z,indeed. i saw cash and thought it'd be perfect for this.,positive
npm/npm,standard,2016-02-25T18:35:46Z,agreed. despite the fact that it might hurt shelljs's download numbers (:cry:). i think that cash is really awesome. and it would be better to just be able to write bash on every platform. and not worry about it.,positive
npm/npm,standard,2016-02-25T18:39:54Z,:cry: hurting shelljs is that last thing i want to do. which is part of why i promote it in my project. i don't really think the two conflict - they're just tailored for different purposes. shelljs excels by far in a programmatic environment.,negative
npm/npm,standard,2016-02-25T18:50:08Z,i don't necessarily think it's "better" to write bash on every platform. bash is nice. and it's nice to have that feature. i like shelljs because it uses javascript syntax. which i feel is easier to use than bash's (sometimes strange) syntax. writing simple commands is much easier in bash. and i think that's the strength of cash. i think writing scripts in shelljs is sometimes more robust than bash. however. and that's my aim for the shelljs project.i'd like to move the project toward more sensible defaults. ex. making iterating over lines of output trivial. instead of forcing the programmer to jump through the hoops to not iterate over each space delimited word. posix defaults are the right move for a shell like cash. but i think it's clear that shelljs can move on to something nicer for the programmer now that cash is covering that. shelljs will always have posix compatibility as a priority. but now we'll probably try to only do it where it's an advantageous feature.,positive
npm/npm,standard,2016-02-25T19:10:19Z,i don't really see the two as competing. for npm's case (to bring this back on topic). we need something that can evaluate posix shell (at minimum) command lines. as that's what lifecycle scripts have always been. this isn't a value judgement. just reproducing what `process.exec` was doing in a platform independent manor.,negative
npm/npm,standard,2016-02-25T19:21:05Z,i don't think shelljs will every be designed to parse bash code and execute it. so it (in itself) isn't quite right for that as part of npm. shx (our new project) is slightly closer in appearance. but still isn't a true shell. cash sounds like it aims to parse bash syntax. so it (or something like it) is probably a better option for npm here.,negative
mishoo/UglifyJS2,uglify,2014-01-07T16:38:56Z,support the spidermonkey ast with the node.js api.. i did a search for this. but didn't find anything. sorry if this is a duplicate.so. i'm writing a compiler for a language that compiles down to javascript. rather than generating the js source code myself. i think it'd be easier to generate the spidermonkey ast and then use another tool (like uglifyjs) to get js source code. including a source map.so. i would like the following to work:```var uglify = require("uglify-js")var foo = { ... } // spidermonkey ast. as a javascript objectuglify.minify(foo. {  spidermonkey: true})```similar to the existing `fromstring` option. the `spidermonkey` option would say that the input is a javascript object representing the spidermonkey ast.i can use escodegen (and esmangle for minification) for this. but i think uglifyjs is nicer.also. it would be nice to have the `beautify` options too. so my compiler can output either nicely-formatted js. or highly-minified and compressed js.,negative
mishoo/UglifyJS2,uglify,2014-01-07T16:45:46Z,there you go.  if you pass `spidermonkey: true`. as per your example. then it'll interpret the first argument as a spidermonkey ast.note that i didn't test lately the compatibility with this ast format.  if you find any problems please file issues.,positive
mishoo/UglifyJS2,uglify,2014-01-07T20:12:16Z,ah. thank you so much! excellent job on uglifyjs.,positive
mishoo/UglifyJS2,uglify,2014-01-07T21:40:55Z,`global_defs` is not listed under `compressor options``except` is not listed under `mangler options``prefix`. `enclose`. `expr`. `wrap`. `export-all`. `self`. and `lint` don't seem to have an equivalent with `uglifyjs.minify`. though i probably won't use any of those. so no biggie.also. i'm not sure how `screw_ie8` works... does it really have to be set on `compress`. `mangle`. **and** `output`?,negative
mishoo/UglifyJS2,uglify,2014-01-08T11:27:20Z,that's fine. but my comments about the lack of documentation in the readme still stand. even if it was something as simple as this. it would be very helpful:## mangler options...- `except` is the same as `--reserved`## compressor options...- `global_defs` is the same as `--define`## beautifier options...- `comments` is the same as `--comments`,negative
mishoo/UglifyJS2,uglify,2014-01-08T11:28:54Z,true. that.  i'll update the readme.,positive
mishoo/UglifyJS2,uglify,2014-01-17T13:42:33Z,i have also been trying to use the readme.md file of the project and it is still in error more than a year on.,negative
mishoo/UglifyJS2,uglify,2014-01-21T11:40:07Z,yes it would be definitely good to have an option for preserving function expression name. currently. i have modified figure_out_scope (scope.js) to pass back the names which i add back as exceptions on mangle option in (uglifyjs).,neutral
mishoo/UglifyJS2,uglify,2014-01-25T09:08:16Z,i will rename the option to `sourcemapembedsources`. this will create a mismatch with grunt-contrib-uglify though. regarding the `--in-source-map`. when you don't set `sourcemapembedsources` and provide a source map with embedded sources as an input. my code will not run and will not harm `sourcescontent` that was copied by uglify from the input source map.on a related note. do you know how to bring mishoo's attention to this pr? he's been quite active in this repo but seems to ignore this pr and related bug report.,negative
mishoo/UglifyJS2,uglify,2014-01-30T22:21:07Z,hi mishoo. i am also running into the same error. recenlty we upgraded our minifying to grunt and uglify and having the issue on ie. i saw the issue closed but what is the solution? thanks and appreciate your help,positive
mishoo/UglifyJS2,uglify,2014-01-31T05:25:33Z,rangeerror: maximum call stack size exceeded. i'm getting this error when i run```uglifyjs build/someproject.js -o build/someproject.min.js --compress```any idea why?,negative
localForage/localForage,sauce,2015-02-27T16:51:35Z,it looks like travis is only running mocha-unit and not the saucelabs tests. i'll see if i can open a saucelabs account myself and try to run all tests that way. i mean. they're executing. but `modernizr.indexeddb` is `false` in phantomjs. so it skips all the actual testing work.,negative
localForage/localForage,sauce,2015-02-27T17:23:55Z,i think there is something wrong with how grunt calls sauce. because it fails in the same way for me locally if i just do `sauce_username=foo; sauce_access_key=bar; grunt saucelabs-mocha`. but if i go into `node_modules/grunt-saucelabs/tasks/saucelabs.js` and hack the values of `this.user` and `this.key` in a few places. it at least succeeds in setting up the tunnel to saucelabs.,negative
konvajs/konva,mocha,2015-09-14T11:19:15Z,lavrton any ideas when it will be released? maybe i can help?,neutral
testem/testem,jasmine,2017-02-03T21:00:18Z,this is actually how jasmine shows errors. i'm closing this issue.,negative
testem/testem,mocha,2013-10-22T17:47:48Z,what are the variables leaked? maybe jquery is conditionally leaking depending on a feature test? if you need to configure mocha in a specific way. custom test page is one way. another way is to just add a little bit of javascript to configure mocha.,negative
testem/testem,mocha,2013-10-22T19:35:39Z,is there a straightforward way to use a `mocha.opts` file for the web? seems like it is a command line thing.,positive
testem/testem,mocha,2013-10-23T16:12:25Z,i can't see how testem has a part in causing this. i suggest you create an isolated scenario where jquery and mocha are the only players. and then isolate down to just mocha or just jquery.,negative
testem/testem,mocha,2013-11-01T02:47:33Z,messed up test reporting with latest mocha. since 9587dee92fd38b1d6c087474e5251bb7d70b731d (update to latest mocha) the test reporting is a little messed up.if no test fails. the tab for each connected browser is not updated and only shows `0/0 ✔`. moving through the tabs causes them to render correctly.the very last run test example (i.e. `it`) is not properly reported. it's not displayed along any other pending test. when itself is pending. if it fails. its assertion error is not displayed. instead pending tests will be displayed as if no test failed at all. when passing. everything is displayed fine.,negative
testem/testem,mocha,2013-11-05T21:18:55Z,confirmed. thanks for the report.,positive
DevExpress/testcafe,sauce,2016-06-15T12:55:24Z,i'm confirming. that it fixes problem in the asp test for local browsers. thanks. however. it is not sufficient for saucelabs.,negative
DevExpress/testcafe,sauce,2016-06-27T09:22:53Z,andreybelym i'm quite busy right now. can others review for now. pls. also. can you give some summary for how it works now and how plugins should be used/implemented. also. from quick view: i thought that saucelabs provider will be a standalone plugin. or it's just wip?,positive
DevExpress/testcafe,sauce,2016-07-08T09:10:20Z,> investigate the problem with saucelabs-connector. it opens vm with win7+safari instead of iphone and ipad.i've found my mistake here. thanks andreybelym for this. it should be ok,positive
indrimuska/angular-moment-picker,karma,2017-09-06T01:29:35Z,running karma with angular-moment-picker installed causes job to fail. hi there i've encountered an error with the bower install of angular-moment-picker when i try to run a karma job with the library install it fails on line 156  in angular-moment-picker.js`module.moment = moment`i found when i removed it it caused it to successfully bulidsis this able to be removed from the code. as it's not used anywhere else that i've seen.,negative
mochajs/mocha,mocha,2013-10-06T10:53:53Z,just tested the example with the recent mongodb. should and mocha. it works fine. if you insist. open this issue again. but provide detailed information on your specific case.,positive
mochajs/mocha,mocha,2013-10-07T18:29:14Z,code coverage doesn't cover files without tests. pretty self-explanatory. i have 20 or so files in app/ with zero coverage. and one test in test/. none of the files without tests are showing up in coverage.html```test:    mocha --reporter speccoverage: app-cov    code_coverage=1 mocha --reporter html-cov > coverage.htmlapp-cov:    jscoverage app app-cov.phony: test```,neutral
mochajs/mocha,mocha,2013-10-07T19:13:26Z,ignore explicitly exported globals. it would be nice if mocha ignored explicitly exported globals which are usually meant to be intentional.for ex (in browser):window.my_global = function(){...}(in node):global.my_global = function(){...}not sure how difficult this would be to do (probably very difficult without doing static analysis of the code itself)this would be a super useful feature because generally globals are intended when written like that... maybe the solution is to ignore global leak detection from mocha. and run a jshint on the files before hand and explicitly export the variable to global scope;,negative
mochajs/mocha,mocha,2013-10-07T20:31:50Z,this is already supported with by calling mocha with `mocha --globals jquery.yourlib` or``` html<script>    mocha.checkleaks();    mocha.globals(['jquery'. 'yourlib']);    mocha.run();  </script>```,neutral
mochajs/mocha,mocha,2013-10-07T21:37:58Z,right. but my issue is different. i think it would be useful if globals that are assigned explicitly/purposefully by the developer (window.myglobal) be ignored by leak detection) i know you can add them piecemeal to the globals whitelist.> on oct 7. 2013. at 4:31 pm. travis jeffery notificationsgithub.com wrote:> > this is already supported with by calling mocha with mocha --globals jquery.yourlib or> > <script>>     mocha.checkleaks();>     mocha.globals(['jquery'. 'yourlib']);>     mocha.run();>   </script>> > —> reply to this email directly or view it on github.,positive
mochajs/mocha,mocha,2013-10-07T23:07:07Z,nah. having so many global variables that you can't list them doesn't seem to be a good thing to support.,positive
mochajs/mocha,mocha,2013-10-10T13:47:57Z,thanks judahgabriel . your steps work,positive
mochajs/mocha,mocha,2013-10-10T21:54:15Z,hallas thank you. and yes -- i have tried multiple files. one for each config. a single call to mocha seems to run all the suites in parallel.in case it matters. here is how i call mocha on multiple files:```    ./node_modules/.bin/mocha \        $(find test -name '*test.js') \        --reporter list```,positive
mochajs/mocha,mocha,2013-10-12T06:51:54Z,what'd you run help2man on? definitely want to have a man page. but rather use makefile + ronn or something to make it programatically.,neutral
mochajs/mocha,mocha,2013-10-12T19:55:37Z,actually after further testing. i find that this way of doing separate 'runlevels' that the instances of mocha appear to be running asynchronously. so the second set of tests begin while the first are still running.bummer.,neutral
mochajs/mocha,mocha,2013-10-14T11:51:54Z,i created a bug on firefox. they said that it is by specification. the "top" property is not available until we actually use it. thus. i think we shouldn't use keys function in this case.,neutral
mochajs/mocha,mocha,2013-10-14T21:40:11Z,is this still on? generators or not. it's weird to ignore promises as then are pretty much standardised and i see them everywhere. the 2 year long demand in this thread seems to indicate they are a real thing. and it feels a bit counter-intuitive to have to rely on mocha-as-promised with the author-admitted hack. or splash boilerplate code all over the suite to make this work (as you'd expect dryness and safety in tests. especially in the runner itself).it would also improve reliability in all the mocha wrappers (like mocha-phantomjs. grunt-mocha and grunt-mocha-test).,positive
mochajs/mocha,mocha,2013-10-15T03:44:12Z,`it.promised()` doesn't sound like an appealing interface! if we need to be explicit about our use of promises anyway. putting it in mocha core doesn't provide much advantage over a simple decorator like this:``` javascriptfunction promised(fn) {  return function(done) {    fn.apply(this).then(function() {done();}. done);  }}```it's much friendlier for the regular `it()` to handle promise return values properly. as mocha-as-promised makes it do. and. again. it really doesn't take much code to achieve it.note that you _don't need q_ to enable promised tests; you don't need any promise library. since all that's needed to resolve a promised test case is the promise's `then` method. so adding promise support to mocha would not require adding a promise library as dependency.it would be _nice_ to have some kind of `mocha.use()` plugin system. but it'd also be a lot more complex than promise support alone. unless we have other use cases in mind. just adding the most-desired form of support is probably a better strategy than designing full-blown general plugin support.,positive
mochajs/mocha,mocha,2013-10-15T05:16:38Z,implementation details aside (plenty options there). i must say i'm warming to the separate method pattern: i think it has some practical benefits; like being able to assert if your promise-producing code is not accidentally returning undefined's instead of the expected promises (how would you catch this early in the 'overloaded' method?).as experiment i converted some of my code to this `it.promised()` decorator hack and it looks just as tidy as the mocha-as-promised based originals (little more explicit).another question: what would be needed of mocha would later support generator-based async? i have no idea about how it'd work. but maybe we should keep it in mind.if it requires custom code that doesn't mix with the regular code. old browsers or this promise code we can opt to also put it in its own method. like `it.awaits()` .it'll be extremely visible which case is running which async pattern (as no doubt people will mix).,negative
mochajs/mocha,mocha,2013-10-15T05:48:48Z,many applications of promise-producing test cases involve situations where you will _definitely_ get a promise and not an `undefined`. for instance. all uses of chai as promised:``` javascriptreturn thing.should.become("awesome");return list.should.eventually.contain("pie");```it's certainly true that at times you might get an `undefined` slipping under the radar. though. so you've a point there. whether or not `it.promised()` suites are as clean as overloaded-`it()` ones is pretty much entirely opinion; i think it's unnecessary overhead. personally. and currently with mocha-as-promised i use promise-returning suites almost exclusively so requiring a more complicated specification for promised test cases would be frustrating.also. "it will do the thing" is grammatical and "it promised will do the thing" is not. it feels kind of anti-bdd to mess up the sentence structure like that. especially for a modifier that certain codebases will be using _a lot_. something like `it.promises_that_it()` (or `it.promises.that.it()`) would preserve the sentence structure but also be even more annoyingly long.currently generator async schemes require a wrapper around the generator function. like `q.async()`; if that wrapper continues to be used for general generator-async use. then generators will work just fine with a promise-supporting mocha. if we (the js community) happen to shift to passing around generators directly instead of promises. there may need to be changes.,positive
mochajs/mocha,mocha,2013-10-15T13:12:06Z,i personally don't use chai as promised so much as it will replace the detailed assertionerrors that might get thrown in the various callbacks with it's own generic 'expected xyz to resolve' message. i'd rather assert more specific stuff on the actual values and get the nice diffs and all. i only use chai as promised to assert exact rejection reasons (even then usually not. because it limits flexibly in making assertions).i don't think we can proscribe specific usage patterns. assume exclusive promise-returning suites or have mocha make the assumption there will be a promise as expected: we need to be pragmatic and support any usage style.if the name of the method in bdd is a blocking issue then it becomes a simple linguistic problem. i think i"ll borrow `eventually`:```it.eventually("returns a valid document". () => {    return testapi.request(args).then((res) => {        //assert fields and/or chain    });});```and `eventually` even works well as the alternative for `test` in the tdd interface.,positive
mochajs/mocha,mocha,2013-10-15T13:29:17Z,> i personally don't use chai as promised so much as it will replace the detailed assertionerrors that might get thrown in the various callbacks with it's own generic 'expected xyz to resolve' message.> i'd rather assert more specific stuff on the actual values and get the nice diffs and all. i only use chai as promised to assert exact rejection reasons (even then usually not. because it limits flexibly in making assertions).you _can_ assert specific stuff on the actual values while using chai as promised. using `.eventually.` or more simply `.become()`. though. i recognise that `.should.resolve` assertions produce a generic and not exactly useful result. but those assertions are not really the main draw of the plugin anyway!> i don't think we can proscribe specific usage patterns. assume exclusive promise-returning suites or have mocha make the assumption there will be a promise as expected: we need to be pragmatic and support any usage style.i'm a little confused by this part. how is mocha making the assumption that there will be a promise. under the mocha-as-promised style? isn't it making _more_ of an assumption when you use something that makes it specifically expect a promise. like `it.eventually()`? and if we're going to support any usage style. why not support them implicitly if we can? we need an explicit `(done)` parameter for callback-based async. since otherwise the test case can't actually _call_ `done()`; we don't _need_ an explicit handling of promises. since mocha can quite easily detect that it got a promise as return value and handle it appropriately.if we really must use an explicit notation for promise cases. `it.eventually()` scans okay for me. certainly a much better sentence structure than `it.promised()` produces.the other problem i have with `it.eventually()` over the implicit mocha-as-promised method. though. is that a test case using promises is an implementation detail and not an external property of the test case. `it.only()` is a modifier that applies to mocha's external handling of the test case. as is `it.skip()`. `it.eventually()` instead signifies that the case internally operates differently; as such. i think that makes it worse than using a wrapper `it("does thing". promised(testcasefunc))`. since there is nothing externally fundamentally different between a case:``` javascriptit("does a thing". function(done) {  dothething().then(function() {done();}. done);});```and a case:``` javascriptit("does a thing". function() {  return dothething();});```,negative
mochajs/mocha,mocha,2013-10-15T15:49:01Z,domenic good to know! from design perspective. it's still an assertion library's job. the real problem is mocha does not publicly expose the hook?,positive
mochajs/mocha,mocha,2013-10-16T00:30:19Z,00davo well. you can argue this 'test case' vs 'function that tests case' difference if you really must. but i think it is academic and i doubt regular users will care for this distinction as long as they get proper promise support soon (which is what this whole discussion is all about).i really can't understand how `it.eventually()` could be considered so _dramatically_ ugly.it is almost identical as with mocha-as-promised you so admire. except it has just this simple injection of `.eventually` in the code (no hairy quotes. no long-range braces. no indents. no fancy syntax. just a dot and a identifier). regular `it()` is not happening and there is not a lot of alternative or boilerplate syntax that is cleaner then this approach.so let's stop arguing api uix concerns. they are not the main problem in getting promise support: it is policy and implementation technicalities that blocked the `it()` pull-request for 2 years (and gave us mocha-as-promised as desperation solution). and these are what my proposal could offer to solve in a slick and expressive way.i'll leave this as my attempt to get this rolling. awaiting alternate feedback.,negative
mochajs/mocha,mocha,2013-10-16T02:14:08Z,i'm -1 for more method names personally. that would complicate things more than the `return` duck-typing. especially since mocha usually doesn't do anything with return values from the `it` callbacks.,negative
mochajs/mocha,mocha,2013-10-17T14:23:57Z,reporter-specific options and support for the xunit reporter to output to a file. this is a less pervasive change to accomplish the same goal as #897 -- i.e. to have a way of separating the xunit reporter output from stdout so that it can be used in a ci system.in this approach i changed the mocha core to pass a set of reporter-specific options to the reporter class. as well as to call the reporter's done() method to give it a chance to clean things up.then the xunit reporter supports an output option to specify a filename. and flushes the file in done().,neutral
mochajs/mocha,mocha,2013-10-17T19:22:12Z,whoaa512 so what you want is a step further in the direction this code takes us..here is an example:you have tests:a. b. c and dtest a is a success test b fails on suitesetup (before). what i would expect is test c and d will continue to run so i can see the results of those files (each test should be isolated by suite). in reality what happens is mocha "end"(s) after b and no further tests are run. in the past there was a reporter bug that made it appear like those tests actually ran but they do not.does that clear it up?,negative
mochajs/mocha,mocha,2013-10-19T07:38:07Z,maybe something along the line:`it.if(condition. 'should do magic'. function()...)``it.skipif(condition. 'should do magic'. function()...)``skip(condition).it(..)`where `condition` is a boolean value. or a function returning true or false.,neutral
mochajs/mocha,mocha,2013-10-19T11:00:22Z,if you want environment or otherwise specific tests. you create those suits in different files / folders. so you can run them separately.,neutral
mochajs/mocha,mocha,2013-10-19T11:20:37Z,hallas i have a suite of tests that run in browsers. i'd like to skip tests when some features are missing (for example. xhr level 2. or indexeddb). my tests are grouped by the features they cover in my library. and i'd really like to have the feature detection (and therefore skipping decision) right next to the test code.,negative
mochajs/mocha,mocha,2013-10-19T11:23:47Z,alright i hear you. let's see what happens,neutral
mochajs/mocha,mocha,2013-10-19T21:53:56Z,run multiple tests in parallel. i am using mocha/supertest/chai to test an entire api framework. each time i run a full test (which includes about 40 '_mocha.js' test files)it take roughly 5 minutes to complete.  it would be far more efficient to run tests in parallel completing in roughly 30 seconds.  other testing frameworks i have used in the past are able to do this and have been great!  so question is. is it possible for mocha to also run tests in parallel?,positive
mochajs/mocha,mocha,2013-10-19T22:09:51Z,not currently possible and no plans at the moment. in lots of cases async tests end up slower. you can always make your own tests faster.,neutral
mochajs/mocha,mocha,2013-10-20T00:38:30Z,travisjeffery that is not the behavior i have locally when i revert the changeset but that is on mocha as of a month~ ago when i submitted the patch... i will rebase and see what is going wrong.,negative
mochajs/mocha,mocha,2013-10-21T04:20:35Z,adding test-integration is fine. but look at how the other test-\* (e.g. test-unit. test-compiler. test-requires) execute mocha from the makefile. where as your test-integration executes a node script and that executes mocha. so it'd be nice if test-integration was implemented as `.bin/mocha ...` rather than as it is now: `test/integration/hook_fail_before_each.js`,negative
mochajs/mocha,mocha,2013-10-21T14:57:14Z,visionmedia does this look okay to you? is there anything else i can do to help get it merged?,neutral
mochajs/mocha,mocha,2013-10-23T07:08:55Z,we also encounter these when we're using mocha for integration tests for deployed webapps.  i agree with jlipps that beforeeach() should be attempted again if your dealing with let's say a flaky api endpoint.jlipps  do you mind sharing. how are you currently getting around this mocha limitation in your apps?,neutral
mochajs/mocha,mocha,2013-10-23T16:23:46Z,although actually. you could just do:```beforeeach(function(done){  mystuffwithretrieshere(done)})```so it could be left out of mocha. or maybe we devise a little plugin thing so that this stuff can be easily altered from the outside,neutral
mochajs/mocha,mocha,2013-10-23T16:36:34Z,hmm mocha should be catching those with uncaughtexception and mapping them to the correct test case,neutral
mochajs/mocha,mocha,2013-10-26T18:21:00Z,ooohhh i lke this a lot! i'm with tj on this... i forked mocha planning on breaking it up into smaller modules but stopped because of priorities. tj have you thought about making mocha into a github organization? that might be useful to help achieve your goals (simplification / maintenance) and then a lot of the mocha related packages could be put there.,positive
mochajs/mocha,mocha,2013-10-27T04:34:44Z,visionmedia i hadn't realized that mocha could be extended in this manner. i'll try to convert this to an npm module instead.jprichardson i think rspec does this too. the core is split into different projects inside an rspec organization. etc.,neutral
mochajs/mocha,mocha,2013-10-29T03:20:22Z,how to stress test mocha unit tests?. is there a trick or a way to tell mocha to run lots of same tests in parallel for a longer time? something like a stress test?,negative
mochajs/mocha,mocha,2013-10-29T04:31:19Z,no tricks up mocha's sleeves for that.,negative
mochajs/mocha,mocha,2013-10-29T04:33:00Z,thx for that. does anybody else knows a recommended stress tool?,negative
mochajs/mocha,mocha,2013-10-31T05:20:32Z,i totally understand why this exists. and for the 90% case i agree it's the absolutely the way to go in mocha to let it `process.exit()`.  i was just wondering if there was interest in making it _optional_ to skip this feature via a command line flag similar to how `--bail` will make the suite exit after the first test.  i apologize for probably being a bit vague in my first post.you're right most node libraries don't clean up connections & timers and all that and it _is indeed_ a huge burden to have to do that in tests.  i'm probably not a normal case in that i'd really like to use mocha to test node-postgres. but one of the things i need is deterministic proof the process exited cleanly on it's own.  since i'm responsible for writing the code that does the actual cleaning up of database connections and connection pools and streams and all that crap i need to know it's working.  so the burden is on me to make sure things exit cleanly in my tests.  which means i'd really love it if i could tell mocha "nah. it's okay. i don't want you to exit for me.  if the test hangs i'll consider it an error."  mostly because node-postgres is so freakin' old i wrote it before mocha existed and it's just a `makefile` that runs individual `*-test.js` test files...every time i look at upgrading some of the tests to mocha i get stuck on the issue of mocha doing a `process.exit()` with no way to circumvent that behavior.i do see the other side that maybe some lower level libraries should use a lower level testing method...i've just become spoiled on the niceness of mocha in all my apps for testing & would love to use it _everywhere._ :smile: either way thank you & the team & contributors for a great testing lib. :+1: an example would be like...``` bash$  mocha test/ --no-exit```to tell the suite explicitly "do not call process.exit under any circumstances",negative
mochajs/mocha,mocha,2013-10-31T09:56:45Z,i hope that this pr would be merged.i can fix our a few codes to suppress stdout as you say easily.but i think that. if mocha has a "format" option. to output a valid report (regardless of the test-case) would be a responsibility.,positive
mochajs/mocha,mocha,2013-11-02T14:06:23Z,can we have it merged? i want to use a custom interface which wraps `it` blocks in fibers. `mocha --require ./fiber-ui --ui fiber-ui` doesn't work (i update `mocha.interfaces` inside `./fiber-ui.js` but it seems to get the wrong instance of `mocha` module).,negative
mochajs/mocha,mocha,2013-11-02T14:17:43Z,not sure though if it should mutate `exports.interfaces` global. maybe just setting `this._ui`?,neutral
mochajs/mocha,mocha,2013-11-02T14:44:16Z,itaylor see #1022 — it appears requires processed after setting an ui so even if i get right `mocha` instance this won't work,neutral
mochajs/mocha,mocha,2013-11-03T00:18:57Z,gonna go with #1022,neutral
mochajs/mocha,sauce,2017-01-17T15:10:44Z,actually i think it would be better to split the execution of the saucelabs test up so they are separate on travis. i'll make that change and update the pr.,neutral
mochajs/mocha,sauce,2017-01-18T08:58:58Z,come on saucelabs! i've been restarting this job at least 5 times now :(,neutral
mochajs/mocha,sauce,2017-01-24T05:41:26Z,> actually i think it would be better to split the execution of the saucelabs test up so they are separate on travis. i'll make that change and update the pr.if they are separate. how can we guarantee we don't run over the concurrency limit?,neutral
mochajs/mocha,karma,2017-01-24T20:35:57Z,using karma as a test runner and all the associated plugins to deal with webpack. for starters.,neutral
mochajs/mocha,karma,2017-01-25T12:40:48Z,getting there. i've updated karma-sauce-launcher (which has not been updated for a while). to support retries. because still sometimes browsers won't launch. karma-runner/karma-sauce-launcher#106,neutral
casperjs/casperjs,jshint,2013-09-27T22:27:36Z,fixed jshint errors and now the 190. 191. and 192 builds are now passing.,negative
casperjs/casperjs,jshint,2013-10-01T23:57:46Z,```jshint .modules/casper.js: line 1496. col 44. this function has too many statements. (21)modules/casper.js: line 1496. col 44. this function's cyclomatic complexity is too high. (9)modules/casper.js: line 1705. col 38. this function has too many statements. (17)3 errorsmake: *** [jshint] error 2```,negative
casperjs/casperjs,jshint,2013-10-02T00:17:28Z,aha - many thanks.  just installing rhino. jshint and xcode command line tools (for make) to run this myself.,positive
casperjs/casperjs,jshint,2013-10-06T08:18:48Z,looks good until minor bits are addressed and jshint not complains anymore so the build turns green :),positive
casperjs/casperjs,eslint,2015-12-01T17:54:19Z,please rebase your pr against current master. build failures seem to be spurious eslint problems and a "chainable" `fillform` is nice to have.,positive
casperjs/casperjs,eslint,2015-12-01T18:04:46Z,please rebase your pr against the current master. failing tests were due to spurious eslint issues. thanks.,positive
dfahlander/Dexie.js,karma,2016-12-21T13:57:37Z,rfc: split dexie.synable into multiple modules. i think that it would be a good idea to split dexie.syncable into multiple smaller modules. with multiple modules it will be easier to write isolated unit tests for the various functions. i believe that it will be easier to get dexie.syncable out of alpha if we have isolated unit tests for its functions. i personally also find multiple smaller modules to be more readable and easier to understand than one large module.from what i have seen. the build process can handle multiple modules so we shouldn't have an issue there.challenges:* many functions access variables which are global to the module or the parent function. this makes it harder to have those functions in their own module. we would have to pass all global variables as separate parameters or as options object* i'm currently not sure how easy it will be to actually write isolated unit tests since dexie.syncable does not seem to use karma and the dexie karma configuration only references the dexie file in the dist folder and not each individual file in the src directory. from what i can tell we would need to add a karma config which can reference the individual files,negative
dfahlander/Dexie.js,karma,2016-12-21T15:45:57Z,you're 100% right. should identify the private state vars and make them available somehow to splitted modules. either via the db.syncable property. or some other strategy. whatever seems most natural and easy to understand. could use es6 classes or even typescript if we would benefit from that.want to do the same for dexie.js as well. at least cutting out collection. table and whereclause for a start.,neutral
dfahlander/Dexie.js,karma,2016-12-21T18:47:50Z,that would be awesome. dexie.syncable / dexie.observable is a mess right now ;),positive
dfahlander/Dexie.js,karma,2016-12-28T13:41:09Z,pr was merged. closing this issue.,neutral
dfahlander/Dexie.js,karma,2016-12-28T19:48:59Z,refactor dexie.syncable tests and add new ones. move the client partials tests out of tests-syncable and intotests-syncable-partials (contains client/server partial tests for pollsynchronization).move the partialsthreshold test out of tests-syncable and intotests-syncable-partials.add delete(url) test in tests-syncable.add server partials tests in tests-syncable-partials.add tests-syncable-partials to karma config and test-syncable.html.,neutral
Jimdo/grunt-angular-toolbox,karma,2015-09-02T13:00:09Z,split into suites. in the past we learned that most projects require a bit more flexibility that what we can provide here.for example: - no e2e tests in angular- e2e tests in jquery- no test at all- only jshint / jscs- no styling the fact that we support sass **and** less is another indicator of this.i still want to keep the ootb. style but simultaneously provide more pluggabilityi think this modules would make sence:- **base**  provide project structure. demo. release and build tasks with webpack and a interface where other modules can plug in- **style-(less | sass)**  add css capabilities to demos and build tasks- **test-static**  add jshint and jscs tests - **test-unit**  add karma tests- **test-protractor**  add e2e tests for angular- **test-nightwatch**  add e2e test for others,positive
karma-runner/karma-sauce-launcher,sauce,2014-11-18T02:08:04Z,kimmobrunfeldt this doesn't actually flag the browser as having failed in `saucelabs`. did you manage to do anything further to get that to work?,neutral
karma-runner/karma-sauce-launcher,karma,2014-11-20T18:49:30Z,+1. the issue is very unfortunate because it costs money. it currently takes 15 minutes until sl shuts down the session when this happens. which means 14 paid minutes wasted.,negative
wix/detox,mocha,2017-08-17T19:18:56Z,you can skip usage in detox-cli and use mocha directly.i think node 6 is the minimum even if you babel your code. since we use `require('url').url`,neutral
ipfs/js-ipfs,mocha,2016-08-01T08:01:47Z,chore: remove unused devdependency: mocha,negative
ipfs/js-ipfs,uglify,2018-07-11T19:25:56Z,has anyone else been able to follow the notes here and get uglify to work ? adding```const uglifyjsplugin = require('uglifyjs-webpack-plugin');...    plugins: [        new uglifyjsplugin({            compress: {                unused: false            }        })    ]```to webpack.config results in```uglifyjs plugin invalid optionsoptions['compress'] is an invalid additional propertyvalidationerror: uglifyjs plugin invalid options```,neutral
ipfs/js-ipfs,uglify,2018-07-12T09:48:07Z,try:```jsconst uglifyjsplugin = require('uglifyjs-webpack-plugin');...    plugins: [        new uglifyjsplugin({            uglifyoptions: {              compress: {                  unused: false              }            }        })    ]```,neutral
ipfs/js-ipfs,uglify,2018-07-16T09:34:15Z,it would be better if ipfs just worked<sup>tm</sup> with uglify defaults.,neutral
ipfs/js-ipfs,sauce,2017-08-25T16:31:52Z,kappabooom i think you are trying multiple cases there and finding a couple of caveats.js-ipfs doesn't run the dht by default. the dht is the secret sauce that enables ipfs to find content on the network seamlessly.js-ipfs will try to find other nodes and will connect to the gateways. so any content that is on the gateway is discoverable.for example. if you boot 2 js-ipfs nodes in the browser. you will be able to exchange data between them because will discover each other and dial through webrtc. follow the dht pr for more updates :),neutral
google/closure-library,sauce,2016-05-27T16:01:36Z,ignore it. it's a sauce labs bug.,negative
chentsulin/electron-react-boilerplate,mocha,2016-08-03T04:51:51Z,could we somehow remove `co-mocha` from devdependencies? jhen0409,neutral
chentsulin/electron-react-boilerplate,mocha,2016-08-03T05:47:12Z,> could we somehow remove co-mocha from devdependencies?we can remove it. it looks unnecessary for now.,neutral
chentsulin/electron-react-boilerplate,eslint,2016-08-13T21:40:43Z,aj-ptw i merged in xwartz changes that appear to fix the issue with the package script. i'll also merged in the changes from the master. i ran into an eslint issue with the ci. but was able to solve it by updating the ignore - not sure if that is correct thing to do or not.in my opinion all modules that aren't for development should be in the "app package.json (./static/package.json) it's not currently that way. but i believe all native module will absolutely need to be in the app package.json for electron-builder to build them correctly.,neutral
pinterest/esprint,eslint,2018-03-29T23:30:47Z,add max-warnings option. the eslint cli has a `--max-warnings` option which allows a user tospecify the maximun number of warnings after which the lint shouldfail. this adds this same feature to esprint.,neutral
GoogleCloudPlatform/nodejs-docs-samples,jshint,2016-04-29T20:07:02Z,fixed jshint errors.,negative
vatesfr/xen-orchestra,standard,2016-05-27T17:24:47Z,you are not missing something simple because this issue is far from being simple. the http lib in xenserver is quite not standard for various reasons. but we'll dedicate some time to improve what we could on our side indeed.,neutral
vatesfr/xen-orchestra,standard,2016-06-01T08:52:00Z,this pr also shipped a `renderxoitem(item)` function which returns a component displaying an xo item in a standard way to use in a list or in a select.there is also `renderxoitemfromid(itemid)` which does the same thing but fetches the item from the store.,neutral
clux/sdp-transform,coveralls,2015-03-09T13:49:37Z,grammar not properly coveraged. should get notifications about untested rules in grammar.js. currently. coveralls stay quiet in prs because the grammar object is always loaded once. and whether their inner rules are used is hidden to jscoverage.,neutral
clux/sdp-transform,coveralls,2015-03-17T14:25:54Z,maybe a sensible approach to handle this is to ensure that all sdps in our test directory can parse with an empty `invalids` list.this way. the parse test + compose test will logically cover both the format string and the regex.it won't deal with session level invalids though..,neutral
rambler-digital-solutions/dotfiles,eslint,2016-12-09T11:50:32Z,hotfix/fix-readme-eslint unification of eslint config,neutral
react-boilerplate/react-boilerplate,eslint,2017-01-14T14:54:20Z,eslint config in a separate file. i'm trying to setup eslint support for webstorm and it requires a separate .eslint config file. but currently eslint configuration is stored as part of package.json. could we change it? if yes. i would be glad to make a pr.,positive
react-boilerplate/react-boilerplate,eslint,2017-01-14T15:22:15Z,see #185 and the subsequent pr #187,neutral
react-boilerplate/react-boilerplate,eslint,2017-01-21T06:37:21Z,eslint errors are not shown when you start an application. i used to use react-hot-boilerplate and eslint errors were immediately shown in a browser. with react-boilerplate i didn't see them and even thought i have no erros for a while but then i ran "npm run test" and all the erros are there.is there a way to show eslint errors immediately during development? if yes. why is it not a default option?,negative
react-boilerplate/react-boilerplate,eslint,2017-01-21T09:14:23Z,i should've been more specific. i do have errors shown to me in web storm. but sometimes you can miss it (especially when copy-pasting from other projects) and i expect to see these errors in a browser but i don't.,negative
react-boilerplate/react-boilerplate,eslint,2017-01-21T14:09:49Z,i don't think this is necessary functionality for now. it just distracts from actual errors.,negative
react-boilerplate/react-boilerplate,eslint,2017-01-21T16:59:20Z,hm... i have mixed feelings about treating eslint errors as not actual errors. if we don't consider them as such then may be we should reconfigure them as warnings.all i'm saying it's quite inconvenient to suddenly get all those errors in console during build and have no autoreload during fixing them (have to rebuild to check whether i'm done with them).i would really like to know what others think about this potential feature.,negative
react-boilerplate/react-boilerplate,eslint,2017-01-25T16:08:04Z,fix(eslint): enable rule react/no-array-index-key. fixes #1503,neutral
react-boilerplate/react-boilerplate,eslint,2017-01-25T19:55:28Z,gihrig the component `listitem` don'ts accept a `object` example:```jsconst items = [  { id: 1. name: 'hello' }.  { id: 2. name: 'world' }.];```which would be the best option to pass another component that accepts the property established by the fake state ?,neutral
react-boilerplate/react-boilerplate,eslint,2017-01-25T20:48:05Z,carloscuatin off hand. i don't have an answer for that...anyone else?,neutral
react-boilerplate/react-boilerplate,eslint,2017-01-26T11:49:04Z,closed. my lack of how knowledge on how eslint works was the problem. i need to resolve or skip  eslint issues.,positive
react-boilerplate/react-boilerplate,eslint,2017-01-27T11:43:19Z,from my point of view. i would say. first. explaining the concept then the actual tech used in the boilerplate:- main flow of the mechanics: from npm start (short desc about cross-env)-> linting -> webpack starting webserver -> compiled build folder is served -> (i'm not sure what is in-between) -> service worker started -> done!(this probably mostly just text. or maybe visual representation would be much better) (as you probably realized i am also just a beginner so i don't really know the flow. but i hope you got the point)then how webpack is structured and how it configure linting (what eslint & stylelint rules that applied in package.json). the testing environment (karma as the test runner. mocha. jest/enzyme. assertion lib). then the deployment with ci.after all this maybe more about the react & redux environment.,negative
react-boilerplate/react-boilerplate,eslint,2017-01-28T04:46:32Z,carloscuatin i tried the exact same thing. but it didn't work  maybe i missed something. let's go with this if it works,negative
react-boilerplate/react-boilerplate,eslint,2017-01-28T06:20:08Z,karandikarmihir >  i tried the exact same thing. but it didn't workwhat happened?current iteration works for me...carloscuatin another win for code quality ✨  thanks for hanging in there through all the back and forth!,positive
react-boilerplate/react-boilerplate,eslint,2017-01-29T07:43:33Z,docs: add js guidelines doc with first few rules explained. as talked about in #1213. here is a 'first draft' of a js style guide doc.i've only added a few explanations of deviations from airbnb for now - more could be added over time. whether that's before or after a merge.i realise that i might not be in the best position to really see this through on my own. mostly because my time has been spent working on non rbp projects for some months now also. there are eslint rules that i'm not so sure about and so can't write accurate justifications for them.happy to hand this over. let it go (if it's not deemed important) or just work with others who know better than i do - what ever works best!,positive
react-boilerplate/react-boilerplate,eslint,2017-01-29T10:33:25Z,this is looking great. spen!    thanks for taking out time for this. we really do appreciate it. you can update the doc one rule at a time. at your own pace. no rush! in the meantime. i'll try to follow your style and add some more rules.,positive
react-boilerplate/react-boilerplate,eslint,2017-01-29T10:35:11Z,this is awesome. feel free to take your time! (though i can't wait to land this),positive
react-boilerplate/react-boilerplate,eslint,2017-01-29T12:45:42Z,thanks for your initial thoughts guys :)i'm sure it won't take much longer than a week or two anyway - i might just have to throw plenty of q's about individual rule choices :)also. what do you think to addressing guidelines by eslint rule? i was going for that originally but airbnbs guide tends to talk about a subject. then list related rules... this might be a nicer approach for readability... i'll give that a go in my next batch!,positive
react-boilerplate/react-boilerplate,eslint,2017-02-09T17:06:55Z,is there any way to remove the automatic linting process from the testing command (npm run test) ?? or a way to remove eslint completely from the bolerplate? the lint on my machine isn't working and i can't test any of my components due to that.,neutral
react-boilerplate/react-boilerplate,eslint,2017-02-10T16:21:34Z,auto linting leads to some trouble when testing. because it is easy to get eslint error. especially when the config has been tweaked.could this default behaviour be changed. so that at least other tests are still run with the `npm run test` command even if there are linting error ?,negative
react-boilerplate/react-boilerplate,karma,2017-01-22T08:00:44Z,as the project has moved on beyond karma/mocha. and due to lack of interest. i'm closing this. but fee free to contribute if you have anything to offer.,negative
react-boilerplate/react-boilerplate,coveralls,2016-10-26T05:49:23Z,amilajack any idea why coveralls got stuck on this branch and others?,neutral
apache/zeppelin,selenium,2016-10-11T02:46:51Z,thanks felixcheung . do you know how to run selenium test ? i follow the instruction on readm.md. but fails ``````zeppelin comes with a set of end-to-end acceptance tests driving headless selenium browser```sh# assumes zeppelin-server running on localhost:8080 (use -durl=.. to override)mvn verify# or take care of starting/stoping zeppelin-server from packaged zeppelin-distribuion/targetmvn verify -p using-packaged-distr``````,positive
apache/zeppelin,selenium,2016-10-12T12:14:32Z,felixcheung test is passed. i suspect the selenium test is flaky so failed last time.,negative
apache/zeppelin,selenium,2016-10-18T07:26:55Z,also there is still the selenium test error:```failed tests:   sparkparagraphit.testsqlspark:188 paragraph from sparkparagraphit of testsqlspark result: expected: "age\nã¢â€“â¼\njob\nã¢â€“â¼\nmarital\nã¢â€“â¼\neducation\nã¢â€“â¼\nbalance\nã¢â€“â¼\n30 unemployed married primary 1787"     but: was "age\nâ–¼\njob\nâ–¼\nmarital\nâ–¼\neducation\nâ–¼\nbalance\nâ–¼\n30 unemployed married primary 1787"```,negative
apache/zeppelin,selenium,2016-11-05T07:22:51Z,rebased from master and seems like only selenium profile fails with: ```results :tests in error:   paragraphactionsit.testeditondoubleclick:443 â» elementnotvisible element is no...tests run: 17. failures: 0. errors: 1. skipped: 0```,negative
apache/zeppelin,karma,2015-11-30T15:57:23Z,corneadoug those logs are caused by the function calls from tests. will see if there is a way to ignore the console logs from karma config (similar to `drop_console` in gruntfile),neutral
yeoman/generator,mocha,2013-10-15T22:48:42Z,adding options for helpers.creategenerator. adding options parameter to `helpers.creategenerator` so that we can pass options like **ui**. **coffee** etc while creatinggenerator for tests.```this.router = helpers.creategenerator('backbone-mocha:router'. [    '../../router']. ['temp']. {ui: 'tdd'});```,positive
yeoman/generator,mocha,2013-10-15T22:54:48Z,can you add a unit test to validate the behavior and prevent future regression?,neutral
yeoman/generator,mocha,2013-10-16T07:46:04Z,sboudrias i have no idea. how to write tests for **test helpers** and where to get started. can you please help me to do it?,positive
yeoman/generator,mocha,2013-10-17T18:12:52Z,hey revathskumar.what you want to test is not if the `helpers.creategenerator()` return a truthy value. you want to assert the arguments/options you pass are correctly passed inside the generator.to do this. you should assert that the value received inside the generator (`unicorn`) constructor functions are correct.,neutral
yeoman/generator,mocha,2013-10-17T20:42:13Z,sboudrias i thought i just wanna make sure any argument will work. missing some argument doesn't break it. is this work as as you expected??``` jsvar unicorn = helpers.creategenerator('unicorn:app'. [    [unicorn. 'unicorn:app']  ]. ['temp']. {ui: 'tdd'});assert.equal(unicorn.options.ui. tdd);```,negative
yeoman/generator,mocha,2013-10-17T21:15:42Z,sboudrias but. what is the advantage of using self there? i am happy to learn and change my code.,neutral
yeoman/generator,mocha,2013-10-17T21:18:07Z,each `describe` block have a `this` scope. but i made a typo using `self` in the `it` block (i edited).avantage here is to access the arguments passed to the constructor directly without relying on the part of the system assigning the arguments to the `options` property.,negative
yeoman/generator,mocha,2013-10-17T22:59:13Z,revathskumar like i said. the `self` in the `it` block is a typo. it should be `this`. i edited my previous comment.,negative
yeoman/generator,mocha,2013-10-17T23:06:39Z,yeah. because you need to use self inside the `unicorn` constructor. and i think you need to use `beforeeach` instead of `before`.let me know how it goes.,neutral
yeoman/generator,mocha,2013-10-17T23:32:05Z,yeah. that looks good!,positive
yeoman/generator,mocha,2013-10-17T23:39:43Z,sboudrias  i just updated my tests. thanks for your time and correcting me.,positive
yeoman/generator,mocha,2013-10-20T23:05:15Z,i was talking a look at the tests and got sick of manually running them every time.  i had seen this issue. so i figured i would just implement a solution for running tests.the grunt module for mocha that i chose supposedly has an integration with coverall's. though i haven't used it to see if it works.  so that should be helpful i suppose.also. i setup a dynamic config to register watch and test targets for each test file.  this is so that you can leave the watch task running in the background while you work and not have it take forever running the entire suite of tests.  do you guys like that idea?this is a start whichever way you all choose to move forward with this.  hope it helps.,positive
yeoman/generator,coveralls,2014-06-17T08:58:02Z,closing for lack for lack of response. we would be happy to reopen if you get interested again though :),positive
yeoman/generator,coveralls,2014-06-17T16:28:18Z,leave it open. i'll take care of the fixes myself if we don't get them before i get there.,positive
rwjblue/ember-lifeline,eslint,2018-09-18T17:19:02Z,a couple more places to update. sorry. i assumed you'd change them all so only called out the one.i think we can add that eslint plugin later in a separate pr. for sure.,negative
zyra/ngx-facebook,karma,2017-12-09T10:39:26Z,ihadeedi am on the same issue now.i added script in index.html file.but when i have karma unit test. i got this error."referenceerror: fb is not defined"how can i do?,negative
OpenZeppelin/zeppelin-solidity,eslint,2018-08-17T19:00:29Z,i don't think any of the lines are massively long (or eslint would've complained). and quite like that they read very naturally as a single sentence e.g. `(await this.token.balanceof(investor)).should.be.bignumber.equal(expectedtokenamount);`. not sure if multiple lines would increase readability.of course. this is a case-by-case thing and not a hard and fast rule.,negative
OpenZeppelin/zeppelin-solidity,eslint,2018-09-05T18:04:38Z,nventuro my editor had prettier installed and it wrecked havok on the formatting i'm not sure if there's an easy way for me to revert those changes. since they pass the `eslint` rules.,negative
danethurber/webpack-manifest-plugin,jasmine,2018-04-02T17:18:17Z,test: from jasmine to jest,neutral
stripe/stripe-node,mocha,2014-07-11T22:29:32Z,hi!thanks for the suggestion. for right now we're not seeing any performance issues with our current promise library. bluebird is indeed fast. but we're not bottlenecked by speed of promises at the current time.we'll likely eventually switch over to the newer mocha features that have been released after the time we shipped stripe-node. but for right now. they work just fine and aren't high enough priority to convert.let me know if you think there's a real-world performance problem with not immediately switching to bluebird. but in my limited profiling for stripe-node use-cases. i really haven't seen a compelling case for making the switch (and potentially changing something subtle that a user was relying on).thanks!,positive
anvilresearch/connect-nodejs,eslint,2016-05-22T20:15:44Z,convert anvilclientspec.coffee test to .js. - also move from eslint to standard package,neutral
anvilresearch/connect-nodejs,eslint,2016-05-22T20:20:10Z,looks good.,positive
matrix-org/matrix-react-sdk,standard,2017-10-11T18:05:24Z,use standard subsitution syntax in _tjsx. make it possible to use the standard  ' %(variable)s' in strings translated using `_tjsx()`. replace the single old occurrence of a $variable with the standard syntax.,neutral
matrix-org/matrix-react-sdk,standard,2017-10-14T22:43:09Z,this lgtm - thanks!,positive
matrix-org/matrix-react-sdk,eslint,2017-09-28T09:09:02Z,add eslint rule to disallow spaces inside of curly braces,neutral
matrix-org/matrix-react-sdk,eslint,2017-09-28T09:41:34Z,does this hit both props and elements?i.e ```<foo thing={true}>    { thing }</foo>```or does it prevent spaces for `{ thing }` too?,positive
matrix-org/matrix-react-sdk,eslint,2017-09-28T10:24:10Z,t3chguy it now lints for to make sure the style of your snippet is enforced,neutral
matrix-org/matrix-react-sdk,eslint,2017-09-28T10:24:38Z,awesome!!,positive
matrix-org/matrix-react-sdk,eslint,2017-09-28T10:45:34Z,the spaces look a bit weird to me in things like: ```{ _t(...) }```...but it is nice that it's consistent.,negative
socketio/socket.io-p2p,sauce,2016-03-26T03:26:30Z,this should be fine to merge. tests are failing due to missing saucelabs credentials.,positive
vvo/selenium-standalone,selenium,2015-05-22T09:06:42Z,add a tip for running selenium as a service,neutral
vvo/selenium-standalone,selenium,2015-05-24T20:23:33Z,using a proxy will not always mean that your ip will be hidden. most proxies will tell your ip to the receiving end.what you want is an "anonymous proxy" where nobody can see your real ip. i guess it's not a selenium or selenium-standalone issue i am sorry.,neutral
vvo/selenium-standalone,selenium,2015-05-24T20:33:05Z,multiple calls to install should not redownload any file if that's what you are against.otherwise i am happy to add a command for this. yes. list a `selenium-standalone current` and programmatic friend,neutral
vvo/selenium-standalone,selenium,2015-05-24T20:42:42Z,latest selenium standalone does not redownload every time run/installed,neutral
vvo/selenium-standalone,selenium,2015-05-24T20:43:32Z,maybe go to the selenium issues to see if there's some matching bug,neutral
vvo/selenium-standalone,selenium,2015-05-24T21:30:04Z,thansk vvo good to know it won't re-download any files. the use case in my head was for a script (gulp/grunt/npm) task like 'run test' wondering if i should call 'install selenium' on every run (given that it won't re-download) or use the non-existing (yet) install-check. i guess it would depend on how fast/slow running 'install' is on a already installed setup.probably for now that's good enough. keep up the good work.,positive
vvo/selenium-standalone,selenium,2015-05-25T02:35:41Z,updated.i put the settimeout just to get rid of the noise made by some debugging i put in.  it actually starts the check for selenium before java has had time to start selenium.,neutral
vvo/selenium-standalone,selenium,2015-05-25T07:23:48Z,> i put the settimeout just to get rid of the noise made by some debugging i put in. it actually starts the check for selenium before java has had time to start selenium.you are right. i will put it back,negative
paypal/nemo-view,selenium,2016-08-29T16:38:59Z,what are the requirements for selenium 3 support?,positive
typicode/husky,standard,2017-09-12T18:47:39Z,jantimon that's a great idea - i'll try it. i had been installing a copy of node directly through homebrew. but i'll try this solution instead.,positive
rooseveltframework/teddy,mocha,2017-10-24T14:30:23Z,closing. as #205 adds this feature.,neutral
marionettejs/backbone.marionette,coveralls,2015-02-16T03:39:55Z,since when did coveralls start commenting on issues again?,neutral
kriskowal/q,jshint,2014-02-15T17:08:45Z,unavoidable eval breaks q when content security policy doesn't allow it. attempting to use q in a chrome app gives the following error> refused to evaluate a string as javascript because 'unsafe-eval' is not an allowed source of script in the following content security policy directive: "default-src 'self' chrome-extension-resource:". note that 'script-src' was not explicitly set. so 'default-src' is used as a fallback.this is the code that triggers it:```var hases6generators;try {    /* jshint evil: true. nonew: false */    new function("(function* (){ yield 1; })");    hases6generators = true;} catch (e) {    hases6generators = false;}```maybe there could be an option for avoiding this check?,negative
kriskowal/q,jshint,2014-02-15T17:12:10Z,i gather that this wasn’t even thrown as an exception. i was counting on that.,neutral
kriskowal/q,jshint,2014-02-15T17:13:16Z,nope. it just kills execution there and then...,neutral
kriskowal/q,jshint,2014-02-15T17:14:45Z,not very nice of them. i can’t withdraw support for spidermonkey in the `v1` timeline. but there are perhaps better ways to check. e.g.. existence of a `stopiteration` global that is _hopefully_ not a shim.,negative
apache/tinkerpop,standard,2015-10-14T00:45:46Z,if this is not happening. please close the pr.,neutral
apache/tinkerpop,standard,2015-10-14T15:09:56Z,this pr is apparently not how to accomplish the goal.,neutral
nteract/nteract,eslint,2017-01-14T19:49:15Z,> we should consider dropping the eslint-plugin-react no-unused-prop-types rule. it throws a false positive if you destructure your props in your component.sounds good to me!,positive
nteract/nteract,eslint,2017-02-06T18:57:59Z,is eslint taking forever to run locally for you guys? it hangs for 3+ minutes before i have to kill it.,negative
nteract/nteract,eslint,2017-02-06T18:59:23Z,it's taking forever for me locally too. i think it's a paired problem of eslint enabled for everywhere (not just src) and it is checking eslint within the node_modules of `packages/`.,negative
nteract/nteract,eslint,2017-02-06T19:13:29Z,from chat. peggy is adding ```packages/**/node_modulescoverage```to our `.eslintignore`,neutral
nteract/nteract,eslint,2017-02-06T19:20:19Z,with this eslintignore we no longer have to set the `npm run lint` to be specific here. i'm going to go ahead and merge this as is though!,neutral
nteract/nteract,eslint,2017-02-06T19:26:21Z,i actually tested setting `npm run lint` to `eslint .` as it was before. but it was still painfully slow for me. maybe i'm just being impatient?,negative
nteract/nteract,eslint,2017-02-07T19:13:16Z,closing. not moving to prettier (for now). in other news. i've enabled my eslint plugin in atom to auto-fix.,positive
hoodiehq/hoodie,karma,2014-03-12T12:57:54Z,going to close this. please reply if i'm meant to keep this open.,positive
hoodiehq/hoodie,karma,2014-03-12T13:19:36Z,it was? :),neutral
hoodiehq/hoodie,karma,2014-03-12T23:07:58Z,could you update 'all' karma plugins? just for good measure,positive
cucumber/cucumber-js,standard,2018-09-11T04:05:35Z,very odd. we are using the `absolute` option of glob so it should be resolving the paths to absolute paths. can you play around with glob and see if that option works as expected on your machine?side note: do you not like the standard directory structure with features/ as the top level and step definitions nested inside?,neutral
cucumber/cucumber-js,standard,2018-09-13T23:52:54Z,hello aslakhellesoy & charlierudolph thoughts on this feature request? it would be great to have the ability to transpose cucumberjs steps & hooks in line with es6 standards. thanks in advance.,positive
vector-im/riot-web,standard,2017-04-16T13:02:18Z,lampholder instead could we not have a prompt to save settings incase any changes have been made and yet closing it without saving. it would also be a pretty standard way.,neutral
vector-im/riot-web,standard,2017-04-27T09:46:33Z,the wonky extra pixel is there on chrome on mac. hoo-ray for browser standards.,neutral
vector-im/riot-web,standard,2017-04-27T12:34:59Z,hooray :),neutral
vector-im/riot-web,standard,2017-05-11T10:19:42Z,i seem to be getting `site cannot be installed: no matching service worker detected. you may need to reload the page. or check that the service worker for the current page also controls the start url from the manifest` when i try adding my local riot to my chrome home screen.**update**: i was using the "add to homescreen" link in dev tools which apparently doesn't do the same as the standard "add to desktop..." ui.,neutral
cloudchen/grunt-template-jasmine-requirejs,jasmine,2014-09-10T14:35:29Z,wait for the dom to be ready. i am using some libraries that require the dom to be loaded and ready before the tests are run. is there any way to specify that in the template? or if you all know a better way. i'm open for ideas. typically in my jasmine runner file i just wrap my function in a $(function () {}) call from jquery.  any suggestions would be great. thanks!,positive
cloudchen/grunt-template-jasmine-requirejs,jasmine,2014-09-18T04:01:01Z,some libraries wihich depend on dom to be ready should be loaded as dependencies of your actual amd module. because they are just dependencies. you should control whatever dependencies that will be loaded and how to load them. it has nothing to with this template.if those libraries need to be loaded unitil dom ready. you have to explicitly contorl it since that's code logic.hope that does work for you.,neutral
appium/appium,selenium,2015-01-19T11:54:33Z,how to interact with android settings. interaction with application using uiautomator is fine.but i want to access android settings as well as i am new to mobile automation :example :  1 toggle wifi2 screen orientation3 back button (currently i am using driver.navigate.back() which is working fine )4 tap on search button of keyboard. can u please help me with certain code snippets as i am writing the script using selenium webdriver,positive
appium/appium,selenium,2015-01-28T08:18:16Z,you can use driver.navigate.back() by creating an object of selenium web driver,neutral
appium/appium,selenium,2015-02-02T18:34:13Z,any new updates yet since we are in 2015 now?,neutral
appium/appium,sauce,2014-11-28T05:37:35Z,hai imurchie. jlipps.         in sauce labs ipad browser. my web site have list of button in right side when click any of button the pop up will display and that pop up is a big size so in browser display it shows that right side button list and that pop up display so at the point the pop up left side portion is cut in display that's the reason am cannot access the hided button it shows error like elementnotvisible - an element command could not be completed because the element is not visible on the page. selenium error: element is not currently visible and may not be manipulated.but suddenly it happen at the time am access the button on pop up. after some time hided page is displayed so cannot click hided button.when right side button list is hided means the pop up full view can get. and then easily access the button on that pop up. so pls give suggestion to get full view of pop up.regards.udhayakumar.,negative
appium/appium,sauce,2014-12-01T23:42:57Z,> in the terminal it passes but in the simulator it stays on the page.> nvdgoorbergh what do you mean by "terminal"?can you try doing a second click?  if that doesn't work. can you try opening the debug console and using jquery to click?  if that still doesn't work. if you could send us the app. we'll take a look at it.  we'll keep it in house.  eric a t saucelabs dot com.,neutral
appium/appium,mocha,2015-01-21T19:08:27Z,yes. this is the text going through a number of systems that treat it differently. this is why appium does not do anything to it. you. as developer and/or tester. need to make sure that both ends are the same. if you switch languages/test runners. the results may be different (i just did a test with javascript and mocha and the straight text works fine. for instance).,neutral
jhipster/generator-jhipster,eslint,2016-12-21T19:47:04Z,please fix the eslint errors,positive
jhipster/generator-jhipster,eslint,2016-12-21T19:47:33Z,please fix eslint errors,positive
jhipster/generator-jhipster,karma,2017-09-18T20:41:58Z,we definitely must check that it works on windows as well. however i'm not sure if your issue is a yarn problem or a karma + headless chromium issue.,negative
jhipster/generator-jhipster,selenium,2016-09-06T15:06:56Z,in `protractor.conf.js`this line seems to be wrong `chromedriver: prefix + 'node_modules/protractor/selenium/chromedriver'.` i couldnt find any such path. mraible could this be any issue?,negative
jashkenas/underscore,sauce,2015-11-05T21:01:37Z,+1 also justin if you create the branches on the main repo rather than your fork sauce can run on the pull,neutral
jashkenas/underscore,sauce,2015-11-06T16:44:11Z,but sauce did catch it eventually. right? the problem with this idea is that it wouldn't run on pulls from non-collaborators. i'd rather have better error alerting for both core and casual contributors than preference one over the other and potentially miss an error like this.,negative
jashkenas/underscore,karma,2015-11-06T02:43:31Z,yea we used to test for globals with qunit. not sure how we could do that with the current setup as qunitjs and karma-qunit don't support it afaik,neutral
agda/agda-stdlib,standard,2018-08-16T09:23:23Z,alhassy has just submitted a pull request adding this property in. so it's crunch time! i do feel like we should go for one of the "standard" names rather than make up our own terminology. - "centerless" - i think we all agree that "centerless" is bad.- "positive"  - seems to be highly overloaded and if you search "positive monoid" you don't get any resutls talking about this property.- "zerosumfree" - seems fine and gets lots of relevant hits. bit of a mouthful. but not a huge problem.- "conical" - seems fine and gets lots of relevant hits. the intuition works well for me.i vote for conical. with my second preference for zerosumfree.,positive
agda/agda-stdlib,standard,2018-08-20T12:56:11Z,matthewdaggitt `"conical" - seems fine and gets lots of relevant hits`; would you please share these. i've not found any within a few seconds search. nor even after refinement by including words `algebra` or `monoid`. in constrast. `zerosumfree` *immediately* yields a helpful wiki article.i think the choice of `conical` is somewhat reasonable. but far from ideal.someone navigating the standard libraries might appreciate `zerosumfree` as the property's definition is nearly in the name. whereas `conical` is suggestive of geometric properties --as indicated by nearly all of my google searches.,negative
agda/agda-stdlib,standard,2018-08-24T17:33:07Z,you're right. "conical" on its own doesn't bring anything up. i was searching "conical semigroup" and "zerosumfree semigroup".yes. "conical" implies some geometry but "zerosumfree" has it's own downsides. the word "sum" strongly implies additivity. but it could easily apply to the multiplicative operation of an algebra. swings and roundabouts :smile: if you feel strongly that it should be called `zerosumfree` instead then go for it. i don't particularly like `_neccessarilyidempotentfor_`. it's not one of the four standard names. and it's a little confusing as `op necessarilyidempotentfor x` does not imply `op idempotenton x` but it sounds like it should!,positive
agda/agda-stdlib,standard,2018-08-24T19:58:39Z,thanks. that does help. and i now understand where the name comes from.having said that i think we're pretty decided on sticking to one of the standard names. and in practice the two reasonable candidates out of those 4 are `conical` or `zerosumfree`. sorry!,positive
agda/agda-stdlib,standard,2018-08-30T10:29:58Z,closed with 8885d7a,neutral
agda/agda-stdlib,standard,2018-09-03T21:10:58Z,split up `data.maybe` into the standard hierarchy.. into:- `data.maybe.all`- `data.maybe.any`- `data.maybe.properties`- `data.maybe.relation.pointwise`- `data.maybe.relation.equality.setoid`- `data.maybe.relation.equality.decsetoid`,neutral
agda/agda-stdlib,standard,2018-09-07T13:08:22Z,hmm sorry for taking so long to respond to this pr. i've been thinking about this and have been on the fence.is there a compelling use case for `iuniversal`? if there is then should we be adding `idecidable`. `iirrelevant` etc.? the problem is with these is that they don't plug into much of the rest of the standard library infrastructure.when using `universal` cases the argument isn't usually(?) inferrable right. and in the cases where it is inferrable an underscore isn't that much of an imposition?,neutral
alphagov/govuk_elements,standard,2017-04-12T13:42:13Z,apparently it's 19px bold or 24px standard to pass standards,neutral
babel/babel,mocha,2016-05-13T14:12:54Z,my mocha tests using `--compilers` also fail b/c i cannot pass the proper ignore. as .babelrc is not honoured. pls. consider merging this in. thank you.,negative
jshint/jshint,jshint,2013-09-16T05:42:43Z,the use of . between strings. when translating code from php to javascript it is easy to miss that js use + and php use . as glue between strings.this will pass the jshint test and will break during runtime:```$row = $in.start + _repeat($tmp. $in.debug_level) . $in.name + " (" + $in.name_class + ") " + $in.extra + " " + $in.error + "\n" + $in.end;```the correct row should be:```$row = $in.start + _repeat($tmp. $in.debug_level) + $in.name + " (" + $in.name_class + ") " + $in.extra + " " + $in.error + "\n" + $in.end;```,negative
jshint/jshint,jshint,2013-09-17T14:51:54Z,ok. turns out i didn't have a recent enough jshint,neutral
jshint/jshint,jshint,2013-09-17T15:36:48Z,+1 for this. several of my developers would benefit from this and utilize jshint more often if they could more easily understand which rule is being violated so they can look it up and improve their javascript skills. myself included.i tend to fix violations i understand and ignore violations that i don't understand because i can't figure out which rule is being violated so in turn i can't easily find out why. i would be a better javascript programmer if i knew why.,negative
jshint/jshint,jshint,2013-09-17T15:58:14Z,license file missing from node module thereby breaking license terms. the license file is not being published with the npm module. so when you `npm install jshint` the license file is not included with the package itself. thereby inherently breaking your own license statement:`the above copyright notice and this permission notice shall beincluded in all copies or substantial portions of the software.`,neutral
jshint/jshint,jshint,2013-09-17T17:21:46Z,ok. that makes sense. i should have thought of that. yeah. so this comes from me trying to work with my legal department to open source something that includes a heap of npm installed dependencies and trying to make sense of the licenses of the depended upon projects to ensure they are compatible with the license we're using (apache 2 incidentally). my first attempt was a script that parsed all of the node_modules dependencies recursively trying to find license information (e.g. from package.json license properly. looking for a license file). etc. it's a really challenge because of edge cases like this one when the license files isn't included or the license is inline in the readme or source.i would at least recommend properly pointing to the license file in the package.json. feel free to close this unless you want to use it to track the "crock of ****" issue :)thanks!mike,neutral
jshint/jshint,jshint,2013-09-23T18:24:26Z,perhaps it's a bit verbose. but i don't it's too much so.sure. there's some pain in having to write all of this: `// jshint ignore:line` to ignore a line - and i think this is a good thing. because you're essentially telling the linter to not do its job when using this option. i hope that this discourages over-use.if we make it too easy to disable linting or it's used too often. things could get to a point where you have to start asking yourself why you're using a linter to begin with.that being said. if you're in a situation where you _have_ to write code that otherwise doesn't lint. or probably won't ever lint. then i think the pain of using this as a trap door is still less than all the false positive errors / warnings you'd be getting otherwise.,negative
jshint/jshint,jshint,2013-09-23T18:35:50Z,yeah these are good points. i just personally would prefer something a bit tinier -- but the jshint prefix is a good idea for sure. anyway. i won't write a patch then. i'll just let folks review yours. looks okay,negative
jshint/jshint,jshint,2013-09-24T22:16:54Z,i altered the tests to reflect the behavior i want. but couldn't figure out how to fit this into the architecture. i still think this would be a great addition to jshint. just not sure how to make it happen.,positive
jshint/jshint,jshint,2013-09-29T21:11:57Z,the "immed" option prohibits the use of parens around non-iife functions. the documentation says that "immed" makes mandatory to use parens around iife functions. but nothing is said about prohibiting the use of parens around non-iife functions.it could be nice to have 2 options controlling these 2 features. as we could want to enforce the use of parens around iife functions and in the same time not enforce to remove them around iife functions.i think it's important to have them around iife functions but i don't mind for non-iife functions.moreover. a bug in gjslint makes it necessary to wrap non-iife functions with parens when calling `bind` and therefore i'd like to enforce immed but still keep it possible to use gjslint in our project (which is firefox os) until we switch completely to jshint.,negative
jshint/jshint,jshint,2013-09-30T01:17:04Z,after a bit of reading. i discovered the `onevar` option. the following statement gives me the flexibility i was searching for:```/* jshint onevar: false */```,negative
jshint/jshint,jshint,2013-10-04T14:08:35Z,removed the specific globals and unused reporting from checkstyle report.... ...er.global and unused errors appear in the normal reporting and are reported twice. this also prohibits suppressing the error with a jshint comment such as // jshint unused: falseone error appears even if the above hint is added.,negative
jshint/jshint,jshint,2013-10-05T19:14:02Z,:+1: if you merge this. i'll be able to remove a few hundred lines worth of `/* jshint indent: false */`!,positive
jshint/jshint,jshint,2013-10-07T08:01:54Z,requiring js files from data dir fails if jshint is used as dep. commit 7f694e45d makes use of js files inside the data dir.however. if you npm install jshint as a dependency on one ofyour projects. you will notice the data dir is not present.this is because the data dir is deleted as part of the installationprocedure. i am not sure whether such files should be moved to thesrc dir (which is kept) or if data should not be removedin the first place. i have no opinion on that but i decided tomake a pull-request that fixes the latter.,negative
jshint/jshint,jshint,2013-10-07T09:36:16Z,is there a way to handle the suppression statements such as `/* jshint -w086 */`in the .jshintrc file so they are applied globally?,negative
jshint/jshint,jshint,2013-10-08T06:32:25Z,on the old website (we have a [new website now](). check it out) this was a display bug.,neutral
jshint/jshint,jshint,2013-10-08T06:40:53Z,this is still valid javascript. how do we know that `_repeat` returns a string and not a function without actually running the code?,neutral
jshint/jshint,jshint,2013-10-08T06:56:13Z,`package.json` and `license` files cover all files under the jshint repository unless specified otherwise. in case of `jshint.js` (the only file that is a derivative work of jslint) the modified license is inside that file. at the top.,neutral
jshint/jshint,jshint,2013-10-08T07:11:22Z,you should use locally scoped `/*jshint ... */` rules to relax the rule on a case-by-case basis. i think `maxlen` should be as strict as it is today.,positive
jshint/jshint,jshint,2013-10-08T07:16:18Z,see 9c2b8dd55bcc131420b6326cc56cc2863d0b268f. i've changed [the docs]( to reflect this.,neutral
jshint/jshint,jshint,2013-10-08T07:21:14Z,please fix the travis ci failures.,positive
jshint/jshint,jshint,2013-10-08T07:28:50Z,we will not be adding any new style-related options to jshint. sorry.,neutral
jshint/jshint,jshint,2013-10-08T08:03:20Z,thanks for your reply.i'm currently using the solution you proposed in #807 (prepending a /*jshint ... */),positive
jshint/jshint,jshint,2013-10-08T08:17:51Z,fixed the travis ci build and opened a new pull request #1305,neutral
jshint/jshint,jshint,2013-10-08T17:24:35Z,add option `warnlen` or have `maxlen` take bounds array. as a supplement to `maxlen`. which causes an error. `warnlen` would throw a warning instead.``` js/* jshint warnlen: 80. maxlen: 120 */```alternately. have `maxlen` take an array or range `maxlen: [80. 120]`.,negative
jshint/jshint,jshint,2013-10-08T17:29:06Z,what i meant with "method comments" as more jsdoc. i mean a comment that is before the function.if you can make that function-scope options applies to that function's previous comment aka jsdoc. then this would be good enough for me.that said. i don't get why the proposed behaviour is undesirable. if time resource is the problem. i'm perfectly willing to make a patch. as this will make it easier to use jshint in firefox os's gaia.,negative
jshint/jshint,jshint,2013-10-09T00:18:21Z,the --verbose flag will cause the warning/error "number" to be listed. which is a step.  if the docs correlated the numbers to the fancy names of the options. that would help.the .jshintrc file should also accept things like "w069": false to enable/disable warnings/errors.,neutral
jshint/jshint,jshint,2013-10-11T10:52:45Z,predef/globals do not work.. when i try to use jshint on multiple files only the first file checked properly. on all next files i get error about undefined var. i make dump of config loaded from hintrc for each run and notice that 'predef' becomes undefined after first run. { browser: true.  node: true.  predef: ['g'].  ...}{ browser: true.  node: true.  ...}src/line.js line 1  col 1    'g' is not defined.src/line.js line 78 col 17   'g' is not defined.   setting globals instead of predef {    "browser": true.    "node": true.    "globals": {"g": true}.''' gives me      line 0 col 0    bad option: 'globals'.,positive
riot/riot,sauce,2016-01-23T12:01:47Z,re-opened #1541 against the dev branch. sorry about that!there was already a test about if-attributes not mounting child tags. and i rewrote that one to cover the new behavior. where things aren't added to the dom. much less mounted.the ci seems to be failing to launch browsers on sauce labs. i'm not exactly sure how to fix that.,negative
riot/riot,sauce,2016-01-30T18:26:35Z,great work amarcruz  as always! i will try to fix this damn saucelabs script,positive
riot/riot,karma,2015-11-14T21:19:19Z,add instanbul as devdependency. i was unable to build + test riot because the `istanbul` package could not be located.  it's currently assumed to be a dependency of `karma-coverage`.this is most likely a problem because of npm 3. which now installs dependencies as a flat hierarchy.,negative
riot/riot,karma,2015-11-14T23:28:12Z,good idea. i think we should do the same with karma and mocha as well,neutral
NekR/offline-plugin,eslint,2017-10-13T21:37:38Z,i had to use url.location because location is not defined anywhere. so eslint complained. also complained about returning nothing in one case and something on the other. i also had to add url to the eslint globals. did i do anything wrong?,negative
angular/angular.js,sauce,2014-03-02T01:52:53Z,just so we're clear. the failure here is "error [launcher.sauce]: can not start firefox on saucelabs",negative
dc-js/dc.js,jasmine,2014-07-25T13:59:39Z,oy that's not fun. thanks for providing a detailed diagnosis; that's very helpful. any chance you could produce a fiddle showing the error so i can copy and paste it into a test case? (or a failing jasmine test case. but i know that's a lot to ask.),negative
dc-js/dc.js,sauce,2014-12-01T08:52:05Z,thanks for the contribution.i think i need more specifics to diagnose this correctly.  i tried testing this with a bar chart and did not see the bug.a few lines above the added line is a call to `_chart.redrawbrush`. which then calls `_chart.fadedeselectedarea`.  so i guess in your case either `_brushon` is not true. or `_chart.hasfilter()` is not true?but then i don't understand how there would be any filtered (out) elements to show.  please explain.also. i think there were some unintended saucelabs commits on this branch.,negative
assemble/assemble,mocha,2014-05-16T18:21:11Z,appreciate the pr. but it was correct before. master was previously passing and `before_script` would be the right hook. not `before_install`. travis runs `npm test` as its script if no script is specified. grunt is required there (`grunt mochatest`) but not before `npm install`.,negative
assemble/assemble,mocha,2014-05-18T05:52:06Z,bendrucker. usually we discuss things on this repo before making changes (not so much on the other ones). we also prefer to have peer review and get feedback. let's revert the changes. but not because of what i just mentioned. i think my issue with this is that you're making our default geared towards non-grunt users. given that assemble is still a grunt task. and given that _idiomatic grunt_ users should have grunt-cli installed globally. i only see disadvantages in doing this.  "idiomatic node.js" and "idiomatic mocha" and "idiomatic" grunt are different things. and installing grunt-cli globally is clearly the _idiomatic grunt_ way of doing things or it wouldn't be the default and recommended way of installing grunt-cli. recommended at the top of the page you linked to. thanks!,negative
istanbuljs/istanbuljs,istanbul,2017-11-14T16:12:46Z,+1i tried using `/* istanbul ignore next */` but it doesn't work for the comma syntax for constructor. anyone found a workaround?,negative
DefinitelyTyped/DefinitelyTyped,standard,2016-12-08T21:59:47Z,add note in readme about tsjs-lib-generator. not sure about the wording here. could be more specific about what is meant by "web standard".,neutral
DefinitelyTyped/DefinitelyTyped,standard,2016-12-12T17:23:54Z,merging this to get rid of pull requests targeting `master`. zhengbli. if you'd like to make some changes here. please make a pull request targeting `master` *after* 13233 is done.,neutral
DefinitelyTyped/DefinitelyTyped,standard,2016-12-29T21:55:27Z,feel free to send a pr and will merge it.,neutral
DefinitelyTyped/DefinitelyTyped,standard,2017-01-04T21:07:08Z,fyi. i'm getting errors when trying to use the webcomponents.js typings with this change:> typescript error: node_modules/types/webcomponents.js/index.d.ts(51.14): error ts2403: subsequent variable declarations must have the same type.  variable 'shadowroot' must be of type 'shadowroot'. but here has type 'shadowrootpolyfill'the problem is that `element.shadowroot` conflicts with the one defined in the standard `lib.dom.d.ts`. which has: `readonly shadowroot: shadowroot | null;`any idea on how i can use this typings with the standard `lib.dom`?,negative
