jprichardson/electron-mocha,mocha,2015-12-14T15:30:30Z,seems like it was completely unrelated; just a mixup of the new ipc module names. fixed by #32 above.,neutral
jprichardson/electron-mocha,mocha,2015-12-15T09:23:12Z,going to pass on this now. may reconsider later. thanks for your interest.,positive
jprichardson/electron-mocha,mocha,2015-12-15T09:26:41Z,if it works. i'll accept it into `electron-mocha`.,neutral
actionhero/actionhero,standard,2016-04-01T18:44:35Z,are those spaces a eslint standard? cause i am pretty used to the one without the spaces hehe :),positive
atom/etch,standard,2015-08-14T16:22:01Z,the root tag name is available as the standard `tagname` property on the element itself. though it's capitalized. i do agree it's a bit of a bummer to have to repeat the tag name. but i'm not sure it's worth the complexity of adding a whole facility for this.,negative
serverless/serverless,istanbul,2015-12-15T13:35:26Z,test coverage with istanbul. run `npm run coverage` to get test coverage.,neutral
uber/uber-ngen,jshint,2014-05-14T02:27:28Z,apply jshint fix. cc sh1mmer jcorbin,neutral
uber/uber-ngen,jshint,2014-05-14T21:09:15Z,dont ignore jshintrc. oops. cc sh1mmer jcorbin,neutral
airbnb/javascript,eslint,2015-07-22T04:34:51Z,mocha tests: missing function expression name. (func-names). when writing mocha tests. it is not possible to use fat arrow functions because we sometimes need to use the `this` keyword to change the test's timeout for example.``` javascriptdescribe('some description'. function () {  before('blabla'. function () {    this.timeout(10000);    return somepromise();  });});```this results in the following eslint error:```missing function expression name. (func-names)```i was wondering what was the guidelines for this case. naming the functions is out of the question as it would add a lot of noise.,negative
airbnb/javascript,eslint,2015-07-22T04:36:38Z,would `function blahblah() {` really add that much noise?,neutral
airbnb/javascript,eslint,2015-07-22T05:53:04Z,i just don't really see the point for mocha tests and it goes against the dry principle. e.g.```javascript    it('should return status 200'. function shouldreturnstatus200() {      expect(self.res.status).to.equal(200);    });```anyways. i added `func-names: 0` to my `tests/.eslintrc`.,negative
airbnb/javascript,eslint,2015-07-22T05:57:35Z,another alternative. that would be less sweeping. is adding `/* eslint-disable func-names */ to your`describe` block. which would disable it just for that scope.,negative
airbnb/javascript,eslint,2015-07-22T11:01:47Z,ok thanks.,positive
airbnb/javascript,eslint,2015-07-22T14:24:27Z,nkbt oh i see. so it's likely just a bug with eslint.,neutral
airbnb/javascript,eslint,2015-07-23T16:46:59Z,unused variables when destructuring?. i just wrote this code:``` javascript  dirtyproperties() {    return this._getproperties()      .filter(([ prop ]) => prop.isdirty())      .map(([ _. propname ]) => propname);  }```and eslint threw a `no-unused-vars` error because of the `_` variable. is this against the airbnb style guide? i feel like using _ to ignore the first destructured variable should be pretty well understood and not using destructuring would make the code more verboe.,negative
airbnb/javascript,eslint,2015-07-25T16:48:48Z,ooops. i just realized i can do `[ . propname ]`.,neutral
airbnb/javascript,eslint,2015-07-29T11:17:49Z,i was planning on creating a related issue regarding infrequent bumps too after i had woken up. so funny to see this just created. lots of changes have been made. most significant is probably the react guidelines to `.eslintrc` and updated rules such as `comma-dangle`. is it possible to publish a new `eslint-config-airbnb` package with the updated rules? it would be very much appreciated.,positive
airbnb/javascript,eslint,2015-07-31T01:04:10Z,dependencies removed,neutral
airbnb/javascript,eslint,2015-08-02T17:40:08Z,can i use eslint-config-airbnb without eslint-plugin-react?. i am not using react. so it would be better for me to just install eslint.is it possible to move the jsx related configs to a separated file?,neutral
airbnb/javascript,eslint,2015-08-05T01:28:58Z,sorry. i do not know that react/jsx-no-undef can cover no-undef. it works when i call eslint directly but not when i use gulp-eslint. thank you anyway.,negative
airbnb/javascript,eslint,2015-08-05T17:45:16Z,mention eslint-config-airbnb. actually. if we want to make the thing more convenient. we could go as far as saying:``````before using our `.eslintrc` install these dependencies:```shnpm install --save-dev eslint-config-airbnb eslint babel-eslint eslint-plugin-react`````````i want to leave the decision up to you though.,neutral
airbnb/javascript,eslint,2015-08-05T18:05:10Z,i agree about adding instruction on how to install. use. and update style guide using npm. but adding `eslint-config-airbnb` as a dependancy of `.eslintrc` looks wrong (or it should be added somewhere that .eslint should contain  `{ "extends": "airbnb" }`),negative
airbnb/javascript,eslint,2015-08-06T10:08:58Z,very nice. thanks for the heads-up!,positive
airbnb/javascript,eslint,2015-08-06T20:50:09Z,+1  we use `extends: "airbnb"` and would like `"indent": [2. 2. {"switchcase": 1}]` to be in `eslint-config-airbnb`.,neutral
airbnb/javascript,eslint,2015-08-08T14:51:09Z,simplify eslint config package.. this patch moves `.eslintrc` contents into `index.js` directly.this allows us to drop external dependencies and using javascriptcomments instead of not valid json.,neutral
airbnb/javascript,eslint,2015-08-09T00:20:49Z,:+1:,neutral
airbnb/javascript,eslint,2015-08-09T05:57:31Z,you still have to manually add the package to your `package.json` - try `npm install --save eslint-config-airbnb`,neutral
airbnb/javascript,eslint,2015-08-09T06:25:13Z,thanks for the fast reply!i tried `npm install --save eslint-config-airbnb` as well with the same result. i did add it to the package.json. it's on line 11 under dev dependencies (also tried under reg. deps.) the module is also in node_modules.any other ideas?,positive
airbnb/javascript,eslint,2015-08-11T18:37:09Z,i can also vouch that having `react/jsx-no-undef` turned on is not sufficient for `no-undef` to trigger in `gulp-eslint` or in an ide such as webstorm. at least it's easy to add that rule to the `.eslintrc` that's extending `airbnb`.,neutral
airbnb/javascript,eslint,2015-08-13T20:36:42Z,lgtm,neutral
airbnb/javascript,eslint,2015-08-13T20:37:16Z,i was mostly worried about preserving the file location inside our package for whatever reason,negative
airbnb/javascript,eslint,2015-08-13T23:13:54Z,same here. without `no-undef` referencing a variable that does not exist (e.g. typo) is not caught by eslint.,neutral
airbnb/javascript,eslint,2015-08-15T12:52:22Z,perfect.,positive
angular/angular-phonecat,karma,2013-08-09T00:56:50Z,update karma.conf.js. switched to current karma module.exports config syntax.,neutral
angular/angular-phonecat,karma,2013-08-09T01:00:22Z,merged switch to current karma module.exports config syntax.,neutral
velesin/jasmine-jquery,jasmine,2013-01-13T14:46:06Z,thanks.  i read the blog post.  the download page does seem a bit redundant.  seems like it would be hard for owners to remember to update each time. etc.the new code is great.  i wrote something i'm calling jasmine-jquery-$ that allows you to mock jquery's $.  you can add spy's that get applied in the future when the code under test calls e.g. $('happy').  this allows you to mock things like $(window).height() and $(document).scrolltop(). etc.  i needed it to test the endless page feature of the site i'm working on now.its pretty primitive right now.  i'll send you an email when i make a repository.  i thought you might be interested in merging it in with your code.,negative
videojs/video.js,standard,2015-11-17T23:19:22Z,we've decided on the style. so. going to close this. we still need to actually set up standard and lint to follow this style but those are separate.,neutral
videojs/video.js,standard,2015-12-10T05:17:06Z,gkatsev thanks for writing back. yes i am giving all players a unique id and also triggering this function for them all. and my all players are working as well. but my all players are initializing at once. means they are not id dependent. after my first player is initialize. i see console messages for all others like below:videojs: warn: player "566909b393faa" is already initialised. options will not be applied.videojs: warn: player "566909b39267c" is already initialised. options will not be applied.videojs: warn: player "566909b39589e" is already initialised. options will not be applied.videojs: warn: player "566909b396bf2" is already initialised. options will not be applied.this could only mean that plugin instead of initializing a single player when an id is passed to it. it is initializing all the players at once. right? so if i want a few of other player work differently it won't allow me to do so and give me above message.i had an another thing in my mind. if there is any way to know if specific id player is already initialize then destroy it and reinitialize with my need. q. can we check if player is already initialized? (check by id or selector supplied in player initialization)or i'll use a separate function for all other players but this is not a standard procedure to follow.i haven't used fiddle until now. i'll check how it work.,negative
fergiemcdowall/search-index,standard,2016-01-26T17:03:14Z,:+1:,neutral
fergiemcdowall/search-index,standard,2016-01-29T23:54:13Z,this is fantastic! but fyi it was an api breaking change and probably should have been a minor bump instead of bugfix bump.,positive
fergiemcdowall/search-index,standard,2016-01-30T05:19:07Z,yes. it probably should have been,neutral
sequelize/sequelize,eslint,2016-08-06T19:53:56Z,anything that i should change or can this be merged?,neutral
sequelize/sequelize,eslint,2016-08-08T06:47:59Z,thanks for pinging felixfbecker  ;),positive
TryGhost/Ghost,mocha,2013-10-22T14:59:46Z,15 seconds is a looooong time! the tests run super fast for me when run locally on my mac or windows machines. on vagrant they take a lot longer. i think it's all to do with the environment and load. travis fails a lot some times and then is fine other times.we do have to run all of the tests in travis. but we could still split out the db-reliant tests from everything else in terms of folder structure and 2 different tasks. it would provide some benefits in terms of clarity - that it is an integration test timing out not a unit test etc. and making running the tests when dev'ing easier.can certainly be a separate issue to this one though - i'm gonna merge this :),positive
TryGhost/Ghost,mocha,2013-10-26T22:24:17Z,deedubs looks like a solid option.i also know that endangeredmassa has a project he's been working on that _as i recall_ allows you to use mocha-style syntax on top of selenium. but execute your tests in a synchronous fashion. since i think the majority of our issues are due to time outs. synchronous functional testing might be a dream come true for us. that's not to mention the fact that our unit tests are done in mocha as well.all in all the easier it is to write and maintain the functional tests the better. we may need to evaluate several options before we can really resolve this.,positive
TryGhost/Ghost,mocha,2013-10-27T10:06:38Z,there is also a library that allows for using mocha and should style syntax with casperjs.i'm in two minds - one the one hand using webdriverjs would open up some more possibilities for us. it's more mature and works with things like appium. on the other hand. i really love the casperjs project. and want to support it - plus it has such an epic name ;). perhaps it would be worth asking n1k0 to wade in here and see if he can point out any ways we're using casperjs incorrectly?i don't think it's the framework that's necessarily at fault in the problem i reported. just a test which is intermittently failing in various ways. and i think we'll get that with any js test framework.,positive
TryGhost/Ghost,mocha,2013-11-13T04:19:19Z,robconery i know who you are. i'm a big fan of this developers life and your [presentation laced with daft punk and mocha]( is what turned me on to being a node developer after 7 years of c#.  :beer:but. let's be clear. it's not _us_ making a requirement that people do something extra. that's azure.  also. if people don't want to make a web.config. they can make a single line server.js like you did.  i don't think that's an internal detail for us. it's a very specific hosting platforms oddity.i feel like this is a slippery slope; a server.js here. a procfile over here. a shinynewplatform.bison over here.  why should hosting platforms dictate what code goes in our repo?,negative
anvilresearch/webcrypto,mocha,2016-12-21T19:33:35Z,add mocha do devdeps. currently missing. `npm test` errors post fresh install,negative
anvilresearch/webcrypto,mocha,2016-12-21T19:34:59Z,also add `chai` to devdeps. and `jsdoc`.,neutral
anvilresearch/webcrypto,mocha,2016-12-22T21:00:18Z,fixed. closing.,neutral
simplabs/ember-simple-auth,eslint,2017-03-02T08:59:56Z,marcoow the main issue is that eslint plugins can not depend on other eslint plugins. the (hopefully temporary) "solution" for that is using an ember cli blueprint to install those other eslint plugins (ember. qunit. mocha) into the host app/addon.this leads to the current situation where greenkeeper would like to bump `eslint-plugin-ember`. but our `eslint-config-simplabs` is not yet compatible with that change. i guess the best solution for that is adding the eslint plugins to the greenkeeper ignore list.,neutral
simplabs/ember-simple-auth,eslint,2017-03-02T09:48:48Z,turbo87: i guess we could do something similiar to the way we test fastboot in `eslint-config-simplabs` (create an actual app. install `eslint-config-simplabs` which in turn installs the eslint dependencies and the lint that and make sure there are no findings or so)?,neutral
simplabs/ember-simple-auth,eslint,2017-03-02T09:56:50Z,we would have identified this error in `eslint-config-simplabs`.,negative
webpack/webpack,standard,2015-12-22T17:47:25Z,ah. i was testing on the small scale and made an example based on that and it looks like the output changed more than i expected it to when i tweaked something. i was taking a look at webpack because i was thinking it was the cause of trusktr's "similar problems" above. but now i'm not sure.my concern essentially came down to seeing```return __webpack_imported_module_0__b__ && typeof __webpack_imported_module_0__b__ === 'object' &&        'default' in __webpack_imported_module_0__b__ ? __webpack_imported_module_0__b__['default'] : __webpack_imported_module_0__b__;```in the general case of circular dependencies. there isn't a guarantee that the `default` key will exist at the point where this function is called. because the default export may not have been assigned yet.  it looks like webpack strips out that logic based on the module being imported though. so it actually isn't present in the example i posted. that said. it does seem dangerous to me since it'll fail in the circular case. what is the motivation for checking `'default' in` in that context if it isn't for es6 modules? it seems like that would be a breaking behavior for standard commonjs.sokra there are a few other es6 module things i want to file that i noticed when checking this. but i don't want to file them if they are still in the works. do you still have more to add. or should i assume they are stable as-is and file a few more bugs?,negative
webpack/webpack,standard,2016-01-03T21:54:08Z,let's clear up some responsibilities in webpack:- parsing: parser plugin  - result: one or multiple subclasses of `dependency` were added to the module- resolving: `modulefactory` + `compilation`  - result: `module` property on the `dependency` is set to the resolved module- emitting: `dependencytemplate`  - result: some cool replacements in the module source were madeso you have to do the following:- create a parser plugin that looks from your `__uniter_require_once__` calls.  - don't try to resolve anything here  - create an instance of `uniterrequestoncedependency` and add it to the module- in the `compilation` hook  - register `uniterrequestoncedependency` with the `normalmodulefactory` to the standard resolving kicks in  - register `uniterrequestoncedependency` with the `uniterrequestoncedependencytemplate`- in `uniterrequestoncedependencytemplate`  - replace the statement with your code. using only `__webpack_require__` which is the internal require function. which takes a module id. i. e. `delete __webpack_require__.c[id]; var xyz = __webpack_require__(id)`> but. from within the dependency. how could i get a module id?the from the `dependencytemplate` you can access the module id with `dep.module.id` where `dep` is the dependency.> i could just use localmodule`localmodule` is something completely different only used for amd. don't use it.> but. where and how? parser plugins seem sync. the resolver most likely will be async.don't do resolving in the parser plugin. you should do in in a modulefactory. or extend the standard module factory with a resolver plugin.> so what is the best place to put such an async resolver?in a resolver plugin or in a `modulefactory`---i'm not sure if i understand the `use` part correctly. but here is how i understand it:it's just like a `require` but with a different resolution algorithm.you could just write you own `modulefactory` and register it with the `usedependency`. in this modulefactory you implement the resolving algorithm and return a new `normalmodule`.---you may need to know which classes a module defines to generate the correct require statement. here you can use the `this.state.module.meta` object from a parser plugin to store meta information about the module (i.e. the defined classes). in a `dependencytemplate` you can access these meta data via `dep.module.meta` and use it somehow.,negative
webpack/webpack,standard,2016-01-04T03:14:16Z,common and vendor chunk example. i recently came across a scenario where i wanted webpack to create an explicit vendor bundle. a bundle with all code common to our entry points. and a bundle for each entry point. i knew it was possible but there were no examples close to what we needed. after a lot of trial and error i finally figured out a way to do it and i wanted to share. this example shows how i was able to do it using the `commonschunkplugin`.if this example isn't quite up to standards. please let me know and i'll be happy to fix any issues. or. if a very similar example already exists. i can close this as well.thanks for the awesome tool. :+1:,negative
webpack/webpack,standard,2016-01-08T10:08:07Z,good as well.but is this really necessary? it's possible to give automatically a standard file name for example `stdin` (as they do in `node-sass`) and use `context` option for path so my first example would resolve to this path: ``` js__dirname + "/app" + "/stdin"```,neutral
webpack/webpack,uglify,2017-05-29T04:11:01Z,i'm guessing this might improve tree shaking if you have a module importedthat is then used depending on a build flag - being in the same scope givesuglify a chance to remove it.,neutral
webpack/webpack,uglify,2017-05-30T17:20:16Z,some tools (babili) are better at removing dead code than others (uglify) but i don't see why it's called "tree shaking".,negative
acuminous/yadda,karma,2015-06-25T00:54:29Z,thank you so much for the quick response!i think i can just let karma ignore those `.feature` files and instead use webpack to require those files. i'll then tell webpack to not parse any of the `.feature` files. after that i can get the feature files as plain texts. and to make them usable. i might need to write my own `featurefileparser` to not use `fs` which should be simple enough. does that sound like a viable plan?edit (just as i'm writing this message i discovered something):it appears `filesearch` which is required by `featurefilesearch` is the only thing i need to "shim" after writing my own `featurefileparser` because it uses `fs.existssync`.this whole custom rewriting thing is bearable if it works. but please please let me know if there's an easier way assuming that i can already acquire the feature files in plain text.thanks!,negative
acuminous/yadda,karma,2015-06-25T16:22:45Z,thank you so much for the detailed answer!!i realized that i misunderstood the webpack context thing in that it doesn't give me the text file. but only gives me a path to the bundled file like this `/_karma_webpack_//[hash].feature`. instead of using webpack. i should have used karma to include the feature files. anyway. i'll create a sample project and submit a pr once i figure it out.thanks again :),negative
prebid/Prebid.js,standard,2017-03-21T18:25:56Z,> however. they should probably do some form of "last call" perhaps by using something similar to setimmediate to allow all other ajax handlers that have already responded to also register their bids before the auction is closed.i agree. this is what we should do. it looks like `settimeout(fn. 0);` approximates the same behavior as `setimmediate` since it's non-standard. along with `postmessage` so there should be a way to do this. sounds like a fun pr :),neutral
prebid/Prebid.js,standard,2017-03-29T07:33:32Z,an alternative could be to use  as well. might yield smaller amount of changes,neutral
prebid/Prebid.js,standard,2017-04-05T20:39:08Z,snapwich do we lose the ability to use `class` it will work with this pattern (+ babel)?,neutral
prebid/Prebid.js,standard,2017-04-05T20:54:13Z,since each of the modules would be compiled with babel. you could still use the `class` keyword.,neutral
prebid/Prebid.js,karma,2017-03-09T21:42:46Z,it's possible karma doesn't work on ubuntu. not sure.,neutral
arose/ngl,standard,2016-10-10T19:02:41Z,with #61 done. polymers are correctly recognised for standard pdb. mmcif. mmtf files.pending now. is support for recognising polymer chains in other files types (gro. psf. mol2) and non standard pdb. mmcif. mmtf files that lack polymer/entity annotation.,positive
tjunnone/npm-check-updates,mocha,2014-11-28T15:30:28Z,+1,neutral
Automattic/mongoose,mocha,2013-01-13T20:39:01Z,here is another option... i use nodemon. this ensures that the process is restarted each time the test runs:$ nodemon --exec "mocha -r min" test,neutral
vega/vega-lite,istanbul,2015-11-13T23:58:30Z,typescript refactor . - [x] setup ts with istanbul code coverage - [x] describe the schema in ts- [x] enable more tslint rules (and fix issues)  - [ ] replace `var` with `let` and `const`,neutral
vega/vega-lite,istanbul,2015-11-14T00:05:57Z,- [x] rename `schemautil.merge` => `mergedeep` ?,neutral
vega/vega-lite,istanbul,2015-11-14T00:07:16Z,- [x] refactor `vl.ts` — there should be a better way to declare `vl` namespace,neutral
vega/vega-lite,istanbul,2015-11-14T06:34:18Z,- [x] missing source map for the compiled file,neutral
vega/vega-lite,istanbul,2015-11-14T17:32:50Z,- [x] `schema.test.ts` and `validate.test.ts` still use `require` style import. which is inconsistent,negative
vega/vega-lite,istanbul,2015-11-14T18:26:51Z,- [x] add compiling individual files to the watch?,neutral
pouchdb/pouchdb,jshint,2013-03-22T23:28:49Z,just crawling through utils got me to the function comparerevs which is never used,neutral
pouchdb/pouchdb,jshint,2013-03-27T09:28:19Z,(#467) - make all adapters pass jshint and start testing in ci,neutral
pouchdb/pouchdb,jshint,2013-03-28T21:46:15Z,maybe that would be useful to have sth like: `grunt test` which does `grunt jshint` and then `grunt node-qunit`. i always forget to run jshint.,positive
pouchdb/pouchdb,jshint,2013-03-29T15:31:10Z,you need to add initdbpair to the globals. linting is causing this to fail. you can test with ```$ grunt jshint```and instead of closing / opening the pr. while you are on the branch you can```.... make changes$ git add files$ git commit --amend$ git push --force origin mybranch```,neutral
pouchdb/pouchdb,jshint,2013-03-30T14:32:14Z,switch global jshint definitions with .jshintrc. so i can share them with my editor,neutral
pouchdb/pouchdb,istanbul,2014-12-19T19:11:29Z,(the reason i need to confirm manually is that we can't be 100% sure that the number of revisions is enough to trigger the stack overflow. because it's depend on memory and stuff. we would need istanbul or something to be really sure.),neutral
vlucas/frisby,jasmine,2013-04-19T18:04:25Z,i believe this is a problem with the verbose terminal reporter in jasmine-node.  it gets the list of tests when execution starts and reports the success status of this list.  the problem is that this list does not contain the 'nested' tests as they haven't been created yet.   the simple terminal reporter does handle this better.,negative
emailjs/emailjs-imap-client,standard,2017-04-10T11:51:21Z,andris9 i see that the only binarytype supported by emailjs-tcp-socket is 'arraybuffer' so the currently supported runtimes can stay. also. i think it would be good to port the source code to a newer es-standard with a build step that creates the umd header and ports to es5 (or whatever the minimum level has to be).thanks for the tip about wild duck. will keep an eye on it.,positive
angular/protractor,jasmine,2015-06-22T17:05:35Z,i think you can this. ``` jsjasmine.getenv().addreporter(new function() {    this.specdone = function(result) {      if (result.failedexpectations.length > 0) {       // test failure action goes here     }   };  });```,negative
angular/protractor,jasmine,2015-06-25T18:07:29Z,without looking into the code. i believe specs should execute in order. however. this is not the contract behavior. and you should never depend on it. you're much better off doing the summary either in a jasmine reporter. or in a oncleanup script.,neutral
angular/protractor,jasmine,2015-06-30T06:02:14Z,great. thanks for the explanation and apologies for not paying enough attention to the change log!,positive
angular/protractor,jasmine,2015-06-30T06:06:11Z,one common thought i've had as i've stumbled into every protractor and jasmine oddity - it'd be really great if there could be more warnings in the output. rather than relying on users reviewing every piece of documentation.the issue with the documentation is it's often doesn't address all of the issues you face in the detail you need. so you end up in stackexchange or a blog that was only posted a few months ago. and you try to use their examples to make things work. except in this example they don't work anymore."warning: using browser.wait without a explicit timeout. see https:// for more info..." could have saved an hour or two.thanks anyway - appreciated :),positive
angular/protractor,jasmine,2015-07-07T17:06:54Z,there's a limited amount we can do with that.  most of the output comes from tools like jasmine.,neutral
angular/protractor,jasmine,2015-07-08T03:36:56Z,sjelin thanks for your update. could you help give some code sample to explain how to use teardown to keep the process alive? i want to see if this workaround is suitable for my e2e application.,positive
angular/protractor,jasmine,2015-07-08T12:25:27Z,nishakchaudhari  : i started using protractor and jasmine 2 and i am also facing the same issue. any work around for this??,neutral
angular/protractor,jasmine,2015-07-08T20:36:11Z,ease for asserts with same setup. hello.i understand that protractor is trying to reduce state bleed (like jasmine) by having a fresh case-run for each `it`. that's cool. i'm just curious if there is (or could be) some way for the discerning tester to specify something like "these `it`s have the same setup. and i am confident they don't mutate state".the benefit being. then protractor could just cluster the asserts and run them all after a single state-setup. rather than navigating from the beginning of the application each time (which can be expensive if the area under test is deeply nested in the application).cheers,positive
angular/protractor,jasmine,2015-07-08T21:23:53Z,not sure what you're talking about exactly.  what state is being reset by protractor between `it` blocks?  it shouldn't be restarting the browser or anything by default.,neutral
angular/protractor,jasmine,2015-07-08T21:29:47Z,difference / benefits using browser.setlocation ? . hi . currently running in some random test failures using protractor+jasmine+angular.i was able to resolve issue using **browser.setlocation**  beforeeach test for cases like page redirected during the test run.  instead of just **browser.driver.get** and after **browser.sleep();**wanted to know more about different  and usage of  the browser.setlocation ( it seems like all the page objects are loaded and saved during test). i found this on protractor api page. the code example will be good enough.,positive
angular/protractor,jasmine,2015-07-09T00:07:13Z,interesting. i'm talking about the state that's setup in `beforeeach` blocks. so. for example i might have:```...describe('when i\'m at the last page of the app'. function() {  beforeeach(function () {    lastpage.gethere();  });  it('has the correct page title'. function () {    expect(...)...  });  it('has expected data'. function () {    expect(...)...  });});```if i know that neither of the `it`s mutates state. and that `lastpage.gethere()` takes a long time to run. i would rather it (`lastpage.gethere();`) not be run twice.does that make sense?,negative
angular/protractor,jasmine,2015-07-09T00:14:08Z,perhaps my run is not properly configured. but the test cases would be run like:> beforeeach -> first it> beforeeach -> second itit would be nice if i could (like jasmine's `beforeall`) run them like:> beforeeach -> first it -> second it,positive
angular/protractor,jasmine,2015-07-09T00:19:36Z,good point i meant `browser.get` but still everything wasn't synced. adding `browser.setlocation` and `browser.waitforangular()`; resolved it. thank you.,positive
angular/protractor,jasmine,2015-07-09T19:48:48Z,jkmurthy ksraja it seems that the jasminereports listed is actually the export of the require function.e.g.. `var jasminereporters = require('jasmine-reporters');`,neutral
angular/protractor,jasmine,2015-07-13T19:27:55Z,:+1: on the count() - thanks juliemr,positive
angular/protractor,jasmine,2015-07-14T15:43:23Z,not totally sure what you're asking.  you can do `jasmine.getenv().addreporter(reporter);` inside your spec file without any difficulty.  #### re: backstoryit's not _exactly_ that the lost common denominator was chosen - more like the plugin api is still relatively new and we've been adding features one at a time as people have asked for them.  but yes. the fact that protractor supports many frameworks does hold us back.,negative
angular/protractor,standard,2015-07-04T23:58:44Z,e.g. i would suggest instead of suggesting:```$('input[type="file"]') .....```to suggest:```angular.element(document.queryselector('input[type="file"]')) .....```the latter is more standard. atop of angular and more important not require jquery,neutral
angular/protractor,selenium,2014-06-23T17:16:17Z,penfold wzup thank you both of you. the solution is indeed starting a standalone selenium server and configuring the protractor-conf.js file. i managed to run protractor too this way. thanks again.,positive
angular/protractor,selenium,2014-06-23T17:37:02Z,sounds like it's an external selenium bug then. labeling...,negative
angular/protractor,selenium,2014-06-25T12:57:37Z,my main reason: protractor is promoted as 'angular' e2e. i came in from generic webtesting (selenium/webdriver.io) and now have to relearn a new syntax.i understand there is a style choice in  language. i happen to prefer the more terse style from webdriver.io . it's less coding centric. more q/a orientedmy 2c,neutral
angular/protractor,selenium,2014-06-25T20:21:43Z,ah ok. i see the issue. the problem is that `selenium-webdriver/testing` only wraps the global functions (`global.it`) once. at the point when it is required. then it reuses them. but mocha has actually changed the underlying `global.it` by the second suite.,neutral
angular/protractor,selenium,2014-06-25T22:29:58Z,feat: accept promises in the configuration. change hosteddriverprovider to optionally accept a promise for the seleniumaddress,positive
angular/protractor,selenium,2014-06-25T22:34:05Z,:thumbsup:,neutral
angular/protractor,selenium,2014-06-25T22:37:25Z,:+1: everything else is promised. why not this. it would allow users to have custom logic to grab selenium instances.,negative
angular/protractor,selenium,2014-06-25T23:48:02Z,juliemr just signed it.,neutral
angular/protractor,selenium,2014-06-26T16:51:43Z,gettext() not working for title element. i'm getting the empty string back from a gettext() call.  i've got this in my index.html:```<title ng-bind="pagetitle"></title>```this is in my controller:```$scope.pagetitle = "banana";```this is in my protractor test:```var pagetitle = element(by.binding('pagetitle'));expect(pagetitle.gettext()).tobe('banana');```the page title is displayed correctly in the browser. even when selenium pops up a window for the test. but my test always fails saying "expected '' to be 'banana'".  nobody wants their empty strings to be bananas. just their bananas.  i'm aware that gettext() doesn't work with input elements. but this is a title element.  thanks!,negative
angular/protractor,selenium,2014-06-26T16:54:32Z,i've also tried this approach. to see if it was a laziness issue:```element(by.binding('pagetitle')).gettext().then(function (title) {  expect(title).tobe('banana');});```,neutral
angular/protractor,selenium,2014-06-26T17:50:01Z,title isn't a visible element to the user. so webdriver doesn't return it as having text. you probably want`browser.gettitle()`,neutral
angular/protractor,selenium,2014-06-26T18:49:02Z,oh i see. so webdriver's not delivering the content that way?  that explains why it wouldn't work (although it seems odd. because the title is shown by most browsers).  thanks for the suggestions though. they've got me on my way.,neutral
angular/protractor,selenium,2014-06-27T06:10:03Z,juliemr. when you say uris should work. are you suggesting that something like the following should work through a remote selenium server?```    var fileinput = section.element(by.css('input[type="file"]'));    var uri = '//some-random-image-domain/found-on-the-web.png';    fileinput.sendkeys(uri);```i am having no luck with this.,positive
angular/protractor,selenium,2014-06-27T13:36:09Z,fix typo in cli.js: seleium > selenium. fixed a typo in the cli.js where selenium was written as seleium.just noticed and thought i create a pull request.cheers,neutral
angular/protractor,selenium,2014-06-27T16:57:51Z,same issue. running on a mac env with phantom via a selenium hub. the ignoresynchronization fixes it for me,neutral
angular/protractor,selenium,2014-06-27T18:45:07Z,i'm curious how the team is starting chromedriver with python based tests. since this issue doesn't seem specific to protractor versus other methods of using selenium. unfortunately. my only suggestions are to keep watching that chromedriver issue.,neutral
angular/protractor,selenium,2014-07-01T00:11:23Z,can this also cover 'capabilities' and 'multicapabilities'? i have a proxy server that runs async and it's unable to assign a port number to the config as it happens after the module.exports go out.,neutral
angular/protractor,selenium,2014-07-02T15:38:36Z,personalife yes. i think that's a good idea.,positive
angular/protractor,selenium,2014-07-02T19:09:07Z,the changes i contributed to sam's pr allows all config values to accept a promise rather than just seleniumaddress.,positive
angular/protractor,selenium,2014-07-03T04:45:14Z,the current script allows me to download both the selenium-server-standalone and iedriverserver binaries. however. i am unable to get the chromedriver binary through the webdriver manager. all three links should use the same protocol.my company has very strict cert rules which deny untrusted connections. take this with a grain of salt. but as i understand node's http client passes it's ca and strict-ssl config options onto the tls layer. after switching to the request module i am no longer able to supply dreadful options like strictssl = false.,negative
angular/protractor,selenium,2014-07-03T05:06:55Z,i think this issue is selenium driver's.,neutral
angular/protractor,selenium,2014-07-07T20:04:11Z,feat(protractor): add support for promises in configs. change driverproviders/hosted to resolve promise valuesin configuration to allow async jobs in setup.  primarily.this would be for a network call to acquire a selenium hostor to start a proxy server.,positive
angular/protractor,selenium,2014-07-07T23:58:54Z,would love to have this feature in please as we'd love to be able to dynamically assign hosts and proxy servers into the config.,positive
angular/protractor,selenium,2014-07-08T18:40:57Z,could someone take a look at this?,neutral
angular/protractor,selenium,2014-07-08T18:50:18Z,thanks. merged as b2b43b1c92f632eeefd51b96c18afec79ccc4fe5,positive
angular/protractor,selenium,2014-07-11T20:00:32Z,it usually happen when you try to update under vpn.get off the vpn and delete node_modules/protractor/selemium directorythen try to run the command again.,neutral
angular/protractor,selenium,2014-07-11T20:32:31Z,that's weird. the variable `seleniumprocess` is defined in the line above that. it almost seems as if the node script is corrupted. can you try updating protractor and try again?,negative
angular/protractor,selenium,2014-07-13T14:00:48Z,thanks for reply juliemr. i think don't have issue starting java from command line as i launched selenium jar manually from command line - i also attached the screen shot (2nd screen shot).,positive
angular/protractor,selenium,2014-07-14T09:54:36Z,hi.   i am new to selenium. i working with menu. need to click sub menu using selenium webdriver. could anyone help with tat :(,neutral
angular/protractor,karma,2015-05-19T16:28:33Z,great thread. helped a lot. thought i had an issue - but don't. cannot find a way to delete :) keep up the good work.,positive
katspaugh/wavesurfer.js,karma,2016-10-25T16:50:13Z,thijstriemstra. i figured this was the case. i spent a couple hours trying to hack in the media blob data. but it sounds like even if i got that working i would have hit the unsupported problem you hit.my initial advice would be to move towards using karma and running the tests in an actual browser. i don't know if that works on ci environment like travis though.,negative
katspaugh/wavesurfer.js,karma,2016-10-25T21:05:20Z,thijstriemstra / katspaugh please refer to #849 for an example of in-browser testing with karma,neutral
tapjs/node-tap,mocha,2016-10-04T17:03:38Z,focused specs. is it possible to run one spec only? i had a look at the docs but didn't find any info about it. `jasmine` has a concept of focused specs `fit`. mocha provides an `only` method. i like tap much and such feature would make my work easier in some cases.i can have a look at it and create a pr if it's in scope of the project.,neutral
rlidwka/sinopia,mocha,2013-12-11T13:02:09Z,> correct test starter to return appropriate exit codesorry. but your code doesn't do this. instead. you set an environment to be `testres=mocha` and run `-r list --ui exports ./tests.js ./no_proxy.js` command which would fail of course.> however yapm test run freaks out unnecessarily given that it's a testwhat do you mean by "freaks out"?,negative
meanjs/mean,coveralls,2016-01-10T18:51:49Z,sure no prob... did we ever reach a consensus on whether or not to include `imagemin` in the build task? i hear what rhutchison is saying about it being opinionated... i could go either way... some projects won't really need imagemin...aside from the coveralls issues. imagemin is ready to go and supports jpg. png. gif and svg. will send a fix later today,negative
meanjs/mean,coveralls,2016-01-11T16:05:26Z,yeah sorry i should have mentioned.... i had to merge master in order to get the coveralls tests to pass... it was failing due to missing test coverage.,negative
videojs/videojs-contrib-hls,standard,2015-06-16T20:36:35Z,add the native source handler pattern. the hls tech should be a source handler itself but until that transition is complete. have it mimic the behavior of the flash and html techs. create a fallback "native" source handler that will apply the standard behavior when invoked to handle a source. use player.hls.src_ to detect whether a source is loaded in fillbuffer so that the async nature of currentsrc doesn't delay segment fetching.,negative
videojs/videojs-contrib-hls,standard,2015-06-16T21:27:13Z,lgtm :toilet:,neutral
pouchdb/express-pouchdb,mocha,2014-03-20T20:54:22Z,so we dont stringify error objects. thats just overriding tostring because for some reason mocha wasnt being nice about printing them. checking .error === true should always work for detecting errorswe changed our errors to be more javascript compatible than identical to couchdb. being identical to couch isnt a goal in itself. just being able to make sure users get compatable errors when using couchdb as a backend or idb etc,negative
brightcove/videojs-errors,standard,2015-04-24T22:04:27Z,`data-video-id` is not a standard attribute. what problem is this pr trying to address?,negative
nodegit/nodegit,mocha,2013-10-09T22:31:41Z,also. when you run tests. why does glob run twice?? mine only runs once:```192:node-fsplusgit nkallen$ mocha -g glob  ․  1 passing (197ms)```,neutral
ember-cli/ember-cli-mocha,mocha,2016-05-12T13:15:12Z,(would probably be good to. at some point. implement a similar helper for ember-cli-mocha),neutral
ember-cli/ember-cli-mocha,mocha,2016-05-18T11:24:34Z,the instructions 404'd :-(,neutral
ember-cli/ember-cli-mocha,mocha,2016-05-19T13:03:34Z,ok. i added the registry hack:```  aftereach(() => {    // tear down    application.registry.unregister('session:main');    application.registry.unregister('session-store:test');    destroyapp(application);    server.shutdown();  });```but. now i'm also getting the ```typeerror: app.testhelpers.wait is not a function```problem.:-(does this mean that the test helpers aren't being loaded properly?i think there is something funky with acceptance testing and mocha right now. :-\any ideas?,negative
electrode-io/electrode,karma,2017-03-08T01:14:25Z,add karma-intl-shim to the karma config of electrode-archetype-react-app-dev. the `karma-intl-shim` is already imported into the electrode-archetype-react-app-dev package. but not actually applied to the karma config. if there's a way to configure this from my project. i'd love to know. but as it stands it looks like the karma config isn't configurable unless i write a new gulp task. is that correct?for easy searching. here's the error that i received from phantomjs when i tried to run tests with localized components: `invariant violation: [react intl] the `intl` apis must be available in the runtime. and do not appear to be built-in. an `intl` polyfill should be loaded.`,negative
electrode-io/electrode,karma,2017-03-08T16:49:28Z,allow user settings for karma config,neutral
admc/wd,mocha,2013-03-01T18:50:34Z,i'm just running mocha with  test/local/window-frame-test.js and i'm seeing the window sizing tests pass on chrome and firefox.on mar 1. 2013. at 9:48 am. meanwhilemedia notificationsgithub.com wrote:> jlipps. can you tell me what browser you were using when the tests were passing?> > —> reply to this email directly or view it on github.,negative
angular/angular-cli,uglify,2016-12-21T09:15:13Z,hey!you can use --no-sourcemap ;),neutral
angular/angular-cli,uglify,2016-12-21T19:19:36Z,closing this as obsolete.,negative
angular/angular-cli,uglify,2016-12-29T18:57:51Z,closing as `--no-sourcemap` is now available.,neutral
angular/angular-cli,uglify,2017-01-05T09:37:17Z,specify options to uglify via angular-cli. is there any ways to specify uglify options via angular-cli ? uglify strips class names which is not acceptable for me because im relying on class names in my code.,neutral
angular/angular-cli,uglify,2017-01-05T09:45:23Z,from what i see in `webpack-build-production` there is no way to specify custom options. process of building apps for different environments can be pretty dynamic depend depend on use case. i hope angular-cli will cover all such scenarios in the future. otherwise there is small point in using it. also i think having all options in a single angular-cli.json cant cover all cases. despite my personal favorite of simplicity. because build process is non trivial sometimes. and should be and angular-cli should be flexible,positive
angular/angular-cli,uglify,2017-01-16T16:19:06Z,since #3963 the default has changed. no source maps by default. enable them with `--sourcemap`,neutral
gcanti/tcomb-form-native,eslint,2015-06-17T09:33:37Z,port some features from tcomb-form. - **new feature**  - getcomponent api fix #19  - get access to the native input contained in tcomb-form-native's    component fix #24- **breaking change**  - inputs refactoring. this affects how to build custom inputs #12- **internal**  - textbox is no more a controlled input #26  - add eslint,neutral
SebastianM/angular-google-maps,karma,2016-02-07T18:13:25Z,chore(gulp): add karma integration. closes #83,negative
SebastianM/angular-google-maps,karma,2016-02-07T20:36:14Z,landed as 46f866a0c18dcb10405a7682ff3fcf2eed1c6c25,neutral
Project-OSRM/osrm-backend,standard,2017-05-26T18:11:15Z,a little bit of research revealed that while it's not defined by a standard. no c++ compilers use the return type as part of the mangled symbol name.  it generally doesn't make any sense to do so anyway. because it would indicate support for  ambiguous function overloading.we should be abi and source-code safe to change the return type of these externally visible functions.  i'll go ahead and implement that. and document the return codes.,negative
npm/npm,standard,2014-09-17T08:00:02Z,- improved "outdated" command to update remote tarballs when the remote content changes. hi.we are working with some remote tarballs. referred using its direct http/https url in the dependency/devdependencies list.we found that npm caches the content of that tarball using the url as unique key.this is absolutely fine for "tagged" release that never changes. however if we want to support a snapshot-like based deployment (in our continous-integration environment). we would like to release "-snapshot" remote tarballs. where a ci build machine pushes new content in that tarballs at each build.simply using "npm cache clean " doesn't work. since the command cleans the local cache. but not the "node_modules" local folder.so i've tried to enhance npm with the minimum set of changes. in order to make the "outdated" command to actively check the remote repos.changes:- the local 'package.json' is enriched with a new property (_remote) containing some useful information about the get response headers (currently etag and modification date). with the original url as well.- added new file 'check-remote-tarballs' with the logic to issue a head request- added new file 'remote-options' with the logic to issue the head request with the right headers. in order to stimulate the http 304 (not modified) response.as a side note. i've found that the "add-remote-tarball" actually uses the npm registry api to issue the get command for a remote tarball. is that intended? the npm registry module adds logic to support registry authentication. ca. session. etc... that are actually useless if the remote tarball is on a non-registry machine.in addition. we needed to patch our iis server to server .tgz files with the non-standard mime type "application/x-tar" (explicitly required by npm registry module).the added head support cannot use the npm registry module (unless we add the head support there). so i've directly used the 'request' dependency.thank you for this great tool!luciano,neutral
npm/npm,standard,2014-10-03T03:55:40Z,(keeping in mind that npm has a slightly different interpretation of prerelease metadata than the standard. even with `semver4`.),neutral
npm/npm,standard,2014-10-03T06:38:14Z,(i should point out that i don't think this point is beyond argument; i'm just trying to capture the rationale for why npm handles it the way it does. which is in accordance with how isaacs interprets the semver standard.),negative
npm/npm,standard,2014-10-03T19:55:34Z,> should we add a dependency to npm-registry-client for that pr?my plan is for the cli not to be doing any network access directly; everything will go through `npm-registry-client` or other external modules. as such. npm itself isn't going to add any new functionality that talks directly to the network. this could be a new command in `npm-registry-client`. or you could create a new module (`http-file-status`?) to encapsulate this functionality and integrate it into `npm outdated` for tarball checking.> about iis and .tgz mime-type. i know that there should be one standard. however imo the tool should try to work seamlessly on the majority of installations. register an additional mime-type "application/x-compressed" should be not disruptive for the tool...it sounds like iis is actually in the minority here. as i understand it. the conventional way to serve compressed tar files is with a `content-type` of `application/x-tar` and a `content-encoding` of `deflate` / `gzip` – that is. the compressedness of the content is independent from its content type. (the wikipedia page i linked to above goes into this in more detail. albeit not in the most straightforward way.)>  i've introduced the etag support too (see proposed remote-options.js module). we could discard the time approach at all. actually bower seems to correctly use etag already.etags are the most web-friendly way to check the freshness of a package. and what i think everyone at npm would recommend you use.,negative
npm/npm,standard,2014-10-03T21:58:29Z,closing as resolved / abandoned. i think timoxley is right. and this is about as standardized as the javascript ecosystem is going to get.,positive
npm/npm,standard,2014-10-06T09:05:55Z,ok. so if you are ok going with head check in npm-registry-client i'll open a pr there with the bare head request api. and then create a new module with the etag logic there.i'll check the current bower implementation for that and see if we can avoid duplicates.thank you. luciano,neutral
mishoo/UglifyJS2,uglify,2012-09-08T20:36:19Z,using uglifyjs2 for dummies. dear mishoo. thank you for great work.i'm trying to minimize my javascript code and want to use uglifyjs2 but i couldn't make it.i read "play with it" secon in readme text but i didn't get how will i run "tmp/test-node.js script.js" ??i downloaded repository added an html file and added script tags inside page. but i couldn't find even to how to start.i would be happy if you can tell me how to run this script. just like telling to a dummy.thank you,positive
mishoo/UglifyJS2,uglify,2012-09-08T21:10:21Z,node.js! that's adeuqate for a start.thank you very much.,neutral
testem/testem,jshint,2015-03-17T21:41:09Z,feature: configure testem in package.json. it's (sorta?) becoming a pattern that package.json can be used to configure a tool rather than having a plethora of tool-specific config files.examples: browserify. testling. and jshint all allow configuration via a tool-specific key in package.json. (`browser`. `testling` and `jshint` respectively).it would be cool if testem's configuration could be supplied via a `testem` property in package.json. instead of `testem.json/js`,positive
mochajs/mocha,mocha,2012-05-14T18:02:32Z,any updates? stoked to be able to use this from mocha.js without the separate library.,neutral
mochajs/mocha,mocha,2012-05-16T20:48:26Z,add `var` to definition of `process` variable in browser environment.. i use global `process` variable in browser (to provide environment similar to node.js). but mocha overrides it with `process = {};` statement.maybe it should be changed to `var process = {};` ?,neutral
mochajs/mocha,mocha,2012-05-16T21:44:58Z,we can just do a typeof and leave it otherwise,neutral
mochajs/mocha,mocha,2012-05-23T04:10:33Z,fix leak of listeners for process. when i run `mocha --watch` and after 11th running. the following message wasshown:```(node) warning: possible eventemitter memory leak detected. 11 listenersadded. use emitter.setmaxlisteners() to increase limit.```it seems that 'uncaughtexception' listener is not released.because. the listener to be released is different from listened one.to fix this issue. i gave the same listener to `process.on` and`process.removelistener`.,negative
mochajs/mocha,mocha,2012-05-24T00:42:23Z,i think this is not related to `mocha` project.,neutral
mochajs/mocha,mocha,2012-05-24T00:47:08Z,lol. this is for the ruby "mocha" mocking/stub library,positive
mochajs/mocha,mocha,2012-05-24T00:47:12Z,why not use directory globs?```mocha test/**/*.js```,neutral
mochajs/mocha,mocha,2012-05-25T15:46:12Z,mocha runs only once in the browser. calling mocha.run() again after running tests has finished has no effect.being able to run tests multiple times without refreshing the page would beuseful for me for adding some input fields in my testing page that must beset by the user of the tests (for testing file upload). i need to run the testsagain after setting these since i want to always run the tests. when page isloaded anyway.,neutral
mochajs/mocha,mocha,2012-05-27T19:14:08Z,we would need some kind of cleanup event for browser reporters. it's not something i personally want but im not against it at all unless it bloats things a lot (it should be fine),positive
mochajs/mocha,mocha,2012-05-29T01:20:07Z,allow directories to be passed to bin/mocha.. when i started using mocha today. i was confused by the fact that running `mocha spec` (my specs are in a folder called "spec") threw an exception right away. after digging into what it was doing. i discovered that the cli assumes that all non-option arguments are files.this patch updates the file list parsing and generation code in the cli to allow both files and directories as arguments to `mocha`. it also reuses the same functionality to default to a "test" folder if no non-option arguments are supplied. just as it does now.i also added some more user-friendly error messages when attempting to run mocha against a non-existent directory.,negative
mochajs/mocha,mocha,2012-05-29T03:37:58Z,-1 from me. i like the simplicity of files only - it's easy to glob what you need. and changes like this open the doors for recursive support and weird grepping. the shell does this stuff for us,positive
mochajs/mocha,mocha,2012-05-29T14:18:28Z,windows also does not expand globs. fwiw. this makes writing cross-platform `npm test` scripts with mocha difficult; you need to create some kind of `runtests.js` file that does the globbing. then programmatically runs mocha against the results. and pipes the output (and thus. on windows. loses the colors). it would be great to get this built in.,positive
mochajs/mocha,mocha,2012-05-29T16:01:05Z,that's something wrong with backbone or your jquery usage. mocha doesn't touch a single thing in jquery. as far as jquery's api for cors stuff i have no clue,negative
mochajs/mocha,mocha,2012-05-29T16:04:22Z,ah boo windows :(,neutral
mochajs/mocha,mocha,2012-05-29T16:04:45Z,even with windows that's still something `glob` could/should/probably does handle. but i'll think about it,neutral
mochajs/mocha,mocha,2012-05-29T16:24:35Z,right glob is definitely necessary but it's just a question of whether mocha will use glob or i'll have to write a custom `runtests.js` that delegates to glob and then to mocha.,neutral
mochajs/mocha,mocha,2012-05-29T16:30:02Z,it would be awkward for mocha to support it ootb imo. `mocha "test/*.js"` instead of just `mocha test/*.js` etc. so we would need `mocha --glob "test/*.js"` or something but that's kinda lame,negative
mochajs/mocha,mocha,2012-05-29T16:31:18Z,hmm yeah i see the problem. you could do hacks like "if filename contains a `*` then we must be on windows/posix with glob expansion turned off" but yeah. icky.,negative
mochajs/mocha,mocha,2012-05-29T16:46:21Z,i think isaac's glob module supports brace expansion as well so that's another edge-case. not that people name files "foo{bar}.js" etc haha. but i dont want to run glob on every argument,positive
mochajs/mocha,mocha,2012-05-29T18:46:49Z,> after further investigation. though. i kind of feel like this is more a problem with node's child_process rather than mocha. +1. the whole `child_process` cross-platform clusterfuck leaves me confused and hurt on a daily basis. (semi-related: isaacs/npm#2479),negative
mochajs/mocha,mocha,2012-05-29T19:31:56Z,node's exec() is a `sh -c`. spawn() just passes the executable to execvp so that's why you get shell features there,neutral
mochajs/mocha,mocha,2012-05-31T01:19:25Z,walking dirs now. i dont think it's elegant to do this but meh 282ed72,positive
mochajs/mocha,mocha,2012-05-31T01:19:53Z,now you can do your `mocha spec` instead of `mocha spec/*`. or `mocha --recursive spec`,neutral
mochajs/mocha,mocha,2012-05-31T02:18:35Z,thank you :). your faithful windows users appreciate it.,positive
mochajs/mocha,mocha,2012-06-02T16:44:26Z,i tried using mocha --debug-brk test.js and i could connect via node-inspector but my test script files did not show up in chromes debugger.anyone else have this issue?p.s. i'm on windows,neutral
mochajs/mocha,mocha,2012-06-03T15:48:54Z,only object gets extended when running `'mocha --require should'`. global variable 'should' does not get exposed. if you want that. you should add:``` javascriptvar should = require('should');```,neutral
mochajs/mocha,mocha,2012-06-05T14:16:17Z,you can do this instead (coffeescript):``` coffeescript    # test setup    mocha.setup      ui: 'bdd'      globals: [ 'jade' ]```,neutral
mochajs/mocha,mocha,2012-06-05T14:19:25Z,you could just setup a helper function that does all your setup. and then call it inside your test. this way. you explicitely test your setup. and it would be included in the time measurements.,neutral
mochajs/mocha,mocha,2012-06-07T21:40:35Z,feature request: complete output of mocha using ant. i'm using ant on a ci server to run all my tests using mocha. unfortunately. the output while executing mocha is incomplete. indeed. when all tests complete. we only see "......" and nothing more. also. when a test fails. the output using ant is :....ô£û 1 of 7 tests failed:...it would be nice to see the complete output of mocha like when we call "mocha test" if it's possible.maybe i'm doing something wrong and if it's the case. please let me know how i can do this.thank you very much!,negative
mochajs/mocha,mocha,2012-06-07T21:47:33Z,im not sure what ant does internally. it's just regular stdio though i dont see how they could mess that up. maybe they're not reporting stderr? :s,neutral
mochajs/mocha,mocha,2012-06-08T12:32:37Z,it looks like this problem is only under windows. because i resolve my problem. i close this issue.thanks for the clue!,positive
mochajs/mocha,mocha,2012-06-10T15:42:55Z,+1 from meemilecantin: well. that makes the beforeeach function obsolete ;),positive
mochajs/mocha,mocha,2012-06-10T15:54:04Z,andihit: not really. before / beforeeach is for setup that is outside of the scope of your test case. it aims to provide an environment in which you can then run your test. if your setup is relevant to the success / failure / performance of your test. then it belongs in the test...,positive
mochajs/mocha,mocha,2012-06-10T16:04:07Z,> if your setup is relevant to the success / failure / performance of your test. then it belongs in the test...in what case is the setup not relevant for the success/failure of the test?> typically i put the most time intensive stuff in my beforeeach (setting up the fixture. dom. whatever)> and then run my assertions against that which takes virtually no time by comparison.same here ;),positive
mochajs/mocha,mocha,2012-06-10T16:13:23Z,> in what case is the setup not relevant for the success/failure of the test?for example. when i am testing an object's methods. the instantiation of said object is not relevant; it's not what i test. instantiation is part of another. unrelated test.,neutral
mochajs/mocha,mocha,2012-06-10T16:25:08Z,technically it **is** relevant that your object is initialized when you test methods of it.but i get what you mean. it's not what you test in a particular test.maybe we want a second badge of each test which shows the duration of the beforeeach (and aftereach)? or show detailed information on hover (before. beforeeach. test. aftereach. after durations)?,neutral
mochajs/mocha,mocha,2012-06-10T17:06:42Z,i think detailed information on hover would be a nice addition. while i don't think beforeeach / aftereach timings shouldn't be included in the test's timings. there's no reason to not measure it. on the command line. we could add a '--detailed' flag. or an alternate reporter.,positive
mochajs/mocha,mocha,2012-06-10T17:32:21Z,emilecantin yeah i agree. i think a reporter would be the cleanest route. _dot_ and some of the others wouldn't really work. or maybe just a `--verbose` variant of _spec_ and _list_,neutral
teerapap/grunt-protractor-runner,selenium,2014-04-17T10:46:17Z,after some more experimentation. i found that i can get the desired behaviour by using '\0' as the default use-local-selenium value.,positive
karma-runner/karma-sauce-launcher,sauce,2013-07-05T10:41:56Z,build never exits. with `startconnect: true` and `singlerun: true` the node process is never existing on mac and linux (travis).this is the last displayed output with verbose.```info [launcher.sauce]: shutting down sauce connect2013-07-05 12:38:27.710 - received sigterm2013-07-05 12:38:27.720 - shutting down tunnel remote vm (please wait)2013-07-05 12:38:28.326 - tunnel remote vm is halting ..2013-07-05 12:38:34.936 - finished shutting down tunnel remote vm2013-07-05 12:38:34.937 - \ finished /```,neutral
karma-runner/karma-sauce-launcher,sauce,2013-07-14T02:43:53Z,weird. it works fine for me (tried on linux and mac).can you check out `sauce_connect.log` (should be in your working directory),positive
karma-runner/karma-sauce-launcher,sauce,2013-07-14T02:44:24Z,also. did the tests run fine ?,positive
karma-runner/karma-sauce-launcher,sauce,2013-07-14T03:13:29Z,this same issue has happened to me. i can check my sauce_connect.log file when i go back to work on monday. i tried this on windows. for what it's worth. and for me. the tests ran without a problem. i just can never exit the process unless i close the command line window. using ctrl+c does not exit.,negative
karma-runner/karma-sauce-launcher,sauce,2013-07-15T00:20:00Z,johanneswuerbach as i mentioned in #5. we need to fix sauce-connect-launcher first (to accept a callback for close()) and use it.this change is not right. we should wait for sauce-connect to finish properly.,neutral
karma-runner/karma-sauce-launcher,karma,2013-06-20T00:19:19Z,start using tunnel identifiers to prevent collisions between multiple karma instances running on sauce at the same time. notice: haven't been able to test this as i don't have a working karma setup. will work on that next.,neutral
karma-runner/karma-sauce-launcher,karma,2013-06-24T02:17:35Z,santiycr what is the tunnel identifier for ?,neutral
karma-runner/karma-sauce-launcher,karma,2013-06-24T18:56:52Z,identified tunnels won't route jobs' traffic automatically. this also means they wont collide when a user runs more than one on a single account. their main drawback is users' are explicit about which tunnel to use.,negative
karma-runner/karma-sauce-launcher,karma,2013-06-26T01:45:20Z,thanks santiycr !this pr actually does not work. i've been migrating the angularjs tests to use sacelabs and so i polished this plugin a bit and also added this feature. so i'm closing this pr.let me know. if you need any help with trying karma + sauce labs.,negative
karma-runner/karma-sauce-launcher,karma,2013-06-27T00:18:24Z,awesome! i'll give the new code a look. thanks for the heads up and offer for help.,positive
google/blockly,eslint,2017-02-23T07:17:27Z,fix #945 (annotations) and an eslint issue (constant condition),neutral
apache/zeppelin,selenium,2015-06-05T00:59:15Z,`mvn package` does run the selenium test in zeppelin project. could you verify it?,neutral
assaf/zombie,mocha,2012-07-30T05:07:54Z,different behavior on osx and linux. on my linux box when i execute this code in a mocha test:  browser.visit(":3000". function(err. browser) {          $ = browser.window.$;          networkcontroller = browser.window.requirejs('networkcontroller');browser.window.$ and browser.window.requirejs are defined. on osx they are not. on osx only the initial html page seems to be downloaded. none of the javascript on that page is. is there something different about zombie on osx i need to be aware of?,neutral
assaf/zombie,mocha,2012-07-30T16:30:55Z,update: false alarm i reinstalled zombie via npm and it is working now.,negative
dmfay/massive-js,mocha,2015-05-14T16:41:55Z,if you have mocha installed you should be able to just do 'mocha' from the project root,neutral
MithrilJS/mithril.js,eslint,2016-04-30T04:32:07Z,lhorie ping? (re: .eslintrc file),neutral
vvo/selenium-standalone,selenium,2013-12-18T20:57:21Z,programmatic use. hi.thanks for making this.i needed to start a selenium server from code. not the command line. rather than starting another child process. i moved the contents of ./bin/start-selenium into a module and made that the entry point in the package.json.,neutral
vvo/selenium-standalone,selenium,2014-01-02T18:28:09Z,nice one!,positive
tapio/live-server,eslint,2015-07-27T08:05:07Z,i've added some eslint rules. currently. `npm test` runs both jshint and eslint. i'm probably not going to follow them to the letter though. because some things are not so clear-cut: for example. unused variables are generally bad and i would like to catch them. but then again i'd like to keep them in callback parameters as it makes clearer what the full signature is. and what is available etc.,negative
ibm-watson-iot/iot-nodejs,mocha,2016-11-30T11:15:17Z,hey wangmzdl i just ran the tests that are present in this repo. it seem to run correctly. did you write a new test? as the .connect() function does not have "config". this was a test for the constructor.,neutral
nathanboktae/mocha-phantomjs,mocha,2014-10-12T21:36:48Z,what kind of updates are you looking for? no mocha-phantomjs doesn't have an option to dump a screenshot on failure or anytime currently.pull requests are welcome.,positive
nathanboktae/mocha-phantomjs,mocha,2014-11-01T15:32:56Z,i have no setup yet actually. i am just trying to figure out a good way to get all the features that i need from phantomjs.,positive
rtfeldman/node-test-runner,mocha,2016-09-08T20:54:52Z,ast-like ouput for custom formatters. the default format of the test output is great. but it would be awesome to have something like json or tap output so that the community can create custom formatters (like mocha's dot or spec  outputs).i wanted to open the conversation to see what some ideas could be.,positive
rtfeldman/node-test-runner,mocha,2016-09-13T18:40:24Z,you know what. this isn't an issue and belongs on the mailing list instead.i'll close and put there if it needs to be.,neutral
kriskowal/q,jasmine,2012-04-23T16:34:25Z,ok. if buster doesn’t work out. we can use jasmine instead. it’s relatively straightforward to monkey-patch jasmine.block.execute.,neutral
jvilk/BrowserFS,karma,2016-01-15T05:48:45Z,confirming that this works for me.however. firefox now consistently hangs with `test #321`. although that might be a problem with `karma` or something specific to my setup. i notice a similar hang when running doppio tests with the same setup.,negative
andyearnshaw/Intl.js,jshint,2013-12-05T23:10:20Z,locale-data/jsonp files won't jshint. when i run jshint on the `locale-data/jsonp/*.js` files i get the following warning for all files: `l1:c13105] w033: missing semicolon.`,neutral
andyearnshaw/Intl.js,jshint,2013-12-06T17:24:31Z,i ran into the same issue when compiling all the data.  the error implies that some browsers might not be able to show the character. but it doesn't say which and i'm not sure if we would be able to fix it either way anyway. we could always create a .jshintrc file to ignore the problem.in any case. it's good that we have the issue documented here and we can reopen it in the future if necessary.,negative
andyearnshaw/Intl.js,jshint,2013-12-06T17:39:08Z,i'm fine with ignoring the warning.  (just thought i'd report it in case someone did care.),positive
andyearnshaw/Intl.js,jshint,2013-12-06T17:41:33Z,:ok_hand: i'll mark as wontfix for now. then.  if enough people care then we'll revisit in the future.,positive
cloudchen/grunt-template-jasmine-requirejs,jasmine,2013-04-26T11:38:17Z,there is another use case that is relevant:if you want to modify requirejs default behaviour (e.g. intercept a context's execcb for automatic mocking of modules). it will be useful to do this in a helper. rather configuring requirejs to load the script first (via the "deps" config option).,positive
cloudchen/grunt-template-jasmine-requirejs,jasmine,2013-04-28T03:51:27Z,if you want to run spec by standalone server mode. just as you mentioned with grunt-contrib-connect module. then you cann't run grunt jasmine independently.you should run connect task before jasmin task``` jsgrunt.registertask('test'. ['connect'. 'jasmine']);```for fixtures. i think it better to load it in spec. for example. load fixture by jasmine-jquery library.,neutral
cloudchen/grunt-template-jasmine-requirejs,jasmine,2013-04-29T15:04:50Z,`console.log()` invocations in your spec or source code won't be shown in `grunt jasmine` taskuse `console.info()` instead. it makes sense to ignore those debugging information in order to filtering annoying output.,negative
cloudchen/grunt-template-jasmine-requirejs,jasmine,2013-05-08T16:12:15Z,using jasmine-jquery. how do i go about using jasmine-jquery with this template?  i'm assuming that i don't add it to templateoptions.pathscheers.fintan,neutral
cloudchen/grunt-template-jasmine-requirejs,jasmine,2013-05-09T16:59:55Z,awesome. thanks for updating the issue with the resolution.,positive
appium/appium,selenium,2013-08-29T14:50:15Z,any dependencies that maven needs (and that are defined in the pom.xml file) will be downloaded as part of the build and added to your ~/.m2/repository/ folder. check in this folder and see if the dependencies are there (e.g. org.openqa.selenium). if have a feeling that maven is unable to download them (for whatever reason) as the build will try and grab it in your local repository (the .m2 folder) and if it can't find it. it will try the maven global repository (or a company repository if you have one).for some reason it seems that it cant access that global repository.,negative
appium/appium,selenium,2013-09-04T17:27:55Z,but selenium click command doesn't seem to be working. it clicks on the element but nothing happens. i need to find an alternate way to tap or touch on that element. how will i do that?,neutral
appium/appium,selenium,2013-09-04T17:30:23Z,i don't know. ask the selenium community for help. they're active in #selenium on irc. tell them you're using chromedriver and what the situation is.,neutral
appium/appium,selenium,2013-09-08T02:11:27Z,this is outside the scope of this page. you should post this question to a testng maven board,neutral
appium/appium,mocha,2013-09-17T17:10:46Z,thanks for the feedback bootstraponline. i'll look into a mocha test for this feature. good opportunity for me to familiarize myself with the test suite.,positive
brunch/brunch,mocha,2012-05-30T00:19:39Z,the strange thing is that the module is already there```jimb:jima jima$ ls -al node_modules/total 0drwxr-xr-x  12 jima  staff  408 30 may 08:19 .drwxr-xr-x  10 jima  staff  340 30 may 09:02 ..drwxr-xr-x   4 jima  staff  136 30 may 08:19 .bindrwxr-xr-x  11 jima  staff  374 30 may 08:19 clean-css-brunchdrwxr-xr-x  11 jima  staff  374 30 may 08:19 coffee-script-brunchdrwxr-xr-x  11 jima  staff  374 30 may 08:19 css-brunchdrwxr-xr-x   7 jima  staff  238 30 may 08:19 expect.jsdrwxr-xr-x  11 jima  staff  374 30 may 08:19 handlebars-brunchdrwxr-xr-x  11 jima  staff  374 30 may 08:19 javascript-brunchdrwxr-xr-x  19 jima  staff  646 30 may 08:19 mochadrwxr-xr-x  11 jima  staff  374 30 may 08:19 stylus-brunchdrwxr-xr-x   9 jima  staff  306 30 may 08:19 uglify-js-brunch```,neutral
brunch/brunch,mocha,2012-06-02T21:27:04Z,the cli runner with jsdom test environment is working now. see paulmillr/brunch-with-chaplin#10actually i'm using the mocha api. because i've found no way to defer the execution of the tests until jsdom env is loaded (except modifying mocha's `--require` option),neutral
brunch/brunch,mocha,2012-06-03T17:50:41Z,added 'brunch test' command. finally. the `brunch test` command is here ;)it may need some polish though:- i got a strange bug when calling `watch()` directly (the process exited and didn't wait for callbacks). so i call `brunch build` now with a child process (not very nice)- hardcoded `javascripts/tests.js` path- i modified `generatedfile` to append `this.require('test/initialize');` at the end of the tests.js fileand as an enhancement allow custom mocha reporters and interfaces. but that will be easy to implement,negative
brunch/brunch,mocha,2012-06-03T19:19:49Z,looks cool. thanks,positive
brunch/brunch,mocha,2012-06-03T19:21:45Z,> i modified generatedfile to append this.require('test/initialize'); at the end of the tests.js filewhy is this needed? doesn't requiring stuff in `run-tests.html` work?,neutral
brunch/brunch,mocha,2012-06-03T19:24:59Z,what does the `persistent` option do?i thought that's the parameter to tell the watcher to keep watching (`brunch watch`) or. if set to `false`. to stop after one compile (`brunch build`),neutral
brunch/brunch,mocha,2012-06-03T19:28:17Z,andihit oh. i see. you're not using chokidar directly.does `brunch.watch(configpath. callback)` work for you?**edit**: `brunch.watch({configpath: ...}. callback)`,neutral
brunch/brunch,mocha,2012-06-03T19:29:03Z,`persistent` isn't needed because it's binded to `watch` function in `commands/index.coffee`.,neutral
brunch/brunch,mocha,2012-06-03T19:38:33Z,i'm requiring `./watch.coffee` directly. because `commands/index.coffee` requires `test.coffee`. and i guess that would be a circular reference. so i got no `.bind()` magicbut i still don't get this `persistent` param. because in `index.coffee` it's bound to `no` on `build` - but then i get this bug. with persistent = yes it works.,negative
brunch/brunch,mocha,2012-06-03T19:42:47Z,got it. hope this won't break things. thanks.,positive
brunch/brunch,mocha,2012-06-03T19:44:03Z,the `generatedfile` thing: mocha's api exposes a function called `addfile` which i pass the `tests.js` file. and this file should expose tests. i don't think there is a way to pass code instead of files to mocha.passing a new file with just this `this.require('test/initialize')` won't work either because it has no reference to the `tests.js` file.,negative
brunch/brunch,mocha,2012-06-04T12:03:47Z,test coverage report. a test coverage report would be great (mocha supports this)i guess a coverage report for app.js will be easy to implement. but then we 'll have just one single file in the report.to display multiple files. we have to- create seperate .js files. run jscov over them. concat  or- run jscov on app.js and change the filename of the coverage counting code  or- add our own coverage code... any ideas?,positive
brunch/brunch,mocha,2012-06-04T12:28:36Z,yes> run jscov on app.js and change the filename of the coverage counting codeyes.creating separate js files is a mess. it's easier for debugging. but only until we'll support source maps. it sucks it all other ways.,positive
brunch/brunch,mocha,2012-06-04T19:34:47Z,ok.well. i just looked at the generated jscoverage output - it's a bit more to do ;-)- change line numbers as well- split up source (source code gets stored inside the global `_$jscoverage` variable)probably it 's better to jscoverage each single file before brunch does the concenating. but jscoverage only accepts source-dir and destination-dir as parameters... this will be hacky (create temp files etc).another issue here: we 're showing the coverage of the javascript. not coffeescript.,negative
brunch/brunch,mocha,2012-06-04T19:43:33Z,> but jscoverage only accepts source-dir and destination-dir as parametersthat's the design flaw of jscov. i think we should open an issue for this in jscov bugtracker.,neutral
brunch/brunch,mocha,2012-06-04T20:03:34Z,yea. also we'll need to add mocha support there. ain't we?,neutral
brunch/brunch,mocha,2012-06-09T16:51:12Z,remove jsdom from the dependencies list. if a user runs `brunch test`. check if jsdom is installed. and if not. show a notice to install it with `npm install -g jsdom`. and if it's a windows user. show note about ms vs and python dependency.> i propose `test-helper.coffee`yes. this is fine too ;) it will be the same as mocha's `--require` option,negative
alphagov/govuk_elements,standard,2015-11-18T16:27:22Z,make default table text size the same as body copy. we should assume that table text is the same 19px size as standard body copy. unless specified otherwise. would be nice if the .font-xsmall class could be applied to an entire table though.,positive
alphagov/govuk_elements,standard,2015-11-25T14:47:25Z,following the discussion in the front end meeting. we'll keep the text size for tabular data at 14px for smaller screens. 16px for tablet and up and for special cases. for example - the "check your answers" pattern. the text size will be increased to the standard body copy size of 19px.,positive
alphagov/govuk_elements,standard,2015-11-25T15:08:14Z,gemmaleigh i missed the frontend meeting. could you summarise the discussion / the points for and against?,neutral
babel/babel,mocha,2015-01-04T23:52:31Z,+1 for this feature. also it would be pretty cool if calling `require('6to5/register')` would respect these files if no argument is specified. i.e. not if i write: `require('6to5/register')({...})`. this would allow easy integration with e.g. mocha,positive
babel/babel,mocha,2015-01-08T13:08:11Z,make removal of extension in default formatter optional/configurable. hi.i have (mocha) specs which have the same filename as the subject under test and only another extension. example: subject.js and subject.spec.js. since the amd and the system formatter inherit from the default formatter all file extensions are removed. this results in duplicate module ids. how about making the removal of the file extension or configurable? so that either i have module ids matching the filenames or that just the last "extension" is removed.thanks,neutral
babel/babel,mocha,2015-01-11T04:00:17Z,+1.  mocha use case,neutral
babel/babel,mocha,2015-01-12T16:25:25Z,:+1:,neutral
babel/babel,mocha,2015-01-13T21:03:31Z,i really don't like worrying about the various entry points to my application (node? browserify? mocha? nodemon? general fiddling around in the repl? etc) so i compile all my files in a build step and prepend `"use strict"; require('my/polyfill')` to each of the compiled files. module caching ensures we don't setup more than once.this strategy is especially nice if you decide to switch out `6to5/polyfill` for something else. or if you need to use non-default transpiler options. for example. i prefer to use bluebird instead of the core.js promise shim.with this setup you'd test your application like you would any other mocha application.,negative
jshint/jshint,jshint,2012-04-23T14:07:13Z,add option which allows case without break. we do not use always a `break` statement before `case`. sometimes we use `return` statement instead or group several `case`s together like:``` javascriptswitch (n) {case 1:  r = 'one';  break;case 2:case 3:case 4:  r = 'few';  break;default:  r = 'many';}```i would be nice. if jshint allowed this code via some option (at least inside of a function scope).,negative
jshint/jshint,jshint,2012-04-24T05:05:11Z,i had to use this as a work around jshint:```var fn = function. g = new fn('return this')();```,neutral
jshint/jshint,jshint,2012-04-24T10:20:04Z,it seems like we need an exception for just `new function('return this')();`in jshint-next...just curious - why do you need access to the global object?,neutral
jshint/jshint,jshint,2012-04-24T11:47:56Z,thanks for notice i didn't know that. because i simplified my example too much (the case-blocks weren't empty at first).,neutral
jshint/jshint,jshint,2012-04-24T20:00:08Z,this is not going to change in the current iteration of jshint but i am open to a discussion in jshint-next. i gather that with this code you want to get a reference to a global object from within any function? can you provide a real-world use case for that? i am looking for something where global object is absolutely necessary within a function and there is no other way to pass it in.(closing this ticket but let's continue the discussion),negative
jshint/jshint,jshint,2012-05-17T05:48:37Z,doesn't accept valid javascript. ### bug.js``` jsfoo();function foo() {    console.log('bar');}```### jshint result:```bug.js: line 1. col 1. 'foo' is not defined.bug.js: line 2. col 13. 'foo' was used before it was defined.```both statements are wrong. `foo` is always guaranteed to be defined before line 1 gets evaluated.,negative
jshint/jshint,jshint,2012-05-17T05:49:34Z,if `function foo` was replaced with `var foo = function`. then they would make sense. though. but just not in this case.,neutral
jshint/jshint,jshint,2012-05-17T13:31:21Z,thanks. i didn't know that option!nonetheless. the reported messages are still wrong. the function _is_ defined at the point it gets called. not yet _declared_. but defined.,negative
jshint/jshint,jshint,2012-05-17T13:36:11Z,i agree. i like to set `latedef: true` because of variable hoisting. i never really saw a need for relying on hoisting for anything. so i'd rather have jshint warn me about it.for functions. however. many people like to read the code top-down. which leads to:```function dostuff() {   someinternallogic();}function someinternallogic() {}```this is so common i usually end up re-arranging functions to make jshint happy. or increasing my "mercy" threshold. it would be nice if late def of functions was allowed. maybe with another switch.,positive
jshint/jshint,jshint,2012-05-17T13:48:14Z,rprieto same here. i like to put my module's exports at the top of the source and find it more readable that way. e.g.``` jsexports.publicfuncapi = somefunc;…function somefunc() { … }```,negative
jshint/jshint,jshint,2012-05-18T11:08:49Z,it's definitely the wrong error message from jshint...you should escape `{` in regex because it can be misinterpreted as the repetition operator `{min.max}`.so it's `var exp = /function(.*)\{/gi` - and that works in jshint. too ;)..greetings.,negative
angular/angular.js,jasmine,2013-06-24T00:19:19Z,perhaps we could also include a `docs:generate` command that would be called without running the tests (like jasmine-node does). this would be helpful when running on `autotest:docs` in the background while testing docs pages (since they have to be generated each time to test them).,neutral
angular/angular.js,jasmine,2013-07-01T23:07:13Z,this is resolved with #3095,neutral
angular/angular.js,jasmine,2013-07-17T22:32:52Z,bump!  this feature is very useful in qunit. since it allows a qa team and a dev team to agree on a common interface of test expectations at the start of a development cycle.  since unimplemented tests fail with a specific "not implemented" error. this allows build scripts to flag these tests as warnings--but not errors--allowing checkins to proceed.  developers can then "chip away" at these tests as they implement code.this feature also helps to make code coverage reports more meaningful.  to improve code coverage. developers will sometimes "cheat" by adding just enough test code to make their production code _run_ even though they haven't covered all needed cases.  then since the code coverage tool is happy. it's hard to figure out where the test gaps are.  having a feature like this allows dev teams to require a complete and meaningful "test skeleton" to be checked in first. showing all the test cases that eventually should be implemented (even if the developer doesn't have time to implement them all in one big bang).,negative
angular/angular.js,jasmine,2013-07-18T07:30:06Z,would you like to provide a pull request?  does jasmine have this in its latest release?,neutral
angular/angular.js,standard,2015-01-27T16:08:01Z,docs(guide/using $location): replace invalid link.. the provided url incorrectly links to a w3c page about html history (retrospective). not about html5 browsing history api. the proposed change is to replace it with correct link to whatwg html5 standard.,negative
angular/angular.js,standard,2015-01-27T16:10:21Z,i signed a cla as an individual.,neutral
angular/angular.js,standard,2015-01-27T18:26:54Z,lol. good catch !,positive
eventbrite/britecharts,eslint,2017-05-05T02:50:05Z,fixing eslint error. fix a json syntax error due to a comma.,negative
DefinitelyTyped/DefinitelyTyped,standard,2015-07-27T11:22:23Z,standard css properties for react.d.ts. i tryed to add style attribute: style={{display: 'block'}}> but cssproperties not contains 'display'.as i understand. should populate this interface with snadard css properties?,neutral
DefinitelyTyped/DefinitelyTyped,standard,2015-07-27T15:57:35Z,this seems reasonable to me. however. changes should be made to both react.d.ts and react-global.d.ts.vsiao do you know why `cssproperties` is incomplete? is there any reason we can't try to make it complete?,neutral
DefinitelyTyped/DefinitelyTyped,standard,2015-07-27T18:15:41Z,i didn't populate cssproperties fully because... well. there's a lot of them. it doesn't have to be a complete definition to work (in the context of creating `domelement`s). since all of these properties are optional anyway. stepancar. can you explain why it is helpful for you to have the `display` property in `cssproperties`? are you getting any compilation errors?,negative
DefinitelyTyped/DefinitelyTyped,standard,2015-07-27T20:43:10Z,vsiao. for example: we have ``` javascriptinterface state{     isclosed: boolean;}```and in render function ``` javascriptrender(){     return <div style={{display: this.state.isclosed? 'none': 'block'}}></div>}```you'll catch typeerror. beacause display isn' exists in `csspropertis` type which has `display`  attribute.i know. this is nor best approach to hide/display block in react - you can just add if-statment;but this approach has a right to exist (i. sorry for my english)i think. also `max-height`. `min-height` ... shoulde be contained in `cssproperties`. i faced some cases when could not  do without javascript which calculate max-height.if you try add max-height style - you'll catch typeerror lilke with display. jbrantly  `style={<any>{display: 'block'}}` - looks little derty. and it's not work (i checked it using atom-typescript),negative
DefinitelyTyped/DefinitelyTyped,standard,2015-07-27T20:55:31Z,stepancar apologies. i just realized you're using jsx which doesn't have support for angle-bracket type assertion. try `style={{display: 'block'} as any}`.,positive
DefinitelyTyped/DefinitelyTyped,standard,2015-07-27T21:03:19Z,jbrantly  thank you! it works.but i think that we should still populate `cssproperties` with `display`.`max-height`. `min-height` for best autocomplete and cssprop checking at compile stage.,positive
DefinitelyTyped/DefinitelyTyped,standard,2015-07-27T21:43:00Z,i agree. a large point of that fix is to be able to catch typos and such (ex: `style={{dislpay: 'block'}}`). that obviously won't work unless we have largely complete definitions for style properties.,neutral
DefinitelyTyped/DefinitelyTyped,standard,2015-07-28T15:54:38Z,well... can i merge this pr? pspeter3 vsiao,neutral
DefinitelyTyped/DefinitelyTyped,standard,2015-07-28T15:57:51Z,it should at the very least have the same changes applied across the board before a merge. react.d.ts. react-addons.d.ts. and react-global.d.ts.,neutral
DefinitelyTyped/DefinitelyTyped,standard,2015-08-04T21:25:42Z,it looks fine to merge pending changes to all files.,positive
DefinitelyTyped/DefinitelyTyped,standard,2015-08-05T18:28:43Z,jbrantly pspeter3 thanks ! updated :)which is definitelytyped conform to standard spec. library spec or ease of use?,positive
DefinitelyTyped/DefinitelyTyped,standard,2015-08-12T17:17:27Z,jbrantly. hello! i added additional props to react.d.ts. react-global.d.tsi think it might be merged,neutral
senecajs/seneca,eslint,2015-09-30T22:46:03Z,lint as part of test run. this starts us down the path of linting our files on test runs.  delete file patterns from the .eslintignore file as they are ready.,neutral
senecajs/seneca,eslint,2015-10-01T11:14:40Z,geek rjrodger: lgtm i'm going to open an issue on the contrib site to ensure our linting file matches our style guide.,neutral
senecajs/seneca,minimist,2015-09-14T18:50:49Z,minor refactor of cmdline. - isolate the parsing of args into optioner. instead of being spread across cmdline and optioner. - rename cmdline -> print to identify what it does after removing minimist options now only come from optioner.,neutral
senecajs/seneca,minimist,2015-09-28T18:30:16Z,minor refactor of cmdline. - isolate the parsing of args into optioner. instead of being spread across cmdline and optioner.- rename cmdline -> print to identify what it does after removing minimistoptions now only come from optioner.,neutral
