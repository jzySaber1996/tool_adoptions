['i was trying to do something similar and found the nonstandard `requeststreaminstance.abort()` to work for this purpose.', 'crrobinson14 plugin that overwrites the standard function. not very good solutions.', 'linter complains that description is not present there is a summary defined. we say to partners that summary and description are the same thing and we ask them to add any of those. but linter always complain that description is not present. moreover msdn documentation is generated from description fields. we should define one standard both in linter and cr feedbacks.', 'fearthecowboy given that `x-nullable` is (or will soon be?) a thing. imo it would be better to use it to control these client language-binding decisions. rather than overloading the semantics of standard swagger elements too much.', "i vote to kill it. i don't think it's documented. and it's not a standard attribute.", 'ah yes. i wonder- does it make more sense to use `offset` and `pagesize` in `categorize`? since `categorize` now takes a standard query object. it would make things more consistent', 'updating to standard 7', 'see #340', "i agree with dinomike on the gulp idea. if we can make a module for this it would be great. i did consider this a couple of times in the past.i guess it's just all about making sure it's modular so then we can do this properly without having to re-write a big part of docpad. just need to replace a module (or several).and i also agree that going with javascript is just a good idea. while coffeescript is awesome. not every js dev knows coffeescript. but every cs dev knows javascript (or they should for their debugging).also i don't like whitespace significant languages because of how they look (gonna bring the flame with that one if i say it in hacker news or something similar). loli say go with plain js. at this point in time it is still the standard.", 'that would definitely help! but still -- it seems like webpack has _many_ features that could benefit users if they only knew to use them. when the time comes. thanks to sections like `optimization` in your docs. they discover them and turn them on. this seems no different. js runs in so many different environments. all with different perf standards / requirements. default warnings seem most helpful when you can be totally certain that your assumption is global.', 'posix defines:* standard output = for writing conventional output* standard error = for writing diagnostic outputprogress is a diagnostic output so it belongs to standard error.', "> should be squashed imo otherwise lgtmyes. for sure (good catch chicoxyzzy ). we shouldn't add broken commits inside master branch. i don't know for now if we are not using squash as standard. but if not it's a good idea add it.", "thelarkinn. i added some tests for `chunk` class. but i don't have all context about the scenarios and standards that we are using in webpack repository. i found different styles inside the test files and there's nothing talking about it on `test/readme.md`. i don't know if you guys are aware of it or what you are doing to improve this. so i don't know if makes sense create an issue to handle this or if we have some work in progress.", 'this issue has been automatically marked as stale because it has not had recent activity. it will be closed if no further activity occurs. thank you for your contributions.', "code looks good.  i'm a bit puzzled by the build failure for standard/object-curly-even-spacing since when i run lint locally on the pr. it passses", 'hi jsnellbaker. thanks for taking the time to look over the code. we appreciate it. all your suggestions are very sensible. and i agree it is good to bring this code up-to-date with regards to es6 standards. i certainly prefer it myself.i have pushed the fixes and changes so let me know if all is as expected.', "well in the standard banner workflow when we set keys we mark the bids as used but that doesn't work great for video because we don't get a callback letting us know the bid won.i like the idea of a clearing api though. open to a pr for that.", 'i added two little fixes:- update `standard` (js linter) script in `package.json` ;- lint javascript filesare we cool?', 'yeah. but it means another network request for very small file. maybe we can separate later if we have more themes.', "the question i'm asking is one layer up. if i'm using node-pre-gyp. and i want the user invoking `npm install` to be able to specify the value of `--target_arch` in my package. is there a convention for doing that? or does every package invent their own convention?", "i don't think there's a convention for that.i think people generally advise that the consumer of your package should run `npm install` on the target architecture.in the situations where that's not possible (eg. bundling for later deployment onto devices or networkless deployments...) people do. as you suspect. have to roll their own.", 'ok. thanks!', "why introduce another parser do to weird. non-standard command linkage using `and` instead of using json how people would expect it? and why not make it an optional thing. similar to how `repository` works? if it's a string. it's one command. if it's an array. it's multiple commands that are run in succession so long as they exit with `0`.i was actually kind of surprised npm doesn't do this by default; as discussed in sindresorhus/xo-init#6. `&&` has its downfalls. further. being dogmatic about it. while realistically `&&` is pretty reliable. it shouldn't be expected to work on every platform. always.as stated in the aforementioned issue. manipulating the `package.json` data automatically now becomes a hassle because we have to _guess_ (never good) the format of the command string; does it contain a `;` at the end? does it already have some weird postfix operator that will cause unintended side-effects with `&&`?it's a hack at best. and bad design at worst. in my opinion. array scripts should be _possible_. maybe unnecessary a lot of the time. but for those who wish to be 100% compatible. the option should still be there - without some weird. intermediate language - the json way.", "refactor all the code dealing with module/package names. the recent change to `read-package-tree` to set `package.name` if it wasn't already set had broader fallout than i'd originally realized. this pr includes a refactoring of all of the places unguarded uses of `package.name` existed to use a set of standardized and tested functions.", ':sheep:', "jantimon dns-prefetch allows the pre resolution of resources. in this case. stylesheets. in terms of the article you sent. for which. i didn't read all of it. i try to follow standards and implement changes that have support for more than just one browser. it's entirely up to you to implement my change. i appreciate your feedback though.", 'to be fair.  and notwithstanding the implementation. this pr does not follow the coding standards of the project and has no additional tests for the added functionality.  these should at least be addressed before getting onto the conceptual stuff of what `prefetch` is about.', 'semistandard - to test on your machine that you are compliant run `npm test`have you alread done some tests on the change?', 'i recognize that this is probably non-standard. i really appreciate your help!', 'implement api call (fetch). hi. first and foremost.thanks for the great work!i was trying to have some actions that run asynchronous api call. in react standard project i would use fetch. unfortunately. i was not able to do something similar with this boilerplate.did anyone had any luck in implementing either a fetch node library. or any other solution with this boilerplate? (especially the packaging seems to be really tricky. as well as having those libraries being invoked in actions and not on the main thread).', 'thank you kelion for the prompt answer.to rephrase my question.if i want to have an async call to an http resource in a react action in this boilerplate. how can i do it?', 'turn out fetch did work. just need to close the react hot reloader server and restart it.', 'all storage samples are now up to standard.. - [x] - all samples use `yargs` for cli- [x] - all samples follow sample template pattern- [x] - all tests follow same conventions', 'there is a reason. i accidentally committed `.only` in one of the tests. removing it. will merge once tests pass.', 'bring logging samples up to standard.. fixes #175 - [x] - sinks- [x] - logs', 'ace-n ready for review. when you have a moment.', 'lgtm. other than my comments.', 'cool. just pushed again. will merge when green.', 'thanks!', 'bring language sample up to standard.', 'lgtm. aside from my comments.', 'dpebot merge when green.', "okay! i'll merge when all statuses are green.", 'jmdobry if you want. i\'ll go ahead and upgrade this to the new "simpler samples" standard.if not. we can review this as-is and take care of that via a future pr.', 'simplify bigquery samples according to our standard.', "lgtm. but i think there's some app engine dependency issue going on...", 'forgot to `standard`!', "dun4n we use js standard style which only restricts usage of unnecessary semicolons  in the case of for vs foreach there are performance differences that sometimes necessitate usage of one over the other.in this case perf doesn't matter. so theres no functional difference between for vs foreach here. in the future we would appreciate contributions that address an open issue. you can always open a new discussion issue if you have questions about style etc.", "i'm sorry to have wasted your time (btw. i didn't know standardjs.com)", "dtygel - thanks for putting this together :)  we're thinking about putting a generic postmessage interface into riot in the near future (cc rxl881). which this can form the basis of!however. it's going to be critical to future-proof the api a bit.  can i suggest that the `action` field is namespaced to `im.vector.login` and `im.vector.logout` or similar. to avoid it clashing with other possible methods we add in future?  once standardised. these would become `m.login`. `m.logout` (yes. we're considering defining a postmessage api for matrix clients as an appendix of the matrix spec(!))", "why is your lint script returning 0? it will always pass in that case. you're basically throwing away the error code from standard. unless i am misunderstanding some aspect of shell scripting. which is very possible.", 'nevermind! i just had removed another precommit lib (`precommit-hook`) and had to remove all hooks `rm -f .git/hooks/*` and run `yarn add husky --dev --force` again. now all works fine!', "elopio: that's not our standard stylesheet. are you using a custom userstyle?", 'ah right. actually i see the misalignment too. and the non-standard colours are probably coming from your room. will add it to the list to investigate.', 'what would a user of the standard library want to use them for?', "i was thinking about it for the last couple days. and i hope i got a better picture of this.i think it might not be the problem of this library (though it's indeed very nice if unsafe code can be extracted to submodules in the previously mentioned way). i do agree that it's going to be much better of. if the compiler can check the safety of every function. like matthewdaggitt suggested. one of the very important aspects of being able to do so. is to make tactics more realizable. since tactics are macros and based on yet another bunch of postulates. there is no way if a program is written by tactics and can be safe. however. the program built by tactics itself can be entirely safe; while on the other hand. one can indeed embed unsafe code via tactics as well.from that aspect. i believe adding such functionalities to the compiler will help largely to eliminate boring mechanical programming in agda. and that also means that it's more on what the compiler does. instead of what this particular library looks like.", "> as per gallais' suggestion i generalized the if-dec-{true.false} lemmas and called them diag and antidiag respectively. since they now don't mention fin. i've moved them to relation.nullary.decidable. as it turns out. they're pretty similar to the fromwitness family of functions that is already there. but it would be enough hassle to make use of those that i think it's still worth including my new definitions.you probably won't need any of these proofs if you use patten matching directly in the definition of `swap`:``` agdaswap : [?] {n} - fin n - fin n - fin n - fin nswap i j k with k [?] i... | yes _ = j... | no  _ with k [?] j...   | yes _ = i...   | no  _ = k```this form is much more in keeping with the style of the standard library as it preserves type information (the library tries to avoid `bool` where possible as it requires all sorts of the lemmas like `diag` and `antidiag` to recover the type information)", 'agreed. these would be useful. i agree with the mailing list and jacquescarette though. they should be called `icong` and `icong2`. drphil feel free to open a pull request. for when you do. just a friendly note that the standard library puts arrows at the end rather than the start of lines.', '`--safe` + `--ignore-interfaces` is pretty reliable', 'on thu. apr 12. 2018 at 07:46:35am -0700. g. allais wrote:> `--safe` + `--ignore-interfaces` is pretty reliableexcept that it cannot be resumed easily if there is a crashbefore completion(most likely due to starting agda with insufficient heap space. which will in turn quite likely be due to hardware constraints...).admittadly. this should not be a problem for the standard library.but in general. removing all .agdai files is safer.', "> i'm rapidly coming to the opinion that the `--safe` option currently doesn't provide anything much in the way of guarantees (either in-file or at the command line)the `--safe` feature was originally implemented by someone who is no longer contributing to agda. and it seems as if no regular developer is eager to maintain it. fixing the documented bugs related to `--safe` requires some work. but i think it should be doable for someone who is not intimately familiar with the internals of agda. contributions are welcome.", "> there's also the question of using list-style foldr and foldl rather than the vec-style onesas in you think we should the vec-style ones as well? i've also been thinking of standardising the `folds`. i'll open an issue to discuss it.", ">>i'm rapidly coming to the opinion that the --safe option currently doesn't provide anything much in the way of guarantees (either in-file or at the command line)>> fixing the documented bugs related to --safe requires some work. but i think it should be doable for someone who is not intimately familiar with the internals of agda. contributions are welcome.while i would love to. i feel i already spend far too much of my time of my phd on internet routing protocols playing around with agda! sorry. i realise that my original comment perhaps came off as a complaint. it wasn't meant to be.", "> disadvantages: performance gets even worse.i am astonished by the performance part. might i ask how important performance is. and how many people are relying on it? sorry about my ignorance...what about irrelevance? i've not seen the description in official doc. but from my understanding. this should be the secrete magic to tame the tradeoff between complex proof flow and performance. is it not?", 'gkalpak thanks! also thanks for best practice stuff. i thought that was the standard for all services. will update!', "narretz that's great. as for the argument of 'further complicating the ddo api'. the api docs can be made to appear less complicated by adding a standard highlighted paragraph 'best practice'. which would recommend using these new bindings for inputs and `&` (or events?) for outputs.", 'note that installing the node typings also changes the standard javascript api and breaks my code. so definitely is not an option.', "sadly they don't work with typescript 2's `npm install -- save types/ramda`. which will be standard soon", "o.k. had a quick glance at the above:_ad 1)_ i will provide a follow-up comment. you are right this is not what i had hoped for either. but it came about after digging through the source code/tests and some of the patterns that surfaced there._ad 2)_ i am with you in principle on the type aliases for maintainability. the rationale why i stopped using some of the most pervasive ones. like your example `numeric` is as follows. each individual d3-module exports into the same `d3` **global** when used as a vanilla script (this is d3 as per mike's design). it also gets  re-exported as part of the standard d3 bundle. having `numeric` defined in each individual module. would create duplicate identifier problems. defining the semantically same type alias just with a slightly altered name in each module. is a path i did not want to go at the time (e. g. `pienumeric`. `arraynumeric` etc.) where i could define an alias that can reasonably be imported following a _proper d3 module dependency_. i have done so (e.g. `basetype` between **d3-selection** and **d3-transition**._ad 3)_ good catch. i believe. this can be generalized to a coercible-to-number. i'll check again and amend the pr._ad 4)_ correct. will add a chore to establish consistency and amend pr in follow-up.as for your added `d3-voronoi` hint. i think this should be something that can be carried over. i will do a sweep of the source code to check something related and if all goes well tighten up the interface."]