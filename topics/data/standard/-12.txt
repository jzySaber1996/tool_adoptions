['it sounds like this is firefox behavior. which means any issue would need to be opened against the [firefox issue tracker]( we can keep trying to help in the comments. but when using a standard video element like this we have no control over the actual content requests.', '"just one question concerning this. how do i access a ""non standard"" tech function in a component with the tech being private?i want to access a function of a custom tech which is not a default function like `volume()` or `src()`. i built a component which can access the player internally like this: `this.player_`. but if i try to access the function like this: `this.player_.myfunction()` it doesn\'t work. neither does `this.player_.tech.myfunction()` (still on rc82). how to eiter publish the function from within the tech or to access the function via some other way from the component?thanks. :-)edit: read the component docs and i\'m now using `this.player()` instead of `this.player_`. but this still doesn\'t solve the problem... i can now access the function. but with the tech being private. this isn\'t the right way to do it - is it?"', "dashed you can `npm install` packages straight from github. you know.  i don't think you can install just part of them like with jspm. but that require syntax is never going to become standard anyway", 'refactored the way hb_deal is handled in adservertargeting. ## type of change- [x] bugfix- [x] refactoring (no functional changes. no api changes)## description of changechanged the way `hb_deal` is handled in the code to behave more like a standard targeting key.## other informationshould fix #827', '"deimos01  to answer your question someone actually commented this ""what does it different then selling in rtb? header bidding is ""client side rtb"" and there is also the classical server side rtb thats is working today. publishes that doesn\'t have in house the ability to sell in rtb ( from the server) are working with the ssp that enable this.""which is 100% accurate. why do we see much better results tho using client side rtb vs using ssp\'s we get access to teir 1 inventory while rtb done by the ssp does not. also because the networks in your prebid get to actually call the clients browser the prices jumps up vs using server side.the only way this would work is if google decides to unify everything and create a server side header bidding container that will be adopted and accepted as a standard by all networks and even then they wont pay the same as client side because 3rd party advertisers wont get a chance to physically call on the users browser. not to mention that google will never do that because they will lose billions"', "snapwich there is now a conflict on this change likely due to merge of #881 - does that pr address the issue here. or is this still needed? if so please resolve conflicts and we'll review.", "protonate that pr is unrelated to this change.  i've updated this pull-request to resolve the conflict.", "smolations i see your point. i recognise that is the standard methodology. i still think that its sometimes useful to have a fully integrated e2e test and given the possible misnomer created by the term 'end to end' and the expectations it creates it would be a 'nice to have' idea to have this work with moderately realistic response times (say up to 10 seconds which i get from my ios functional testing suite for example). alternatively the documentation could point out the current behavior and the suggested methodology so that it helps a beginner.  for me i like to use a unit testing framework to test my backend api which i call an integration test. but i still see some value in aping the sequencing/timing of a realistic user scenario against a backend using the e2e test that can be run repetitively to simulate a realistic usage.", '"agreed on all fronts. my one nitpick``` javascriptarray = [ ""*"" ];array = [ a. b ];foo( arg );foo( ""string"". object );foo( options. object[ property ] );foo( node. ""property"". 2 );```i wouldn\'t put spaces inside the parens like this. drupal style guide prohibits this extra spacing.my editor automatically removes trailing whitespace. i convert tabs to spaces manually. let\'s just try to keep coding standards changes isolated and not part of other commits so that diffs with behavior changes are clean."', '181 coding standards. #181', "travis passed. this is just standards cleanup. let's commit it.", 'fixed in c5c4b1a496cde976298125f1e9a82124326cac18', "refactor/bicycle profile. # issuefirst step in refactoring the bike profile (#3413). similar to what was done with the car and foot profile.settings have been moved to a 'profile' table. and code handling straightforward stuff have been replaced by calls to the standard handlers.the bike profile is significantly more complex than the foot and car profile. because it must handle pushing of bikes. this means it must also handle pedestrian routing. as a next step. perhaps we can find a way to delegate that part to the foot profile.i modified the hande_startpoint handler because the bike profile allows starting on ways with two modes: cycling and pushing_bike. the handler checks the allowed start mode from the 'allowed_start_modes' set in the profile table. or if not found. compares to the default mode for the profile. ## tasklist - [x] review - [x] adjust for comments", 'emiltin there are missing tables in `profile`. please cherry-pick in the branch d3da40f', 'ah yes. thanks', "i think it's better to make tracktype and smoothness tables optional? on the other hand. if you call handle_surfaces. maybe it's ok these settings are required", "emiltin i think tables must be required if handler is used. otherwise it is better to split the handler into two parts and don't use in bicycle and foot profiles the optional handler", 'yeah my conclusion too', "hmm. why can't i chery-pick the commit?> git fetch origin> git cherry-pick d3da40ffatal: bad revision 'd3da40f'", 'seems i need to use the commit ac63ab649', 'rebasing on `master` to include cedeb15adee8acd3061a01d6f3b5f26e1f879e1f', "remove geojson. go polyline only. i think we should remove geojson responses and only go with polylines.arguments for removal:- polylines are way faster to transfer. especially with big responses the cost of serializing and transferring geojson is huge.- there are easy to use polyline encoders available for all major platforms.- removing parameter and code paths makes osrm leaner and easier to develop.arguments against removal:- for developers to get started. geojson is easier to work with than polyline- there is confusion around the polyline coordinate order (it's `lat.lon` instead of the `lon.lat` we use everywhere. this is usually not a problem when developers use libraries for parsing the polyline.- there is confusion around polyline precision. but since we switched to the standard precision 5 this should be fine now./cc themarex", "i think it is very much a npm related question and not a question for the package owners (afterall you use npm to install the packages). npm has several nice options for managing production vs development and pruning unwanted packages - go through npm history and you will see a lot of discussion on options and functionality. in a dev environment. the documents and tests are important. in a (small footprint) production environment they are clutter (except for license info etc). working on devices with small footprints this would be a very useful addition to npm for me. of course i can use find/rm and remove what i don't want. but why not use a tool. my assumption is that seeing as package owners can put what they want where ever it would be near impossible for npm to determine what's required without some standardization of folder structures.", "output junit format. it would be very helpful if cucumberjs supported output format of junit xml. this is a fairly standard output format for test packages but currently the best we can do is to output as json and convert the json to junit after the fact. the packages that allege to support this operation don't work well or at all (at least in my experience). so it would be great if cucumberjs were updated to produce this output like the other test packages do.", 'are there any junit custom formatters available or would i need to write one myself? i have not found any.', "i don't believe any are available yet", 'going to close as this will hopefully become a custom formatter', 'there is no matrix standard for html messages currently. apart from the matrix.org custom one. we would need a standard one (or implement a vector one but this would be contrary to the whole ethos of matrix).', 'suggest we just use the matrix.org custom one for now> on 7 sep 2015. at 18:20. david baker notificationsgithub.com wrote:> > there is no matrix standard for html messages currently. apart from the matrix.org custom one. we would need a standard one (or implement a vector one but this would be contrary to the whole ethos of matrix).> > ??> reply to this email directly or view it on github.', "i don't think this should go into master because:1) there's no matching specification in matrix for it so it would be a custom extension2) in its current state it's limited to only using the conferencing as on matrix.orgsuggestions to move forward:- if this is a functionality demo. a better place for it would be on a branch or a fork.- otherwise. start proposing a standard for multi party voip", "for now this is a vector specific solution. and it works on all hses via the matrix.org as. why wouldn't we put it on vector master? vector isn't a reference impl...it doesn't need any spec. as it's not yet doing anything custom with matrix - no custom events or voip. it's just one client (vector) talking to another (freeswitch via verto).if we want to formalise this way of doing conferencing then we could add it to the underlying matrix sdks (eg matrix-react-sdk).> on 16 sep 2015. at 16:29. david baker notificationsgithub.com wrote:> > i don't think this should go into master because:> > 1) there's no matching specification in matrix for it so it would be a custom extension> 2) in its current state it's limited to only using the conferencing as on matrix.org> > suggestions to move forward:> > if this is a functionality demo. a better place for it would be on a branch or a fork.> otherwise. start proposing a standard for multi party voip> ??> reply to this email directly or view it on github.", 'this would make sense. however. so far the standard library does not make use of irrelevance.  i am a bit hesitant to change the style of the std-lib in this case.', 'andreasabel thanks for the review.i did not notice that the standard library was not using irrelevance. and thought it was useful since i heavily use irrelevance myself.would you prefer that i close the pr?', '"my problem is not related to a click that makes an ajax request or does something else that will take time.  in those cases. i would actually want to disable the ui element until it\'s done. which would require specific logic in each case. depending on what i was waiting for.instead. i\'m concerned about cases where clicking causes something to happen immediately. and i don\'t want it to happen twice.  for example. if clicking a button selects something and clicking again de-selects the thing.  in those cases. i want a double-click to behave the same as a single-click.  i do not really want to disable the element for 500ms after the first click. because i may have disabled styling on the button that i do not want to trigger.it\'s pretty simple to implement this functionality in any particular case (see example below). but i want a general solution so i don\'t have to implement it over and over again.  i could make a new directive. like single-click. and replace all my ng-clicks with that. but it seems less than elegant to totally replace the standard way of implementing clicks (ng-click) in order to get this functionality.  i\'d be willing to implement a separate directive. call it \'no-dbl-clicks\' or something. that i would have to include wherever i use ng-click. but i can\'t think of a way to implement that without disabling the button. which i don\'t want to do because of the styling issue and because it would be complex to make it work with ng-disabled.make sense?example non-generalized implementation:```   html:   <button ng-click=""onclick()"">...</button>   js:   scope.onclick = function() {       // prevent double clicks        if (scope.lastclick && new date() - scope.lastanswerclick < 500) {           return;       }       scope.lastclick = new date();       ...  };```"', 'petebacondarwin i agree with your points. but those of us building convenience shortcuts would _love_ to standardize on these shortcuts for the community. teaching. etc. having something blessed by the angular team would be wonderful. but we can figure out something else if not.', '"should we? imo the standard name is most important than the package.really suck to have a fqcn like this `hypertextapplicationlanguage.link.hreflang = ""foo""`. forces to the developer to alias the namespace always.also the rule is a endless story. take a free name can be disputed later when a package with the same name is pushed."']