['added standardjs support.', '`--coverage` sounds good to me. i think that is relatively standard as well.', 'looks like the current build system works on windows. with the caveat that the `shell:lint` requires `videojs-standard` to be installed globally. so. this should be changed.', 'misteroneill one thing i noticed when running this on windows through github desktop app. the ghook makes it impossible to actually push to your remote using the app. if we want to make it easier for users to contribute. this makes it harder.also. we probably want that step to run `vjsstandard --errors` to ignore the warnings.', 'just an fyi: all the streamable queries (apart from the memory intensive replication ones) are going to get callback aliases so that the library can be run in the browser without additional libraries (highland etc.). once streams are a thing in the browser. then we might consider not having callbacks.', '"fix copy/paste error. i\'m trying to fix an issue introduced in #6 - this is done in a hurry. so yolo ;)there really should be tests - at least ""standard"" which would have found this one. i\'ll make a pr for that as well :)"', "use the 'standard' linter. found a couple of errors that wasn't handled :)depends on #7 remember to add travis :)", "what's the coding style? (to which it was standardized?)", 'does all of ldnode now follow standard?', 'ping', "if you want quick answers from ben. i've found you need to directly balupton ping him. :)(just a tip. don't abuse. ;))", 'greduan thanks. :)  balupton whaddaya say?', "seems nifty. i never knew this before. any thoughts on the possible consequences of including colors? i know that a lot of tools have a `--no-colors` cli option. perhaps we should include one? this consequently would also apply to caterpillar too. something i haven't considered yet.how does colors:true work on errors? i see it is applied there too.", "> seems nifty. i never knew this before. any thoughts on the possible consequences of including colors? i know that a lot of tools have a --no-colors cli option. perhaps we should include one?the `--no-colors` option is for when the output will be sent to something that??s not a tty.  most modern cli programs automatically disable colors if the output isn??t going to a tty (i.e. it??s being piped or otherwise redirected somewhere else).i??m still learning node.js + coffeescript. so i don??t know how to do that auto-detection yet. i??ll see if i can learn how.  (in the meantime. if anybody knows how. please let me know!  bonus points for a link to docs. if applicable. ???)that said. i _do_ think it??s a good idea to have a `--no-colors` option to opt-out of colors. just in case.  i think i can manage to add that in a commit to this pr.> this consequently would also apply to caterpillar too. something i haven't considered yet.yeah. i knew that caterpillar was docpad??s custom logging system. but i don??t know much else.  out of curiosity. what??s the fundamental thing that makes caterpillar desirable over console logging?", 'okay. so i??ve taken a look at `src/lib/interfaces/console.coffee`. and:- i can see where to add an option for `--no-color`- i??ve followed the convention of using `locale.consoleoptionnocolor` as the description??but now i??m stuck.  how do i check the value of this command-line option elsewhere in the code?', "if there's a need for vote i'm all for this. :)", "> if there's a need for vote i'm all for this. :)cool! :)  balupton. what say you?", '> if you are open to the idea. i can rewrite the cli code to use docoptactually??cancel that (for now!).  i just took a look. and there is just soooo much tight coupling that refactoring/extracting the cli deserves its own separate issue.  i??m still on board to help with that.  it??s just not ??something i??ll do in the process of #834??.  :tongue:', "yeah. let's get this out the way. before we go doing some crazy other stuff ;)however. +1 for moving away from commander. haven't had time to evaluate docopt. however what we do need is something where we can add. remove. and change commands dynamically. with command they are defined once at startup. then never again. this is a real pain in the butt and makes our plugin system for extending the cli very tedious.", 'are there still plans/desires to make non-zero exit codes standard? if so. should we re-open this issue or link to something with a more updated status on the issue?', 'standardize errors for feature service chain. ngoldman this is meant to work in sync with the featureservice pr', 'ping ngoldman this is ready for review', 'lgtm :+1:', 'hi. so does this mean that currently there is no possibility of having 0x0 or 1x1 sizes (out of page) with delivery on prebid?', "em-luisgalaz there is. i think. technically they're not much of different from standard units - at least. from prebid point of view.", "yozaz . thanks for the reply.but how would the bidder need to set the inventory? what i mean is. at the moment of making the call to prebid you need to specify which slots you want to get the available inventory for. as in:____ var adunits = [{            code: 'home_adoop'. <-- code on page            sizes: [             [320.100]. [300. 250]. [300. 600]. [320. 50]            ] <-- sizes that you want to get available inventory from the bidders.            bids: [                {                    bidder: 'appnexus'.                    params: {                        placementid: 7485715                    }                }. ...____also. as i have been able to understand. the bidders will give you the params depending on the domain that the inventory is targeted for and the slots targeted (and thats why you specify the slots in the adunits request).  assuming i am right. what kind of slot must the bidder use to specify the inventory. and what slot size would i be requesting?i have a bidder that sent the params for some interstitial ads (out of page) and i'm supposed to use the 0x0 slot size for them. however. no bids are returned:...            sizes: [ [0. 0] ]. ... {                bidder: 'undertone'.                params: {                    publisherid: 3374.                    placementid: '3374001'                }            }....i have also made countless tests with other bidders. other slots (non out of page. like 728x90). and using parameters where i know the bidder got things right. all that works well. am i totally wrong in my assumptions? could you share any insight into what you think could be wrong?lastly. does the bidder need to set their inventory live in order for them to respond to the request from prebid with actual bids?", "the pdb conect records don't officially have any mechanism for indicating bond order. but many bits of software that write pdb files fudge it by specifying the connection multiple times. e.g. below atom 1 and 2 have a double bond. atoms 1 and 3 have a single bond:    conect 1     2     2     3    conect 2     1     1         conect 3     1(nb: my spaces probably don't line up with correct columns. but that's the general idea..)ngl does read the conect records and will handle this non-standard representation for multiple bonds. but if your input file is coming straight from the pdb (or from software which doesn't use this workaround) then ngl has no way of determining the bond order and so assumes they're all single.", '"jgravois of course i will do it. however i was thinking almost the same has patrickarlt this should be a pattern and not an option. i also agree that we should keep a standard on the solution. if we can do it in both fields with the `upper()` so be it.patrickarlt the solution implemented now solve both problems. because i used the `touppercase()` method on js. so `rua` will be transformed in `rua`. however has i said before i like standards and i like your solution better in that matter.if you both agree i will implement this on both fields. the column and the input and jgravois i will not forget the `upper(""column"") like upper(""%input%"")`. thanks for the time. i really appreciate."', "jgravois sorry i didn't respond until now. i think it would be best to keep the main export as a `l.control` type and expose a second `l.class` type that does the logic. so you either choose to use the standard leaflet control or do your own thing with the class that implements the logic of talking to the api. that way the geosearch control itself would be a consumer of the underlying geosearch class. does that make sense?", 'install standard to fix builds', 'whoops. thanks for that.  forgot to add to package.json.', 'remove semicolons and fix travis builds. to fix standard style!fix travis ci builds!', '"feature request - allow extra assertions to be added at require time. it would be great if there was a standard way to add extra assertion libraries to the tap instance at import time. this would allow for more sharing and reuse of assertions.for example:``` javascriptvar tap = require(\'tap\')(\'tap-assert-more\'. \'tap-assert-set\'. \'tap-assert-readline\');```the hope would be to enable developers adding new assertion libraries to be able to build their assertions using the pre-existing. well tested. battle hardened assertions. this should also help with being able to create libraries like ""test-npmready\' or the like."', "we cache of the length of the video so we avoid triggering some video processing more than strictly necessary. the duration may be updated when downloading and buffering a segment reveals that it actually is longer (our shorter) than advertised in the m3u8 file. the times in the m3u8 are often incorrect by seconds or more. the allowcache directive actually applies to the video segment files. and we let the browser's standard caching logic take care of that.", 'make roosevelt standard compliant. also in this pr `utils.js` has been replaced with individual module files for each utility method.', "looks like vjs-standard isn't happy", "forbesjo gonna make the suggested changes. didn't realize vjsstandard doesn't run on build (though it does on test). thoughts on adding that too? maybe have the generator do that too? cc misteroneill", 'add a gitter badge and a js-standard badge. add a gitter chat badge and a js standard badge!', 'conform to standard.js. use [javascript standard style]( everywhere and test for conformance at the end of `npm test`.', 'i think geojson is here to stay after all.', "the installation is pretty standard and has worked fine with gb. german. netherlands data sets.it's worth noting i am running 3 other instances of the docker image which serve gb. german. netherlands on different ports. when i came to do the 4th (spain) i get the above error.", "circular deps will never be automatically removed by the pruner. so if you install `a` and it requires `b` which requires `c` which requires `b`. then removing `a` won't result in `b` + `c` being removed because they always have a referent. that is. we need cycle detection in the module pruner (`lib/install/prune-tree.js`)this can be easily reproduced by installing. and then removing `standard`. as its deps include a dependency cycle.", 'make npm3 conform to `standard` style. does what it says on the tin. will be squashed to a single commit before merge. is a terrifyingly large batch of changes.**r**: iarna **r**: zkat', "something about ef5df9377cbe2a6ee10d6b7bbf6c26d688097160 causes the installer to hang on `loadrequesteddeps` when running `npm run test-all` or `test/tap/builtin-config.js`. something that `standard` puts into `node_modules`. perhaps? we shouldn't land this until we figure out what's causing it. in any case.", 'rebased. squashed. and merged as 5be4008a09730cfa3891d9f145e4ec7f2accd144. 81a6811a4ae8f404ec5e507ec32105c06699eb2d. 858d509e7f7f44ce5ec2123f2a4333c7b53c8302. 363a7dc3a586a2e71fe42cd1204f0f21a39fdad2. 4f2dc874b25db3dce30b0c4a41ee3decbf8152ba. and ba53810ed6ff78b6c8039f6b4d3cacdcf72f9e6c. thanks to iarna for all her help getting the issues this surfaced sorted out!', "for the sake of getting people's feelings about it -- do you think instead of something specifically like `npm-exec` (or _only_ having `npm-exec`). that something like `virtualenv`'s `activate` functionality would be desirable in general? would that fulfill the needs this is meant to fulfill any better?for those unfamiliar. i would imagine it to work something like this:``` sh$ cd path/to/proj$ npm i standard$ npm activate(proj)$ standard(proj)$ npm deactivate$ standardcommand not found: standard```", 'add localization to boilerplate. i think in most common cases at a point in your project you want to be able to roll out your application for multiple languages. with i18next we have a standard and also a react connector to do so. it would be great to have it build right into the boilerplate.', 'would love a pr for this :smile', "i'll see what i can do. ;)", 'switched from jshint to semistandard and upgraded dependencies.', 'chore(build): add code coverage and standard linting', "fix(observables): get content-length from a standard request instead of a head request. - signed urls from aws s3 don??t give the content-length in a head request- this fix uses a standard get to get the content-length and destroys the request before proceeding to download data. which is practically equivalent to calling head.i know you weren't keen on doing it this way ... but it does seem reasonably sensible. considering that an aborted get is effectively the same as a head request ... plus ... it works ;-)i was able to download a signed aws url in multi-parts with this fix", "from the looks of things. i may have to mock out the destroy function in the integration tests.i'll take a look at this tomorrow.", 'is this ready for me to merge?', 'added missing tests. ready to be merged.', 'chore(bin): add .js extension. file was getting ignored by standard', 'holger1411 congratulations for passing your theme to comply the wp coding standards :)', "override woocommerce header ?. i can't figure out how to make the shop page not output the standard header? using the code `if ( is_shop() ) {get_header( 'shop' );}` outputs a newly created header-shop.php but also spits out the entire header from the default header.php.removing the hook from the single-product or archive-product ie 'woocommerce_before_main_content' ?any ideas on how to rectify this?  racking my little brain :)", "ughhhh closing. wrapper-start.php and the `get_header();` changing this to your defined header ie `get_header('shop');` does what i want. coffee not strong enough....", 'a few random thoughts:when sharing a point. the level of precision the user intends may vary wildly. are they referring to a specific county in south-east kansas. or the entire usa? which should be displayed? it might be good to encode a hint regarding this in the event--perhaps a radius around the point that should be enclosed by the view area of a map tool?alternatively. the event could contain arbitrary geometry. for example using [geojson]( (which can be easily fed to most standard gis or web mapping tools). that way people can send sets of points (favorite restaurants!). polygons (geocache zones!). line strings (travel routes!). or whatever else strikes their fancy.', '>alternatively. the event could contain arbitrary geometry. for example using geojson (which can be easily fed to most standard gis or web mapping tools). that way people can send sets of points (favorite restaurants!). polygons (geocache zones!). line strings (travel routes!). or whatever else strikes their fancy.i like this one more. seems like a good idea to be included into the spec as an alternative key.', "standardize. figured i'd just go ahead and do this :)closes #62", 'should have totally recognised your user. sorry ^_^', 'no worries. happy to help :)', "support raw git hook names as npm scripts. hi.i was previously using ghooks which used the raw names for git hooks (`commit-msg` instead of `commitmsg`).i can understand your preference of removing `-` as it's closer to npm standard scripts but it would make the transition from ghooks easier the raw names were also supported.furthermore. i think it's clearer to use the git names because that's what one can find on the internet.plus. i must say that. in my opinion. `commit-msg` is easier to read than `commitmsg`. :)", 'tidying up lexicographic orderings over lists. achieves: - increasing the level polymorphism as per #180  - moves the content shared by `strictlex` and `nonstrictlex` into `lex.core` - standardised the notation used within the modules. now uses `_???_` for the base relation and `_<_` and `_???_` for the resulting lexicographic - added a few extra proofshopefully everyone agrees that this makes the files far easier to read.edit: definitely backwards compatible as everything is re-exported from the deprecated `relation.binary.list.(non)strictlex`', "> this seems like a reason to call it vec to me. to be consistent with traditional linear algebra. in fact. my main use case for this whole thing is based on linear algebra.hmm. that is a fair point! however i think we really should place it in a top level `data.x` folder. as we're going to hopefully have the whole standard heirarchy for this thing eventually (e.g. `data.x.properties`. `data.x.relation` etc.) and it's going to be very confusing for people if it's nested inside in `data.fin`.obviously `vec` is taken. do you or gallais have another suggestion that isn't `vec` or `table`?", 'hi nickcolley yes i know more needs doing :).i think perhaps .js element would be good here so if no-js we would have an alternative being the standard file upload. i will spend some time looking into it also. thanks nick.', 'updated to danish standards', 'lgalfaso thanks for the link. an edit have been requested at the right place', 'squazz once the change goes into google closure. feel free to open a new issue to generate the locale files once again.', "lgalfaso i will try to. but i'm sure i know how to :p", '"if you just open an issue with ""please regenerate the locale to see the changes from xx reflected"". is good enough. someone will recreate the files"', 'lgalfaso ok. thanks man! :+1:', "i still think this is worth removing that ugly loop. but feel free to close it if you disagree.  note that your snippet above won't work (i think...) because these are (always? often?) `jqlite` objects and not arrays so the `delete` is needed in addition to the `length` change...", 'docs(guide/conceptual overview): $http.success is deprecated. using the standard then method instead success. because success is deprecated', "add possibility to filter coverage maps on absolute filename. as discussed. previous changes redone in the mono-repo and introduced a parameter/flag in stead of a separate module.the problem i try to resolve:i've a 'non-standard' setup. where i build my distribution-packages outside of the source folder. i do this because i write mainly es6 code. and distribution-packages need to be plain old javascript. in addition because ava is perfectly able to run es6 tests. but not able to test es6 modules i've to transpile my es6 code (using rollup and babel/bubl??) to plain javascript. the resulting transpiled file will also include all libraries being `import`ed.the indication source files and line missing coverage works perfectly. using sourcemaps. however in the sourcemaps the original full paths are included. so if i run `nyc` with an include or exclude filter the i only have 2 options: show the coverage of all modules (including external modules. which i didn't intend to be instrumented to be covered). or no modules at all. because all of the sourcemaps absolute paths are outside of the current directory. therefore i introduced these methods. which i intend to use from `nyc` (either by having the `--report` flag taking a different or by introducing a flag (`--no-relativepath`. `--absolutepath` or something similar).now writing this all down. a solution might be to first have `nyc` do its work. including generating the report-dir. but no output. changing to the original source directory again and invoking `nyc --report --report-dir=<report-dir>`. i've to validate this works.", "i checked whether i could work around my issue in another way (using `--report-dir`) which didn't work. i misread the help-explanation of this flag. it is no directory containing the raw report data. but the report output itself. in addition i tried to copy the `.nyc-report` directory to the original source directory. but running `nyc --report` in that case still shows all instrumented files. it seems the filtering (to only include files in the current directory) is only performed during instrumentation and not during reporting. something already indicated by the method name: `shouldinstrument`", 'any progress on this? i would really like to use these features rather than write them out manually in standard html tags']