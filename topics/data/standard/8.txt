["think `env-paths` is a better fit because it's used in more modules which has multiple advantages. also a module to only return a path to the cache directory is a bit too minimal for my taste. thanks for the heads-up though! 2016-12-31 is almost there! :-)", "that's my plan. unless one of the other maintainers has concerns.", 'replace file paths in files that exist in outputdir i.e. css and js. i have a project that i am working on that i would like to use the the outputdir.  my project is a fairly standard single page application.  the css and js contain paths that need to be rewritten. but when using the outputdir. the original assets are rewritten instead of the assets that are hashed and copied to the outputdir.', "i don't think this applies to when only the ouputdir is used. i tried it today without using outputdir and had the same issue. it would update the unhashed one. but not the hashed one.", 'bytesnipe did you try my pr?  did it fix your issue?', 'thanks for taking a look.', "what appears to be a simple solution (at least for the `classname` usecase) is to just append the classname prop that gets passed in to every component.  instead of `classname='breadcrumbs'`. maybe just ```classname={`breadcrumbs ${props.classname}`}```or just allow the classname to be overridden completely with the standard `classname` prop. radium is a little different because it uses `style` and actually modifies how the style prop works in terms of merging. etc.", 'kevinokerlund. yes the problem is only for es modules. there is no problem with commonjs.currently. the best solution i have is to use a commonjs entry point (c.f. above). the rest can be js modules. but the main export must be commonjs. this is a workaround rather than a solution. but currently. i have no better ways.another working solution would be to use `babel-plugin-add-module-exports` (as you suggested). but to apply it on the main entry point only (so that the rest remains standard). doing this allows to not touch the source code. but i find the treatment worse than the disease.', "that installs it on everything but the root-most test itself. you also need to call `require('tap').addassert()`.", "adding it to the prototype also adds it to the root test. that's how all the root test assert functions get there in the first place.", "try it. i tested it. and the code requires it. when you've a handle to the module. you have an instance of test. changing the prototype doesn't change all of the instances previously made. from root.js:``` jsvar test = require('./test.js')var tap = new test()module.exports = tap```", 'you call `addassert()` prior to `tap = new test()` because this is the last line of test.js:``` jstapasserts.decorate(test.prototype)```', "test methods are bound to the instance. so _overwriting_ something on the prototype (or adding a prototype method that they already have) won't have any effect.that's to support passing methods around. like `somecallbackfunction(t.end)`", "thank you for your continued patience educating me on tap. node. and js. i'll look into your response shortly. my tool is shaping up nicely. want to get it up.", "jtlapp no problem.  glad you're having fun with it :)", "the browser should be applying standard caching rules to the xhrs for keys. maddygoround benvirus colt082295. do you have caching headers setup for your keys? also. make sure you have caching turned _on_ if you're watching requests in the developer console. i'm pretty sure caching is turned off when the dev console is open by default.", 'askaliuk can you put an example of the solution?', 'composite sync and async vector tile methods. composite in vector tile should support async methods. additionally: - look into using non standard protobuf library for reading- increase test coverage', "added the sync capability. and increased coverage on these methods. still haven't looked at non standard protobuf yet.", 'ok. i will separate themes for next release. probably next week.', "beautiful. i'll update noty in my project tomorrow and report back if i run into any issues.", 'ok. i think we can finally achieve this in the master branch.', 'you can examine the contents of the files using `tar tvf <filename>.osrm.*` - the file format is standard `tar` format.maybe try comparing the internal file list (the output of `tar tvf`) for both `portugal-latest` and `portugal-spain` and see where they differ.', "separately from relation `role`s or `direction` tags. the de facto standard for `destination:ref` is to append ` north` etc. in the local language (so ` nord` or ` norte` in some regions). osrm preserves these words in the `destination` property. because it doesn't attempt to parse them out of the `destination:ref` tag.", "cash looks pretty cool! i haven't tried it out yet. but it definitely seems like a comprehensive solution.i think `shx` will be a nice solution for users who want to be able to rely on shelljs semantics. cash is probably a good solution for people who don't like those semantics. or would like features shelljs doesn't offer. i think either of these would be good solutions.also. :+1: for implementing pipes (shelljs will release this feature in v07. but it was lacking it for many years).", "thanks! and :+1: for shelljs. it's really awesome!", ':+1: cash is really good. it would be amazing to have it as a part of npm. enabling writing cross-platform run scripts with what feels like plain unix commands.', "if as you say. it achieves posix compatibility then i would expect we would be very keen to integrate it. and yes. passing them through something like cash is exactly what we wanted to do. obviously that's a long way off right now. and it's a big project. but i would love to see it happen.while the command support is important. it's actually the shell command line parsing that i think is the biggest challenge here. env variable substitution. command substitution. a variety of quoting styles. inline math. globbing. etc. if a project can nail that down. writing posix-compatible implementations of the core shell tools should be pretty easy (in large part because that's so easy to split work up on).", "indeed. i saw cash and thought it'd be perfect for this.", "agreed. despite the fact that it might hurt shelljs's download numbers (:cry:). i think that cash is really awesome. and it would be better to just be able to write bash on every platform. and not worry about it.", ":cry: hurting shelljs is that last thing i want to do. which is part of why i promote it in my project. i don't really think the two conflict - they're just tailored for different purposes. shelljs excels by far in a programmatic environment.", 'i don\'t necessarily think it\'s "better" to write bash on every platform. bash is nice. and it\'s nice to have that feature. i like shelljs because it uses javascript syntax. which i feel is easier to use than bash\'s (sometimes strange) syntax. writing simple commands is much easier in bash. and i think that\'s the strength of cash. i think writing scripts in shelljs is sometimes more robust than bash. however. and that\'s my aim for the shelljs project.i\'d like to move the project toward more sensible defaults. ex. making iterating over lines of output trivial. instead of forcing the programmer to jump through the hoops to not iterate over each space delimited word. posix defaults are the right move for a shell like cash. but i think it\'s clear that shelljs can move on to something nicer for the programmer now that cash is covering that. shelljs will always have posix compatibility as a priority. but now we\'ll probably try to only do it where it\'s an advantageous feature.', "i don't really see the two as competing. for npm's case (to bring this back on topic). we need something that can evaluate posix shell (at minimum) command lines. as that's what lifecycle scripts have always been. this isn't a value judgement. just reproducing what `process.exec` was doing in a platform independent manor.", "i don't think shelljs will every be designed to parse bash code and execute it. so it (in itself) isn't quite right for that as part of npm. shx (our new project) is slightly closer in appearance. but still isn't a true shell. cash sounds like it aims to parse bash syntax. so it (or something like it) is probably a better option for npm here.", "you are not missing something simple because this issue is far from being simple. the http lib in xenserver is quite not standard for various reasons. but we'll dedicate some time to improve what we could on our side indeed.", 'this pr also shipped a `renderxoitem(item)` function which returns a component displaying an xo item in a standard way to use in a list or in a select.there is also `renderxoitemfromid(itemid)` which does the same thing but fetches the item from the store.', "use standard subsitution syntax in _tjsx. make it possible to use the standard  ' %(variable)s' in strings translated using `_tjsx()`. replace the single old occurrence of a $variable with the standard syntax.", 'this lgtm - thanks!', "jantimon that's a great idea - i'll try it. i had been installing a copy of node directly through homebrew. but i'll try this solution instead.", 'if this is not happening. please close the pr.', 'this pr is apparently not how to accomplish the goal.', 'very odd. we are using the `absolute` option of glob so it should be resolving the paths to absolute paths. can you play around with glob and see if that option works as expected on your machine?side note: do you not like the standard directory structure with features/ as the top level and step definitions nested inside?', 'hello aslakhellesoy & charlierudolph thoughts on this feature request? it would be great to have the ability to transpose cucumberjs steps & hooks in line with es6 standards. thanks in advance.', 'lampholder instead could we not have a prompt to save settings incase any changes have been made and yet closing it without saving. it would also be a pretty standard way.', 'the wonky extra pixel is there on chrome on mac. hoo-ray for browser standards.', 'hooray :)', 'i seem to be getting `site cannot be installed: no matching service worker detected. you may need to reload the page. or check that the service worker for the current page also controls the start url from the manifest` when i try adding my local riot to my chrome home screen.**update**: i was using the "add to homescreen" link in dev tools which apparently doesn\'t do the same as the standard "add to desktop..." ui.', 'alhassy has just submitted a pull request adding this property in. so it\'s crunch time! i do feel like we should go for one of the "standard" names rather than make up our own terminology. - "centerless" - i think we all agree that "centerless" is bad.- "positive"  - seems to be highly overloaded and if you search "positive monoid" you don\'t get any resutls talking about this property.- "zerosumfree" - seems fine and gets lots of relevant hits. bit of a mouthful. but not a huge problem.- "conical" - seems fine and gets lots of relevant hits. the intuition works well for me.i vote for conical. with my second preference for zerosumfree.', 'matthewdaggitt `"conical" - seems fine and gets lots of relevant hits`; would you please share these. i\'ve not found any within a few seconds search. nor even after refinement by including words `algebra` or `monoid`. in constrast. `zerosumfree` *immediately* yields a helpful wiki article.i think the choice of `conical` is somewhat reasonable. but far from ideal.someone navigating the standard libraries might appreciate `zerosumfree` as the property\'s definition is nearly in the name. whereas `conical` is suggestive of geometric properties --as indicated by nearly all of my google searches.', 'you\'re right. "conical" on its own doesn\'t bring anything up. i was searching "conical semigroup" and "zerosumfree semigroup".yes. "conical" implies some geometry but "zerosumfree" has it\'s own downsides. the word "sum" strongly implies additivity. but it could easily apply to the multiplicative operation of an algebra. swings and roundabouts :smile: if you feel strongly that it should be called `zerosumfree` instead then go for it. i don\'t particularly like `_neccessarilyidempotentfor_`. it\'s not one of the four standard names. and it\'s a little confusing as `op necessarilyidempotentfor x` does not imply `op idempotenton x` but it sounds like it should!', "thanks. that does help. and i now understand where the name comes from.having said that i think we're pretty decided on sticking to one of the standard names. and in practice the two reasonable candidates out of those 4 are `conical` or `zerosumfree`. sorry!", 'closed with 8885d7a', 'split up `data.maybe` into the standard hierarchy.. into:- `data.maybe.all`- `data.maybe.any`- `data.maybe.properties`- `data.maybe.relation.pointwise`- `data.maybe.relation.equality.setoid`- `data.maybe.relation.equality.decsetoid`', "hmm sorry for taking so long to respond to this pr. i've been thinking about this and have been on the fence.is there a compelling use case for `iuniversal`? if there is then should we be adding `idecidable`. `iirrelevant` etc.? the problem is with these is that they don't plug into much of the rest of the standard library infrastructure.when using `universal` cases the argument isn't usually(?) inferrable right. and in the cases where it is inferrable an underscore isn't that much of an imposition?", "apparently it's 19px bold or 24px standard to pass standards", 'add note in readme about tsjs-lib-generator. not sure about the wording here. could be more specific about what is meant by "web standard".', "merging this to get rid of pull requests targeting `master`. zhengbli. if you'd like to make some changes here. please make a pull request targeting `master` *after* 13233 is done.", 'feel free to send a pr and will merge it.', "fyi. i'm getting errors when trying to use the webcomponents.js typings with this change:> typescript error: node_modules/types/webcomponents.js/index.d.ts(51.14): error ts2403: subsequent variable declarations must have the same type.  variable 'shadowroot' must be of type 'shadowroot'. but here has type 'shadowrootpolyfill'the problem is that `element.shadowroot` conflicts with the one defined in the standard `lib.dom.d.ts`. which has: `readonly shadowroot: shadowroot | null;`any idea on how i can use this typings with the standard `lib.dom`?"]