["progress event. this completes my programs requirements. but as i'm not familiar with all of the ins and outs of `request`. i'm sure i'm missing some other point where a progress event might make sense.at the moment it:- [?]  adds a transferred property to the `request` object to track bytes sent. -   during the `write` operation. it will emit a `progress` event that includes the standard `progressevent` object as defined in the [progressevent spec]( due to my unfamiliarity with the code base. and being the first time i've used `tape` tests. i would say my test cases are pretty minimal and permissive. so i definitely welcome some direction from the team on that.closes #1450", "i'll dig into the failures for the older node platforms. but does anyone have any off-the-cuff thoughts about what might be going on?", 'use javascript standard style for executables. the files in `/bin` are not checked by `standard`.', 'hi.jsreport.template object is provided just by wrapped-html recipe.in phantom-pdf you can use standard approach with templating engines. so for example with handlebars it could be $.get(serviceurl{{e._id}}.function(data){......', "was a solution ever found for this issue? i've run in to this exact issue. and have had no luck fixing it.", 'enhance modularity of text track settings. it seems much more logical to move all of the text track settings and styling into one component (`texttracksettings`). and leave `texttrackdisplay` to do a fairly standard timing and display function. this way. future changes for text tracks (such as adding support for displaying several tracks. including a description track and a captions track) will be more modular.', 'maybe instead of of moving the styling into texttracksettings we put it in another file that we can import statically inside of texttrackdisplay?', "my feeling is that `texttracksettings` is in charge of displaying the dialog to the user and also possibly caching this value between player loads. if we move the element styling portion from the `texttrackdisplay` into `texttracksettings`. we're now having the `texttracksettings` be in charge of two separate tasks. the `texttrackdisplay` is supposed to be in charge of displaying the cues. so. styling them is sort of in it's ball park as well. however. i do agree it will make the `texttrackdisplay` much nicer if it delegated the actual styling to something else. the other thing shouldn't be the `texttracksettings`. i don't think. the styling function could still do a check to see whether `texttracksettings` are included in the player and be a no-op if it isn't.", 'not able to access controlbar component options. i am unable to access the controlbar component options. yet my standard options (controls. autoplay. preload) are working just fine. i\'m running rails. and coffeescript. the code is following the documentation.``` javascript  player = videojs "media-video".    controls: true    autoplay: false    preload: "auto"    controlbar:      mutetoggle: false      progresscontrol:        seekbar:          seekhandle: false  . ->    console.log "good to go!"    on "ended". ->      console.log "awww...over so soon?"```', 'can you elaborate on what you mean by not being able to access control component options?what are you seeing vs what are you expecting to see? a live reduced test case. on a site like jsfiddle or jsbin. is _super_ helpful.', 'added en.json as localisation template. adds en.json as a localisation template.if dialog/modal/window is to be standardised (#3085) and close will change to close dialog (#2924) imminently this will need to be updated.', "after discussion with gkatsev. it seems like this isn't the way we're going to go right now with handling captions settings.", 'hartman thanks for your reply.', 'thank you hartman . is there a way to disable seeking while still having the progress bar present on the player?', "shroy not easily. there doesn't seem to be a provision for disabling or cancelling seeking in the html5 video specification. there also is no option for the video.js custom controls to prevent this as far as i can determine.the only suggestions i can find for something like this is to continuously record the current time during playback from timeupdate functions. and then after seeking. seek back to the position 'before' seeking.", "you could use `pointer-events: none` on the progress control to prevent clicks. this won't prevent users from seeking programmatically but should take care of the majority of cases on the majority of browsers.", 'ok great. thanks gkatsev and hartman', 'lgtm. thanks.', "not sure if you guys managed to fix this but just so your aware..there is a difference in how the paths work for the different prompts\\terminals we use on windowsbash and standard windows prompt use the same path but nodejs cmd prompt isn't quite the same as it uses a batch file to launch the a prompt.what i find is that when i'm using **nodejs** prompt and installing global plugins via **npm** it installs the plugins in to ```c:\\program files (x86)\\nodejs\\npm\\....```but when in standard prompt or bash it installs global plugins in to ```c:\\users\\{username}\\appdata\\roaming\\npm\\....```so probably like me. many windows users will vary between these different prompts during the day without realising and end up installing global npm plugins in different places.i've had issues in the past where docpad says its not installed when doing a docpad uninstall and yet it runs just fine lolthe work around i found for this is to ensure the path is the same for all prompts by adding the following to the path in the environment variables section in windows```c:\\users\\{username}\\appdata\\roaming\\npmc:\\users\\{username}\\appdata\\roaming\\npm\\node_modules```hopefully this will fix your enoent issue", 'i don\'t understand why it\'s considered "pollution" to have promise in the global scope. why is that polluting the global scope. but all other standard native types are not pollution? (map. set. settimeout. etc.) promise is found in the global scope in every modern javascript vm. asking for it to not be in the global scope sounds like asking for special behaviour that deviates from the modern standard.', "hey rjgotten.> it also continues to write itself into the global scope. so it doesn't solve the original problem either.hmmm... i don't think it does.  i didn't test the resulting code. but it certainly looks like it doesn't pollute the global scope to me.  unless i'm missing something. it looks like it creates a module-scoped `promise` instance. and since most.js doesn't specifically look in the global scope. it uses it.  no???> thanks. but that's not what i meant. you picked one promise polyfill and baked it directly into the library. which means users no longer have a choice of which polyfill to use. personally. i think this is the best way to allow people to use a local implementation of a *normally* global object.  if promises were just another third-party utility. then i'd be 100% agreeing with you.  however. they're equivalent to `array`. `regexp`. etc. now.  i know it kinda sucks dealing with browsers. but library authors need to work towards standards and the future. :)", 'sokra. hi sorry to bring back such an old issue. but some loaders have equals signs in their query options. do you have any suggestions for how to handle that?edit: so okay. the standard query option converts the queries to use the equals sign. whereas json.stringify converts the options to having brackets and colons. what i imagine in my mind is something like this:``` javascript      test: /\\.ext$/.      loaders: [        "loader3".        {           loader: "loader2".          query: {            querya: 1.            queryb: "something"          }        }.        "loader1"      ]```edit \\* 2. okay. i\'ve stuck with suggestion 2. that worked. i looked through the webpack source code and saw that that\'s how the query is passed anyways. it doesn\'t have to be equals signs. sorry to bother!', 'i\'m working on this. it\'s not that hard to test if the first statement is "use strict" via a parser plugin and move the statement before any inserted dependencies. but there are a few gotchas. the statement must be /only/ the string literal "use strict". but acorn strips enclosing parentheses unless the preserveparens option is set. the parser could be modified to check for a proper strict mode statement before actually parsing the file. it could parse the file with preserveparens and produce an ast with non-standard parenthesizedexpression nodes that the parser and plugins using it would need to be aware of. or strict mode could be detected at some other stage. i\'m not sure what\'s really best in terms of webpack coding style.', 'jaiminpanchal27 i understand your concern. it\'s one of those "isn\'t exactly like. but must behave like to properly test" sorts of things. in some ways. it is accurate that this is a test. but the current testing in ./test is more like unit tests. not outside in testing. this is more of a black box outside in interaction with controls vs. a whitebox unit test. is there an alternate place for this sort of thing that can provide the same level of testing interaction. particularly pre-prod style integration testing which is the focus here?the current testing options are great for prebid at a code level. not necessarily at an integration level. they don\'t provide access to the dfp related items like delivery diagnostics when an error is encountered. at least part of the focus here is "a hb ad did not display. why? oh. we\'re running a standard lineitem still because we missed it while reconfiguring for prebid". or. "the line items for hb aren\'t active." or "our price priority lineitems should kick in at < x cpm. we need to verify that." all of this style of testing is in-browser integration testing that the mocha/jasmine/gulp tests don\'t provide.', 'mkendall07. thanks for the response. i am working on a prebid integration with a customer using prebid video and display. but most of the time publisher would like a different granularity between display and video ads. it would be great to have a specific method for video. for instance:pbjs.setpricegranularityvideo("low");pbjs.setpricegranularity("low");orpbjs.biddervideosettings = {    standard: {         [...]    }.    appnexus: {         [...]    }.    rubicon: {         [...]    }.}pbjs.biddersettings = {    standard: {         [...]    }.    appnexus: {         [...]    }.    rubicon: {         [...]    }.}best.antoine', "set `alwaysusebid` in bidder settings and don't use `enablesendallbids()`. you should get your custom keys along with standard keys (if `biddersettings.bidder.sendstandardtargeting = true`) then the bid landscape values won't overwrite the bidder settings values.", 'tap: suppress tap header in subtests. there appears to be no official standard for subtests. but the tap4jthat the jenkins tap plugin uses seems to expect only one header andbarfs if the subtests include their own headers.see', 'fixed the tests and commit message. includes regenerated fixtures. shall i merge once travis is green? or do you want to mull it over a bit more?', 'travis failures are because the save-file test is taking enough ms to be rounded to `1s` in the timing output.worth fixing. but unrelated to this pr.  lgtm!', 'isaacs i can merge but publishing is still up to you. would you mind cutting a release?', "i've got some config changes i'd like to roll out to strongloop's ci that are waiting on this patch so that it doesn't result in a flood of passing tests failing at the last minute when parsing the tap results. (yay jenkins!)", "> please. keep the code to the modern js standards.that's not necessary. libraries. ecosystems and standards evolve. send a patch.", 'thank you!i definitely agree that we should ensure that we should enforce/ensure the usage of standard.i think two options are just linking to the `standard`/npm style guide in an issue template or readme. but there is also the possibility of including the `standard` linter itself. alongside asking the contributor to make sure tests are passing.', "add file rotation option for standard log files. the access log can be rotated on a daily/weekly/etc basis. ensuring log files don't get too large. the same functionality would be useful for the standard log files.", 'standard log rotation. this pull request adds the ability to set standard log files to rotate the same way as the access log does. the default setting is "" which means the rotation is disabled.```logging: {  filerotationperiod: "1d"    fileretentioncount: 7    // keep 7 back copies}```close #30', "> while npm and node have gone beyond the specification in many ways. both still adhere to the spirit (and largely the letter) of the standard.this is not correct imho for one single reason: npm does not support `overlay` field.`package.json` is designed to be shared between different projects. but right now npm reserves all top-level fields like `name` or `dependencies` for itself.i don't like having `*.json` for every single package manager. but it's better than what we have now.", 'during the standard install. the view engine is setup incorrectly. the `package.json` when using the generator on standard creates this `"viewengine": "teddy: html"` but it should be `"viewengine": "html: teddy"`', 'could you comment on the unittest i added? i tried to mimic the existing unit-tests. but i can imagine it not being up to standards somehwo. suggestions are welcome.', 'out of curiosity; is there no standard contribute.md we could use? this one looks fine. but it seems like there ought to be a template for different sorts of open source projects.', 'i think the `contribute.md` standard is a bit verboose. i also like the one by jden. i think adding a `codeofconduct.md` would be good.however i instead tried to make it a bit shorter now and more about the steps when contributing code.', 'quick update. works with `nvm` + `github desktop`.need to test with node installed differently.', "that's what i was going for! though i would hope it could be pulled off without breaking changes?", "option to choose whether logs are in text or json format. when troubleshooting production environments. under pressure and with limited bandwidth / time. it's key to process the log files with standard linux command-line tools. so it would be great to have a configuration option so that log files can be in text instead of json", 'thanks for the info; the thing is that when you are on a shaky mobile connection. even adding a pipe to another command can be a challenge anyway. solved with this```$ cat .bash_aliases jtail() { tail "$" | bunyan; }jgrep() { grep "$" | bunyan; }```', "ryancavanaugh despite not being in that list. it's `miterlimit` based on the convention.> all dom properties and attributes (including event handlers) should be camelcased to be consistent with standard javascript style.and the actual svg attribute is `stroke-miterlimit`.i had the same thought before i +1'd so i looked it up :grin:"]