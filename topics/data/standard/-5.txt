["maybe this is best addressed by adopting the convention that if the format is 'byte.' i.e. base64-encoded. and the parameter is a query or path parameter. then it's base64url instead of standard base64?", 'there is no eta. unless we decide not to merge this (low probably right now and seems simple enough). the main blocker is us testing and verifying it. once we can do that. we can merge it in.', "yeah. testing the swf is very tricky. we've generally ended up verifying things manually.", 'same issue .full screen button not working  when using videojs in phonegap .plz anyone help me thanks in advance', 'hi.any one can help me to resolve full screen issue .i m facing issue in video full screen', "update probot and swap to standard lint. since stale is the most popular probot app. i figured it should be the first to swap to standard lint!also. this was my first time bumbling around in stale so i wasn't sure the best way to test i didn't break anything", 'could you try upgrading to standard 7? feels like a standard related bug to me.', "ok. the next step would be digging into eslint. maybe logging near the offending line would give better insight. it might stem from standard-loader configuration somehow so that's another place to inspect.", 'ok. you could consider reporting this upstream to `standard-loader`.', 'simenb look like in your case a custom cli tool for the build is more suitable. you basically build one. you can just move the cli stuff from the `webpack.config.js` into a `build.js` and start webpack from this file (by using the node.js api).there were a couple of reasons why i decided to disallow custom arguments:- webpack can error when passing incorrect or deprecated cli arguments. this should help users when using the cli.- webpack.config.js is a "pure" module. input -> output. it should not read stuff from the enviroment.- new tools can emerge which can use the webpack.config.js. examples:  - split the build process into multiple processes. each calling the webpack.config.js. this would not work if the webpack.config.js reads the arguments.  - build combinations which call the webpack.config.js which different combinations of options. a standard format of passing arguments to the webpack.config.js helps a lot here.  - etc.', '`npm install --save-dev style-loader` and `npm install --save-dev css-loader` make it working for me. looks like these modules are no longer a part of standard bundle.', 'removed the standard/object-curly-even-spacing eslint exclusion. ## type of changecode style update (formatting. local variables)## description of changeremoved the standard/object-curly-even-spacing eslint exclusion for #1206', "i'm closing this as i still don't think we should be adding new. non-standard environment variables. and i'm convinced that npm already provides the tools to do this. thanks for your work (and for using protractor in your teaching!).", 'timeout on validator initalization. we should set a good chunk of time before we decide that for some reason html validator initialization failed and then just print an error to the user saying validation is disabled because of a problem and move on. otherwise the app will hang and never start because right now the validation initialization is blocking; if it never completes the app never finishes startingmaybe something like: wait 30 seconds or so. provide the warning. and print standard out from the `exec` (so that they can file an issue with that or look into things further?)related to #143 and #135', 'while this being worked on. it might be nice to add onto #153 and specify in any error case including a timeout that validation is turned off because (some reason) continuing without it', 'fixed standard formatting. there is a trivial error in the current formatting (what about enabling travis?)', 'josephdenne more info required please. - publishstate: ok- publishdate: ok- publishenddate: ok- publisher: what is this? is it a string supplied by the publishing system? or an editor identifier?', 'jimlambie confirming that publisher means editor', '+1 markherhold . ideally helmet should abstract/decouple its core away from any framework implentation. also koa is probably going to take over in a year or less because of standards and esnext', 'in bluebird. `promisify` has a `multiargs` option. which returns multiple arguments to a callback in an array. maybe this is the standard to follow.', 'dedupe: decrease the log level of unavoidable conflicts. users running `npm dedupe` do not need to be informed about unavoidable conflicts. they are a part of regular process of dedupe. and are nothing of note.in my personal opinion. this also aligns with semantic meaning. i was unable to find a detailed standard of log levels. thus i converged on an opinion that warnings require eventual attention. while infos are documenting regular behavior.feel free to reject this if your log level definition differs.consider that with #6912 the warnings will pop up for regular users during a simple install command.', 'imo. conflicts deserve to be warnings. this helps people understand why parts of their trees have not been deduplicated. and is information that is useful to surface. so as to minimize people\'s surprise (and their likelihood to file issues based on that surprise). also. "imo" pretty much sums up the guidelines for when which log level is used -- it\'s kinda up to the developers\' discretion which log level gets used where. and is likely to remain that way. just because this is mostly about creating a friendly (if occasionally noisy) user experience.thanks for putting this together anyway!', 'thank you for your feedback and reasoning!', "i will take a look at my git config. but it's pretty standard. could this be some weird locale thing?", 'i\'m struggling to find a better/canonical way for publishing generators to npm. but it seems like the standard approach is to just apply workarounds when necessary.guess i\'ll just stay with the "it works" approach until there\'s a better approach.', "terinjokes yeah. there's a bunch of tools out there. `standard` disallows semicolons though. and cuts having to maintain a bunch of config files in the repo root.", "feross as much as said he did it for the lols. and while there are points of congruency between the `standard` code style and npm's. one of the goals for this task is to make the code base more consistent while. as much as is practicable. codifying the pre-existing style. among other things. i have to do a fair amount of `git blame` and `git log -s` on the npm code base. and so i don't want to do anything that's going to complicate that process more than necessary.and there are plenty of uh idiosyncratic aspects of the code base's style. so it's a thin line to walk.", 'no npm command to delete/uninstall node_modules. i want a standard way i can delete node_modules directory and also invoke a script with which to delete \'public/bower_components\'.\'npm uninstall\' just gives me the message :-npm warn uninstall not installed in c:\\users\\aaron\\github\\template-node-marionette-app\\node_modules: "template-node-marionette-app"ideally this would work across *nix and windows.', 'cheers !', "hi iarna. i know. that's why i've started talking about it in iojs repository. and they pointed out that the discussion should be started here first.it's nice to know that the npm3 will have a much more flatten node_modules it will save space and link.yet i think it would be more eficient to have it on a single file and there are some other reasons than the path limit like:- filesystems are chunked and a lot of script files uses much more space than a single one - eficiency;- some systems have case sensitive filesystems while in others it's not - standardization;- less fat speed interfering on system load speed;- easily compressable (yet it could be maintened uncompressed to maximize execution eficiency over space).thanks for your analisis.", "yeah it's somewhat an edge case. `moment.parseformat` has been made with humans entering a date in a free text inputs in mind. so utc and other timestamp standard formats or not a priority. there is no right or wrong here. but i think having a leading zero is something i want to be added only when wanted explicitly.", "add ability to query and set bot options. - also standardise on 'success' as the key name for successes.- also return the entire `content` on get state event requests.", 'lgtm', '> i know that this is not really a husky issue. that is simply how mac gui apps work. however. if we could include /usr/local/bin when husky generates the hooksi agree :). do you want to make a pr?', 'apologies for the very late reply. the standard library tries to use only the core features of agda. and therefore there are no current plans to incorporate instance arguments at the moment. declaring them locally seems the best bet.', 'the main reason would be to clearly label which parts of the standard library can be used as-is in hott. which is the main side-effect of highlighting those bits which do not depend on k.note that most of the pieces of the standard library that i have used (which is only part!) would go through without any changes.  understanding what fails might be quite instructive too.', "it sounds reasonable. but (from a completely non-theoretical perspective!) i'm a little wary of opening the gates to including pragmas at the top of every file. if you include the pragma. does it check subsequent imported files as well? if it does. would it be possible to find the parts of the standard library that use the k-axiom by simply adding it at the top of the `everything.agda` file?andreasabel do you have any thoughts on this?", 'looks like this is solved.', 'currently. if we put `--without-k` at the beginning of a file. it does not prevent import of modules that use k.  thus. at the current stage. such an information might be not very helpful and could even be misleading (e.g. if that suggests to you you can use this module of the standard-library in a k-free type theory).thus. before we move on here. we should be clear what the aims of putting --without-k into the standard library should be.', 'andreasabel : agreed on waiting.i think the aim is clear: to be able to safely re-use as much of the standard library in a hott / raw mltt setting as possible.  i have had to duplicate parts of the library. just to make sure it was k-free.  it was a trivial exercise (as it was indeed largely k-free). but tedious.', "zhyltsovd thank you for the proposal. and apologies for taking _quite_ so long to get back to you.this has the potential to be valuable addition to the standard library but as it stands there are a few issues:- there already exists a formalisation for injective functions in the standard library in `function.injective` so your code would need to use the existing `injective` definition. obviously this will involve altering your implementation.- your `thick` and `thin` functions now exist in the standard library under the names `punchin` and `punchout`.let me know if you'd like to proceed or not. no worries if not. i understand. after all this time. you may have moved on!", "> no. it's not the case. let s be a finite set. and f: s -> s a function. then the following are equivalent: f is injective; f is surjective; f is bijective.ah yes. my fault. not quite sure why i'd forgotten we were finite! thank you for your explanation. i have to confess when i read it the first time i completely misunderstood what your code was trying to do. now that i'm more on-board. i'm afraid i don't think that the code is generally applicable enough for the standard library. nothing to do with the code quality or its usefulness in certain situations! it's just that we try and keep the number of data types in the standard library to a minimum. and `inj` is really just a special case of `fin n - fin m`. albeit one where the induction principle is easy to access.once again. apologies for the numerous misunderstandings on my part. however if you have functions along the lines of `thin` and `thick` (which were missing until recently) that you think are both widely applicable and missing from the standard library please do feel free to contribute them. i promise you'll get a quicker response!", 'it sounds like maybe we should relax the requirements of `--safe` to accept postulates of type `set`.', "just had a look at the branch. what's the plan for maintaining this? is every safe change to the non-safe part going to have to be copied over to the safe part manually?or is there some way of regenerating the safe part automatically?", "> however it is now going to require browsing both safe.data.nat.divisibility and data.nat.divisibility which are deep in different parts of the heirarchy. what's more you can't off-hand predict which one it's going to belong to.the doc for the unsafe module systematically links to the safe one because it imports it.> can users who are concerned about safety not just type-check it on the command line using the --safe option?`--safe` only succeeds if all of the definitions in a module (and all the module it depends upon) are safe. hence the need for a split: it is currently near impossible to typecheck a development relying on the standard library with the `--safe` option. i'm actually surprised that after 100+ articles using agda published. no reviewer seems to have complained about this.", "> but then you'd have to call agda --safe on every single module attached to a paper to make sure the whole development is not using any dirty tricksaren't you going to have to do that anyway? even if you've only used modules from the `safe` hierarchy in the standard library. you still need to check that your own modules don't use any dirty tricks.", "oh okay. that makes sense. thank you for your patience and taking the time to explain it to me! i have experience with exactly one agda development and that's my own so i'm not fully versed in all the tricks...okay then perhaps there should be a `--safe-narrow` and `--safe-broad` option to cover both options. it just seems weird that a module that only uses safe definitions should be labelled as unsafe just because some of its dependencies happen to share a file with unsafe definitions. in fact the same thing should probably apply to other options like `--without-k`.", "> okay then perhaps there should be a --safe-narrow and --safe-broad option to cover both optionswon't the problem still be the same? you'll want `--safe-narrow` on all of the modules corresponding to a paper (all of the theorems have to be valid) but if it relies on the standard library. you'll need that constraint to magically change to `--safe-broad` whenever definitions rely upon that dependency.", "> whereas what it should ideally do is only check the definitions in other modules that are actually used. from my position of complete ignorance. this seems like it should be doable using some sort of flow analysis. i'm not sure if it is or not! if it is possible. wouldn't this be a far better solution than partitioning the standard library in two?maybe it would make sense if agda internally marks definitions that *could* have been checked with `--safe` as such. even if the flag is not enabled. that way. when importing a file without --safe. agda can check for the definitions you actually use whether they are safe. although this would probably require quite some refactoring of the other flags that are excluded by `--safe`.", '`integer.properties.-[?]-decsetoid`. `integer` has not standard equalities other than `[?]`.so. why changing from `decsetoid` to `[?]-decsetoid`?', "the aim is to keep naming conventions consistent across all data types. for other data there may be non-propositional equivalences available. we don't want users to have to guess the name.", 'answered question so closing.', 'with the trick from far-out and vivex. does exist a way to make coexist the two behaviors? i need to send json as default and standard www-form-urlencoded sometimes.', "making `store.getstate` generic looks like a good idea. but as for `action` interface. i don't know this kind of strict typing is appropriate here.   as arusakov says. fsa is just one of a major implementations of action.in that sense. fsa-flavored `dispatch`. `store`. and the like can be put into other `.d.ts` files (e.g. in the `flux-standard-action` itself?)  this can be also applied to `store.dispatch`'s return type.", 'flux-standard-action', 'thanks mate!', ':smile:', "backbone typescript definitions contradict backbone's own documentation. typescript is supposed to be a superset of javascript.backbone's documentation says you define your class by doing:```var mymodel = backbone.model.extend({});```although this isn't the typescript way. i definitely think it should work. but with the current definition. it does not.the changes introduced by #2077 break this.converting an existing backbone project to typescript is made quite awkward because of this.i note #2517 tried to revert these changes previously.i'd argue enforcing standards on library usage shouldn't be done in the definition for that library."]