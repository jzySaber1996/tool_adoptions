["thanks! this looks good. but can we change the flag to `-o` and `--out`? i think that's more standard for terminal programs.", 'situation is good. http seeding is working (currently only bep19 the one that supports standard http) just currently refactoring webtorrent to make the addition more modular.', 'removing jshint in favour of standard', "we also need to have a standardized way of excluding particular languages from code coverage for a given test. this is needed for tests that don't apply to certain languages and for scenarios that have not yet been implemented in all languages.the proposed way of doing this is to have a mask for each language that would be applied in the report route on the test server. while the report that gets dumped on disk contains the raw coverage. that way we can still generate a markup file with information on which scenarios still need to be covered by each language.", "ruby generator: do not call validate on string in array[string] in model. i am working on a beaker module using the ruby azuresdk. i got strange errors on validate methods from beaker. which i did not call from my code. after investigation it turns out that the error is caused by a validate function on array<string> in the ruby azuresdk. this code is generated from autorest:```# return [array<string>] gets or sets list of address blocks reserved# for this virtual network in cidr notationattr_accessor :address_prefixes## validate the object. throws validationerror if validation fails.#def validate  address_prefixes.each{ |e| e.validate if e.respond_to?(:validate) } unless address_prefixes.nil?end```currently the ruby code generator generates validation code for dictionaries in a model. this works great if the type in the array is an object.in case of primitive types in the dictionary ruby goes looking for a validate method and uses the first one it can find.calling this validate method from standard ruby code works fine. calling it from code that's integrated in another library can cause issues (in my case beaker).i think the solution to this problem would be to change the way validation code is generated in autorest. it should not generate validation code for arrays with a primitive type. since these methods do not exist.", "also. i'd love to get some videojs/core-committers thoughts on the notion of firing non-standard events like this. and whether we should namespace them to make it crystal clear they're not standard.", "i'm obviously a vote in favor of something like that since that's basically what i'm proposing here.  and when considering it. also consider the idea of namespacing non-native/standard events. could be something like `'vjs:custom-event'`.", "misteroneill are the browser behaviors you're seeing not compliant with the standard? if that's the case. i think it's reasonable to normalize their behavior in video.js (and maybe that gets rid of the need for new events).", 'as we discussed in person. the standard doesn\'t seem to give us any recommendation about ordering of events like `loadstart`. `play`. and `playing`.i\'ve been spending the morning observing behaviors in chrome with different combinations of `preload`. `autoplay`. playlists. and video tech.html5. thankfully. is fairly consistent. it follows the `loadstart -> play -> playing` pattern for all combinations except `preload: "none"`. where it\'s `play -> loadstart -> playing` in most cases.flash is less consistent. in fact. with `autoplay: true` and playlists. we get patterns like:```playplayingplayplayingplayplayingloadstartplayplaying```also. i want to be clear that i don\'t want to merge this just to solve some problems we\'re having that. in some cases. are caused by external projects (swf. playlists. etc). i\'m open to all sorts of ideas - like moving it into a separate project that modifies video.js with experimental features or something similar.', 'we could keep utf8 for io operations.but for charset in http header this is a problem. `utf-8` is the standard.if we keep `utf8` in headers. some browsers will not work with docpad.so ?', 'adding file standard validation in repository. adding standard validation in files. based in `.editorconfig` default configurations.', "please help us understand why you're setting sendstandardtargeting to false and overridding everything with what amounts to the standard targeting?1) there are known bugs with overridding standard targets.2) modifying bid cpm should be done with biddersettings.bidcpmadjustment", 'we are using custom standard targeting that is why we have to do false. otherwise it can pass values into hb_pb. which we have not created values into dfp lineitem.', "remove do callbacks if needed. ## type of change<!-- remove items that don't apply and/or select an item by changing [ ] to [x] -->- [x] bugfix## description of changea couple bug fixes that were easier to combine into one pr. the first removes the bid parameter to calls to addbidtoauction. since that function doesn't actually accept any parameters. the second removes docallbacksifneeded since the calling order with addbidtoauction wasn't standardized. and it seems like it should be. specifically it seems like the callbacks should always be done after the bid is added to the auction.", 'upon further review. if you override the `hb_pb` key as well. this works as expected. does that solve for the use case here? the root issue is treating `hb_pb_${bidder}` as as "sort of" standard keys. i think we need to make these defacto standard keys and refactor `targeting.js` but this would take a bit of work.', "improve bid object. ## type of issuefeature request## descriptionwe think that currently bidders do not provide enough information about their bids to address all publisher's needs. openrtb. which is a de facto standard in the s2s world. has many important parameters that are not available in prebid.js. we want to continue improving communication between publishers and demand partners and suggest adding the following openrtb parameters in the bid object:- iurl- adomain- cid", 'the standard openrtb adapter. ## type of issue* **question**## description#891 mentions the "standard openrtb adapter" per the following:> any adapter using the openrtb protocol must alias the standard openrtb adapter provided by the prebid core framework.could someone point to a module/branch/repo for the standard openrtb adapter?thanks.', "hey elljoh we didn't find too many bidders that are using ortb protocol so we did not build it. that said if you have the time to implement a spec for it. that probably is helpful. i would suggest using the baseadapter to implement the openrtbbase adapter. which other adapters could then implement a spec for.", 'thanks', 'this would be an interesting addition to prebid overall and something we would be interested in testing. actually doing this within the prebid server would be really interesting opposed to client side.', "pwyrembak the specific compression format doesn't matter. all that matters is that you support compression on the response based on what the client sends in the standard http header `accept-encoding`. for example:`accept-encoding:gzip. deflate`we cannot guarantee what a client sends. that's up to each individual browser. agent etc.", "danielspaniel thx for clarifying this! but one question remains to me: this works for a 'standard' model - how would this work for an rsvp.hash? e.g. ```model(params) {    return rsvp.hash({      modela: this.store.findrecord('model-a'. params.id. {include: 'model-bs.model-c'}).      modelg: this.store.query('model-c'. {sort: 'whatever'}    });  }.```modela is the one with the dirty relationship. i did try ```setupcontroller(controller. model) {    model.modela.savechanges();    controller.setproperties({model});  }.```but this did not bring the expected result...", 'i added another pr to your branch with the missing exercises. please also run npm test and fix standard formatting ^_^', "i'd love to fix issues. and add i18n support like the other standard workshoppers at here :raising_hand_man:", 'also this is standard practice on posix. eg - java_home. gnome_shell. moz_program. etc', "i'm very hesitant to break posix standard and set us up for a lot of conflicts (i can easily see someone setting up cdn using env and then being very confused why api doesn't work all of a sudden) for a platform we don't use and nobody currently uses the app on. especially when the fix for that platform is a one liner of `api_port=$port` in a .bash_profile. people run in dev or test on a daily basis. currently nobody uses heroku.jim. thoughts?", 'jimlambie do you want help with this one? feel free to assign to me.', 'eduardoboucas jimlambie josephdenne i believe with the introduction of `collection type` and publish `collection` recipes (marketplace) this is no longer a strict requirement.', "i'm very happy with that. as it separates concerns and keeps api agnostic of implementation. closing!", "we have much more control over how the electron window behaves.. with a chrome plugin it's difficult or impossible to perform some of the standards checks. e.g. for security reasons. so it seems that putting more effort into the chrome plugin is not worthwhile or sustainable. our energy could be better spent making the electron implementation easier to install. so i'm closing this until somebody disagrees.", 'hello.i think providing feedback is a good idea. but the mag or html "guide"* is the wrong place to send people.the mag\'s focus is holding requirements. the example code is just that. examples. it should not be treated as production code and i wouldn\'t be comfortable encouraging people to copy and past from the mag.the html guide (due to replace the current standard shortly) is likewise high level best practices recommendations and also probably not a great thing to encourage people to copy and past from. both of those documents are "what" and "how". but for this situation we need more of a guide to debugging etc. its different enough that the mag or the html guide is a poor fit.i\'d suggest we have a separate document(s) as part of the github files (perhaps a wiki page. perhaps a new directory in the tree) and have a "debugging guide" for each error in there and then link to that.that would keep all of the a11y self contained and easy to update / develop over time and would keep the focus of the mag and other guides to just the "what" and "how".hope that helps.jamie + lion', 'since there is only one way to "ignore" rules. which is to "skip" the standards check by it\'s full name. there probably isn\'t anything to hint about. so i\'m closing this. reopen if you disagree.', 'title attributes must not duplicate content. adds a new standard check. covering title attributes that have the same text as the element itself.', "marr i'm still planning on adding an `.editorconfig` to the npm source tree once the `npm3` codebase stabilizes enough for me to get that codebase passing `standard`'s quality checks. but that will only affect npm itself. is that what you were asking for. or did you have something more sweeping in mind?", "file a bug! i've inadvertently made npm a major constituency in the standardiverse. so i think feross is getting used to seeing issues coming from npm people. :grimacing:", "i'm not sure if this is related. when i run npm install from bash. it creates a folder off my c: drive: c:\\c\\users\\[myusername]\\appdata\\local. that 'c' after the drive letter is not a typo. and [myusername] is my actual username. it creates that 'c' folder. the 'local' folder is completely empty. it doesn't do it if i run it from the standard windows command prompt or from my console emulator (cmder).", "> is that a pr you'd accept?no. it really does not make sense to me to have two independent frameworks controlling i/o from the cli. if you _really_ don't want the standard output from npm being displayed. a child process with stdout redirected or suppressed is the right way to go.", 'reopening because this was not addressed by #6933', 'from a project without an existing node_modules or shrinkwrap:```npm installnpm shrinkwraprm -rf node_modulesnpm installnpm shrinkwrap```the shrinkwrap file changes.', "rebased and landed as b0273190c71eba14395ddfdd1d9f7ba625297523 (with a few tweaks as 649e31ae4fd02568bae5dc6b4ea783431ce3d63e - i'm trying to future-proof how npm deals with scoped packages a little by standardizing how we test for scopedness). this is a great find. as we're very close to rolling out support for scoped packages on the registry. so thank you very much for putting this together!", 'test: remove fixture directories. this also involves cleaning up. standardizing. and in some cases fixing broken tests.', 'customized .gitignore for app generation (closes #80). adds `public` and `.build` to `.gitignore` if user chooses standard installation otherwise the user can put whatever they want.', 'allows user to create custom .gitignore (closes #80). adds public and .build to `.gitignore` if user chooses standard installation otherwise the user can put whatever they want.', "thanks for the leaflet link roemhildtg.  your website link helped solve my problem.  i realized that i had to use leaflet's own iterate function and not a standard i = 0; i < featurelayercollection.length; i++  iteration.   this code solved my problem:```map.eachlayer(function (layer) {    map.removelayer(layer)}); ```", 'jgravois could you find a whole bunch of tile services that are mercator but published at non-standard scales? i can try to tackle this.', 'added a react component for loading google fonts the standard way. not sure now how this would help.', "you mean indents on code?i am sure that i've set phpstorm to wordpress coding standards but i'll double check just in case.thanks for the feedback", "implement mdo's code standards as per feature request. i've taken the liberty of updating all markup and scss/css to use [mdo's coding standards](). if i missed anything. let me know and i'll revise and resubmit.", 'you are great! two thumb up     maxdmyers', 'holger1411 my pleasure! thanks for starting understrap!!', "im sorry. perhaps i did not described the issue correctly.the problem is not the ide. the ide is set to check if the source complies with wordpress' coding standards. in our case the source complies with mdo's standards which they are completely different from wordpress ones.of course the ide can be set to ignore the guidelines.so the actual case is which standards should we follow.", 'new workshopper (attempt #2). okay this is a crazy rewrite of most of levelmeup. it is ...- [x] updated to all the latest dependencies- [x] using workshopper-adventure- [x] not program based but module based- [x] prepared for internationalization- [x] testable using `npm test`- [x] linted using [standard]()- [x] significantly reduced in code-complexity- [x] using markdown for rendering instead of txtit would be lovely if someone could take the time to review it.', "i've started reviewing this. i'll let you know tomorrow!", "a lot of commits. i think i'll just do the workshop and not focus as much on reviewing the code.", 'charlierudolph is there anyway to send commands back to the cucumberjs to trigger a screen capture or anything? that is another use case that is very important to the standards i have to follow.', "i've updated the pr to use `q` and `browser-request` instead of the web standards polyfills. my bad for not noticing those deps already existed on the matrix sdk libs. let me know if you want any other changes.", "> the agreed upon course of action is that there will be a safe.* subset of modules.i think i'd prefer `m.safe` to `safe.m`: in my opinion the word `safe` is more noisy at the start than at the end. furthermore `m` and `m.safe` are close to each other. both alphabetically and in terms of the directory hierarchy.", "> i'm still a little unclear about how the git submodule of the standard library works. am i correct in thinking that it doesn't automatically pull updates made to the master of this repository? it has to be manually pushed forward right?right.", 'any news on this one?', 'basarat i deleted the extend commits since they are only in my branch.an use case for the extra parameters would be for jquery widgets that add their own events with non-standard signatures.additionally. reading the documentation for on/off. it seems there is a feature to pass a boolean false as the handler. this is not supported by the current definition file.', 'feross the bug was that re-encoding the info section of the torrent after parsing it into the json structure yielded a different infohash. this is probably because the torrent contains some some standard fields in the info section (seen this before). by passing the buffer of the the torrent instead of parsing -> encoding -> parsing the problem was solved.all in all i wouldnt call this a parse-torrent bug as i was using it weirdly.   > on 25 oct 2014. at 13:14. feross aboukhadijeh notificationsgithub.com wrote:> > was this a bug in parse-torrent? what was the fix?> > --> reply to this email directly or view it on github.']