['switch to standardjs.', 'i think keep them in separate functions is casing the async patch and post not working issue to be not exposed. so i think we should figure out if merge into one function handles all the cause without breaking existing service so that we can apply this to other languages to avoid future complexity. for the formatting issue you mentioned above. can you send me or link me a js coding standard to me?', "edge and android use their own native hls implementations for playback. i know android's is particularly finicky and that can cause strange issues elsewhere during playback.are you seeing this issue with an actual live stream or a standard vod hls stream?", 'nice. is this idiomatic `--confirm` usage? i know this is semi-standard in the toolbelt. so if there are patterns to follow we should be doing that.', "ok. i'm going to leave the format up to you since it's really a product decision: just let me know how you'd like standard messages and deletes to look. note that we could also add flags for any of these (and/or just a catch-all `--verbose` flag). e.g.:``` console$ heroku kafka:tail my-topic --with-timestamp2016-04-15t00:00:00z: the message goes here2016-04-15t00:00:00z: another message...```versus``` console$ heroku kafka:tail my-topic --verbose2016-04-15t00:00:00z (partition: 12. offset: 4325): the message goes here2016-04-15t00:00:00z (partition: 12. offset: 4326): another message...```", "the adapters should follow the standards of using the macro for `pbjs` global. if this fails at runtime. it's an issue on the adapter's endpoint and should be resolved there.", 'sure that sounds ok in the short term. we discussed this a bit earlier and might end up pulling in a lightweight ajax library to be more standardized. that might not be right away tho.', "haraka vs emailjs vs wildduck. it's getting confusing. i didn't know there was so many options.i was going to implement standard dovecot/postfix etc server. but they are hard to scale compared to what we can achieve with nodejs.i see there is a lot of updates for the emailjs libraries in general. should i/can i implement this as a flow blown mail server?thanks guys!", "if you are using standard flags. then you should consider not using the keyword search term but the flag term:```javascriptquery = {flagged: true}```for every standard flag there's `flagname: true` and `unflagname: true`", "even youtube does that with livestreams. so i guess it's kind of a standard to start again where you stopped before. i don't think it's a logical thing. but a lot of people seem to think it is.i'm perfectly fine with using a workaround. do you have any idea how to change mine above to make it work for contrib-hls? it works on places (mobile) where hls is native. but it breaks with contrib-hls in desktop browsers.", 'ignore submit buttons in title and label standard. fixes #94 and #128', 'errors are now grouped and can be ignored like this:```page "" do  skip_standard \'focusable controls: anchors must have hrefs\'end```so i\'m closing this. please reopen if i misunderstood.', 'check standards in iframes. with this change we validate standards in iframes and nested iframes', "i don't think you need the npm package `exec`.  `exec` should be a shell builtin.try```npm run exec -- ls      # should do standard `ls`npm run exec -- echo $path  # should show ./node_modules/.bin in $pathnpm run exec -- env    # should have several $npm_config_xxx variables```if those don't work. then there's a problem with `exec`", "wip: make npm code conform to `standard`. this time based against the correct branch.this is probably too big a diff to effectively review. so once standard is passing (and the tests are passing multi-stage as well). we'll just have to cross our fingers and merge this. so far it's down from ~14.000 warnings to 1.569. most of which are comma-first clauses that need to be reformatted.it doesn't look _that_ different.r:iarna", "i'm sorry.  as a cygwin user myself. i sympathize. but we just don't have the resources to support anything other than bog-standard windows.", "closing in favor of #7442. which just goes ahead and pulls the ripcord on making npm follow `standard`. feross. you should go look at what you hath wrought - if your browser doesn't explode trying to display it. it's pretty :lollipop: (for lolololololollipop).", "i mean. if you want to check out `multi-stage` and take a look. then by all means. please do (i'm going to be spending much of my week getting my head around it so i can help get all the tests passing so i can land the `standardize` pr before it goes completely stale). but the bugs i'm trying to fix in `npm2` now are ones that i think are likely to persist into `npm3` if not dealt with now. and that precludes a lot of stuff around the install and update paths.", "thanks smikes - thats exactly the kind of wrapper we've written. curious to hear whether others do the same or there is a more standard approach.", "after discussing this with iarna. i decided the least risky way to make this happen was just to wait until we have the `multi-stage` tests in a good state (i.e. all passing) and then just redo this again from scratch. yes. it's a fair amount of work. but it should go much faster the second time. and i'm not at all confident that my dvcs skills are up to the task of accurately rebasing this branch without completely breaking something in the process. soon! :eyes:", 'missing standard dep', 'in my application. there is a standard 404 page (ie "page1") but users can set a custom 404 page (ie "page2").  if a custom 404 page is set. whenever the webserver encounters a page not found error. the user is redirected to the standard 404 page ("page1") which then redirects the user to the custom 404 page ("page2").if the first redirect (to "page1". the standard 404 page) occurs with http status of 404. zombie immediately triggers an error and does not continue to the second redirect (to "page2". the custom 404 page).this differs from the behavior of a regular browser which would follow both redirects and end up on "page2". the custom 404 page.i hope this helps clarify the issue.  thanks.', 'i had the opportunity to work with this data very superficially as part of a code for america project and remember noting the importance. complexity. potential risks and the significant value potentially resulting from broader awareness about and more varied use of the data set.  seems a natural to make available as a streaming service according to an open standard.  has there been any further discussion about or work on this use case? thanks.', 'still seeing the original issue of the `pre-commit` hook running from the cli. but getting skipped in guis.i checked the `$path` variable from both the gui and cli as mentioned above. and it looks like its the same exact issue.**os:** windows 7**gui:** github desktop', 'nick-woodward is it with latest husky?', 'please keep in mind that next time it would be different if the different branches of agda require different branches of the standard library.', 'integration with handlebars. tell me how i can transfer the data to the handlebars?  .... generally i am interested in replacement for the standard templating ...', 'we need to have a configurable `csp` sniffer value. i see that there are four options:1) different builds of angular for different csp configurations2) configuration via the value of the `ng-csp="..."` attribute3) configuration via new directives. e.g. `ng-csp-no-unsafe-eval` etc4) configuration via standard csp meta tags. e.g. `<meta http-equiv="content-security-policy" content="style-src \\\'self\\\'>`i would like to use the last one because. a) it doesn\'t require multiple build files. b) it is a standard way of specifying csp directives anyway. and so would make sense to someone reading the html who doesn\'t know about angular.what do people think?', "fix: parsekeyvalue function does not allow additional equals signs. in some cases people will not follow all url standards and may have unescaped = characters in their get parameter values. currently $location will not parse them correctly (or rather too correctly) and in combination with the routing will make a pushstate that removes them from the url.my proposed fix will just join everything after the key back together with the '=' character it is split by before.", "well i guess the build failing wasn't rly my fault.", "i am a bit torn about this.on the surface don't really like this idea since we are undermining the standard.but then again i see that accepting `=` chars after the first char is not going to break valid fully encoded url query strings.while i can see that it would make life much easier in the cases where `=` characters were inadvertently un-encoded. it is a special case. what happens if there is an unencoded `&` in the value?", "if there is an unencoded & in the string. something is rly wrong and that can't be solved. the case i needed this for are base64 encoded strings.", 'even when i agree with petebacondarwin that this does not follow the spec. the behavior in the pr is how most servers handle unencoded `=`', 'ok. if lgalfaso is happy then i am happy. i think we can improve the algorithm and then land this.', "i'm just explaining the reasoning behind vvakame's comment. because you expressed confusion. maybe this is a problem that has already happened on definitelytyped. i don't know. but it seems to be a standard so far too match 1:1 with the package names on npm. it has nothing to do with electron. specifically.", 'failing code: ```reactrouter.match({ routes. location }. (error. redirectlocation. renderprops) => {    var element = react.createelement(reactrouter.routingcontext. renderprops);}```which is pretty standard code with react-router. but currently fails (as `renderprops : matchstate`. but `routingcontext : react.componentclass<routingcontextprops>` and `routingcontextprops` does not extend `matchstate` and instead just implements the same signature.note function definition for createelement is:```function createelement<p>(        type: componentclass<p> | statelesscomponent<p>.        props?: p.        ...children: reactnode[]): reactelement<p>;```', 'using javascript standard style.. using javascript standard style to have a common code format. i leave this here for about a week or two. please make comments and then i will update this pull request with new formatted files.', 'wow that was quick :-d', 'omg... i used to use google style. but at least it is consistent :)', 'see #92', 'my preference would be to standardise on the eventemitter behaviour. however. you could argue that since errors are not necessarily fatal (due to automatically reconnecting) it might be valid not to throw by default.if your preference is to keep the current behaviour i\'ll go with that. maybe something like:"unlike node\'s eventemitter. errors will not be thrown if there are no error listeners added".to be honest it should probably be noted in the readme either way what the default error behaviour is.thanks.', "hey superjojo2001.do a `npm test` before you commit something. this way you can be sure travis won't complain. in your case you forgot to apply the standard javascript style. install standard (`npm install -g standard`) and execute `standard` in the projects root folder. a simple `standard --fix` will fix most of the code style errors.you can find more information about the javascript standard code style [here]( be great if you provide some tests for your additions!"]