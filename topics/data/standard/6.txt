["freyert i don't agree that this is a solution because it is not guaranteed that this api is under our control. at least this should be configurable. many of us will want to be able to request apis that do not adhere perfectly to ietf standards.", 'save cache to standard directory. the cache is saved to a standard cache directory using the "env-paths"module. rather than saving in the home directory.the old cache directory will automatically be migrated to the newlocation.breaking change: cache is no longer stored in `~/.electron`.', 'on the api command line call i feel the following would be useful . ( high )--template.data  path to json file which holds the data the report will use.--template.helpers  path to a file of java code which can be called.  why we are likey to crate a standard code base and call themalso if possible  (low)there are a number of setting you can pass these are available by passing a json object to the template some of these values may have value i.e paper size.', "but why?standard haven't config. not discuss rules; just works.", "cool.i think it'd be a good idea to have a standard where for a plugin to deprecate another it should be confirmed working by 2 people (besides the author) and/or have passing tests.just so that users are not given a buggy replacement.how does that sound?", "yarn has some non-standard behavior here; if you run `yarn postcss`. it will run the local installation of `postcss` if there's no script defined in your package.json. npm scripts have pre- and post- hooks. so when you run the `css` script. it attempts to run the `postcss` script afterwards. due to yarn's behavior. it attempts to run the `postcss` command without any args. which causes the stdin error.as a workaround for yarn's non-standard behavior. rename your `css` script to something else. and you won't have this problem. (or just use good old `npm`)", "michael-ciniawsky. any recommendation on which seed to use that is compatible with webpack 2 and uses latests standards?   you can't expect everyone to be good at everything just like you can't expect an electrician be good at plumbing.   bebraw is not a nice guy and just wants to hide the issue instead of dealing with it.", 'this happens in standard out of the box windows 10 command prompt.', '> this happens in standard out of the box windows 10 command prompt.hmm... not for my win10 installation...', 'excellent work! i ran across this feature today while upgrading. i am accustomed to the normal time wasting gibberish that passes for error reporting in many projects so this new standard is very much appreciated.', "brent-gourmetads - what creative do you have in the ad server? is it the standard call to w.pbjs.renderad() or the prebid 'universal creative'?", 'sjelin you mention that this could be done in another thread. right?```we would address this using document.elementfrompoint and element.getboundingclientrect pretty easily actually. elementfrompoint isn\'t totally standard at this point. though it appears to be supported by all browsers. the consistency issue is real though. donno if we should leave this the way it is or "fix" it```', "dgoldstein0 we're using the `<base>` element because m3u8 urls need to be resolved relative to the m3u8. not the page the player is hosted on. the standard `a.href` approach doesn't work because that calculates relative to the page the player is running on. `parseurl()` does half the job but it would still require us to translate interesting url features like relative paths and i've been hesitant to do that because urls are pretty complicated when you get into the nitty-gritty.we're open to solutions that don't use `<base>` and ie6 support isn't a requirement :) have any suggestions?", 'jordansexton your code is not compliant with standardjs. could you run `standard --fix`?', "> rather than copy and paste the content. link to it.in my mind. that means we have another problem: the scenarios that capture the behaviour of this tool can become out of sync with the guidelines. if we don't copy the guidelines here. how do we know when they get out of sync?> as the same basic text is repeated over and over and over.this is because the tests are manual. there is nothing more to communicate. we could delete these scenarios. they were really only useful to ensure everything was covered. but i am not offended by them personally.", '> they are also very much not a standard. they are guidelines. we should ensure the language is consistent.what language would you prefer?suppose i am a manual tester. i want to ensure my web application conforms to the following guideline:"alternative delivery for embedded media must be provided"how would you describe what i am doing? would you say this?given i am testing conformance to the guideline "..."', "so do we consider this mag v2 ... i'm aware the code examples are in the process of being updated. but the guidelines are not changing.", "swap 'standard' for 'guideline'. making the language a little more consistent.", "thanks for clarifying.  yeah. i think all the remaining todos belong in this pr.  without unit tests. imho. this pr wouldn't meet our (de facto) standards for being complete.  the other remaining todo is just to move existing code to its own module. which won't really change the scope of the pr.  make sense?", "thanks for the quick response danpat -> here's to hoping that format standardizes in the coming years.", 'fix usage of semver module in docs. previously the docs displayed only installing the `semver` module and not going into a node shell or requiring the module before displaying examples.i think this update makes it a little clearer that `semver` is a standard node module and it is used internally in `npm`.', "oh i see. then i'm guessing it gets pulled in somehow during a build script when updating the dependencies? i'll make the change in there then. thanks!", 'nice! :+1:', 'i\'ve just noticed that i have the same issue. with standard usage (index.html file with <%= template variables) it works fine.this issue arises for me when i try to use require in the index.html template.my goal is to split the index.html in multiple files so that i can reuse building blocks.i\'d like the index.html file to contain almost only require statements:```<%= require("./header.html"); %>...<%= require("./footer.html"); %>```', "i may suggest to write in that readme that the second returns a promise. isn't `done` a standard nodejs way to alert something is done? gulp. grunt. or other. are probably using that. that's why i was suggesting to update the example (at least one of them) to include a `done` callback (while remaining framework agnostic).", 'jbcpollak did you figure it out?', 'i\'m not so sure that this is as close to being done as you thought.  to name a few issues i noticed besides what you mentioned:- there\'s a lot of duplicate code to consolidate around the different "utilities"- we\'d need to remove the jettison dependency- ultimately "graph of the gods" data set would need to be replaced by one or more of the common tinkerpop datasets.i\'m also wondering how useful this is now outside of titan/faunus users.  the id system forces longs.  it uses `compact` graphson which is "non-standard" in a sense (again for titan).  that doesn\'t match the original reader we supplied which uses `extended`.  this almost feels more like a pr for titan as it sorta bound to that implementation.  short of users generating their own files like this. i\'m not sure that i see the value to tinkerpop.  any thoughts on the matter?', "i must have been thinking about if anyone wanted to use the `hoodie/` path for their own purposes. it would be good to avoid an overlap by some mechanism. this is probably extremely edge-case though and better worked around.i understand the value of having apps also be usable as plugins/modules in their own right (coming from a php knowledge base. this is prevalent in zend framework. for example) in which case enforcing the relative path from each module's root to be standard makes complete sense. i'm happy to proceed on this.", "i think this would require the spec being changed? my first thought was to detect if a bot was the result of integrations and then display it differently on the front-end. but this would be difficult to make persistent.i imagine you could preface all bot usernames with `bot_` or something. but if we're going through the trouble of trying to establish a standard for this. i think we may as well send data about it through json instead. maybe is `bot` key on users that can be true or false.", "how would this work? is this like remote desktop or vnc to control the remote machine somehow?  this can't be done via web standards. so riot-web would be heading off into custom browser apps (as chrome remote desktop does it). afaik...", 'yeah. i\'m inclined to agree. although i think we should still let clients have the option of generating their own thumbs if they prefer.we clearly need a standard api for clientside thumbnailing in general. which links in turn into the whole general "human representation of events" problem.', 'yes! perhaps it is time to add the ubiquitous question mark icon somewhere to the ui. (recommend top right. as this is fairly standard.)these guides would work as interim content.', "do we have an existing design standards guide w/css attached?  hint: this is something i'd love to take on.", "i guess on balance we should probably add them. i agree with jacquescarette that they might well be misused. but to be honest so might a lot of things in the standard library. gallais's case shows that they do have their uses....", "added some of haskell's data.maybe operations to agda's standard library.. added some of haskell `data.maybe` functions with the notable exception `mapmaybe`.ideally haskell's `data.maybe.mapmaybe` would be moved into agda's counterpart location. unfortunately it currently lives in `data.list.base`. which is a surprise to those migrating from haskell to agda. or the many who tend to use both frequently. attempting to relocate it quickly. naively. resulted in cyclic dependencies.", '#350 which has just been merged provides a way forward on this problem. it adds a new "safe" modular arithmetic library. the old library can then be placed in the `unsafe` module. the dependencies have been updated to use the new library.', "hmm. you're right the name is a little confusing. i'm not sure about the alternatives though:- `<=.[?]=<` makes it look like it has a product type in it and the binding order isn't very clear.- `<=and[?]=<` is very non-standard.- `<=[?][?]=<` is very difficult to parse as `[?]` looks like a flipped inequality.thoughts?", 'deprecating `data.fin.dec`. the very last of my outward-facing module level changes! as described in the changelog. `data.fin.dec` is a non-standard module which is causing dependency cycles when i try and add a proof of the pigeonhole principle in `data.fin.properties`. it also fixes the problem of the subset decidability proofs being nearly unfindable for new users.this pr deprecates the module and moves the proofs it contains to more sensible places. the proofs have also been tidied up a little.', 'sebastienblanc could you please run the tests and tell me if what `semistandard` is complaining makes sense to you?', "narretz any time you're using a while loop. it's a possibility - loops should be avoided. specifically. your while loops rely on how `charat` and `splice` works - which may not be accounting for shim-corrected standard behavior.", 'i like where this is going! looking forward to the end of `unable to resolve signature of class decorator when called as an expression.` errors.', 'i did some quick tests using a couple different import methods.both `const auth0lock = require(\'auth0-lock\')` and `import auth0lock = require(\'auth0-lock\')` currently break giving a typescript error of `uncaught typeerror: auth0lock is not a constructor(...)`. importing using `import auth0lock from \'auth0-lock\'` works but gives the a typescript error of `module \'"auth0-lock"\' has no default export.`.implementing this suggested typings update allows use of the standard `import auth0lock from \'auth0-lock\'` in my environment without a typescript error.', 'so . i am think about that . should we try catch those  case(unrecognizable package). and  emit an ```error``` event instead of close the socket?  so . application can handle those ```nonstandard modbus device``` by itself.', "yes. keep-alive package is not the cause of the error. because it's not delivered to application layer. i our case . those custom heat beat package from the third-party device lead the error.  and it is ```enough data transmitted```. however it's not a standard modbus message.  as u see in the screenshot."]