['i like your spec! could maybe evolve into something similar like the promise standard. i already have multiple request implementations in my app because of the combination of libraries i use. with a standardised interface libraries could allow injecting the preferred request implementation.', "perhaps any of the internal variables used in the generated code should have some naming prefix such as to not interfere with standard argument naming. perhaps. an underscore or some other prefix char to denote it's a generated variable.``` csharp// construct urlvar __url = new uri(...).tostring();```", "it is by design. you'll notice your file system does the same thing. so having multiple slashes wouldn't result in a 404. as the file system would still find the file anyway.funny enough. expressjs.com does not even run on node.js or this library. so really. those examples demonstrate we are doing the standard thing.", "flash can only seek to keyframes in an mp4. so. if your mp4 has keyframes that are spaced far apart. you'll only be able to seek to only some parts of the video.if you are using standard options for videojs. then an mp4 will end up playing in html5 which can seek whereever.do you have a working example somewhere? though. it's probably best to get away from flvs nowdays :)", 'maintenance/refactor hb deal. ## type of change- [x] refactoring (no functional changes. no api changes)## description of changecontributed by snapwich changed the way hb_deal is handled in the code to behave more like a standard targeting key.## other informationshould fix #827 replaces #871', 'mrose17. we actually decided to go with semistandard in the new release. really appreciate your pr though - thank you!', "so. what happened with this? it doesn't appear to have been excised from the project dependencies.", 'input type file needs :focus style. as a developer. i want the input type of file to have the same focus as other buttons that highlights the element so that it will meet accessibility standards and is consistent with other elements.', '`npm shrinkwrap` should be idempotent. reason: noisy diffs. potential nondeterminism.key order within the dependencies and other properties should have a stable ordering (i.e. be sorted). a useful implementation strategy would also involve centralizing all the calls to `json.stringify` so that we have a standard way of marshalling objects for external use.', "i'm super aware of `npm-shrinkwrap` (pretty sure there's no way raynos would _not_ let us be aware of it). and i'll probably be stealing bits and pieces from it as i try to turn shrinkwrap into the feature it's supposed to be. thanks for the pointer!", 'how about creating some kind of a standard changelog? many projects have that already. look for `history.md` files everywhere.', "rlidwka that's what i described: > i think that including release metadata within the repo in a standard form. and maybe eventually exposing it via the web site. is enough of a next step. i completely agree that the current changelog is not enough (especially because updating it isn't integrated into the release process).", 'we run into this issue with ghost. we specify the engine & enginestrict parameters. but it never gets checked. this is because the standard way to install ghost is as a download. and npm is used to manage its dependencies rather than managing the ghost package itself (although we do publish to npm).', 'browser options: global wait completion-function. it would be handy if a global wait completion-function could be set as a top-level option on browser.i need this so `clicklink` and `pressbutton` can always wait for a standard condition. but ideally it would be overridable per call e.g. if i pass `options.element`.btw thanks for your great work on zombie!', "i find it stimulating. myself. it is nice that the flows are (relatively) straightforward. and aren't tangled into circular references or a big-ball-o-mud. which means parts can be encapsulated at various scales. components switched out. apis standardized. etc. thanks. mlovci!", 'use correct property on error object. the `error` object has a standard `message` property which `callbackerror` correctly uses. and which `unauthorizederror` should use.', 'thanks for getting me up to speed. :)in that case. why does `callbackerror` set `message` and not `error_description`? and. shouldn\'t `message` also return the same value as `error_description` seeing as it is a standard property on the `error` object? e.g. restify will return `{ "message": "" }` as a response when an `unauthorizederror` happens because `message` is not set.', "callbackerror isn't used as an oauth-type error response from the server. `message` makes more sense there given the context.what we should probably do is have anvil.verify middleware use res.send with the error directly from the middleware instead of passing it to next. it shouldn't be on the user of the lib to define the correct error handler in their application/service.", "i think the solution you've outlined is solid. i'm closing this pr as it is not a proper fix.", 'no. please see the documentation for custom formatters. there is a link on the readme.', "mmh. i find this too drastic.  `unsafe` modules should only do things that are really unsafe. not things that are declared unsafe because of the deficiency of the `--safe` mechanism.for instance. in `data.nat.base`. ```agdaerase : [?] {m n} - m <='' n - m <='' nerase (less-than-or-equal eq) = less-than-or-equal (trustme.erase eq)```is perfectly safe even though it uses `trustme.erase` (which is also safe).as such. i am against this reorganization of the standard-library.  better investigate how to make the `--safe` mechanism generate less false positives.", "i know there is a work around. i'm asking by `fix-agda-whitespace` because it *isn't* in the standard library repository. did you install `fix-agda-whitespace` in *your* sandbox using the makefile? how?", "sorry i meant **selectively** move the contents of `data.nat.base` back into `data.nat`. for example the things that don't seem essential to me are:-  anything to do with `_<='_` and `_<=''_`- the `generalisedarithmetic` module- the `ordering` definition.these are just suggestions for the future of course! the important things that this pull requests achieves is that- the standard ordering properties (reflexivity. transitivity etc.) are accessible without having to open the `dectotalorder` module every time- they are where you'd expect them i.e. in `data.nat.properties` rather than in `data.nat`.the reasoning module has to be moved because it relies on the fact that its a decidable total order. as i mention above. i feel that maybe it should go in its own separate file as is the case in lots of other parts of the library. but again that's only a suggestion and this pr doesn't attempt to do that.", "> i'd be great if you could run the `make test` of agda with your library branch before a pr.for what? if the pr's author find a problem running `make test` on agda. he cannot fix the problem using a pr for the standard library. > after running `make test` the final time i must have missed `divmodutils` out my `git add`.i don't think so. i guess you didn't run `make test` on the agda repository but in the library repository which is the correct procedure.", "> for what? if the pr's author find a problem running make test on agda. he cannot fix the problem using a pr for the standard library.true. but he can alert about the expected breakage. and also get a bit more feeling about the backwards-compatibility of the change.", 'use standard event.preventdefault when available (event.returnvalue is deprecated) - #4557', 'clas look good. thanks!<!-- ok -->', "sjurba out of curiosity - what is the practical use-case you've got for this change? i'm aware of the ffoxos-specific args that we need to pass to the xhr's constructor but i wonder what are the non-standard properties that you've bumped into.i'm leaning towards proposing a more generic solution where there would be a dedicated service responsible for creating xhr instances but yeh. would like to understand all the use-cases first.", 'imo `.success` and `.error` were a bad bit of api design in the first place. this issue highlights a number of situations where developers get confused because they either expect `.success` and `.error` to work the same way as `.then` or vice versa.in a perfect world i would rather just ditch these `$http` specific "promises". instead we could encourage developers to use the standard `$q` promise api `.then` and `.catch`. there is very little benefit imo in working with explicit parameters over working with the response object.', 'this one too. vvakame. added standard header to d.ts and test file. unorm-tests.ts. ready to merge? thanks!']