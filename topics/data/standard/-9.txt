['are those spaces a eslint standard? cause i am pretty used to the one without the spaces hehe :)', "the root tag name is available as the standard `tagname` property on the element itself. though it's capitalized. i do agree it's a bit of a bummer to have to repeat the tag name. but i'm not sure it's worth the complexity of adding a whole facility for this.", "we've decided on the style. so. going to close this. we still need to actually set up standard and lint to follow this style but those are separate.", 'gkatsev thanks for writing back. yes i am giving all players a unique id and also triggering this function for them all. and my all players are working as well. but my all players are initializing at once. means they are not id dependent. after my first player is initialize. i see console messages for all others like below:videojs: warn: player "566909b393faa" is already initialised. options will not be applied.videojs: warn: player "566909b39267c" is already initialised. options will not be applied.videojs: warn: player "566909b39589e" is already initialised. options will not be applied.videojs: warn: player "566909b396bf2" is already initialised. options will not be applied.this could only mean that plugin instead of initializing a single player when an id is passed to it. it is initializing all the players at once. right? so if i want a few of other player work differently it won\'t allow me to do so and give me above message.i had an another thing in my mind. if there is any way to know if specific id player is already initialize then destroy it and reinitialize with my need. q. can we check if player is already initialized? (check by id or selector supplied in player initialization)or i\'ll use a separate function for all other players but this is not a standard procedure to follow.i haven\'t used fiddle until now. i\'ll check how it work.', ':+1:', 'this is fantastic! but fyi it was an api breaking change and probably should have been a minor bump instead of bugfix bump.', 'yes. it probably should have been', 'ah. i was testing on the small scale and made an example based on that and it looks like the output changed more than i expected it to when i tweaked something. i was taking a look at webpack because i was thinking it was the cause of trusktr\'s "similar problems" above. but now i\'m not sure.my concern essentially came down to seeing```return __webpack_imported_module_0__b__ && typeof __webpack_imported_module_0__b__ === \'object\' &&        \'default\' in __webpack_imported_module_0__b__ ? __webpack_imported_module_0__b__[\'default\'] : __webpack_imported_module_0__b__;```in the general case of circular dependencies. there isn\'t a guarantee that the `default` key will exist at the point where this function is called. because the default export may not have been assigned yet.  it looks like webpack strips out that logic based on the module being imported though. so it actually isn\'t present in the example i posted. that said. it does seem dangerous to me since it\'ll fail in the circular case. what is the motivation for checking `\'default\' in` in that context if it isn\'t for es6 modules? it seems like that would be a breaking behavior for standard commonjs.sokra there are a few other es6 module things i want to file that i noticed when checking this. but i don\'t want to file them if they are still in the works. do you still have more to add. or should i assume they are stable as-is and file a few more bugs?', "let's clear up some responsibilities in webpack:- parsing: parser plugin  - result: one or multiple subclasses of `dependency` were added to the module- resolving: `modulefactory` + `compilation`  - result: `module` property on the `dependency` is set to the resolved module- emitting: `dependencytemplate`  - result: some cool replacements in the module source were madeso you have to do the following:- create a parser plugin that looks from your `__uniter_require_once__` calls.  - don't try to resolve anything here  - create an instance of `uniterrequestoncedependency` and add it to the module- in the `compilation` hook  - register `uniterrequestoncedependency` with the `normalmodulefactory` to the standard resolving kicks in  - register `uniterrequestoncedependency` with the `uniterrequestoncedependencytemplate`- in `uniterrequestoncedependencytemplate`  - replace the statement with your code. using only `__webpack_require__` which is the internal require function. which takes a module id. i. e. `delete __webpack_require__.c[id]; var xyz = __webpack_require__(id)`> but. from within the dependency. how could i get a module id?the from the `dependencytemplate` you can access the module id with `dep.module.id` where `dep` is the dependency.> i could just use localmodule`localmodule` is something completely different only used for amd. don't use it.> but. where and how? parser plugins seem sync. the resolver most likely will be async.don't do resolving in the parser plugin. you should do in in a modulefactory. or extend the standard module factory with a resolver plugin.> so what is the best place to put such an async resolver?in a resolver plugin or in a `modulefactory`---i'm not sure if i understand the `use` part correctly. but here is how i understand it:it's just like a `require` but with a different resolution algorithm.you could just write you own `modulefactory` and register it with the `usedependency`. in this modulefactory you implement the resolving algorithm and return a new `normalmodule`.---you may need to know which classes a module defines to generate the correct require statement. here you can use the `this.state.module.meta` object from a parser plugin to store meta information about the module (i.e. the defined classes). in a `dependencytemplate` you can access these meta data via `dep.module.meta` and use it somehow.", "common and vendor chunk example. i recently came across a scenario where i wanted webpack to create an explicit vendor bundle. a bundle with all code common to our entry points. and a bundle for each entry point. i knew it was possible but there were no examples close to what we needed. after a lot of trial and error i finally figured out a way to do it and i wanted to share. this example shows how i was able to do it using the `commonschunkplugin`.if this example isn't quite up to standards. please let me know and i'll be happy to fix any issues. or. if a very similar example already exists. i can close this as well.thanks for the awesome tool. :+1:", 'good as well.but is this really necessary? it\'s possible to give automatically a standard file name for example `stdin` (as they do in `node-sass`) and use `context` option for path so my first example would resolve to this path: ``` js__dirname + "/app" + "/stdin"```', '> however. they should probably do some form of "last call" perhaps by using something similar to setimmediate to allow all other ajax handlers that have already responded to also register their bids before the auction is closed.i agree. this is what we should do. it looks like `settimeout(fn. 0);` approximates the same behavior as `setimmediate` since it\'s non-standard. along with `postmessage` so there should be a way to do this. sounds like a fun pr :)', 'an alternative could be to use  as well. might yield smaller amount of changes', 'snapwich do we lose the ability to use `class` it will work with this pattern (+ babel)?', 'since each of the modules would be compiled with babel. you could still use the `class` keyword.', 'with #61 done. polymers are correctly recognised for standard pdb. mmcif. mmtf files.pending now. is support for recognising polymer chains in other files types (gro. psf. mol2) and non standard pdb. mmcif. mmtf files that lack polymer/entity annotation.', "andris9 i see that the only binarytype supported by emailjs-tcp-socket is 'arraybuffer' so the currently supported runtimes can stay. also. i think it would be good to port the source code to a newer es-standard with a build step that creates the umd header and ports to es5 (or whatever the minimum level has to be).thanks for the tip about wild duck. will keep an eye on it.", 'e.g. i would suggest instead of suggesting:```$(\'input[type="file"]\') .....```to suggest:```angular.element(document.queryselector(\'input[type="file"]\')) .....```the latter is more standard. atop of angular and more important not require jquery', 'add the native source handler pattern. the hls tech should be a source handler itself but until that transition is complete. have it mimic the behavior of the flash and html techs. create a fallback "native" source handler that will apply the standard behavior when invoked to handle a source. use player.hls.src_ to detect whether a source is loaded in fillbuffer so that the async nature of currentsrc doesn\'t delay segment fetching.', 'lgtm :toilet:', '`data-video-id` is not a standard attribute. what problem is this pr trying to address?', "a little bit of research revealed that while it's not defined by a standard. no c++ compilers use the return type as part of the mangled symbol name.  it generally doesn't make any sense to do so anyway. because it would indicate support for  ambiguous function overloading.we should be abi and source-code safe to change the return type of these externally visible functions.  i'll go ahead and implement that. and document the return codes.", '- improved "outdated" command to update remote tarballs when the remote content changes. hi.we are working with some remote tarballs. referred using its direct http/https url in the dependency/devdependencies list.we found that npm caches the content of that tarball using the url as unique key.this is absolutely fine for "tagged" release that never changes. however if we want to support a snapshot-like based deployment (in our continous-integration environment). we would like to release "-snapshot" remote tarballs. where a ci build machine pushes new content in that tarballs at each build.simply using "npm cache clean " doesn\'t work. since the command cleans the local cache. but not the "node_modules" local folder.so i\'ve tried to enhance npm with the minimum set of changes. in order to make the "outdated" command to actively check the remote repos.changes:- the local \'package.json\' is enriched with a new property (_remote) containing some useful information about the get response headers (currently etag and modification date). with the original url as well.- added new file \'check-remote-tarballs\' with the logic to issue a head request- added new file \'remote-options\' with the logic to issue the head request with the right headers. in order to stimulate the http 304 (not modified) response.as a side note. i\'ve found that the "add-remote-tarball" actually uses the npm registry api to issue the get command for a remote tarball. is that intended? the npm registry module adds logic to support registry authentication. ca. session. etc... that are actually useless if the remote tarball is on a non-registry machine.in addition. we needed to patch our iis server to server .tgz files with the non-standard mime type "application/x-tar" (explicitly required by npm registry module).the added head support cannot use the npm registry module (unless we add the head support there). so i\'ve directly used the \'request\' dependency.thank you for this great tool!luciano', '(keeping in mind that npm has a slightly different interpretation of prerelease metadata than the standard. even with `semver4`.)', "(i should point out that i don't think this point is beyond argument; i'm just trying to capture the rationale for why npm handles it the way it does. which is in accordance with how isaacs interprets the semver standard.)", '> should we add a dependency to npm-registry-client for that pr?my plan is for the cli not to be doing any network access directly; everything will go through `npm-registry-client` or other external modules. as such. npm itself isn\'t going to add any new functionality that talks directly to the network. this could be a new command in `npm-registry-client`. or you could create a new module (`http-file-status`?) to encapsulate this functionality and integrate it into `npm outdated` for tarball checking.> about iis and .tgz mime-type. i know that there should be one standard. however imo the tool should try to work seamlessly on the majority of installations. register an additional mime-type "application/x-compressed" should be not disruptive for the tool...it sounds like iis is actually in the minority here. as i understand it. the conventional way to serve compressed tar files is with a `content-type` of `application/x-tar` and a `content-encoding` of `deflate` / `gzip` - that is. the compressedness of the content is independent from its content type. (the wikipedia page i linked to above goes into this in more detail. albeit not in the most straightforward way.)>  i\'ve introduced the etag support too (see proposed remote-options.js module). we could discard the time approach at all. actually bower seems to correctly use etag already.etags are the most web-friendly way to check the freshness of a package. and what i think everyone at npm would recommend you use.', 'closing as resolved / abandoned. i think timoxley is right. and this is about as standardized as the javascript ecosystem is going to get.', "ok. so if you are ok going with head check in npm-registry-client i'll open a pr there with the bare head request api. and then create a new module with the etag logic there.i'll check the current bower implementation for that and see if we can avoid duplicates.thank you. luciano", 'make default table text size the same as body copy. we should assume that table text is the same 19px size as standard body copy. unless specified otherwise. would be nice if the .font-xsmall class could be applied to an entire table though.', 'following the discussion in the front end meeting. we\'ll keep the text size for tabular data at 14px for smaller screens. 16px for tablet and up and for special cases. for example - the "check your answers" pattern. the text size will be increased to the standard body copy size of 19px.', 'gemmaleigh i missed the frontend meeting. could you summarise the discussion / the points for and against?', 'docs(guide/using $location): replace invalid link.. the provided url incorrectly links to a w3c page about html history (retrospective). not about html5 browsing history api. the proposed change is to replace it with correct link to whatwg html5 standard.', 'i signed a cla as an individual.', 'lol. good catch !', "standard css properties for react.d.ts. i tryed to add style attribute: style={{display: 'block'}}> but cssproperties not contains 'display'.as i understand. should populate this interface with snadard css properties?", "this seems reasonable to me. however. changes should be made to both react.d.ts and react-global.d.ts.vsiao do you know why `cssproperties` is incomplete? is there any reason we can't try to make it complete?", "i didn't populate cssproperties fully because... well. there's a lot of them. it doesn't have to be a complete definition to work (in the context of creating `domelement`s). since all of these properties are optional anyway. stepancar. can you explain why it is helpful for you to have the `display` property in `cssproperties`? are you getting any compilation errors?", "vsiao. for example: we have ``` javascriptinterface state{     isclosed: boolean;}```and in render function ``` javascriptrender(){     return <div style={{display: this.state.isclosed? 'none': 'block'}}></div>}```you'll catch typeerror. beacause display isn' exists in `csspropertis` type which has `display`  attribute.i know. this is nor best approach to hide/display block in react - you can just add if-statment;but this approach has a right to exist (i. sorry for my english)i think. also `max-height`. `min-height` ... shoulde be contained in `cssproperties`. i faced some cases when could not  do without javascript which calculate max-height.if you try add max-height style - you'll catch typeerror lilke with display. jbrantly  `style={<any>{display: 'block'}}` - looks little derty. and it's not work (i checked it using atom-typescript)", "stepancar apologies. i just realized you're using jsx which doesn't have support for angle-bracket type assertion. try `style={{display: 'block'} as any}`.", 'jbrantly  thank you! it works.but i think that we should still populate `cssproperties` with `display`.`max-height`. `min-height` for best autocomplete and cssprop checking at compile stage.', "i agree. a large point of that fix is to be able to catch typos and such (ex: `style={{dislpay: 'block'}}`). that obviously won't work unless we have largely complete definitions for style properties.", 'well... can i merge this pr? pspeter3 vsiao', 'it should at the very least have the same changes applied across the board before a merge. react.d.ts. react-addons.d.ts. and react-global.d.ts.', 'it looks fine to merge pending changes to all files.', 'jbrantly pspeter3 thanks ! updated :)which is definitelytyped conform to standard spec. library spec or ease of use?', 'jbrantly. hello! i added additional props to react.d.ts. react-global.d.tsi think it might be merged']