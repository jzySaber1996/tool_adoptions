["we could also try the other way around: create a desktop and mobile app with node.js/meteor. like atom.io did. it's not very difficult.being desktop based. i could create a bridge between the standard torrent protocol and webtorrent. using unix pipes on linux.", "move to standardjs code style. look. it was cute to have my own code style for the first 6 years but this is just making it weird to contribute to now. i'm +1 for moving to standardjs. i'm -1 for moving to anything else. cause i just don't wanna have an argument about it :)", 'standardjs is pretty close to what we have anyway. :+1: from me', 'thanks to "insomnia driven development (tm)" ;)', 'javascript standard style guide. remove eslint in favor of the more opinionated  the lint is now part of the test suite (and therefore pull requests)---api changes to match proper capital case constructors:- `api.connecton()`- `api.genericserver()`- `api.actionprocessor()`also. it is now `require("actionhero")` not `require("actionhero").actionheroprototype;`', "png files written with wrong resolution in header. currently. a png encoded by node-canvas doesn't contain the correct physical size information in the header. in `canvas_write_png()` in `png.h` you never call `png_set_phys()` to set the physical units in the png header. so it defaults to 72 ppi. most screens are 96 ppi.generally it would be awesome to have a way to set the physical size of the canvas from javascript. i personally would like to use this for print. where the dpi in the header changes the way the document is printed. right now i am running an imagemagick command after the png is written to a file. but this is inefficient.i could offer a patch. but of course it would be another non-standard function. i'd like to hear the thoughts of the project leaders on whether this would be something of general interest or not before i write anything.this is potentially related to issue #716. in that scaling the canvas may indicate that the user is looking to produce a png for higher ppi screens. and the png/svg/pdf should probably reflect the true physical dimensions of the display device.", 'hmm. very interesting indeed.have you tried exporting pngs from different web browser and see what they set as the ppi?', "question: how to bring a player back to `live` moment after pause?. hello.i'm working on non-standard feature for hls live playback.when a user clicks `pause` - a player stops buffering new data.but i need to bring user back to `live` moment (obviously `live` in terms of player. not clock time) by offering special custom button.i tried to approach this with `player.bufferedend()` and simply call `player.currenttime(player.bufferedend());`.unfortunately this approach resets player to 00:00 by unknown reason. also it does not really work. because as i mentioned above. after pause a player stops buffering and i don't know `the latest available time point` anymore in order to seek into live as close as possible.so my questions:- why player resets to 00:00 if i try to seek it into `bufferedend` point?- how to get `the latest time point`. which is the closest to live. so i can bring user back upon request after pause?thank you.", "i've definitely seen `play` and `timeupdate` and all the standard events working just fine. also. contrib-hls is basically a no-op on ios right now because we let the native hls implementation take over.if you provide a reduced test case we could take a look. going to close this issue in the meanwhile.", 'i merged all the disparate `vjsstandard-*` branches into this one.', 'we are treating this as the "master" branch for standardization efforts.', 'the standard dom methods should work fine. for example. `player.el().appendchild(test)` would make `test` the last element inside the player.', 'i think this needs to be brought up to date with `master` because automated linting via videojs-standard has been added there.', 'gkatsev i temporarily removed `vjsstandard` and rebased master.', "invalid non-string/buffer chunk. in the documentation. to add documents via native javascript. you have the following:``` javascriptconst readable = require('stream').readableconst s = new readable()s.push({  id: '3'.  body: 'this doc has a great body'})```which throws a `typeerror: invalid non-string/buffer chunk`. upon reading the node stream documentation. it states that a readable stream can only accept a string or buffer. so this example makes no sense at all.so how can i add standard js objects to the index?what was the motive behind moving to a streamable api? it adds so much more complexity considering you can no longer use promises on any of the search-index methods.", 'use colors in `inspect`. - in `src/lib/util` (typically required as "`docpadutil`"): added a simple wrapper around the standard `util.inspect` function (with `{colors:true}` set by default)- changed calls to `util.inspect` to `docpadutil.inspect`now. when the user types `docpad info`. their config info is much more readable! ', 'use standard for formatting', 'sure', "ah. i see now. the problem was that webpack doesn't know what to do with `require.tourl` given that's not standard. there's not much we can do about it here.you can try to get more ideas at stack overflow.", 'i assume it only affects the build configuration. this is currently not supported. but you can use standard tools to restart the process when files changed.', '> bebraw you don\'t need to cover the entire configuration. covering just standard options would be a good start.the problem is also typos which misspell standard options like `modules:` vs `module:` -- seen this. some way to report that would be great: `you don\'t have "module:" defined but there\'s "modules:". that might be it`.', 'or maybe instead to empower better plugins for this. i have always been interested in the investigation into creating a new [tapable](github.com/webpack/tapable) instance for webpacks output system. this could allow features like this to be created through plugins. in addition could solidify and standardize across the board how plugins. maybe loaders hook up into a standard console output "template" or "instance".', "ok i'll break them up", 'dbemiller this is for a new *server to server* adapter. not a regular bid adapter.how does it not conform to the new standards? as far as i can tell there is only one other server to server adapter. and that is for prebid. this adapter is compatible with the same style of input.', 'the last pr was closed because i do not think it was realized that this is a server to server adapter not a standard bid adapter.', "jcswart yes... the prebid-server one is out of compliance too. snapwich is working on updating it right now.i definitely didn't realize that this was an s2s adapter. i'm not sure whether that changes anything. with regards to the standards... but will run it by the team/leadership.", "abalmos: is the suggestion above to have the cart expose a service that will in turn call the signal to run the chain of actions associated with `cart.toggleitem`?  that doesn't seem to be any different (beyond being more confusing to follow) than just calling the signal from the action directly.  or is the suggestion to not allow `cart.toggleitem` to be a chain of actions at all. but rather it's own function that modifies the state. and expose that function as a service?  in that case. i'd rather keep all my actual state-changing confined to actions if i can help it. and definitely not have to repeat state-changing code once in actions and once as a service.christianalfoni: i don't think it needs to be a requirement that the signal has to exist at the time of registration.  it could either always evaluate the string at call time (as my current implementation clearly does by explicitly calling the signal). or populate it lazily: i.e. if it exists when registered. fine.  if not. keep the string and try to evaluate it again at some later time. either on the first call to the outer signal. or during the registration of any subsequent signals.  in the latter case. you'd still get to analyze all the signals at registration time. it's just that a signal containing strings in it's action chain may not be considered invalid until it's called and it's discovered that nobody ever registered that one.  it will still be quite an obvious error at that point: used a signal string that didn't exist in a particular action chain.  i believe this is currently how cerebral handles things when one calls an unknown signal. so nothing different there.as for being harder to find the file containing the signal. i don't think `grep -r 'cart.toggleitem' *` (or `ag cart.toggleitem`) is too bad :).  part of the point is that the standard method of explicitly requiring paths makes it much less modular and reusable. so definitionally anything that replaces the explicit path with a more dependency-injection-like pattern will have that issue.  you could claim the same thing about signals themselves: why have the strings at all?  why not just require the action chains directly wherever you need to use them?  i see the real power of the string name being modularity: the caller of the signal doesn't have to know anything about who registered it.", 'standardjs formatting. this pr brings the api codebase into line with web by making it conform to the style guide at standardjs.com', 'replace built-in log module with standard dadi/logger. close #122', "warnings. warnings instead of errors for some standards checks.they are considered separate from errors. print out differently in the pretty formatter. and don't cause your build to fail.", 'simplify reporter api. simplifies the reporter api by moving logic into objects that capture validation failures.improves the json reporter and fixes a bug with counting skipped standards', 'this now submits the html to the w3c validation web service. which is considerably slower than all other standards checks. before i fix all the other scenarios. do we like this change? we could support it but disable it unless you opt in to it...jamieknightbbc emmajp what do you think?', '(on a positive note. this has forced me to make the standards checks asynchronous. which may be useful in other future scenarios)', 'chore(core): switch to prettier-standard. **wip**  i think is a good place to have a discussion let me know what you guys think', "yes it seems you are correct it's not that obvious since to me if you are using prettier and standard i would expect both linting and formatting not only one that's a shame", 'separation of concerns. my dear friends.', "i will try out a few things it would be nice to have a simple instal package that brings both without config hassles it shouldn't be this messy", 'standard && prettier', 'closing in favor of #121', 'chore(linting): only add standard for now. third time the charm', 'closing in favor of #122', 'this is awesome. davidchase. thanks for trying out several alternatives!', 'this is further complicated in angular as the `#` used by the links causes the angular routing to change.  would be nice to be able to use standard buttons vs dummy links.', 'i\'ve never seen `"closed"` before but i have see a lot of `"license": "private"`. afaik `"private"` is the defacto standard for this thing.', "timoxley i'd gladly change to private. is that an acceptable name by spdx standards? we should probably document that somewhere.", "kemitchell is the person with the most domain knowledge for best practices. but i believe the commonly accepted practice is to include `licenseref-license`. and then have the text of your license in `license` or `license.md`. because proprietary licenses vary from project to project. it's not really possible to boil them down to a standard like spdx does. and as a consumer. you're going to have to review the text of proprietary licenses anyway to use them responsibly and legally. does this address your concern. kesla?", "indeed you can't. which is rather unfortunate. especially since there exists infrastructure and standards for how to deal with separating config and non-config data.", 'comply to coding standards. no more warning from standard.js', "use standard to enforce style. here's what it would look like. thoughts? i like that it forces things like `===` for comparison and not aligning values in objects. but i'm open.", "it's sad to see `callmemaybe` go but i guess it was never really doing anything since the callback was always the last parameter. thanks for making the changes!", "i know. i was sad to remove it! one nice thing about `standard` is that it made it more clear that that function wasn't doing anything.", 'ixkaito reviewed it and i merged a pr. merging this workshopper with master since there has been no further review.', "different way to specify configuration settings. currently. the only way to reuse configuration options is by exporting an object from a `cucumber.js` file. are there any plans to follow a more 'standard' way of defining configuration. for example with a key in `package.json` or a seperate `.cucumber.yml` or something?this would be similar to what how a lot of other packages work (nyc. tsc. etc.)related to #992", 'i think a yml file would be best as i think its easier to read and write than json. see #751 for a somewhat related discussion. related to #992 we could update it so the profiles are nested under a `profiles` key which would open it up so we can add other data in there as well.', 'closing in favor of #751. commented the important new ideas there', "lgtm. i vaguely remember that safari's `-webkit-flex: 1` uses different defaults from the standard `flex: 1` so may have to be spelt out as `-webkit-flex: 1 1 auto` or similar... however. i suggest only adding this if it's seen as a bug.", "update for new builtin word64 type. this pr does minimal work to make the standard library work with `word64`. it doesn't define word arithmetic.", "it doesn't minimal work? then i don't think it's quite ready yet.. ;)", "ulfnorell. why in agda stable branch. the std-lib directory isn't pointing to the master branch of the standard library. but the  word branch? that is. the commit in the top is the commit in this pr:```agda-stable $ cd std-libagda-stable $ git logcommit aaa04c9a6b7ab787eb30ccc0cd5e1604470a6eb6 (head. origin/word)author: ulf norell <ulf.norellgmail.com>date:   wed nov 22 11:34:26 2017 +0100    update for new builtin word64 type```", "because this pr hasn't been merged yet. the master branch of std-lib doesn't work with agda stable--that's exactly what this pr addresses. i don't want the agda test suite to be red simply because the std-lib is lagging behind.", 'thank you once again for your pull request. as a direct result. we now have `data.list.relation.pointwise` which should fulfil your needs and will be available in the next standard library release.', 'deprecate non-standard property names in `data.fin.properties`', 'closed with 3dfaac6', 'feature: add rss data provider. #### rss data provideradds rss data provider. works with remote feeds. correctly parses xml.auth not implement until we know what kind of auth may be required as there is no standard rss auth.close #89 cc jimlambie ```200 passing (15s) 11 pending```note: one test skipped due to issue inside third-party module throwing false positive.', 'markusmauch i completely appreciate the approach you\'ve taken. and with the pr merged now. we\'ll all be able to benefit.  i generally _extend_ window with an alternate interface that provides the "xrm" object.... but i haven\'t needed to do that in long time. because i prefer using window.postmessage() to communicate between web resources and their containing form.  this is an html5 spec that helps abstraction. and provides for better automated test scenarios.  i let form scripts worry about the form. and web resource scripts worry about the html web resource--with postmessage facilitating the interchange of information between them in a standard. secure way.  allowing cross-frame scripting is no longer a requirement of my work.']