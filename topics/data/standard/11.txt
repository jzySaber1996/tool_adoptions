['i would be interested in a progress indicator for formdata uploads with attached files.', 'any update on this?', 'kevinsawicki ping', 'kevinsawicki could you please review this again?', "> could you please review this again?i'm not a huge fan of moving a directory each time this runs. other apps or libraries could be using `~/.electron` and it would seem confusing and hard to track down why this directory is disappearing each time you `npm install electron`.could we instead just use `~/.electron` as a fallback location if the file isn't in the new cache location and write any new files to the new location?that way it would be backwards compatible still but we wouldn't have to worry about moving directories around.", 'it also looks like there are conflicts here as well that need to be resolved.', "sounds good to me. will remove the migration code and when i have some time later this week i'll add the fallback logic.i don't want to be pointing fingers and get negative but would really like to get this off my chest: the migration of the directory was suggested to me and i spent a lot of time getting that working and covered by a test. solving the merge conflicts is something that happened multiple times now on this pr because of the slow responses. overall it would be beneficial for 'other' contributors if core contributors are on one line.", 'thank you for your reply zeke. i just added some fallback code all tests are passing now!', 'thanks for this siilwyn. apologies for the mixed signals. and appreciate the resiliency', 'nice to see this getting merged! :)', "i'm a fan of this. is the only part of the api that gets funky `getimagedata`. `putimagedata` and `createimagedata`. where the bytes-per-pixel changes from the html canvas standard's 4bpp? while we could normalize the `imagedata.data` properties to always be 4bpp. that seems to defeat a lot of the purpose. since this would be a non-standard api. it seems reasonable to expect the user to be aware of this difference. i'd also advocate adding a property to imagedata instances to indicate the bits per pixel.", 'backends support was merged in master just this morning. so this could be done fairly easier. one of the first backends i want to port from my previous pull-request is fbdev. and it has support for several color depths. regarding to the api. afaik linusu was pretending to remove the not-standard ones from the canvas object. so probably it would work on the fly with 4bpp independently of how it works internally and/or add backend specific functionality on each one of the backends objects. i think this is the most clean api we could work with.', "content type overrides for streams. as specified in more detail in `samples/test/stream-with-content-type/readme.md`. there are 2 orthogonal fixes in this pr:- make c# generator not fail for `content-type` header param. and actually use it if the body type is `stream` (trivial to enable for other body types. but saw no point so far! if you pass json. it's not gonna be xml...)- provide smart defaults for header param named `content-type`. namely. if you haven't specified an enum on it. it inherits the `consumes` section. this behavior enables deduplication of data in the openapi definition and is no violation of the openapi standard... since `content-type` parameters are really to be ignored.", "probe. as specified in more detail in `samples/test/stream-with-content-type/readme.md`. there are 2 orthogonal fixes in this pr:- make c# generator not fail for `content-type` header param. and actually use it if the body type is `stream` (trivial to enable for other body types. but saw no point so far! if you pass json. it's not gonna be xml...)- provide smart defaults for header param named `content-type`. namely. if you haven't specified an enum on it. it inherits the `consumes` section. this behavior enables deduplication of data in the openapi definition and is no violation of the openapi standard... since `content-type` parameters are really to be ignored.", 'consider it a step towards the "abstract all the things" milestone. but zearin has a point. modules can come standard especially if it\'s another notch of speed on our belts.', "> modules can come standard especially if it's another notch of speed on our belts.a lot of thought has been put into bundled plugins - the conclusion has been that the issues are too high with it - instantly incompatibilities between sites can arise. and what happens if a deploy occurs and that plugin is missing locally? too difficult.we should treat it the same as we treat renderer plugins - very good docs encouraging its use.", 'looks like you upset the standard gods :o', "nah. it's a simple error. run `standard` or `npm run standard`. you'll know.it's the `exercise` variable which is not constant. it changes.", 'maybe magic comments disabling the specific standard rule at the top of test files?', "we went over this in planning. to expand on idan's comment. the consensus from the meeting: * thanks for submitting this! * we can't really want to spend time on rewriting stuff for linter tweaks right now * mixing assert / expect is confusing and bad * dirty-chai seems okay * can we disable this one check via comment or whatever configuration standard permits. if any. and revisit later?thoughts dickeyxxx? basically i think if you can either do dirty-chai instead of assert or just disable those checks for now. we're down with this.", "i don't used require. i used import directive from new lang standard. bundler simple load and copy this module. and wrap it in some like function. in result. bundler create two copy of one module with different names. which it create appending dollar sign. and system breaks. yes. webpack shows warning. but it message something like 'this may have problem on some operation system'. not that thing. are i'm waiting.", "are `react-hot-loader` incompatible with `module.hot.accept`? i've used this in the past. without a problem. and it was working a couple of days ago. anything that i can do to help with troubleshooting this on my end is greatly appreciated. i'm all out of ideas.if i can get a repo working i will include it. right now it's a really big app and i haven't had the time yet to cut down everything but i'm working on a repo. however. so far the repo isn't repoing. it's working which is annoying. if i figure it out i will share it.the exact warning message is the standard `the following modules couldn't be hot updated` and then it lists the file that i changed. specifically the `pages/home` file. that's all i'm getting. i have a vauge memory that it used to include more details but that is not the case.if there's anything i can try (besides working on the repo) on my end. anything i can do. i'm willing to do.", '> the exact warning message is the standard the following modules couldn\'t be hot updated and then it lists the file that i changed. specifically the pages/home file. that\'s all i\'m getting.the not `only` (`--hot`  instead of `--hot-only`) should include more info in the error message.> react-hot-loaderit accepts all updates on component level. this way it doesn\'t bubble anymore and `accept("component". ...)` will never be called.', 'custom adserver targeting applied to other bidders. ## type of issuewe have custom adserver targeting for one bidder. for example.```pbjs.biddersettings = {    standard:{ ... }.    bidder1:{        bidcpmadjustment : function(bidcpm. bid){ ... }    }.    bidder2: {      alwaysusebid: false.      suppressemptykeys: true.      adservertargeting: [        {            key: "ix_pbmg".            val: function(bidresponse) {                return bidresponse.pbmg;            }        }. {            key: "ix_adid".            val: function(bidresponse) {                return bidresponse.adid;            }        }      ]    }}```### expected resultsbidder1 has standard targetsbidder2 has standard targets and custom targets### actual resultsbidder1 has standard targets and custom targetsbidder2 has standard targets and custom targets', 'are there any consideration for just reading the actual dfp sizemapping like amazon hb solution is doing?  no need to define sizes anywhere else than in our standard dfp tags. the hb config reads the details from there.', "y-lohse we can't use `:only-child` or `:first-child:last-child` because text node doesn't count as a node.in this example...```jsx<button>   <svg />   text</button>```...as far as the dom is concerned. svg **is** the only child it has. it just ignores text nodes. there is absolutely no way of knowing what's inside unless you control it which is the purpose of the `icon` and `label` props. when we have this. we can be sure what would be the children and then use `:only-child`.as for you dropdown use case. i agree with ptbrowne. it think it should be a component on its own. `<button>` is only meant for standard `button`. this would be way out of its league. i don't think complicating things because they look a like is the best thing to do.and nothing forbids to use the same style on different components.", '> "input. state. signal and string" are no longer exported in "cerebral/operators"> we do not support standard paths like "foo.bar" in connect and connect no longer takes a functionwill be kept with deprecation until release. and i would personally keep passing function as first argument> it now feels strange to have state.get(\'foo.bar\') and input.bing inside actions. is there a way to use tags there ?i see your point. but there is no need in tags inside actions. tags just helpers to avoid creating actions or any other sort of callbacks. but in action we can just work with values and strings directly.', 'christianalfoni so using merge props will be the new gold standard for computed values in views?', 'this omission was intentional: standard practice is to consider instances of a mapnik.map as immutable. so you create them once / load an xml and after that you don\'t modify them. this makes async code predictably safe.if you are writing an app that creates layers one by one and exposes an interface to modify them in place (sounds like you are) then i recommend using your own structure to hold layers + styles and then creating a new mapnik.map and adding them lazily when you need to render.if you think the above is not feasible. happy to discuss more. however that is a pretty reliable and simple approach that i would recommend. loading maps from xml might sound "slow" but its actually been heavily optimized for this kind of case.', "browserify is _an_ incredibly useful workflow for many developers. however. it's not the _only_ one. and putting it into npm directly was probably never in the cards. beyond that. having a standard way to do builds for front-end use cases is still a good goal. but it's probably not going to get implemented as a top-level command like this. it's also not clear when the team is going to get to this. but because it's something with wide-ranging implications. and as such is something that will be done with heavy consultation with the user community. as such. i'm going to close this issue. and we'll spin up a new discussion when the team is ready to move on this. thanks for your time!", 'bring ml apis up to standard.. i update the samples for language. speech. translate. video. and vision. i brought consistency to:- [x] - argument names- [x] - error handling- [x] - showing imports- [x] - readmes', 'bring bigquery samples up to standard.', 'bring speech api samples up to standard.', 'improve log view. - [x] less big buttons- [x] less rows- [x] standardize with job "log" view', "to be honest. i haven't had time yet to research this further (yet).steps:- write up a repro case to programmatically query service and introspect/compare responses- use it to see if the problem is peculiar to an individual service- dig in and see if the issue has already been reported- if appropriate. log a bug for the appropriate team to investigate further i certainly don't mind doing this. but if you have access to standard technical support through an international distributor. it'd make sense for you to utilize it.", 'turt2live - thanks for this. another really useful feature that i have been meaning to get to for a while.i like pafcu\'s suggestion of serializing. or passing the actual theme in some way (but that\'s probably going to need quite a bit more thought / implementation. further down the line).i get your reasoning behind namespacing the theme parameter in this way. but (having discussed it at quite some length). we feel that it is probably better to namespace the themes themselves in some way. rather than having to handle parameters for every possible client (we hope / envisage that there will be lots in future).can you please change the theme parameter to "theme" for the time being? for now the integration managers should be able to handle the minimal number of themes in the wild. ultimately. as themes proliferate. we should standardise on some theme name-spacing e.g. "riot.dark". "riot.light" which will allow the integration managers to render the actual theme "riot.dark". if available. but if not. fall back on to it\'s general "dark theme". which is more likely to be suitable and doesn\'t require knowledge of every possible client?', 'no custom tags - i have the standard set of favourites. people. rooms. low priority. and historical.also unable to reproduce on linux. so looks like this may be specific to macos.', "hey ara4n - do you want to prioritise this? seems like an easy win (assuming some cdn can give us effective cache-clearing facilities; i've never used one but i imagine that's fairly standard). but i don't know how pressing a need there is for this right now.", "devdan definitely going to happen eventually. i'm looking at making giving the app a more userful top bar to replace the standard system window chroming which could have proxy settings as an option. currently hard to shove proxy settings somewhere as you cannot reach user settings pre-login or when on the login spinner", 'i think this would require the emojis to appear as a grid. as is standard with most emoji pickers. there was discussion at one point to have them in a grid and have the `:shortname:` of each emoji appear as a tooltip.', "use js doc comments for some fs functions in node typings. some fs functions in node's d.ts use `/*` instead of `/**` for their doc comments. this change converts them to use the standard `/**` jsdoc comment syntax", "*node/index.d.ts*to authors (definitelytyped/definitelytyped microsoft typescript (account can't be detected)). could you review this pr?:+1: or :-1:?checklist* [ ] pass the travis ci test?", 'can you take a look at the failures in the ci server?', "the error is:```pg-query-stream-tests.ts(13.12): error ts2339: property 'on' does not exist on type 'promise<queryresult>'.pg-query-stream-tests.ts(16.12): error ts2339: property 'on' does not exist on type 'promise<queryresult>'.```which seems to me like a different issue. i see the same error on master after making any change at all to the `node.d.ts` file", 'mjbvz can we close this pr. since #15298 seems to cover more files.', "paulvanbrenk yes. i'm fine closing this as long #15298 gets merged in", "if you drop `readonly` then people who are using the react types with regular react (and/or any number of other state-management systems aside from mobx) are exposed to errors. i don't use mobx in my huge project and i appreciate the compiler errors when someone makes a typo and accidentally uses `this.state.foo = bar`.if there is an unavoidable tradeoff between standard react and non-standard react usage the standard react types should lean towards the former.", 'you have a ithenable (if i remember correctly) which can be set to promiselike. but for async/await to be used one need to use promise and not promiselike unfortunately. my question is really if you want the interface to try to be backwards-compatible (with some strange interface baggage for historic reasons) or if we should make a clean break and only use the standards stuff ?', 'ajax request fired multiple times. today. i implemented this neat library into my project. the implementation itself was very simple. however. one head-scratcher occurred. i have a form in which there are 3 dependent select boxes. each dependent on:- the very first select box (without any dependency) in the form- one checkbox toggling `true` / `false` variant- value from previous dependent select boxwhen i make a change to any of registered parents. the ajax request gets fired as many times as the count of all select boxes that need to be changed due to a change of their respective parents. every change made to the form therefor takes a ridiculous amount of time and slows down the development and testing.is this a standard behavior or should this extension be able to get all the data in single request?', 'hi. in dev speed is lazy (tracy reloaded request by request). its true. but in production mode its ok. i have forms with 5 dependent boxes and changes are instant.', "aleswita thanks for your reply. i have tried it in production mode as well and yes. it is much faster. anyway. i would like to know if it's intended that there are separate ajax requests for each select box. the client-side code looks like it is expected behavior. i just want to be sure i'm not doing anything wrong.", 'yes. its expected behavior.']