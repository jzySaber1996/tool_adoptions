['in what status there is an acceptance of this pull request? simov', 'hi.could a merge be considered ?thanks.', "> should update be required? or at least log a warning?when would we warn or throw an exception? maybe when a `componentwidget` is first created? i'm definitely open to either to prevent confusion.> does update take. more or less. the same form as the constructor: receiving properties and scheduling a render?it does. but i haven't thought about a way of unifying them that feels right to me. from the perspective of using a component. it seems the most straightforward to construct an object with properties and later call `update` with properties. we could require the constructor to not take arguments and instead also call `update` when initializing the object. but that feels awkward to me.if you want to implement a superclass in the package to experiment with some different patterns. that seems like it could be a good way to experiment with reducing boilerplate. you could implement the constructor and the `update` method in terms of hooks defined on subclasses and prescribe more about how properties are dealt with.if you want to be more react-like. your superclass constructor and `update` implementations could perform a basic comparison on a `props` hash on the component and call various hooks such as `shouldcomponentupdate`. `componentwillreceiveprops`. `componentwillupdate`. `componentdidupdate`. etc.i left this stuff out of etch because it didn't seem as fundamental as the basic idea of calling `render` and using the result to create or update a dom element. that felt like the essence of the problem and the rest felt more like advice around how to organize code. that said. maybe the props management pattern is standard enough to bake in a superclass for those that want to use it.what gives me pause is wondering where it stops. should we also model an internal `state` object with `setstate` etc? i'm much less enthusiastic about that because of the fact that state has been more complex than a simple hash of key value pairs in a lot of the code i've worked on in atom. the essential state of the editor is a product of multiple different indices tracking markers. syntax highlights. etc. it could never be boiled down into a `state` hash.maybe management of properties is different though. since they're more obviously always treated as a hash.", 'as we move to standardize error messages. this will be needed to define where the message resides inside of the body.i think this also goes hand-in-hand with the work toward polymorphic discrimination based on error code (from the error body).', "unfortunately. i'm unable to test this so cannot accept the changes. considering that google chrome will soon be disabling flash by default really soon. i don't think it's a huge loss.", 'same issue. it happens when you use fastclick plugin or something like that (framework7 ect)so. the **solution is**: remove fastclick or just disable it on video container (better)', "i wasn't using fastclick. and not having a fullscreen button wasn't an option for me. the way i ended up fixing it was making a slight tweak to video.js. the function vjs.player.prototype.requestfullscreen first checks if the browser supports fullscreen at the element level. and if not then checks if the native controls can go fullscreen. and then as a last ditch it stretches the video element to make it fullscreen. apparently on android it supports one of the first two conditions (i don't remember which. maybe both). but the fullscreen doesn't actually work. so. i removed the first two conditions. forcing it to stretch the video. and that worked like a charm. better still. it looks and works exactly the same on all platforms/browsers.", 'the control bar is just a div element. you can modify it to  your hearts content using standard dom manipulation.', 'taion. you are suggesting contacting almost every lib owner and convincing them to publish absolute standard es6. vs getting webpack to acknowledge the transpilation pipeline? which makes more sense?which is most likely to succeed?', "babel and flow are part of each dependency's transpilation configuration which i am suggesting we should try to find a way to acknowledge.  to your second statement. you state a gross misunderstanding without any argument as a basis. it's difficult to discuss with you when you are making perhaps valid but unsubstantiated claims.transpilation is here to stay. and i only assume it will become more and more varied.  es5. es6. es7. the constant is not the transpiled artifact's standard. it is that we are transpiling. attempting to acknowledge a module's discrete transpilation pipeline is a viable option. albeit not an easy one. attempting to convince every single lib owner to transpile to es5 and 6. then 7. then 8 (over time). is a continous battle and a forever losing proposition. i think instead of trying to force the world forever to fit a standard (that changes). the community has spoken by adoption of transpilation. and we should try to find better ways to work with it.", "rollups jsnext is not a standard. they made it up. and it works for their usage. and i support that. if you were there at the time it was discussed there. posing the equivalent antagonist on the same premise. you would have argued that you can't do it because no one else does.we can create new ways of doing things. just as rich and the rollups contributors did. if our creations are genuinely useful. people will use them. if not. they die.it is quite reasonable that your transpilation pipeline can be expose in a reasonably standard way to execute it.instead of being an antagonist. i'd love it if you put your talent towards how we could make something great and useful. your suggestion that the world do exactly as you want is unlikely to come true. let's put effort into something that has a great chance of succeeding. shall we?", "there's a lot of tension here :grin:personally. i'd like to see an alternative standard. as a library author i don't want to impose my build target on consumers. it's not fair to call transpilation in this case an implementation detail. if i were using typescript or coffeescript... then fine. but when writing javascript. i shouldn't have to transpile my code for the lowest common denominator build target.that being said. it does seem that `jsnext:main` has already been defined by the rollup guys. trying to change that definition at this point would probably just be confusing. plus. there's merit to having a main field that just plain works w/o a build process.", 'psirenny: do you use `stage-0` or `stage-1`? or anything at all beyond what\'s approved in standards? because if you do. you\'re not writing "javascript". you\'re writing code that _might become_ javascript at some point in the future - but might well not! consider what happened with decorators.thelarkinn: in practice that proposal works more or less like `jsnext:main` - the module build will still have to be transpiled to remove non-standard features if you use anything beyond `es2015` or `es2016`.', '> sorry if i\'m coming off annoyed soundingi didn\'t think you were annoyed. i thought you were trying to convince me that the documentation was ok because the standard for it was:> it seems clear to mesince it meets that standard. close the ticket and stop trying to convince an internet stranger of anything ;-)but then your second reply made it clear that you do want to support beginners with your documentation. and if that\'s the case then by all means use whatever terminology is appropriate to the document.all i\'m trying to say is. when you\'re new you don\'t always learn everything linearly.  you may not have read the docs on `path.resolve` when you read the ones on `resolve.root`.  it is 100% possible to create (and certainly to inherit) a functional webpack setup with your only understanding being that "`path.resolve` is that function you pass your paths to before they go in to the config". and if that\'s your only understanding then it seems strange to see the docs say "don\'t use this string" moments before using that string.plus. as i said before. the specific language used ("don\'t pass something") is ambiguous enough that if you don\'t have a solid grasp of `path.resolve`. instead of interpreting it the correct way ("don\'t pass it directly as a value of the webpack config object") you can interpret it as "don\'t pass it to the magic function you always pass paths to when they go in to the webpack config".', 'kitwestneat any update here?', 'kir-roxot thanks for the suggestion. we accept prs. i think this could be easily added to the existing bid.', "kitwestneat can you break out the changes into smaller pr's or try and rebase this? thanks.", 'out of page inventory/non-standard sizes. ## type of issuefeature## descriptionis there any chance it would be possible to specify strings that do not conform to `<width>x<height>` syntax? such as `out-of-page` sizes?', 'anyone know what the convention is here? how does dfp handle it?', "4 or 2 spaces. i don't care either. but it's a package deal and standardjs is a pretty good linter with a decent code style that works out of the box. so i'll take the 2 spaces :)i'll see to it that compatibility need not be unnecessarily broken. it the socket shim causes problems. i'll think about removing it. downside is the cost of having to rewrite the socket code. let's cross that bridge when we get there :)", 'another advantage would be that we could standardize this across different driverproviders.', "initial blacklist bug. this fix allows an initial playlist request to 404 without halting playback by saving the loader.state while error checking. tests have been added to the standard 'npm test' scripts.", "just to add to this (sorry. i know it's closed) but if you were to go down the containerisation route with something like docker. then each application would essentially run in isolation. so there would be no conflict of environment variables. this is why heroku just use `$port`. i don't have much knowledge of the standard deployment of the dadi stack. but it'd make sense to me that you'd separate the services. either via containers or some other means. rather than running them all on the same box. 1990 style.anyway. sorry to necro the pr. just wanted to add my 2C/'s of docker.", 'switch linting to standardjs', 'we finally pulled the trigger on standard huh?', 'the time has come. it was inevitable.', 'link to docs in failures. link to guideline docs about each failing standard section.', 'ignore invisible elements. ignores invisible elements (e.g. style="display:none") in various standards checks', 'fixed in 8e70b54b5f3f0d5451adb01a5ded9cc56fb610bf', 'the demo server uses our internal empirical weights that are not part of the standard lua profile. so different routes are to be expected.', "redking i hadn't thought of that. i use osx's standard terminal but it's worth investigating. thanks for the tip.", 'if you want npm to write minimal output when installing. you can set the `loglevel` parameter to `silent`:```$ npm --loglevel=silent install```however. npm will still write to standard output and standard error.  on a unix-like system such as linux or osx. you can suppress this output as well:```$ npm --loglevel=silent install 2>&1 >/dev/null```', "i'm taking this over to `multi-stage` because it turns it out it was super easy to add a constant from field there. so yay!   see 78a8b99 for the _from part.", 'thanks iarna! looking forward to when 3 drops.', 'ended up decoupling shrinkwrap from `npm ls` in 9f01098. as `npm ls` now shows you the "logical tree" and not what\'s literally on disk.', 'added unit test. rebased and squashed. passes `standard`.', "i just installed nodejs using the standard installation on windows andrunning npm install --global module_name causes the issue.i have a development server which has everything so i won't bother runningnode on windows. thought i would raise the issue in case others ran intosimilar issues.i will go ahead and create the issue at joyent/node. thanks for your help.", "sorry. we're not taking style changes to npm right now. because as soon as we have all the tests passing in the `multi-stage` branch (which will also become `npm3` shortly thereafter). we're going to be switching the entire code base over to follow the style rules set by [`standard`]( for taking the time to put this together. though!", 'hey no problem. til about `standard`. looks nice', 'othiym23 not sure if you actually looked at the changes.. but package.json is still in the root. i think shannon was mostly trying to get some sort of standard started for the front-end where we stop allowing every new plugin from creating dotfiles in the root and cluttering our project root. sure. projects should be allowed to have their own config file. but having a convention for these config files. or common home. would go a long way.', "yeah. it happens to me when i forgot to `sudo`when updating npm. i'm not sure my permission setup in `/usr` is standard though :)", "i agree. shannonmoeller. locking.btw. i agree with the spirit of what you're trying to do. which is to try and make it easier to see the structure of a project from the outset. but a lot of these decisions need to be baked in (and driven to consensus) before there are big scary ecosystems built around them. that said. this would have been a tough sell even from the beginning. because either you would have had to catch commonjs before it coalesced into a spec / de facto standard. or convinced ry and isaacs that it was a good idea to abandon commonjs early on.", 'refactor dependencies + tests . - added standard. formated moment.parseformat.js- bower fast raus- added coveralls- tape + tests are pending', 'perfect. thank you!:tada:', "maybe the decision shouldn't be based off of one library that deviates from the standards -\\\\\\_(tsu)\\_/-i'm sure they would welcome a pr to fix that incompatibility.", "i'd vote for sticking to wordpress guidelines even if they seem illogical sometimes and differ from other coding-standards. reason: the theme should be submitted to wp's repository and therefore _must_ stick to wp's rules. i guess.", "holger: there are quite some wp-plugs for sublime available that allow code-completion for wp-functions etc. anyway. i don't know in how far they stick to the coding standards according to tab-indentation etc. if you get to know anything. please keep me informed!", 'holger1411 i believe that > implement/check coding standards and html/sass syntax according to wordpress standardsdiscussions here: #114)should also reference  #118 since it is about standards.', 'should i proceed to format code as per wp standards? has anyone other ideas - objections?', 'yes. we will follow the wp standards. so if you have time to start with you are welcome!', 'code formatting second batch. this pr is the second batch of code formatting according to wordpress coding standards.changes:* formatted all source files in `loop-templates` directory', '> ralphtheninja> you mean that there should be more text. right?martinheidegger yep!', "i don't know what you mean about base64 or monetary. the groovy implementations that i coded aren't important. because only used in groovy. in javascript own library code is used.aye. no idea how to package compiled files. have no standards in javascript doesn't help. do you have a suggestion?", "i may be looking in the wrong place but i can't see any other cucumber implementations that use `media.type` - looks like the java and ruby ones at least still use `mime_type`.  is it a new standard for cucumber in the future?", "this pr is shortly to become outdated with igorminar's pr #12524 lands. in any case we should be configuring the sanitizer via its provider.i am going to close this pr.if you still want to be able to whitelist specific elements. which we would not recommend unless you really know what you are doing. then please put together another pr once #12524 lands.", 'fix(ngresource): compatible with the primitive single value in standard json. wrap response into {_value:response} format when the response is a single value of jsonsee #12787', 'i signed it!', "are you sure this is a bug? if you did a standard checkbox input. and set up a one way binding with it. the check box would trigger but if you didn't update the value. it wouldn't update.. having it not update. you'd have resetup two way binding. right?"]