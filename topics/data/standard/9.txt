["i don't know. i don't think _bittorrent_ protocol itself includes any content discovery mechanisms. that's why bittorrent trackers exist. the bridging solution i was talking about earlier i presume would work by implementing a tracker server software which supports both desktop torrent clients and _webtorrent_ and serves the pieces between both kinds of clients transparently. tracker servers are not standardized afaik and thus each one has different content discovery mechanisms. in case of kat and most of the others. this purpose is served by the website that lists the torrents in the tracker's database. theoretically you can enumerate kat's torrents by scraping the website and similarly you should be able to scrape the webtorrent<>bittorrent tracker's website/api.but realistically: no. i don't think you can enumerate that: really though. someone who knows what they are talking about should chip in to confirm or correct this.", 'ugh. just tried rebasing. every commit gives a different merge conflict.will look into it later again. reverted the rebase for now.', 'not sure if i did or not but it seems there are no conflicts with master anymore. :)any news from the discussion?', 'maintainer update: discussion is still ongoing. i expect to have more information next week.', 'alright. thanks for the quick reply malept !', 'any update? can i read the discussion anywhere or is it a closed discussion?', "siilwyn we've agreed to move to drop node < 4 support (an official announcement will hopefully be in the near future). and so i've opened #45 as a result.during that discussion. we discussed this pr in particular. some of the maintainers have reservations about accepting this from a conceptual point of view. kevinsawicki or zeke. could one of you chime in so i don't misconstrue what was said during the meeting?", "preserve added / non-standard vinyl file object properties. i have some custom gulp plugins that append properties to the vinyl file object. this is similar to what gulp-sourcemaps does. i notice this plugin generates a new file. but does not carry over any additional properties from the original file object. i might be missing something. but i don't see any harm in doing that. and it might make this play better with certain plugins. i imagine a simple `object.assign()` on the options passed to `new file()` in `preparefile` would work. with the contents being set after the instance is created. i can put together a pr if this is a desirable feature for this project.", "testmania. vast amounts of new features call for some more tests to make sure that we- know what we're doing- detect if those features are broken by a prstatus:- syntax error detection (olydis: review bad test cases - there is some incocnsistency)- consistent message processing (same even for parsing config file)- more standard source location syntax in console output- source locations for config file syntax problems (olydis: merging config blocks needs source map support)- performance improvements (less async. more cowbell)- uri tests for linux active (got rid of platform dependence by replacing `path.isabsolute`)- optimized travis ci", 'implementing this now.', '> implementing this now.w00t w00t!  :+1:', 'can someone update this issue\'s labels to reflect its "being implemented" status?', 'good catch. will close at the release.', 'fixes issue with maps flag not working. cli arguments seem to be handled differently in different environments. from within the tests (using execfile) all is well (therefore they\'re passing). however when using a standard cli (zsh) the structure of the options looks very different. do a dump of options while running tests (index.js ~:189ish after options is set) and you\'ll see that the maps key is present when the `-m` flag is set. however. if you run postcss as a package from a project. you\'ll see that the maps key is now missing. the main problem is the missing "maps" key when sending the options object to the `process` method. not wanting to make too big of a change i copied the options object back on the the `ctx` object to avoid any problems.all tests are passing except \'error invalid --config\' but that appears to be a pre-existing issue.', "i think it's webpack's es loader. afaik. there's no standard regarding this. according to standards you should use either this:```import { extend } from 'lodash-es/index.js'```or this:```import extend from 'lodash-es/extend.js'```it's purely up to bundlers how to handle this.", "jsnellbaker now i get the recursion mechanism. i thought at first it was another thing. now reading the snippet it makes perfectly sense.genegenie  ty for the answer.i'm using a custom creative based on the standard prebid code and the solution to my issue was a reference to the wrong parent frame.anyway thank you", "i agree. i'm glad you think that way.you might want to consider _always_ replace `fs.exists` in case you want to fix the original function signature issue (it's different from all other standard async functions. i.e. it has no `err` parameter and so `result` becomes the first one). if you haven't already. you can look up what's wrong with that. personally. it doesn't bother me too much. i'm just raising this so you can make a conscious decision.", 'ps: sorry. i did not notice that the added react scripts were not standard linting friendly', "how to compute shortest path with custom cost and elevation data for electric vehicles. dear all. i am looking help in order to compute shortest path with a custom arc cost function. in particular. i would like to add to the arc distance some other information which allow me to compute shortest path for electric vehicles. these are the steps i don't know how to achieve.-- given (supposed) that i can retrieve elevation data from open-elevation initiative. how to enrich the orsm graph? in which step and how i can provide this information to the standard osm data downloaded by geofabric?-- after that. in which function of orsm-bakend can i work on in order to provide my specific arc cost function to the shortest path algorithm? i would like to use the elevation data. the distance and some other information in order to modify the arc cost (e.g. the estimated acceleration).do you have any guided step to achieve this?thank you very much for the help.", 'thank you very much for your thoughtful and articulate response!  i generally think most changelogs are substandard.  but your changelog is an exemplar counter to the trend (or more precisely. what i _perceive_ to be a "trend" :stuck_out_tongue:).  thanks to you and all who have created such a wonderful changelog. and i hope it inspires others to make their own changelogs the best that they can.  cheers!  :d', 'this is not how this should be done. there is a bug in the `gremlingroovyscriptengineovergraphtest.java` test. please see how we do it in the. for example. `groovygrouptest.groovy` in `gremlin-groovy-test`. thus. instead of changing `graphprovider`. we need to change `gremlingroovyscriptengineovergraphtest` to use the standard model.', "i don't think we have anything to put in `data.maybe.properties` at the moment.are `data.maybe.relation.equality.setoid` and `data.maybe.relation.equality.decsetoid`wrappers around `data.maybe.relation.pointwise` instantiating the relation tothe one contained in the `(dec)setoid`?", "> i don't think we have anything to put in `data.maybe.properties` at the moment.`just-injective`?> are `data.maybe.relation.equality.setoid` and `data.maybe.relation.equality.decsetoid`> wrappers around `data.maybe.relation.pointwise` instantiating the relation to> the one contained in the `(dec)setoid`?yes.", 'note that you are not testing the *current* master of the standard library in the master of agda.', 'did you run the agda test-suite with the current master of the standard library?', 'looks like this is a very uncommon request - probably because the pattern is possible. even though inconvenient.', 'add a d.ts for package.json. that way. if someone imports it. they can access the known-standard npm entries.', "aluanhaddad. what do you think if i enforce in a new separate pr which makes `definitelytyped/angular` compliant to `tslint` settings of `definitelytyped` project? the folder is not under `tslint` currently. maybe it's worth to standardize that?thorn0. aluanhaddad. so. what do we decide and in which direction should i move? if i got right what you said - you suggest making a pr to typescript definitions instead of merging this pr to definitelytyped/angular. right?", 'what is it? could you describe more clearly?', 'basically the schema for `package.json`.  that way when i `const manifest = require("path-to-package.json")`. i get hinting.', "after sleeping on it my personal opinions are as follows:* good practice would involve using yarn or npm locks. so you wouldn't be getting a surprise unless you upgraded locally first. * making state readonly is how react is intended to be used. the documentation and examples confirm this. * the workflow where you don't want to use setstate is within your code base and within your own rights. you are correct that react provides forceupdate. but it's use is intended for causing a render when you are outside of the intended use case. thus. if you don't want to use state as intended that's fine. but at that point you don't need to use the instance variable state. in fact you can just use regular private variables. * yes this project is depended on by a lot of people. and yet thus far these are the only two complaints thus far making me think this is not a wide spread issue. further the issue raised about the global function can just be rewritten to take the generic differently (see linked typescript issue)given the above thoughts as well as the work arounds for non-standard react apps. i think readonly is correct and the only needed change for completeness is to update the life cycle methods to match."]