["andyday something is up with travis. `error couldn't find the binary (standard | snazzy) && nyc mocha`. tests pass locally.", "looks like the changes here are fairly small.  formatting changes make it difficult to identify real changes.  i think most (if not all) of this extra noise will go away if you merge in the latest master.  it has similar standardjs formatting changes.  once you've done this i'll take a look.", "feross did you reach to bittorrent inc ? making webtorrent as extension to bittorrent protocol would be huge step.the most important adopters are utorrent and libtorrent (rtorrent. deluge etc.). rest really doesn't matter. another thing. where is documentation of protocol which webtorrent uses with implementation details ?this is a must for adoption and i do not see any links in github repo or on webtorrent.io. you need to standardize webtorrent or you will see no adoption at all. if someone would like to implement it in c/c++ then where he should look ? what if he is not familiar with javascript ? in my opinion this is the main reason why you do not see any adoption besides people using your own lib.", 'begoldsm note that the docs actually say> to overcome this limitation an "x-ms-paths" extension was introduced parallel to "paths". urls under "x-ms-paths" are allowed to have query parameters for disambiguation. however they are removed during model parsing.i\'ll gladly add your practical illustration. though!> you must have a basic path without query parameters in the swagger paths block. all query param disambiguation must "overload" that basic path.well. not really/technically. it\'s just what we suggest since that way the swagger is as standard as possible... having the "basic path" in the `paths` block instead of `x-ms-paths` means one more method is visible to standard compliant tools...', 'i think "fix" is appropriate here. if our goal is emulating/mirroring the standard behavior. this gets us closer to that in a way it wasn\'t before.for `enterfullscreen` on the `html5` tech. if it\'s platform-specific. maybe it should have that as a condition? what happens without that call to `play()` in ios?yeah. i think that can probably be safely removed. based on my assumptions about browser usage.but heff\'s concerns are valid as well.', "pr feedback addressed in the latest commit.- added docstring to `allow(mode)` handler.- renamed `getuserid()` to `getrequestingwebid()`- returning `null` explicitly in `getrequestingwebid()`.- updated the test description strings- removed explicit testing for 500 errors- removed `.catch()` blocks in the tests.- added tests for utils/debrack()> the `allow` handler itself isn't tested but should be. it would be a good use case for a http mocking library such as nock. perhaps this is more of an integration level test?it's being tested on an integration level in `test/acl.js`.> are we running standard on the tests? i'd argue we should.yes. our `npm test` also invokes `standard` on the tests directory.> the lack of newlines between test cases makes them a bit hard to read for me.no prob. added more newlines.> the `documentfetcher` function isn't tested. since it's basicly just a web client. rather than write a bunch of tests for it. couldn't we use the solid web client directly?yeah. refactoring the `documentfetcher()` function is on my to-do list (it's used extensively in `acl-checker.js`. and tested indirectly in `test/acl.js`). writing tests for it is out of scope for this pr.", "whitecolor ah. sorry for that :) then. without going into the details let's accept that resolving from the root module doesn't always work. there can be valid use cases when it's not. however. the standard module resolution of node.js works. is there any reason of webpack not using it?", "i don't think so. as far as i can see. this is exclusively related to the new `module` script standard for browsers. everything is working as expected. other than `this` being undefined.", 'i think it would be best if empty reused other standard components instead of defining its own title. text etc...', "but we don't have standard components for this yet.", "imho the purpose of this pr is to add a new `<empty />` component. since the standards text and title components don't exist for now. they should be added in another pr without blocking this one instead.if we add subcomponents after this pr. it shouldn't be a breaking change but an internal change (like a previous pr #382 about adding intentmodal component for example). so the final user of the `<empty />` component won't be affected in any cases.", 'bring storage samples up to standard.. also added a script for cleaning up orphaned test cloud storage buckets.', "add to readme:  memory management. hey assaf.can you provide some standard guidance on memory usage as it related to zombie in the readme?ie. should browser.close() always be called? if it's not called. can it result in memory leaks? maybe also something that mentions node's maximum memory allocation / forcing garbage collection with expose-gc flag. etcthis might reduce some of the memory related issues that are posted here now and then", "the thing is. i don't run into memory issues with zombie. this is a task for someone who ran into a memory issue. and has the data to show what worked and what didn't.", "gotcha. i'll try to find time to do this.things to experiment with:- calling global.gc(); with `--expose-gc`- calling browser.close()let me know if you have any other suggestions. will spend more time investigating", 'note that `browser.close()` just closes the current window. i need to deprecate this method. use `browser.window.close()` instead.', 'nice! thanks for coming with a pretty clean way to finally fix #3 (which has been open for almost 2 years!!)my only concern is forcing the use of "extra" for the name of the http/websocket tracker parameter. is this part of a bep or some standard? if not. i\'d rather just let the user specify any parameter names that they want. just add the params the user specifies to the params dictionary using the `xtend` package (already in `package.json`)also. this needs documentation in the readme.', 'i studied `scriptelementfactory` and am thinking that api is poorly designed. here are my concerns:```protected class scriptelementfactory {        private final stargraph graph;        public scriptelementfactory() {            this.graph = stargraph.open();        }        public vertex vertex(final object id) {            return vertex(id. vertex.default_label);        }        public vertex vertex(final object id. final string label) {            final iterator<vertex> vertices = graph.vertices(id);            return vertices.hasnext() ? vertices.next() : graph.addvertex(t.id. id. t.label. label);        }        public edge edge(final vertex out. final vertex in) {            return edge(out. in. edge.default_label);        }        public edge edge(final vertex out. final vertex in. final string label) {            return out.addedge(label. in);        }    }````scriptelementfactory` should be a `graphwrapper` so that the apis are consistent.```scriptgraph.addvertex()scriptvertex.addedge()```its weird that you diverge from the standard pattern for seemingly no reason except the `vertex(id.label)`-method logic.', "i guess we shouldn't have log4j be a standard dependency for `gremlin-core`. given use of slf4j. but i'm not sure making it a test dependency is right.  we package log4j by default in the `gremlin-console` and `gremlin-server`.  maybe those slf4j implementations should be added to those project directly and they are made a test dependency here?", 'pluradj that was a nice body of feedback - thanks.  i\'ve cleaned up and added your suggestions.  deploying a fresh snapshot now.okram there really isn\'t any documentation to "re-publish". i only made one change to our generated asciidoc which added a note about "archetypes" to the reference docs.  the other asciidoc i have in this pr is just readme\'s that get generated into a example project when the archetype is used. i could see where a tutorial could be built around an archetype. in the more complex thoughts you had for "examples" i think that would be the way to do it.  write a tutorial in our standard pattern then build an archetype to support it.', "klis87 i think those are separate issues. fonts load (you can check repl example). if boxes are rendered in special characters. that means the font you're picking does not have that unicode glyphs on it. it should fallback to some standard font though. provide an example and i'll be happy to research", "i think this may be a mistake on my part.the example which i thought was a single question isn't our standard format - as it has a heading. some text. and then the legend.the example is probably correct. but we're missing an example of a page-per-thing validation pattern which is likely the *most* common page. i'll raise an issue for that instead.", "i agree that this is bad. let's document how a library can be used. not enforce specific usage.", 'is there a way to make type parameters for `.extend` so typescript knows what class is returned. rather than defining `any` as the return value for `.extend`?', "despite decorator syntax is cool. i still think using hoc like connect in a standard way is a better practice.1) it modifies the type of a class a goes against decorator spec.2) connect is not a decorator at all. it's a hoc.3) it breaks the portability of the code by having a different syntax for stateless and stateful components.so i would like to say please. don't provide a definition that allows dev to use it the wrong way :)", 'add typings for standard-error and standard-http-error packages', 'for future reference consider using `dts-gen`:```shnpm install -g dts-gennpm install -g standard-http-errordts-gen --dt --m standard-http-error```', 'use standard code style. remember to use standard javascript code style. you can find informations about it [here]( it is super easy and comes with a node.js module. `npm test` should check for violations but that does not seem to work properly as i noticed.', '`npm test` is working again. travisci will complain about bad coding styles. you have been warned ;-)']