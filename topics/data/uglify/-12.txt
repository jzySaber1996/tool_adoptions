['allow to supress uglifyjs warnings. **what kind of change does this pr introduce?**feature**did you add tests for your changes?**yes**if relevant. link to documentation update:**n/a**summary**fixes #1496 by adding a `warningsfilter` function to options for the uglifyjsplugin that decides which warnings should be shown**does this pr introduce a breaking change?**no**other information**the test setup for uglifyjs is a bit messy so i just hacked in two tests. i didnt feel like making sense out of it.', 'thanks. please also update the documenation.', "has anyone found a fix for this?simply doing `devtool: 'source-map'` does not work for me. i'm using uglify and babel w/ webpack", 'hope this may help you dubrowgn wchargin', "wegry ```js// dropped by rollup but not by uglify because of `this` usageconst oldstyleclass = function (b) {  return {    b.    c: this.b + 1  };}```> one could argue thorough linting will catch the second case. unless you're dealing with sub-par code generation from a compiled to js language.or one could argue that a better solution would be to simply avoid using `this` and by extension. avoid using classes except where mandated by frameworks. classes have introduced exponential complexity and confusion to javascript while at the same time being. themselves. so fundamentally weak (not supporting multiple inheritance or declarative metadata) as to necessitate even more complexity just to make them a half way viable construct. factory patterns are preferable for so many reasons and yet we in the javascript world have become addicted to a class feature that pales in comparison to what is provided by other languages while having had better alternatives in javascript for almost 2 decades.what i dislike most about classes. which by the way can be a very elegant in certain situations. is having to explain. over and over and over and over again. to people either learning javascript or people learning typescript. is that classes are not types.next time you see someone trying to use a class as an interface. give them a good talking too.", 'removing the --progress option worked for me', "these are non fatal but i think it's because we reduced transpiling and uglifyjs doesn't support it. i'll see what we can do. there's an uglifyjs harmony branch we might be able to use.", '"could this be a case of docs-could-be-better? the readme says ""...using the --prod flag in ng build --prod or ng serve --prod will also make use of uglifying and tree-shaking functionality"". which is true and good. maybe it should also use the more general word ""minification"" in addition to (or instead of) the specific ""uglifying""? that way someone searching the docs for ""minifi"" would find it."', "does --prod only add the hash and use the environments.prod file? if not. then this isn't a good solution. because they would want the other advantages of using --prod such as the tree-shaking and uglifying.", 'vapits did you manage to fix this issue? or know of any workarounds (if there a way i can not uglify during ng build -prod)?', 'httpdigest you can run babel transpiler before uglify js. in this case everything seems to be fine.', '"is there a way to configure the uglify processing to be less aggresive in angular-cli?we are dependent on class names for certain functionality. and those gets mangled into e.g. ""e"" when running --target=production.i would really like to use production build. as that generates unique hashes for bundle files that are included and other optimizations. but i need to maintain the class names for some types. is there a way to override?"', 'they are not actually warnings. they are a list of uglifyjs optimization actions.', "fyi: uglify-js is was 880k vs. 698k for closure. so quite a bit bigger... didn't compare the gzip sizes. which i probably should have.", 'minify distributed bundle. use uglify to minify the output of browserify.']