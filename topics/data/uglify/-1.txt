["hi lyquocnam.this error is produced by uglifyjs whenever it tries to 'uglify' a function that has been designated as an asynchronous function.depending on how the webpack setup is defined for the `quasar-cli`. you will need to run this bundle through a transpiler such as `babel` first. it looks like that function is being required in wholesale from rxjs somewhere.note: offending function in your prod bundle;````javascriptasync function assertthrowsasync(test. error = error. contains = '') { ... }````", "ok i think i have figured it out. webpack is using the `module` source from `rxdb` when being built. this results in webpack just using the source files rather than the dist files.this means the async/await stuff just gets put into the resulting bundle. and then uglify-js gets confused when it sees them when attempting to uglify the source.also. if babel (or similar) is running within the `quasar build` step. then it will be ignoring `node_modules` (presumably. i haven't checked) and voila. there's the issue.", "fergiemcdowall 1) it is alreasy minified by `uglifyify`. i don't believe that `minifyify` will do better.2) yes. i need only searching. i'll try to follow your advice and write here about my progress.", 'yes. i see now that `uglifyify`also minifies: "a browserify transform which minifies your code using uglifyjs2".', 'still lots of ways to make it smaller. like for example `object.assign` instead of `_.defaults`. and browserify transform magic with uglifyify', 'adds mocha. browserify. and uglify as dev deps in the package.json. mocha. browserify. and uglify seem to all be used for development. this change just adds these packages to the `package.json` as dev dependencies instead of assuming they are globally installed.', 'ditch grunt. grunt for a 180-line library may be overkill. since moving from qunit to mocha. the only functions grunt fulfills today is (1) jshint. and (2) uglifyjs compression.my suggestions:- include jshint testing as part of the test suite. i think this is great because any open prs will be tested against the test suite via travis. hence checking pr\'s against jshint as well. this can be done via `scripts: { test: "jshint ractive-adaptors-backbone.js && mocha" }` or mocha-jshint.- use `npm run prepublish` to minify the js file. the prepublish hook is the npm standard for invoking build steps. this is done by adding `{ scripts: { prepublish: "uglifyjs -m < index.js > index.out.js" } }` to package.json.- finally. remove dependency on grunt.', '> the problem caused by uglifycan you elaborate?', "that's exactly my problem. my full project (using the same webpack config) fails but without all the source code it works normally. i don't know how to figure out what about the project source code causes uglify to fail in production.", "for me everything also works correctly with this plugin. i have defined env vars in a separate `env` variable and then have the node_env accordingly and its value is production as intended ```new webpack.defineplugin({      env: envvars.      'process.env.node_env': json.stringify('production')    })```and ```new uglifyjsplugin({      uglifyoptions: {        ie8: false      }.      parallel: true    })```", 'outdated uglify plugin or stuck test?', 'tschaub `serialize-javascript` uses uglify and compression plugin for cache ident. can you raise the minimum allocated memory? or you have many modules or memory leak', 'tschaub also can you disable `uglify` plugin to ensure problem in plugin?', 'evilebottnawi - i think disabling `uglify` will fix things.  before seeing your messages above. i modified `webpackoptionsdefaulter.js` with `cache: false` for uglify.  and the build succeeded (in 414090ms).  this is promising.i can reenable the cache and dump the `task.cachekey` in a bit (off to a meeting now...)', "i'd like to do the same. as the tree shaking cleanup is only done by the uglify-webpack-plugin. is there a way to let the build in dev mode. manually add the ugluify plugin and configure it to only do dead code cleanup (no mangling. no compress) ?i search how uglify is configured in prod mode (or at least with the --optimize-minify option) and it seams to be all the default options only source-map is updated.", "sylvainlap we're you able to figure this out?", "ilanbiala i meant i agree with you. i don't like iifes at all. i dislike how your code starts indented vefore you even write your first line. as long as you concat before you minify and uglify. it doesn't make a difference.", "closing as the pr fixing this was closed. i don't think there's a big driver to fix this since it's not affecting the packaged build", 'a use angular cli but i have no ` "uglify-js"` in my `package.json` to replace. do you know how to deal with that situation ?', 'you should be able to just remove `node_modules/uglify-js` and then `npm install`.', 'feat(angular/cli): support es2015 target. the cli will now prefer es2015 modules and use `uglify-es` for an app when the typescript configuration uses `"target": "es2015"` or greater.you can change `"target": "es2015"` in the root `tsconfig.json` and it will be picked up by the other tsconfigs.fix #2907fix #7532', 'thanks for this? is there a plan for merging this soon ?', 'i bow!', 'i think a lot of issues on angular repo should be closed by this. and even more on s.o.', "agreed. but that wasn't the point. i was trying to test whether there exists a scenario in which tokenization yields a size improvement. or if gzip _always_ handles string minification better than uglify could. the tests revealed that in fact. tokenization is always more effective than gzip. for a next step i'll try to prototype a string minifier and see how it performs for something like jquery.", 'hmmm. you\'re right. i thought it was a bug in uglify because the chrome console\'s strange behaviour on a breakpoint here tricked me:> a = (e = session.get("step"). e)>   null> e>   undefinedbut now i see that such strange behavior is a bug in chrome:> e = 123>   123> e>   undefinedso who knows what\'s going on here. but i can fix it by checking against null as well as undefined. and it\'s not uglify\'s fault.']