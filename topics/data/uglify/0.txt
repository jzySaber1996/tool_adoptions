['bfred-it yes. set `optimization.minimize` to `false`. add `uglifyjs-webpack-plugin` to your project deps. use this one instead of webpack??s builtin.', 'if you set `minimize: false` you won??t have double minification. what i don??t understand is why not make `minimize` accept a `uglifyjs-webpack-plugin` config object.', 'because `minimize` tells webpack to use `optimization.minimizer` to create the minification plugin. currently it creates uglify??s one but one could set it to closure or babili.', 'ooflorent should accept. otherwise. how to configure uglify plugin?', "since this has been implemented in webpack 4 (#next branch). and landed. i'm going to close and lock this issue. please submit a new issue. with a reproducible case and repo included if you believe there is something specifically that is not getting shaken by _webpack_. otherwise please submit issues to relative projects (uglify. etc.). where appropriate.", 'i was using an outdated structure. the config needs to be wrapped with `uglifyoptions`:```jsoptimization: {  minimizer: [    new uglifyjsplugin({      uglifyoptions: {        mangle: {          keep_fnames: true.        }.      }.    }).  ].}.```sorry for spamming.', 'in my case. the problem was related to mangling. setting `mangle` to **false** solved it (both `uglifyjs-webpack-plugin` and `babel-minify-webpack-plugin` have that option).', "damianobarbati for the most part the online docs should work for you. the main changes for me was that you will need to put your uglify plugin into an optimization config since it is no longer handled as a regular plugin.  second you use modes instead of environment for configuring development vs production. so i am capturing the mode from argv to determine which plugins to load. that was all to have it working. you can look at the docs for exporting a function instead of an object to get hold of argv for your mode. i am responding but this doesn't have anything to do this issue.", 'reeganexe if i remove `new uglifyjsplugin` from config then how can i customize uglify options? (webpack4)', '"damianobarbati. you might pass it as `minimizer` option rather than push it as plugin part.```jsconst configs = {  mode: ""production"".  entry: ""./index"".  output: {    filename: ""bundle.js""  }.  optimization: {    minimize: true.    minimizer: [      new uglifyjsplugin({        sourcemap: true.        uglifyoptions: {          // ...        }      })    ]  }};```"', '`uglifyoptions: { compress: { inline: false }}}`', 'evilebottnawi `yarn which webpack` outputs the path to the local webpack node_module.same for `uglifyjs-webpack-plugin`', '`yarn upgrade uglifyjs-webpack-plugin`', 'you can use the `optimization.minimizer` option to configure uglifyjs:``` jsoptimization: {  minimizer: [    new uglifyjsplugin( ... )  ]}```', 'would be nice to uglify (or not) html and css by simply inspecting `mode`.until then i have to keep on using different config files for dev/prod environments...', '"**.babelrc** :```{  ""presets"": [    [""stage-2""].    [""env"".  {      ""targets"": {        ""uglify"" : true      }    }]  ]}```"', 'if webpack will not be uglify already minified sources. it be more faster =)faster!', "just digging further on this one. incorrect inlining occurs when one of the function's arguments name clashes with another const defined in the scope where that function is used.for example:```const bar = 'qux';function foo(bar) { return bar; }foo();```seems to cause the `typeerror: assignment to constant variable.` as the argument name bar clashes with the const above.also found out that inlining simple functions seems safe (inline: 1).i now use the following:```new uglifyjsplugin({        uglifyoptions: {          ecma: 8.          compress: {            inline: 1          }        }      })```", 'did you have any non-standard uglifyjs configuration? i. e. `comments: false`', 'hmm i think we need to remove this dep and upgrade uglifyjs-webpack-plugin instead.', 'deps: upgrade uglifyjs-webpack-plugin. closes #677', 'filipesilva how can i make this work so that aot builds use es2015. but `ng serve` during development uses es5?', 'pgrm good question. i am trying to figure out that aswell... (as ng serve does not seem to work with es2015)', 'filipesilva it would be really useful to be able  keep the correct class names at runtime in certian dynamic scenarios (for instance if what component to display is decided at runtime based on a string value provided by an external entity such as a workflow engine etc.).', 'what about `ng serve --aot`?', "misaunde i do remember in the old and forever long *ng serve is slow* issue. that people got told. to not use `ng serve --aot` because it's slow. also. i think you can't run unit tests in aot. so i'm wondering what angular 5 will bring in this regard. because i'm reading everywhere. that aot will be there by default. but an issue regarding aot in unit tests is still opened. maybe filipesilva could shed some light on what is the best approach now. and how will that probably change with angular 5?", 'fix(angular/cli): disable comparisons feature in uglify compression in prod. see #5804', 'i signed it!', '"i have no ""uglify-js"" in my package.json to replace what should i do ??"', "uglify is in the right here; you've saved one character.the fundamental problem there is that racer wants to uglify an _expression_ (function expression). whereas uglify is designed to uglify _statements_ (and function declaration statements must have names).should uglify have a function to uglify expressions rather than statements?", 'well. uglifyjs is designed to uglify programs. and a js program is a sequence of statements.but yeah. we could have an option to parse expressions.', "no. commonjs builds generally look like this:``` jsrequire.define('uglifyjs'. function (require. module. exports) {  module.exports = ...})require.define('underscore'. function (require. module. exports) {  module.exports = ...})```the idea is that a builder may want to use `new function('require'. 'module'. 'exports'. 'some string body')` to defer evaluation (since the string body is just a file. so it should really be just one. large string). however. uglifyjs won't minify it right now (as it's a string).``` jsrequire.define('uglifyjs'. new function('require'. 'module'. 'exports'. 'module.exports = ...'))```yes. it's an edge-case. but i'm just throwing it out there. hopefully you get the idea. though.", "thanks jaime. i'll keep this in mind if i still get around to updating uglify in our rhino based build scripts before just switching to node like everybody else.", "`(echo -n '// '; date; uglify input) > output`. why would you ever want uglifyjs doing this for you?", 'as a result of this change. the actual reason for the error is never output when using the cli. making it rather difficult to debug the issue when using the cli.', 'r.js embeds uglifyjs2 so having a command line option is not valuable in the same way', "diasdavid unfortunately. you're essentially saying that `create-react-app` users won't be able to use js-ipfs. and `create-react-app`. on its end. won't support es6 uglifying. it's sad.", 'this only happens with a minified build of ipfs (`dist/index.min.js`). will try to provide a simple test case. but this sounds like uglify (or webpack) issue.', "watchify grunt task. this adds a `grunt watchify` task as requested by longouyang. when changes are detected this only recompiles `webppl.js`. it doesn't run uglifyjs. (which would be much slower than the incremental compilation step.) packages can be included in much the same way as with `grunt compile`. e.g. `grunt watchify:webppl-timeit`.i've also split the `compile` task into `browserify` and `uglify` tasks. i thought that been able to run `uglify` after `watchify` might be useful.", '"i\'ve added something to ""compiling for browser"". i didn\'t add anything to the ""installation from github"" section as that didn\'t already mention installing `browserify` or `uglifyjs`. what we have isn\'t perfect. but i figured it was good enough -- see what you think."', 'makes sense. thanks!']