["can't see anything obviously wrong - seems like the same one-liner as `grunt-contrib-uglify`", 'i think the culprit is the uglifyjs plugin. i do not use the commonchunks but have the same issue. removing uglifyjs works. then a sourcemap is generated again. is there an option to run the sourcemap command before the uglifyjs?', 'cansin what if you minify through an uglify loader instead of a plugin? that would solve the order issue. another way would be to hook into the process through a plugin and calculate a hash then perhaps. you can find a couple of third party plugins that do something like this already.', "do we already know why this is not working? is it because the default export exports everything. which means evaluating everything?even then. shouldn't side-effect-less functions then be removed by uglify?i just would like to understand how to write code so that unused exports without side-effects are not included in the final bundle...", "with webpack being blackboxed. it could potentially be swapped out for rollup or something else entirely in the future.  webpack just happens to be the _internal_ build engine that the developers decided upon at this point in time.  so using the cli or not using the cli solely based on webpack usage is probably not the best of ideas.  and realistically (or maybe ideally). you shouldn't know the difference if it was swapped out in the future.as to tree-shaking. rollup does seem to do a better job.  however. the uglifyjs method employed by webpack (which is currently used for cli production builds) seems to perform well enough.  combine that with the added infrastructure provided by webpack and the scale tips in its favor.  (atleast for now.)", 'might be. but then the documentation needs to be updated."all builds make use of bundling. and using the --prod flag in ng build --prod or ng serve --prod will also make use of uglifying and tree-shaking functionality."', "personally i think the most practical avenue is to always uglify/minify scripts. but there have been talks of having an alternative way of pulling in scripts in prod (e.g. from a cdn). that's definitely a feature for the future though.", 'production build without compression. is there a way to make a production build without compression. or at least without uglifying the code?', 'as far as i know `ng build` will build app without uglyfing and compression.', "that will do a dev build so there will be other differences as well. for global stylesheet handling. you're going to get a js bundle instead of css.  output filenames will have no hashes.  probably some others as well.also. your builds will be significantly larger without the minification step.", "basically i want the js bundled. but no uglifying on the index html or the css. grunt and gulp let me have full control over what is and isn't done. i wasn't sure if there was a way for me to control with angular cli does.", "the cli is meant to be an opinionated build system.   so if you're interested in full control. it's probably not what your looking for.in regards to what you want. index.html is not minified or compressed currently.  component css is bundled with their respective component's js.  global css will be combined and minified in production builds.  (in development builds they will be combined into a js bundle).", "what clydin said is very accurate. i can also say that as far as future plans are concerned. we aren't looking specifically at adding this toggle but it might happen if we end up giving more granular build control overall.", 'you\'re right. webpack\'s tree-shaking in general would probably have a limited benefit in that situation.yes; there is plenty that could be improved:  rollup has better tree-shaking ability. closure in advanced mode has advantages over uglifyjs. etc.  these (or something akin) will most likely be integrated as the system moves forward.but personally. i think that outside of presentations and demos. super-optimizing the "hello world" scenario has limited utility overall.  real world applications won\'t benefit; they will be using multiple additional libraries and most likely leveraging a majority of es2015+\'s capabilities.  and with current browser improvements. the polyfills can be incrementally dropped moving forward.', 'sourcemaps for production environment . is there a way to generate source maps for production? i have a bug that only reproduces after uglify/mangle']