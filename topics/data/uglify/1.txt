['hey.yeah. i can refactor the build process to transpile the individual files to `/lib` without uglifying and remove the source-map.thanks! :)', "in my opinion uglify shouldn't remove these comments by default. removing license comments isn't that good.", 'maybe `uglify-js` was keeping `/*!` and `uglify-es` is not. we could set `comments` to preserve the old behavior.', "estaub i think better set this option in uglify plugin. not webpack. it is allow don't change webpack code when issue will be resolve", 'webpack-bot move webpack-contrib/uglifyjs-webpack-plugin', 'please can the note about not using `-p` be added to the readme? bootstrap frameworks and webpack example projects all over the net appear to use `-p`. the fact that using it in conjunction with `uglifyjs-webpack-plugin` will always cause an error would warrant a more public note about it. imo.', 'bump uglifyjsplugin to remove tapable warning. <!-- thanks for submitting a pull request! please provide enough information so that others can review your pull request. -->**what kind of change does this pr introduce?**bugfix**did you add tests for your changes?**no**if relevant. link to documentation update:**n/a**summary**when running unit tests there is a deprecation notice.this pr bumps uglify plugin to remove this warning.**does this pr introduce a breaking change?**no', "evilebottnawi the error can be re-produced without using uglify plugin. but have tried set it up with `keep_fnames. keep_classname. mangle: { reserved: ['nerror']}` as well. but name still mangled", "i had the same problem. i tried configuring the uglifyjsplugin plug-in. but it didn't work", 'i retried this morning. same problem.manually downloading uglifyjs with the provided command worked.', "sylvainlap i'm closing this issue. feel free to reopen if it's sill an issue.", 'fabien-chevalley did you find any solution ? i applied the sugestions above but seems like uglify-js is still used', 'the pr worked well. hope it will be merged soon', 'i see what you did there.  in the first 5 iterations you\'re minifying only jquery.js. but in the rest you mix in jquery-ui too.  it behaves that way because uglifyjs tries to optimize the names it generates for local variables depending on number of occurrences for "unmangleable" characters.  for example. the word `function` appears quite often in js code. and we can\'t change this fact -- therefore the letter `n` for instance is likely to appear more often than others. and if that\'s the case uglifyjs will prefer to use it for naming variables.  this of course is influenced by strings too. because they add unchangeable content.you can do a small test. edit `tools/node.js` (from the uglify-js source) and search for `compute_char_frequency()` -- comment out that line. and re-run your test.currently there\'s no api to reset the char frequency counters. but i can easily add it.', "indeed - the frequency of letters in one file probably shouldn't matter when compressing another file... unless that's a feature for when you uglify separately and then concat and gzip.", 'is there any chance to fix this?', 'should we not aim to make the code easily optimized with existing tools like uglify and tree-shaking rather than spending efforts modularizing everything? even if we modularize everything. dead-code elimination would remove more code from the bundle than we could do when creating multiple modules.remember. we used to do this with libp2p bundles. but in the end put them together as they were not very heavily used separately. although. i agree that the http api/gateway should not be bundled by default. but rather a separate module that would include `js-ipfs`.', 'sorry to highjack this issue again. but why was babili removed in favour of uglifyjs?']