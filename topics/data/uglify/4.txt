['as lukesheard mentioned. you need to replace "process.env.node_env" with "production" and then uglify the code after that. closing. its working as intended.', 'did you run a npm install? (you can also force the install of uglify with npm install gulp-uglify)', 'cxyxc looks like `uglify-es` is more slow than `uglify-js`', "thanks for answer.sorry. i set `mode: 'none'` and `optimization.minimizer: [...]`. but not set `optimization.minimize: 'true'`. so uglifyjsplugin not run and then complie quickly.  in webpack4. i find  dir `.cache/uglify-js-plugin` in `node_modules` after complie.  it is no use for me. how to turn it off?", 'sokra good catch.mgroenhoff also tree shaking it not job of `uglify`.', 'the hooks are only useful if you know what you are looking for. e.g the name of the method "calling". e.g `hooks.call.for("calling")...` however if you want to hook all calls in the module this can\'t be done this way.also i was assuming the `evaluate` hook meant walking into an expression? if this is not the case what does "evaluating" mean in the context of parsing and walking the ast ?---also an unrelated question. does modifying the ast (from `hooks.program`) get propagated down stream. so e.g babel/uglify will pick up changes ?', "i've been trying to track down why this is slow. and in doing so. i did an `npm doctor` which reveals a permissions problem in `.cache/uglifyjs-webpack-plugin` which was weird to me. since i wasn't using that plugin...", "to explain our need for this a bit. we use webpack for our main bundle. but also need to process each language files individually (i.e. an entry point for each lang file). each language file is a simple es6 file that imports other files. each containing lang strings. our sole need for these lang files is to copy the generated bundle to a new location. rename them to include the hash for cache-busting and uglify. this is all well within the purview of webpack - it's very straightforward to set up (go webpack!) - so we figured it would be ideal. however. ultimately we need to consume the file as a simple json object because it's asynchronously loaded by the client-side code. since there's no way to remove the bootstrap code wrapping the content we had to get a separate process using grunt that handles this portion. pity!", 'ah i tried again and the uglifyjs-webpack-plugin change is actually not needed at all.sorry for bothering...', "emaradevska. in webpack it looks something like this:plugins: [new webpack.optimize.aggressivemergingplugin().        new uglifyjsplugin({            sourcemap: false.            uglifyoptions: {                compress: {                    sequences: true.                    dead_code: true.                    conditionals: true.                    booleans: true.                    unused: true.                    if_return: true.                    join_vars: true.                    drop_console: true                }.                mangle: {                    //except: ['$super'. '$'. 'exports'. 'require']                }.                output: {                    comments: false                }            }})]", 'what about:``` sh$ uglifyjs -b foobar.js$ unexpand -t 2 foobar.js```', "it should work by default. do you have example code that doesn't work?", "uglify doesn't accept directories as inputs. i have a lot of files i want to uglify but i can't seem to figure out a way to feed a directory into the uglifyjs so that it can minimize all of the files in theream i missing something?", '`uglifyjs direcory/*.js --arg1` should do the trick.', "rvanvelzen thanks. this seems to work but i can't get `./**/*.js` to work with nested directories.. i'm kinda new at this. so i'm not even sure if this is possible", "changing uglify config to support ipfs make it quite sad from the dev experience perspective. especially if you're using a tool like create-react-app in which you don't have access to the webpack config (and ejecting is not an option). may we reopen this issue until we have a definitive fix?"]