['`--sourcemap` has been changed to `--source-map` in angular 6', '+1we solved our problem by copying angular/cli into it\'s own directory and then including it in package.json like:`"angular/cli": "file:angular_cli".`hope this helps someone in the future. it\'s not ideal. but at least it works.', 'support the spidermonkey ast with the node.js api.. i did a search for this. but didn\'t find anything. sorry if this is a duplicate.so. i\'m writing a compiler for a language that compiles down to javascript. rather than generating the js source code myself. i think it\'d be easier to generate the spidermonkey ast and then use another tool (like uglifyjs) to get js source code. including a source map.so. i would like the following to work:```var uglify = require("uglify-js")var foo = { ... } // spidermonkey ast. as a javascript objectuglify.minify(foo. {  spidermonkey: true})```similar to the existing `fromstring` option. the `spidermonkey` option would say that the input is a javascript object representing the spidermonkey ast.i can use escodegen (and esmangle for minification) for this. but i think uglifyjs is nicer.also. it would be nice to have the `beautify` options too. so my compiler can output either nicely-formatted js. or highly-minified and compressed js.', "there you go.  if you pass `spidermonkey: true`. as per your example. then it'll interpret the first argument as a spidermonkey ast.note that i didn't test lately the compatibility with this ast format.  if you find any problems please file issues.", 'ah. thank you so much! excellent job on uglifyjs.', "`global_defs` is not listed under `compressor options``except` is not listed under `mangler options``prefix`. `enclose`. `expr`. `wrap`. `export-all`. `self`. and `lint` don't seem to have an equivalent with `uglifyjs.minify`. though i probably won't use any of those. so no biggie.also. i'm not sure how `screw_ie8` works... does it really have to be set on `compress`. `mangle`. **and** `output`?", "that's fine. but my comments about the lack of documentation in the readme still stand. even if it was something as simple as this. it would be very helpful:## mangler options...- `except` is the same as `--reserved`## compressor options...- `global_defs` is the same as `--define`## beautifier options...- `comments` is the same as `--comments`", "true. that.  i'll update the readme.", 'i have also been trying to use the readme.md file of the project and it is still in error more than a year on.', 'yes it would be definitely good to have an option for preserving function expression name. currently. i have modified figure_out_scope (scope.js) to pass back the names which i add back as exceptions on mangle option in (uglifyjs).', "i will rename the option to `sourcemapembedsources`. this will create a mismatch with grunt-contrib-uglify though. regarding the `--in-source-map`. when you don't set `sourcemapembedsources` and provide a source map with embedded sources as an input. my code will not run and will not harm `sourcescontent` that was copied by uglify from the input source map.on a related note. do you know how to bring mishoo's attention to this pr? he's been quite active in this repo but seems to ignore this pr and related bug report.", 'hi mishoo. i am also running into the same error. recenlty we upgraded our minifying to grunt and uglify and having the issue on ie. i saw the issue closed but what is the solution? thanks and appreciate your help', "rangeerror: maximum call stack size exceeded. i'm getting this error when i run```uglifyjs build/someproject.js -o build/someproject.min.js --compress```any idea why?", "has anyone else been able to follow the notes here and get uglify to work ? adding```const uglifyjsplugin = require('uglifyjs-webpack-plugin');...    plugins: [        new uglifyjsplugin({            compress: {                unused: false            }        })    ]```to webpack.config results in```uglifyjs plugin invalid optionsoptions['compress'] is an invalid additional propertyvalidationerror: uglifyjs plugin invalid options```", "try:```jsconst uglifyjsplugin = require('uglifyjs-webpack-plugin');...    plugins: [        new uglifyjsplugin({            uglifyoptions: {              compress: {                  unused: false              }            }        })    ]```", 'it would be better if ipfs just worked<sup>tm</sup> with uglify defaults.']