['sokra question on this issue; i have an `index.js` file which exports { someclass } from `./someclass.js`. and { somefunction } from `./somefunction.js`; if i `import { somefunction }` from this index. i still see the class defined in the pre-minified bundle. thus the uglify issue comes into play.is it possible for webpack to simply not include files which contain no explicitly imported modules? i never explicitly imported the class. yet webpack still wants to include the file. and uglify throws up. i think the tree shaking problem could be mostly avoided here at the webpack layer. you might still have non-optimization issues where the file contains multiple exports. but as of now afaik there is no way to get tree shaking working with classes.i was trying this with an es5 transpiled class first. but even if `someclass` is defined as an es6 class export. it still shows up in the pre-minified bundle.', 'uglifyjs introduced the `pure` annotation. typescript (or any transpiler) can help uglifyjs to detect side-effect free code by generating code with this annotation now.', 'what does "evaluated" mean? i assume webpack is evaluating whether the code is included in the final product. but is this specific about having uglify evaluate?without this the whole idea of tree shaking seems rather fragile and doesnt do whats expected unless you follow very specific semantics. if thats the case then we would need even greater gates. like "global code is prohibited in es6". including static initialization.', "i dont recommend this approach for the problem at hand. `sourcemapdevtoolplugin`'s responsibility is more on the actual support of this feature - rather than how it's configured.last i checked. `uglifyjs-webpack-plugin` (which is what is added when u use `--optimize-minimize`/`-p` option) is restricted to sourcemapping when your `devtool` value is `source-map` or `hidden-source-map`. that caveat aside - i recommend solving this in your webpack config; by setting the `devtool` option. or. by introducing your own plugin which performs this for you.", 'had the `"mappings":"aaaa"` issue too. fixed by changing production source maps to `source-maps` and enabling `sourmap: true` in uglify. before i had sourcemaps set to `cheap-module-source-map` which didn\'t work.', 'if you want to uglify it you will need to either transpile it to es5 using something like babel. or use the harmony branch from uglifyjs as we do. the default installation of uglifyjs sadly does not have support for es2015 yet.', "they everyone. i lost a few hours today with this issue. i was finally able to get it working with freezx  comment. i ran into this issue because of a deployment requirement with heroku. heroku needs to have a grunt task called <i>heroku:production</i> for a production deployment. i had the same issue of having a blank landing page.i was finally able to get it working by adding the following env:development code to my grunt file.``` javascript...    env: {      development: {        node_env: 'development'      }.      test: {        node_env: 'test'      }.      secure: {        node_env: 'secure'      }    }....grunt.registertask('build'. ['env:development'. 'lint'. 'loadconfig'. 'ngannotate'. 'uglify'. 'cssmin']);grunt.registertask('heroku:production'. ['build']);```i hope this helps out someone else.", 'fyi:noticed this in wikibundling: all builds make use of bundling. and using the --prod flag in ng build --prod or ng serve --prod will also make use of uglifying and tree-shaking functionality.seems it does seem to work for me in prod.', 'added section on difference between building with or without prod flag. my team spent a long time figuring out why our code broke when building our project with the `--prod` flag compared to when we did not.since we don\'t know much about the build process in angular-cli we did not know what the real difference was when using the flag.we finally found out that `constructor.name` did not work when building prod.therefore this pull request contains a warning with example and a "difference" section.i know that tree shaking is done and uglifying. is there more that could be added?', "we found a contributor license agreement for you (the sender of this pull request). but were unable to find agreements for the commit author(s).  if you authored these. maybe you used a different email address in the git commits than was used to sign the cla ([login here]( to double check)?  if these were authored by someone else. then they will need to sign a cla as well. and confirm that they're okay with these being contributed to google.<!-- need_author_cla -->", 'clas look good. thanks!<!-- ok -->', 'perhaps a lint warning should be added aswell ?', 'btw. maybe need add something like this:> -- aot flag is enabled by default with a production build', "i dont understand why uglifyjs can't parse this character while targeting es5 in my code yes i use this chatacter through my app but donno why getting this error", 'ah. i see.  that almost works:```echo \'console.log(test)\' | uglifyjs2 -cd test=\'"a;b"\'- console.log("a;b")```there\'s a bug currently if you include a comma. but it\'s just the command-line parser. nothing deep.  i\'ll fix that.also note that you need to double the quotes (the first level is dropped by your shell).', "if statement body with empty return errors out.. when minifying this code. with. -c -m``` javascriptfunction foo(bar) {    if (bar) {        return;    } else {        return 1;    }}```uglify2 errors out with:       /uglify-js2/lib/transform.js:202```   self.consequent = self.consequent.transform(tw);   typeerror: cannot call method 'transform' of null```", 'i know. it works fine for me. however i do not know how other people use my libraries. i think this is important. for example if i use 2 libraries which are both already minified by uglifyjs2 and now if i minify them again there will be problems. this actually happens a lot of time when i use frameworks that has build-in assets management tools. so it would be good to have this option. i think most of the time stable is more important than the size.', "it should really be in the same github repository. with the old uglifyjs as a branch. although that's less important.", "jhen0409 i've tried out `uglify-es` and i don't think it supported classes. not sure if i set it up correctly. will give this another try", "checking for websockets constructor name fails under uglification. currently to add the websockets transport index.js does a check for the constructor.name being 'websockets'. this fails under uglification unless 'websockets' is made a reserved word in the uglify config. as constructor names are one of the things uglify removes. i recommend that either this is documented. or a different solution is devised; there is already a todo in the code suggesting that this is found. for example. we could standardise some kind of boolean flag in a transport class which tells libp2p to include it even if there are no listening addresses. that wouldn't be websocket-specific. and wouldn't require checking the name against a string.", 'this is unfortunate. we use this pattern in a couple of places. i guess we need to find a new way to do these kinds of detections.']