["the uglify portion of the build is already very fast due to our caching w/ `webpack-parallel-uglify-plugin`. but it would certainly be nice to be back on the official plugin. but i don't think it'll get us any performance benefits.", 'this seems to stem from the build script not being able to find uglifyjs or clojure compiler. after noticing these are tarred in the vendor directory i extracted them and now it seems to be working!', 'had the exact same issue with similar architecture and had to hack a fix to remove uglify plugin from the build which is a suboptimal measure. definitely need a more permanent resolution on this as using dynamic components is crucial to many applications.', "i was focusing on a work migrating countless pieces of code into an entirely different framework. so sometimes. the situation i met was a bit complicated.when i was doing it with uglifyjs1. i wrote a walker myself. which was great that everything was under my control expect for comments. after uglifyjs2 released. i tried to refractor these codes for the long-expected comments and better grammatical accuracy. suppose there's piece of code. we locate a `symbolvar`  within `before` method. notice that we could do the locating at this time. because during the transformation. the things arround the `symbolvar` might be changed which make it impossible to locate a variable i want. actually i also do a lot of such work in `before`. and only transform the code in `after`. because slices of code might have mutual dependencies - they should be transformed simultaneously.but as we know. the `node` param inside `after` is a clone of the origin node. so i lost the connection between the located one in `before` and the node in `after`. so. i added a property. then we would use `if(node.cloned_from === located_var)` in `after`", 'thank you very much for the instructions for "dummies." as soon as i added the -g to the install command. i was able to use uglifyjs on windows. thanks!', "update installation instructions. as demonstrated in #4. many of the people using uglify-js to minify their javascript won't be regular node.js users. so this makes installation instructions a little bit clearer.", 'would it be possible to also do this for entire objects?``` js/** private **/var obj = { somekey : \'foo\'. someotherkey : \'bar\' };```which would yield:``` jsvar a={b:\'foo\'.c:\'bar\'};...fn(a.b);```though i object to tacking onto something in jsdoc because although i\'m perfectly okay obfuscating out a private method / object in my own code. it\'s very possible that doing this in general would break things because people _do_ hook into and use things that would be "private" code in general libraries.  i suppose as long as it\'s an opt-in flag in uglifyjs it would be ok?though i realize this entire concept is destructive. which uglifyjs is somewhat opposed to. so i\'m not sure exactly how to handle it?  it\'s just ugly seeing my "uglified" code look like:``` jsthis.__somemethod(this.__someproperty);```when it could be:``` jsthis.a(this.b);```', 'server crushes when trying to parse javascript with html comments syntax. my node server crushes when using uglifyjs to parse some javascript that has some html comments syntax.example:var uglify = require(\'uglify-js\');var ast = uglify.parse("<!-- function sum(x. y){ return x + y } -->");is it possible to handle this error more gracefully?', 'html comments are not valid javascript syntax. hence the most graceful handling is to throw a parse error.  you should wrap the call to `parse` in a `try/catch` block and deal with the errors.', "'const' makes compress crash. ``` javascriptconst a = 'abc';```uglifyjs con't compress these code.", 'anyhow. it works now.  please try using latest code from git.', "yeah. i meant more along the lines of it is bad practice but it is done and i was pretty confused why uglifyjs2 suddenly broke the code.  i'd agree with not changing the default (it definitely saves space and _should_ be safe). but adding an option for just the args would be a great solution for me.", 'how to run uglifyjs2 without node.js. say i want to run it inside "javascript" script engine of a jvm process. anyway to make it easier in that environment?']