["pierreneter we should add the regular `process.env.xxx` to the defs variable. the reasoning is that if i use `process.env.xxx` in my code. it will be rewritten to the value of `xxx` instead of `{ xxxx: 'bar'. other: 'var' }.xxx`. this makes sure that code-elimination with uglify still works.basically. we should keep the old code and add `process.env`: `json.stringify(collected vars)` at the end.", "one should re-consider that.as of november 2017. everything else in the chain besides webpack (i.e. firefox. node. babel. uglifyjs) supports object spread operator. i got to this problem only when i started to use webpack.what should i do if my browser supports object spread operator? i don't want babel to transpile that. i want to receive `{...x}` in the source code.", "this issue is happening because uglify-js's dependencies can't be fully resolved via static analysis.any idea if webpack or uglify-js will come up with a solution for this?", 'we are no longer using gulp-uglify in the latest', "ability to specify a literal string for the source map rather than a filename. i'd like to be able to pass along a literal string for the input source map rather than write it out and provide a filename. since it was just generated and will be thrown away once the uglifyjs source map is created.", 'eh. seeing as the sourcemap filename is part of the text of the map. it does seem like it needs to be a written-out file. so that it can be parsed appropriately.', "actually. as long as the file doesn't reference any external files. it's irrelevant as to whether the file is written-out or not.", 'missed optimization: concatenating strings. example:``` javascript// test.jsvar c;console.log(\'hello\' + c + \'there\' + \'world\' + \'more\' + \'strings\');```output from `uglifyjs test.js -c`:``` javascriptvar c;console.log("hello"+c+"there"+"world"+"more"+"strings");```expected result:``` javascriptvar c;console.log("hello"+c+"thereworldmorestrings");```', 'could you give me an example ? (i\'m still quite new to javascript ^^)yuicompressor removes it (i was using this tool before finding uglifyjs) so i assumed it could be safe. and also if it\'s avaiable through a command line option. the user might be free to use it or not. at his/her own risk ?anyway for the moment i\'m removing the "use strict"; statement as a step of my build process. before using uglifyjs. i just thought that it might be an option not too hard to add and that a few people might like to have.', 'mishoo: i\'m 100% sure ie doesn\'t support it. guess only ff does - but ie is one of the few breaking the js code...why if one wants to declare constants for uglify to strip out etc. and then serve to clients one cant. (except if declaring constants by `--define`)why i sugest to a solution would be:- strip out constant definitions (at compilation end. if not used anywhere)- replace `const` with `var` after "compiling"? _(not sure if even necessary)_- add support for annotations defining constants (also see #132)thomblake : the uglify doc refers to the `const` keyword. as a mean to define constants - i\'m made this issue to make uglify work in a project - i\'m well aware it\'s an unsupported keyword - hence the issue.', 'spurious warning for catch block parameter. if i run uglify using --lint on code like this:```try {    throw up;} catch (e) {}```it complains `warn: symbol e is declared but not referenced`. but the catch statement _must_ have a parameter -- if i could leave it out. i would but that would result in a syntax error (e.g. your parser gives `error: name expected`).', 'lightninglu10 yeah. the issue comes from uglify or what uglify tries to do. we have to change the way we do some of the duck typing.', 'uppe-r thanks. uglifyjs works. i switched uglifyjs.', "_warning: i did not look at the code yet._can't you just specify a regex to the mangle-regex option of uglify that matches functions starting with a capital? not the most robust solution though.can you explain the crux of the problem a bit more? i might try to solve this issue", 'actually `libp2p` (as well as `libp2p-swarm`) uses the `.tag` property as the primary way to determine the name of the transport. it uses `.constructor.name` only as a fallback. so it should be possible to just set the `.tag` as the name of the transport. i like this solution and i explicitly set `.tag` to `circtuit` in `libp2p-circuit`. for example.']