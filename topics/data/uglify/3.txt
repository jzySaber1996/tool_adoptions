['looks like stale issue. close due stale. feel free to open new issue if somebody faces with this problem in `webpack3` and `webpack4`. also i use latest uglify plugin and using long term cache and all works fine. maybe problem can be in other plugins. thanks', "maximaximum expected behavoiour. webpack don't remove legal comment (copyright. licenses and etc). we should respect other developers. you can configure uglify plugin in `minimizer` option and set `comments: false`. thanks!", "my guess was wrong. it's not caused by the worker pool in the uglifyjs-plugin...", "i've also observed timeout failures on stat test cases but they seem to be gone the day uglify was disabled.", "kzc i found that if i build blacksonic's example with webpack 4 using awesome-typescript-loader and `plugins: [new uglifyjsplugin({ uglifyoptions: { compress: { passes: 3 } } })]`. unused classes can be tree-shaked.is this an expected behavior?if yes. does this mean one does not need to use a string-replace plugin to tree-shake unused classes from typescript code as mhegazy noted if they specify `{ compress: { passes: 3 } }`?", '> it is likely that uglify-js can drop unused side-effect-free class iifes even if they are not annotated with `/*__pure__*/`.i was mistaken. it only worked in trivial cases. you still need to replace the comment text.', 'txiaocao installing uglifyjs-webpack-plugin from npm worked for me. it seems that the docs are wrong about the supposed existence of `webpack.optimize.uglifyjsplugin`.my config:`const uglifyplugin = require("uglifyjs-webpack-plugin");`...`plugins: [    new uglifyplugin({      uglifyoptions: {        output: {          comments: false        }      }    })  ].`', 'rebased', 'nah sorry missed the issue. yeh im leaning towards -1 on this. i know it doesnt have a huge downside. but theres a cost both in download and more complexity with each additional dependency and i would rather be getting rid of them. especially for the sake of 500bytes. we can report the size differences to the original projects and hopefully end up with the benefit and no extra depscalvinmetcalf wanna cast the vote?', 'fair enough. pouchdb has gotten a little big around the waistline. though. we should try to find ways to slim it down.', 'filipesilva. please. add this possibility to specify uglify options', '(function(){ }())  converted to  !function(){ }(). a some module has a dependency dot.jsafter successive execution of commands browserify and uglifyjs this module does not work in firefox browser onlythis line of the dot.js```(function(){ return this || (0.eval)(\'this\'); }()).dot = dot```was transformed to```!function() {this ||(0.eval)("this")}().dot=dot```(i will give all files to reproduce if need)', "bummer.  i'll look into a fix. for now the workaround is to pass `negate_iife=false` to the code generator. you can do like this:``` shuglifyjs file.js ... -cmb beautify=false.negate_iife=false```", 'old npm package uglify-js2 causing confusion. this github repo is called uglifyjs2 and there is an old package on npm called uglify-js2 causing confusion.i see in the package.json its been renamed back to uglify-jsperhaps the old uglify-js2 npm package should be deleted?', "including html scripts in the boilerplate's html is an antipattern. you should try to import scripts from your app itself. for example. you should try importing the script from `./app/index.js`. this allows you to reap the benefits of optimization from webpack. uglify. etc.", 'updates deps. ## changes- updates `gulp-qunit`. `qunit`. `sinon`. `uglifyjs-webpack-plugin`. `webpack `## testing- `npm install && npm run build && npm test && gulp test:unit`', 'update dependencies. ## changes- updates `jsdom` and `uglifyjs-webpack-plugin`## testing- `npm install && npm run build && npm test && gulp test:unit`']