['try to remove the `lodash`. `moment` entries.also can you check if `module.context` is really what you are after? not `module.request`?that yielded quite ok results for me. also remove uglifyjs to check if it looks like what you are looking for.', "wait. does it mean that webpack doesn't have any tree shaking. it's just uglify with `unused: true`?i've read somewhere that it's using rollup.js. is that not true?", "i have similar issue . hangs on  91% additional asset processing too long.my solution is use 'webpack-parallel-uglify-plugin' to replace uglifyjs plugin;hopes help```var paralleluglifyplugin = require('webpack-parallel-uglify-plugin');new paralleluglifyplugin({   cachedir: '.cache/'.   uglifyjs:{     output: {       comments: false     }.     compress: {       warnings: false     }   } })```for me. it reduce building time from 400s to 40s", 'also the uglifyjs compressor options need to be respected.  havent checked that they arent.', 'make sure the js going "in" uglifyjs is compiled down to plain old js (es5)', 'i have noticed similar behavior. with commons chunk. source map dev tool plugin. and uglify no maps are generated. any update on this (or an alternate way to exclude vendor files from having sourcemaps generated) would be appreciated.', "makes sense. i just don't understand why it's trying to pull uglifyjs into the bundle. i'm hoping it's just a dumb configuration error in my project.(i submitted the issue. just used my other account accidentally)", 'chouhan - questions regarding the angular-cli belong in whatever medium the have designated for support requests.', 'd3viant0ne - i did not get you. are you expecting me to rewrite the question in a proper format?i am looking for a solution to the above issue posted.', "priyajeet i'm not a webpack user. so i can't confirm this firsthand. if webpack is able to export just the used symbols from each module based on static analysis of an entire application then the `/*#__pure__*/` annotation would drop the unused down-levelled class iifes with the aforementioned babel plugin + uglify. otherwise it will not.rollup has the advantage of putting everything into the same namespace. webpack does not perform this optimization as far as i know. webpack puts each module into a separate function namespace.", "`unusedcomp` wasn't dropped because it was referenced by the static `unusedcomp.proptypes` outside the class iife which is considered a side effect from uglify's perspective.i'm guessing that babel generated `unusedcomp.proptypes` outside of the iife? if it were generated inside the class iife. then the unreferenced `unusedcomp` would have been dropped.", 'source maps are generated for production. there is currently no way to disable them.', 'it would be good if the files could at least be in folders or something. most clients complain about having one folder full of fonts. images. scripts. and styles. if they were at least broken into folders it would be less of a mess. is there anyway to have it keep the folder structure or have a folder structure?', "i'm looking for disabling source map in production :p", "this is the expected behavior of uglifyjs.  is there an underlying issue you're trying to solve?", "clydin thanks for looking at this issue.i have a vendor product ( including a command line tool written in java which i am using it with my gulp script to push generated js files by cli ) rejects invalid characters such as raw 0x1b in bundled js file per xml standard. also. mainly due to certain file size restriction by the product. i also got to supply --prod option to cli while bundling my project code.i tried following uglifyjs options against app.component.js transpiled by tsc just for my test.1)  uglifyjs -c -m **-b beautify=false -b ascii-only** -o a.js -- app.component.js2)  uglifyjs -c -m -o b.js -- app.component.jsseems both produce same uglified code except the escaped \\x1b. so. if the options in 2) are used by default in cli. i like to set the options in 1) with cli and try to bundle actual my project.even though i am not sure the options in 1) will solve my issue but at least i like to try. but. i don't know yet how to specify the options with cli so if someone sheds a light on that. that would be great.", 'the chatter in the logs looks like fairly normal info/warnings from uglifyjs. the error in your browser console is a different story. are you expecting your app to do a post here?', "just had a conversation on irc with dignifiedquire:```04:07 <dignifiedquire> haad: webpack numbers in the log are usually nonminified04:07 <+haad> dignifiedquire: even with after uglifying? :o04:07 <dignifiedquire> yes```**so it may be that the numbers here are incorrect**. will investigate. mark this issue as invalid for now. but don't close until we've verified that that's the case."]