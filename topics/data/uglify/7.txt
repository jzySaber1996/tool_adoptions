["yep these warnings are pre-existing in `next`. they are from the uglifyjs-webpack-plugin (`--trace-deprecation` if you want details). it doesn't support webpack 5 yet. which deprecates some stuff.", 'not sure if it makes sense to fix it in `uglifyjs-webpack-plugin` since it should be replaced anyway (which this issue is actually about).', 'i really like google closure compiler and rollup approach that just create local variables and just rename variables as necessary to avoid collision. i know that just encapsulating every module in its own function is easier but it comes with a cost.when every export is just a variable declaration. a lot of tools like uglify will just strip unused variables. eliminating a whole bunch of unused modules.', '(#3374) - fix some uglify warnings', 'just some unused vars from the output of uglify. the rest are browser browserify and may take a look at fixing', 'looks good. :+1: when green. :)', '+1', 'browserify+uglify test case proposal. if apply uglify after browserify. then often errors. for example:```(function(it/**/) {return"<div"+t.printattributes()+">"+t.printcontrols()+"</div>"})```i do not know why this happens. but the errors of various types. may be necessary to add this combination browserify+uglify in test cases?', 'what is the error?', 'oops. perhaps i was mistaken....sorry. uglify was not the cause of the error.', "`drop_console` is not a supported option. drop_console option with --compile  doesn't work`$ uglifyjs scripts/scripts.js --compress drop_console=true``'drop_console' is not a supported optionsupported options:{ sequences: true.  properties: true.  dead_code: true.  drop_debugger: true.  unsafe: false.  unsafe_comps: false.  conditionals: true.  comparisons: true.  evaluate: true.  booleans: true.  loops: true.  unused: true.  hoist_funs: true.  hoist_vars: false.  if_return: true.  join_vars: true.  cascade: true.  side_effects: true.  pure_getters: false.  pure_funcs: null.  negate_iife: true.  screw_ie8: false.  warnings: true.  global_defs: {} }`", 'that is up to mishoo :)', 'hehe. ok thanks anyway. closing...', 'futurereservedword "yield" in es5 strict mode. this code :``` javascript"use strict";var foo = {    \'yield\' : 1};```will be :``` javascript"use strict"var foo={yield:1}```after uglify compress.because of the \'yield\' is one of `futurereservedword` in es5 strict mode. the code compressed will cause an error in some android browser like this:> uncaught syntaxerror: unexpected strict mode reserved word at xxx.js:2', "doesn't```uglifyjs file.js -c warnings=false -m```work?and if you're using the api:```var ast = new uglifyjs.compressor({ warnings: false });```", "how old are those android browsers? (it's ie8 all over again...)", "it's a glitch in how our argument parsing works.  the `--mangle` flag takes optional arguments. and the file name is interpreted as an argument to `mangle` if it follows it immediately.  i admit it's not exactly nice. but that's how things are at the moment.the workaround is to pass the file(s) first. for example:```uglifyjs a.js b.js c.js --mangle --compress```", "mzgol stupid indeed. but as long as we claim to be ie8-compatible. the issue is valid.  use `--screw-ie8` if you don't care about it. ;-)", 'ok. let\'s make sure that uglify only handles "_regular_ js code" correctly.', 'allow configuration in a file. either a "uglify.config.js" or just inside of "package.json". let us store config options instead of having to pass them on the command line.', "option (or default) to add trailing new-line to output. git (and other scm's) complain about lack of trailing new-line. i manually have to add the new-line to the end of uglify output. which sucks. can we have this as a default. or at least as an option?", "i don't think you should care about newlines for minified files.", "i do care about them because i include a pre-minified file in my repo. and i don't like git complaining needlessly.", 'agree but a name like `.uglifyrc` is better i think. just like this guys:  - `.bowerrc`- `.jshintrc`- `.jsbeautifyrc`although the `package.json` file option is the best.', 'agreed on both points. +1', "agreed with rvanvelzen. it's simple to change your `uglify ...` invocation to a `(uglify ...; echo)` invocation.", 'mzgol: because my program. `process.exit(+!function(a){}.length);` exits successfully before minification. but with an error code after passing through uglifyjs. all i did was program according to standards.', "not quite so simple when you're **not** running uglify manually from the command line. but are instead running it through automated utilities like grunt attached to a watch. etc.what's the harm in a simple feature addition like this?---for the record. i don't like that git complains about trailing new-lines. i think it's stupid to need them. but that ship sailed long ago. and it's frustrating to have an otherwise pretty useful utility like uglify thumb their nose at that precedent when it probably would take less than 30 bytes of logic to address. **and again**. it'd be an option that defaulted off so it has no danger to anyone who doesn't want it.", "chore(config): disable comment perserving in uglifyjs. remove many preserving comments containing /*!. /**!. preserve or license that we don't need and reduce bundle size```js * react.production.min.js * * copyright (c) 2013-present. facebook. inc. * * this source code is licensed under the mit license found in the * license file in the root directory of this source tree. */```look at this mess in main.js [?]", 'this was solved by adding the following to `uglifyoptions`:`compress: { unused: false }`']