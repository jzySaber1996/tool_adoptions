['does the build complete if uglify is disabled?', "also i think by default should used warnings and errors preset. a lot of problems when people don't see warnings or errors. example uglify show warnings on mangling and if people don't see this warnings they can create issue and it is not good.", 'facing the same problem. it is uglifying when not told to and not having the devtool source map in cheap-source-map. source-map or any devtool option like inline-source-map.', 'ooflorent if my configuration is in another package. evilebottnawi variant is more convenient. there is no need to add uglifyjs-webpack-plugin in dependencies.', 'in my opinion. production mode should also have `uglifyoptions.output.comments = false` by default', 'so setting `uglifyoptions.output.comments` back to `false` might solve the problem```js  new uglifyjsplugin({    uglifyoptions: {      output: {        comments: false      }    }  })```', 'whtsky can you create issue in uglify plugin repo what comments should be removed?', 'well i removed the service-worker and still have the same problem.the problem disappear as soon as i remove `uglifyjs`. maybe i have a problem with my `uglifyjs config` ?```js new uglifyjsplugin({  cache: true.  parallel: true.  sourcemap: false.  uglifyoptions: {    output: {      comments: false    }  }})```montogeek could you re-open the issue ?', 'sounds like an uglify-es bug. it only happens in production mode. does it?', 'i guess the problem is the `inline` option of uglifyjs. you can try disabling only this option. it causes many problems.', 'ran into this today as well. here is the config that worked for me:```jsnew uglifyplugin({  uglifyoptions: {    compress: {      unused: false    }  }})```', 'no. this is correct. just docs are not updated. the removal of webpack.optimize.uglifyjsplugin was announced during the v4 release.', '> let me enphasize that there is an update uglifyjs that does indeed support es6uglify may support minifying es6. but the code will then not run in ie 9 (syntactically).we expect support for compiling package code sometime next year. so this package will probably remain broken or require you to eject until then.', "remove uglify warning caused by enum. it's giving us ```warn: side effects in initialization of unused variable sortorder [vega-lite.js:4115.4]warn: side effects in initialization of unused variable scaletype [vega-lite.js:4125.4]warn: side effects in initialization of unused variable nicetime [vega-lite.js:4135.4]warn: side effects in initialization of unused variable dataformat [vega-lite.js:4141.4]warn: side effects in initialization of unused variable axisorient [vega-lite.js:4148.4]warn: side effects in initialization of unused variable fontweight [vega-lite.js:4153.4]warn: side effects in initialization of unused variable shape [vega-lite.js:4162.4]warn: side effects in initialization of unused variable horizontalalign [vega-lite.js:4168.4]warn: side effects in initialization of unused variable verticalalign [vega-lite.js:4174.4]warn: side effects in initialization of unused variable fontstyle [vega-lite.js:4179.4]warn: side effects in initialization of unused variable stackoffset [vega-lite.js:4186.4]```we probably should move each of these enums into the correct schema files", 'maybe worth doing #1154  at the same time.', "we're not really causing side effect in the global namespace so this is not a big deal.  i'll punt on this.", "hm. doesn't seem to be a browserify transform or a uglifyjs command-line option for this.", '(#2597) - use ccjs as well as uglify', "building without the minify parameter can lead to subsequent builds failing. when the minify parameter is given. the build callback isn't called until the closure compiler and uglifyjs are fully downloaded and the minify process completes. this works fine.when the parameter isn't given. lodash is built without minify. the build callback is invoked. then the minify process is started. the minify process then begins downloading the closure compiler. the code that started the lodash build continues on its merry way (because the build callback has been invoked) then exits. aborting the download. the next time the build is run. lodash is built. the callback is invoked. then the minify process is started. the minify process sees that the closure compiler has already been downloaded (sorta). so starts downloading uglifyjs. uglifyjs is small enough that it completes before the calling process exits. the actual minify starts. which tries to use the bad closure compiler jar and errors.basically. the minify process should only be started and the closure compiler and uglifyjs downloaded if the minify parameter is given.", "if neither -d nor -m is specified then isminify = false and isdebug = false. i've also not specified -c. so isstdout = false.`if (!isminify && (iscustom || isdebug || istemplate)) {` gives true`if (isdebug && isstdout) {` gives false`else if (!isstdout) {` gives truethe build callback is invoked.`if (!isdebug) {` then gives truethe minify process is started and begins downloading the closure compiler.the callback has been invoked. as far as any caller is concerned. the lodash build is finished and it's free to exit. so it does. aborting the download.you perform the build again. the minify process is started and tries to use the corrupted jar. it errors. aborting the script.i think the disconnect may be that i'm actually running the lodash build as part of a grunt script. so the build method is being invoked with a different callback than if i were to run it standalone.-e i do get the message to manually download. however. since i'm running this as part of a build script and a ci build. i'd rather not have to do it manually.", "ok. i've updated the packages :d", 'fix webpack uglify and snapshot', 'the pr worked well', 'fix(angular/cli): ensure purify is before uglify', "tragetaschen i think felipe is commenting on your math. that step doesn't just involve the html file but includes the typescript and css files too. in order to properly uglify your entire project is brought into memory. so you can't just count the html. additionally. some of your logic may cause duplication of subsets of your dom. exploding the size. this is a complicated task that will take a good amount of ram. we should use as little as possible. but we can't expect miracles.", 'work with typescript files without content. too bad we have empty typescript files and their content is "" which is a false-y value.on the other hand:```> null != undefinedfalse> undefined != undefinedfalse> "" != undefinedtrue```i am not sure this is a proper "fix" but please mind it should work with empty string. usually we won\'t have empty files but on few occasions we use a mechanism to do a preprocessor kind of stuff that will output some typescript code for some builds but have none for others. then web pack running uglify will strip comments and compress whitespace leading to "".', "there's also the issue of the cla.", 'fix(angular/cli): update webpack. uglifyjs-webpack-plugin. partially address #5618fix #8571fix #8505', "filipesilva since this project is one of the bigger users of `uglify-es`. i scan the issues occasionally and happened across this. i'll leave it to you whether or not to act on this information.", '+1 to this issue. it would be awesome if minifying in the browser was supported by default and well documented', 'maxogden what is the use case for minifying in the browser?', "treetransformer does not visit all nodes inside an ast. execute the following code:```var ast = uglify.parse('var a = 100;');ast.figure_out_scope();ast.transform(new uglify.treetransformer(null. function(node) {        console.log('na: ' + node.type);        if(node instanceof uglify.ast_vardef) {            console.log('--- nb: ' + node.name.type);        }    }));```and you should get this output:```na: numberna: vardef--- nb: symbolvarna: varna: toplevel```as you can see. an ast_symbolvar node exists inside the ast_vardef node. however. the treetransformer does not walk into it at any time.i don't know if this is expected or a bug.", 'bump', '--mangle toplevel generates symbolref error. when i specify "--mangle toplevel". uglify.js issues a terse "symbolref" error and exits. i haven\'t tested against other bodies of code or attempted to isolate this bug further. but could do so if necessary.', "i don't think so...  but there's already an easy way to get a build for the browser. you just run `uglify-js --self -cm`.  any reason why that doesn't suffice for you?", 'nope. sorry. i\'m not ok with this approach.seems to me that your problem is that uglifyjs cannot be automatically "browserified". right?  presumably. browserify tries to load `node.js`. notices that there\'s no `require` calls there (at least not for uglifyjs files) and just outputs that file. which of course won\'t work.what if a special behavior of `uglifyjs --self` would make it a commonjs-compatible module?  this. coupled with a feature in browserify (which if it doesn\'t exist could be easy to implement. namely. the option to run a custom command to browserify certain projects) could automate things.  hope i explained it properly?', "i'm sorry. but you are ridiculous. even without my example it is integral to have some form of control over the mangled names. in a website with many js scripts you only uglify certain ones. for exmaple only yours (others may come from cdn hosts etc) ... you never know if a script will polute the global namespace with certain variable names. the possiblity of a name conflict is always there. so don't be rude and consider my request.", 'object properties equal to reserved words are quoted with --screw-ie8 switch. the following command:``` bashuglifyjs input.js --mangle --compress --screw-ie8```with the following `input.js`:``` javascriptvar a = {    "boolean": 1.};```gives:``` javascriptvar a={"boolean":1};```i.e. needlessly quoting the property.', 'update dependences and build. ## changes- updates build gulp tasks to es6 syntax.- replaces uglifier with `uglifyjs-webpack-plugin` to match cfgov-refresh configuration.- updates `babel-preset-env`. `deepmerge`. `finalhandler`. `run-sequence`. `serve-static`. `sinon`. `wcag`. `webpack`.## testing- `gulp build && gulp test` should pass.']