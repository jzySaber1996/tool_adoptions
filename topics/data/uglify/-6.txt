['what do u use to transpile generators? it doesnt look quite like the default `regenerator-runtime`. anyway - its not `redux-saga` issue but rather typescript compiler thing and should be reported there.dead code can be found in numerous places. in nearly every big framework like react and probably angular too - there are often different code paths for prod and dev builds and its a job for tools like uglify js to get rid of this (as its unreachable).', 'just tested with the beta uglify plugin and the issues seems to have gone away. will monitor a bit more before closing this.', "**this issue had no activity for at least half a year.**it's subject to automatic issue closing if there is no activity in the next 15 days.", 'thank you so much for the report. would you be able to provide a minimal reproducible repo that we could use to bake into our tests and uglifyjs-webpack-plugin tests//cc d3viant0ne', "is there a reason you went with closure compiler over uglify. which can be managed with npm? it's the main thing adding size to the project.", "> is there a reason you went with closure compiler over uglify. which can be managed with npm? it's the main thing adding size to the project.yep. closure compiler has consistently produced smaller file sizes. i use a mixed minification approach where i do a pass with uglify. then one with closure compiler. then a hybrid of closure compiler+uglify (usually the smallest result). i don't rely on npm dependencies because i want lo-dash to work out-of-the-box from a github repo. npm. jamjs or wherever. why is file size really an issue?", 'adrianchrobok if you take uglify out of the pipeline does it then again work? my question is that is this really a limitation with uglify not supporting es6. as noted in the thread i linked? if so there no actions for us to take. one solution would be to insert something like babel into your pipeline to ensure what uglify is getting is es5. which it can handle.', 'gulp build broken. very easy to reproduce on my machine :- generate an electrode project using ```yo electrode```- test various gulp commands. like ```gulp dev``` or ```gulp build``` : everything should work fine- delete the node_modules folder then regenerate it using ```npm install```- test now ```gulp build``` : the build will fail at the very end. on uglifyjs (error : ```gulpuglifyerror: unable to minify javascript```)- the consequence : the project cannot be build or rebuild using ```gulp build``` anymore. it is like "dead".it is not a little one but a very annoying one : it prevents me for example to build my electrode project in our wercker ci/cd pipeline. since i\'m doing a ```npm install``` step to rebuild the node_module folder in wercker.yml.', 'we will take a look and update you', 'looks like if you use the plugin `transform-runtime` you need to use the array syntax and do this: `["transform-runtime". { "polyfill": false }]`.  once i did that my minify worked fine.  just need to test to make sure it still works.', 'hi cross311 : where are you facing this issue? during gulp build ?', "we did not face it until we started doing `export * from './some-file';`  the transform-runtime babel plugin creates the dist file with an `import` for a polyfill and uglify does not support import. animesh10", 'animesh10 we did not experience it on initial download of the stuff. but everyone will run into it if they have index files where they export folders.', "how to uglify when use 'ng build'. ### how to uglify when use 'ng build'i use ng build.the vendor.bundle.js size is 6m!which options i can use?", 'ishitatsuyuki  got it', 'do the source map generated by uglify not work for you?', 'it might just work without `-f` actually. i\'ve not tested.  it would be great if you could also deprecate the `uglify-js2` package in npm.  just run:```npm deprecate uglify-js2 "you can now install this using `npm install uglify-js -g`"```i would then suggest giving it about 6 months before unpublishing it completely:```npm unpublish uglify-js2```', 'it just needs to be changed to `npm install uglify-js1 -g`', "--wrap does not work without --export-all. output is:c:\\webgl\\node_modules\\uglify-js\\lib\\ast.js:310                    to_export.foreach(function(sym){                              ^typeerror: cannot call method 'foreach' of undefined    at object.before (c:\\webgl\\node_modules\\uglify-js\\lib\\ast.js:310:31)    at ast_node.transform (c:\\webgl\\node_modules\\uglify-js\\lib\\transform.js:62:35)    at c:\\webgl\\node_modules\\uglify-js\\lib\\transform.js:81:25    at doit (c:\\webgl\\node_modules\\uglify-js\\lib\\utils.js:114:23)    at map (c:\\webgl\\node_modules\\uglify-js\\lib\\utils.js:140:52)    at do_list (c:\\webgl\\node_modules\\uglify-js\\lib\\transform.js:80:16)    at c:\\webgl\\node_modules\\uglify-js\\lib\\transform.js:169:21    at ast_node.transform (c:\\webgl\\node_modules\\uglify-js\\lib\\transform.js:66:21)    at c:\\webgl\\node_modules\\uglify-js\\lib\\transform.js:173:43    at ast_node.transform (c:\\webgl\\node_modules\\uglify-js\\lib\\transform.js:66:21)", 'food for thought. i upgraded to v2 on accident on an old project and wasted an hour because i was looking at examples from the v1 github page. luckily i read the readme closely and found the right thing to do. for an hour i had no idea why require("uglify-js").parser was returning nothing', 'yeh. i think that argues in favour of merging the github repositories.  you could also provide helpful warning messages when people call methods from the old uglify-us.', '> you could also provide helpful warning messages when people call methods from the old uglify-usthis seems completely reasonable and easy to implement. would have saved me a fair amount of time if there were a helpful message printed or error thrown with the correct message when i called .parser', "i can't get it to work. after runningnpm install uglify-jswith no errors. as well as jbudone 's suggestion. i still get-bash: uglifyjs: command not found", "it's not absolutely required to pass `-`. for example this should work:``` shcat script.js | uglifyjs -cm```", 'ajkochanowicz jbudone execute `npm link` in the uglifyjs directory.', 'missing `continue`. ```$ cat t.jswhile (a) {  if (b) {    switch (true) {    case c():      d()    }    continue  }  f()}$ uglifyjs t.js -cbfor (;a; ) {    if (b) switch (!0) {      case c():        d();    }    f();}```', "typeerror: property 'input' of object #<object> is not a function.... hi.i get the following error when trying to parse some js files:...node_modules\\uglify-js\\lib\\parse.js:616s.token = s.input();typeerror: property 'input' of object #<object> is not a function"]