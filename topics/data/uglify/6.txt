["this is still a bug.to reproduce. simply twiddle `global_defs`. like so:```jsnew uglifyjsplugin({  uglifyoptions: {    compress: {      global_defs: {        debug: 'foobarbaz'.      }    }  }.}```then compile a module:```jsconsole.log(debug);```notice that no matter what you change the value of the global to. the hash of the chunk is the same.", 'if uglify is removed as a dependency of webpack. then how will minification "just work" when specifying mode as production?', 'no the uglify-es branch is unmaintained anyway. terser is the maintained fork.', "oh. nevermindi try comment uglify. it works well with devtool: 'source-map' plugins: [            //uglify ]", 'hrm. i dont love the idea of trying to defend against code mangled while downloading in our own code. from the uglify readme there is a `--ascii`. i cant see `--ascii-only` and it seems like it should work? its specifically so it only outputs ascii', "daleharvey yeah but the `\\u0001` and `\\u0002` characters are in the ascii range. so they get printed as-is. amusingly uglify outputs `\\u0000` as `'\\x00'`.i would like to just throw an error when pouchdb starts; i'm sure i won't be the last one to try copy-pasting the code into vim and run into such issues", 'actually it is the same as the uglify of angular part while in production mode which only concern on client side.however. i just want to know if there is any suggestion on server side code since the structure of mean.js is different from simple node project. e.g. the module folder will include both server side code and client side code.i found some ways on obfuscate/uglify node program in stack overflow but i want the solution for mean.js.thanks a lot if you got any more information.', 'me too. in our project mangle breaks the production build.', "here's my specific stack trace:```      exception: error          at new js_parse_error (f:\\<omitted>\\node_modules\\uglify-js\\lib\\parse.js:196:18)          at js_error (f:\\<omitted>\\node_modules\\uglify-js\\lib\\parse.js:204:11)          at croak (f:\\<omitted>\\node_modules\\uglify-js\\lib\\parse.js:663:9)          at token_error (f:\\<omitted>\\node_modules\\uglify-js\\lib\\parse.js:671:9)          at unexpected (f:\\<omitted>\\node_modules\\uglify-js\\lib\\parse.js:677:9)          at f:\\<omitted>\\node_modules\\uglify-js\\lib\\parse.js:761:17          at f:\\<omitted>\\node_modules\\uglify-js\\lib\\parse.js:710:24          at block_ (f:\\<omitted>\\node_modules\\uglify-js\\lib\\parse.js:984:20)          at ctor.body (f:\\<omitted>\\node_modules\\uglify-js\\lib\\parse.js:957:25)          at function_ (f:\\<omitted>\\node_modules\\uglify-js\\lib\\parse.js:962:15)```", "i am indeed using it as a module. what makes you think i'm not catching the error myself? i am in fact catching and outputting the exception (how do you think i was able to paste it here?). my issue is that the printed exception doesn't relate to the call i made to uglify (it doesn't tell me what line in my code this call came from). and it doesn't tell me what about the parsing failed. i would expect it to. for example. tell me the file that had the parse failure. and hopefully also the line in that file where it failed (if possible).i see from your link that the exception has the `line` and  `col` properties - those should be useful. but its disappointing they don't appear in the exception message. in fact. it doesn't look like there's any error message at all. in any case. where are these things documented - so i can find out what other properties on the exception i should be expecting (so i can appropriately output them)?", 'alert() is arguably a significant side-effect :)other than that this is not necessarily a program. and most likely a library. which does nothing unless used. as most of the things we uglify.', 'options in comments. is it possible to specify options in comments?``` javascript/* uglifyjs unused=true */```', "to the best of my knowledge. we do not use object destructuring assignments. we use rollup to produce es5 compliant code. then uglify the output of that. not sure if uglify-es6 is necessary/helpful in that context. but if so please explain and i'd be happy to take a look!", 'wooot!', "uglifyjs-webpack: typeerror: super expression must either be null or a function. not undefined. hello. everything works fine in development. but when i change to production i got this:    sortable.js:7 typeerror: super expression must either be null or a function. not undefined        at react-draft-wysiwyg.js:6        at react-draft-wysiwyg.js:6        at react-draft-wysiwyg.js:6        at t.default (react-draft-wysiwyg.js:6)        at t.getcompositedecorator (react-draft-wysiwyg.js:6)        at t.value (react-draft-wysiwyg.js:6)        at aa (react-dom.production.min.js:13)        at react-dom.production.min.js:13        at si (react-dom.production.min.js:13)        at ui (react-dom.production.min.js:13)in production i use `uglifyjs-webpack-plugin` and that's the cause of the error and i don't really know why."]