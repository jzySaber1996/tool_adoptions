['nirazul thanks for issuewebpack-bot move to webpack-contrib/uglifyjs-webpack-plugin', "> do they now automatically set the mode (which would. if i'm understanding mode correctly. be equivalent to their current behavior)?yes`-d = --mode development --devtool cheap-module-eval-source-map``-p = --mode production --plugin uglifyjs-webpack-plugin`but this is subject to change as cli will move into webpack/webpack-cli.", "wouldn't this be one of those cases where a default one would be one less thing to configure? uglify by default. override with config.", 'milesj issue still exists with latest `webpack3` and `uglify-webpack-plugin`?', "on the one hand when included in production mode uglifyjs can get outdated and it's more complex to use other minimizers.on the other hand it's easier to getting started and we avoid users publishing unminimized bundles to prodution....i guess the arguments pro inclusion have more weight. we can use `optimize.uglifyjs` for options/disable.best case: users only need mode: production to create an production build and no other options....", "switch on minimizing in production mode by default. <!-- thanks for submitting a pull request! please provide enough information so that others can review your pull request. -->**what kind of change does this pr introduce?**feature<!-- e.g. a bugfix. feature. refactoring. build related change. etc... -->**did you add tests for your changes?**existing tests<!-- note that we won't merge your changes if you don't add tests -->**if relevant. link to documentation update:**todo<!-- link pr from webpack/webpack.js.org here. or n/a -->**summary*** remove uglifyjsplugin* add `optimization.minimize(r)`* use uglifyjs-webpack-plugin by default<!-- explain the **motivation** for making this change. what existing problem does the pull request solve? --><!-- try to link to an open issue for more information. -->**does this pr introduce a breaking change?**yes<!-- if this pr introduces a breaking change. please describe the impact and a migration path for existing applications. -->**other information**", "that's really interesting...could you try if there is still a difference if you disable uglifyjs?", 'for me there is no difference with or without uglifyjs.i wonder if comparing the working bundle vs the non-working bundle (with the only difference being the defineplugin) would possibly help narrow it down and allow me to eliminate any proprietary data?', 'i would take out the uglify. unused code is just confusing. never need people to actually singularly run uglify eithercan you squash into one commit with the valid commit message. this looks good from initial look. will give it a test in a bit', "done. i just wasn't sure if uglify was used for other purposes. but i removed it now.", 'disallow uglifyjs compression feature. we could save a lot of time (~50s. for a dev build) by just disallowing `uglify` compression feature. given "no whitespace" and symbol mangling accounts for most of the size reduction and are already built-in for `uglify`.', "uglifyjs as a flag. hi.uglifyjs doesn't support es6. it's possible to use --prod during build but disabling just the uglifyjs part?i will eventually do a closure compiler pass after that. but i need to remove the uglifyjs part.right now seems that not possible standing to docs to specify that flag", "this isn't possible currently. you seem to be using a fairly custom build process. so i'd suggest you eject to have full control over it.", 'wip: refactor(angular/cli): directly add pure hints to imports. this updates the webpack dependency template to add the uglifyjs pure hint to imports with an import clause.  this eliminates the need to analyze the imports via a transform and then add the hints via a plugin.', '/cc igorminar', 'hi all. been a while but i figured better late than never! i now have more time to work on `zxcvbn` and have a fun roadmap planned.tracker1. i mostly stuck with your suggestions. check the v3 release. i used `lib` instead of `dist` for bundled and compiled .js following the lead of other node repos. i\'ve also removed the java dependency. switching to uglifyjs instead of closure -- turns out gzipped difference is negligible even though it\'s over a 100k difference uncompressed. from what i can tell this is solely because closure replaces `["a". "b". "c"]` with a `"a.b.c".split` over zxcvbn\'s large dictionary lists -- an optimization we could do ourselves inside data-scripts/*.py.dan', 'also was surprised to find out than uglifyjs supports joining multiple files generated by coffeescript. but cannot use sourcemappingurl included in every such file (instead of using --in-source-map).', "passing the output of `json.stringify` to uglifyjs shouldn't even work. that's not a javascript program.", 'yes. i just checked using my hack above and it doesn\'t work if the top level is not an array.error    at new js_parse_error (c:\\projects\\webstorm\\mother\\node_modules\\uglify-js\\lib\\parse.js:185:18)    at js_error (c:\\projects\\webstorm\\mother\\node_modules\\uglify-js\\lib\\parse.js:199:11)    at croak (c:\\projects\\webstorm\\mother\\node_modules\\uglify-js\\lib\\parse.js:630:9)    at token_error (c:\\projects\\webstorm\\mother\\node_modules\\uglify-js\\lib\\parse.js:638:9)    at unexpected (c:\\projects\\webstorm\\mother\\node_modules\\uglify-js\\lib\\parse.js:644:9)    at semicolon (c:\\projects\\webstorm\\mother\\node_modules\\uglify-js\\lib\\parse.js:664:43)    at simple_statement (c:\\projects\\webstorm\\mother\\node_modules\\uglify-js\\lib\\parse.js:822:73)    at c:\\projects\\webstorm\\mother\\node_modules\\uglify-js\\lib\\parse.js:693:47    at c:\\projects\\webstorm\\mother\\node_modules\\uglify-js\\lib\\parse.js:677:24    at block_ (c:\\projects\\webstorm\\mother\\node_modules\\uglify-js\\lib\\parse.js:938:20)i guess i can use:if (typeof data === "string") {json.stringify(json.parse(data). null. 4);} else {json.stringify(data. null. 4);};but once again this does not beautify as well as uglifiyjs2 nor have advanced features like max line length.does anyone know a hack to fix the above error? maybe adding "[" and "]" to the beginning and end of the string then removing them after...', "to be more clear:it's included in this case:``` textuglifyjs test.js --source-map test.map --output test.min.js```but it's not included in this case:``` textuglifyjs test.js --source-map test.map > test.min.js```you cannot know the filename. so maybe it's the best solution to emit a error in that case. instead of writting a corrupted sourcemap.overall your sourcemaps are of very good quality... :smile:", 'parser outputs a warning in addition to throwing an exception when there\'s a parse error. ``` javascripttry{    require(\'uglify-js\').parse(\'var foo 123\');} catch(e) {    console.warn("got exception: " + e.message)}```output:```warn: error: unexpected token: num (123) [null:1.8]got exception: unexpected token: num (123)```this is a bit annoying when the parser is used in a context where errors need to be handled differently.', "jquery. i use jquery from a common source & don't want to uglify along with my code. i can leave $ unmangled. but how do i request that a library be considered in the interpretation but not included in the result (only referenced)?trying it gives a parse error (with jquery it works).", 'output. to_ascii: escape non-ascii chars with \\xnn instead of \\unnnn whenever possible. previously ascii-only mode was a bit wasteful:```$ uglifyjs --beautify ascii_only=truealert("foo");^dalert("f\\u00f8\\u00f8");```with this patch the output is:```alert("f\\xf8\\xf8");```', 'merged this too. thanks.', 'i think one should be able to have constants or variables thats only written to once - in objects. trying keep a clean global scope.but the problem is how to detect variables. (sometimes they are invoced as array element)why i suggest annotations in comments. should be easier to parse and as comments they are stripped by uglify. so they do no harm in the browsers.', 'ah found it `npm install uglify-js` and `uglifyjs --self -c -m -o ./uglifyjs.js`', "curiousdannii is this a consideration in which optimizations uglify does and doesn't? it seems to me that uglify's concern is minifying as effectively as possible. not necessarily usage in conjunction with other tools.", 'so uglifyjs works fine?']