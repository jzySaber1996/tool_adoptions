jprichardson/electron-mocha,mocha,2016-06-28T06:47:00Z,i'm not sure what you're trying to do? source maps are meant for inspecting / reading compiled code. but not for running it -- electron-mocha would just run the compiled code so i don't see how source maps come into play here? having said that. they should work just like they do in chromium.,negative
jprichardson/electron-mocha,mocha,2016-06-28T09:07:56Z,ok. looks like this is general problem of mocha and bundlers. not specific to this project. will do more digging on the subject.,neutral
jprichardson/electron-mocha,mocha,2016-07-08T01:58:17Z,not working. or not what i think it is?. this code:```it('gets ready'. function(done) {  require('electron').app.once('ready'. done)})```when run with electron-mocha gives a mocha timeout error (`ensure the done() callback is being called in this test.`).is this expected?,neutral
jprichardson/electron-mocha,mocha,2016-07-08T09:57:21Z,yes that's to be expected: electron-mocha runs your tests in electron's main process. or. if you pass `--renderer` in a renderer process. in both cases. electron-mocha is responsible for starting and initializing electron. when your tests run. electron has already been initialized. so the `ready` event has fired before you start listening for it.,negative
jprichardson/electron-mocha,mocha,2016-07-08T17:16:29Z,cool. that makes some sense. this worked:```const {browserwindow} = require('electron')it('makes a window'. function (done) {  const options = { frame: false. height: 768. width: 1024. x: 0. y: 0. show: false }  const win = new browserwindow(options)   win.webcontents.once('did-stop-loading'. function () {    win.webcontents.savepage('out.html'. 'htmlonly'. done)  })  win.loadurl('')})```,positive
request/request,standard,2017-01-13T05:42:15Z,in what status there is an acceptance of this pull request? simov,neutral
request/request,standard,2017-02-03T17:58:04Z,hi.could a merge be considered ?thanks.,positive
pixijs/pixi.js,jshint,2016-06-28T21:09:58Z,build error. so i cloned the repo. installed dependencies with `npm install`. and built with gulp.> error: cannot find module 'jshint/src/cli'i solved it with:> npm install --save-dev jshint gulp-jshinti thought i should be opening an issue nevertheless.,negative
pixijs/pixi.js,jshint,2016-07-08T21:54:15Z,looks like we are missing a `jshint` dep. but gulp-jshint is there. feel free to put in a pr.,positive
pixijs/pixi.js,jshint,2016-07-10T03:47:17Z,ha. ok :),positive
pubkey/rxdb,karma,2017-06-03T10:14:26Z,add .travis.yml for travis ci. link in readme is already set to pubkey/rxdb. travis will run - all tests with node and karma- build for examples angular2 and vueon linux and node v.7 for every push and pull request.travis can be also set up to run tests of all examples. build processes for all other examples do not seem to work.,neutral
elastic/kibana,selenium,2015-09-02T16:26:06Z,planning in rough order:- [x] init config/basic test at `tests/functional`- [x] add to grunt test task- [x] spin up es on a different port- [x] spin up kibana on a different port. configured to use new es port- [x] import snapshot or bulk api to es instance- [x] grunt task for installing and starting selenium server,positive
atom/etch,standard,2016-03-08T16:31:52Z,> should update be required? or at least log a warning?when would we warn or throw an exception? maybe when a `componentwidget` is first created? i'm definitely open to either to prevent confusion.> does update take. more or less. the same form as the constructor: receiving properties and scheduling a render?it does. but i haven't thought about a way of unifying them that feels right to me. from the perspective of using a component. it seems the most straightforward to construct an object with properties and later call `update` with properties. we could require the constructor to not take arguments and instead also call `update` when initializing the object. but that feels awkward to me.if you want to implement a superclass in the package to experiment with some different patterns. that seems like it could be a good way to experiment with reducing boilerplate. you could implement the constructor and the `update` method in terms of hooks defined on subclasses and prescribe more about how properties are dealt with.if you want to be more react-like. your superclass constructor and `update` implementations could perform a basic comparison on a `props` hash on the component and call various hooks such as `shouldcomponentupdate`. `componentwillreceiveprops`. `componentwillupdate`. `componentdidupdate`. etc.i left this stuff out of etch because it didn't seem as fundamental as the basic idea of calling `render` and using the result to create or update a dom element. that felt like the essence of the problem and the rest felt more like advice around how to organize code. that said. maybe the props management pattern is standard enough to bake in a superclass for those that want to use it.what gives me pause is wondering where it stops. should we also model an internal `state` object with `setstate` etc? i'm much less enthusiastic about that because of the fact that state has been more complex than a simple hash of key value pairs in a lot of the code i've worked on in atom. the essential state of the editor is a product of multiple different indices tracking markers. syntax highlights. etc. it could never be boiled down into a `state` hash.maybe management of properties is different though. since they're more obviously always treated as a hash.,negative
dherault/serverless-offline,mocha,2016-10-23T18:30:08Z,unit testing infrastructure. included mocha as dev dependency and a few tests for the createlambdaproxycontext.this branch was created on top of the lambda-proxy-event.,neutral
dherault/serverless-offline,mocha,2016-10-24T00:15:43Z,wow. thanks for all the work.,positive
dherault/serverless-offline,mocha,2016-10-24T00:40:47Z,don't mention it.best way of making this plugin grow safely is to build a solid ground of tests.we can put them to run in a travis ci job.,positive
dherault/serverless-offline,mocha,2016-10-25T01:06:10Z,just added hapi integration testing.,neutral
dherault/serverless-offline,mocha,2016-10-27T10:24:37Z,enable handler mocks. not sure if you'll want this in but thought i'd offer it up just in case. i am using the plugin to do contract testing whereby the endpoints are spun up as part of a mocha test (by calling `start()`). these changes let me override the `require` of the handlers thereby enabling me to mock/stub dependencies - particularly those that do comms (i've been using `proxyquire` but you could use anything). anyway not sure if it would be useful to anyone else...,negative
dherault/serverless-offline,mocha,2016-10-30T13:21:33Z,leonardoalifraco. thanks a lot for this! it rocks and so do you.,positive
dherault/serverless-offline,mocha,2016-10-30T15:25:02Z,thanks jgrigg. even if this is a bit too specific. if more users want this. i'll reopen :+1:,positive
dherault/serverless-offline,mocha,2016-11-01T12:44:09Z,thanks!,positive
pugjs/pug,mocha,2013-01-09T19:45:49Z,we use mocha now.,neutral
pugjs/pug,mocha,2013-01-09T22:48:29Z,i'll fix this soon. but this can't be `auto-merged`. `npm prune` is not needed. and i'd like `npm test` to directly execute `mocha -r spec` so it works on windows as well as travis.,negative
pugjs/pug,mocha,2013-01-10T00:23:27Z,this would improve test coverage merge visionmedia ?,positive
pugjs/pug,mocha,2013-01-10T09:49:05Z,use local mocha instead of globally installed. this is not depend on globally installed `mocha`.,neutral
pugjs/pug,mocha,2013-01-10T09:52:02Z,if this idea is acceptable. i'll rebase my commits.,neutral
pugjs/pug,mocha,2013-01-10T10:54:23Z,npm does this automatically for you.  it's one of the advantages of using `scripts` instead of `make`.  the other advantage is cross platform support.,neutral
pugjs/pug,mocha,2013-01-10T12:31:42Z,i didn't know up to now. thanks :smile:,positive
pugjs/pug,mocha,2013-01-10T20:50:51Z,ah nice yeah the bdd ui would be nice. the filter tests were commented out since they were pretty volatile for a while but we should definitely get them working fine again,positive
pugjs/pug,mocha,2013-01-11T00:14:41Z,i rebased and sent another pr. #866,neutral
janl/mustache.js,eslint,2015-03-23T19:11:53Z,check out eslint. after trying all of 'em. that's where several projects i work on have ended up.,neutral
janl/mustache.js,eslint,2015-03-23T21:24:32Z,yeah eslint also does the trick.. anything other than quotes you had in mind dasilvacontin?although i feel most linters do the basic stuff equally well. some are more suiteable for specific things and custom styles.,neutral
janl/mustache.js,eslint,2015-03-23T23:06:47Z,glad you guys mentioned eslint. it's the one i had in mind. :)more things:`writer.prototype._rawvalue = function(token) {`vs`mustache.parse = function (template. tags) {`what are your thoughts about `standard`?,positive
paulmillr/chokidar,mocha,2014-11-26T08:30:11Z,windows: fs.watch() needs an error handler!. i noticed that the file watcher created in createfswatchinstance() is not getting an error handler. you need to add it though. otherwise errors while watching will bubble all the way up to the uncaught exception handler in node.a good test case to reproduce is having 2 folders. one with chokidar git repo and one with a small app that uses chokidar to watch the git repo folder. then just run the chokidar mocha tests while watching.eventually i am getting this:change c:\gitdevelopment\chokidar\test-fixtures\add.txtadd c:\gitdevelopment\chokidar\test-fixtures\add.txt{ [error: eperm. lstat 'c:\gitdevelopment\chokidar\test-fixtures']  errno: -4048.  code: 'eperm'.  path: 'c:\gitdevelopment\chokidar\test-fixtures' }unlinkdir c:\gitdevelopment\chokidar\test-fixturesadddir c:\gitdevelopment\chokidar\test-fixturesunlinkdir c:\gitdevelopment\chokidar\test-fixturesat this time chokidar is actually crashed and does not report changes anymore.,negative
paulmillr/chokidar,mocha,2014-11-26T14:17:32Z,hm you are right. i did not see this. however i think there is still a bug. if i set ignorepermissionerrors to true. i still see the error bubbling to my error handler. i would not expect this.,negative
paulmillr/chokidar,mocha,2014-11-28T19:11:13Z,thanks!,positive
Azure/autorest,standard,2016-06-01T18:52:58Z,as we move to standardize error messages. this will be needed to define where the message resides inside of the body.i think this also goes hand-in-hand with the work toward polymorphic discrimination based on error code (from the error body).,negative
tessel/t2-cli,coveralls,2016-09-12T17:54:21Z,i added coveralls in an effort to start doing code coverage checking. but never finished.,neutral
airbnb/javascript,eslint,2016-02-16T09:24:26Z,i'm going to close this for now - it would be inappropriate for a plugin or shared config not to have a software-level dependency on the thing it's configuring or plugging into.,neutral
airbnb/javascript,eslint,2016-02-20T18:00:07Z,eslint-react was published yesterday :),neutral
airbnb/javascript,eslint,2016-02-21T10:24:05Z,how to allow `console.log()` in .eslint?. how to allow `console.log()` in .eslint?i tried``` js"rules": {    "comma-dangle": 0.    "no-console": 2  }```but don't work.,neutral
airbnb/javascript,eslint,2016-02-21T10:33:54Z,thearabbit please read the `eslint` docs for more information.,neutral
airbnb/javascript,eslint,2016-02-22T00:44:39Z,personally i don't find it visually cluttering to have the rules present. nor the word "eslint" or "jscs" - and in fact i might be grepping through all "eslint" instances in the doc if i wanted to review things.,negative
airbnb/javascript,eslint,2016-02-22T19:38:40Z,> instead of typing out the whole url. the issue number can be referenced with just `[#748](airbnb/javascript#748)` - let's do that.> > for all the eslint rules. let's use named footnotes to link to them (the rule name is ideal) rather than typing the long urls inline (and likely duplicating them as well)added something like footnotes and linked to them and shortened the links to issues.,neutral
airbnb/javascript,eslint,2016-03-02T08:20:44Z,hi ljharb — thanks for the quick reply. upon further digging it looks like the issue might have been within `eslint` itself. since the airbnb code isn't referenced at all in the stack trace. super strange. sorry for the hassle!,positive
airbnb/javascript,eslint,2016-03-02T08:21:35Z,i'm going to close this for now. then - please feel free to link it to an eslint issue if one is filed,positive
airbnb/javascript,eslint,2016-03-03T17:50:24Z,according to the eslint docs. setting the "vars" option should still warn about unused local vars - it seems that error is correct. and that var is unused. meaning that line could be deleted and your program would work the same.,neutral
airbnb/javascript,eslint,2016-03-03T18:42:04Z,artptr it's for both. but `eslint` runs with node. and assumes your files are run with node. you should be using browserify or the like to wrap your files anyway such that nothing in your browser runs directly in the global scope.,neutral
airbnb/javascript,eslint,2016-03-03T18:48:26Z,right - this isn't a bug. because in 2016 everything should be run in a node context. and only after running through browserify/webpack should it be shipped to a browser.you're certainly free to override the env settings in your eslint config. however!,neutral
airbnb/javascript,eslint,2016-03-08T16:49:32Z,this might be an issue with `gulp-eslint` - what's your `npm ls` look like?,neutral
airbnb/javascript,eslint,2016-03-08T21:51:36Z,nvm. it's a eslint error.,negative
airbnb/javascript,eslint,2016-03-08T21:53:50Z,thanks. could you link to the issue on babel-eslint?,positive
airbnb/javascript,eslint,2016-03-08T23:13:10Z,i'm also getting this error using plain eslint. commenting out the 'no-labels' line from rules/best-practices.js suppresses the error as a temp workaround.,negative
airbnb/javascript,eslint,2016-03-09T19:54:45Z,you should reference the eslint rule (which in this case is also `react/jsx-no-bind`).,neutral
airbnb/javascript,eslint,2016-03-10T21:37:35Z,thanks - this isn't in the guide. so could we add a section about it that references the eslint rule?,neutral
airbnb/javascript,eslint,2016-03-11T10:10:04Z,object spread. are you using object spread? i had to add:``` js  "parseroptions": {      "ecmafeatures": {          "experimentalobjectrestspread": true      }  }```to my eslintrc to have it working. thanks,neutral
airbnb/javascript,eslint,2016-03-15T10:06:36Z,but we are using es7 static properties now. and eslint still complains about it!,negative
airbnb/javascript,eslint,2016-03-15T14:13:35Z,fix react/prefer-stateless-function link in eslint changelog. pretty straight forward as the headline already describes this pr.,positive
airbnb/javascript,eslint,2016-03-15T16:05:47Z,tomasz-szymanek that's something you'll need to enable in your own eslint config - feel free to file an issue on eslint's repo if you're having trouble. (you probably need the "babel-eslint" parser),neutral
airbnb/javascript,eslint,2016-03-16T12:25:28Z,i suggested solution in sibling issue #588. but will duplicate it here:i'm suggesting to eslint-config-airbnb in three packages:- `/base` will become `eslint-config-airbnb` with removed `/legacy` inside- `/legacy` will become `eslint-config-airbnb-legacy`- `eslint` will become `eslint-config-airbnb-react`. extended by `eslint-config-airbnb` with `eslint-plugin-react` in deps. (not sure eslint will pickup `eslint-plugin-react` from here. but it should)so every consumer will get proper amount of rules and deps,negative
airbnb/javascript,eslint,2016-03-16T17:18:37Z,`eslint-config-airbnb` will always contain react. since it will always reflect what airbnb uses.,neutral
airbnb/javascript,eslint,2016-03-16T20:47:14Z,ljharb thats fine. then just add `eslint-plugin-react` to deps.but please make reactjs-agnostic config for pure nodejs consumers and name it like `eslint-config-airbnb-base`.my case is that i'm developing pure commonjs modules and i would like to use airbnb config. but i dont need react specific rules and i believe i'm not alone,positive
airbnb/javascript,eslint,2016-03-16T20:57:50Z,ljharb thats great. not quite sure how that will work with eslint naming convention but if it will work out pls go ahead,positive
digitalbazaar/forge,mocha,2013-07-04T01:48:15Z,consolidate and write new tests using mocha. the tests in forge are lacking and split up using several different libraries (and custom code). they need to be unified and able to be run in both a browser and node.js. we should move all of the tests over to using mocha and write new tests.,neutral
okTurtles/dnschain,mocha,2015-02-04T06:30:14Z,this was merged into `mocha` which has been merged into `dev`. so closing this.,neutral
okTurtles/dnschain,mocha,2015-02-08T06:57:27Z,this is coming in `mocha` branch. will be pushed and merged into `dev` soon.,neutral
okTurtles/dnschain,mocha,2015-02-08T07:03:36Z,this is closed in `mocha` via 1ab44b1 and will be merged soon.,neutral
okTurtles/dnschain,mocha,2015-02-09T04:16:07Z,wemeetagain nevermind. i confirmed that's working (needed a small fix. done in `mocha`. so you don't need to worry about it).,neutral
angular/angular-phonecat,selenium,2015-04-15T16:25:34Z,tintin34 solution also worked for me.i ran `npm run update-webdriver` after and received:`selenium standalone is up to date.chromedriver is up to date.`,neutral
angular/angular-phonecat,karma,2014-03-08T21:26:41Z,thats great wayneseymour . in a repo that i've created for following the tutorial i implemented the e2e tests of the tutorial with protactor. here's the pr with the addition of protractor to the project: cirocosta/angular-tutorial-following#5 . it would be better if i had done everything with karma-ng-scenario before so that the diff would be better instead of having done only some steps with it and then changing to protactor.,positive
velesin/jasmine-jquery,jasmine,2013-07-14T09:20:47Z,what's the difference between this and `jasmine.getfixtures().fixturespath = 'my/new/path';.`?,neutral
velesin/jasmine-jquery,jasmine,2013-07-14T09:23:50Z,to be fair. i should have read the readme more thoroughly before sending this pull request. i missed the fact that i could do `jasmine.getfixtures().fixturespath = 'my/new/path';` ... but i think that the methods i added are still useful. if you look at the code. i added methods to modify the attributes of all types of fixtures.,negative
velesin/jasmine-jquery,jasmine,2013-07-14T10:06:46Z,no. this pr's no good. there's already `jasmine.getfixtures().fixturespath = ...`. so that solves the problem you had. but you added being able to set the containerid of html fixtures. but i don't think that's useful and nobody has ran into needing that yet so i'm closing this.,negative
velesin/jasmine-jquery,jasmine,2013-07-19T22:59:20Z,added tohaveselected matcher for determining if a jquery selector selects some given elements. i was writing some tests and noticed we have tocontain. which uses $.find under the hood. but this only checks for children in the selector. while i was trying to determine if a selector that selects many elements (via .add) selects a given element or not.hope i just needed to write the matcher and specs. let me know if anything looks out of place! and thank you for providing this great library for jasmine. :tada: :),positive
velesin/jasmine-jquery,jasmine,2013-07-25T22:03:42Z,thanks for the feedback! i implemented your suggested changes except for #2. because i am not sure i fully understand what you mean.in the test i create a few elements and select them in various ways. and then verify if a given selector or element is contained within those various selectors. to me. it looks like i am verifying it against only selectors and not elements. as none of them use array bracket notation or the get function to get or pass the underlying elements. which now that i look at it they should in addition.it may just be a communication problem and what i'm calling selectors is what you are calling elements? ultimately this matcher and tocontain just use .filter and .find under the hood. so they both should (by virtue of jquery). accept selectors or elements. totally down for whatever change. just want to make sure we're on the same page first. :),positive
velesin/jasmine-jquery,jasmine,2013-07-25T22:48:17Z,changed the name again because the name's too similar to the existing `tobeselected` so now it's `tobematchedby` which makes its intent clearer anyway.,neutral
velesin/jasmine-jquery,jasmine,2013-07-26T01:10:44Z,yes! perfect choice of name!! :+1:,positive
velesin/jasmine-jquery,jasmine,2013-07-26T12:35:56Z,thanks for the `jasmine.getfixtures().fixturespath = 'path';` tip. guys!,positive
velesin/jasmine-jquery,jasmine,2013-08-02T04:10:34Z,add support for jquery object equality. ### i would like to see support for testing the equality of jquery objects.currently. asking jasmine if two jquery objects are equal (through the function `jasmine.getenv().equals_(object1. object2)`) will fail even if those jquery objects are referencing the same dom element.this is annoying because it causes functions like `tohavebeencalledwith` to not work as expected when passing jquery objects as arguments.#### this pull request adds support for checking if two jquery objects are equal. as a result. functions like `tohavebeencalledwith` will work as expected when passed jquery objects.to be clear. a jquery object is typically something returned by `$('div')` for two jquery objects to be equal means that:- if objects with only one element are compared. both objects reference the same dom element. even if they have different selectors- if objects with many elements are compared. both objects reference the same set of elements. no more. no less,positive
ninjadev/nin,eslint,2016-11-09T21:22:31Z,switch jshint to eslint in frontend. eslint has more plugins (for angular for instance) and better es6 support than jshint,neutral
ninjadev/nin,eslint,2016-11-13T01:56:20Z,lint remaining backend files. the lint command in package.json is updated so that the eslint runs withbackend as cwd. this ensures that it loads the correct .eslintignoretemplates in the generate folder are ignored since they're not strictlypart of the backend. but templates for user projects.also. one lint error remains. but it's there because the feature isstill broken so i figured it serves as a nice reminder to fix thefeature.,negative
videojs/video.js,standard,2016-06-21T18:49:52Z,unfortunately. i'm unable to test this so cannot accept the changes. considering that google chrome will soon be disabling flash by default really soon. i don't think it's a huge loss.,negative
videojs/video.js,standard,2016-06-22T18:32:59Z,same issue. it happens when you use fastclick plugin or something like that (framework7 ect)so. the **solution is**: remove fastclick or just disable it on video container (better),positive
videojs/video.js,standard,2016-06-23T13:07:28Z,i wasn't using fastclick. and not having a fullscreen button wasn't an option for me. the way i ended up fixing it was making a slight tweak to video.js. the function vjs.player.prototype.requestfullscreen first checks if the browser supports fullscreen at the element level. and if not then checks if the native controls can go fullscreen. and then as a last ditch it stretches the video element to make it fullscreen. apparently on android it supports one of the first two conditions (i don't remember which. maybe both). but the fullscreen doesn't actually work. so. i removed the first two conditions. forcing it to stretch the video. and that worked like a charm. better still. it looks and works exactly the same on all platforms/browsers.,positive
videojs/video.js,standard,2016-06-23T14:53:47Z,the control bar is just a div element. you can modify it to  your hearts content using standard dom manipulation.,negative
babel/babel-loader,eslint,2016-09-07T15:51:03Z,that is an error from eslint. not from babel-loader. your linter config has likely not enabled support for es 6 modules.,neutral
babel/babel-loader,eslint,2016-09-07T15:57:51Z,it would be nice to have a eslint: babel: for errorsbut yeah since it has `1:2 error` it's definetely eslint,negative
jerairrest/react-chartjs-2,mocha,2016-11-19T15:16:18Z,rendering improvements. add lodash.isequal dependency and remove legacy codeadd mocha/enzyme/chai/sinon and remove jestadd spec and remove old spec,positive
prettier/prettier,eslint,2017-03-18T15:02:01Z,i realized class properties were missing their type annotation (it's incredibly how easy it is to miss such details when there are format changes as well) so this pr now also depends on eslint/typescript-eslint-parser#191,negative
prettier/prettier,eslint,2017-03-19T13:25:50Z,all prs to typescript-eslint-parser have now been merged and the tests are now passing!i am working on a new batch of tests but that will require some more prs upstream so i can delay those to another pr if you prefer.to help review i have avoided squashing the commits but when you feel fine i can do so. i would like to ask for ideas on a better commit message though :),positive
prettier/prettier,eslint,2017-03-19T13:55:34Z,it's actually looking like integrating ts support will be pretty nice. `typescript-eslint-parser` does a great job of translating the ast and with very small changes in prettier jameshenry was able to parse all the current js tests with the typescript parser in pr #915 for ts specific syntax. i have an initial pr open that start that work #1033. again the changes are small and it's mostly just wiring up ts specific nodes to already existing code.typescript do have a lot of strange syntax but most of it is small and contained and do not effect the formatting very much. it will of course require some work and take a few iterations to become usable in real projects but it can absolutely be done and maintained.,positive
prettier/prettier,eslint,2017-03-27T15:12:33Z,> so maybe this could be done by running eslint --fixnever mind. i just saw that this rule is not auto-fixable.,neutral
prettier/prettier,eslint,2017-03-27T21:53:06Z,yeah. unfortunately we're not going to get into rewriting the ast. sorry! that eslint looks good and should tell you where to need to cleanup.,negative
prettier/prettier,eslint,2017-03-28T08:57:19Z,> that eslint looks good and should tell you where to need to cleanup.  fair enough. thanks.,positive
prettier/prettier,eslint,2017-04-10T10:48:13Z,i find ```jsconst value = condition1  ? value1  : condition2    ? value2    : condition3      ? value3      : value4;```to be easier to follow.of course. i haven't written a nested ternary for a couple of years (eslint would tell me off). so this doesn't really impact me,neutral
prettier/prettier,eslint,2017-04-11T16:05:01Z,the basic one is when you embed a long url as a string that's a lot longer than 80 chars. people really should not be using the max-len eslint rule for prettier. you won't be able to do anything about it. but you shouldn't care! there's not much gain in being so strict about literally less than the max line length. and in fact hurts readability in some cases.this is another case where i think it will hurt readability. but i can't give you a concrete example until i use it and hit it in real-world code. other rare cases are when you are really indented and prettier just can't break up anything else (a long variable name just goes over). ideally you wouldn't be that indented. but sometimes it happens and it's ok.again. i really think we should recommend turning of the max-len rule with prettier.,negative
prettier/prettier,eslint,2017-04-12T06:21:29Z,while `stylefmt` is amazing. it is an addon to stylelint. kinda like eslint and its autofixing in 2 separate projects.one thing i really like about prettier is that it's very opinionated. sharable configs works great in eslint as well (look at the ridiculous popularity of airbnb's config (over 50k stars compared to eslint proper's 7k...)). but prettier still improved vastly over that concept by enforcing consistency all over.not saying prettier should do css stuff. but i'd prefer if current `stylefmt` was just `stylelint --fix`. and `stylefmt` itself became more like prettier then a frankenstein prettier-style which invokes both could be born. like lydell hints to above.,positive
prettier/prettier,eslint,2017-04-13T20:13:45Z,just a side-note: prettier is removing the inner parentheses also. which causes an eslint "no-mixed-operators" error on my setup.,positive
prettier/prettier,eslint,2017-04-13T20:47:41Z,robwise i've bumped into performance issues stacking prettier with eslint --fix. so today i'm just using eslint. while my mac holds up well and i don't really "feel" sluggish while typing in vim (as i'm sure no one does with current macs) -- cpu does spike. the laptop heats up. and battery drains much faster.today. i'm using neoformat/ale with vim using `eslint_d` that spawns only once (like proposed here) and that results in lightning fast lints. and code formats. out of the lot of the editors i use (vscode. atom. vim) - vim will take up the least amount of cpu and battery. although it does all integrations out of javascript land (unlike atom. for example).i think using one `server` process or at least supporting that mode is a lesson learned for many ide architectures by now. and i would personally welcome it even though there's no real 'proof' of lack of performance.,negative
prettier/prettier,eslint,2017-04-14T10:29:43Z,don't unquote reserved words used as object keys. prettier removes unnecessary quotes from object keys.unfortunately. it also removes quotes that eslint deems necessary.a typical example is this:```<div  style={{    float: 'left'.  }}/>```i have not witnessed this to actually break anything. but i think it would at least be good practise to preserve / add quotes around reserved words used as object keys.,positive
prettier/prettier,eslint,2017-04-14T10:53:04Z,that's only an issue in es3 envs (ie8 and older). you should adjust you linting. and if you really need it to be quoted. make babel add the quotes,neutral
prettier/prettier,eslint,2017-04-14T11:24:21Z,i'm not a collaborator here. just a user like you  what prettier does here is aligning the closing brace to where the opening brace comes from (`options.trigger.split(' ').filter(trigger => {`) instead of the opening `?` in the ternary. i think that prettier's current behavior correct. while eslint thinks it should align with the `?`.this looks like eslint/eslint#6606. so i think you either will have to disable the eslint rule (which makes sense in a prettier context) or add `// prettier-ignore` above it so prettier leaves it alone.or see if the maintainers agrees with you that the current behavior is wrong.,positive
prettier/prettier,eslint,2017-04-14T12:49:39Z,it's not a bug for me. that code is not serious and is totally ridiculous. you shoul separate it into separate functions and can be banned with 2 eslint rules (im calling it no nested hell),negative
prettier/prettier,eslint,2017-04-14T14:39:52Z,`eslint-disable-line` does not work well with prettier. we are inherently going to move around your code. where should we put it if we end up breaking that expression across multiple lines?`eslint-disable-next-line` usually works pretty well. so you should use that instead.,neutral
prettier/prettier,eslint,2017-04-14T15:07:01Z,agreed. closing this as this it out of scope and more of an eslint issue.,neutral
prettier/prettier,eslint,2017-04-17T14:48:07Z,it looks strange to me too. like it's floating and not clear what it's attached to. you shouldn't be using any eslint formatting rules with prettier. eslint formatting failures don't really have any bearing on our decisions. we do try to look at popular styles like airbnb to inform our decisions. but that's it.closing as we're not going to change it unless there is a lot of noise from the community to do so.,negative
prettier/prettier,eslint,2017-04-17T15:12:39Z,prettier should work to make code readable and consistent for humans. not tools. can't people needing the quotes just add `// prettier-ignore`? or if prettier is changed. at least behind an option. i don't want to re-add eslint rules i removed when i started using prettier,positive
NodeRedis/node_redis,mocha,2015-07-12T01:00:38Z,raydog i was also thinking it would probably be worth moving to mocha. or maybe node-tap which isaacs' has been putting a ton of work into.i'd be happy to take that on as round two of this work. i think it can be done separately though?,neutral
NodeRedis/node_redis,mocha,2015-07-12T02:35:18Z,erinspice raydog. i've managed to get stuff running on travis. i'm going to go ahead and rebase/merge this. but let's open an issue to discuss moving things to mocha.,neutral
NodeRedis/node_redis,mocha,2015-07-12T20:51:41Z,bcoe how do we add coverage reporting to the mocha tests?,neutral
NodeRedis/node_redis,mocha,2015-07-12T20:53:27Z,erinspice `nyc mocha`. rather than `nyc ./test/run.s`. once you've got everything moved over -- coverage should stay at `86%`. which is a good test that the port went well.,neutral
NodeRedis/node_redis,mocha,2015-07-12T21:30:21Z,erinspice isaac built that part of nyc. it's amazingly clever -- looks for the node bin and replaces it with a new node-bin that adds coverage tracking.as a representative from npm. can i vote for using package.json's scripts stanza rather than grunt for kicking off our mocha suite? once you delete the weird .sh file i added. i think you should be able to simply run `mocha` -- seems like the tests were written in a pretty darn portable way. even if rolling their own test runner.,positive
arrowjs/ArrowjsCore,mocha,2015-10-28T02:30:58Z,support unit test bdd.tdd. use mocha. to write unit test for every module,positive
ariatemplates/hashspace,sauce,2013-11-29T07:48:17Z,travis we should not even ask ourselves the question !!:+1: to experiment with saucelabs. it's something piuccio wanted to do a long time ago on ariatemplates itself.i need to dig. because we probably have an at account for that.,neutral
ariatemplates/hashspace,karma,2013-11-26T14:50:47Z,build simplify. b-laporte mlaval i had 1h of downtime so took a stab at testing thing. my vision of the things is:- run compiler tests (node-based) on each build of the framework- runt runtime tests (browser-based) through a runner (my dream: karma + soucelabs)those 2 commits are going in this direction by moving all the tasks to grunt. which now is the one and only entry point to the whole build. also. those commits are removing hand-written tasks for code that exists in npm (mostly grunt tasks).,negative
ariatemplates/hashspace,karma,2013-11-26T14:52:46Z,mlaval i understand what you mean by global npm dependencies. but installing grunt-cli globally is how grunt guys recommend it to be used. the cli is very small and grunt itself is installed locally anyway.,neutral
ariatemplates/hashspace,karma,2013-11-28T14:03:21Z,b-laporte i've squashed 2 commits into one and rebased it on top of the current master so it should merge cleanly now.,neutral
ariatemplates/hashspace,karma,2013-11-29T15:05:00Z,landed as 47fe87d02343444b0a59cc399acff4af7dc30610,neutral
caolan/async,mocha,2015-06-13T23:18:11Z,this is a tricky problem because `q` and other promise implementations wrap the `onresolved` handler in try/catch. which is a bad idea if you call a callback in the handler. for the exact problem you're running in to.one thing to do would be to defer the actual `done()` call:``` jsbrowser.init({browsername: 'chrome'}).then(function ()  {  settimeout(done. 0);});```that way. the `mocha.run()` call gets a new call stack and the error will bubble all the way up.,negative
Dash-Industry-Forum/dash.js,mocha,2015-12-03T18:08:44Z,great job dima.. ill pull in and play with mocha a bit.,positive
ericelliott/cuid,sauce,2015-07-05T02:48:47Z,yep! almost there. just need to switch the tests from tape to blue-tape. any objection to writing the saucelabs integration yourself? i assume you have an account already. so it would probably make more sense for you to set it up with your account.,neutral
nodebox/opentype.js,mocha,2015-04-27T13:47:29Z,hey. how about adding tools like `mocha` and `chai`. and then starting making unit tests when new features added? :),positive
i18next/i18next,karma,2015-11-16T19:09:53Z,default value for all missing keys. is it possible to use default value for all missing keys? i am wring tests with karma and jasmine and i would like to use some default value for all i18next keys without a need to use language file or use of fixtures.i tried to use `parsemissingkey`. `missingkeyhandler` and `postprocess` functions to return some default value but without success so now i am wondering if it is possible to implement defaultvalue in some way? i cannot pass `defaultvalue` to each string as shown on i18next documentation page `i18n.t("key". { defaultvalue: "my text" });`.,negative
autoNumeric/autoNumeric,eslint,2016-11-18T02:07:58Z,add eslint support.. correct the code so it stays consistent throughout the file.remove the nested ternary operators.simplify some sequential multiple `if` statements.you can now run `npm run lint` to check for formatting errors.,negative
autoNumeric/autoNumeric,eslint,2016-11-18T22:33:36Z,complete the es6 and eslint support.. add array destructuring. arrow functions and the spread operator to improve readability.add multiple eslint rules (most of them based on the airbnb rules) while keeping the initial code style 'spirit' as much as possible. and correct the code accordingly.add an `isundefined()` helper function.extract the nested function `truncatezeros()`.change `let` variables to `const` wherever possible.correct unneeded character in the `autoget()` regex.clean ide-specific comments.,neutral
angular/zone.js,mocha,2016-10-19T15:28:49Z,all tests for zone now runs with mocha if you use "npm run test-mocha".i'm not sure about how you want the main and browser_entry_part to be.i did a little duplication to make the configuration easy. let me know if you want to me to change that.,neutral
angular-fullstack/generator-angular-fullstack,karma,2014-06-03T07:36:07Z,i had a look at the generator's source and i have to admit i have no idea where the karma.conf.js file is coming from. so this won't be trivial to solve for me. not sure where to go from here.,negative
angular-fullstack/generator-angular-fullstack,karma,2014-06-03T15:04:04Z,i can confirm dannybluedesign's solution. i copy-pasted the paths to the files array in the karma config and the test for mainctrl runs (and fails for me. because i altered mainctrl without adapting it's test...).i did not test whether or not all paths are required and can not tell if this is the right way to solve the problem or not. since i'm new to karma (and test's in web development in general).but for now it does the trick for me and i can start fixing my test. so thanks dannybluedesign!,negative
angular-fullstack/generator-angular-fullstack,karma,2014-06-15T04:21:56Z,melo0187 i did not figure out how `karma.conf.js` is generated behind the scenes yet. however. i think it's necessary to change somewhere to generate it into `test` folder. further more. it would be perfect if the `basepath` can be set as root (i.e. `..`). then all files configured as `files` can be resolved from root directory still (this would make the solution in #251 better).,neutral
namespace-ee/react-calendar-timeline,eslint,2017-05-07T00:47:07Z,code style → airbnb javascript style guide. airbnb javascript style guide is probably the most used eslint javascript code style. i would like to switch react calendar timeline to this style. what do you guys think. would someone be willing to help to switch it? since contributors are used to this code style i think it helps the community.,neutral
NativeScript/NativeScript,mocha,2017-09-08T08:17:18Z,housekeeping node tests. renamed to unit-tests. - `npm run unit-test`. will transpile and run all unit tests- `npm run unit-test-watch`. will chain tsc with watcher and run mochathe unit testing environment has been cleaned up.test watcher has been added.the tns-core-modules have been added as module path and tns-core-modules have been added as prefix so one can require `tns-core-modules/ui/core` or `ui/core` just like in {n} runtime.the `-common.ts` files have been cleaned up from platform specific types. so the compilation of the unit tests can be ultrafast (no compilation of platform declarations).,neutral
webpack/webpack,standard,2016-07-24T16:40:33Z,taion. you are suggesting contacting almost every lib owner and convincing them to publish absolute standard es6. vs getting webpack to acknowledge the transpilation pipeline? which makes more sense?which is most likely to succeed?,positive
webpack/webpack,standard,2016-07-24T18:55:06Z,babel and flow are part of each dependency's transpilation configuration which i am suggesting we should try to find a way to acknowledge.  to your second statement. you state a gross misunderstanding without any argument as a basis. it's difficult to discuss with you when you are making perhaps valid but unsubstantiated claims.transpilation is here to stay. and i only assume it will become more and more varied.  es5. es6. es7. the constant is not the transpiled artifact's standard. it is that we are transpiling. attempting to acknowledge a module's discrete transpilation pipeline is a viable option. albeit not an easy one. attempting to convince every single lib owner to transpile to es5 and 6. then 7. then 8 (over time). is a continous battle and a forever losing proposition. i think instead of trying to force the world forever to fit a standard (that changes). the community has spoken by adoption of transpilation. and we should try to find better ways to work with it.,negative
webpack/webpack,standard,2016-07-24T20:53:19Z,rollups jsnext is not a standard. they made it up. and it works for their usage. and i support that. if you were there at the time it was discussed there. posing the equivalent antagonist on the same premise. you would have argued that you can't do it because no one else does.we can create new ways of doing things. just as rich and the rollups contributors did. if our creations are genuinely useful. people will use them. if not. they die.it is quite reasonable that your transpilation pipeline can be expose in a reasonably standard way to execute it.instead of being an antagonist. i'd love it if you put your talent towards how we could make something great and useful. your suggestion that the world do exactly as you want is unlikely to come true. let's put effort into something that has a great chance of succeeding. shall we?,positive
webpack/webpack,standard,2016-07-24T21:18:20Z,there's a lot of tension here :grin:personally. i'd like to see an alternative standard. as a library author i don't want to impose my build target on consumers. it's not fair to call transpilation in this case an implementation detail. if i were using typescript or coffeescript... then fine. but when writing javascript. i shouldn't have to transpile my code for the lowest common denominator build target.that being said. it does seem that `jsnext:main` has already been defined by the rollup guys. trying to change that definition at this point would probably just be confusing. plus. there's merit to having a main field that just plain works w/o a build process.,negative
webpack/webpack,standard,2016-07-25T00:03:10Z,psirenny: do you use `stage-0` or `stage-1`? or anything at all beyond what's approved in standards? because if you do. you're not writing "javascript". you're writing code that _might become_ javascript at some point in the future – but might well not! consider what happened with decorators.thelarkinn: in practice that proposal works more or less like `jsnext:main` – the module build will still have to be transpiled to remove non-standard features if you use anything beyond `es2015` or `es2016`.,neutral
webpack/webpack,standard,2016-08-07T16:35:21Z,> sorry if i'm coming off annoyed soundingi didn't think you were annoyed. i thought you were trying to convince me that the documentation was ok because the standard for it was:> it seems clear to mesince it meets that standard. close the ticket and stop trying to convince an internet stranger of anything ;-)but then your second reply made it clear that you do want to support beginners with your documentation. and if that's the case then by all means use whatever terminology is appropriate to the document.all i'm trying to say is. when you're new you don't always learn everything linearly.  you may not have read the docs on `path.resolve` when you read the ones on `resolve.root`.  it is 100% possible to create (and certainly to inherit) a functional webpack setup with your only understanding being that "`path.resolve` is that function you pass your paths to before they go in to the config". and if that's your only understanding then it seems strange to see the docs say "don't use this string" moments before using that string.plus. as i said before. the specific language used ("don't pass something") is ambiguous enough that if you don't have a solid grasp of `path.resolve`. instead of interpreting it the correct way ("don't pass it directly as a value of the webpack config object") you can interpret it as "don't pass it to the magic function you always pass paths to when they go in to the webpack config".,neutral
webpack/webpack,uglify,2017-12-04T09:23:19Z,nirazul thanks for issuewebpack-bot move to webpack-contrib/uglifyjs-webpack-plugin,positive
webpack/webpack,uglify,2017-12-05T07:38:30Z,> do they now automatically set the mode (which would. if i'm understanding mode correctly. be equivalent to their current behavior)?yes`-d = --mode development --devtool cheap-module-eval-source-map``-p = --mode production --plugin uglifyjs-webpack-plugin`but this is subject to change as cli will move into webpack/webpack-cli.,neutral
webpack/webpack,uglify,2017-12-06T01:00:45Z,wouldn't this be one of those cases where a default one would be one less thing to configure? uglify by default. override with config.,neutral
webpack/webpack,uglify,2017-12-06T16:17:00Z,milesj issue still exists with latest `webpack3` and `uglify-webpack-plugin`?,neutral
webpack/webpack,uglify,2017-12-07T07:39:10Z,on the one hand when included in production mode uglifyjs can get outdated and it's more complex to use other minimizers.on the other hand it's easier to getting started and we avoid users publishing unminimized bundles to prodution....i guess the arguments pro inclusion have more weight. we can use `optimize.uglifyjs` for options/disable.best case: users only need mode: production to create an production build and no other options....,neutral
webpack/webpack,uglify,2017-12-13T17:48:30Z,switch on minimizing in production mode by default. <!-- thanks for submitting a pull request! please provide enough information so that others can review your pull request. -->**what kind of change does this pr introduce?**feature<!-- e.g. a bugfix. feature. refactoring. build related change. etc… -->**did you add tests for your changes?**existing tests<!-- note that we won't merge your changes if you don't add tests -->**if relevant. link to documentation update:**todo<!-- link pr from webpack/webpack.js.org here. or n/a -->**summary*** remove uglifyjsplugin* add `optimization.minimize(r)`* use uglifyjs-webpack-plugin by default<!-- explain the **motivation** for making this change. what existing problem does the pull request solve? --><!-- try to link to an open issue for more information. -->**does this pr introduce a breaking change?**yes<!-- if this pr introduces a breaking change. please describe the impact and a migration path for existing applications. -->**other information**,positive
webpack/webpack,uglify,2017-12-27T16:19:39Z,that's really interesting...could you try if there is still a difference if you disable uglifyjs?,positive
webpack/webpack,uglify,2017-12-27T16:21:19Z,for me there is no difference with or without uglifyjs.i wonder if comparing the working bundle vs the non-working bundle (with the only difference being the defineplugin) would possibly help narrow it down and allow me to eliminate any proprietary data?,neutral
webpack/webpack,eslint,2015-02-23T17:00:13Z,webpack is only responsible for the first line: `warning in ...`.the remaining message is generated by the eslint-loader. maybe you can pass a custom reporter there.,neutral
gsklee/ngStorage,karma,2015-05-14T11:40:25Z,this is now the case.,neutral
economist-components/component-footer,karma,2016-03-22T16:50:04Z,chrome launcher in deps. this component includes `karma-chrome-launcher` but it is unused.,neutral
prebid/Prebid.js,standard,2017-10-09T23:04:08Z,kitwestneat any update here?,neutral
prebid/Prebid.js,standard,2017-10-10T18:17:58Z,kir-roxot thanks for the suggestion. we accept prs. i think this could be easily added to the existing bid.,positive
prebid/Prebid.js,standard,2017-10-19T21:10:08Z,kitwestneat can you break out the changes into smaller pr's or try and rebase this? thanks.,positive
prebid/Prebid.js,standard,2017-10-24T18:08:23Z,out of page inventory/non-standard sizes. ## type of issuefeature## descriptionis there any chance it would be possible to specify strings that do not conform to `<width>x<height>` syntax? such as `out-of-page` sizes?,neutral
prebid/Prebid.js,standard,2017-10-26T14:23:20Z,anyone know what the convention is here? how does dfp handle it?,neutral
melonjs/melonJS,jasmine,2014-02-20T09:21:33Z,as a reminder i also previously added a `me.rect` jasmine test unit :),neutral
economist-components/component-cookie-message,karma,2016-03-22T16:49:44Z,chrome launcher in deps. this component includes `karma-chrome-launcher` but it is unused.,neutral
MindTouch/martian,eslint,2016-03-23T20:49:17Z,linter cleanup and some bug fixes found during integration. - added the `jasmine` environment to .eslintrc rather than listing every jasmine global- removed the `settings` param from the `pagebase` and `pagefilebase` constructors.  adjusted the subclasses accordingly- removed page.logpageview() as it is eventually going to be implemented in a `pageevents` module- other miscellaneous linter adjustments,negative
MindTouch/martian,eslint,2016-04-08T18:26:43Z,upgrade eslint and jasmine-ajax. test and syntax fixes. _reviewed by_: aaronmars _summary_:- eslint upgrade- test and syntax fixes,neutral
nodejs/citgm,eslint,2016-02-15T19:09:22Z,eslint broken on master. ```1) cliengine executeontext() should report oneverbose:                     | message when using local cwd .eslintrc:verbose:                     |      typeerror: path must be a string. received```looks related to #80,neutral
nodejs/citgm,eslint,2016-02-24T19:55:39Z,fixed!,neutral
react-materialize/react-materialize,mocha,2016-11-27T10:10:49Z,enhance test framework.  - nicer reporter (mocha) - adds jquery and materialize plugins for testing - adds test folder to linter runner - fixes some linting issues in tests,positive
vega/vega-lite,mocha,2015-11-07T07:23:58Z,wip convert to typescript. ## todo before merging- [x] get rid of all `.default`- [ ] ~~add todo for all `:any`~~ (we can enable tslint rule later to prevent any)- [x] eliminate weird method map- [x] namespace in  data.ts- [ ] make output js  tabbed by 2- [x] make mocha know about ts line no. - [x] make `countdisplayname` a constant - [x] rename module usages from `axis` to `vlaxis` to avoid name conflicts- [x] get rid of all `exports.`- [x] use an enum for x. y. col. row. ...- [x] use an enum types- [x] get correct son schema- [ ] code coverage in ts?## todo if we merge- [ ] describe the schema in ts- [ ] enable more tslint rules (and fix issues)  - [ ] replace `var` with `let` and `const`- [ ] fix istype in compass (and vlui. ps. vy if applicable),neutral
vega/vega-lite,mocha,2015-11-08T20:09:27Z,all tests passing. there are some refactorings/ annotations we can do but i'll leave those for later. let's make a decision whether we want to follow this typescript path or not.,neutral
vega/vega-lite,mocha,2015-11-10T06:45:30Z,> get rid of all .defaultyou mean in the tests?,neutral
vega/vega-lite,mocha,2015-11-10T06:48:51Z,> you mean in the tests?> in the main code for sure.   and in the tests (if possible).,neutral
vega/vega-lite,mocha,2015-11-12T22:33:26Z,kanitw i think we are ready. opinions?,neutral
vega/vega-lite,mocha,2015-11-14T00:27:28Z,yaay,neutral
pouchdb/pouchdb,uglify,2014-03-23T17:31:16Z,i would take out the uglify. unused code is just confusing. never need people to actually singularly run uglify eithercan you squash into one commit with the valid commit message. this looks good from initial look. will give it a test in a bit,negative
pouchdb/pouchdb,uglify,2014-03-23T17:49:07Z,done. i just wasn't sure if uglify was used for other purposes. but i removed it now.,neutral
pouchdb/pouchdb,mocha,2014-01-03T19:15:10Z,hah. yeah. i just saw the "it" and assumed i knew what it was. never even heard of mocha. apparently there's like 2 million javascript test frameworks now.,positive
pouchdb/pouchdb,sauce,2012-12-29T19:57:03Z,yeh looks like phantom does have websql supportwe definitely need to start looking towards getting the tests running locally (for that reason i wouldnt worry too much about getting the private saucelabs credentials set up)the last test run took 29 minutes. this one has failed due to a connection error. running the tests locally takes less than a minute but with saucelabs its closer to 6 minutes just due to the connection latency.phantom is cool but i dont think its particularly suitable for what we are testing against (end users browsers),negative
pouchdb/pouchdb,sauce,2012-12-29T20:35:53Z,do you know what it was/why? i just downloaded opera and ran the tests and everything passed. i say we merge regardless of travis/sauce failing...,negative
pouchdb/pouchdb,sauce,2012-12-29T22:54:22Z,given that we do not do too much work on the server and just need a static web server to serve the pages. how about the following.- all test pages are hosted on github pages - no more tunneling required. anyone can hit these pages to see the test suites. and so can the saucelabs browser- break down the test html into multiple pages (one for basic. one for replication. etc. each hitting a different database) . instead of one single big page. we can technically open tabs in saucelabs and test those multiple pages. - use phantom - that suports websql only for now.- use travis for node tests. - grunt-saucelabs now has support for running tests in parallel. we should start leveraging that.,positive
pouchdb/pouchdb,sauce,2012-12-30T01:20:44Z,yeh a few of those we can do straight away. gh-pages hosting could help a lot and the test files can already be split up. do we need to do anything to get parallel tests in grunt-saucelabs?,neutral
pouchdb/pouchdb,sauce,2012-12-30T02:55:48Z,axemclion could you update the saucelabs module to (could be an optional thing) not echo the url thats being run. i need to pass a username and password to saucelabs so the browser can be an admin,neutral
pouchdb/pouchdb,sauce,2013-01-11T22:28:33Z,out of order changes. these commits introduce tests and fixes for the issue i mentioned last night (#334) getting the wrong data during changes and query operations.  i've implemented the new changes across the idb and websql adapters. http is unaffected. and i'm not sure about leveldb - the tests seem to pass but i haven't looked into it yet.as with the previous pr. i can't get the saucelabs tester to work. but i've tested on safari. chrome. ff. and ios 6 mobile safari.,negative
emailjs/emailjs-imap-client,standard,2017-11-09T16:10:24Z,4 or 2 spaces. i don't care either. but it's a package deal and standardjs is a pretty good linter with a decent code style that works out of the box. so i'll take the 2 spaces :)i'll see to it that compatibility need not be unnecessarily broken. it the socket shim causes problems. i'll think about removing it. downside is the cost of having to rewrite the socket code. let's cross that bridge when we get there :),positive
angular/protractor,jasmine,2016-01-21T11:48:55Z,but you do realize that it's rather pointless to work around everything being asynchronous when all you need is a synchronous script? when writing tests. you don't need them to be event-driven. you are not writing a server. you are not writing a gui app. you are writing a test that executes mostly top-down. and if you for once forget that protractor only creates an illusion of being synchronous (which is easy). and then try to mix it with other synchronous (or non-protractor asynchronous) code. it's going to bite you.never mind that most stack traces produced by protractor+jasmine that i have seen have _never_ pointed me to a line in my script that caused the failure in the first place. which makes debugging hard. which makes cost of tests skyrocket. which makes it easy to forget that tests are an auxiliary tool and must be as simple and unintrusive as possible.i still want a truly blocking protractor. should i fork it instead?,negative
angular/protractor,jasmine,2016-01-26T17:30:53Z,juliemr. how is this ranking in your backlog? it's causing me some real pain and i can't find satisfactory solutions. i couldn't get the `afterall` hack to work either. so i'm at a loss.,negative
angular/protractor,jasmine,2016-01-26T19:04:52Z,it's unlikely to happen soon because it's dependent on the jasmine team.  i assume the plugin hack also didn't work for you?,negative
angular/protractor,jasmine,2016-01-26T19:14:40Z,yeah... on that note. am i the only one who thinks jasmine was a seriously poor choice for protractor? (not suggesting mocha would have been any different).,negative
angular/protractor,jasmine,2016-01-26T21:40:46Z,a lot of people like the jasmine _api_. i don't mind it. but protractor had to patch jasmine to make it all work. and clearly it hasn't patched it enough. that's what i meant: jasmine was never meant to be used in these ways; that's why i think it may have been a really bad choice.jasmine expects many things to be synchronous (describe calls. it calls. reporter callbacks). and protractor needs to jump over hoops to make those work asynchronously. and since end-to-end testing falls outside jasmine's core purposes. we're stuck in this situation where it's unlikely that we'll get the upstream features we need anytime soon.(and yes. you can use any other framework you like. but jasmine is the default. and i didn't expect to find so many problems with the default. official choice).,negative
angular/protractor,jasmine,2016-02-05T21:37:17Z,execute jasmine tests in parallel. i have a single spec file with four jasmine tests. like below```describe("a suite". function() {  it("test1". function() {describe("a suite". function() {  it("test2". function() {describe("a suite". function() {  it("test3". function() {```i have a requirement to execute the tests(within a single file) in parallel. to minimize the execution time. i tried  specifying the capability like below:```  multicapabilities: {    split: true.    maxsessions : 2.    capabilities: [{      browsername: 'firefox'.      count: 2    }]}```but it doesn't workout. do we have any option to share the tests within a spec file...like `shardspectests`?,negative
angular/protractor,jasmine,2016-02-05T22:02:21Z,this is not possible at the individual test level currently. we can add a feature request for this but i'm not sure of the timeline.,neutral
angular/protractor,jasmine,2016-02-07T16:15:02Z,thank you. sjelin looks like #1944 will solve all our problems. is there a release date yet? edit: by the way your waitplugin.js works for me. i resolved the promise in the oncomplete() function. thx!,positive
angular/protractor,jasmine,2016-02-08T17:26:59Z,there hasn't been any more activity on this so going to go ahead and close. feel free to submit a pr or a feature request! :smile:,positive
angular/protractor,jasmine,2016-02-08T20:54:52Z,no timeline on when #1944 will be released.  glad `waitplugin.js` worked for you!,positive
angular/protractor,jasmine,2016-02-08T21:00:11Z,thank you ...will wait for the feature to be added,neutral
angular/protractor,jasmine,2016-02-16T13:33:17Z,can we change rootelement through jasmine spec. as per juliemr  commented on the issue #1056 you can specify which element to use angular from using rootelement in the config. but there's currently no way to change this part way through a test. i can't tell from your description if that's what you want to do or not. but if you just need to test one part of the app then just use rootelement set to an appropriate selector.,neutral
angular/protractor,jasmine,2016-02-16T17:07:02Z,this sounds like a race condition with jasminereporters and `restartbrowserbetweentests`. could i get you to create a small sample repo that reproduces this? that way we can try to investigate what exactly is going on and eliminate any extraneous factors. thanks!,positive
angular/protractor,standard,2016-01-29T19:56:44Z,another advantage would be that we could standardize this across different driverproviders.,neutral
angular/protractor,selenium,2015-01-27T18:20:20Z,jeffbcross can you elaborate on why webdriver manager solves this?  i'd also like to keep the browser open between runs.,neutral
angular/protractor,jshint,2015-08-17T01:32:36Z,chore: fix jshint errors blocking npm test. to get `npm test` to run again. some cleanup was necessary. note this includes a change to the jshint config allowing `eval`. rather than rewriting the `wrapwithhelpers` function in `lib/clientsidescripts.js`.refs #2398,negative
angular/protractor,karma,2015-11-24T19:40:18Z,it is odd that karma can run the file while protractor can't.  this is still an issue with node though so i'm going to close it,negative
ripple/ripple-lib,eslint,2015-01-16T00:07:00Z,use eslint. remove jshint,neutral
ripple/ripple-lib,eslint,2015-01-16T00:08:42Z,lgtm,neutral
visionmedia/superagent,sauce,2014-11-12T06:38:17Z,make browser tests run via zuul. actually make the browser tests run and pass in chrome and firefox latest.things to do for repo admin after this is merged:- create saucelabs credentials- set secret env vars in travis.yml file (i can explain if needed)- add zuul to `make test`,neutral
tapjs/node-tap,mocha,2017-04-22T21:18:27Z,so tap parser says one failed test. that i can't attribute to any test defined by me when running that last test that succeeds... something feels off somehow. didn't have any problems with mocha here...,negative
tapjs/node-tap,mocha,2017-04-23T11:20:33Z,found my issue. i was rejecting a promise for all commands that did not trigger :) i originally implemented this behaviour to do stuff in case a command is not specified.i did so with "q" back in the time when promises that were rejected but not catched did so silently without causing any trouble... now i switched to native promises (and from mocha to tap) and this behaviour popped up.so not tap's fault. sorry for your taking some of your time. mea culpa :),negative
gulpjs/gulp-util,jshint,2013-12-09T01:28:28Z,i'd love to redirect it to a file. and get my ci server to pick up said file as a build log asset.  i grant the easiest thing is to tell my build server to treat stdout and stderr as that log. but i've gotten some push-back when i suggest it.i also foresee the day when i'm asked to format it as xml. and passing in a reporter (similar to jshint) could be helpful.,positive
libp2p/js-libp2p-webrtc-star,sauce,2016-11-02T11:34:59Z,docs(readme): fix sauce link,neutral
benbria/coffee-coverage,mocha,2015-03-30T17:08:16Z,how can i specify the source directory?. i am using```mocha --require coffee-coverage/register \       --compilers coffee:coffee-script/register \       -r html-cov --bail test/ > coverage.html```how can i tell it to check all files in the `src` directory for coverage?,negative
benbria/coffee-coverage,mocha,2015-03-30T20:32:56Z,your tests in `test/` should `require` files from your `src` directory and test them.,neutral
benbria/coffee-coverage,mocha,2015-03-30T20:34:02Z,so if a `src/` file isn't `require`d. then it won't be covered?,neutral
benbria/coffee-coverage,mocha,2015-03-30T20:34:37Z,correct.,neutral
skulpt/skulpt,jshint,2014-06-23T09:19:25Z,+1i am using currently atom with jshint package and i get numerous errors especially how you access attributes like sk.builtin.['tuple'] and not sk.builtin.tuple. i also think the braces could help a lot. though i am currently using 2 space indent like node.js.,positive
skulpt/skulpt,jshint,2014-06-30T12:00:53Z,here is my thinking after the weekend.phase 1:  do the automated reformatting which will conform all the code to the style above.phase 2:  make the newly reformatted code pass jshint/jslint tests.  i think i'm hearing strong support for linting.i've got a basic jshint.json file ready that i will push right after i post this.  i just took the one from jslintmate which i think is pretty good.  i can push this up and we can run it if everyone agrees we can make a plan/hackathon to get all files into conformance.it would be pretty easy to add a skulpt.py task to run jshint standalone. and it ought to be part of our travis tests/pre-pr acceptance workflow.   but. i think we ought to just make jshint a dependency and make people install it on their own.  the reason being is that everyone has their own dev environment anyway. and many of the tools (pycharm. textmate. emacs. atom??) have bundles that allow you to incorporate linting into your everyday editing tasks.   i think all of those tools are configurable to allow you to use a particular .json config file for your project.,positive
skulpt/skulpt,jshint,2014-06-30T18:17:09Z,jshint options discussion. i don't know why your commits are showing up here bnmnetp. i can't rebase because somehow it starts replaying stuff from 3 weeks back.i did this pr to so we can have a conversation piece.i removed all the defaults and changed a few options to be a bit more strict all seem very sound choices to me but this being a discussion and all :smile:  this also adds a package.json so you can type `npm install` in the directory to install. seem logical to me also useful for travis.,negative
skulpt/skulpt,jshint,2014-06-30T18:21:36Z,i just did the jshint.json thing as a commit rather than a pr because making a pr for a one file push seemed silly.,negative
skulpt/skulpt,jshint,2014-06-30T18:25:52Z,i understand. but i really wanted to add some comments. and you can't add line notes in a repo only in a pr. so thats why i did this.,negative
skulpt/skulpt,jshint,2014-06-30T18:29:09Z,my changes aren't showing up...,neutral
skulpt/skulpt,jshint,2014-06-30T18:32:32Z,what changes?  where are you expecting them to show up?  i see a whole bunch of commits to this pr.,neutral
skulpt/skulpt,jshint,2014-06-30T18:34:50Z,there we go. the commits describe why i changed what i changed.,neutral
skulpt/skulpt,jshint,2014-07-02T12:26:27Z,i thought we were going to have virtual :beers:! eah13 help me out here :smile:. bnmnetp did you see any regressions when you do the auto formatting? and did you do the lint with the changes i sugested? i updated the .jshintrc file in my pr to include `newcaps: false`. i think i have sometime on my hands this weekend. are we are able to install node on our machines? because then we could add a jshint buildtask to skulpt.py. which we should do for travis anyway i think. we should agree on which settings we want to enforce in jshint before we start linting.,negative
skulpt/skulpt,jshint,2014-07-02T17:27:06Z,ah. the es5 option should just be removed from the .jshintrc file as it is on by default.  this gets rid of the error.,neutral
skulpt/skulpt,jshint,2014-07-02T18:47:53Z,you shouldnt have to specify the location of the .jshintrc,neutral
meanjs/mean,eslint,2017-08-14T08:30:12Z,fix(eslint): inconsistent spacing before function parentheses. defines `space-before-function-paren` eslint rule and changes files accordingly.resolves #1605,neutral
meanjs/mean,eslint,2017-08-14T20:44:32Z,coverage increased.. smh,neutral
meanjs/mean,eslint,2017-08-14T20:50:20Z,yeah i was lazy to figure out how to configure `eslint -fix` to catch correct config files and read correct directories/files. but i wrote a quick gulp task instead. ;-) essentially just `fix:true` option in our `eslint` task + some small fiddling to get it save changes over old files.,negative
meanjs/mean,eslint,2017-08-14T20:51:49Z,would you like to share you gulp task? i thought about doing the same yesterday :),neutral
meanjs/mean,eslint,2017-08-15T07:26:00Z,isn't `eslint-config-airbnb` used as part of applying the rules through eslint?,neutral
meanjs/mean,eslint,2017-09-05T10:50:38Z,mleanos i had to update atom. which somehow was stuck with updating itself. so i had to remove it and re-install. now it works how ever the rule is.now it works fine. but i would still change that `error` to `2` just for consistency with other rules. or change everything else to string codes as well (they seem to use only strings now at eslint docs).,negative
mozilla/nunjucks,jshint,2015-03-06T16:31:02Z,what you think whether add jshint first or not? if i add jshint first. the minor change will break it.otherwise. i take pr first. then add jshint after all of prs are merged.,neutral
mapbox/node-sqlite3,mocha,2013-05-08T20:15:24Z,pkoretic - this is running the existing mocha tests. or with a custom script? if the latter. please post it here.,positive
ariatemplates/ariatemplates,selenium,2014-10-02T12:21:07Z,almost all the failures are gone with the introduction of selenium-java-robot. i'm closing this issue. let's create new issues in case of new failures,negative
likeastore/ngDialog,karma,2015-03-07T01:46:12Z,new 'resolve' option for defining locals for dialog controller. see: _need resolves with the controller. #85_allow users to define di factories for dialog controller locals. i have emulated the specification and implementation of the angular-route $routeprovider 'resolve' option. hence it supports async values via promises. this feature is purely an enhancement. so it should not change or break the existing api in any way. to gain some confidence about this i have also added a basic testing setup to the project (karma + jasmine). this includes some rudimentary specs but is not comprehensive by any measure.here are what the docs look like for the feature:##### `resolve {object.<string. function>=}`an optional map of dependencies which should be injected into the controller.if any of these dependencies are promises. ngdialog will wait for them all to be resolvedor one to be rejected before the controller is instantiated.if all the promises are resolved successfully. the values of the resolved promises areinjected.the map objectis:- `key` – `{string}`: a name of a dependency to be injected into the controller.- `factory` - `{string|function}`: if `string` then it is an alias for a service.  otherwise if function. then it is injected using `$injector.invoke` and the return  value is treated as the dependency. if the result is a promise. it is resolved  before its value is injected into the controller.``` javascriptngdialog.open({    controller: function ctrl(dep) {/*...*/}.    resolve: {        dep: function depfactory() {            return 'dep value';        }    }});```,positive
likeastore/ngDialog,karma,2015-03-28T10:08:35Z,rur please rebase with latest `master` to have ability to merge this.,neutral
likeastore/ngDialog,karma,2015-03-28T20:56:11Z,voronianski ok. i'll do that in work on monday. are you comfortable with the test setup i have added?,neutral
videojs/videojs-contrib-hls,standard,2016-01-25T16:42:30Z,initial blacklist bug. this fix allows an initial playlist request to 404 without halting playback by saving the loader.state while error checking. tests have been added to the standard 'npm test' scripts.,negative
melonproject/protocol,eslint,2017-12-14T23:32:45Z,linting. **nb**: we will have to talk the linter rules when we go through our style again. since some of them may not comply with the style we have chosen. i went ahead and disabled those that we can't use (e.g. rule disabling usage of `now`). or that don't match our chosen style.we can always re-enable them later.### added- enforce eslint rules at build time- enforce solium rules at build time### changed- enable some ava testfiles that were ignored- restructure a bit to use the more modular files in `utils/`- update solium linter rules to comply with our style- make devchain script its own file. and run things more syncronously### fixed- linter errors in all js files- linter errors in all solidity files- fix #274 - fix sometimes-failing build when db does not exist- fix some missing or incorrect docstrings,negative
ModuleLoader/es-module-loader,mocha,2014-11-20T13:18:57Z,fix(test): result is not defined on error. just passing throw your code. i find it very hard to test...are there any reason not to use mocha or jasmine to deal with the test environment ?wouldn't it be cool to use mocha compilers to test the code in traceur and 6to5 for example ?,negative
ModuleLoader/es-module-loader,mocha,2014-11-20T13:23:40Z,just passing throw your code. i find it very hard to test...are there any reason not to use mocha or jasmine to deal with the test environment ?wouldn't it be cool to use mocha compilers to test the code in traceur and 6to5 for example ?,neutral
ModuleLoader/es-module-loader,mocha,2014-11-20T15:30:06Z,cool thanks,positive
ModuleLoader/es-module-loader,mocha,2014-11-20T19:57:27Z,chore(test): use mocha. following #167 and #247~~here is a start with half of the tests.wait for it :)~~,positive
ModuleLoader/es-module-loader,mocha,2014-11-21T07:55:06Z,nice! thanks for working on this. just let me know when it's ready for review.,positive
ModuleLoader/es-module-loader,mocha,2014-11-21T11:29:44Z,k almost ready,neutral
ModuleLoader/es-module-loader,mocha,2014-11-21T11:50:06Z,ready for review guybedford :+1:,neutral
ModuleLoader/es-module-loader,mocha,2014-11-24T12:50:05Z,ok let me see if i can get something going then too.are you meaning self-polyfilling for the loader or for promise? you think system should be separated?,positive
ModuleLoader/es-module-loader,mocha,2014-11-24T13:38:51Z,"self"-polyfilling for everything. what you think about separating the different key parts :- ie8 stuff //optional- promises- es6 loader api- systemloader layerinstead of writing everything in the same module.it comes from the idea that the polyfilling level comes with the browser level. in my case (i already have a polyfill layer for my targeted browsers and it's bothering me to see the _es6-module-loader_ having a partial duplicate of it on it's own...)so for me **es6-module-loader must be es6 loader api + systemloader layer only** :tada: what you think ?,negative
ModuleLoader/es-module-loader,mocha,2014-11-24T13:47:41Z,i agree with you in principles. but i'm not sure i see the practical benefit actually - the ie8 stuff is very minimal. it's just a few lines and not really polyfills as they are local functions and all the code has to take ie8 support into account.then there is already a build that separates the promises polyfill.then in terms of the loader v system loader. there is no use case to separate them either. loader and system go together.the goal is to make this very easy to get going - that's why we value coupling. already the `register` extension and others are separated into systemjs.what would you like to be able to do that you can't do today?,positive
ModuleLoader/es-module-loader,mocha,2014-11-24T14:16:07Z,i'm still trying to wrap my head around how the _es6-module-loader_ is working...i want to know what's actually necessary to make it work. and i think i'm slowly getting it know.thanks,neutral
ModuleLoader/es-module-loader,mocha,2014-11-24T14:33:23Z,sure. glad to hear you're getting into it. happy to answer questions where i can!,positive
ModuleLoader/es-module-loader,karma,2014-11-20T15:05:48Z,perhaps this is a windows path support issue for karma-jspm?,neutral
ModuleLoader/es-module-loader,karma,2014-11-21T08:00:25Z,i'll do some direct windows testing of karma-jspm next week to see if this could be the issue.,neutral
brave/browser-laptop,uglify,2017-10-16T04:39:08Z,disallow uglifyjs compression feature. we could save a lot of time (~50s. for a dev build) by just disallowing `uglify` compression feature. given "no whitespace" and symbol mangling accounts for most of the size reduction and are already built-in for `uglify`.,positive
keystonejs/keystone,mocha,2014-03-16T16:30:34Z,grunt + qunit,neutral
keystonejs/keystone,mocha,2014-03-18T16:18:20Z,grunt to start up server. and mocha to test with. you could also use a testrunner like karma,neutral
keystonejs/keystone,mocha,2014-04-11T13:23:19Z,a few remakes to note. just tried the last keystone with yo and it rocks ! but i have a few remakes to note:- user model:  what append if i remove it ?  it could be great if keystone create a default models if it is not declared.- flash message middleware:  what append if i remove it ? it can be a database issue if messages are pushed on session but never popped ?  a default behavior with the ability to customize it can be useful.- wath about yo sub-generator for usual module like blog. model. grunt. glup. test.... as i do not have to decide at the beginning what i need.  for instance `yo keystone:make-test` could generate a makfile with dependencies to jshint. mocha. blacket. and a simple tests for homepage with supertest in addition of my existing project.- is dotenv a dev dependency ?- i usually use supervisor for dev. maybe can be useful with a `npm start` config ?- for tests i need to run keystone in silence mode but can not find option.- if a model filed is required it must be initial or i can't create documents.,negative
dadi/api,standard,2016-08-03T10:22:18Z,just to add to this (sorry. i know it's closed) but if you were to go down the containerisation route with something like docker. then each application would essentially run in isolation. so there would be no conflict of environment variables. this is why heroku just use `$port`. i don't have much knowledge of the standard deployment of the dadi stack. but it'd make sense to me that you'd separate the services. either via containers or some other means. rather than running them all on the same box. 1990 style.anyway. sorry to necro the pr. just wanted to add my 2¢'s of docker.,negative
rooseveltframework/roosevelt-less,standard,2017-09-11T17:41:20Z,switch linting to standardjs,neutral
rooseveltframework/roosevelt-less,standard,2017-09-11T18:07:35Z,we finally pulled the trigger on standard huh?,neutral
rooseveltframework/roosevelt-less,standard,2017-09-11T18:10:19Z,the time has come. it was inevitable.,neutral
rwjblue/ember-template-lint,eslint,2017-10-03T11:46:08Z,fix new eslint errors. fixes eslint errors detected in pr #244. this should allow that pull request to be merged.i have just removed the useless escapes reported in the failed build of the other pull request.,negative
haraka/Haraka,coveralls,2014-09-02T22:18:37Z,coveralls: update icon to baudehlo repo,neutral
ember-cli/ember-cli-mocha,mocha,2016-12-01T19:38:29Z,html reporter never updates it's progress. and never sets the "finished" class on the #mocha div . we use this in our ci to tell when the tests finish. is there a workaround?,neutral
ember-cli/ember-cli-mocha,mocha,2016-12-01T19:57:48Z,fushi can you elaborate? i'm not quite sure what you're talking about,neutral
ember-cli/ember-cli-mocha,mocha,2016-12-01T20:58:38Z,the tests are done in that picture. but the completed percent shows as 0%. and the mocha window is still yellow. because <div id="mocha"> doesn't have class="finished",neutral
ember-cli/ember-cli-mocha,mocha,2016-12-01T21:41:31Z,fushi this looks like you are not using the default reporter. can you provide a repository to reproduce your issues?,positive
ember-cli/ember-cli-mocha,mocha,2016-12-01T21:50:12Z,that is the default reporter. as far as i can tell. i've done nothing but `ember install ember-cli-mocha` and `rm -rf node_modules && npm install`.then i run `ember serve` and browse to `/tests/`.can you show a screenshot of what you're expecting?,negative
ember-cli/ember-cli-mocha,mocha,2016-12-02T09:06:41Z,fushi i'm pretty sure that this has worked at some point in the past. but apparently it no longer does. i've been able to reproduce this in a fresh new app.,positive
ember-cli/ember-cli-mocha,mocha,2016-12-02T09:07:21Z,> we use this in our ci to tell when the tests finish.why don't you use `ember test` instead?,neutral
ember-cli/ember-cli-mocha,mocha,2016-12-03T00:50:41Z,we're moving from ember (non-cli) to ember-cli. and the current method of build/test for ci is the following:build on build serverdeploy to dev environmentrun selenium from build server using a grid of workers. against dev environment url with `&grep=` get arguments.i'm not opposed to changing that. i just don't yet know how we'd go about parallelizing test execution in the new way of doing things.the main issue i'm having is that i need the test results back on the build server. but i'm not sure i can run anything graphical there (and phantomjs doesn't seem to run any of the integration tests),negative
ember-cli/ember-cli-mocha,mocha,2016-12-09T13:44:22Z,use "ember-mocha-adapter" from "ember-mocha" npm package. /cc rwjblue teddyzeenny,neutral
bitpay/bitcore,mocha,2014-03-10T17:12:29Z,fix mocha tests. node tests were erroring out on this. need to have "./connection",neutral
bitpay/bitcore,mocha,2014-03-10T17:52:52Z,ack,neutral
bitpay/bitcore,mocha,2014-03-16T15:02:52Z,thanks for contributing. 282 tests break with this patch. you can run the tests by running "mocha". which you can get with "npm install -g mocha". can you investigate why the tests are breaking. and then issue an update to your pr with fixes?,positive
bitpay/bitcore,mocha,2014-03-16T15:35:08Z,that's pretty bad haha. i'll investigate later today. it may turn out that this patch is more trouble than it's worth and i'll just do things the right way so i don't have to moneypatch the parser. the problem is that my encoding is nonstandard to both the bitcoin protocol and this library - it isn't the library's problem to deal with.sorry for missing the mocha config. the class hierarchy of this project is kind of weird - it took a couple of days to understand where all the tentacles go. i think. on top of a paragraph in the readme on testing. it would be prudent to move all the code to a lib/ folder to separate it from the structural things like mocha and jshint config.i love the idea of bitpay getting behind the development of a library like this. and i think it has a lot of potential. with that said. i have more more unsolicited opinions if you're interested :) i was writing my own library but heard about this last week and decided to save some work for myself.thanks for taking the time to look at this - i plan on contributing more.,positive
qunitjs/qunit,eslint,2016-08-09T05:10:35Z,build: use eslint instead of jshint/jscs. work in progress: just fixing minor issues at this point.todos:- [x] fix indentation issues- [x] use `eslint-disable-next-line` comments instead of `eslint-disable-line` comments,neutral
paritytech/parity,eslint,2016-09-05T13:28:48Z,tomusdrw can we close this one?,neutral
paritytech/parity,eslint,2016-09-05T14:22:41Z,yes.  i think it will done as a part of jacogr parity-js project.,neutral
paritytech/parity,eslint,2016-09-13T13:15:32Z,jacogr `eslint` still complains about missing curly braces after `if`s. i thought i put this up for discussion.,negative
mapbox/mapbox-gl-draw,eslint,2016-11-16T17:43:27Z,updated linting rules. in an attempt to start cleaning up and standardizing draws code. i've adopted the mapbox-gl-js eslint rules with a few small changes.davidtheclark,neutral
mapbox/mapbox-gl-draw,eslint,2016-11-16T17:50:49Z,sounds like a good idea.,positive
angular/angular-cli,jasmine,2016-07-27T09:21:42Z,delasteve i have upgraded to cli beta 10 which contains angular rc4. removed the deprecated imports for jasmine (expect. describe. etc..) from the top of my spec files and i have the same problem as bluefalcon.,neutral
angular/angular-cli,jasmine,2016-08-17T01:45:34Z,same here.  the idea is that i want to generate a test (jasmine spec) for an existing component.,neutral
angular/angular-cli,mocha,2016-05-31T21:27:08Z,oh. i got response from deebloo. and thanks. so i will close this.> angular-cli using mocha for its own unit tests> jasmine for the generated project> that is the angular-cli source code> > out of the box the generated angular-cli projects are using jasmine,negative
angular/angular-cli,mocha,2016-06-05T21:13:59Z,robwormald - fair enough.  turns out bundling is typically the only problem i need help with - testing etc. is easy enough calling special purpose tools like mocha from npm's `scripts`.asynchronous module loading is a cool idea in theory but is one of those things that i've never actually needed in a real app. the bottlenecks have always been somewhere else. maybe one day i'll need it - who knows finally for the codegen stuff - i guess i need to wait to see it in action before i understand the value. it's not really in my feature list as a user of the framework right now.,positive
angular/angular-cli,uglify,2017-07-17T08:31:27Z,uglifyjs as a flag. hi.uglifyjs doesn't support es6. it's possible to use --prod during build but disabling just the uglifyjs part?i will eventually do a closure compiler pass after that. but i need to remove the uglifyjs part.right now seems that not possible standing to docs to specify that flag,negative
angular/angular-cli,uglify,2017-07-28T10:58:05Z,this isn't possible currently. you seem to be using a fairly custom build process. so i'd suggest you eject to have full control over it.,neutral
angular/angular-cli,uglify,2017-08-02T14:50:31Z,wip: refactor(angular/cli): directly add pure hints to imports. this updates the webpack dependency template to add the uglifyjs pure hint to imports with an import clause.  this eliminates the need to analyze the imports via a transform and then add the hints via a plugin.,neutral
angular/angular-cli,uglify,2017-08-10T18:07:55Z,/cc igorminar,neutral
bbc/bbc-a11y,standard,2017-02-10T15:53:23Z,link to docs in failures. link to guideline docs about each failing standard section.,negative
bbc/bbc-a11y,standard,2017-02-20T23:14:35Z,ignore invisible elements. ignores invisible elements (e.g. style="display:none") in various standards checks,neutral
bbc/bbc-a11y,standard,2017-02-20T23:23:40Z,fixed in 8e70b54b5f3f0d5451adb01a5ded9cc56fb610bf,neutral
peterramsing/lost,codecov,2017-05-06T08:32:03Z,add nyc and codecov for coverage reporting. **what kind of change is this? (bug fix. feature...)**chore**what is the current behavior (you can also link to an issue)**currently only `/lib` files are linted. and coverage isn't reported**what is the new behavior this introduces (if any)**will lint all files (`/lib` and `/tests`). and upload coverage report to codecov.io**does this introduce any breaking changes?**nope**does the pr fulfill these requirements?**- [x] tests for the changes have been added- [x] docs have been added or updated**other comments**,positive
Dogfalo/materialize,jasmine,2015-11-23T00:20:33Z,select tests. basic jasmine tests for select.still many things that need to be tested. but first we need to fix some select issues so our build still passes.,neutral
Dogfalo/materialize,jasmine,2015-11-25T14:02:18Z,plans to add keyboard testing soon?lgtm,neutral
Dogfalo/materialize,jasmine,2015-11-25T16:56:46Z,once select has more bugs cleaned up i'll add the more complex tests. the latest pr should have done most of it but just want to give it a while to make sure.,neutral
dropbox/zxcvbn,uglify,2015-08-08T18:55:26Z,hi all. been a while but i figured better late than never! i now have more time to work on `zxcvbn` and have a fun roadmap planned.tracker1. i mostly stuck with your suggestions. check the v3 release. i used `lib` instead of `dist` for bundled and compiled .js following the lead of other node repos. i've also removed the java dependency. switching to uglifyjs instead of closure -- turns out gzipped difference is negligible even though it's over a 100k difference uncompressed. from what i can tell this is solely because closure replaces `["a". "b". "c"]` with a `"a.b.c".split` over zxcvbn's large dictionary lists -- an optimization we could do ourselves inside data-scripts/*.py.dan,negative
pghalliday/grunt-mocha-test,mocha,2013-03-26T18:18:44Z,prevent mocha test failure from issuing grunt warning. when i'm running grunt-mocha-test in a watch. i want to be able to keep running it every time a file changes. if grunt-mocha-test calls `grunt.fail.warn()`. it'll kill the watch as well. unless i run the task with `--force`. is there a way to prevent this from happening? if not. would you be amenable to a pr implementing that?,negative
pghalliday/grunt-mocha-test,mocha,2013-03-26T18:43:33Z,are you using grunt-contrib-watch?there's only a couple of places where grunt.fail.warn is called and that's when there is a problem clearing the require cache and i've not seen that happen for a while. do you have an example of when you run into this?,neutral
pghalliday/grunt-mocha-test,mocha,2013-04-03T20:01:53Z,separate config for grunt tasks?. is there a way to set a separate config for different tasks?  for example. when running locally. i want `ui: 'bdd'. reporter: 'spec'`. but running in jenkins i just want: `reporter: 'tap'`also. is there a way to engage the mocha `check-leaks` feature via `mochatestconfig`?  i tried `options: { ignoreleaks: false }` and tried to create some global variables in the tests. but it does not seem to be working.,neutral
pghalliday/grunt-mocha-test,mocha,2013-04-07T17:11:06Z,not sure about the leaks stuff but if its not in the programmatic options then it won't currently be supported,neutral
pghalliday/grunt-mocha-test,mocha,2013-04-07T17:26:09Z,just checked the docs - looks like it should be possible to add support for this. will look into it,neutral
pghalliday/grunt-mocha-test,mocha,2013-04-07T18:47:20Z,awesome -- thanks - i will test it out tomorrow.  fyi the growl task seems to already work. if i add it as an option: `... growl: true.`,positive
pghalliday/grunt-mocha-test,mocha,2013-04-07T18:49:02Z,oh really. i hope i didn't just break the growl option :o,positive
pghalliday/grunt-mocha-test,coveralls,2014-01-03T04:10:46Z,foxgit just curious were you able to export the lcov report for integration with services such as coveralls?,neutral
Project-OSRM/osrm-backend,standard,2017-12-19T12:39:28Z,the demo server uses our internal empirical weights that are not part of the standard lua profile. so different routes are to be expected.,neutral
Project-OSRM/osrm-backend,codecov,2016-05-11T16:39:41Z,switch to codecov,neutral
Project-OSRM/osrm-backend,codecov,2016-05-11T22:16:09Z,we switched to codecov,neutral
npm/npm,standard,2015-04-15T10:22:00Z,redking i hadn't thought of that. i use osx's standard terminal but it's worth investigating. thanks for the tip.,positive
npm/npm,standard,2015-04-17T14:03:34Z,if you want npm to write minimal output when installing. you can set the `loglevel` parameter to `silent`:```$ npm --loglevel=silent install```however. npm will still write to standard output and standard error.  on a unix-like system such as linux or osx. you can suppress this output as well:```$ npm --loglevel=silent install 2>&1 >/dev/null```,neutral
npm/npm,standard,2015-04-18T04:50:53Z,i'm taking this over to `multi-stage` because it turns it out it was super easy to add a constant from field there. so yay!   see 78a8b99 for the _from part.,positive
npm/npm,standard,2015-04-18T16:40:50Z,thanks iarna! looking forward to when 3 drops.,positive
npm/npm,standard,2015-04-20T10:42:29Z,ended up decoupling shrinkwrap from `npm ls` in 9f01098. as `npm ls` now shows you the "logical tree" and not what's literally on disk.,neutral
npm/npm,standard,2015-04-21T00:59:37Z,added unit test. rebased and squashed. passes `standard`.,neutral
npm/npm,standard,2015-04-29T11:33:33Z,i just installed nodejs using the standard installation on windows andrunning npm install --global module_name causes the issue.i have a development server which has everything so i won't bother runningnode on windows. thought i would raise the issue in case others ran intosimilar issues.i will go ahead and create the issue at joyent/node. thanks for your help.,negative
npm/npm,standard,2015-04-30T23:52:29Z,sorry. we're not taking style changes to npm right now. because as soon as we have all the tests passing in the `multi-stage` branch (which will also become `npm3` shortly thereafter). we're going to be switching the entire code base over to follow the style rules set by [`standard`]( for taking the time to put this together. though!,neutral
npm/npm,standard,2015-05-01T01:05:03Z,hey no problem. til about `standard`. looks nice,positive
npm/npm,standard,2015-05-02T02:37:45Z,othiym23 not sure if you actually looked at the changes.. but package.json is still in the root. i think shannon was mostly trying to get some sort of standard started for the front-end where we stop allowing every new plugin from creating dotfiles in the root and cluttering our project root. sure. projects should be allowed to have their own config file. but having a convention for these config files. or common home. would go a long way.,neutral
npm/npm,standard,2015-05-02T21:24:54Z,yeah. it happens to me when i forgot to `sudo`when updating npm. i'm not sure my permission setup in `/usr` is standard though :),negative
npm/npm,standard,2015-05-07T02:54:26Z,i agree. shannonmoeller. locking.btw. i agree with the spirit of what you're trying to do. which is to try and make it easier to see the structure of a project from the outset. but a lot of these decisions need to be baked in (and driven to consensus) before there are big scary ecosystems built around them. that said. this would have been a tough sell even from the beginning. because either you would have had to catch commonjs before it coalesced into a spec / de facto standard. or convinced ry and isaacs that it was a good idea to abandon commonjs early on.,negative
gr2m/moment-parseformat,standard,2015-08-27T12:49:19Z,refactor dependencies + tests . - added standard. formated moment.parseformat.js- bower fast raus- added coveralls- tape + tests are pending,neutral
gr2m/moment-parseformat,standard,2015-09-07T11:45:54Z,perfect. thank you!:tada:,positive
mishoo/UglifyJS2,uglify,2013-03-20T15:09:00Z,also was surprised to find out than uglifyjs supports joining multiple files generated by coffeescript. but cannot use sourcemappingurl included in every such file (instead of using --in-source-map).,neutral
mishoo/UglifyJS2,uglify,2013-03-22T14:22:33Z,passing the output of `json.stringify` to uglifyjs shouldn't even work. that's not a javascript program.,neutral
mishoo/UglifyJS2,uglify,2013-03-22T16:33:17Z,yes. i just checked using my hack above and it doesn't work if the top level is not an array.error    at new js_parse_error (c:\projects\webstorm\mother\node_modules\uglify-js\lib\parse.js:185:18)    at js_error (c:\projects\webstorm\mother\node_modules\uglify-js\lib\parse.js:199:11)    at croak (c:\projects\webstorm\mother\node_modules\uglify-js\lib\parse.js:630:9)    at token_error (c:\projects\webstorm\mother\node_modules\uglify-js\lib\parse.js:638:9)    at unexpected (c:\projects\webstorm\mother\node_modules\uglify-js\lib\parse.js:644:9)    at semicolon (c:\projects\webstorm\mother\node_modules\uglify-js\lib\parse.js:664:43)    at simple_statement (c:\projects\webstorm\mother\node_modules\uglify-js\lib\parse.js:822:73)    at c:\projects\webstorm\mother\node_modules\uglify-js\lib\parse.js:693:47    at c:\projects\webstorm\mother\node_modules\uglify-js\lib\parse.js:677:24    at block_ (c:\projects\webstorm\mother\node_modules\uglify-js\lib\parse.js:938:20)i guess i can use:if (typeof data === "string") {json.stringify(json.parse(data). null. 4);} else {json.stringify(data. null. 4);};but once again this does not beautify as well as uglifiyjs2 nor have advanced features like max line length.does anyone know a hack to fix the above error? maybe adding "[" and "]" to the beginning and end of the string then removing them after...,negative
mishoo/UglifyJS2,uglify,2013-03-23T15:19:59Z,to be more clear:it's included in this case:``` textuglifyjs test.js --source-map test.map --output test.min.js```but it's not included in this case:``` textuglifyjs test.js --source-map test.map > test.min.js```you cannot know the filename. so maybe it's the best solution to emit a error in that case. instead of writting a corrupted sourcemap.overall your sourcemaps are of very good quality... :smile:,negative
mishoo/UglifyJS2,uglify,2013-03-23T21:58:37Z,parser outputs a warning in addition to throwing an exception when there's a parse error. ``` javascripttry{    require('uglify-js').parse('var foo 123');} catch(e) {    console.warn("got exception: " + e.message)}```output:```warn: error: unexpected token: num (123) [null:1.8]got exception: unexpected token: num (123)```this is a bit annoying when the parser is used in a context where errors need to be handled differently.,negative
mishoo/UglifyJS2,uglify,2013-03-29T00:07:54Z,jquery. i use jquery from a common source & don't want to uglify along with my code. i can leave $ unmangled. but how do i request that a library be considered in the interpretation but not included in the result (only referenced)?trying it gives a parse error (with jquery it works).,neutral
mishoo/UglifyJS2,uglify,2013-03-31T09:12:40Z,output. to_ascii: escape non-ascii chars with \xnn instead of \unnnn whenever possible. previously ascii-only mode was a bit wasteful:```$ uglifyjs --beautify ascii_only=truealert("føø");^dalert("f\u00f8\u00f8");```with this patch the output is:```alert("f\xf8\xf8");```,negative
mishoo/UglifyJS2,uglify,2013-03-31T10:44:31Z,merged this too. thanks.,positive
mishoo/UglifyJS2,uglify,2013-04-04T15:29:56Z,i think one should be able to have constants or variables thats only written to once - in objects. trying keep a clean global scope.but the problem is how to detect variables. (sometimes they are invoced as array element)why i suggest annotations in comments. should be easier to parse and as comments they are stripped by uglify. so they dó no harm in the browsers.,neutral
mishoo/UglifyJS2,uglify,2013-04-08T00:08:17Z,ah found it `npm install uglify-js` and `uglifyjs --self -c -m -o ./uglifyjs.js`,neutral
mishoo/UglifyJS2,uglify,2013-04-08T03:00:55Z,curiousdannii is this a consideration in which optimizations uglify does and doesn't? it seems to me that uglify's concern is minifying as effectively as possible. not necessarily usage in conjunction with other tools.,negative
mishoo/UglifyJS2,uglify,2013-04-09T13:20:07Z,so uglifyjs works fine?,positive
testem/testem,mocha,2012-12-17T03:17:22Z,custom launcher errors in ci mode. i've configured a custom launcher as follows:``` yamllaunchers:  node:    command: "mocha -r tap test/*_test.js"    protocol: "tap"launch_in_dev:  - node  - chromelaunch_in_ci:  - node  - chrome```i've introduced code in my tests that causes a javascript referenceerror. you can replicate the same with something as simple as `f = new foo()` without defining `foo`. when i run this with mocha by itself. i see the stacktrace and mocha exits with an exit code of `1`. as expected. when i run the same mocha command as a custom launcher via testem. the stacktrace is not shown and testem exits with an exit code of `0`.[addition]i forgot to add that this is happening in **ci mode.** not in dev mode.[/addition]can anyone shed light on why this is the case? this ends up silently swallowing errors that prevent my tests from even running. which is highly problematic.,negative
testem/testem,mocha,2012-12-17T14:12:26Z,i tried to setup the same scenario. but i am not able to reproduce - i do see the stacetrace. see gist,neutral
testem/testem,mocha,2012-12-17T14:18:09Z,whitecolor i created this gist to try to replicate the issue but could not:  you try it and see? although. i am printing out terminal color escape codes. i wonder whether that can cause some terminals to choke.,negative
testem/testem,mocha,2012-12-17T14:19:31Z,i just tried it out. and things got a bit weirder.the setup in your gist does work for me as well. however. if i mv `error_test.js` into a `test` folder and edit the mocha command in the launcher to account for the placement of the test file:```mocha -r tap test/*_test.js```that does not work as expected in my setup. it swallows the error.thoughts?,negative
testem/testem,mocha,2012-12-18T04:13:22Z,interesting. i will dig deeper into it. maybe a job for promises?,positive
testem/testem,mocha,2012-12-18T15:40:05Z,yes. thanks. it works =) close the ticket if needed.,positive
testem/testem,mocha,2012-12-18T15:42:07Z,thanks! i will close this. but i will try to get my fix into mocha.,positive
testem/testem,mocha,2012-12-19T02:34:06Z,opichals no really. i want to know :),neutral
testem/testem,mocha,2012-12-20T01:08:49Z,to watch the tests not to exceed specified time.as i think about it it might be useful to have per-suite and also per-testcase timeouts to be able to validate performance regressions.,neutral
testem/testem,mocha,2012-12-20T02:00:35Z,gotcha. it think this is better captured on the client-side and then sent back to the server side for reporting. which means work will have to be done for each framework i have to support. but i think it's worth it.,positive
testem/testem,mocha,2012-12-20T02:03:14Z,well. if the timing is measured between the socket messages received. the work should be generic if i am not missing something.,neutral
testem/testem,mocha,2012-12-20T03:09:46Z,we could do that but it's not very accurate.,neutral
SBoudrias/Inquirer.js,codacy,2017-04-17T14:53:51Z,no worry about codacy. it's not really working out. i'll disable it.thanks for the pr. it's merged now. i'll make a release soon.,negative
firebase/backbonefire,karma,2014-07-12T22:36:39Z,cleaned up repo and added travis ci integration. - added travis ci integration- updated `readme`  - updated download instructions  - added contribution instructions- renamed src and dist files to `backfire.js`- updated name in `readme` to backfire (used to be backfire) to be  consistent with other bindings- cleaned up `package.json`- cleaned up `bower.json`- added change log- made it so that tests can be run via `grunt test`- added `release.sh` script to streamline release process- updated karma configuration file,neutral
firebase/backbonefire,karma,2014-07-12T22:41:47Z,alexwolfe - here is the backfire repo cleanup stuff and travis integration work. i'm going to add `backfire.js` and `backfire.min.js` to the cdn once this stuff gets merged in. i will keep the old `backbone-firebase.js` and `backbone-firebase.min.js` files on the cdn to not break existing apps. going forward. we will only put `backfire.*` on the cdn.katowulf - you may also be able to take a look at this and merge it in if it all looks good.,negative
firebase/backbonefire,karma,2014-07-14T18:12:28Z,jacobawenger nice work.,positive
firebase/backbonefire,karma,2014-07-19T00:51:46Z,alexwolfe - i know you're busy with docs stuff but reviewing this should only take ten minutes or so. thanks!,positive
firebase/backbonefire,karma,2014-07-27T21:40:40Z,alexwolfe - now that docs have launched. can you please review and merge in this pr? it should only take ten minutes or so.,positive
firebase/backbonefire,karma,2014-07-28T17:14:27Z,just one small comment otherwise ready to merge.,neutral
firebase/backbonefire,karma,2014-07-28T17:20:28Z,alexwolfe - good catch. this is ready to be merged now.,positive
firebase/backbonefire,karma,2014-07-28T17:33:25Z,you need to add me as a collaborator or i can't merge :),neutral
firebase/backbonefire,karma,2014-07-28T17:44:03Z,you've been added as an owner.,neutral
mochajs/mocha,mocha,2012-12-08T03:48:05Z,in case it helps. i took the time to document my use case in a video overview that outlines why i chose to test in the browser. and why asynchronous assertionerrors in mocha are important for my project:,neutral
mochajs/mocha,mocha,2012-12-08T12:23:07Z,:+1: for this feature. for exactly the same reason. i'd like to have some complex code that decides if a test should be skipped. and have the test output show a skip. not a pass. i'd be ok with calling `skip(); done();`regarding skip() magically getting out of the test case -- how about throwing an exception just like when an assertion fails?,negative
mochajs/mocha,mocha,2012-12-08T15:51:34Z,actually. i'm now :-1: for this. simpler to just change your test runner to use the tap reporter manually (plus use  instead). plus you might want to use a different reporter in the browser or log something else to the console,neutral
mochajs/mocha,mocha,2012-12-10T03:42:46Z,perhaps the ci thing is leaving us with a little bit of a red herring here (i think we use them in quite different ways).i think it presents a cleaner simpler abstraction to reporters and is advantageous because of that. and i think it would be nice to have the ability to run the reporters as separate command line apps and pipe data from the test runner to the reporters (e.g. for aggregating multiple tests or using non-mocha test frameworks with mocha reporters) and i can't see any way of doing that without simplifying the format to be json serializable.,positive
mochajs/mocha,mocha,2012-12-14T17:42:52Z,dmayo3 are you using mocha-phantomjs?,neutral
mochajs/mocha,mocha,2012-12-15T23:28:00Z,with mocha-phantomjs the codes runs in a browser environment but output goes to the console.,neutral
mochajs/mocha,mocha,2012-12-16T00:02:27Z,oh right. forgot about those people haha. i've never seen numbers but yeah i've seen that. i definitely dont want to inline a bunch of serialization or json stuff. this would be less gross if mocha were implemented with components right now but for now i'm find with just the regular tostring. they'll figure it out,negative
mochajs/mocha,mocha,2012-12-18T04:33:59Z,haha! ok ok. i won't pester you about it. i really just want mocha to support being passed a stream object for output. and having it default to standard out if none is given.i don't plan on this being built in to exclusively support grunt. i'll just toss you a reply here when i'm done and if you think it might help. i'm happy to issue a pull request. if you only use make in your exploits. then hats off. i'm not so fortunate... gyp is also json-ish like grunt. and actually i think msbuild and ant are both more intuitive with their xml based configs. probably scons is the only thing i really enjoyed building with. but it's a beast and slow compared to make or ninja.,positive
mochajs/mocha,mocha,2012-12-18T23:42:11Z,document difference between `mocha debug` and `mocha --debug`. visionmedia: it took me a while to figure out how to get mocha to run with node's built-in debugger client to run (vs node-inspector / webkit web inspector). so i thought this docs clarification might help others stumbling over the same thing.,neutral
mochajs/mocha,mocha,2012-12-19T15:36:11Z,seems i can't pass bail option with options to mocha constructor? i'm using grunt-simple-mocha and can pass options only via grunt config. because my test folder named "tests" and if i recall correctly mocha only loading mocha.opts from "test" folder.,negative
mochajs/mocha,mocha,2012-12-20T22:47:37Z,mocha doesn't have anything to do with the http lib sorry. you'll have to ask elsewhere if the request itself is failing. though keep in mind mocha exists when tests are complete. thus you would have to put this code in a `it(function(done){  request here. invoke done() once complete })`,negative
mochajs/mocha,mocha,2012-12-30T22:18:54Z,( and a corresponding v bump for mocha eventually would help :) ),positive
mochajs/mocha,mocha,2013-01-01T21:55:50Z,you'll have to step through with node's debugger or investigate the stack trace there. doesn't look related to mocha sorry! some sort of race condition in that lib,neutral
mochajs/mocha,mocha,2013-01-01T21:58:33Z,update mocha. that's really old,neutral
mochajs/mocha,mocha,2013-01-01T22:03:39Z,im open to suggestions on improving the output but i dont want to get all crazy with customization. it's easy to integrate new reporters with mocha so you can copy/paste it and go from there if you like,positive
mochajs/mocha,mocha,2013-01-01T22:12:19Z,added a `.bail()` method in f0b441c,neutral
mochajs/mocha,mocha,2013-01-01T22:31:43Z,davisford yea wouldn't surprise me. node itself doesn't publicly facilitate clearing the module cache. so anything we get "working" is a hack. another reason why i dont like watchers. but i wont have time to look into this for a bit,negative
mochajs/mocha,mocha,2013-01-01T22:53:44Z,i don't think the styles will be too much of a problem -- the mocha layout and css is already pretty well scoped. and the markup fairly minimal. i added it to a single page app with a white on dark layout which drove most of the changes.personally. i think the combination of this with testacular will be pretty powerful. by running the tests directly in the app. there's no barrier getting in the way trying to send events to a browser over websockets. for example. if a test fails. you have your app open in your browser with the state that the failure occurs so that it's easy to debug. you can also hook into your app. so listening for routing events. for example. which keeps the test lightweight and fast. and then you can run them through testacular to drive the browsers for continuous integration.,positive
mochajs/mocha,mocha,2013-01-02T08:11:19Z,i am having the same trouble. it's very difficult to get a breakpoint set inside a test. i've been trying to wade through the mocha source to try and get into a function that will let me set a breakpoint on my test. but i still haven't had any luck.i've tried setting a "debugger;" in my source. but it still does not get caught in time.+1 for chris rock's suggestion.,negative
mochajs/mocha,mocha,2013-01-02T21:33:15Z,i ran into the same problem. but worked around it by forking (oh no!) mocha and pasting the jsdiff code into the empty diff.js file. radamant is correct.,neutral
mochajs/mocha,mocha,2013-01-03T14:49:13Z,after digging in the code of both mocha and node. i implemented a simple workaround: it the way to go?may it be possible to automate it in a function call like `removeuncaughtexceptionhandler` in the mocha api?,neutral
mochajs/mocha,mocha,2013-01-06T10:44:12Z,expected/actual output is poor without color. example:<pre>% mocha --compilers coffee:coffee-script -c  ���������  ��� 1 of 3 tests failed:  1) filterdata should work for nested hashes:            actual expected            1 | {      2 |   "outer": {      3 |     "middle": "value"      4 |   }      5 | }{}</pre>in this very simple example you should be able to tell that there is a non-empty hash and an empty hash. looking at just this output you cannot tell which of the two is expected and which is actual.maybe you could do diff-style +/- when color is off.,neutral
dondi/GRNsight,eslint,2017-09-27T22:44:37Z,eslint runs inconsistently. we have discovered that eslint is reporting different results on different systems:- with ebachoura and yshin4. who are on windows 10. eslint reports errors as expected- with eileenchoe. who is on macos. eslint appears to run but does not report any errors- with travis. eslint is reporting a dependency error for a module that is listed as an eslint dependencywe need to resolve this so that everyone gets the right linting output.,negative
dondi/GRNsight,eslint,2017-09-27T22:44:52Z,dondi will try this on his development setup and report back.,neutral
dondi/GRNsight,eslint,2017-09-27T22:45:56Z,eileenchoe will check her eslint configurations to see if one might be unexpectedly interfering with another.,neutral
dondi/GRNsight,eslint,2017-09-28T17:18:05Z,dondi asked me to run some linting tests and the results are a bit odd.so i started on dondi's branch and i ran the linter and found no errors. i was surprised and i checked my own branch and found the same result. no linting errors.this was really weird because just a few days ago i ran the tests and got 321 linting errors. i realized that another thing that changed in the last few days was my bash application. i just switched to bash on ubuntu on windows. both of the "npm run lint"s were done in this bash on windows and they returned 0 linting errors. but when i switched back to git bash and ran the linter. there was 321 errors for both my branch and dondi's. hope this helps!,negative
dondi/GRNsight,eslint,2017-09-29T07:21:43Z,ebachoura as for the weird ubuntu bash behavior. try to re-pull that repo then re-checkout `dondi`. then report back when you can. thanks!,positive
dondi/GRNsight,eslint,2017-09-29T07:26:22Z,_coverage/_ has been added to the _.eslintignore_ list. for anyone trying this out. make sure to pull `dondi` again to make sure that you get this update.,neutral
dondi/GRNsight,eslint,2017-09-30T04:45:36Z,dondi running `npm run lint` on the `dondi` branch on my machine yields 322 errors. which is consistent with what you are getting and what travis is getting.,negative
dondi/GRNsight,eslint,2017-09-30T05:57:22Z,ok. thanks eileenchoe! so ebachoura and yshin4. let’s see if we can get consistency for you guys too. on the `dondi` branch. ebachoura. make sure that your repository on ubuntu bash is freshly pulled and on the `dondi` branch. yshin4. do the same on whatever command line you use regularly.we appear to be converging on 322 linting errors. once we’re all consistent. i can merge this with `beta`. to minimize conflicts. let’s temporarily accept these failed builds and merge `beta` into our working branches. one or more of us can do “lint-fix-only” commits on `beta`. which the others would then merge into their branches a little at a time.then we can all be _really_ happy when we go green again!,positive
dondi/GRNsight,eslint,2017-10-03T20:08:57Z,i pulled dondi branch and ran lint and i got 322 linting errors. so it looks like i am on board with eileen. dondi. and travis. yshin4 could you pull dondi's branch and then run lint and post how many errors you get.,negative
dondi/GRNsight,eslint,2017-10-03T21:18:09Z,i pulled dondi branch and linter gave me 322 errors as well.,negative
dondi/GRNsight,eslint,2017-10-04T00:53:40Z,also i just realized. ebachoura you might want to audit the original clone where you were seeing the discrepant numbers. you might have had lingering commits or other files that were skewing the results. it might be best to manually transfer any work that you knew you were doing into a fresh clone.,neutral
dondi/GRNsight,eslint,2017-10-04T19:05:50Z,ok. this has been merged with `beta`; no release for this one because it only affects how listing is checked. however. travis does report errors now so "linting-only" fixes will be desirable going forward. i’ll write up a new issue for that.,positive
dondi/GRNsight,eslint,2017-10-04T19:08:14Z,the follow-up issue is #538; also. now is a good time to pull and merge `beta` into our individual branches.,positive
dondi/GRNsight,eslint,2017-10-04T19:21:30Z,however. upon looking at the _edge-tests_ files that got added. i don’t see the one from her comment above. so yshin4 if you could please issue a pull request with that file. that would be great. make sure to merge `beta` because that has your updates plus the eslint changes.,positive
karma-runner/karma-sauce-launcher,sauce,2014-01-20T00:39:57Z,thanks johanneswuerbach !,positive
karma-runner/karma-sauce-launcher,karma,2014-01-20T23:30:00Z,concurrency issue. i'm not sure if this is the actual problem but here's what i have been running into:i have a free open source account on sauce labs running tests in 9 different browsers. but the max parallel tests i can run is 3 at a time. since karma waits for all browsers to connect before running the tests. it just gets 3 connected browsers and then sits there waiting. and since no tests are run. sauce labs doesn't spawn more browsers and sits there waiting too. the whole thing just gets stuck.is there anything i can do to get around this? thanks.,negative
karma-runner/karma-sauce-launcher,karma,2014-01-31T18:50:39Z,what is the state of that issue? some builds are failing as nothing responds.,negative
jantimon/html-webpack-plugin,jshint,2015-03-27T18:55:36Z,the cache buster is now optional.added jshint configuration.,neutral
micnews/react-jw-player,eslint,2017-10-04T14:45:24Z,hey danmakenoise - so sorry for the late response! everything outlined above sounds great. sounds like this component will load in the external js files and just keep a reference to the player no? one request - is it possible to use prettier with eslint config? i would be happy to help set that up.,positive
iurimatias/embark-framework,mocha,2016-08-27T19:57:25Z,unable to run tests in private network . pleaseeeeee help me fix this blocking issue. i have deployed a sample contract to a private blockchain. embark deploy privatenet works perfectly fine. when i run test. it fails with the following message. i guess. it is not able to find the blockchain and the account. i am running the command embark spec and embark spec privatenet.error outputd:\aaa\xxx\blockchain\installed\embark\firstcontract>embark specsecp256k1 bindings are not compiled. pure js implementation will be used.secp256k1 bindings are not compiled. pure js implementation will be used.conferenceprimary account address is : nulltrying to obtain conference address...    1) "before all" hook  0 passing (3s)  1 failing  1) conference "before all" hook:     error: the string "invalid address" was thrown. throw an error :)      at runner.fail (d:\aaa\xxx\blockchain\installed\embark\firstcontract\node_modules\mocha\lib\runner.js:226:11)      at runner.failhook (d:\aaa\xxx\blockchain\installed\embark\firstcontract\node_modules\mocha\lib\runner.js:262:8)      at d:\aaa\xxx\blockchain\installed\embark\firstcontract\node_modules\mocha\lib\runner.js:307:16      at done (d:\aaa\xxx\blockchain\installed\embark\firstcontract\node_modules\mocha\lib\runnable.js:287:5)      at hook.runnable.run (d:\aaa\xxx\blockchain\installed\embark\firstcontract\node_modules\mocha\lib\runnable.js:322:5)      at next (d:\aaa\xxx\blockchain\installed\embark\firstcontract\node_modules\mocha\lib\runner.js:298:10)      at immediate._onimmediate (d:\aaa\xxx\blockchain\installed\embark\firstcontract\node_modules\mocha\lib\runner.js:320:5),negative
iurimatias/embark-framework,mocha,2016-08-28T13:31:37Z,thanks a ton!!!!. i am unblocked and the simulator scenario works!!!!. i will fix my test cases now. **i have one more issue on which in need your help**. i really want to connect to the node that runs my contract (not the simulator) on the private network. the accounts there have enough ether. **what changes do i need to make**?,positive
iurimatias/embark-framework,mocha,2016-08-28T14:07:07Z,thank you!! it is working. i am able to test against the privatenet node. i would continue to use the simulator to test. it's a great tool.,positive
danvk/dygraphs,karma,2015-01-22T19:16:15Z,danvk kberg any movement on this?,neutral
danvk/dygraphs,karma,2015-01-22T23:41:09Z,sorry for the slow responses! i'll plan to take a look at it this week.,negative
chentsulin/electron-react-boilerplate,standard,2017-02-15T15:54:32Z,maybe the decision shouldn't be based off of one library that deviates from the standards ¯\\\_(ツ)\_/¯i'm sure they would welcome a pr to fix that incompatibility.,negative
pinterest/esprint,eslint,2017-05-23T00:27:08Z,add `esprint run` command. this pr adds an `esprint run` command. which just runs parallelized eslint without standing up a background server that watches for changes.,neutral
pinterest/esprint,eslint,2017-05-23T03:09:54Z,benchmark esprint performance vs. eslint. we should have a suite of benchmarks in place to have a baseline and keep track of perf regressions.,negative
pinterest/esprint,eslint,2017-05-24T22:02:13Z,update install script to handle file-linked eslint dependencies. as title. the dependency-install script would throw errors when running into `file:`-linked dependencies in the specified `package.json`. this patch runs `npm link` for those packages. so that we get the dependencies into esprint's `node_modules`,negative
redfin/react-server,eslint,2016-04-20T00:16:49Z,doug-wade - looks like some conflicts have crept in here.looks like there are also still a few non-leading tabs.,positive
redfin/react-server,eslint,2016-04-29T18:03:22Z,dooouuuugggg.....,neutral
redfin/react-server,eslint,2016-05-11T22:16:44Z,simple tests. more `eslint` and `nsp` coverage.,neutral
redfin/react-server,eslint,2016-05-11T22:38:50Z,this is just eslint/nsp.  merging.,neutral
redfin/react-server,eslint,2016-05-13T22:15:43Z,lidawang - sounds like your `gulp-eslint` is out of date.  try an `npm update` in your repo root.,neutral
phoenixframework/phoenix,mocha,2016-11-11T21:46:28Z,add socket.js tests. this pr adds a few mocha tests for the `socket` object in `phoenix.js`.i'm opening this pr as a potential starting point for building out a suite of unit tests for the javascript functionality provided by `phoenix.js`. though only just a few tests. there are already a few key decision points where i'm looking for feedback before i get too far.though `phoenix.js` touches a few browser apis. i decided to stick with the node.js context for the tests for simplicity. this means introducing a few libraries. e.g.. `jsdom`. `jsdom-global`. `mock-socket`. to mock out those dependencies. we could certainly run the tests in a browser-based runner. e.g.. karma. testem. etc.. instead (or do both!). though the approach i went with was consistent with the existing presence tests. looking for comments.i've only added a few tests to get a proof-of-concept going for the mocking approach. if we like this direction. let me know your thoughts on how to tackle remaining tests: merge small sets of tests as i go vs build out an entire suite in one pr. certainly. if you have any comments on the tests i've written so far. i'd be happy to address.another decision would be when to add the node tests to the travis build.finally. there's never enough love to go around. so thanks for all your hard work on phoenix!,negative
phoenixframework/phoenix,mocha,2016-11-14T18:21:41Z,this looks great! and we surely could use unit tests for proper client coverage. > i've only added a few tests to get a proof-of-concept going for the mocking approach. if we like this direction. let me know your thoughts on how to tackle remaining tests: merge small sets of tests as i go vs build out an entire suite in one pr.please continue with the tests. using this pr. and we can merge when we're in a more complete state. thanks so much!,positive
VisionistInc/jibe,mocha,2015-04-22T20:27:10Z,model tests. create mocha tests for:- [x] chat model- [x] author model- [x] room model,positive
jimhigson/oboe.js,jasmine,2016-11-10T01:03:54Z,can't run tests on clone. if i clone the library. run `npm install`. and then `npm test`. i get errors about not being able to launch phantom. i've played around with this and the only way i can get these to pass it to update some libraries. because of peer dependencies. this eventually gets me to the point of having to update to jasmine v2. which has a lot of breaking changes,negative
moment/moment,karma,2013-11-24T20:07:10Z,porting tests to mocha is still possible – just have to change the karma adapter. it would be great since mocha is designed to be run on both node and browser. and largely used and maintained._icambron i made you collaborator of my fork so that you can push on this banch to add your encrypted username and accesskey._,positive
moment/moment,karma,2013-12-06T07:26:57Z,this is incredible! thank you alexstrat. you posted excellent instructions. i was able to set up saucelabs. i did the necessary steps for travis (i guess we can test once this goes upstream).now about the changes you made to all tests: i'll see if we can do something saner here. probably make sure that nodeunit is exported global and then attach tests directly to it. so we wouldn't need a browser.js. we can also generate that but if we can avoid it -- better. about tests not working on ie8 -- i can also give it a try. the interface seems pretty straight forward. just like remote karma... what a gem :),positive
moment/moment,karma,2013-12-07T20:55:46Z,tests will run in three environments -- node. browser and karma. i prefer to engineer something (like use umd for tests too) that would work for all of them rather than hack around it for karma only.i can not commit to your branch. i can make a pr. let me first examine the umd hypothesis.,positive
moment/moment,karma,2013-12-07T21:16:04Z,ichernev i made you collaborator of my fork few weeks ago. you should then be able to commit on this branch.karma is not a "environnement": karma is a runner/launcher/reporter framework of the "browser environment".can you explain your umd solution further: i don't understand it.,neutral
moment/moment,karma,2013-12-07T21:21:28Z,umd is universal module definition -- something that works with amd. commonjs and browser globals. but now that i think more about it converting the tests to mocha would be a better idea.the way we currently run the tests in a browser (for momentjs.com) is we concatenate all test files. on the top we redefine require and exports. and at the bottom we use all defined tests (in exports) to launch nodeunit with them. there is also code to display broken tests and the like. i'm not sure if we want all that for the karma -- probably not.if we use mocha instead. all test will have the beautiful define / it construction. they'd just work in node. for the browser you include mocha lib at the top and you hook to relevant events (test case failed/passed) to display results. for karma you just use karma-mocha plugin. no hacks. clean and simple.,positive
react-boilerplate/react-boilerplate,eslint,2016-03-18T20:43:34Z,there is a new eslint rule i tried to adhere by. but while the idea is good the rule is quite annoying. i'll reevaluate soon. and then move the ones that shouldn't be in the containers folder anyway. i just haven't come around to updating that! thanks for the reminder!,positive
react-boilerplate/react-boilerplate,eslint,2016-03-19T23:13:47Z,awesome work. thanks so much! a few small nitpicks:- in line with the other configs. could you move the jscs config to the [`jscsconfig` variable]( in the `package.json`?- the `internals` folder should be linted- lets have a `lint:jscs` and a `lint:eslint` script which are combined in the `lint:js` script like so: `npm run lint:eslint && npm run lint:jscs`thanks so much again!,positive
react-boilerplate/react-boilerplate,eslint,2016-03-29T15:26:21Z,update: it seems like this is caused by linting errors in the .js files which cause the tests to fail (as they probably should). however the linting errors refer to the `internals/*` part of the app which shouldn't be touched. i've tried defining an `.eslintrc` file but ran into more errors with linting. is it possible to provide an `.eslintrc` file which specifies the rules in the project in order to prevent this from happening?,negative
react-boilerplate/react-boilerplate,eslint,2016-04-14T12:31:26Z,sorry. i've missed this tiny detail that the test command is targeting my global eslint installation instead of the local one. thanks for pointing that out. is it intentional that the commands target the global node packages? or is it a windows bug? i guess if your answer to the first question is no then the second answer is automatically yes and i will start figuring out how to get the local modules to run under windows instead.,negative
apache/zeppelin,selenium,2015-12-16T05:34:54Z,prabhjyotsingh thanks for addressing removal of binary.lgtm,positive
apache/zeppelin,selenium,2015-12-17T08:50:02Z,prabhjyotsingh please rebase,neutral
apache/zeppelin,selenium,2015-12-22T05:47:47Z,leemoonsoo corneadoug r-kamath   rebased. thanks.,positive
apache/zeppelin,selenium,2015-12-22T08:13:31Z,ci is green. merging if there is no more discussions,neutral
apache/zeppelin,selenium,2016-01-11T10:01:46Z,awesome. more selenium :+1:,positive
dmfay/massive-js,mocha,2015-12-06T05:39:32Z,testing?. how do you run the tests? i don't see any instructions for running them. the syntax looks like mocha. but every test failed.,negative
dmfay/massive-js,mocha,2015-12-06T05:42:07Z,it's `mocha .` and make sure you have a db that we can run the tests against called "massive":```createdb massive```,neutral
dmfay/massive-js,mocha,2015-12-07T14:40:09Z,if you didn't create the user `rob` with password `password` and superuser permissions on the massive db. that would definitely be a contributing factor.,neutral
dmfay/massive-js,mocha,2015-12-08T02:05:51Z,or just replace that with valid connection info. also. use `mocha` without the dot - sorry my bad :).,positive
NetsBlox/NetsBlox,codeclimate,2017-10-13T16:48:13Z,it looks like a good start! after looking at the pr. i think it might be good to include something that actually uses the parsed docs somehow. something like getting the argument names from the doc if it exists and falling back on the current method. does that make sense?also. a couple little fixes:- [x] the tests are failing- [x] the pr should be given a better name- [x] i would check out the codeclimate issues,positive
techfort/LokiJS,istanbul,2014-11-13T13:04:01Z,use istanbul to get code coverage reports. using 'mocha' and 'istanbul' is more reliable to organize test code.and will you want to use 'boswerify' to split src to more than one file?it is easier to read.,neutral
techfort/LokiJS,istanbul,2014-11-13T13:31:13Z,thanks main.,positive
BarkleyREI/generator-brei-app,mocha,2015-01-25T23:28:31Z,did some testing. the only things that can be safely removed are the mocha references and the empty concat and uglify task blocks. everything else is used. including the references to htmlmin. cssmin. concat. and uglify in the task declarations at the bottom.,neutral
holger1411/understrap,standard,2016-11-14T14:41:24Z,i´d vote for sticking to wordpress guidelines even if they seem illogical sometimes and differ from other coding-standards. reason: the theme should be submitted to wp´s repository and therefore _must_ stick to wp´s rules. i guess.,neutral
holger1411/understrap,standard,2016-11-19T01:00:18Z,holger: there are quite some wp-plugs for sublime available that allow code-completion for wp-functions etc. anyway. i don´t know in how far they stick to the coding standards according to tab-indentation etc. if you get to know anything. please keep me informed!,positive
holger1411/understrap,standard,2016-11-21T14:50:12Z,holger1411 i believe that > implement/check coding standards and html/sass syntax according to wordpress standardsdiscussions here: #114)should also reference  #118 since it is about standards.,neutral
holger1411/understrap,standard,2016-11-21T14:51:18Z,should i proceed to format code as per wp standards? has anyone other ideas - objections?,neutral
holger1411/understrap,standard,2016-11-21T15:12:04Z,yes. we will follow the wp standards. so if you have time to start with you are welcome!,positive
holger1411/understrap,standard,2016-11-21T18:13:29Z,code formatting second batch. this pr is the second batch of code formatting according to wordpress coding standards.changes:* formatted all source files in `loop-templates` directory,neutral
zalmoxisus/redux-devtools-extension,eslint,2016-05-11T10:33:43Z,it is perfectly valid arrow function expression and `eslint` does not complain.what linter do you use? breaking of what rule is it reporting?,neutral
stripe/stripe-node,eslint,2017-09-07T14:48:32Z,jlomas-stripe try `eslint --init` ;),neutral
stripe/stripe-node,eslint,2017-09-12T15:50:29Z,> i started another branch in ob-eslint-standard using the "standard" linting rules. then ran eslint --fix to autocorrect errors. there were still a few things that i needed to fix manually. though nothing too painful (mostly handling some ignored errors).>> the diff is pretty painful to read because those rules remove the semicolon at the end of each line. but i quite like the result.nice! this looks fine to me. but admittedly i don't care enough about the language to have developed any passionate beliefs.i was a little surprised to hear that the standard ruleset eliminated semicolons though! i don't mind reading code without them. but i'd always thought that the true js disciples loved them. it might be worth running this by at least a couple people with a stronger stance on this stuff. maybe jlomas-stripe or alex-stripe.,negative
stripe/stripe-node,coveralls,2017-12-11T06:29:48Z,add support for coveralls.io. r? brandur-stripe cc stripe/api-libraries adds support for coveralls.io.,positive
stripe/stripe-node,coveralls,2017-12-12T02:05:33Z,awesome. lgtm.,positive
strongloop/generator-loopback,eslint,2016-05-26T18:53:07Z,closing in favor of #189 which includes this change and also the changes to make eslint happy,neutral
tapio/live-server,mocha,2016-02-16T17:06:24Z,help wanted: testing framework. live-server has some tests in the `tests` folder (currently using mocha and supertest) run with `npm test`. but they are really bare bones. i have little experience about node.js testing frameworks etc. so some pointers/ideas/contributions would be appreciated. specifically these things:- i'm more interested in testing broader user-facing functionality (both the command line tool and the node api) than javascript source level unit tests (the implementation is just a few functions which i think would be rather difficult to meaningfully unit test)- is it somehow possible to automatically test behavior with a web browser / websockets (e.g. that the live reload works and css reload happens without page reload)?- what is a good way to test command line apps from node in a cross-platform way? the current tests in cli.js feel hacky (use a timeout in the live-server side to exit the server etc.). i'd want to at least run live-server with some params. touch some files (to test watching). kill the server and capture output for examination. most likely one test after another (not parallel) in order to not interfere with each other.,negative
nathanboktae/mocha-phantomjs,mocha,2015-05-14T06:11:04Z,when `mocha-phantomjs` switches over to `mocha-phantomjs-core`. it will get this work.,neutral
nathanboktae/mocha-phantomjs,mocha,2015-05-19T05:10:16Z,> (put another way. while phantomjs offers those command line options. i don't see how to supply them via mochaphantomjs().)unfortunately it's because you can't - see #186 however the alternative way to do this has already been stated in the thread:```phantomjs --ignore-resource-errors --ssl-protocol=any lib/mocha-phantomjs.coffee <page> <reporter> <config-as-json>```,negative
workshopper/levelmeup,standard,2016-10-26T18:13:33Z,> ralphtheninja> you mean that there should be more text. right?martinheidegger yep!,neutral
chiquitinxx/grooscript,standard,2014-12-02T22:06:09Z,i don't know what you mean about base64 or monetary. the groovy implementations that i coded aren't important. because only used in groovy. in javascript own library code is used.aye. no idea how to package compiled files. have no standards in javascript doesn't help. do you have a suggestion?,neutral
marionettejs/backbone.marionette,mocha,2014-04-26T03:46:13Z,interesting...i'm a fan. call me a noob but i haven't seen this pattern before...i imagine it cleanly transfers over to the mocha-chai world?,negative
kriskowal/q,jasmine,2012-11-28T07:19:22Z,add timeout to returned promise in jasmine-promise. also call oncomplete() if an error is raised. as otherwise my runner never terminated and gave no indication.,negative
kriskowal/q,jasmine,2012-11-29T19:52:00Z,we have a `promise.timeout(ms)` method. got a moment to try that approach. i would not mind if you would squash (using `git rebase -i`) the commits and force push to your branch (`git push -f`). don’t try it if you haven’t done it before though; i can do it on my end.,neutral
kriskowal/q,jasmine,2012-11-29T22:21:08Z,squashed it into one commit. documented and specced the behavior. as i suspect that others will find this useful.,positive
nteract/nteract,eslint,2016-03-26T18:06:52Z,eslint touchups. lint rolling.we need to investigate `.setrepresentedfilename()` and other os specific functions to know whether we have to check on them on other oses. as suggested by carreau.jdfreder - when you are able to get to your linux box later. can you pop open an electron window. open the dev console and run:```require('remote').getcurrentwindow().setrepresentedfilename```,neutral
nteract/nteract,eslint,2016-03-26T18:12:09Z,will do mildu,neutral
nteract/nteract,eslint,2016-03-26T18:12:24Z,:cake: :fireworks:,neutral
nteract/nteract,eslint,2016-04-04T14:39:40Z,/cc willingc all set on the grumpy eslint!,neutral
jira-node/node-jira-client,eslint,2015-12-14T17:49:09Z,in the `.eslintignore` file can you also ignore the lib folder since the compiled babel output would go there?,neutral
cucumber/cucumber-js,standard,2017-11-27T15:19:39Z,i may be looking in the wrong place but i can't see any other cucumber implementations that use `media.type` - looks like the java and ruby ones at least still use `mime_type`.  is it a new standard for cucumber in the future?,negative
vector-im/riot-web,karma,2016-06-16T10:05:30Z,karma: fix warning by ignoring olm. if olm is not installed. the webpack build for the karma tests gives an uglyerror. none of the tests currently care if olm is installed or not. so fix thisfor now by just ignoring the olm module.,neutral
cloudchen/grunt-template-jasmine-requirejs,jasmine,2013-11-21T01:47:56Z,the only known issue with templates is a change in what files are needed in the template and what order. there is no longer a `start` file. it has changed to `boot` which gets included right after jasmine.cloudchen reach out if there are substantial issues with the template.,neutral
hammerjs/hammer.js,jshint,2016-07-19T12:03:53Z,arschmitz updated.what's included:-- fix styling issues eg:- correct quotes. spacing etc.- updates gruntfile.- jshint src. test files & gruntfile.- jscs test files & gruntfile.- updated node to latest.- updated editorconf.,neutral
appium/appium,selenium,2014-03-24T14:40:22Z,only if you use remote web driver to connect to a mac that is running appium or part of a selenium grid.,neutral
appium/appium,selenium,2014-03-25T22:02:05Z,the only way to get a handle on an element is by one of the supported locator strategies. it should be possible to get a mapview by its ui type.drawing complex paths is currently not supported.,neutral
appium/appium,selenium,2014-03-26T11:11:26Z,several findelements duplicates in android. i'm using findelements to get a list of elements from my android app screen. the process is as follows:- i create elements (3 elements)- i findelements (3 elements)- i remove elementsi do it again. but this second time. when i call to findelements(by.id).  i get the elements duplicated (i have seen that these elements are not previous elements i removed. they are the new ones duplicated). in my screen i get only 3 objects. not 6. getting the pagesource from selenium driver i also see 3 objects... my question is. does anyone of you have faced this problem? is this an appium bug for android?any answer would be appreciated. thanks in advance!,negative
appium/appium,selenium,2014-03-26T13:57:16Z,a way to reproduce the problem would be helpful.,positive
appium/appium,selenium,2014-03-27T18:30:39Z,use the selenium alert methods to enter text into the boxes in the alert.,neutral
appium/appium,selenium,2014-03-28T18:16:08Z,it's not correct to use `mobile: orientation`; the selenium drivers already come with orientation switching commands. i wanted to see the full log for the first method. but using the string "landscape".,neutral
appium/appium,selenium,2014-04-01T19:08:12Z,deprecate unused mobile: methods. this `mobile: xxx` methods appear to be useless or superfluous or should be deprecated in favor of something more official.- [x] `setlocation` (use official selenium location api)- [x] `leavewebview` (no longer necessary with "context" api)- [x] `source` (official source command will always return xml)- [x] `fireevent` (i couldn't figure out what this is for; executescript should replace it)- [x] `waitforpageload` (we should either do this automatically or not at all. it's probably a source of testsuite bugs)- [x] `findelementnamecontains` (superseded by `-ios uiautomation` loc strat)- [x] `localscreenshot`- [x] `findandact` (thinking about deprecating this. actually)- [x] `scrollto` (thinking about deprecating this too)- [x] `getcommandtimeout`,neutral
appium/appium,selenium,2014-04-01T19:30:54Z,> findelementnamecontains (superseded by -ios uiautomation loc strat)what do i pass to `-ios uiautomation` which replicates `findelementnamecontains`?,neutral
appium/appium,selenium,2014-04-01T21:50:40Z,can't you do a predicate search in uiautomation that would do a partial name match?,neutral
appium/appium,selenium,2014-04-02T01:02:11Z,yes. and so will `getnamecontains`. so you could actually do:```driver.findelementbyiosuiautomation('getnamecontains("foo")');```,neutral
appium/appium,selenium,2014-04-02T01:06:05Z,that works for me. thanks.,positive
appium/appium,sauce,2014-02-13T11:19:04Z,i read about sauce labs and their mobile testing with appium. so in order to do ci i need to pay??please reply soon...,positive
appium/appium,sauce,2014-02-14T05:51:32Z,i've seen this link dan... my only concern is that do i have to pay for the sauce labs account?? or without that also i can integrate with jenkins??,negative
appium/appium,sauce,2014-02-14T17:07:17Z,you don't need to use sauce to use jenkins. you'll just need to set up your own appium grid if you don't use sauce. as penguinho pointed out.,neutral
appium/appium,sauce,2014-02-15T21:04:45Z,why don't we take this to helpsaucelabs. since it's a sauce-specific issue. mind writing in there?,neutral
appium/appium,jshint,2014-01-29T03:44:33Z,i've jshinted enforcing white=true on test. will enforce that and fix the rest of the code in separate pr.,positive
appium/appium,jshint,2014-01-29T06:58:30Z,stricter jshint rules enforcable from editor. that should sort those linting issues once and for all.if there are merging conflict. just ignore this pr changes and re-jshint.,neutral
appium/appium,jshint,2014-01-29T18:08:51Z,if i remember correctly. we didn't update jshint last time due to `function(grunt)` vs `function (grunt)` /cc jlipps,neutral
appium/appium,jshint,2014-01-29T19:05:04Z,yeah. that was the reason. still not sure about this. one of the advantages is that it makes `function` consistent with `if` and `for`,negative
appium/appium,jshint,2014-01-29T19:19:17Z,i like that finally the whitespace rules are detected automatically.,positive
appium/appium,jshint,2014-01-29T19:35:28Z,done.,neutral
jhipster/generator-jhipster,eslint,2016-02-24T07:52:58Z,we have replaced jshint by eslint. its much easier to setup and to configure. so i vote +1,neutral
jhipster/generator-jhipster,eslint,2016-02-24T13:51:48Z,i ran eslint in two sample apps (with/without translation) and now there should be no more issues now. thanks for the advices !,positive
jhipster/generator-jhipster,eslint,2016-02-26T17:59:43Z,replace jshint by eslint with angular plugin.. this is a first step with many errors reported as our code base is rather heterogeneous regarding style and also wmarques  is currently modifying our code to follow john papa's guidelines. so i did not want to create merge conflicts with his work.there are still few jshint comments to be removed or replaced by eslint equivalents.ref #2972,neutral
jhipster/generator-jhipster,eslint,2016-02-27T01:45:50Z,there is no more notification on error :(,negative
jhipster/generator-jhipster,eslint,2016-02-27T06:45:49Z,jshinterrorreporter.js was for jshint to do custom error reporting.my query was removal of this `.pipe(plumber({errorhandler: handleerrors}))`this will show a notification for error,negative
jhipster/generator-jhipster,eslint,2016-02-27T07:00:24Z,my mistake. i added the line and tested it.for now. eslint task is not part of any other task. it could be part of watch but it could be annoying or maybe it could be part of test.,negative
jhipster/generator-jhipster,eslint,2016-02-27T07:03:05Z,lets merge and improve later. all the john papa style stuff are done so now this should give less errors,positive
jhipster/generator-jhipster,eslint,2016-02-27T07:12:47Z,now there are couple of errors im gonna try and fix them,neutral
jhipster/generator-jhipster,eslint,2016-02-27T10:06:07Z,ok. i got similar notification except that it showed only error text and not the source file which is what the jshinterrorreporter was doing i guess.,negative
jhipster/generator-jhipster,eslint,2016-03-02T09:40:03Z,agree with gmarziou. i prefer run `gulp eslint` once i've finished editing all my files. for "live linting" we can use an eslint plugin in atom.,neutral
jhipster/generator-jhipster,eslint,2016-03-03T10:16:38Z,ok lets remove eslint from serve task for now,neutral
jhipster/generator-jhipster,eslint,2016-03-10T16:23:19Z,removing unused gulp imports and fix eslint errors. while working on an application without protractor. i saw that eslint throwed some errors about unused imports. so i removed the yargs import if the application is not using protractor and two other eslint errors in the same time (one indent and one "use angular.isdefined instead of !== undefined").i also removed the gulp-util from package.json if the app doesn't use protractor.,negative
jhipster/generator-jhipster,karma,2016-12-11T12:09:06Z,did anybody get the karma tests working?,neutral
jhipster/generator-jhipster,karma,2016-12-15T22:34:51Z,i'll work on it this week-end. i could run a simple karma tests without modules import.,neutral
brunch/brunch,mocha,2012-12-21T18:49:26Z,meh,neutral
brunch/brunch,mocha,2013-01-09T22:43:00Z,right... now looking at the implementation. it filters by certain sub-directories and not spec name? might be easy to pipe a --grep="settings" option into mocha... i can make a pull request if interested?,neutral
brunch/brunch,mocha,2013-01-10T05:43:41Z,theoretically you can run exactly the same specs using this method as you might using the --filter way.just depends on your preference and if you want the ability to target a director as opposed to spec names...i prefer to use the grep option as it's consistent with mocha and more powerful... also you might want to consider if users will be confused by two alternate ways to run specific tests.totally up to you.,neutral
brunch/brunch,mocha,2013-01-10T17:17:36Z,automatically running a bare mocha reporter on brunch watch. hey guys. i propose an additional flag to `brunch watch` command called `t` to automatically run mocha tests after each compile and output them in the terminal. alternatively we can add a `w` command to `brunch test` to do the reverse. but that would also mean adding `s` as i am developing locally using the built in server. any concerns with ether approach?,negative
brunch/brunch,mocha,2013-01-11T07:28:02Z,gh-378,neutral
brunch/brunch,mocha,2013-01-11T07:37:53Z,get rid of jsdom crap. mocha-phantomjs ftw,negative
brunch/brunch,mocha,2013-01-11T16:14:29Z,+1.. or casperjs integration,neutral
brunch/brunch,mocha,2013-01-11T17:09:12Z,i've experience so much pain and time wasted with jsdom and trying to get testing going. this will really help our team!,negative
keycloak/keycloak-nodejs-auth-utils,jshint,2016-04-15T13:55:00Z,nodejs project alignment cleanup. first commit moves the "lib" files to an actual lib directory which sort of better aligns with how other nodejs projects do it.the second commit fixes a jshint error during `grunt` .   abstractj mind :eyes:,neutral
keycloak/keycloak-nodejs-auth-utils,jshint,2016-04-15T14:06:43Z,lholmquist landed. thank you,positive
babel/babel,mocha,2015-07-29T01:36:14Z,there already exists a browser test suite. `$ make test-browser` will build all the tests files for delivery to the browser. then you can open `test/browser.html` and it's a standard mocha setup (no idea if it even still passes. been a while since i ran it and it's not a part of ci. hence this issue). no idea about browser support. whatever passes i guess :stuck_out_tongue:,positive
babel/babel,mocha,2015-08-05T17:43:43Z,the idea would be to still have it in mocha. just using karma to run the tests in the browser instead of some other setup. (karma only takes care of starting browsers. loading mocha and your code and then reporting about it),neutral
babel/babel,mocha,2015-08-05T17:47:59Z,/shrug not sure what it will save us ... plus sebmck has already solved a fair number of issues with mocha-fixtures that we would have to redo :taxi: :fire: :e-mail:,negative
webdriverio/wdio-allure-reporter,mocha,2016-04-14T12:11:32Z,seems like a nice addition! it would be much easier if wdio-mocha-framework would expose the current allure instance. however i was not able get it to work correctly. in standalone examples it works like a charm. but when running via wdio. everything is different.,positive
webdriverio/wdio-allure-reporter,mocha,2016-05-07T14:26:13Z,integration tests. - launch webdriverio multiple times and verify the allure reporter xml output- in `test/fixtures/specs/` different test scenarios are defined that are used by `mochatest`### test scenarios- "before all" hook- "after all" hook- screenshots- suites,neutral
webdriverio/wdio-allure-reporter,mocha,2016-05-09T07:46:46Z,good job. gronke i am not sure that this could be called unit tests (it looks more like integration). but it is still good thing.,positive
webdriverio/wdio-allure-reporter,mocha,2016-05-10T12:31:30Z,> i am not sure that this could be called unit tests (it looks more like integration). but it is still good thing.you're right. we should them call them integration tests. imo it's more interesting seeing webdriverio in action than mocking the basereporter and building real unit tests. even if the tests should be written like unit tests. i would not use this reporter without webdriverio. so it feels better to include it in the tests than mocking it.  **update**: renamed to integration tests ☑️,positive
angular/angular-seed,karma,2014-01-13T15:35:58Z,wrong example of installing karma. the karma should be installed locally to the project because in this case the `test.sh` script doesn't work. it assumes that module will be in the project folder but actually the module is installed to the system path.,negative
jshint/jshint,jshint,2012-11-20T20:10:52Z,list globals in .jshintrc. i wonder: why globals cannot be listed in `.jshintrc`?it would be great to specify them in config file like so:``` json{    "asi": false.    "curly": true.    "globals": [ "require". "exports" ]}```,positive
jshint/jshint,jshint,2012-11-20T20:19:49Z,+1for some reason `/dev/stdin` doesn't even work.,neutral
jshint/jshint,jshint,2012-11-21T11:48:16Z,great! thanks for the hint!,positive
jshint/jshint,jshint,2012-11-26T11:02:45Z,has this been implemented?i'm using jshint from the node npm package and i'd like to have the ability to disable jshint checking for an entire file which has been written by a third party.,neutral
jshint/jshint,jshint,2012-11-26T22:59:24Z,for this you can use .jshintignore file. it behaves just like .gitignore. see our readme for more info.,neutral
jshint/jshint,jshint,2012-11-27T19:34:07Z,antonkovalyov  you misunderstand.jshint does not give me an error or warning for this code but when i run my code in v8 it fails.jshint's parser is fine. the problem is i expected jshint to warn me about any code that throws a syntaxerror,negative
jshint/jshint,jshint,2012-11-28T15:30:48Z,jshint-maven-plugin. let's just get this done - and please don't mention wro4j again: getting a whole crapload of optimizers is not necessarily what you want ...,neutral
jshint/jshint,jshint,2012-11-28T19:04:04Z,sorry. but this ticket is not suitable for this repository. **all** jshint plugins for various editors and build systems are external projects maintained by independent developers. at this point. i have no plans to ship anything official. as i said in previous tickets the best way to get this done is to do it yourself.,negative
jshint/jshint,jshint,2012-12-02T22:47:18Z,+1 for this feature. specifically. i'd like to see jshint couragously lint any file extension. whether it's php. ejs. mustache. or html. jshint should look for script tags with `type="text/javascript"` or with no type attribute.lint these:```<script><script type="text/javascript">```and not:```<script type="text/handlebars-template">```,neutral
jshint/jshint,jshint,2012-12-03T08:02:56Z,torbenvesterager dude. do it and stop whining. if you don't like a tool. make a suggestion. provide an alternative or create one from scratch. but do not bash an open source project just because you don't understand it or had no patience to try it..,negative
jshint/jshint,jshint,2012-12-07T05:31:12Z,jshint shouldn't complain about good extra whitespace. of course. it's not easy to define 'good extra whitespace'. but this is what i mean:```receiver.onmessage.apply(newarr);      oldonmessage.apply(newarr);```this code is easier to ready because i align the .apply calls. you recognize a pattern and think less. this is good whitespace jshint shouldn't complain about. perhaps you could develop some option for this at first.,negative
jshint/jshint,jshint,2012-12-07T05:44:54Z,jshint shouldn't care about whitespace at all. the option `white` was inherited from jslint so we can't remove it but we will extract it to a separate module at some point.,neutral
jshint/jshint,jshint,2012-12-12T22:38:02Z,yeah that's a real tough one.. i was just going to re-file this issue but found it's already herei agree with anton. jshint shouldn't be a javascript interpreter.we could simply say that only `window.namespace` declarations are recognized and any other form isn't... but i got a better idea:if jshint reads: `window.namespace` anywhere. it could pass the warning:```global window.namespace declarations can create confusing semantics. please `var namespace` atthe top scope of your program. this makes it easier for reading too. since global declarationsare expected to be in the top scope. and not anywhere else in the code.```long winded. but something like this could be good.,negative
jshint/jshint,jshint,2012-12-15T15:50:24Z,missing dataview from node. node js has the dataview global object. but it is not recognized by jshint.,neutral
jshint/jshint,jshint,2012-12-15T23:58:47Z,how would you want the configuration of this new .jshintrc laid out? i'm assuming in json somehow?,neutral
jshint/jshint,jshint,2012-12-17T18:05:24Z,unused var check in argument list only catches last param. example that does throw an error:```function foo(a. b) {  window.alert(a);}foo();```example that should. but does not throw an error:```function foo(a. b) {  window.alert(b);}foo();```verified against jshint.com as of this writing.,negative
jshint/jshint,jshint,2012-12-17T18:11:36Z,that's a feature. not a bug. :-) when i first implemented `unused` a lot of people complained because there is a common pattern in js/node community that goes like this:``` javascriptrun(function (err. result) {  display(result);});```so sometimes people don't care about `err` so i changed jshint to assume that whenever an unused variable is followed by a used one it's intentional.,negative
jshint/jshint,jshint,2012-12-17T18:19:22Z,seems like something better suited for an option. than changing global behavior for a single use case :)eg. unused-args,positive
jshint/jshint,jshint,2012-12-17T18:19:22Z,can this behavior be optional? sometimes people _do_ care about unused variables like `err`.,positive
jshint/jshint,jshint,2012-12-17T19:05:41Z,if i submit a pull request making it multiple choice. think you'll accept it?for the node use case you mentioned. did those people seem okay with function params not getting checked at all?  or did they still want the last one checked?  the latter seems overly specific to me.,neutral
jshint/jshint,jshint,2012-12-17T19:20:28Z,fwiw. +1000 on multiple choice for unused,neutral
nrstott/bogart,jasmine,2013-05-03T14:28:18Z,migrate unit tests to jasmine. jasmine is easier to read/use than node-tap.  it is also more familiar to potential contributors.,neutral
NekR/offline-plugin,eslint,2017-01-08T12:27:55Z,2wheelcoder oh. i was able to repro this. accidentally. i know what's going on and it's related to webpack 2 itself. in webpack 2. all loaders have to have full names. i.e. `-loader` isn't added automatically. in your project i found at least 2 such loaders where you don't add that prefix: `url` and `eslint`. if you will add it. then everything magically should start working. that's so weird behavior and i'll try to resolve it on webpack side. thanks for reporting this!,negative
angular/angular.js,standard,2015-09-07T08:48:10Z,this pr is shortly to become outdated with igorminar's pr #12524 lands. in any case we should be configuring the sanitizer via its provider.i am going to close this pr.if you still want to be able to whitelist specific elements. which we would not recommend unless you really know what you are doing. then please put together another pr once #12524 lands.,neutral
angular/angular.js,standard,2015-09-13T04:03:45Z,fix(ngresource): compatible with the primitive single value in standard json. wrap response into {_value:response} format when the response is a single value of jsonsee #12787,neutral
angular/angular.js,standard,2015-09-13T04:19:36Z,i signed it!,neutral
getsentry/sentry,selenium,2016-06-02T20:32:56Z,when i try to run this. i get the following:```exception attributeerror: "'service' object has no attribute 'process'" in <bound method service.__del__ of <selenium.webdriver.phantomjs.service.service object at 0x10c3c9410>> ignored```should there be more involved to get this setup as well?,neutral
getsentry/sentry,selenium,2016-06-02T20:52:57Z,per discussion. going to add phantomjs as an npm dependency and then try to point selenium at that binary.,neutral
getsentry/sentry,selenium,2016-06-02T22:52:54Z,> it turns out to be a selenium bug so we have to unfortunately send a manual sigterm for now.lolassuming tests pass. we can merge this.,neutral
getsentry/sentry,selenium,2016-06-11T18:47:58Z,what is "the top level one"? both phantom is only used for tests. can we not just use the same binary for both unit tests and the selenium tests?,neutral
getsentry/sentry,selenium,2016-06-11T19:40:15Z,install phantomjs to support selenium (refs gh-3423). fotinakis let me know if this works,neutral
getsentry/sentry,selenium,2016-06-11T19:48:42Z,fotinakis i get a socket timeout running selenium tests (not sure if related) but no errors on npm 2 with clean empty node_modules. i'm install npm 3 to confirm no issues there either.,negative
getsentry/sentry,selenium,2016-06-11T20:19:46Z,fyi feel free to take over this pr if anyone wants to finish resolving this. i think our best approach is to vendor the plugin since there's no released solution and any release has to go through google's cla process.,positive
sequelize/sequelize-auto,eslint,2017-05-17T07:55:37Z,adds eslint to match the model code with the coding standard of the user. adds option camelcaseforfilename to make the model file name camel case.adds option eslint to match the model code with the coding standard of the user.,neutral
sequelize/sequelize-auto,eslint,2017-05-17T07:55:39Z,jiaxingzheng. thanks for your pr! by analyzing the history of the files in this pull request. we identified durango. matchdav and strumwolf to be potential reviewers.,neutral
jribble/grunt-jasmine-node-coverage,jasmine,2014-09-15T15:01:23Z,clean up configuration. configuration options are read from several levels. some from the root `jasmine_node`. while some from `options`.perhaps #12 and #11 will help to achieve this.,neutral
jribble/grunt-jasmine-node-coverage,jasmine,2014-09-22T06:21:20Z,does the fork apply?. should this project and its repository be one of its own. instead of a fork from the `grunt-jasmine-node` project?,neutral
knownasilya/ember-toggle,standard,2017-09-15T15:15:32Z,are you sure this is a bug? if you did a standard checkbox input. and set up a one way binding with it. the check box would trigger but if you didn't update the value. it wouldn't update.. having it not update. you'd have resetup two way binding. right?,negative
istanbuljs/istanbuljs,istanbul,2017-02-14T12:16:16Z,rename back to just "istanbul"?,neutral
istanbuljs/istanbuljs,istanbul,2017-02-14T19:53:01Z,i think the `js` suffix makes google searching much easier. searching for `istanbuljs` turns up closer results to code coverage than the city `istanbul`.this suffix is especially helpful when searching for `nyc` and i think is a general pattern in the community.,neutral
istanbuljs/istanbuljs,istanbul,2017-02-14T19:55:38Z,there's not too much of a problem removing "js" from library names. to get to something about 'angular' (not the js framework) i had to search google for 'angular -js -io -framework -php -app -angularjs -typescript -module -code',neutral
istanbuljs/istanbuljs,istanbul,2017-02-14T19:57:16Z,yes. i think that's because angular is much more prevalent as a framework than "thinking about angles"try:,neutral
istanbuljs/istanbuljs,istanbul,2017-02-14T20:00:26Z,it would be good to get gotwarlost to move gotwarlost/istanbul to istanbuljs/istanbul then reparent 8c4a22fd45f68fe34769c54c7d97f532e089eaa2 onto it.,positive
istanbuljs/istanbuljs,istanbul,2017-02-14T20:10:44Z,> it would be good to get gotwarlost to move gotwarlost/istanbul to istanbuljs/istanbul then reparent 8c4a22f onto it.i agree that re-parenting the commit is a good idea. but my final thought on this   is that the `js` suffix is valuable and should remain.,positive
