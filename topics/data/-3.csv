bower/bower,mocha,2013-01-14T11:51:26Z,i agree with everything satazor  said!> - should the end event be always fired? regardless of success or failure?i would say that the end event needs to be always fired. unless there is an error. in which case. the error event is fired.> one possible solution is to remove the data argument (optional) in the end event and pass a true/false boolean instead.ideally. the end event should emit something like `.emit('end'. null[. args])`. this is very subjective because you would use the error event to catch up and bubble up errors. but it makes things easier to always have the same signature (such as passing in the mocha `done` handler straight through the end listener)also. maybe consider bubbling instance of errors or null instead of true / false booleans.,negative
bower/bower,coveralls,2014-04-17T22:21:14Z,i also added an option to make `lazyrequire` strict. as some commands aren't covered at all but weren't contributing to the coverage total.,neutral
bower/bower,coveralls,2014-04-18T12:04:52Z,i cannot add coveralls bower/bower repo. could an owner do that? sindresorhus,neutral
webtorrent/webtorrent,standard,2014-11-02T23:21:31Z,thanks! this looks good. but can we change the flag to `-o` and `--out`? i think that's more standard for terminal programs.,neutral
webtorrent/webtorrent,standard,2014-11-05T07:15:30Z,situation is good. http seeding is working (currently only bep19 the one that supports standard http) just currently refactoring webtorrent to make the addition more modular.,positive
redux-saga/redux-saga,eslint,2017-05-05T09:49:42Z,it may be obsolete and for now i'm thinking it actually is. the second identifier should easily cover the one from the upper scope. are you sure that this error is not caused by your eslint config or smth?,negative
infernojs/inferno,eslint,2016-09-19T20:18:01Z,haha i somehow missed the connection to eslint.yep. the tslint config matches the eslint one closely. the only exception is the rule about the `debugger` keyword which is currently allowed in tslint.,negative
jprichardson/electron-mocha,mocha,2016-05-23T12:46:21Z,i'll close this for now as this isn't an electron-mocha issue.pezholio i suggest that you create your own window stub for now. there is something about the browserwindow prototype's native binding that's throwing off sinon here. you will probably get the same error if you try to inspect the prototype yourself -- sinon obviously runs into the same issue when walking the prototype for stubs to create.,neutral
jprichardson/electron-mocha,mocha,2016-06-09T10:21:04Z,i don't know the exact scenarios where the app exit is not happening. i see electron gpu process and main process still running when i run tests (we have 100+ unit tests. and this issues happens only if i run all the suites together and not individual suites). so. i'm guessing it is a leak in electron which is causing this issue.to avoid electron-mocha failing due to this issue. i tried regular quit which works and doesn't change the functionality as far as i can say.,negative
jprichardson/electron-mocha,mocha,2016-06-09T10:25:45Z,so when this happens. electron-mocha exits. but there are some processes left? or does electron-mocha just hang (`electron-mocha --renderer` should open one main and one renderer process -- and they both continue to run?),neutral
jprichardson/electron-mocha,mocha,2016-06-09T10:31:10Z,all the tests are main process tests. tests create internally browser windows and close them. electron-mocha just hangs and electron main and gpu child process of main continue to run.,neutral
jprichardson/electron-mocha,mocha,2016-06-09T10:38:22Z,ok thanks. i'm a bit hesitant to merge this. because i think `app.exit()` should just close all windows regardless -- i would expect tests which open windows to close them again so. ideally. electron-mocha would only ever close the window it opened itself. jprichardson thoughts?,negative
jprichardson/electron-mocha,mocha,2016-06-10T09:32:17Z,chandrachivukula juturu can you try to close each window opened by a test after the test has finished? if there is a specific reason that makes this infeasible. you could also register a global after filter and call `app.quit()` there. personally. i think every test that potentially opens a window should make sure the window will be closed after the test. if the issue persists even though the every window has been closed. i'd be more open to working around this directly in electron-mocha.the reason why i'm hesitant is simply that we currently don't know what exactly causes this problem (can it happen for any window or only if the window process acts in a certain way. e.g.. forks another process or something like that. etc.). if we add this workaround and the next electron release fixes the cause of this problem (whatever it is). we wouldn't be aware of it and we'd keep maintaining the workaround code even though it would be superfluous at that point.so. like i said. if this can be worked around by closing the windows after a test. then we don't have to work around it in electron-mocha (we can keep this issue open for a while. in case someone else stumbles onto this).having said that. it would help a lot if you could reliably reproduce the issue. because then we could report it as an electron issue and track its progress.,neutral
ramda/ramda,sauce,2014-07-13T14:12:00Z,final(???) tweaks to where. and tests; start of sauce integration,neutral
ramda/ramda,sauce,2014-07-13T14:54:41Z,this still doesn't fix the biggest issue `r.where({a: undefined}. {}) //=> true`i don't understand how you keep skipping this... i've said this on 4 different prs,neutral
ramda/ramda,sauce,2014-07-13T15:26:12Z,i guess you didn't read my prior comment about undefined properties on the spec.,neutral
ramda/ramda,sauce,2014-07-13T18:06:49Z,if someone wants this behavior they can pass a constraint function on that property in the spec:```{a: function(a. obj) { return a in obj && obj[a] === undefined; } }```,neutral
ramda/ramda,jshint,2015-01-12T23:13:02Z,yeah. probably should be handled by a jshint hint `/*jshint typed: true */` in the corresponding tests,positive
ramda/ramda,jshint,2015-01-14T15:03:49Z,revert "added 'typed' option to jshint". reason: we want to warn about typed array usage since not all browsers we support have typed arrays implemented.,neutral
ramda/ramda,jshint,2015-01-14T19:07:08Z,thanks!,positive
MichMich/MagicMirror,mocha,2017-01-17T16:10:27Z,hi michmich i've interest a work in a test suite for magicmirror. i think is somethings we need.i can do develop somes tests. this patch propose the use mocha for the test suite.i would like to hear comments and if  we can work a list set of test to do.,neutral
pixijs/pixi.js,jshint,2016-05-18T23:27:12Z,semicolon. jshint,neutral
pixijs/pixi.js,jshint,2016-06-14T13:11:17Z,cleanup jshint errors. cleaned up the jshint errors.,negative
pixijs/pixi.js,jshint,2016-06-14T14:07:55Z,ta!,neutral
dresende/node-orm2,mocha,2014-06-03T10:39:43Z,global leak detected: i. got mocha error because of the missing 'var' statement,neutral
dresende/node-orm2,mocha,2014-06-03T23:01:05Z,neither do it; it passes for me locally so must be just a random travis thing.thanks!,neutral
lukasoppermann/html5sortable,standard,2017-02-24T22:12:43Z,removing jshint in favour of standard,positive
reactjs/react-docgen,eslint,2016-03-23T17:07:47Z,in the gist the parsing of jsdoc is missing i noticed. but basically it just uses eslint/doctrine to parse the docblock.,neutral
serverless/serverless,coveralls,2016-05-24T08:35:47Z,thank you coveralls!,positive
serverless/serverless,coveralls,2016-05-27T09:43:04Z,update branch of coveralls badge,neutral
peers/peerjs-server,mocha,2013-04-03T18:26:40Z,i see that you are using mocha and expect.js for peer.js. may as well use the same here.i'd be happy to implement tests to catch-up if you like. i'd just need to know what tests should be written up to meet your current expectations. probably a good idea to open an issue for each currently missing test to be sure their fully described and can be discussed.,positive
benderjs/benderjs,mocha,2014-07-09T08:13:43Z,rename bender-js assert plugin naming to test-runner. i found that naming yuitest runner an assert plugin is little bit confusing. technically this plugin is a test runner not just assert library. shouldn't be this called `runner` or `test-runner` not `assert`? also the same for configuration option `assertion`. etc.it's an early stage of bender develop so it shouldn't be much work with refactoring - or at least it's easier now when there is only one runner - but there will be other runners like mocha or jasmin.,neutral
benderjs/benderjs,mocha,2014-07-09T08:17:16Z,well. that's true. but we use both test runner and assertions. so it would be great to find a common name for that kind of plugins... but i can't think of any at the moment. so i guess we'll have to follow the convention from other testing frameworks and rename such to runners.,positive
benderjs/benderjs,mocha,2014-07-10T10:59:33Z,i've been thinking about this again and calling it `runner` might be confusing since it also includes assertions. so maybe `framework` fits better here?,negative
benderjs/benderjs,mocha,2014-07-10T11:38:03Z,sounds ok to me. sorry for closing - wrong button.,negative
Azure/autorest,standard,2016-04-22T18:53:51Z,we also need to have a standardized way of excluding particular languages from code coverage for a given test. this is needed for tests that don't apply to certain languages and for scenarios that have not yet been implemented in all languages.the proposed way of doing this is to have a mask for each language that would be applied in the report route on the test server. while the report that gets dumped on disk contains the raw coverage. that way we can still generate a markup file with information on which scenarios still need to be covered by each language.,neutral
Azure/autorest,standard,2016-04-29T12:56:38Z,ruby generator: do not call validate on string in array[string] in model. i am working on a beaker module using the ruby azuresdk. i got strange errors on validate methods from beaker. which i did not call from my code. after investigation it turns out that the error is caused by a validate function on array<string> in the ruby azuresdk. this code is generated from autorest:```# return [array<string>] gets or sets list of address blocks reserved# for this virtual network in cidr notationattr_accessor :address_prefixes## validate the object. throws validationerror if validation fails.#def validate  address_prefixes.each{ |e| e.validate if e.respond_to?(:validate) } unless address_prefixes.nil?end```currently the ruby code generator generates validation code for dictionaries in a model. this works great if the type in the array is an object.in case of primitive types in the dictionary ruby goes looking for a validate method and uses the first one it can find.calling this validate method from standard ruby code works fine. calling it from code that's integrated in another library can cause issues (in my case beaker).i think the solution to this problem would be to change the way validation code is generated in autorest. it should not generate validation code for arrays with a primitive type. since these methods do not exist.,negative
airbnb/javascript,eslint,2016-01-19T20:29:20Z,adambrodzinski did you end up finding a way to solve this without instaling `eslint-config-airbnb` globally? thanks!,positive
airbnb/javascript,eslint,2016-01-20T14:19:54Z,geekjuice thank you very much. that's precisely what i was looking for.it works. but i had to change `b:syntastic_javascript_eslint_exec` for `g:syntastic_javascript_eslint_exec` (note `g:`) and put `call syntasticeslintchecker()`. is that what you intended?,negative
airbnb/javascript,eslint,2016-01-20T17:18:50Z,gunar if you use `autocmd filetype javascript :call syntasticeslintchecker()` to call the `syntasticeslintchecker`. it will set the `eslint` executable when opening the file only for that buffer. which can be handy if you jump around multiple projects in the same vim session. that is why `b:` was used instead of `g:` above.,neutral
airbnb/javascript,eslint,2016-01-22T07:28:18Z,can't we close this? is there more work that needs to be done here?jacobrask that seems like a feature request for eslint-react,neutral
airbnb/javascript,eslint,2016-01-22T19:35:35Z,sounds like time for a pr into eslint itself! :-d,positive
airbnb/javascript,eslint,2016-01-22T22:36:10Z,what's missing from eslint exactly?,neutral
airbnb/javascript,eslint,2016-01-26T06:14:00Z,i battled with that too. but here's how i settled on removing the labels:- `eslint-rule` vs `jscsrule`- hovering over the link- we can remove 37 instances of eslint and 36 instances of jscs- what's the use case where a reader wishes they could get to the eslint rule faster?,negative
airbnb/javascript,eslint,2016-02-09T13:41:57Z,migrate eslint-plugin-react to peerdependencies. shouldn't the react plugin be a `dependency` or `peerdependency` since it must be installed as a sibling of the config for it to properly list.,neutral
airbnb/javascript,eslint,2016-02-09T17:25:33Z,that's a really good point. it's currently a devdependency.i think i prefer it being a dep instead of a peer dep - anyone have any reason why a peer dep would be more appropriate?,neutral
airbnb/javascript,eslint,2016-02-10T19:49:16Z,i was not sure of the difference between the two. so i would agree it is a dep.,neutral
airbnb/javascript,eslint,2016-02-10T22:35:38Z,(if it becomes a dep. it wouldn't be a dev dep. but if it's a peer dep. it would definitely also be a dev dep to ensure tests can pass without explicitly installing the dep),neutral
airbnb/javascript,eslint,2016-02-10T22:47:17Z,oh yep. you're right.,neutral
airbnb/javascript,eslint,2016-02-12T13:34:53Z,so just to confirm. it will be added as a peer dep. this is because as a peer dep it is installed properly for use as a dep and a devdep. is this correct?,neutral
airbnb/javascript,eslint,2016-02-12T16:18:54Z,kwelch as of npm 3. peer deps are not automatically installed anymore. i'm still not certain. but am leaning towards straight dep. if it _is_ a peer dep. it would have to be _both_ a peer dep and a dev dep.,negative
airbnb/javascript,eslint,2016-02-13T09:52:17Z,so many errors for a single console statement. have a look at this screenshot  have been using your eslint configurations. i never got these errors which are showing in this screenshot in the past. can you help me with this issue please?thank you,negative
airbnb/javascript,eslint,2016-02-14T06:55:01Z,i ended up making this both a peer dep and a dev dep. i may make it a straight dep in the future but for now this will suffice.,neutral
airbnb/javascript,eslint,2016-02-14T23:16:20Z,remove peer-dependency from eslint-config-airbnb. can i suggest a small change to eslint-config-airbnb to remove the peerdependency on eslint? the reasoning behind this is:- some plugins like gulp-eslint compartmentalise the eslint dependency. but with the package-level peerdependency it means that we end up getting an npm warning at the root package that nobody can do anything about.- other packages may want to read/leverage the rule sets. and shouldn't have to take the npm warning to do so.its kind of implicit that the plugin requires _something_ that leverages the eslint ruleset standard. so i'm not sure that an explicit peerdependency is actually a requirement anyay.,neutral
okTurtles/dnschain,mocha,2015-01-11T07:05:06Z,settled on mocha.while there are no actual tests. the test architecture seems to be working and has been pushed to the `mocha` branch along with documentation. so i will close this issue. this will be merged into `dev` very soon (since #35 depends on this being closed). and then hopefully into `master`.separate issues can be created for adding individual tests.,neutral
algolia/vue-instantsearch,eslint,2017-07-20T17:28:45Z,i'd like to summon vvo on this one :p,neutral
algolia/vue-instantsearch,eslint,2017-07-21T11:49:50Z,ok let's wait for it then ;),neutral
algolia/vue-instantsearch,eslint,2017-08-05T19:20:14Z,from reading the docs. we can learn that keys are used:- for removing/destroying part of the node (which works with this pr)- for re-ordering elements instead of diffing more stuff (i'm just wondering what happens if content for a key changes)we will also need to convert non string values to strings (like in rating).what all started this was the eslint vue plugin which encourages the use of keys. i think the improvement in terms of perfs must be huge.that being said we now need to figure out how vue handles the change of content inside of an already existant key. i think that the content will only be refreshed if it is no longer part of the list. which i think is ok for results for example. for other elements like facet values it would be a problem if it doesn't update the counts. we would need to generate a key that contains both the name + the count. and i'm not even sure that would be sufficient.,positive
velesin/jasmine-jquery,jasmine,2013-07-10T18:50:47Z,eeesh. wrong repository. sorry.moved to pivotal/jasmine#402,negative
wbuchwalter/tslint-loader,eslint,2016-11-29T08:16:09Z,enable eslint. it will be nice to add eslint to this project.it is not that big to benefit from es6. so i don't think we need to bring in additional transpilation step. but having eslint checks will ensure consistent coding standards for this repo.rules may extends `eslint-config-recommended` and use `eslint-env=node`.,neutral
wbuchwalter/tslint-loader,eslint,2016-11-29T13:49:39Z,pull request #51 closes this one.airbnb styleguide includes a lot of rules related with jsx. react and other stuff which is not used here.in #51 basic eslint support has been added. i think we can have this as starting point in any case.,neutral
wbuchwalter/tslint-loader,eslint,2016-11-29T15:04:53Z,why not use typescript and tslint?,neutral
wbuchwalter/tslint-loader,eslint,2016-11-29T15:38:45Z,that will require additional transpilation step. which we think is overhead for relatively small amount of code we currently have,neutral
wbuchwalter/tslint-loader,eslint,2016-11-29T15:42:28Z,true. an additional step. but as the code grows you have added error checks done by typescript. i wouldn't think so much as typescript having to traspile the code. i like to think more of typescript as as additional error checker. also. the transpilation doesn't take long.,negative
wbuchwalter/tslint-loader,eslint,2016-11-29T17:00:22Z,i don't think the code here will grow much. this is the loader for webpack. it does not aim to do complex things. i personally use typescript now in one of mine projects and find it extremely useful for refactoring code. but my code is approx. 50 times longer than the code of this loader. and i don't think we'll gain big benefits from typescript here. another downside of typescript is that after introducing it you'll bring in remap-istanbul for correct code coverage. which is not actively maintained and has several nasty issues.,negative
videojs/video.js,standard,2016-05-18T15:51:51Z,also. i'd love to get some videojs/core-committers thoughts on the notion of firing non-standard events like this. and whether we should namespace them to make it crystal clear they're not standard.,positive
videojs/video.js,standard,2016-05-18T20:02:02Z,i'm obviously a vote in favor of something like that since that's basically what i'm proposing here.  and when considering it. also consider the idea of namespacing non-native/standard events. could be something like `'vjs:custom-event'`.,neutral
videojs/video.js,standard,2016-05-19T14:23:58Z,misteroneill are the browser behaviors you're seeing not compliant with the standard? if that's the case. i think it's reasonable to normalize their behavior in video.js (and maybe that gets rid of the need for new events).,neutral
videojs/video.js,standard,2016-05-19T15:40:54Z,as we discussed in person. the standard doesn't seem to give us any recommendation about ordering of events like `loadstart`. `play`. and `playing`.i've been spending the morning observing behaviors in chrome with different combinations of `preload`. `autoplay`. playlists. and video tech.html5. thankfully. is fairly consistent. it follows the `loadstart -> play -> playing` pattern for all combinations except `preload: "none"`. where it's `play -> loadstart -> playing` in most cases.flash is less consistent. in fact. with `autoplay: true` and playlists. we get patterns like:```playplayingplayplayingplayplayingloadstartplayplaying```also. i want to be clear that i don't want to merge this just to solve some problems we're having that. in some cases. are caused by external projects (swf. playlists. etc). i'm open to all sorts of ideas - like moving it into a separate project that modifies video.js with experimental features or something similar.,negative
sitespeedio/browsertime,selenium,2014-12-23T11:13:19Z,seems more like a node/selenium/windows issue than an ie issue. if i'm not mistaken this used to work in the old browsertime. for now. we could try an early return in the script if it's running in ie.,positive
sitespeedio/browsertime,eslint,2016-06-02T07:42:38Z,i'm not 100% sure about loading scripts from disk in engine.js. the initial idea was for all setup like that (e.g. parsing and transforming cli args) to happen outside of the engine to keep the core classes from growing. forcing the scripts to be a file on disk limits the flexibility of the engine as well. e.g. it can't be used in a web server where you post the data for the engine run. that's why i've eslint config for lib/core explicitly forbids use of the node 'fs' module. using require to load and parse files sneaks under the radar…that said. it's a good change over all. update taskdata to scriptdata and we'll merge. then we can revisit the loadprepostscripts decision before cutting the next alpha release.,negative
babel/babel-loader,eslint,2016-08-06T12:05:47Z,oh i never noticed it is using jshint.   for the move to eslint. not sure which config tho. `eslint-config-babel` might be a good start.,negative
babel/babel-loader,eslint,2016-08-06T17:57:27Z,i usually try to keep code styles inline with parent repos. so in this case `eslint-config-babel` is a perfect place to start  :),positive
babel/babel-loader,eslint,2016-08-07T07:47:06Z,chore(style): convert to eslint. > need at least two sets of eyes on this as it touches the scope of every variable in the loader.- remove all jshint and jscs related content- add eslint and supporting files- add eslint-config-babel ( override quotes )- adds eslint-config-babel deps for node v4- fix project lint errors- bump cache test timeout for osx node v4resolves #275 //cc danez abouthiroppy,negative
babel/babel-loader,eslint,2016-08-07T08:32:14Z,fyi - this is what the coverage should have been. we lost line coverage when reformatting with eslint as it's not big on single line functions. temporarily disabled the require for patch & project until this one lands.,negative
babel/babel-loader,eslint,2016-08-07T15:46:15Z,lgtm with nits,neutral
babel/babel-loader,eslint,2016-08-08T11:40:18Z,lgtm. only two small things,neutral
babel/babel-loader,eslint,2016-08-08T19:19:26Z,rgr. i'll get my dyslexia oops and the lint ignore updated shortly.,neutral
babel/babel-loader,eslint,2016-08-09T09:59:46Z,replacing var with const/let also means node v4+ only. do we really want to open this bottle right now? i'm fine with doing a major release. but then we should think about what other breaking changes we can do.,positive
prettier/prettier,eslint,2017-02-19T04:36:21Z,oh. i try to search for semicolon issues but forgot to include the closed issues  however. i don't think it's a good idea to install another tool (eslint) for such a simple use case.no semicolon should be the first class option of prettier. as a user. i want to make the code more pretty to look at. so i decide to use the tool. but. the tool should not mess up with my code (at least. it should not add more characters).,neutral
prettier/prettier,eslint,2017-02-21T14:02:03Z,i'm fine with it too! my only concern is the naming of all these projects. we have prettier-eslint. eslint-config-prettier. and eslint-plugin-prettier. in addition to any editor-specific integrations (prettier-eslint-atom. prettier-atom). maybe this is just part of this kind of work and combining all the tooling is going to make a lot of similar names.it would be good at least to have a list of all these projects and a short explanation of what each does.but yeah. let's get it in here. how do we do that? do we need to create teams and such and add kentcdodds to one of them so he can move it here?,positive
prettier/prettier,eslint,2017-02-21T16:39:19Z,(note that eslint requires a certain naming convention for its shareable configs and plugins: `eslint-config-foo` and `eslint-plugin-foo`.),neutral
prettier/prettier,eslint,2017-02-21T16:43:51Z,lydell. i'm aware of that. `prettier-eslint` is neither a config nor a plugin.,neutral
prettier/prettier,eslint,2017-02-22T14:33:32Z,consider separating cli.. this would reduce the number of dependencies when `prettier` is used as a library (i.e. `prettier-eslint`).would you be interested in a pr for this?,positive
prettier/prettier,eslint,2017-02-22T22:32:13Z,i don't know. i know there are some specific advantages but i think it makes the overall experience feel a lot more bloated. we are thinking through a server architecture right now though and we'll probably have a better idea after that's finished.,negative
prettier/prettier,eslint,2017-02-22T22:36:01Z,thank you for your consideration.it does take a bit more work. but `lerna` takes a lot of the hassle out of it.,negative
prettier/prettier,eslint,2017-02-24T04:53:03Z,`lerna` is a whole new tool and more stuff to manage. :) not saying it's not a good project. but i'm hesitant to add a lot of boilerplate. i think i'd like to focus on core bugs right now before refactoring the infrastructure of the project.,positive
prettier/prettier,eslint,2017-02-25T00:47:18Z,by the way. i can also transfer `eslint-plugin-prettier` to the `prettier` org -- just let me know when all the logistics are figured out.,positive
prettier/prettier,eslint,2017-02-26T13:49:09Z,i think teams can be challenging to manage and you can simply as contributors on specific repositories within and organization. so once i transfer prettier-eslint over. i believe you just need to add me as a contributor with admin access and i can continue to manage contributors as in doing now. sound good?,positive
prettier/prettier,eslint,2017-02-27T17:38:32Z,(just to be clear to others reading this. there are two things. `prettier-eslint` and `prettier-eslint-atom`.)i'm thinking we should merge `prettier-eslint-atom` into the `prettier-atom` repo. which i'm currently helping maintain. once we've done that. kentcdodds can deprecate `prettier-eslint-atom` and have all users migrate over to `prettier-atom`. this way. if you're an atom user. there's one package to worry about regardless if you use eslint or not and it's simple both for the users and the maintainers.i've gone ahead and already merged the `prettier-eslint-atom` code into the `prettier-atom` repo in a local branch and am most of the way done—i just need to implement some jest testing. then i was hoping jlongster could transfer ownership of that repo so that i could manage things like ci and other integrations and i would be held responsible for maintaining it (fixing bugs. reviewing prs. organizing and answering issues).,negative
prettier/prettier,eslint,2017-02-28T15:37:29Z,jlongster if you do the same things you did to kentcdodds to me i could transfer eslint-config-prettier :),neutral
prettier/prettier,eslint,2017-03-01T20:10:56Z,prettier now leaves the input as is```js    try {      body = json.parse(body);    } catch (e) {} // eslint-disable-line no-empty```,positive
prettier/prettier,eslint,2017-03-04T22:01:29Z,would it be useful if i transferred `eslint-plugin-prettier` to the `prettier` organization?,positive
prettier/prettier,eslint,2017-03-05T17:35:40Z,thanks vjeux. i am going to improve the docs for `typescript-eslint-parser`. it is definitely ready for something like this,positive
prettier/prettier,eslint,2017-03-06T02:01:17Z,i've never written code without semi-colons so i'm not sure. do you know if there's a conventional way? good places to look would be the `standard` project and what the autofix rule of eslint does.,negative
prettier/prettier,eslint,2017-03-06T15:59:58Z,jlongster yes it is effectively the same journey we have gone on for eslint.initially. for us it was all about producing a valid estree and ignoring the types. then slowly but surely we added more and more estree-like nodes in for the typescript type information.wherever there was a precedent set by flow we attempted to use that. but in some cases typescript has extra syntax. we should be very consistent with this behaviour. but it is currently not explicitly documented.the typescript team have also requested more info about these typescript -> estree/flow mappings that occur and i am going to document everything we do in `typescript-eslint-parser`.it is not on any kind of roadmap for the typescript team. and they have their reasons for their current ast structure. but perhaps in the future typescript would even be able to support emitting an estree (+extensions) ast in the future (i.e. the tsc would effectively do the job of `typescript-eslint-parser`).cc danielrosenwasser for visibility,neutral
prettier/prettier,eslint,2017-03-06T18:23:13Z,yup. just added prettier formatting to a project and caught this one thanks to eslint reporting unreachable code after the return :),positive
prettier/prettier,eslint,2017-03-07T21:56:29Z,i must say i am chuffed with how well `typescript-eslint-parser` has done with this  and it's a really useful project for me for finding edge cases in the parser,positive
prettier/prettier,eslint,2017-03-11T16:50:07Z,thanks for the explanation rattrayalex my thought are a bit different. for me. the best thing with `prettier` is to have a consistent codebase on a project. no matter how many devs you got. and how they deal with indentation and code style. (i've got projects with lots of devs on it. already using eslint a lot. but was hoping that `prettier` will totally fix that. it does for a good part. but not totally)so i was thinking that the normal behaviour from `prettier` was to always have the same output for a same code even if the code is not indented the same way at first.i understand your concern. i also understand that people may don't like everything on the same line when the max_line config allow it. but i found it very strange to have multiple output on a same project depending how the dev has originally written the code :-),negative
prettier/prettier,eslint,2017-03-14T09:25:33Z,emacs: make prettier use local .eslintrc file if exists. prettier seems to use global .eslintrc file when making customizations. i am not very comfortable with emacs. so can you please suggest on relevant configurations. i want prettier to use project specific.eslintrc file if it exists,positive
prettier/prettier,eslint,2017-03-15T18:29:22Z,thanks. we need to make it not directly call require so that static module loaders do not see it yet. it also broke all our release generation.```jsrequire('typescript-eslint-parser');```to```jsvar r = require;r('typescript-eslint-parser');```,neutral
prettier/prettier,eslint,2017-03-15T18:33:28Z,apologies. must be eslint's autofixing.,neutral
prettier/prettier,eslint,2017-03-15T19:35:32Z,they use standard itself. i use prettier-eslint. much less rules (mostly no semicolon). my package also supports custom eslint rules just like prettier-eslint (but it's not documented yet). so you can override anything you don't like from standard as well. plus better cli,neutral
prettier/prettier,eslint,2017-03-16T10:53:24Z,yes!so. one the constraint that prettier has is that it does not transform the ast. it takes an ast and prints it in order to generate the same ast back. this part is really hard to write correctly.what i want is to have a way to put ast transforms in front of prettier as plugins which look very similar to eslint plugins. text -> ast -> sort-imports -> function-to-arrow -> prettier -> text. writing ast codemods is really easy with tools like jscodeshift.this way we concentrate the complexity in the prettier lib itself and can expose an easy plugin api for people that want to customize it.,negative
prettier/prettier,eslint,2017-03-17T00:24:41Z,think this is an awesome idea! providing these plugins are enforced to be **pre** prettier (prettier^2 ???) it doesn't seem this goes against the original no-config goals of the project. i believe that is what vjeux is implying so  some more supportive examples off the top of my head:- ensuring props are typed and destructured consistently across all of our components.- run eslint --fix as a pre step? :thinking:,positive
prettier/prettier,eslint,2017-03-17T01:20:02Z,> run eslint --fix as a pre step? 🤔there's `prettier-eslint`. (which ribs it as a post-step) but it'd be sweet to see whether there were a way to hook them up at the ast-level so we could avoid double-parsing :),positive
docpad/docpad,standard,2014-02-14T21:32:26Z,we could keep utf8 for io operations.but for charset in http header this is a problem. `utf-8` is the standard.if we keep `utf8` in headers. some browsers will not work with docpad.so ?,neutral
AzureAD/azure-activedirectory-library-for-js,karma,2014-09-27T00:23:00Z,more tests. add more testsbower installerkarma config to use it later in angular testsremove adal.js in scripts folder,neutral
AzureAD/azure-activedirectory-library-for-js,karma,2014-10-09T00:07:01Z,angular tests. angular interceptor testupdate karma config to run angular tests from karma cmd,neutral
sequelize/sequelize,jshint,2015-11-24T07:22:52Z,lgtm. just needs some tests and jshint-fixes,neutral
sequelize/sequelize,jshint,2015-12-03T07:50:58Z,jshint error,neutral
TryGhost/Ghost,mocha,2014-04-30T21:05:05Z,annetheagile hello there. we are already using mocha for our unit tests. mocha can’t be used for performance tests as we would like to have them though.,neutral
TryGhost/Ghost,mocha,2014-05-01T16:03:24Z,new relic is nice for testing certain things. but it's also a bit over complicated. and i'm not certain that it lets us run tests as part of the build.ideally what i'd like is a set of benchmarks for particular parts of the application done using a tailored tool like benchmark or litmus. i'm sure this _can_ be done using mocha. but it seems like we're trying to bend the tool to our will. rather than using something designed for the purpose.,positive
TryGhost/Ghost,mocha,2014-05-01T17:13:44Z,erisds . thank you for more detail on what you want. so is this ticket a placeholder so sometime you can buy benchmark/litmus [i'm  not familiar with either]? i am a big agile fan. so it seems like it would be nice to use tools we already have [mocha] to get a tiny bit of the value and then see if we can use the data effectively? in the open source spirit. i am not the fastest hacker. but i would really love to try to benchmark a tiny bit of the system with mocha. it seems like you have all the infrastructure for me to try out a bunch of things and then your ci machine will tell me if i got it right. i love that! in any case. perhaps you also know which parts of the system you'd like to check? maybe putting that here would also be a good start.,positive
TryGhost/Ghost,mocha,2014-05-01T20:13:10Z,i'm not sure what you mean by "sometime you can _buy_ benchmark/litmus". they are both free open source tools.if you wanna have a go with mocha. by all means give it a shot. the thing to look at benchmarking. imo would be the api?,negative
TryGhost/Ghost,mocha,2014-05-05T21:29:41Z,updated error handling on all mocha tests. - switch to using catch- added error handling where missing,neutral
TryGhost/Ghost,sauce,2016-01-25T15:33:35Z,yep. saucelabs is definitely on the cards too. we may need to look into splitting the repositories as the client testing gets more involved because travis' matrix really doesn't cover the multi-project same-repo use case well.,neutral
andreruffert/rangeslider.js,jshint,2014-07-24T14:55:38Z,changed call to current date to get the valueof explicitly. an implicit cast was causing issues when being minified as parenthesis werebeing removed so the `+ +new.date` call could be misinterpreted as a`++new.date` operation.i also added another 'use strict' call so that jshint was satisfied.,negative
postcss/postcss-cli,coveralls,2017-01-10T22:00:23Z,add nyc code coverage tool & coveralls,neutral
rickbergfalk/sqlpad,eslint,2017-10-22T12:26:02Z,switch from prettier-standard to prettier & eslint. this switches linting and code-formatting to use eslint and prettier directly instead of using prettier-standard. while prettier-standard was nice as a utility. using eslint and prettier directly offer better integration with tooling. and reduce nested dependencies.eslint uses the react-app config. which is not too opinionated. prettier formatting has a couple changes from defaults to prevent massive code diffs on style updates.,positive
angular-fullstack/generator-angular-fullstack,karma,2014-04-25T12:56:26Z,normally it helps to `npm uninstall -g generator-karma generator-angular generator-angular-fullstack` and reinstlall after that. helped me out a few days ago.,neutral
geowarin/friendly-errors-webpack-plugin,eslint,2017-02-15T10:23:37Z,fix win ci. when setting up appveyor. i noticed the path of the file was repeated on windows when a babel syntax error was found.this is probably a babel-loader bug but i decided to go ahead and fix it.there is another error with the eslint loader where the path is also repeated.i think we can do a better work cleaning eslint errors (#15) so i let this one fail for the moment.,negative
geowarin/friendly-errors-webpack-plugin,eslint,2017-02-15T13:06:23Z,improve eslint messages. fix #15es-lint warnings should now be grouped correctly (showing the hints once) and not show the stacktrace of the eslint loader nor duplicated file information,neutral
geowarin/friendly-errors-webpack-plugin,eslint,2017-02-15T14:39:50Z,i rolled back your change.again. i'm really sorry about this. i messed up.if you don't mind opening another pr with your change. you can use the _sandbox project to test your pr.for instance. try to remove the `/* eslint-disable */` comment in `_sandbox/index.js` with only a tiny bit of screen space remaining. in this case. the console will not be cleared properly.ci should now build on both linux and windows and that will help discussing your change.,negative
geowarin/friendly-errors-webpack-plugin,eslint,2017-02-16T08:50:00Z,your call.to detect if an error comes from the eslint loader. we have no other choice than looking at the stackframe to see if it's in there somewhere.so we use `error-stack-parser` to get a proper array of stackframes that we can investigate instead of a string.the error you saw was because we assumed that the stackframe would always have a `filename` field and that it should be a string.we could actually write the following check `tyepeof stackframe.filename === 'string'` but that would be a really weird precaution to take,negative
webpack/webpack,standard,2016-07-05T13:38:51Z,adding file standard validation in repository. adding standard validation in files. based in `.editorconfig` default configurations.,neutral
webpack/webpack,uglify,2017-11-12T12:33:05Z,pierreneter we should add the regular `process.env.xxx` to the defs variable. the reasoning is that if i use `process.env.xxx` in my code. it will be rewritten to the value of `xxx` instead of `{ xxxx: 'bar'. other: 'var' }.xxx`. this makes sure that code-elimination with uglify still works.basically. we should keep the old code and add `process.env`: `json.stringify(collected vars)` at the end.,positive
webpack/webpack,uglify,2017-11-24T14:29:09Z,one should re-consider that.as of november 2017. everything else in the chain besides webpack (i.e. firefox. node. babel. uglifyjs) supports object spread operator. i got to this problem only when i started to use webpack.what should i do if my browser supports object spread operator? i don't want babel to transpile that. i want to receive `{...x}` in the source code.,negative
webpack/webpack,uglify,2017-11-27T07:52:21Z,this issue is happening because uglify-js's dependencies can't be fully resolved via static analysis.any idea if webpack or uglify-js will come up with a solution for this?,negative
sidorares/node-mysql2,eslint,2016-02-19T04:57:02Z,add eslint,neutral
prebid/Prebid.js,standard,2017-09-08T13:57:51Z,please help us understand why you're setting sendstandardtargeting to false and overridding everything with what amounts to the standard targeting?1) there are known bugs with overridding standard targets.2) modifying bid cpm should be done with biddersettings.bidcpmadjustment,neutral
prebid/Prebid.js,standard,2017-09-10T12:38:55Z,we are using custom standard targeting that is why we have to do false. otherwise it can pass values into hb_pb. which we have not created values into dfp lineitem.,neutral
prebid/Prebid.js,standard,2017-09-11T18:10:19Z,remove do callbacks if needed. ## type of change<!-- remove items that don't apply and/or select an item by changing [ ] to [x] -->- [x] bugfix## description of changea couple bug fixes that were easier to combine into one pr. the first removes the bid parameter to calls to addbidtoauction. since that function doesn't actually accept any parameters. the second removes docallbacksifneeded since the calling order with addbidtoauction wasn't standardized. and it seems like it should be. specifically it seems like the callbacks should always be done after the bid is added to the auction.,neutral
prebid/Prebid.js,standard,2017-09-19T02:59:03Z,upon further review. if you override the `hb_pb` key as well. this works as expected. does that solve for the use case here? the root issue is treating `hb_pb_${bidder}` as as "sort of" standard keys. i think we need to make these defacto standard keys and refactor `targeting.js` but this would take a bit of work.,neutral
prebid/Prebid.js,standard,2017-10-02T21:07:59Z,improve bid object. ## type of issuefeature request## descriptionwe think that currently bidders do not provide enough information about their bids to address all publisher’s needs. openrtb. which is a de facto standard in the s2s world. has many important parameters that are not available in prebid.js. we want to continue improving communication between publishers and demand partners and suggest adding the following openrtb parameters in the bid object:- iurl- adomain- cid,neutral
prebid/Prebid.js,standard,2017-10-02T21:08:21Z,the standard openrtb adapter. ## type of issue* **question**## description#891 mentions the "standard openrtb adapter" per the following:> any adapter using the openrtb protocol must alias the standard openrtb adapter provided by the prebid core framework.could someone point to a module/branch/repo for the standard openrtb adapter?thanks.,neutral
prebid/Prebid.js,standard,2017-10-02T21:13:26Z,hey elljoh we didn't find too many bidders that are using ortb protocol so we did not build it. that said if you have the time to implement a spec for it. that probably is helpful. i would suggest using the baseadapter to implement the openrtbbase adapter. which other adapters could then implement a spec for.,neutral
prebid/Prebid.js,standard,2017-10-02T21:17:49Z,thanks,positive
prebid/Prebid.js,standard,2017-10-02T22:00:49Z,this would be an interesting addition to prebid overall and something we would be interested in testing. actually doing this within the prebid server would be really interesting opposed to client side.,positive
prebid/Prebid.js,standard,2017-10-04T17:51:24Z,pwyrembak the specific compression format doesn't matter. all that matters is that you support compression on the response based on what the client sends in the standard http header `accept-encoding`. for example:`accept-encoding:gzip. deflate`we cannot guarantee what a client sends. that's up to each individual browser. agent etc.,neutral
JedWatson/classnames,mocha,2015-02-25T06:05:28Z,package: remove unnecessary pathing. npm automatically includes `~/node_modules/.bin` in the path when running scripts; so there is no need to specify this.it will not revert to the globally installed `mocha` unless the package is missing.,negative
JedWatson/classnames,mocha,2015-02-26T02:50:09Z,thanks for the simplification dcousens,positive
Automattic/mongoose,eslint,2015-11-21T17:16:46Z,linting. updates eslintrenames `.eslintrc` to `.eslintrc.yml`updates code style in `readme.md`resolves lint warningssame as #3604 but with correct git history,neutral
pouchdb/pouchdb,eslint,2015-11-25T18:33:13Z,ffle actually this has nothing to do with our problem but. you could add pouchdb in globals or .eslintrc,neutral
pouchdb/pouchdb,eslint,2015-12-01T14:20:00Z,'emit' function not defined. hello.i am creating secondary index like this``` javascript                var assetsearchindex = {                    _id: '_design/assetsearchindex'.                    views: {                        byassetnum: {                            map: function(asset. emit) {                                emit(asset.assetnum);                            }.tostring()                        }                    }                };```however when index is being built. i receive multiple errors```typeerror: emit is not a function```after some debugging i found out that i should not receive emit as param. because it exists in upper scope. when map function is eval-ed.i think this is not correct. because:1) it is inconsistent with temp index syntax2) map is using 'emit' which is not passed nor defined (this also causes eslint validator errors)thanks.vlad,negative
pouchdb/pouchdb,eslint,2015-12-01T18:23:17Z,you should declare your view like this:``` javascript                var assetsearchindex = {                    _id: '_design/assetsearchindex'.                    views: {                        byassetnum: {                            map: (function(asset) {                                emit(asset.assetnum);                            }).tostring()                        }                    }                };```you must believe `emit` will be defined at the time the function is run. and it will. this is the way couchdb does it. and pouchdb mimics that for compatibility.,neutral
pouchdb/pouchdb,eslint,2015-12-01T18:33:23Z,speaking from couchdb side. there was a pr that makes emit pass as argument to map function. that's really not a problem. the problem is that there are quite a lot of other functions in global namespace that we provide: json object. tojson. isarray. sum. etc. and support of all of these will turn function signature into hell.,negative
pouchdb/pouchdb,eslint,2015-12-01T18:33:47Z,optional keyword-only arguments may help here. but i'm not sure if js supports this feature or will in the nearest future.,negative
pouchdb/pouchdb,eslint,2015-12-01T21:31:41Z,sorry guys. but if it is possible to not use global variable. then one shouldn`t. this is one of the basic rules.it is also bad idea to make "json object. tojson. isarray. sum. etc" declared as global without any namespace. because those names are quite common and it will lead to conflicts with either other libraries or new browser api in future."optional keyword-only arguments may help here. but i'm not sure if js supports this feature or will in the nearest future."this feature is not supported. but from my experience 2-3 arguments are not too much. in this case only 2 is enough.fiatjaf  - if you read my text above more attentively. you will see that i am aware that emit is defined on the run time (taken from upper scope).,negative
pouchdb/pouchdb,eslint,2015-12-01T23:31:16Z,vladyslavgoloshchapov agreed. this is bad and not clear. suggestions how to fix this and not break the bc? (: so far general solution leads to function signature for 7 arguments (for map function) with no oblivious order and way to handle this.p.s. i spoke from couchdb side. so there is no reason to care about any conflicts or browser api changes. sure. if pouchdb follows the same. there could be some issues. but i'm not expert in this question (:,negative
pouchdb/pouchdb,eslint,2015-12-02T07:28:06Z,kxepal. sorry i am a bit new to pouch/couch. as far as i know only 2 params are required for map function: (doc (object). emit(function)). did i miss something?again if there are really 7 params - it is possible to combine them into one. js does not support names params. but that can be easily substituted with object:```fun.apply(null. {doc: doc. emit: emit. smthelse: smthelse ...})```i completely understand that this may be a big change to pouchdb. but having many globals is worse in my opinion.usually libraries export only 1 global variable. like $. but even jquery has .noconflict() function.akircher completely agree.,negative
pouchdb/pouchdb,eslint,2015-12-02T10:03:35Z,vladyslavgoloshchapov ok. thank you. i'll throw this idea to couchdb ml and will see how it goes. leaving this thread for pouchdb discussion now (:,positive
pouchdb/pouchdb,eslint,2015-12-02T10:04:30Z,thank you for attention,positive
pouchdb/pouchdb,eslint,2015-12-13T21:57:59Z,kxepal thank you too,positive
pouchdb/pouchdb,mocha,2013-11-30T15:52:29Z,i think a massive test refactoring probably deserves its own pull. for instance if we were to switch to mocha then #1054 would be much easier.,neutral
pouchdb/pouchdb,mocha,2013-11-30T20:33:38Z,cool. yeh those are good things to fix. my worry is that any way we do something differently inside the tests gives us more scope for things to break in production but pass in tests. i just tested this and its working good. will merge this so can unblock any amd stuff and start looking how to get rid of the shim and the crufti do want to move test suites. qunits node runner is fustrating. mocha and tape didnt have great in browser runners last time i tried them though,positive
pouchdb/pouchdb,mocha,2013-12-01T16:08:28Z,switch to mocha. the browser runner is pretty much the same (but looks nicer). the node runner on the other hand actually tells you what tests it uses. as mocha actually includes a qunit shim. the main issue will be dealing with all the weird cruft in the tests. should make #1021 much easier.,positive
pouchdb/pouchdb,mocha,2013-12-01T17:48:06Z,not sure what you mean by passing db names. won't all environments have exactly 2 adapters http and local?,neutral
pouchdb/pouchdb,mocha,2013-12-07T23:16:19Z,i havevn't looked into that one much. it uses tape right?,neutral
pouchdb/pouchdb,mocha,2013-12-07T23:52:20Z,yup. test definition is clean (dont really like default mocha specs). its small and hackable. theres a bunch of browser scaffolding already done for us which is nice,positive
pouchdb/pouchdb,mocha,2013-12-08T13:48:30Z,gonna assign myself for this since i am gonna work on it today and hopefully dont duplicate each others work i am fairly sold on karma being the test runner. some complications but looking into it now. and if karma is the test runner then mocha integrates nicely. qunit might suffice too. i actually like qunit specs. just not the runner. in particularly the node one,positive
pouchdb/pouchdb,mocha,2013-12-08T16:25:57Z,so theres a little if (node) cruft in these tests. however its not much and there needs to be a pretty hard requirement that we test the actual `pouchdb-nightly.js` package. we may be able to get best of those worlds by browserifying the test code. will take a look at that after i look into the browser runners. any ideas welcome,positive
pouchdb/pouchdb,mocha,2013-12-09T00:10:54Z,so first problem. between karma and mocha its fairly annoying to be able to pass in the couchdb host,negative
pouchdb/pouchdb,sauce,2012-11-23T06:49:52Z,added grunt as the build system. - externalized saucelabs and node-qunit.- build runs on travis. change travis.yml- changed webrunner.js so that browser test results are saved properly,positive
pouchdb/pouchdb,sauce,2012-11-23T06:54:54Z,closing pull request. as the build failure does not seem to show up properly,negative
pouchdb/pouchdb,sauce,2012-11-23T11:57:44Z,awesome workone really important usecase is the ability to specify where your cors-server is sending data to. we need to be able let users specify remote hosts to get up and running as quickly as possible. can we get that one in quickly?,positive
pouchdb/pouchdb,sauce,2012-11-24T02:36:32Z,added grunt as the build system. -  externalized saucelabs and node-qunit.- build runs on travis. change travis.yml- changed webrunner.js so that browser test results are saved properly- cors server can run on any port,positive
pouchdb/pouchdb,sauce,2012-11-24T10:20:29Z,i am in the middle of travelling so will look at this as soon as i get home. cheers. looking awesome.,positive
pouchdb/pouchdb,sauce,2012-12-04T01:12:13Z,isnt really grunt. but an saucelabs-qunit issue now,neutral
pouchdb/pouchdb,sauce,2012-12-07T21:07:16Z,one way we could get ci working for pull requests while still using encrypted secret keys would be to use saucelabs sub accounts. for every pull request from a repository that is forked from daleharvey/pouchdb. we could provision a sub account with limited minutes. and that could be used for pull requests. if a user axemclion/pouchdb is sending many pull requests. we can use the saucelabs dashboard to increase the number of minutes. all this can be done. without a good contributor not having to do anything. an evil user can still get minutes. but these would be very limited. and they cannot abuse our minutes.,neutral
pouchdb/pouchdb,sauce,2012-12-07T21:53:04Z,daleharvey will the reviewers get the code on their computers and run the ci. or do they need to run the ci using travis ? actually. should this be a ci. or should this just saucelabs runs ?,neutral
pouchdb/pouchdb,sauce,2012-12-08T02:29:21Z,#253 browser test results now read only using grunt. not in webrunner. changed the way tests were published.originally. web runner was writing test to a database. from where grunt read them and then published them. the test results were distributed in 2 places. with this commit. web runner simply exposes the junitreports in a variable. that grunt can read using the grunt-saucelabs plugin and publish.,neutral
pouchdb/pouchdb,sauce,2012-12-08T03:41:23Z,can we change that from junitreport to testreport or something generically named. when the performance tests results start getting hooked in i just want a generic place to report stuff back to the cialso it will rerun the ci and hopefully at least fail in a way i understand :p,negative
pouchdb/pouchdb,sauce,2012-12-08T04:01:35Z,changed the name to testreport,neutral
pouchdb/pouchdb,sauce,2012-12-08T04:05:40Z,what should the polling intervals be ? it is currently 5 seconds. we could increase it to 30 seconds ?,neutral
pouchdb/pouchdb,sauce,2012-12-08T04:07:42Z,do you know why saucelabs qunit is completing so quickly without reporting any results?,neutral
pouchdb/pouchdb,sauce,2012-12-08T04:38:12Z,seems to work for me now.,neutral
pouchdb/pouchdb,sauce,2012-12-08T12:37:05Z,readd polyfill until sauce upgrades. fix another misused transaction,neutral
pouchdb/pouchdb,sauce,2012-12-08T14:42:35Z,debugging - dont merge. i can only get these failures on saucelabs. they shouldnt really be possible so trying to figure it out,negative
pouchdb/pouchdb,sauce,2012-12-08T16:16:23Z,actually. should we really have to close the tunnels ? we can run tests in parallel. the problem would be zombie tunnels. but since travis would kill the machines anyway. will the tunnels to saucelabs not get killed too ?,negative
pouchdb/pouchdb,sauce,2012-12-08T16:24:46Z,yup. if you dont actively kill them they take like 30 minutes to shut downwe will still have zombie tunnel problems when the tests crash in unexpected ways. but they are much easier to know whats happening / fix than the tests stomping all over each othersauceconnect only allows one tunnel connection at a time i believe. we cant run the tests in parallel (even if we have concurrent tunnels. we only have a certain amount of parallel minutes). as long as we can have grunt reuse the sauceconnect connection we can run the actual different browsers in parallel though (we would need to make auth auth_replication tests are disabled in ci. they wont work in parallel),neutral
pouchdb/pouchdb,sauce,2012-12-08T16:50:09Z,ill trust that qunit-saucelabs isnt completely broken :p,negative
pouchdb/pouchdb,sauce,2012-12-08T16:52:28Z,the grunt-saucelabs plugin has a tunneltimeout property - the amount of time to wait for an open tunnel before trying to kill it and start a new one. i could increase the time interval for that. default is 120 milliseconds. which is way tooo less. i could increase this to 15 minutes (max time our tests can take to run),negative
pouchdb/pouchdb,sauce,2012-12-08T17:05:15Z,the tunnels stamp on the other connection when they connect. you can see from ^ i had a running test that had its connection killed when another started.the code to poll the jobs api should still be in ./pouch and it was really simple and it worked. i think we should stick with it if its easy to port it to saucelabs qunit,neutral
pouchdb/pouchdb,sauce,2012-12-09T00:18:09Z,haha awesome i have a few of these changes locally as well. i need some sleep so i will let you take over (and will stop hammering saucelabs)cheers,positive
pouchdb/pouchdb,sauce,2012-12-09T00:30:50Z,axemclion one issue i have notice. was i mistaken before and qunit-saucelabs is already attempting to have a single connect? i have noticed the last few runs it attempting to wait. however the behaviour is wrong i think. it needs to wait for the current test run to finish instead of forcibly stopping the job (we may want to have it starting to kill the job after a timeout. 15 minutes or so)we dont want to lose one test runs results just because there is more stuff to test,negative
angular/protractor,jasmine,2015-12-22T16:50:28Z,any updates on this issue. i am also trying to use nodemailer in oncomplete event but it is not working or is there any workaround?,neutral
angular/protractor,jasmine,2015-12-29T03:33:22Z,yes. webdriver-manager update was run. below is my protractor config:``` jsexports.config = {  allscriptstimeout: 11000.  specs: [    '*.js'  ]. multicapabilities: [{  'browsername': 'firefox'}. {  'browsername': 'chrome'}].  baseurl: ''.  framework: 'jasmine'.  jasminenodeopts: {    defaulttimeoutinterval: 30000  }};```,neutral
angular/protractor,jasmine,2016-01-08T01:11:42Z,``` allscriptstimeout: 50000. capabilities: {      browsername: 'firefox' }.maxsessions: 1.jasminenodeopts: {    defaulttimeoutinterval: 300000.    isverbose: true.    includestacktrace: true. //include a stack trace on errors.    showcolors: true }.```test code:var elem = element(by.model('textdata'))elem.clear();elem.sendkeys("long_text");,positive
angular/protractor,jasmine,2016-01-11T20:06:37Z,yeah. but this is seeming more like a bug than a support question.  probably a bug in jasminewd2. but i'll need to investigate.,negative
angular/protractor,selenium,2014-12-18T21:03:27Z,sjelin ya i understand that.  in all likelihood its neither of our faults - it seems most likely its just an issue with large numbers of webdriver/selenium being started at the same time.  the "cannot get automation extension" error is just something timing out. which seems most likely to be caused by some kind of lock contention issue during startup.  the delay doesn't fix the problem per se. but it addresses it to the extent possible at the layer's we're working at.,negative
angular/protractor,selenium,2014-12-30T10:03:12Z,automatic run testcases using protractor. selenium server with angularjs.. hello.i am able to write testcases using protractor. selenium server with angularjs.is it possible to automatic run testcase at some interval of time and store their result somewhere(i.e failed or success etc.),negative
angular/protractor,selenium,2015-01-02T02:41:36Z,how to wait until page freezes in protractor?. we have got following logic on frontend - so when new page is loaded. screen is auto scrolling to specific section and i have a script which clicks on the specific element at that time. hence. while this movement is occurring following error is appearing due to the fact that selenium is clicking on wrong element:"element is not clickable at point (x. y). other element would receive the click..." i have added plain sleep. but this solution is not a good one. so does any one know how to wait until page freezes - when auto scrolling is finished?,negative
angular/protractor,selenium,2015-01-02T18:18:13Z,it depends on how you added the scroll; if your scroll action/library contains `settimeout`. it will not work. otherwise it should work out of the box if `ignoresynchronization` isn't set.that being said. using a click/coordinates to identify an element is never a good idea. as it requires you to change the coordinate every time you make a small change to your app.,neutral
angular/protractor,selenium,2015-01-07T22:14:17Z,here is my best explanation of why the above code requires the `webdriver.promise.delayed()` to lock.when the then/success callback of the promise is executed in the control flow. it is run with the `opt_active` parameter `false`. which means that the current active frame will not be switched to the child. it ends up with a pending task for execute1 and a child task for execute2 - thus the lock.on the other hand. if the code is just:``` jsvar webdriver = require('selenium-webdriver');var util = require('util');var flow = webdriver.promise.controlflow();flow.execute(function() {  console.log('a');  return flow.execute(function() {    console.log('c'); // called successfully  }. 'execute2');}. 'execute1');```then the execute2 task is scheduled in a child frame and the active frame gets switched to that frame - it finishes. the parent frame finishes. everything is happy.here are the annotated logs showing this difference (i used custom logging added to the webdriver node module):situation a: lock```{ history: [].  activeframe: '[execute1]'.  activeroot: '[execute1]' }--- loop turn ---{ history: [].  activeframe: '[execute1]'.  activeroot: '[execute1]' }--- run in new frame from run event loop ---execute1--- start run in new frame ---{ history: [].  activeframe: '[(pending - execute1)]'.  activeroot: '[(pending - execute1)]' }a--- run in new frame from notify ------ start run in new frame ---{ history: [].  activeframe: '[(pending - execute1)]'.  activeroot: '[(pending - execute1)]' }b--- after run in new frame ---{ history: [].  activeframe: '[(pending - execute1)[execute2]]'.  activeroot: '[(pending - execute1)[execute2]]' }and then that repeats forever```situation b: no lock```{ history: [].  activeframe: '[execute1]'.  activeroot: '[execute1]' }--- loop turn ---{ history: [].  activeframe: '[execute1]'.  activeroot: '[execute1]' }--- run in new frame from run event loop ---execute1--- start run in new frame ---{ history: [].  activeframe: '[(pending - execute1)]'.  activeroot: '[(pending - execute1)]' }a--- after run in new frame ---{ history: [].  activeframe: '[execute2]'.  activeroot: '[(pending - execute1)[execute2]]' }--- loop turn ---{ history: [].  activeframe: '[execute2]'.  activeroot: '[(pending - execute1)[execute2]]' }--- run in new frame from run event loop ---execute2--- start run in new frame ---{ history: [].  activeframe: '[(pending - execute2)]'.  activeroot: '[(pending - execute1)[(pending - execute2)]]' }c--- marking task execute2 complete--- loop turn ---{ history: [ 'execute2' ].  activeframe: '[]'.  activeroot: '[(pending - execute1)[]]' }--- run in new frame from notify ------ start run in new frame ---{ history: [].  activeframe: '[(pending - execute1)]'.  activeroot: '[(pending - execute1)]' }--- marking task execute1 complete--- loop turn ---{ history: [ 'execute1' ]. activeframe: '[]'. activeroot: '[]' }```,neutral
danielspaniel/ember-data-change-tracker,standard,2017-11-11T22:17:55Z,danielspaniel thx for clarifying this! but one question remains to me: this works for a 'standard' model - how would this work for an rsvp.hash? e.g. ```model(params) {    return rsvp.hash({      modela: this.store.findrecord('model-a'. params.id. {include: 'model-bs.model-c'}).      modelg: this.store.query('model-c'. {sort: 'whatever'}    });  }.```modela is the one with the dirty relationship. i did try ```setupcontroller(controller. model) {    model.modela.savechanges();    controller.setproperties({model});  }.```but this did not bring the expected result...,negative
jquense/yup,eslint,2017-07-04T15:32:50Z,you can provide a function that returns a string for any message as well. allowing you to use real template strings: ```js({ path }) => `${path} is required````,neutral
balderdashy/sails,mocha,2013-04-04T00:20:05Z,no problem. colin-- the real issue is a lack of tests. as you mentioned.  tests for assets would be awesome (we're using mocha).  the orm is pretty well covered. but we've still got a lot of coverage to knock out.  even if we just write tests as we fix bugs. that's a great start!  i've starting work on routing tests and i'll continue as i have time,positive
wix/tspoon,mocha,2016-09-29T11:04:15Z,update mocha-env-reporter and source-map-support,neutral
meanjs/mean,eslint,2017-08-13T19:14:54Z,just tested: `eslint --fix` handles this really nicely.,positive
meanjs/mean,mocha,2015-10-01T02:42:55Z,mocha intermittent timeouts. we seem to be having intermittent issues with the mocha tests timing out; including the travis ci builds failing due to these timeouts. this has been disrupting the flow of contributions with our pr's builds failing. personally. when i've committed changes to a pr. i have been crossing my fingers that no tests timeout. i suggest to implement suite level timeout increases; described here  this could be a permanent or temporary solution. either way. it may save us a lot of headache when running through the ci builds.i have a branch that i've been testing this with. and it seems to have solved the issue with timeouts. i'm setting the timeout using `this.timeout(10000);` for each server test suite (just once per file). it's a small change to each server test file. i wanted to open the discussion before i submitted a pr. perhaps there is a bigger issue at play here. rather than just latency issues. any thoughts. or concerns over this approach?lirantal ilanbiala codydaig rhutchison trainerbill simison bastianwegge jloveland,negative
meanjs/mean,mocha,2015-10-01T05:04:11Z,sgtm,neutral
meanjs/mean,mocha,2015-10-01T06:07:52Z,lirantal ok great. because i'm currently getting frustrated since i'm testing the tests atm :),positive
meanjs/mean,mocha,2015-10-01T12:36:24Z,shouldn't this be about creating a sandbox for every test and making sure no requests or timeouts are running after every single test-suite finished rather than just increasing the timeout?,neutral
meanjs/mean,mocha,2015-10-01T18:26:43Z,bastianwegge can provide an example. or proposed alternative solution?i realize that my proposal may be just a temp solution. right now. these timeouts are reaking havoc on the travis builds. so it would be nice to get something out quickly.,positive
meanjs/mean,mocha,2015-10-01T22:32:16Z,"testing the tests" - that's nice :),positive
meanjs/mean,mocha,2015-10-06T08:15:55Z,mleanos  obviously. we can have both. instead of mochajs default (2000). we can have a default value that fits better meanjs needs. and if needed we can adjust the timeout for a specific test.,positive
koding/kd,karma,2014-07-10T06:54:32Z,new test suit. new test suite:- [x] isolated standalone `tests/` folder- [x] use phantomjs with karma to run tests on terminal instead of browser.- [x] create & configure .travis.yml file to integrate with travis.,positive
koding/kd,karma,2014-07-12T08:50:47Z,usirin :+1:,neutral
koding/kd,karma,2014-07-12T08:54:30Z,if we can merge this into master anytime soon. i can add the build status buttons as well.,neutral
koding/kd,karma,2014-07-12T09:02:32Z,:),neutral
nodemailer/nodemailer,mocha,2016-04-04T21:50:07Z,more info:the method containing nodemailer was being called from mocha/chai. after frustration in email. i went on to another part of the application. attempted another library (unirest). and encountered the same issue. not sure how mocha is jacking the callback up. but it is.sorry for the ping. i'll close this.,negative
keystonejs/keystone,mocha,2014-03-09T14:04:53Z,unit testing framework for keystonejs projects. it's not clear how to write unit tests for a keystonejs project.we should create a mini-framework for testing that initialises keystone then allows tests to be run (which could be written using any of the available frameworks. e.g. mocha),neutral
keystonejs/keystone,mocha,2014-03-12T23:33:38Z,+1the lack of unit tests for the source is one thing that i find makes it difficult to make some of the changes i need.but this is just as important. i want to easily create unit tests for my models. and some more bdd style to drive the browser too. i have found issues for example with using  not liking the tinymce scripts.,positive
Azure/azure-xplat-cli,mocha,2013-02-04T01:35:54Z,## persian civil engineering centralhi. i'd like to share a google maps link with you. link:---mohamadreza rezaei listrustgmail.,neutral
Azure/azure-xplat-cli,mocha,2013-02-04T01:38:04Z,## persian civil engineering centralsherkate shahrak haye san'ati pasdaran blvd. sari. iran link:---mohamadreza rezaei listrustgmail.,neutral
ljharb/qs,eslint,2015-11-09T18:48:32Z,tests use .eslintrc files defined outside the project. i've run `npm test` and found out that there are a lot of errors. after looking around for a bit i've found the culprit - the `.eslintrc` file defined in the root directory. after changing its name to something else so that eslint ignores my global rules. tests completed without issues.shouldn't there be an `.eslintrc` file in the root of the project so that stuff like this won't happen?,negative
ljharb/qs,eslint,2015-11-09T19:09:13Z,the config that's used here is provided by lab. so we don't bother including it in the root of the project. i'm not sure i follow how it is that your eslint config took over from that one. however. as i'm pretty sure lab is designed to use its built in config whenever there isn't an `.eslintrc` in the root of the project.,negative
ljharb/qs,eslint,2015-11-09T19:11:37Z,well. i'm not sure what is happening either :/but the fact is - tests don't work when there is `.eslintrc` in my root dir. and they do work when there is no such file.,negative
ljharb/qs,eslint,2015-11-09T19:12:30Z,what do you mean by root dir? like literally at `/.eslintrc`?,neutral
ljharb/qs,eslint,2015-11-09T19:16:34Z,i'm in the project directory. where i fire `npm test`.placing my `.eslintrc` in the project's parent dir. parent's parent dir. and so on (including the root dir - i'm on windows. so it's more like `d:\.eslintrc`). causes some linting errors.,negative
workshopper/how-to-npm,standard,2016-11-07T19:26:25Z,i added another pr to your branch with the missing exercises. please also run npm test and fix standard formatting ^_^,positive
workshopper/how-to-npm,standard,2016-11-08T10:24:13Z,i'd love to fix issues. and add i18n support like the other standard workshoppers at here :raising_hand_man:,positive
dadi/api,standard,2016-07-05T15:45:05Z,also this is standard practice on posix. eg - java_home. gnome_shell. moz_program. etc,neutral
dadi/api,standard,2016-07-05T16:06:44Z,i'm very hesitant to break posix standard and set us up for a lot of conflicts (i can easily see someone setting up cdn using env and then being very confused why api doesn't work all of a sudden) for a platform we don't use and nobody currently uses the app on. especially when the fix for that platform is a one liner of `api_port=$port` in a .bash_profile. people run in dev or test on a daily basis. currently nobody uses heroku.jim. thoughts?,negative
dadi/api,standard,2016-07-13T15:29:08Z,jimlambie do you want help with this one? feel free to assign to me.,neutral
dadi/api,standard,2016-07-13T16:56:02Z,eduardoboucas jimlambie josephdenne i believe with the introduction of `collection type` and publish `collection` recipes (marketplace) this is no longer a strict requirement.,negative
dadi/api,standard,2016-07-13T17:13:19Z,i'm very happy with that. as it separates concerns and keeps api agnostic of implementation. closing!,positive
agershun/alasql,mocha,2015-06-26T09:28:20Z,converted the tests to run with mocha. as testdata is large its a problem with mocha that saves output until all tests are donei am looking into jasmine too. but i have a feeling we must change the output from the exsisting (woking) run.js to be a format that can be parsed and then fake run the pares results from the test as mocha tests. but then - what is the point of having the mocha to do nothing but formatting the output. i think i make the output from the run.js be a test report in markdown ready to copy paste into the wiki,neutral
jakubpawlowicz/clean-css,jshint,2012-11-03T21:21:03Z,it does! thanks for spotting it.btw. there's a full jshint check now (`jshint .` or `make check`).,positive
economist-components/react-i13n-omniture,eslint,2016-04-11T10:28:10Z,fix: add missing babel-eslint dependency. keithamus there was this missing dependency after provisioning.maybe worth a check against prc.,neutral
economist-components/react-i13n-omniture,eslint,2016-04-11T11:11:44Z,i'd like to avoid provsioning babel-eslint as we only need it for stage 0 features. prc provisions default to be stage: 2 which doesnt require babel-eslint. we should conciously opt into stage 0/1 features imo.,positive
economist-components/react-i13n-omniture,karma,2016-03-22T16:50:34Z,chrome launcher in deps. this component includes `karma-chrome-launcher` but it is unused.,neutral
ember-cli/ember-cli-mocha,mocha,2016-11-10T06:17:58Z,that's the idea!  to be fair to you. i think that `ember-cli-test-loader` was only just recently added to npm so using bower like this was the right approach. but. we can do better now!once this lands. i'm going to figure out how to pull in `ember-mocha-adapter` through npm. i feel like it's a bad experience for a user to install an addon and then have their `package.json` or `bower.json` polluted with additional dependencies.  it makes it hard to remove and update things. too. since they never explicitly added them in the first place.a bonus perk of doing this is that. with the community migration away from bower. this addon no longer requires it.  i think it would be smart to eliminate it as a need from the high-profile addons like this one as much as possible.,negative
ember-cli/ember-cli-mocha,mocha,2016-11-10T16:42:51Z,split "chai" code into ember-cli-chai . mocha is often used in combination with chai. but it is not required and some people might prefer other assertion libraries. should we split this library into `ember-cli-mocha` and `ember-cli-chai`?/cc dgeb rwjblue stefanpenner alexlafroscia,neutral
ember-cli/ember-cli-mocha,mocha,2016-11-10T18:52:05Z,seems fine to me. but the default out of the box experience should be "it works" imo.,positive
ember-cli/ember-cli-mocha,mocha,2016-11-10T20:32:38Z,ehh. i personally feel like that would be unnecessary.  having to install one thing is simpler for most people and using chai with mocha is probably what most people want.  if they want to use another assertion library. they can always do so and just ignore chai. it's not like having extra test assets affect that apps' payload size.,positive
ember-cli/ember-cli-mocha,mocha,2016-11-10T20:38:26Z,alexlafroscia the problem is that we would have to do a major release for every major release of mocha _and_ chai. also we could still add `ember-cli-chai` via blueprint by default.,negative
ember-cli/ember-cli-mocha,mocha,2016-11-10T22:20:30Z,i see. i was hoping that. if we added support for a named amd module to chai. then we could just do the without the wrapper,neutral
ember-cli/ember-cli-mocha,mocha,2016-11-11T10:14:17Z,in the case of `ember-cli-chai` you'd just have to run `ember install ember-cli-chai` and then you're done.in the case of amd-compatible chai you'd still have to import chai into the test vendor tree somehow and it would be quite a bit more complex for our users. also there wouldn't be a good place to put the instructions on how to do that since they don't really belong in the chai repo itself.,neutral
ember-cli/ember-cli-mocha,mocha,2016-11-12T07:34:15Z,right. right. kind of a shame it isn't easier to consume an amd-exporting dependency without a wrapper add-on. but you're right about the ease of the `ember install ember-cli-chai` being worth it.,negative
bitpay/bitcore,karma,2014-10-06T18:59:42Z,run browser tests with karma,neutral
electrode-io/electrode,uglify,2017-06-21T15:14:08Z,we are no longer using gulp-uglify in the latest,neutral
admc/wd,selenium,2014-03-19T15:16:54Z,but you don't have **any** examples of completely bootstrapping selenium tests from nothing. and even if there are. it's completely lost in the documentation.this is a great web driver. but if it is not a tutorial. could you. at the very least. provide a link to one towards the top of the readme?,positive
admc/wd,mocha,2013-09-06T02:25:31Z,promise-chain + wd-tractor + mocha-as-promised + chai-as-promised. wow.```    describe('slow rendering'. function() {      beforeeach(function() {        return browser.get(urlroot + 'app/index.html#/repeater');      });      it('should synchronize with a slow action'. function() {        return browser          .elementbyid('addone').click()          .elementbyngrepeater('foo in foos'. 1. '{{foo.b}}')            .text().should.become('14930352')          .elementbyid('addone').click()          .elementbyngrepeater('foo in foos'. 1. '{{foo.b}}')            .text().should.become('24157817');      });    });```,neutral
Polymer/polymer,eslint,2017-07-14T07:06:13Z,remove trailing spaces. this pr removes trailing spaces for some files and sets`no-trailing-spaces` as a required rule in eslint.,neutral
Polymer/polymer,eslint,2017-07-14T07:08:19Z,i signed it!,neutral
quailjs/quail,selenium,2014-10-28T15:45:29Z,work is ongoing here in the `selenium-testing` branch. it will probably take me another 6 weeks to complete this work.,neutral
bbc/bbc-a11y,standard,2017-01-20T16:55:47Z,we have much more control over how the electron window behaves.. with a chrome plugin it's difficult or impossible to perform some of the standards checks. e.g. for security reasons. so it seems that putting more effort into the chrome plugin is not worthwhile or sustainable. our energy could be better spent making the electron implementation easier to install. so i'm closing this until somebody disagrees.,negative
bbc/bbc-a11y,standard,2017-01-25T14:04:36Z,hello.i think providing feedback is a good idea. but the mag or html "guide"* is the wrong place to send people.the mag's focus is holding requirements. the example code is just that. examples. it should not be treated as production code and i wouldn't be comfortable encouraging people to copy and past from the mag.the html guide (due to replace the current standard shortly) is likewise high level best practices recommendations and also probably not a great thing to encourage people to copy and past from. both of those documents are "what" and "how". but for this situation we need more of a guide to debugging etc. its different enough that the mag or the html guide is a poor fit.i'd suggest we have a separate document(s) as part of the github files (perhaps a wiki page. perhaps a new directory in the tree) and have a "debugging guide" for each error in there and then link to that.that would keep all of the a11y self contained and easy to update / develop over time and would keep the focus of the mag and other guides to just the "what" and "how".hope that helps.jamie + lion,positive
bbc/bbc-a11y,standard,2017-01-27T12:11:29Z,since there is only one way to "ignore" rules. which is to "skip" the standards check by it's full name. there probably isn't anything to hint about. so i'm closing this. reopen if you disagree.,negative
bbc/bbc-a11y,standard,2017-01-27T15:21:54Z,title attributes must not duplicate content. adds a new standard check. covering title attributes that have the same text as the element itself.,neutral
aksonov/react-native-router-flux,eslint,2017-01-07T08:47:11Z,fix eslint errors. there are some eslint errors on current master branch. and the errors will impact the development flow after i setup the travis ci. so this pr is to fix them.,negative
aksonov/react-native-router-flux,eslint,2017-01-07T08:47:12Z,swordsman-inaction. thanks for your pr! by analyzing the history of the files in this pull request. we identified mechanickim. zxcpoiu and bifrost to be potential reviewers.,neutral
aksonov/react-native-router-flux,eslint,2017-01-08T12:12:26Z,i couldn't find any eslint errors on this file.> eslint src/reducer.jscan you explain what error did you find and how did you find the error?,negative
facebook/react-devtools,eslint,2015-05-23T01:46:39Z,sorry for letting this sit. this is really high value. we don't need to treat it as a plugin.i think we need to update the copyright headers to use the new format.what can we do to integrate the injected hooks with the main react-devtools hook? currently we are often blocked on updating react because we also need to update all the places things introspecting internals here. i would prefer not to fork that code since it might mean we have to disable this plugin to be able to ship react. integration would be better.,positive
facebook/react-devtools,eslint,2015-06-14T23:17:47Z,+1 for this plugin. looking forward to using it! :d,neutral
pghalliday/grunt-mocha-test,mocha,2013-02-20T08:03:48Z,how to tell grunt-mocha-test to use the mocha.opts file from the test folder?. in mocha you can use a file called `mocha.opts` to provide cli arguments to the mocha process. this file needs to be in the `test` folder.anyway. if i simply put``` javascriptgrunt.initconfig({  mochatest: {    files: ['test/**/*.js']  }});```into my `gruntfile.js`. mocha complains about `suite` not being defined. although the file `mocha.opts` exists and contains the line:```--ui tdd```any ideas on how to solve this?it looks as if mocha. if run by grunt-mocha-test. does not load this file at all.,negative
pghalliday/grunt-mocha-test,mocha,2013-02-20T08:52:48Z,first of all: thanks a lot for replying _that_ fast :-)!i understand the issue you have. and your suggestion of using```ui: 'tdd'```works perfectly. the downside is that if you also want to be able to run `mocha` from the command line. you need the additional `mocha.opts` file with the very same options inside.but anyway. it works.thanks for your help :-)!,positive
pghalliday/grunt-mocha-test,mocha,2013-02-20T08:58:57Z,your welcome.yeah. i can see the problem. i'm tempted to raise an issue against mocha - it seems to me that attempting to fix that here would be very fragile if mocha ever changed its options (i think this is already a problem with the way i dealt with --require),negative
npm/npm,standard,2015-03-16T21:24:08Z,marr i'm still planning on adding an `.editorconfig` to the npm source tree once the `npm3` codebase stabilizes enough for me to get that codebase passing `standard`'s quality checks. but that will only affect npm itself. is that what you were asking for. or did you have something more sweeping in mind?,negative
npm/npm,standard,2015-03-20T17:13:18Z,file a bug! i've inadvertently made npm a major constituency in the standardiverse. so i think feross is getting used to seeing issues coming from npm people. :grimacing:,negative
npm/npm,standard,2015-03-23T21:20:35Z,i'm not sure if this is related. when i run npm install from bash. it creates a folder off my c: drive: c:\c\users\[myusername]\appdata\local. that 'c' after the drive letter is not a typo. and [myusername] is my actual username. it creates that 'c' folder. the 'local' folder is completely empty. it doesn't do it if i run it from the standard windows command prompt or from my console emulator (cmder).,negative
npm/npm,standard,2015-03-30T21:29:45Z,> is that a pr you'd accept?no. it really does not make sense to me to have two independent frameworks controlling i/o from the cli. if you _really_ don't want the standard output from npm being displayed. a child process with stdout redirected or suppressed is the right way to go.,negative
npm/npm,standard,2015-04-08T18:19:36Z,reopening because this was not addressed by #6933,neutral
npm/npm,standard,2015-04-08T18:24:23Z,from a project without an existing node_modules or shrinkwrap:```npm installnpm shrinkwraprm -rf node_modulesnpm installnpm shrinkwrap```the shrinkwrap file changes.,neutral
npm/npm,standard,2015-04-11T18:44:04Z,rebased and landed as b0273190c71eba14395ddfdd1d9f7ba625297523 (with a few tweaks as 649e31ae4fd02568bae5dc6b4ea783431ce3d63e – i'm trying to future-proof how npm deals with scoped packages a little by standardizing how we test for scopedness). this is a great find. as we're very close to rolling out support for scoped packages on the registry. so thank you very much for putting this together!,positive
npm/npm,standard,2015-04-12T19:58:12Z,test: remove fixture directories. this also involves cleaning up. standardizing. and in some cases fixing broken tests.,neutral
npm/npm,coveralls,2016-02-03T01:56:33Z,add coverage report to output. generates coverage output to the test runs. and should pipe them to coveralls.io. if everything is set up correctly.,neutral
npm/npm,coveralls,2016-02-03T01:58:44Z,test: generate coverage report. generates coverage output to the test runs. and should pipe them to coveralls.io. if everything is set up correctly.,neutral
mishoo/UglifyJS2,uglify,2013-02-10T06:10:12Z,ability to specify a literal string for the source map rather than a filename. i'd like to be able to pass along a literal string for the input source map rather than write it out and provide a filename. since it was just generated and will be thrown away once the uglifyjs source map is created.,neutral
mishoo/UglifyJS2,uglify,2013-02-10T06:27:15Z,eh. seeing as the sourcemap filename is part of the text of the map. it does seem like it needs to be a written-out file. so that it can be parsed appropriately.,neutral
mishoo/UglifyJS2,uglify,2013-02-10T06:33:13Z,actually. as long as the file doesn't reference any external files. it's irrelevant as to whether the file is written-out or not.,neutral
mishoo/UglifyJS2,uglify,2013-02-16T12:39:22Z,missed optimization: concatenating strings. example:``` javascript// test.jsvar c;console.log('hello' + c + 'there' + 'world' + 'more' + 'strings');```output from `uglifyjs test.js -c`:``` javascriptvar c;console.log("hello"+c+"there"+"world"+"more"+"strings");```expected result:``` javascriptvar c;console.log("hello"+c+"thereworldmorestrings");```,neutral
mishoo/UglifyJS2,uglify,2013-02-19T17:50:27Z,could you give me an example ? (i'm still quite new to javascript ^^)yuicompressor removes it (i was using this tool before finding uglifyjs) so i assumed it could be safe. and also if it's avaiable through a command line option. the user might be free to use it or not. at his/her own risk ?anyway for the moment i'm removing the "use strict"; statement as a step of my build process. before using uglifyjs. i just thought that it might be an option not too hard to add and that a few people might like to have.,negative
mishoo/UglifyJS2,uglify,2013-02-26T18:09:15Z,mishoo: i'm 100% sure ie doesn't support it. guess only ff does - but ie is one of the few breaking the js code...why if one wants to declare constants for uglify to strip out etc. and then serve to clients one cant. (except if declaring constants by `--define`)why i sugest to a solution would be:- strip out constant definitions (at compilation end. if not used anywhere)- replace `const` with `var` after "compiling"? _(not sure if even necessary)_- add support for annotations defining constants (also see #132)thomblake : the uglify doc refers to the `const` keyword. as a mean to define constants - i'm made this issue to make uglify work in a project - i'm well aware it's an unsupported keyword - hence the issue.,negative
mishoo/UglifyJS2,uglify,2013-03-01T20:41:30Z,spurious warning for catch block parameter. if i run uglify using --lint on code like this:```try {    throw up;} catch (e) {}```it complains `warn: symbol e is declared but not referenced`. but the catch statement _must_ have a parameter — if i could leave it out. i would but that would result in a syntax error (e.g. your parser gives `error: name expected`).,negative
commitizen/cz-cli,eslint,2016-09-26T09:28:25Z,jimthedev  hi.i had read your posts. and i still can not know how can i output the ghooks log to stdout ?can you help me ?,neutral
testem/testem,mocha,2012-12-11T15:03:15Z,mocha (node) doesn't throw visual errors (exceptions). if while running node.js mocha tests there some exception happens it is not visible it in the testem's output. just information that tests faild.,neutral
testem/testem,mocha,2012-12-11T21:01:10Z,i've seen that before. i presume you are using `protocol: tap`?,neutral
testem/testem,mocha,2012-12-12T07:48:29Z,no. just "mocha": {            "command": "mocha -r spec  --colors"   },neutral
testem/testem,mocha,2012-12-12T15:44:53Z,per-testsuite timeout missing (tests-start - all-tests-results time interval limit). there is a per-launcher process timeout option if i understand that correctly.it would be useful to be able to limit the time of individual test suites (between the tests-start and all-test-results events) which would be agnostic to the test runner used (mocha. jasmine. etc..),neutral
testem/testem,mocha,2012-12-12T18:50:51Z,what is your motivation behind this?,neutral
testem/testem,mocha,2012-12-12T18:51:53Z,would you mind putting up a gist that demonstrates the bug?,neutral
testem/testem,mocha,2012-12-13T07:06:02Z,what code do you want to see? 1) i install testem globally.2) testem.json: {    "launchers": {        "mocha": {            "command": "mocha -r spec  --colors"        }    }.    "launch_in_dev": ["mocha"]}3) i have folder and one test file test/test.js:describe('test'. function(){    it('should pass'. function(){        "st".indexof1('x')    })})4) if i run testem i have next output:--------------+     mocha    |      x       |              +-----------------------------------------------------------  ? 1 of 1 test failed:  test5) if i run just mocha. the output is: .  ? 1 of 1 test failed:  1) test should pass:     typeerror: object st has no method 'indexof1'      at context.<anonymous> (so i would like to see testem outputs such errors too.,neutral
testem/testem,mocha,2012-12-13T21:02:17Z,thanks for the additional details. i'll take a look.,positive
SBoudrias/Inquirer.js,codacy,2017-04-07T16:12:55Z,sboudrias not sure why the codacy check is failing. do you want me to switch to using double-quotes for strings even though single-quotes are used throughout?,negative
DevExpress/testcafe,mocha,2016-09-27T14:14:57Z,> ps. can we use something like thatit looks awkward without modifiers. > mocha allows skip usage in the test body. when you use this.skip() inside a test. it throws a special exception. that aborts the test.it's an option. but it's inconsistent and it's easy to shoot yourself in the leg with that approach.> also. in mocha you do not declare before and after directly in the it test block. you use another describe block.yeah. but we don't have nested fixtures yet. also from my own experience you don't need a new fixture for some tests. you just need some test-specific teardown code and introduction of new fixture feels awkward in that case.,negative
mochajs/mocha,mocha,2012-11-11T00:26:45Z,but this decision shouldn't be taken by mocha. if the user wants to return an integer instead of an error let him to do so. mocha is used for testing. not for validating the user's code correctness. it's my opinion.,neutral
mochajs/mocha,mocha,2012-11-11T00:55:55Z,there are many many ways to handle error handling. we're just going with the common/obvious one. this is why promises etc are not supported either. it would cause mocha to become very complex if we support everything.,positive
mochajs/mocha,mocha,2012-11-12T19:07:24Z,i'm hitting the same issue as blackjable: i can connect via node-inspector. but no test script files show up in chrome's debugger.,neutral
mochajs/mocha,mocha,2012-11-13T09:01:17Z,mocha stops `--watch`-ing when a custom `--compilers` produce error.. right now mocha will just outright crash if there is a compilation error in one of the test files.this includes changes during a `--watch` session as well. thus breaking your tdd flow.red -> edit -> green -> edit -> red -> edit -> syntax error -> mocha crashed.mocha should stills watch your files and restart even when there is a compilation error.you can test this with the coffee script compiler.,negative
mochajs/mocha,mocha,2012-11-13T12:11:26Z,+1i've just set up mocha with growl. and it is 99% when working on a small screen.editor takes up 100% of the screen. save - boom. growl says yay or nay.in many cases it's enough with an indication of the reason+line to figure out the error. without having to switch to the test-window.,negative
mochajs/mocha,mocha,2012-11-15T08:50:49Z,anyone found the solution?,neutral
mochajs/mocha,mocha,2012-11-15T09:18:10Z,git clone the repo and there is the .tmbundle file.,neutral
mochajs/mocha,mocha,2012-11-15T10:13:56Z,there's always more than one way to do it.,neutral
mochajs/mocha,mocha,2012-11-15T18:23:58Z,i'd drop down to assert() for that sort of thing personally. but closing since its not mocha related,neutral
mochajs/mocha,mocha,2012-11-15T18:25:52Z,/me does not test compiled languages. pull-requests accepted,neutral
mochajs/mocha,mocha,2012-11-17T16:59:29Z,turns out this issue doesn't concern `--compilers` at all.it is just a simple matter of `require()` error when the test file have a syntax error.,negative
mochajs/mocha,mocha,2012-11-19T01:04:08Z,that would work. coffee script cli has `--nodejs` option which is for that. but mocha right now. accepts `--debug` and `--trace_gc` node options directly. so it's not the way it was done before.,neutral
mochajs/mocha,mocha,2012-11-22T21:18:57Z,i think from technical perspective everything is fine within mocha. also node-inspector is working fine. anyhow the problem is. that node-inspector starts to debug the complete mocha source code. a simple solution would be. that mocha sets a auto-breakpoint at the first test case.,positive
mochajs/mocha,mocha,2012-11-27T06:57:12Z,can support custom reporter for client side unit test. for now. if i use some reporter extensions. it can work well when run server-side unit test. but for run client side unit test. it can't find the correct reporter extensions.such as for mocha-lcov-reporter. when run client side unit test. it can't be loaded at all.please support a way to allow the client side unit test to load the custom reporter extensions.,positive
mochajs/mocha,mocha,2012-11-28T23:35:21Z,yup you can do `mocha.setup({ reporter: constructorofmyreporter })`,neutral
mochajs/mocha,mocha,2012-11-28T23:35:44Z,(how it gets into the browser isn't up to mocha. no magic npm stuff etc),neutral
mochajs/mocha,mocha,2012-11-30T02:24:21Z,optional mocha.opts path as first argument. node mocha path/mocha.opts,neutral
mochajs/mocha,mocha,2012-12-02T16:05:41Z,yes. you're right. but in ie7```script438: object doesn't support property or method 'indexof' mocha.js. line 3850 character 5```,neutral
mochajs/mocha,mocha,2012-12-05T16:38:45Z,i still get this error...it's still in mocha.js,negative
mochajs/mocha,mocha,2012-12-05T23:03:44Z,yup. i guess my point about it seeming confusing was in regards to domains not actually catching any errors. which has nothing to do with mocha. it belongs on the node issues. but `domain.on('error')` fails to prevent the error from still being 'uncaught'. which is inconsistent with eventemitter.emit('error') not throwing if there's a listener.,negative
mochajs/mocha,mocha,2012-12-06T01:29:22Z,that would just be a method reference error. if we can reproduce that with the latest mocha re-open,neutral
mochajs/mocha,mocha,2012-12-06T16:41:29Z,yeh. me too. i'm almost done building a mocha-ci server to help with the problem :smile:,positive
mochajs/mocha,mocha,2012-12-06T23:47:59Z,./mocha.js is a build file. you'll need to edit ./lib,neutral
mochajs/mocha,sauce,2016-03-01T23:37:03Z,danielstjules did you make any progress here?,neutral
mochajs/mocha,sauce,2016-03-09T06:05:43Z,awesome sauce,positive
dondi/GRNsight,coveralls,2017-09-11T21:00:20Z,set up travis-ci and coveralls. #248 - continuous integration using travis-ci#374 - automated code coverage hook with coveralls,neutral
dondi/GRNsight,coveralls,2017-09-11T21:29:12Z,all successful travis builds will initiate code coverage with coveralls #374,positive
krakenjs/kappa,jshint,2013-11-27T08:25:11Z,migrated makefile to gruntfile to be consistent w/kraken-js. +changelog..... ... +jshintrcalso cleaned up some jshint errors.,neutral
krakenjs/kappa,jshint,2013-11-27T15:43:33Z,also. if we're adding an `engines` attribute. we should probably think about setting `"enginestrict": true`,neutral
krakenjs/kappa,jshint,2013-11-30T20:34:56Z,good to me. erik. any issues with the last tweaks?,positive
sitespeedio/sitespeed.io,jshint,2014-08-13T11:59:30Z,for unit tests. even `nodeunit` is enough.for linting. i would suggest `eslint`. as it is more configurable and with more rules as oppose to jslint/jshint.,negative
bpmn-io/diagram-js,karma,2014-10-29T11:17:20Z,grunt auto-build is not defined. hi. in your readme says: execute grunt auto-build to run the development setup including automatic rebuild and live reload.but in the gruntfile there are only these tasks registered:   grunt.registertask('test'. [ 'karma:single' ]);  grunt.registertask('auto-test'. [ 'karma:unit' ]);  grunt.registertask('default'. [ 'jshint'. 'test'. 'jsdoc' ]);,neutral
bpmn-io/diagram-js,karma,2014-10-29T12:13:12Z,that is correct. it is a relict of previous dev setups.the project is not ment as a standalone library but rather as a toolkit to build your own modelers / viewers. that is why we removed the `auto-build` part from the build script.i keep this issue open until we updated the `readme.md` to reflect that.,neutral
karma-runner/karma-sauce-launcher,sauce,2013-12-30T22:38:22Z,feat: allow to specify options for sauce-connect. added the ability to pass custom options to the connect launcher.example:``` jssaucelabs: {  startconnect: true.  testname: 'travis'.  connectoptions: {    directdomains: ['*.icloud.com'. '*.apple.com'. '*.disney.com'. '*.go.com']  }}```i also removed some config values as they are not used (no_progress). already the default (verbose) or ignored (logfile),neutral
karma-runner/karma-sauce-launcher,sauce,2013-12-31T00:18:01Z,feat: updated sauce-connect-launcher and wd. i updated sauce-connect-launcher and wd to check. whether it solves #14. but it doesn't.,neutral
ipfs/js-ipfs,uglify,2017-09-01T13:46:02Z,lightninglu10 yeah. the issue comes from uglify or what uglify tries to do. we have to change the way we do some of the duck typing.,neutral
danvk/dygraphs,karma,2014-12-29T22:56:07Z,ah. i did miss the combined-dev. i think that should work for me.as to the tests. if it's an easy switch from js-test to mocha. i ought to be able to make those changes pretty soon. if it's a little more involved. i can probably get js-test running through karma for now and generating coverage.karma has a debug mode to do in browser testing. though you would have to instantiate it from the command line initially. you ought to be able to refresh that page to get updated results. my workflow using karma and mocha is to run tests through phantomjs most of the time and fire-up chrome through karma on an as needed basis. karma/mocha/phantomjs should run fine on travis.,positive
danvk/dygraphs,karma,2014-12-30T19:26:40Z,start down path of new build system:. - move tests to karma test runner and mocha framework. also adding chai assertions- add gulp tasks for testing. watching. concatting and compressing- update travis file to use new build system- remove jstestdriver stuff- reorganize a bit so that it's easier to see what's going on- create a dist folder to hold the output of builds (should probably look at having a bower branch/repository where these are held. instead of master)i'm pretty sure we don't want to push this to master. but that's where this was diffed against.,negative
danvk/dygraphs,karma,2014-12-30T20:26:39Z,this is fantastic! i'm on vacation at the moment. but i'll plan to take a look at this sometime in the few days.,positive
danvk/dygraphs,karma,2014-12-30T20:28:52Z,also cc kberg in case he'd like to take a look. `gulp`. `mocha` and karma are the future. shell scripts and jstd are the past.,neutral
chentsulin/electron-react-boilerplate,uglify,2017-10-23T06:35:14Z,uppe-r thanks. uglifyjs works. i switched uglifyjs.,positive
pinterest/esprint,eslint,2017-04-25T15:18:54Z,production-izing esprint server. this pr introduces a bunch of refactoring towards getting the eslint server production-ready. namely. it: - introduces command-line arguments. - eliminates race condition for connection between client and server.- simplifies watching logic to use `sane`.- adds an eslint dependency-installation script to simplify development for esprintthere's still some things to do. as noted in todos throughout the code. which will be addressed in future prs.,negative
redfin/react-server,eslint,2016-03-25T20:42:53Z,i'm not sure we have a sufficient volume of issue/pr activity to warrant bot assistance. ;)those eslint bots are awesome. though!,positive
redfin/react-server,eslint,2016-03-31T22:59:00Z,upgrade eslint. clean up a bunch of eslint errors while i'm at it.,negative
redfin/react-server,eslint,2016-04-12T22:22:13Z,doug-wade - this seems really close to being ready to merge.  do want.  ping.,neutral
rooseveltframework/generator-roosevelt,standard,2017-08-03T19:27:23Z,customized .gitignore for app generation (closes #80). adds `public` and `.build` to `.gitignore` if user chooses standard installation otherwise the user can put whatever they want.,neutral
rooseveltframework/generator-roosevelt,standard,2017-08-14T18:23:35Z,allows user to create custom .gitignore (closes #80). adds public and .build to `.gitignore` if user chooses standard installation otherwise the user can put whatever they want.,neutral
libp2p/js-libp2p,uglify,2017-08-09T15:43:42Z,_warning: i did not look at the code yet._can't you just specify a regex to the mangle-regex option of uglify that matches functions starting with a capital? not the most robust solution though.can you explain the crux of the problem a bit more? i might try to solve this issue,negative
libp2p/js-libp2p,uglify,2017-08-09T20:58:42Z,actually `libp2p` (as well as `libp2p-swarm`) uses the `.tag` property as the primary way to determine the name of the transport. it uses `.constructor.name` only as a fallback. so it should be possible to just set the `.tag` as the name of the transport. i like this solution and i explicitly set `.tag` to `circtuit` in `libp2p-circuit`. for example.,neutral
react-boilerplate/react-boilerplate,eslint,2016-02-22T17:35:57Z,move `.eslintignore` to webpack directory,neutral
react-boilerplate/react-boilerplate,eslint,2016-02-22T17:58:00Z,this might break `npm run lint:js:staged` - can you make sure that still works?,neutral
react-boilerplate/react-boilerplate,eslint,2016-02-23T03:43:40Z,when i run that. nothing happens. so i guess it's not broken?,negative
react-boilerplate/react-boilerplate,eslint,2016-02-24T05:57:57Z,while checking this pr out. i noticed that our `.gitignore` is pretty much the same as our `.eslintignore`. at least as far as js is concerned. this means we can use our `.gitignore` instead of the `.eslintignore`. which saves us a full file.i went ahead and tried that. and it worked. so i've already pushed the change in be95f59d803124bbfc3d4038b3034beed7bba4ff.thanks for kicking off the discussion of removing cruft in our root folder. this has definitely made the boilerplate much nicer! sorry i'm not merging this one. but i'm sure you'll find something else to do in our issues. thanks for the contribution!!,negative
react-boilerplate/react-boilerplate,eslint,2016-03-06T07:09:39Z,when i build locally. eslint `react/prefer-stateless-function` error is not coming. it seems to appear only in travis. is that a newly added rule?,negative
react-boilerplate/react-boilerplate,eslint,2016-03-13T17:57:40Z,huge fan of flow myself. but feel that it should be a low priority for rbp right now. there will be a lot of churn in the transition away from proptypes (and not restricted to code either: upstream. eslint presets will need to be updated) that can be side-stepped by allowing the dust to settle.definitely one to flag as being on the project's radar though.,neutral
react-boilerplate/react-boilerplate,karma,2016-02-29T10:25:51Z,this is likely a problem with the `webpack.test.babel.js` file. or the `karma.conf.js` file. which are in the `internals/webpack` and `internals/testing` folder respectively.if you want to. you can also take a look at implementing ava at the same time! i'd love that!,negative
react-boilerplate/react-boilerplate,karma,2016-03-15T02:36:38Z,fixed in 38330c5. very very sorry about that.my change to `process.cwd()` from `__dirpath`  in d855c7661abd821e7f67ed7e320e6d766d7e511a broke the `coveragereporter` config in `karma.conf.js`.my bad. thanks so much for sticking with this. my bad for not trying first before closing this issue! thanks!!,negative
Esri/esri-leaflet,standard,2015-05-12T04:16:11Z,thanks for the leaflet link roemhildtg.  your website link helped solve my problem.  i realized that i had to use leaflet's own iterate function and not a standard i = 0; i < featurelayercollection.length; i++  iteration.   this code solved my problem:```map.eachlayer(function (layer) {    map.removelayer(layer)}); ```,negative
Esri/esri-leaflet,standard,2015-05-12T17:03:49Z,jgravois could you find a whole bunch of tile services that are mercator but published at non-standard scales? i can try to tackle this.,neutral
apache/zeppelin,selenium,2015-11-30T10:48:07Z,add firebug and firepath for debugging. hi. i've refactored some of the selenium related test case. and added firebug and firepath for debugging so that if ci is failing on travis it can be debugged on local.also i feel that we should delete notebook once selenium test case is finished.,negative
apache/zeppelin,selenium,2015-12-02T06:00:38Z,also. is it a good idea to get rid of. this. as well ? and let selenium test case be part of regular test as well.```boolean endtoendtestenabled() {    return null != system.getenv("ci");}```,positive
apache/zeppelin,selenium,2015-12-02T06:02:16Z,it depends if they are working :)one problem we had in the past was that selenium test tends to not work on classic machine.build is already hard to finish for some. but it was almost impossible with selenium tests running,neutral
apache/zeppelin,selenium,2015-12-03T02:17:17Z,anybody with selenium experience to test that? :p,neutral
apache/zeppelin,selenium,2015-12-04T08:01:00Z,can we merge this. if there is discussion around this ?,neutral
apache/zeppelin,selenium,2015-12-08T07:49:58Z,i think we need to avoid ship binaries in source release. but in this way. firebug binaries are going to be included in the source release.,neutral
apache/zeppelin,selenium,2015-12-14T05:52:47Z,sure leemoonsoo appreciate your point. thanks for the suggestion. removed binaries from the project.,positive
assaf/zombie,mocha,2013-02-13T21:34:54Z,about runscripts. hello!!im using mocha with zomibie with runscripts = true . it is catching exceptions from external scripts. like facebook box. etc. there are way to run only local scripts?thanks for help!,positive
FormidableLabs/webpack-dashboard,eslint,2017-07-07T05:17:48Z,eslint works fine without webpack dashboard,positive
KyleAMathews/typography.js,standard,2016-08-02T17:08:40Z,added a react component for loading google fonts the standard way. not sure now how this would help.,neutral
holger1411/understrap,standard,2016-10-25T12:59:55Z,you mean indents on code?i am sure that i've set phpstorm to wordpress coding standards but i'll double check just in case.thanks for the feedback,neutral
holger1411/understrap,standard,2016-11-01T19:02:25Z,implement mdo's code standards as per feature request. i've taken the liberty of updating all markup and scss/css to use [mdo's coding standards](). if i missed anything. let me know and i'll revise and resubmit.,negative
holger1411/understrap,standard,2016-11-01T19:08:18Z,you are great! two thumb up     maxdmyers,positive
holger1411/understrap,standard,2016-11-01T19:12:50Z,holger1411 my pleasure! thanks for starting understrap!!,positive
holger1411/understrap,standard,2016-11-07T12:10:41Z,im sorry. perhaps i did not described the issue correctly.the problem is not the ide. the ide is set to check if the source complies with wordpress' coding standards. in our case the source complies with mdo's standards which they are completely different from wordpress ones.of course the ide can be set to ignore the guidelines.so the actual case is which standards should we follow.,neutral
strongloop/generator-loopback,mocha,2014-10-14T10:56:10Z,> i should also mention that the error appears when trying to use mocha to> test the rest endpoints; my test script (in test/testtest.js. where test is> a peer to server and client) looks like this.that's a completely different issue then. please open a new gh issue and copy your last two comments there. i'll remove them from here once you do that. in order to keep the discussion focused.,positive
ramda/ramda-fantasy,jshint,2015-05-23T21:51:24Z,either extend test. - fixes a jshint warning in either.js- add tests for either extend tests,neutral
ramda/ramda-fantasy,jshint,2015-05-23T21:59:12Z,great thanks! i meant to get to this. but hadn't got there yet. can you please squash to one commit?,positive
ramda/ramda-fantasy,jshint,2015-05-23T22:07:45Z,certainly.,neutral
vvo/selenium-standalone,selenium,2014-06-16T11:03:21Z,when's the next release going to be and with that the next release of webdriverjs-selenium-bundle?,neutral
vvo/selenium-standalone,selenium,2014-06-18T11:14:31Z,thanks! do you think webdriverjs-selenium-bundle will be updated soon as well?,positive
koalyptus/TableFilter,codecov,2016-10-08T02:31:15Z,code coverage investigation. investigate how to implement code coverage using instanbul. codecov and eventually karma.,neutral
nathanboktae/mocha-phantomjs,mocha,2015-04-10T06:12:15Z,so i took a look into this finally. the way we configure mocha at the last minute actually doesn't work with the slow feature. as test has it's own slow option (mochajs/mocha#402). which the default is cloned when the tests are loaded. so it's too late to set the overall default given our current mechanism of configuring.,negative
nathanboktae/mocha-phantomjs,mocha,2015-04-16T20:38:47Z,i'm having the same issue.  also using gulp-mocha-phantomjs.,neutral
nathanboktae/mocha-phantomjs,mocha,2015-04-24T04:52:35Z,not true - we are using it in our `gruntfile` at work. remove the `--`:```    mocha_phantomjs: {      all: ['tests.html'].      options: {        'ignore-resource-errors': true      }    }```,neutral
nathanboktae/mocha-phantomjs,mocha,2015-05-04T16:39:49Z,tracking the long term fix for this in #186,neutral
workshopper/levelmeup,standard,2016-10-17T02:42:34Z,new workshopper (attempt #2). okay this is a crazy rewrite of most of levelmeup. it is ...- [x] updated to all the latest dependencies- [x] using workshopper-adventure- [x] not program based but module based- [x] prepared for internationalization- [x] testable using `npm test`- [x] linted using [standard]()- [x] significantly reduced in code-complexity- [x] using markdown for rendering instead of txtit would be lovely if someone could take the time to review it.,positive
workshopper/levelmeup,standard,2016-10-17T20:37:00Z,i've started reviewing this. i'll let you know tomorrow!,positive
workshopper/levelmeup,standard,2016-10-18T17:58:33Z,a lot of commits. i think i'll just do the workshop and not focus as much on reviewing the code.,neutral
godaddy/javascript,eslint,2016-11-01T21:13:47Z,add rules for warnings on "semi" and "no-extra-semi" for .eslintrc,neutral
godaddy/javascript,eslint,2016-11-01T21:51:23Z,.,neutral
mccormicka/Mockgoose,jasmine,2013-10-17T01:26:33Z,after cloning in order to run `npm test` the dependencies of jasmine-node need to be installed.. this script will install them automatically in development environment after `npm install`,neutral
mccormicka/Mockgoose,jshint,2014-01-08T21:31:52Z,thanks for the contribution i have merged this after making a small change and cleaning up the jshint error.,negative
kriskowal/q,jasmine,2012-10-17T20:55:10Z,thanks guys for the awesome responses. i knew it was too late to change. but the discussion and feedback are most welcome :),positive
jquery/sizzle,karma,2014-02-05T16:52:18Z,we need a plan for abstracting the `test/karma` files. since the effort of maintaining those in multiple places would be awful. i'm okay with leaving them here until we get a second project adopting karma. but we need a least a plan for how to approach that. might be a plain node module. a grunt task or whatever else.,negative
nteract/nteract,eslint,2016-03-06T03:19:29Z,eslint. i bumped to the latest eslint for another project and noticed that a lot of our rules are outdated. to simplify. i bumped this to relying on the airbnb eslint and overrode the "fine ipython. have your snake case sometimes" option.,positive
nteract/nteract,eslint,2016-03-06T03:29:14Z,i love seeing the codebase shrink!  thanks! :cake:,positive
nteract/nteract,eslint,2016-03-06T04:06:00Z,begin airbnbifying. fixed up some suggestions by our eslint overlords and cleaned up the new kernel reduction.,neutral
nteract/nteract,eslint,2016-03-06T04:06:39Z,thanks!,positive
nteract/nteract,eslint,2016-03-06T04:45:35Z,the last eslint bits i'm willing to touch.,neutral
nteract/nteract,eslint,2016-03-06T05:00:23Z,wahoo!,neutral
nteract/nteract,eslint,2016-03-10T15:33:42Z,rxdux cleanup. - pulling constants into their own folder. referencing them using `import * as constants`- cleaning up reducer model. creating root reducer- object.assign -> object rest spreads- pulling key ops into /keys folder- fixing linting. configuring eslint to use babel-eslint as parser,neutral
mantoni/mochify.js,mocha,2014-06-30T14:32:35Z,the `mocha.opts` file is currenlty ignored by mochify. i think it should be read by mocaccino and the browser code needs to be configured with the values (just like the reporter).care to look into it?,neutral
mantoni/mochify.js,mocha,2014-06-30T18:58:11Z,it sets the timeout for polling the logs. at some point. min-wd thinks the script does not respond anymore. that is what this timeout is.in your case. you want to change the mocha timeout value. it might make sense to couple these values in mochify.reading the `mocha.opts` file should happen in mocaccino since that is where mocha get's configured.,neutral
FormidableLabs/formidable-landers,karma,2016-03-09T23:30:20Z,task: add tests. - add testing infrastructure: enzyme. karma. chai. mocha- add tests for `<header>` and `<footer>`/cc coopy tptee,neutral
FormidableLabs/formidable-landers,karma,2016-03-15T21:30:44Z,lgtm after comments!,neutral
jshint/fixmyjs,jshint,2013-05-02T19:18:24Z,i'm confused. this is fixable and the jshint `indent` property generates errors otherwise. why does this require an option to be set?,negative
jshint/fixmyjs,jshint,2013-05-04T04:47:15Z,i'll be pushing to npm tonight.,neutral
cucumber/cucumber-js,standard,2017-11-08T13:12:14Z,charlierudolph is there anyway to send commands back to the cucumberjs to trigger a screen capture or anything? that is another use case that is very important to the standards i have to follow.,negative
cucumber/cucumber-js,mocha,2016-09-22T16:57:31Z,i'm happy to help on the cucumber-js side. our logic for adding and removing the uncaught exception handler is pretty simple. before each step starts running we add it. after it stops running we remove it. this is very similar to what mocha does.,positive
vector-im/riot-web,standard,2016-05-25T00:12:33Z,i've updated the pr to use `q` and `browser-request` instead of the web standards polyfills. my bad for not noticing those deps already existed on the matrix sdk libs. let me know if you want any other changes.,negative
appium/appium,selenium,2014-02-17T14:19:59Z,instruments crashed on startup. hi.i'm observing this error on two machines (maverick with latest xcode):```self = <selenium.webdriver.remote.errorhandler.errorhandler object at 0x10a87f1d0>response = {'sessionid': none. 'status': 33. 'value': {'message': 'a new session could not be created. (original error: instruments crashed on startup)'. 'origvalue': 'instruments crashed on startup'}}```are there is way how to troubleshot the issues? appium-doctor reports everything green.,neutral
appium/appium,selenium,2014-02-18T18:42:17Z,unfortunately instruments is often unreliable. restarting your computer sometimes helps. does it ever launch or does it fail every time?,negative
appium/appium,selenium,2014-02-19T10:44:52Z,and i see previous error again. and if i open console app i see next line:```19/02/14 11:40:13.347 google chrome helper[2085]: process unable to create connection because the sandbox denied the right to lookup com.apple.coreservices.launchservicesd and so this process cannot talk to launchservicesd. : lsxpcclient.cp #426 ___zn26lsclienttoserverconnection21setupserverconnectioneipk14__cfdictionary_block_invoke() q=com.apple.main-thread```,negative
appium/appium,selenium,2014-02-19T17:40:47Z,no idea. never seen those errors before. are you sure you're automating an app that you have built and have a developer cert for?,neutral
appium/appium,selenium,2014-02-20T09:43:28Z,this is our app for sure. but i have currently installed two provisioning profiles and two keys (develop and distribution). but i don't think this is the case. i`m going to investigate more.if i will try to run instruments manually. how could i check that it is operate correctly with simulator?,negative
appium/appium,selenium,2014-02-20T18:43:26Z,looks like a fruitstrap error. i'd bypass fruitstrap by manually installing the app on the device and then simply passing in the bundleid for the 'app' capability so we don't try to install it.,negative
appium/appium,selenium,2014-02-21T01:04:17Z,i would have to look into the underlying implementations of the selenium server in question. for appium. master jlipps would know :)the only other option would be iosdriver. and it's unclear to me via their documentation that the async_script_timeout command is implemented.,neutral
appium/appium,selenium,2014-02-24T19:08:22Z,did you try using the built-in selenium alert methods to accept the alert?,neutral
appium/appium,selenium,2014-02-27T11:40:53Z,thankfully the prelaunch worked fine now. but i could not open the inspector. when i click on the inspector icon from gui. i get the usual message "could not get list of sessions from appium serverbe sure the appium server is running with an application opened by using the "app path" parameter in appium.app (along with package and activity for android) or by connecting with selenium client and supplying this in the desired capabilities object.",neutral
appium/appium,selenium,2014-03-04T12:16:51Z,error message on pop up be sure the appium server is running with an application opened by using the "app path" parameter in appium.app (along with package and activity for android) or by connecting with selenium client and supplying this in the desired capabilities object.,neutral
appium/appium,selenium,2014-03-07T09:23:46Z,i build the appium. but i can not find the selenium.apk in it.where is it ? i think the reset.bat .......,neutral
appium/appium,sauce,2014-01-05T14:09:06Z,add two doc in chinese and update to the latest. add troubleshooting.cn.mdadd real-devices.cn.mdupdate the cn doc to the latestadd saucelabs-repository in pom.xml in testng example,neutral
appium/appium,mocha,2014-02-25T20:20:35Z,appium testsuite bails when beforeeach hook fails. when the beforeeach hook for a single test fails. mocha bails out of the entire suite--in fact. not just the entire suite. but the entire test run. this is a pain because we get through most of the test run and then mocha bails without us knowing what tests didn't run.instead of this. we should somehow mark the individual tests as failed. or at worst. bail out of the specific suite with the bad beforeeach. but the entire test run shouldn't stop.sebv. can you look into this?,negative
appium/appium,mocha,2014-02-25T23:10:18Z,more information: when i run this without `--recursive` it seems to go to the next `describe` and not bail out entirely. which is what i would expect.,negative
appium/appium,mocha,2014-03-11T13:53:49Z,various fixes. - upgraded mocha and use mocha from node_modules/.bin- added timeout to uninstallapk in adb and test reset- bugfixes,neutral
appium/appium,mocha,2014-03-11T18:03:52Z,nice. thanks,positive
appium/appium,jshint,2014-01-13T14:43:37Z,`grunt jshint:files` is failing.,negative
adfinis-sygroup/ember-validated-form,eslint,2017-11-08T09:28:44Z,stricter eslint config. it would be nice to enforce a little more code style rules beyond `eslint:recommended` (example: `semi`).,negative
brunch/brunch,mocha,2012-12-07T17:03:31Z,looks like testacular have mocha support these days,positive
agda/agda-stdlib,standard,2017-10-05T12:15:19Z,> the agreed upon course of action is that there will be a safe.* subset of modules.i think i'd prefer `m.safe` to `safe.m`: in my opinion the word `safe` is more noisy at the start than at the end. furthermore `m` and `m.safe` are close to each other. both alphabetically and in terms of the directory hierarchy.,negative
agda/agda-stdlib,standard,2017-10-05T14:32:52Z,> i'm still a little unclear about how the git submodule of the standard library works. am i correct in thinking that it doesn't automatically pull updates made to the master of this repository? it has to be manually pushed forward right?right.,negative
babel/babel,mocha,2015-06-23T00:18:48Z,even then. it's only the `gulp mocha` command that triggers the issue. all of the other application commands import properly. i will follow up shortly.,neutral
babel/babel,mocha,2015-06-24T15:10:21Z,>  it would be cool if babel could look inside the `package.json` file and find config options therei'm hesitant on adding an additional way to specify options. the goal of `.babelrc` was to consolidate it.> the mocha compiler option doesn't support thisit should. if it doesn't then it's a bug.,negative
babel/babel,mocha,2015-06-24T15:13:24Z,just to clarify. what didn't work was to give babel command line options via the `mocha --compiler` option. using a `.babelrc` works. i would just prefer to have everything at the same place.,neutral
angular/angular-seed,selenium,2015-03-27T08:50:16Z,nilapuanusha i'm sure you didn't start 'webdriver-manager' or at least you close it before you run your tests.make sure you open it in an other command prompt. and when it runs. run your selenium tests and it should work.,neutral
angular/angular-seed,karma,2013-12-30T04:18:12Z,karma should be loaded from the path - not a relative directory. people can install karma in many places - assuming relative to the script directory seems "odd" to me.,neutral
jshint/jshint,jshint,2012-10-19T18:30:50Z,i agree with axkibe as well,neutral
jshint/jshint,jshint,2012-10-22T15:11:36Z,totally agree with for-in check without additional nesting.,neutral
jshint/jshint,jshint,2012-10-28T10:16:12Z,enable requiring npm module in node. without a "main" entry in package.json. installing jshint as local npm module doesn't work.i hope you don't mind. that i also consolidated to use of whitespace in the first commit.,positive
jshint/jshint,jshint,2012-10-29T17:06:15Z,i should have named it differently. it is actually a jshint install error. received while installing grunt. sorry.i also get the same error if i try to install jshint directly.,negative
jshint/jshint,jshint,2012-10-29T17:07:58Z,can you do `npm install jshint` without grunt? if it still fails. send me the output and i'll re-open this issue.,negative
jshint/jshint,jshint,2012-10-29T17:12:04Z,thanks! we use hard-tabs. not spaces. also. if there's a way to test this? install itself or something. :-),positive
jshint/jshint,jshint,2012-10-29T18:19:07Z,regarding the test: something like this should work:,neutral
jshint/jshint,jshint,2012-10-30T11:44:07Z,assuming node.js forces adding 'use strict' statement. paste following code snippet info the code editor on the  ``` javascriptfunction abc() {  var a = 1;}```1) lint code using default configuration (i.e. all "warn" options are selected. "browser" is assumed).three errors are found. one of them is```line 2: var a = 1;missing "use strict" statement.```ok. that is expected behavior.2) deselect "when code is not in strict mode" option and lint again. the error has disappeared as expected.3) assume nodejs and lint again.unexpected error:```line 2: var a = 1;missing "use strict" statement.```,negative
jshint/jshint,jshint,2012-10-30T21:28:14Z,thanks! looks good besides one comment above.,positive
jshint/jshint,jshint,2012-10-30T22:43:40Z,moved to #724. which has only the accepted changes.,neutral
jshint/jshint,jshint,2012-11-03T23:26:12Z,in that case `/*globals */` (or `.jshintrc:predef`) could also be used as well. which you probably need anyway since later files will likely be referencing the "exported" variable from an earlier file. right?,neutral
jshint/jshint,jshint,2012-11-05T18:55:11Z,not closing this ticket but this is a such minor use case (you can always just add `/*global exports */`) that it won't be on my high priority list. feel free to submit a patch tho.,neutral
jshint/jshint,jshint,2012-11-06T19:08:05Z,+1 for that feature. very helpful for including third party code.,positive
jshint/jshint,jshint,2012-11-14T14:07:19Z,iirc. i would love to be able to specify directories/files to exclude form linting in `.jshintrc` file. +1 on this!,positive
jshint/jshint,jshint,2012-11-14T14:17:59Z,yes! less files.,neutral
NekR/offline-plugin,eslint,2016-11-26T21:39:35Z,> ('referenceerror: reference to undefined property "allowloaders"'. in addallnormalized)that's weird because i don't see anything like this. do your use flux or typescript or maybe just eslint and run it against generated output of your project?,neutral
angular/angular.js,jasmine,2014-01-05T04:37:20Z,some background for what the code does (if it's not obvious): the reason for this check is that `inject` and `module` helper functions are implemented in different ways  depending on whether the spec is running or not.if a spec is not running we need set up the spec so that when jasmine executes it. the injector will inject the nested spec fn. in this case inject is asynchronous:```it('should do something'. inject(function(someservice) {}));```however if you use inject from within a spec. the injection must be synchronous. this is commonly used if you need both the `module` helper and `inject` helper in the same spec.```it('should do something'. function() {  module(function(someprovider) {  });  inject(function(someservice) {  });});```,negative
angular/angular.js,jasmine,2014-01-05T04:38:10Z,this really is a jasmine issue. so i'm eagerly waiting for some reply to pivotal/jasmine#492,neutral
angular/angular.js,standard,2015-07-27T01:41:27Z,any news on this one?,neutral
ysugimoto/aws-lambda-image,eslint,2016-12-29T08:20:18Z,install eslint,neutral
summernote/summernote,selenium,2017-10-05T06:27:21Z,add nightwatch to run e2e tests. the #1608 pr was too big. therefore i couldn't make it. i don't want to do the same mistake again. so. i will divide introducing e2e test as several prs.### these pr includes* configure nightwatch to run e2e tests with selenium* configure to run e2e test with saucelabs on travisci* add an e2e test to check initializing summernote.i couldn't check the e2e test run correctly with saucelabs because my saucelabs account is limited.to run e2e tests. dist files are needed. but now `npm run dist` occurred error. so. this pr depends on #2500 .and i configured e2e test don't depend on grunt much because it will be replaced rollup in #2495 . building dist files is only needed for running e2e test. so. changing to rollup will be easy for e2e tests.,negative
summernote/summernote,selenium,2017-10-09T07:27:33Z,outsideris thanks for contribution.,positive
DefinitelyTyped/DefinitelyTyped,standard,2016-02-09T21:58:22Z,basarat i deleted the extend commits since they are only in my branch.an use case for the extra parameters would be for jquery widgets that add their own events with non-standard signatures.additionally. reading the documentation for on/off. it seems there is a feature to pass a boolean false as the handler. this is not supported by the current definition file.,neutral
tombatossals/angular-leaflet-directive,karma,2013-08-27T15:09:10Z,update jshint tasks.. sorry again houqp i always forget jshint. i leave the karma open... and never execute the jshint task. is there a way to automatize it?this pr just solves a couple of jshint errors,negative
tombatossals/angular-leaflet-directive,karma,2013-08-27T18:18:33Z,i'm all for a grunt watch. currently using a similar setup on the project that's using this directive and it's great to have it run on each modification.,positive
tombatossals/angular-leaflet-directive,karma,2013-08-27T19:53:14Z,added support for awesome markers plugin. hi. i've added support to awesome-markers plugin.i also updated the example marker update example. but as i do not know how to deal with icon images in bootstrap. the image inside the icon does not appear. i you know what to include in the html file do it for me please.if you play with the example you will be able to use two awesome icons and the drag will continue to be functional.to do it i've added a helper class to deal with plugins and make the code more readable. is this structure ok?jaume.edit: somehow i've uploaded my karma conf. please. don't use it.,negative
tombatossals/angular-leaflet-directive,karma,2013-08-28T10:20:04Z,i love you guys. thank you.,positive
tombatossals/angular-leaflet-directive,karma,2013-08-30T11:30:37Z,hi. i have modified the gruntfile.js to feature a new development mode. you can launch it as the default grunt tasks:$ gruntit will start karma on background and watch for changes on the library. if there's any change would pass the tests. jshint the files. and if everything is good. uglify the library.if you need something more or add/change/delete functionality just let me know.,positive
angular-ui/ui-mask,sauce,2015-07-03T04:01:24Z,thanks for reporting. i am unfortunately not familiar with `ui-mask` codebase. nor sauce. but `ui-mask` quality and reliability could clearly be improved. there were a lots of reported bugs in previous repository for `ui-mask`.so if someone would step up and take a few initiative on that project. that would probably be very welcome by its users. but i'm afraid this won't be me. i will merge pr. but can't do much more than that.,negative
mafintosh/peerflix,standard,2014-10-25T04:35:24Z,feross the bug was that re-encoding the info section of the torrent after parsing it into the json structure yielded a different infohash. this is probably because the torrent contains some some standard fields in the info section (seen this before). by passing the buffer of the the torrent instead of parsing -> encoding -> parsing the problem was solved.all in all i wouldnt call this a parse-torrent bug as i was using it weirdly.   > on 25 oct 2014. at 13:14. feross aboukhadijeh notificationsgithub.com wrote:> > was this a bug in parse-torrent? what was the fix?> > —> reply to this email directly or view it on github.,negative
