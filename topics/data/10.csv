webtorrent/webtorrent,standard,2015-11-24T04:37:03Z,agree with jimmywarting  recall the history of .avi. .flv. .... and the iso standard .mp4; gopher and the w3c/ietf standard http...,neutral
lindell/JsBarcode,coveralls,2017-01-04T14:26:34Z,the problem is that you print the number as a number in the javascript. which will remove the zeroes. if you add " before and after the number to make it a string it will work. like this:````php<script>jsbarcode("#barcode". "<?php   echo $formatted_patientid;?>" . { height:25 }); </script> ````,neutral
lindell/JsBarcode,coveralls,2017-01-04T17:10:22Z,dear lindelli am really grateful to you. your script running good . producing desired output. my blessings upon you. thanks from my heart. mukul sarker,positive
shouldjs/should.js,mocha,2015-08-24T15:58:08Z,oops. not an issue with should. sorry about that. finding out that testing promises with mocha is a bit of a mess. any assert within then(...) was causing mocha to hang forever... forgetting the () on empty was the trick to making it seem like it worked ;),negative
shouldjs/should.js,mocha,2015-08-24T18:04:26Z,thanks and yeah i was following the 'correct way with latest mocha' example. the problem was with trying to test "do x then do y" behavior where x and y are both async methods returning promises. failing tests were hanging... not "forever" but just timing out (well the timeout was long so it felt like forever).  i'm working around it by pulling out the "do x" into a before(). but that feels hacky.i'm probably missing something to make this work as expected. but i can live with it for now. thanks for your replies!,positive
ramda/ramda,eslint,2016-10-24T23:48:52Z,- adjusted test for main `entry`- removed `npm run pretest`- eslint check is still needed. moved it into ci,neutral
request/request,codecov,2016-05-07T14:47:52Z,add codecov.yml and disable pr comments,neutral
actionhero/actionhero,mocha,2013-12-01T21:13:17Z,i definitely agree with mocha for the framework but bringing your own assertion library probably wouldnt be a bad idea. i've used `should` on a few projects and keep ending up using [chai]( which gives all 3 major assertion types (assert.expect.should) and also works fine in the browser which is nice for full stack testing.and yes thats more of what i was thinking and genericserver is perfect for this sort of testing. there is no need to worry about what kind of server brought the connection since we are just testing the action logic.when reading through the initial docs i thought the `outputexample` in action object was used for testing sort of like expected output type.ill let you know what i come up with and ill see if i can implement what you are saying above. i assume it shouldnt be too much of a hassle.,positive
lukasoppermann/html5sortable,standard,2018-03-14T16:18:28Z,hey jmuzsik it is still failing. just in case you did not notice. you can run `npm test` or `npm run standard` and you will see all the issues locally.,negative
slackapi/node-slack-sdk,codecov,2017-10-04T21:24:23Z,markcarey i'd like to merge this pr in. thanks! i'm not sure why codecov is not reporting on the coverage and i've pinged their support about it.,positive
stefanpenner/broccoli-persistent-filter,mocha,2016-07-03T06:24:15Z,remove leftover debugger. i assume that the addition of this debugger was an accident. and it's making my node debugging of ember-cli stuff a marginally less fantastic experience.in the spirit of adding a failing test w/ the fix. i've included a mocha jshint plugin.,negative
stefanpenner/broccoli-persistent-filter,mocha,2016-07-03T12:53:21Z,thanks mike-north!,positive
stefanpenner/broccoli-persistent-filter,mocha,2016-07-03T14:52:54Z,stefanpenner mind cutting a release?,neutral
stefanpenner/broccoli-persistent-filter,mocha,2016-07-03T17:05:05Z,awesome. thanks rob!,positive
elastic/kibana,selenium,2016-08-18T15:26:07Z,jbudz bargs ci doesn't seem to run selenium tests. feel free to go over this already and give feedback. but that should probably be cleared up before signing off on it.,neutral
elastic/kibana,selenium,2016-08-19T14:41:27Z,this change makes it so we can't run the selenium tests against kibana builds unless they're running in dev mode. which is definitely not ideal.  this seems like a problem with our selenium tests more than anything else. but i'd rather not put the project in a state of limbo my merging this while that is the case.  can you look into what it would take to get the selenium tests to work with the angular debug mode disabled?to reproduce what i'm talking about. just outright disable the angular debug thing rather than wrapping it in a conditional. and then run `npm run test:ui`.,negative
elastic/kibana,selenium,2016-08-22T13:44:29Z,the selenium tests don't normally run with kibana running in dev mode.  i don't think they can because of the basepath inserted in the url.  we might be able to work around that in the selenium tests if we needed to.i don't know anything about the angular debug info.  if we had to change the method in the selenium tests that checks if kibana is loaded. we certainly could.  that whole set of methods for loading pages is a bit of a mess.,neutral
elastic/kibana,selenium,2016-08-27T08:20:45Z,this could be merged in. but as epixa mentioned it will prevent selenium tests from running unless they are running in dev mode ( which is currently the case ).in the future we need to update selenium tests to not depend on angular debug info. if running selenium tests in non dev mode is a requirement then this pr needs to wait until selenium tests are updated.,neutral
elastic/kibana,selenium,2016-08-29T14:04:11Z,yeah. running selenium tests outside of dev mode is pretty important. so they should be updated to support that.,positive
elastic/kibana,selenium,2016-09-07T20:29:06Z,> is this related to the fix #4919 ?yeah. the fix for that (#8022) caused the bug> i don't understand ishashingenabled(). is it a configuration option? or how does it get set?it just reflects the current value of the `state:storeinsessionstorage` setting. which is what turns on #8022> do the functional selenium tests pass locally for you?the tests pass locally. and this is specifically fixing the bug caused by #8022,negative
justmoon/node-extend,eslint,2016-03-11T16:34:36Z,i believe this is a bug in eslint or js-yaml - the default is json. so i'm not sure why it would attempt to parse it as yaml. (separately. it should only cause a problem when developing this very module. since eslint shouldn't be checking inside your own node_modules when this project is a dependency),negative
winstonjs/winston,mocha,2018-08-15T03:53:18Z,npm install mocha -g,neutral
Automattic/node-canvas,standard,2017-03-17T00:22:10Z,goliatone you might try installing  `libjpeg-turbo-dev`. `cairo-dev`. `pango` via apk. in addition to the standard build stuff you already have. if the install still craps out. see which header file is missing and search for it -- usually that will land you on a package contents page for apk that you can use to figure out what package has that file and the dependency graph for that package.hope this helps.,neutral
serverless/serverless,mocha,2017-06-23T18:29:12Z,cjelger thanks for making the dummy project!i gave it a shot. and it looks like serverless is packaging it correctly on my setup. the dev dependencies `mocha` and `mocha-jenkins-reporter` are not included in the zipped package that serverless creates. so. it makes me think there is something specific with this project and your environment that is causing the issue.,negative
shama/webpack-stream,standard,2016-05-19T15:56:57Z,> jmeas are you still running into that error with this?haven't tried again tbqh. i can try tonight. but it does sound like this works for a bunch of other folks. i was trying to use this with webpack's watch option. which seems to continue to be an incompatible way to go about things. even with this pr (which is fine. i think).if this gets in. and it continues to only work with gulp watch. then i'd recommend adding a new section to the readme about it. it should explain why using webpack's `watch` option does not play well with streams. and demonstrate how using gulp's watch works (even tho' it looks to be pretty standard gulp watch usage. it's probably good to be explicit about what to do).what do ya think?,neutral
paulmillr/chokidar,mocha,2015-12-07T19:43:12Z,do you know about `only` feature of mocha?,neutral
paulmillr/chokidar,istanbul,2015-12-08T22:29:32Z,being able to set the mode from a cli switch is something i've wanted for a while. but mocha's grep does not play nicely with `.only` - so i haven't seen a way to easily use it to run one test in a specified mode.also getting through both `npm` and `istanbul` to pass the argv correctly means it looks something like `npm test -- -- --grep fsevents`.i started playing with something yesterday that might work out to be a good enough solution on this point. we'll see.,negative
valor-software/ngx-bootstrap,sauce,2016-12-06T13:20:36Z,feat(ci): added sauce labs configuration for crossbrowser testing,neutral
valor-software/ngx-bootstrap,codecov,2017-03-16T17:43:36Z,can't really make sense of these codecov warnings. since their links mention "missing base reports". happy to clean them up if you can point me in a direction.,positive
valor-software/ngx-bootstrap,karma,2016-12-12T17:11:17Z,fix(karma): fix unit tests across the all supported browsers,positive
valor-software/ngx-bootstrap,karma,2016-12-13T14:00:03Z,fix(karma.conf): fix for incorrect definition of mime type of test.ts file. chrome v.55 tried to run test.ts file as a video file. setting *mime* option in karma.conf.js should fix it,negative
Azure/autorest,standard,2017-05-16T21:27:40Z,sent an email to brady gaster and waiting for his response. will update the issue once i get more details,neutral
Azure/autorest,standard,2017-05-30T23:37:20Z,task completed,neutral
airbnb/javascript,eslint,2017-02-13T01:53:59Z,is there contributing.md. i made pr #1295 and you overwrote my commit message. i think we need a rule for commit message to avoid overwriting commit messages. if there is the rule. it could be good for contributors. for example. we need create the rule like below:- [tests]  ~ for test- [eslint config] ~ for eslint rule- [guide][react] ~ for gude ? what do you think ?,positive
airbnb/javascript,eslint,2017-02-13T05:45:14Z,a few points: - it's always acceptable and expected for maintainers to edit commit messages. rebase. squash. etc. upon merging - neither the original commit message nor commit authorship should be expected to be retained (although authorship generally is. out of courtesy) - the existing git log should indicate the conventions that are used. - i'd be fine with a pr that documented our commit messages (we'd probably need some back-and-forth on the pr before it was final). although this is the first time it's really come up.,positive
airbnb/javascript,eslint,2017-02-13T06:24:24Z,ljharb > it's always acceptable and expected for maintainers to edit commit messages. rebase. squash. etc. upon merging - neither the original commit message nor commit authorship should be expected to be retained (although authorship generally is. out of courtesy)i understand the necessity of maintainers to edit. > i'd be fine with a pr that documented our commit messages (we'd probably need some back-and-forth on the pr before it was final). although this is the first time it's really come up.in airbnb. is there a rule of commit message ? if it is. i think we can create new one based on existing rule.,positive
airbnb/javascript,eslint,2017-02-13T07:06:53Z,no. we don't have any commit message convention that spans projects.,neutral
airbnb/javascript,eslint,2017-02-14T05:43:21Z,ljharb i will create a contributing.md in reference to existing commit log. gergoerdosi i appreciate it :smile:,positive
airbnb/javascript,eslint,2017-02-14T22:22:53Z,changed from array to single value. this being an array with only one value was causing an error in atom's internal linter. it would throw errors on the 1st line of code stating there was no rule defined for `no-multi-assign`. when i added a rule in my local `.eslintrc.json` it simply delivered the same error in whatever level i declared. the only way for me to get rid of it was to set it to `0`; which was less than ideal since i wanted it to be where you have it. at `2` (`error`).i eventually traced it all the way back to this config as our own config extends this one. changed the array to a string in the live project and it finally stopped throwing inline errors in atom.i will say that it's odd that the cli didn't report an issue...so perhaps it's just an atom interpretation issue of having an array with no other values.,negative
airbnb/javascript,eslint,2017-02-14T22:33:22Z,this should work just fine - a single severity value works identically in eslint whether it's in an array or not. i'd prefer to file a bug on atom. rather than modifying this package to work around it.,positive
airbnb/javascript,eslint,2017-02-15T15:25:58Z,ljharb is there a particular reason this base setting is surrounded by brackets? does that somehow imply that it can accept more values when simple string values do not?,neutral
airbnb/javascript,eslint,2017-02-15T16:23:12Z,it means that if i add an extra option later. i don't have to add the array brackets. often i use that for consistency in my config files. so that every eslint rule always has brackets (that's not the case here atm. but it could be),neutral
airbnb/javascript,eslint,2017-02-16T13:33:25Z,react-native + airbnb's eslint configuration. we have started using eslint in our react-native project and i am interested to find out what the ideal settings are.i currently have the following in my .eslintrc.json file.```{    "extends": ["airbnb". "plugin:react-native/all"].    "plugins": [        "react-native"    ]}```some questions i have: i keep seeing this "parser": 'babel-eslint' but when i went to their github they mention this is no longer neccesary. should i be using it or not?,neutral
airbnb/javascript,eslint,2017-02-16T14:20:20Z,also if someone could label this as a question. would be great!,positive
airbnb/javascript,eslint,2017-02-18T02:30:43Z,this suggests it might be a bug in `eslint-plugin-react`.kufert if you can reproduce it with that plugin directly (without the airbnb config). a bug report there would be *very* helpful.,positive
airbnb/javascript,eslint,2017-02-25T22:20:31Z,who maintains this preset?why does it need to be different than the eslint config? does neutrino use something different from eslint for linting and autofixing?,neutral
airbnb/javascript,eslint,2017-02-25T23:46:20Z,hshoff hello!> why does it need to be different than the eslint config? does neutrino use something different from eslint for linting and autofixing?no. we don't use something different. it's merely a preset for plugging in the airbnb style guide into a neutrino project. which is webpack-based. behind the scenes it is still using the eslint-loader and thereby eslint.put simply. it gives neutrino users a fast path to lint quality via `yarn add --dev neutrino-preset-airbnb-base`. and adding it to their list of other presets. i'd be happy to answer any questions if you have any.,neutral
airbnb/javascript,eslint,2017-02-27T18:25:35Z,i believe i solved the issue. the key was `sourcetype: 'script'`:```js// index.jsmodule.exports = {  extends: ['eslint-config-airbnb-base'].map(require.resolve).  parseroptions: {    sourcetype: 'script'.    ecmafeatures: {      experimentalobjectrestspread: false.    }.  }.  env: {    node: true.  }.  rules: {    'comma-dangle': [      'error'.      {        arrays: 'always-multiline'.        objects: 'always-multiline'.        imports: 'always-multiline'.        exports: 'always-multiline'.        functions: 'never'.      }.    ].    'strict': 'off'.  }.};```,negative
airbnb/javascript,eslint,2017-03-03T16:33:57Z,gazpachu that seems like eslint updated to catch an error it was missing before. i'd just fix your code.,positive
airbnb/javascript,eslint,2017-03-06T13:12:57Z,if this is an ok rule to disable. is the benefit really worth the inconvenience of the overrides? i would not consider it a general "best practice" to not use `setstate` in `componentdidmount`.if you have problematic render flashes you can work around that with various methods. and these methods often will not include moving `setstate` from `componentdidmount`. but another fix. leaving you with a fix as well as the `eslint-disable`.,neutral
airbnb/javascript,eslint,2017-03-06T23:53:04Z,you're running the globally installed eslint - you should `npm uninstall -g eslint`.your locally installed eslint should only be ran via an `npm run-script`. configured in the "scripts" field of your `package.json`.,neutral
airbnb/javascript,eslint,2017-03-07T16:48:08Z,i understand. but that's still not how `require` works by default; so you'd still need to configure eslint-plugin-import so it knows what to do with images.,negative
airbnb/javascript,eslint,2017-03-08T02:42:01Z,ljharb i just close it because i am busy now. if i create the pr. i reopen this issue.,negative
airbnb/javascript,eslint,2017-03-08T06:28:12Z,ljharb thanks for rapid reply. do you have any suggestion about how to configure `eslint-plugin-import` to check whether a image source exists?,neutral
paulmillr/es6-shim,mocha,2014-05-11T18:53:04Z,allow importing es6-shim.js in web worker (fix #247). this is to address issue #247 in which because es6-shim.js uses window it can't be imported in a web worker. i've replaced usage of `window` with `self` when it would work in a web worker. or test if window is available for the zerotimeout function which wouldn't work in a web worker. i've added a simple test that only verifies that `importscripts('es6-shim.js')` doesn't throw. but i'm new to mocha & bdd so it may look strange.,neutral
paulmillr/es6-shim,mocha,2014-05-11T18:57:44Z,`npm test` runs all `*.js` files inside `test/`. so the travis build failed.,negative
paulmillr/es6-shim,mocha,2014-05-11T19:02:23Z,i'll fix those issues. besides opening test/index.html locally in my browser and running npm test. anything else i should do before submitting another pull request?,neutral
paulmillr/es6-shim,mocha,2014-05-11T19:07:07Z,that should cover it :-),neutral
paulmillr/es6-shim,mocha,2014-05-11T21:27:06Z,thanks. i've updated the change per comments above. let me know if there's additional changes that would be good here. style nits or otherwise,positive
paulmillr/es6-shim,mocha,2014-05-12T01:06:38Z,lgtm,neutral
paulmillr/es6-shim,mocha,2014-05-12T02:07:16Z,thanks! and thanks for es6-shim.js!,positive
paulmillr/es6-shim,mocha,2014-05-12T02:28:26Z,thus far i've had no problems running es5-shim.js in web workers but i'll be on the look out =),negative
paulmillr/es6-shim,mocha,2014-06-04T18:52:19Z,copy-paste from mocha's output on the js console should work fine.  try opening es6-shim/testling.html in a browser and then open the js console.  (and when i do that on current chrome i see the string#trim errors which you are presumably fixing in another bug?),positive
jashkenas/backbone,karma,2015-12-11T20:56:26Z,yep. karma used to not set the `bin: {}` stuff to let npm to identify the clis (they wanted people to install karma-cli). want to send the same patch in for underscore?,neutral
chaijs/chai,mocha,2013-11-28T21:50:54Z,make it possible to run utilities tests with --watch. hey! i'm starting to play around with possibilities for an `overwritechainablemethod` utility to address issue #215. and i was trying to run the utilities tests with:``` bashmocha --watch --require ./test/bootstrap --reporter spec test/utilities.js```but the tests fail if they run more than once because they expect certain methods to not be part of the `assertion` prototype. would it be okay for me to add some cleanup in an `after()` block?,negative
chaijs/chai,mocha,2013-11-28T21:55:02Z,...updated my commit message to match the others. i think.,neutral
angular/angular-phonecat,selenium,2016-04-16T08:05:21Z,unfortunatly problem wasn't be solved. in addition to those error i had an exception:error: server terminated early with status 1    at error (<anonymous>)    at e:\users\user\documents\netbeansprojects\angular-phonecat\node_modules\protractor\node_modules\selenium-webdriver\remote\index.js:204:18    at promise.controlflow.runinframe_ (eval at <anonymous> (e:\users\user\documents\netbeansprojects\angular-phonecat\node_modules\protractor\node_modules\selenium-webdriver\lib\goog\base.js:1124:19). <anonymous>:1857:20)    at goog.defineclass.notify (eval at <anonymous> (e:\users\user\documents\netbeansprojects\angular-phonecat\node_modules\protractor\node_modules\selenium-webdriver\lib\goog\base.js:1124:19). <anonymous>:2448:25)    at promise.promise.notify_ (eval at <anonymous> (e:\users\user\documents\netbeansprojects\angular-phonecat\node_modules\protractor\node_modules\selenium-webdriver\lib\goog\base.js:1124:19). <anonymous>:564:12)    at array.foreach (native)    at promise.promise.notifyall_ (eval at <anonymous> (e:\users\user\documents\netbeansprojects\angular-phonecat\node_modules\protractor\node_modules\selenium-webdriver\lib\goog\base.js:1124:19). <anonymous>:553:15)    at goog.async.run.processworkqueue [as _ontimeout](e:usersuserdocumentsnetbeansprojectsangular-phonecatnode_modulesprotractornode_modulesselenium-webdriverlibgoogasyncrun.js:130:15)    at timer.listontimeout [as ontimeout](timers.js:110:15),negative
angular/angular-phonecat,karma,2015-02-09T20:03:15Z,this seems to be related to #163i was able to solve my problem by installing bower and karma globallynpm install -g bowernpm install -g karmathen i could run npm install within the angular-phonecat directory successfully.i also needed to make sure that i ran the npm install within a command prompt which had the git executable in the path. i had installed git to only run in git bash and then i was attempting to use the normal windows command prompt to run npm install which did not work because git was not in the path.,neutral
velesin/jasmine-jquery,jasmine,2014-07-15T21:39:32Z,fixed bug with html5 style booleans causing parsererror. if you use a fixture with the new html 5 style boolean attributes (i.e checked. selected) with no ="checked" or similar. jasmine-jquery will not load the fixture due to a parsererror when making its jquery ajax request. as it isn't valid xml. this can cause a problem with certain mustache.js techniques. such as```<input type="checkbox" {{#checked}}checked{{/checked}} />```this commit sets the datatype to be html when retrieving a fixture. because. well. it is. which seems to fix the issue.,positive
velesin/jasmine-jquery,jasmine,2014-07-16T06:06:21Z,looks good. can you not checking/add that chutzpah.json though,neutral
velesin/jasmine-jquery,jasmine,2014-07-17T16:41:00Z,sure. if it bothers you... i'll take it out.,negative
velesin/jasmine-jquery,jasmine,2014-07-23T20:24:29Z,came here to report this issue after working on some twitter projects.,neutral
velesin/jasmine-jquery,jasmine,2014-07-28T08:06:38Z,ok. so i was able to fix this problem. the problem was due to in-correct links in the fixturespath.closing!!,negative
Modernizr/grunt-modernizr,uglify,2014-03-11T07:01:49Z,license should be preserved. license should be preserved. if you don't use the built-in uglify task.,neutral
gionkunz/chartist-js,jasmine,2015-12-27T20:44:47Z,carlos-  tried to take a crack at adding a test point:```it('should not error on empty series'. function(done) {  jasmine.getfixtures().set('<div class="ct-chart ct-golden-section"></div>');var chart = new chartist.line('.ct-chart'. {  labels: [1. 2. 3. 4].  series: [[]]});chart.on('data'. function(data) {  expect(data.type).toequal('initial');  expect(data.data.series[0]).toequal([]);  done();});});```results in:```log: error: problem parsing d=""```maybe there is more clean up needed?,neutral
videojs/video.js,standard,2017-07-05T08:47:56Z,`labelel_` is a reference to the dom element itself. so. you could just change it via standard dom api.you can listen to the `ratechange` event to know when things have changed and then set the textcontent on the labelel_ based on the playback rate.the other option is to extend the playback rate menu and make the changes so `speed` is a default thing.hope that helps.,negative
videojs/video.js,karma,2014-07-03T21:59:30Z,would you rather i pull this in now or wait until you can apply you latest learning?,neutral
opentable/hobknob,sauce,2015-10-07T09:18:51Z,let me check the docs on using the container-based infra with sauce,neutral
opentable/hobknob,sauce,2015-10-07T10:59:57Z,sauce labs is proving to be flakey for some reason. instead just run …. …the tests directly in travis,neutral
solid/node-solid-server,standard,2016-12-06T08:35:51Z,hi nicola thanks for the review!i asked about how to do this on gitter and in the issues since september.  since i didnt get any feedback i tried to make a patch based on my understanding of the code and what i have learnt in nodejs.i'd be happy to refactor based on best practice recommendations.regarding variables in block scope. is that against our coding standards?  my normal coding principle is to declare variables close to where they are used.  as i understand it they are hoisted to the top of the function in js.  i could do it another way.if no options are passed it is the same as sending in undefined in the positional parameters. i think?re: `var stat = ret.stream` not sounding right. i agree!  but that's how the code was. overloading a positional parameter for multiple purpose.  with my change it is now easier to refactor.advice welcome!,negative
prettier/prettier,eslint,2018-03-13T15:32:08Z,at first i was like 🤔 and then i was like  but it kinda looks ok so i'll just kill that eslint mixed spaces rule and be like 🤷‍♂️,positive
prettier/prettier,eslint,2018-03-16T15:01:16Z,jseminck is/are the rule/rules auto-fixable?in that case you can use `prettier-eslint` to fix the stuff after prettier formats everything,positive
prettier/prettier,eslint,2018-03-17T16:23:31Z,it hasn't caused any problems until now. we have over 100 repositories and having a shared eslint config helps switching from one project to another a bit easier.  is there any place where i can follow how this decision was made? i just don't understand why spaces are used when the option is specifically set to use tabs (even it looks prettier). this is the difference that we noticed:previous:```function test() {<other code>return isnotlinkedtoanyorganisation? promise.resolve({ data: { id: null } }): api.get(`/endpoint`. {method: 'post'.body: json.stringify({ name: organisation.org_name }).});}```to current:```function test() {<other code>return isnotlinkedtoanyorganisation? promise.resolve({ data: { id: null } }): api.get(`/endpoint`. {method: 'post'.body: json.stringify({ name: organisation.org_name }).  });}```tabs only solution could just simply be so. but maybe this was discussed and not chosen due to some other reasons that i am not aware of:```function test() {        <other code>return isnotlinkedtoanyorganisation? promise.resolve({ data: { id: null } }): api.get(`/endpoint`. {method: 'post'.body: json.stringify({ name: organisation.org_name }).});}```anyway. i don't want to complain prettier has already saved me so much time and i have come to love it. if this new approach will be the standard then i will find a way to adjust (eslint-config-prettier seems to be the solution). but just wanted to share my view on this particular topic.,negative
prettier/prettier,eslint,2018-03-19T12:19:18Z,ok. thanks for the longer explanationi guess the way to go is run prettier + eslint on save then.,positive
prettier/prettier,eslint,2018-03-21T03:18:33Z,j-f1 could you share related code in `ts-eslint-parser` or documentation? i only found `tsminustoken` thing in `readonlytoken` and `questiontoken`. and understand that you prefer some sort of flag so that we might not need to hard-code `readonly` and `?`.,neutral
prettier/prettier,eslint,2018-03-21T14:06:08Z,landing. can update when `typescript-eslint-parser` does. thanks cryrivers!,positive
prettier/prettier,eslint,2018-03-21T20:07:09Z,do you know how other tools. such as `eslint --fix`. handles this?,neutral
prettier/prettier,eslint,2018-03-22T10:14:06Z,can confirm `// eslint-disable-line` is currently broken by prettier. would be nice to handle those cases.,positive
prettier/prettier,eslint,2018-03-22T10:58:33Z,in general. those line-based directives don't really seem to be a good idea. `eslint-disable-statement` would make more sense. imho.,neutral
prettier/prettier,eslint,2018-03-22T11:00:40Z,mgcrea as a workaround. `// eslint-disable-next-line` usually works.,neutral
prettier/prettier,eslint,2018-03-27T17:33:03Z,please keep me in the loop here. i am a prettier collaborator (i introduced ts support) and the maintainer of typescript-eslint-parser.i've worked hard with the typescript team to align on asts. but there is still a little work left to be done. if we can keep communicating about how things are moving on each side then we can ensure the minimum possible duplication of work. and minimum pain for users.,positive
prettier/prettier,eslint,2018-03-27T18:31:19Z,rather than a rxjs-specific solution. what about providing a hint to prettier for such use-cases? maybe the ability to specify in the configuration file (i.e. `.prettierrc` or `prettier.config.js`) which function calls should always list their arguments on a newline. the functions can be identified by name `"pipe"`. this isn't the strongest link and may cause naming conflicts. not sure if there is a better way to id.another alternative can be to allow for eslint-type comment hints (e.g. `// eslint-disable-line no-use-before-define`) however. i'm not a huge fan of artifacts of the development process being commingled with source code and this would have to be done every function invocation.,neutral
prettier/prettier,eslint,2018-03-27T23:44:57Z,first thought would be disabling / removing all jsx-related eslint style props and instead relying entirely on prettier for those needs; its highly likely there's a subtle conflict somewhere that's causing that issue. second (and i know this is _very_ hard and understand objections. but its a battle worth fighting for long-term use) i would set your `printwidth` to 80 like the settings page strongly recommends. for things like multi-line props and so on having an 80 `printwidth` is like a trigger that needs to be tripped for properly readable code. leading to a good balance of horizontal to vertical. that was my main issue above; at my company we had it set to 120 which caused many readability issues. when we bit the bullet and set it to 80 prettier became much more sane.,positive
prettier/prettier,eslint,2018-03-28T00:13:33Z,i think you've hit on what i'm experiencing. those style rules are likely conflicting with prettier. and the printwidth 80 is a good suggestion. this particular snippet is from an open source repo i'm contributing to. however. not everyone who contributes uses prettier. so eslint is there to warn them of style-related issues and enforce a certain style. so. it seems prettier has to be all in. the only source of truth for style formatting to really work well. i can live with that.but some having options in the config for this type of thing would be the best of both worlds. just saying.,positive
prettier/prettier,eslint,2018-03-28T03:27:39Z,can you provide more information or a repro repo? it works for me in vscode:(.prettierignore)```.eslintrc```,neutral
prettier/prettier,eslint,2018-03-29T03:24:50Z,`typescript-eslint-parser` seems to work with them already (or at least. it doesn't complain about `tsminustoken`/`tsplustoken` nodes),neutral
prettier/prettier,eslint,2018-03-30T16:16:50Z,maybe i should make a fixable eslint rule instead of this being part of prettier.,positive
prettier/prettier,eslint,2018-04-02T03:18:24Z,there isn't a ton of node-specific stuff. but there's enough to cause a lot of havoc with bundlers :)- relies on process.env to change behavior based on environment variables- relies on os.eol to match system-specific line endings- code for requiring custom parsers and custom plugins that relies on require() (which in turn relies on filesystem access and the ability to synchronously. dynamically load code)- also relies on require() to lazy-load parsers. to keep the prettier startup time fast without losing the ability to support things like prettifying javascript snippets within markdownso. in the 'idempotent' sense of 'pure'. sure - prettier's essentially that. but in the 'behaves the same way on all platforms' sense. prettier isn't (and pretty much no software fits that definition). also it fails the 'doesn't touch the filesystem in order to process input' requirement. and in terms of dynamically including code to fit inputs and intelligently cut down on load time. prettier has a pretty sophisticated. subtle implementation that you'd only find in other large. plugin-enabling architectures like eslint.,positive
prettier/prettier,eslint,2018-04-04T07:56:04Z,kachkaev i've deleted `eslint --fix` and it stopped working at allworks only via webstorm but with the same problem,negative
prettier/prettier,eslint,2018-04-04T08:22:10Z,it could be that prettier is not configured properly then or something else is wrong. i'm afraid i won't be able to help further here and simply suggest to setup prettier from scratch without `eslint --fix` etc. maybe trying to do this in a new blank project can help you get a working workflow. which you can then transfer to your existing code base.,negative
prettier/prettier,eslint,2018-04-04T17:54:16Z,you have to change the eslint rule so it support smart-tabs:`"no-mixed-spaces-and-tabs": ["warn". "smart-tabs"].`,neutral
prettier/prettier,eslint,2018-04-11T19:15:29Z,j-f1 when i do that. i get eslint's no-return-assign error. and the parenthesis appear magically (eslint-cally maybe?) `{node => (this.node = node)}`maybe there is a eslint setting i can tweak?,negative
sequelize/sequelize,codecov,2017-07-28T21:55:10Z,anyone want to enlighten me as to what this "codecov/patch" failure is?  i assume i need to have 95% coverage over the changes i added or something?,negative
sequelize/sequelize,codecov,2017-07-31T16:22:26Z,eseliger what do you recommend i run in npm to test and increase my codecov/patch coverage?  i added a unit tests but it didn't seem to increase my codecov/patch report...,neutral
sequelize/sequelize,codecov,2017-07-31T16:30:53Z,eseliger i'm not sure why it says line 77 is not covered.  i wrote a unit tests to cover that specifically and it passes fine.  does codecov print for integration tests?,positive
sequelize/sequelize,jshint,2016-12-23T06:17:26Z,travis ci just passed this pr with jshint error. need to fix that soon :),neutral
TryGhost/Ghost,mocha,2015-05-18T21:26:59Z,cache control middleware refactor. refs #5286- split cache control middleware into its own file- split out cache control tests- add new mochacli command for running just middleware tests,neutral
workshopper/learnyounode,standard,2017-08-29T03:44:24Z,martinheidegger umm. i still don't see any standard errors.,negative
thoov/mock-socket,eslint,2016-10-27T04:27:32Z,yarn. eslint changes. umd,neutral
caolan/async,mocha,2016-05-18T04:05:14Z,oresoftware similar to ava. suman is not going to be entirely appropriate for us to change to as we will want browser testing (done through karma). a future avenue you can perhaps explore is a) being able to convert mocha tests dynamically so suman can run on a mocha suite b) making a synchronous task runner (similar to tape) which can be run in the browser.regardless. i'm still going to play with your project and see how i like it.,neutral
caolan/async,mocha,2016-05-18T05:44:00Z,yeah. definitely understand wrt browser testing; supporting browser puts too much burden and constraints on suman - i want suman's competitive advantage to be that it is not have to support browser. your idea to dynamically run mocha tests with suman as harness would be interesting - will explore. it is possible. not a bad idea at all.,positive
bermi/sauce-connect-launcher,sauce,2014-04-11T19:05:41Z,saucelabs private key displayed on the console. hello.when using sauce connect. the private key is displayed on the console like this (i added the xs myself):```opening local tunnel using sauce connectstarting sc with args: -u xxxxxxx -k xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx --readyfile /tmp/sc-launcher-readyfilecreating tunnel with sauce labs```this is problematic when the logs are public like on travis. the line with args is only useful for debugging and should never be displayed when the `verbose` option is set to false.regards,negative
nightwatchjs/nightwatch,mocha,2016-07-11T17:07:11Z,mocha test name not used as session name. when writing nightwatch tests the test name is automatically pulled and used as the name of the session in browserstack. would be great if when the mocha runner is used that the name of the test could be used in the same way. could maybe this be added some day?,positive
nightwatchjs/nightwatch,mocha,2016-07-12T18:56:13Z,watch mode?. this tool has the watch mode like mocha --watch or jasmine --watch?,neutral
nightwatchjs/nightwatch,mocha,2016-07-21T13:07:24Z,no. but you can use something like the `grunt-contrib-watch` module.i think because this is neither an _issue_ nor a _feature request_ the official mailing list would be a better place to ask such questions.regards~david,neutral
nightwatchjs/nightwatch,mocha,2016-07-21T13:14:52Z,thanks davidlinse!,positive
nightwatchjs/nightwatch,mocha,2016-07-26T01:05:40Z,results object is not added to currenttest when mocha is test runner . when running a test using the default nightwatch syntax. the`results` object is added to the `currenttest` object. which can be seen with the following code:``` javascriptaftereach: function(browser. done) {  console.log('currenttest:'. browser.currenttest);}```which logs currenttest showing the results object:```currenttest: { name: 'nightwatch test'.  module: 'test-nightwatch'.  results:    { steps: [].     passed: 4.     failed: 0.     errors: 0.     skipped: 0.     tests: 4.     testcases: { 'nightwatch test': [object] }.     timestamp: 'mon. 25 jul 2016 05:00:06 gmt'.     time: 6250 }.  group: '' }```however. when using mocha as the test runner with the following code:``` javascriptaftereach(function(browser. done) {  console.log('currenttest:'. browser.currenttest);});```this logs currenttest without the results object:```currenttest: { name: 'mocha test'. module: 'test-mocha' }```this demonstrates that the `results` object is not added to `currenttest` when mocha is test runner. which is an issue when using an automated testing cloud like saucelabs. because the results of the test are not recorded in saucelabs when using mocha as the test runner.,negative
crypto-browserify/sha.js,standard,2016-03-31T01:33:53Z,fanatid maybe find out what the padding standard is called. and use that with the name.,neutral
Dash-Industry-Forum/dash.js,mocha,2016-11-29T09:42:18Z,lgtm. would be nice to have some test content. or a mocha test to test this.,positive
FezVrasta/popper.js,karma,2017-11-12T12:54:45Z,i think the easiest way is to download a free virtual machine from modern.ie and use it to run the tests.you can copy the karma runner url and open it in the vm browser and everything should work.,neutral
simplabs/ember-simple-auth,mocha,2015-01-29T07:37:09Z,local-storage for app. ephemeral for mocha. i'd really like a way to use the ephemeral session store with mocha and local-storage with my app using the same `environment`. is this possible? i really do not want to have to run my app two different ways to switch back and forth between my app and my tests.using the ember test helpers i can setup and tear down an entire ember application with a unique config for every test. i'd love to be able to control simple-auth the same way as my app.i'm new to ember and spent several hours pulling my hair out trying to configure `simple-cli` from within my mocha tests and eventually gave up on that approach. i ended up adding an initializer that checks the pathname and injects the test config when on the test page but i feel like this approach is more of a hack than anything else.any thoughts?,negative
simplabs/ember-simple-auth,mocha,2015-01-29T07:59:33Z,ok. i'll take it over there. thanks for your quick response!,positive
angular/zone.js,jasmine,2017-10-18T06:52:37Z,fix(jasmine): store original jasmine method. this lets us skip the proxyzone if we really don't need it in our tests.,neutral
angular/zone.js,mocha,2017-10-27T14:35:43Z,fix(mocha): use global if window does not exist. - `window` does not exist in nativescript applications.- this removes a hacky workaround where you assign `global.window` to `global` before including the mocha patch.- preserve existing behavior by using window first if it exists.,neutral
angular/zone.js,mocha,2017-10-27T14:59:21Z,the ci build appears to be broken unrelated to this change. system.js is failing to import some rxjs operators.,negative
angular/zone.js,mocha,2017-10-27T15:02:14Z,justindujardin . yes. current ci is broken. you can just ignore that.,negative
angular-fullstack/generator-angular-fullstack,karma,2015-05-18T19:26:56Z,wow millerren thanks so much for this. i was banging my head against the wall debugging karma (i inherited an old repo) and leaving angular-scenario in my bower.json was breaking my tests.,positive
angular-fullstack/generator-angular-fullstack,karma,2015-05-29T21:51:16Z,also just thought. can you add the babel karma preprocessor and make sure that tests run alright?,neutral
angular-fullstack/generator-angular-fullstack,karma,2015-06-02T04:20:11Z,hey andrew - have just booted up this fork again. will have a look at getting babel and karma dancing when my time frees up this week.,negative
angular-fullstack/generator-angular-fullstack,karma,2015-06-03T18:41:48Z,oh and i would need to remove any references to angular-scenario.js from my original karma.conf.js file too.,neutral
Reactive-Extensions/RxJS,standard,2014-06-09T16:05:32Z,sgerace yes. that's a fairly standard way of doing the latest from each.  keep in mind though of course that inside the `behaviorsubject`. there is always a constant `value` property that you can obtain.also. are you sure you want to dispose the click handler?  if so. that's pretty easy. eg. using `.take(1)` which should then call `oncompleted` and thus call `dispose()` which removes the event handler.:``` jsvar oneclick = rx.observable.fromevent(button. 'click').take(1);```,negative
heroku/heroku-kafka-jsplugin,standard,2017-06-01T01:26:21Z,standard 10,neutral
balderdashy/waterline-criteria,mocha,2015-01-01T08:23:40Z,add mocha to dependencies. sorry it maybe doesn't help anything. but it works with travis. it grinds my gear seeing "build: failed" in sails modules :laughing:,negative
nodejitsu/node-http-proxy,mocha,2014-11-25T22:08:50Z,samccone sorry got caught up with things so i didn't get to it. lgtm. ill post back here with some style nits that i make for next time :). thanks! im also curious about the use of a `context` function as i dont see it anywhere in the mocha docs.,positive
NativeScript/NativeScript,mocha,2018-09-07T11:07:04Z,fix: include mocha and chai typings,neutral
NativeScript/NativeScript,mocha,2018-09-07T11:07:49Z,test --ignore modal_naviagtion#svetoslavtsenov/fix-modal-navigation-e2e api23,neutral
NativeScript/NativeScript,mocha,2018-09-07T11:18:32Z,test --ignore modal_navigation#svetoslavtsenov/fix-modal-navigation-e2e api23 ios11,neutral
gpac/mp4box.js,karma,2016-04-01T16:37:24Z,i see that you have some unit tests and i got it working. but i had to manually copy all media files that are used by unit tests. also. some unit tests do not pass anymore (getinitializationsegment removed). to test mse in browsers karma can be used. it can run code in chrome. or selenium maybe?..,neutral
webpack/webpack,standard,2017-07-17T08:35:43Z,i posted on stack overflow months ago. and ive asked on multiple other sites. and nobody has offered any response. i know it doesnt fit the standard issue template. because its not a bug or a feature request. but im at the end of my rope here... please can you at least let me know if this is even possible?,negative
webpack/webpack,standard,2017-07-18T11:42:13Z,in my opinion it's better to rewrite the code to the standard `require` syntax (or better to `import()`). the changes needed are only minimal compared to the changes needed to support this.i won't implement it and don't think it should be part of webpack. but your can write a custom plugin to handle this if you want to.,neutral
webpack/webpack,standard,2017-08-03T17:50:19Z,samccone i also agree a standard format like har would be great.,positive
webpack/webpack,standard,2017-08-11T21:21:44Z,i think for me. this is about making configuration as user friendly and declarative as possible. and providing a simple pattern to accomplish what i think must be a pretty common use case.  those of us with plenty of experience will have no trouble coming up with a multiple workable ways to make our configurations dynamic. but some are bound not to work as intended. and it would be nice to give some help to developers who may need it so they aren't spinning their wheels (and bloating their list of dependencies) looking for complicated solutions to simple problems.michael-ciniawsky's suggestion is really nice and clean. and being able to troubleshoot misbehaving plugins is a decent argument for not allowing falsy values.  i would suggest that maybe a pattern along those lines be used in some common examples. but any benefits gained by not allowing non-plugin values in the array are lost when using such a pattern.i'll throw out another idea:  add a symbol as sentinel value to represent no-op behavior instead of undefined or null.  something like `webpack.none = symbol('none');`  then you don't have to worry about it accidentally being returned from a malfunctioning plugin.  such a value could be used in several other places as well.  sure. you can do the same thing any number of other ways. but the more you can standardize patterns for using webpack. the less time developers new to webpack will spend trying to invent their own solutions. a portion of which you'll end up trying to help troubleshoot.,positive
mapbox/mapbox-sdk-js,uglify,2017-06-06T22:06:17Z,npm uglifyjs -> uglify-js,neutral
stealjs/steal,sauce,2017-11-07T13:18:56Z,failing because saucelabs is down. not your change. going to make an executive decision to merge this typo fix anyways,negative
clappr/clappr,coveralls,2016-02-03T19:25:49Z,coverage dropped with config changes. that's one reason i stopped using coveralls. :wink:,neutral
prebid/Prebid.js,standard,2018-10-17T10:15:07Z,linter is failing using the standard github inline editor.  leaving this as is for the time being .,negative
prebid/Prebid.js,standard,2018-10-23T14:21:45Z,add custom targeting key-vals without using `pbjs.biddersettings`?. ## type of issuequestion## descriptionwe'd like to add custom key/val pairs onto the gam/dfp request. but it appears that the only way to do this is use `pbjs.biddersettings.standard.adservertargeting` which prevents any of the standard `hb_` ones being added. is there a way to keep those and add on any new ones we want on there?we'll be coming to use deals soon. so if we start to manage all of the targeting with `pbjs.biddersettings`. will any bidders' deal ids also not be added automatically. so we'd have to start getting those manually and adding them ourselves? <- i cannot initially see how this would be done. as `pbjs.biddersettings` seems to not work after the auction has started. so custom targeting needs to be set before any responses are received.,neutral
prebid/Prebid.js,standard,2018-10-24T14:02:45Z,thanks for confirming that is the case. we'd definitely benefit from having an `adservertargetingadditions` feature so will open a pr if we build it. cc: samwhitecoull,positive
prebid/Prebid.js,eslint,2018-10-01T19:23:14Z,hello harpere .i have resolved conflicts and eslint suggestions.i think we are good to go.,positive
prebid/Prebid.js,eslint,2018-10-17T13:31:32Z,naegelin the prebid.js project uses the `gulp-eslint` plugin to maintain the styling rules for the project.  can you please make the necessary updates in your file to conform to the linting rules?  you can locally check the linting status/errors by running `gulp lint` in your prebid.js project.,neutral
MindTouch/martian,eslint,2017-03-17T22:14:22Z,enable first go at release automation. reviewed by jeremyrh - add eslint rule for jsdoc validation- un-ignore yarn.lock- add a shell script to do some basic release preparation- enable cjs bundle building through rollup- change travis.yml to use yarn rather than npm- bring in new mindtouch-http.js dependency,neutral
DefinitelyTyped/tsd,mocha,2014-11-17T12:29:07Z,command not found: install. simple install command does not work as expected:`tsd install mocha chai` produces error `command not found: install`.,neutral
DefinitelyTyped/tsd,mocha,2014-11-17T14:14:45Z,nice - i'm planning to give it a whirl later this week either way.  i've been moving to using npm. bower etc in my projects and it kind of "fits" to move to tsd in line with that i reckon.  (json config ftw!),positive
canjs/canjs,sauce,2017-07-11T20:49:40Z,it might be easier to set the environment variable in the `.travis.yml` file so that test-saucelabs doesn't have to know about it.,neutral
canjs/canjs,sauce,2017-08-09T17:34:25Z,do not merge - testing saucelab test changes. this should fail when ie 9 passes 0 out of 0 tests.,negative
tjunnone/npm-check-updates,eslint,2016-06-08T16:34:47Z,i presumed from your comment above that you were going to fix jsonall. but it still doesn't work and i can't see any issue for it,neutral
tjunnone/npm-check-updates,eslint,2016-06-08T17:20:59Z,thank you! :),positive
babel/babylon,eslint,2017-08-27T19:28:02Z,typescript: modifiers not included in range of tsparameterproperty. <!--- provide a general summary of the issue in the title above -->### input code<!--- if you're describing a bug. please let us know which sample code reproduces your problem -->example of existing fixture in babylon tests:```tsclass c {    constructor(        readonly r.        public pu: number.        protected po?.        private pi?: number.        public readonly pur.        // also works on assignmentpattern        readonly x = 0.        public y?: number = 0) {}}```the typescript plugin for babylon currently does not include the modifiers (readonly. public etc) within the location data for the relevant `tsparameterproperty` node.this is not the case in the typescript compiler for the equivalent `parameter` node. and also not in `typescript-eslint-parser`.andy-ms if you agree that this should be changed. i can work on this.,neutral
babel/babylon,eslint,2017-09-03T15:09:20Z,excuse the really. really long comment. but i just feel some further background to the status quo would be useful:`typescript-eslint-parser` has been around for quite a long time and effectively was the first tool to try and define typescript nodes in an estree (thejameskyle you wrote eslint a few times. where i think you meant estree) compliant way.naturally. there is a lot of syntax which does not have precedent in estree. but there was. however. a lot of identical syntax in flow already and so its estree-like node structure made a lot of sense to use as a template. in cases where there was no precedent in estree or flow. we simply had to create something from scratch which was estree-like.fast forward a bit and i used `typescript-eslint-parser` to allow for typescript support to be added to prettier. it is naturally currently built to look for and reprint the typescript nodes set by `typescript-eslint-parser`. (azz would be a good person to comment on the pros and cons of supporting typescript and flow nodes in the same codebase as he has done far more work on the actual printing of nodes than i have.)fast forward even further and the typescript team decided to dedicate time and energy into parsing typescript code directly with babylon. andy has done a great job on this. of course. it made sense for the couple of years of existing precedent from `typescript-eslint-parser` not to be ignored during this process. and i was keen to work with andy to align on the ast that babylon and `typescript-eslint-parser` produce and we are now very close.my long-term hope is that this effort will allow for `typescript-eslint-parser` to _use_ babylon behind the scenes. instead of parsing with the typescript compiler and converting the ast itself and that babylon would then power the typescript parsing in prettier as well. it will involve throwing a lot of my own code away. but i am committed to avoiding competing standards wherever possible and i think that is the best way.the reason for providing this backstory is just to illustrate that this pr has a big impact on all of that alignment work and future integration work into prettier and eslint plugins. so it would be great to take some time to discuss it.---------> we don't have a lot of opportunities to make changes to the babylon ast. we should not be changing things frequently.i definitely agree. and we should not rush the changes through either.> seeing that there is no shared standard between the two grammars. and no guarantee that both will remain aligned. it does not make sense to try uniting the two grammars.> the typeannotation node in eslint is hardly a shared standardi feel like this is a bit of a chicken and egg situation - before this very recent effort by andy and me. had anybody actually taken the time to try and identify commonalities in syntax across the full "languages"? that initial extension to estree was very small by design. because there was not enough information to hand to standardise more things. i believe we now have that information and some buy-in from flow and typescript team members could actually make standardisation of overlapping syntax a possibility.> type annotations within flow and typescript have different behavior. i need to mimic that behavior in tooling that i am building. which i'd get into further. but based on previous interactions with typescript team members i'm not going to.i am a bit confused by this. as you are currently not interacting with any typescript team members on this pr and i don't believe you and i have ever directly interacted before. i think requesting specifics about the issues you are facing is a reasonable thing to do on an important pr like this. there may be other solutions to the problem. such as the one suggested by danez.you are a far more important member/contributor to the babel ecosystem than i am. and i have huge respect for the work you do. i am not trying to hold up your pr for the sake of it. i am just providing all the context i can (which you would not necessarily be expected to know about) and trying to help ensure we consider all the options.all of the tools (typescript-eslint-parser. eslint plugins. prettier etc) _can_ naturally all be updated for the right solution. i am not at all against making further changes. but so far all the context you have provided is that you are building a tool and that you would like this to be the solution to some issues you are facing. it would be great to get a bit more info from you.,positive
babel/babylon,eslint,2017-09-03T23:16:03Z,for what it's worth. as an ast consumer. so far i have preferred it when nodes are shared between flow and typescript. for the most part. once a typescript ast has been converted via `typescript-eslint-parser`. we can print it in prettier with the same code path as flow. there are very few cases (only one from a quick search. relating to directives) where we've had to check if the name of the parser is "typescript" to make a decision on how to re-print the ast.in contrast. if new ast nodes are introduced. we'd have to add extra `||`s or `case`s that line up with the existing flow nodes. and we'd inevitably miss a few cases in the future.in a sense i look at the node re-use as a form of polymorphism. if it is possible to provide the context required to perform edge-case decisions. why not go for that option?> no. we should not require context outside of an individual node or its parent to determine what the node is.`node.type` tells you what the node is. a `typeannotation` is a type annotation. what you're after is what _language_ the node comes from. which seems outside the scope of a node to provide.sometimes you need more than the node and its parent. you might need to know the source type. if the current scope is strict mode. even in some cases you might need the extension (typescript acts differently depending on `.ts` and `.d.ts`).,neutral
Automattic/mongoose,mocha,2014-08-27T15:55:30Z,try / catches are required for async mocha tests.,neutral
Automattic/mongoose,mocha,2014-08-27T17:49:41Z,thank you for the merge.mocha can't get at thrown exceptions from within an async callback. the exception trickles up and gets reported as an uncaught exception. the tests still exit with 1. but its outside of mocha reporting.,negative
pouchdb/pouchdb,eslint,2017-01-02T02:08:20Z,weird. eslint error and i can't reproduce locally :(,negative
pouchdb/pouchdb,selenium,2014-10-27T02:54:43Z,(#2926) - remove vendor from cordova app. i have no idea why i did this. but it's definitely not necessary to include the selenium jar within the cordova app. this balloons the app's size unnecessarily. and the scripts still run fine without it.,negative
pouchdb/pouchdb,jshint,2014-10-15T13:56:41Z,ok didnt get agreement with this,neutral
pouchdb/pouchdb,jshint,2014-10-19T04:08:04Z,(#2853) - parse uri for user/password. yeah. the parseuri function just wasn't decoding the username/password like it should. i also went ahead and put it in its own function.incidentally. there was a `jshint: maxlen:false` what was allowing us to become sloppy in `http.js`. fixed that too.,negative
pouchdb/pouchdb,jshint,2014-10-20T23:57:42Z,good point; i'll put this in the unit tests next time. forgot that we now have both unit and integration tests.,positive
pouchdb/pouchdb,jshint,2014-11-06T03:36:08Z,sorry about that. should add a jshint rule so we can remember to be consistent.,neutral
pouchdb/pouchdb,istanbul,2016-07-02T07:04:09Z,(#5426) - remove dead code. improve coverage. trying to take some time to clean up technical debt. places where i added `istanbul ignore`s are where i considered it too difficult or unimportant to test. places where i removed the `ignore`s are where i added tests. at least in node.,negative
pouchdb/pouchdb,istanbul,2016-07-02T09:04:32Z,nice changes. but looks like the `websql` test is a valid failure,negative
pouchdb/pouchdb,istanbul,2016-07-03T02:39:37Z,yup. it was a test error due to `sqlite3` throwing an error when trying to open a db on an invalid path. the test didn't make much sense for `node-websql` (and doesn't seem fixable without a pr to `sqlite3`). so i just skipped it for `node-websql`. passing now.,negative
pouchdb/pouchdb,istanbul,2016-07-03T09:20:43Z,awesome. thanks,positive
vlucas/frisby,jasmine,2014-11-09T01:00:39Z,gaving: yep :d `frisby.create()` creates a new suite (`describe`). nesting suites inside specs (`it`) does not work in jasmine. afaik. so instead you should do: ``` jsdescribe "test". ->    frisby.create('test in test')      .get('      .expectstatus(404)      .toss()```or alternatively as many suites as you prefer.stumbled across the same issue in `afterjson()` calls. which (in my fork) end up being called inside a spec where i am unable to create further suites. decided to switch to vows.js eventually for that reason.,neutral
vlucas/frisby,jasmine,2014-11-12T17:46:28Z,yeah. i saw that - just throwing out some options. it does seem like a tool like this should have the ability to run in parallel though.,neutral
angular/protractor,jasmine,2017-01-14T15:35:25Z,jasmine-reporters. i everybody. i am using the following configuration jasmine.getenv().addreporter(    new reporters.junitxmlreporter('../reports/junit-reports'. true. true));the problem is that the xml result is always generated on the **root file**. i want to generate the xml reports on the reports folder.,positive
angular/protractor,jasmine,2017-01-23T23:10:44Z,need to update initialization of jasminewd,neutral
angular/protractor,jasmine,2017-01-25T11:52:21Z,i'd like to open this ticket again. the reason is that we saw end to end tests failing today for the following reason:1) go to a website with angular2) do some stuff3) go to another website with angular4) this other website was showing an error page which does not have angular on it5) the whole of our test suite exited without attempting the remaining teststhis kind of error should not tear down the whole node process. it should fail the test for the reason that window.angular is undefined. and then carry on fresh with the next test.we have several custom jasmine reporters that capture things like browser logs. screenshots. browsermob proxy logs. these reporters. if they had a chance to run. would have shown us that the site was showing an error page. so we would have known exactly what the problem was from our build artifacts. but instead the whole node process was killed. meaning our reporters didn't run.,negative
angular/protractor,selenium,2016-01-14T07:19:51Z,install jdk works for me,neutral
angular/protractor,selenium,2016-01-22T02:32:37Z,per the discussion on selenium. this looks like something to do with how angular2 is patching eventtargets.,neutral
angular/protractor,selenium,2016-01-22T18:18:50Z,looks like a problem with your connection to the selenium server. can you share your configuration file and any relevant logs from your selenium server?,neutral
angular/protractor,selenium,2016-01-22T18:22:30Z,i agree with nick. this feels like a test setup issue. having many connections to one selenium server sounds like it may be causing the issue. i think you need to look at the logs for your selenium server.i'm unclear what the `done` changes have to do with  your issue. but i suspect it's a red herring.i'm going to close this issue because it is more of a setup/support problem than a reproducible bug that we can track here.,negative
angular/protractor,selenium,2016-01-22T19:06:44Z,after taking another look at `remote.seleniumserver`. what if instead we add a `localseleniumstandaloneopts` object to the config. and just pass that directly to the `seleniumserver` constructor? we can set `config.localseleniumstandaloneopts.port = config.seleniumport` and `config.localseleniumstandaloneopts.args = config.seleniumargs` for backwards compatibility. then you can use `config.localseleniumstandaloneopts.loopback` to do this.,neutral
angular/protractor,selenium,2016-01-22T19:32:02Z,browserstack support is now added. and it's possible to use others via `seleniumaddress`. i'd be happy to take a look at another specific pr. but for the sake of cleanup i'm going to close this general one.,positive
angular/protractor,selenium,2016-01-23T20:39:58Z,juliemr sounds like a good idea. i just added changes to enable this. i used your suggested naming and the backward compatible fallback for `seleniumargs` and `seleniumport`.,positive
angular/protractor,selenium,2016-01-26T11:30:35Z,hi sjelin  was the selenium issue ever sorted for drag and drop i've been trying the past few hours to get something working but so far no luck.,negative
angular/protractor,selenium,2016-01-27T02:16:24Z,feat(attachsession): attach protractor to existing webdriver session. attaching an existing selenium browser session to protractor rather than always creating new one. the session can be passed into the config file as a string via the `sessionid`.,neutral
angular/protractor,selenium,2016-01-27T17:35:21Z,added some review comments!,neutral
angular/protractor,selenium,2016-01-28T17:49:07Z,see comments above. thanks!,positive
angular/protractor,selenium,2016-01-28T19:27:43Z,lgtm after the two cleanup comments,neutral
angular/protractor,selenium,2016-01-28T22:42:01Z,alecxe ah :facepalm:. makes complete sense. i was hung up on the dev tools implementation and not the selenium one.,neutral
angular/protractor,selenium,2016-01-28T23:25:51Z,closed with 3f3805f.,neutral
angular/protractor,selenium,2016-01-29T01:04:52Z,local webdriver-manager update required for npm test. in order to run `npm test`. the local package of `webdriver-manager` needs to be updated to download `selenium/chromedriver` for the direct connect test. a possible solution: `test.js` should call the local `webdriver-manager` to update itself right before running the test.,neutral
angular/protractor,selenium,2016-01-29T01:22:40Z,or it could be added to the pretest script in the `package.json`...,neutral
angular/protractor,selenium,2016-01-29T04:09:23Z,i usually do this in `test` or `pretest`. since there's no noticeable slowdown if the binaries are already there and it's less overhead for contributors to my projects. i'm :+1: on doing it in `pretest` unless there's a reason that is a bad thing.,negative
angular/protractor,selenium,2016-01-29T20:03:19Z,in addition. lodash and marked are also required for the unit tests. i'll see if i can `npm install` the `website/package.json` in the pretest.,neutral
angular/protractor,selenium,2016-01-29T22:42:44Z,why not just add them as devdependencies?,neutral
angular/protractor,selenium,2016-01-29T23:57:00Z,as per discussion offline. devdependencies is still the right idea,neutral
angular/protractor,selenium,2016-02-02T22:50:12Z,hi.    i am able to run protractor test against ios simulator and ios device. but i have issues with identifying invisible elements i.e the element is false when i check xpath in appium inspector. can protractor coders help if you have any api to identify invisible elements. can i use something like 'mobile: tap' in protractor. it worked with 'mobile: tap' with java script code in selenium+ appium+ java framework. it will be great if you can provide information whether protractor has support for this. also can you please let me know if protractor has full support for native app testing both on simulator and device,positive
angular/protractor,selenium,2016-02-03T03:21:24Z,i need to change this... somehow my commit did not have the changes sjelin and i discussed.,neutral
angular/protractor,selenium,2016-02-03T19:13:17Z,does protractor have support to tap or click on invisible elements on native apps?. hi. i am able to run protractor test against ios simulator and ios device on native app. but i have issues with identifying invisible elements i.e the element is false when i check xpath in appium inspector. can protractor coders help if you have any api to identify invisible elements. can i use something like 'mobile: tap' in protractor. it worked with 'mobile: tap' with java  code in selenium+ appium+ java framework. it will be great if you can provide information whether protractor has support for this. also can you please let me know if protractor has full support for native app testing both on simulator and device,positive
angular/protractor,selenium,2016-02-08T10:39:12Z,i've been hurt by this too. another place it behaves funny is that one can't make a spec (it()) wait for anything async in the beforeeach. which used to be possible by either declaring beforeeach to take a done callback. or by returning a promise from beforeeach. it is intermingled with so many other oddities that i just assumed my setup was completely broken (an example is buttons that element-finders mislocate and when invoking the click i get the infamous would-hit-another-element exception -- injecting javascript asking the dom for the location of the element confirms that selenium/protractor aren't doing it right.),negative
angular/protractor,sauce,2014-11-19T00:56:43Z,protractor hangs (multicapabilities/sauce) when "test did not see a new command for n seconds.". sometimes saucelabs just seems to take forever. presumably under load. if it times out with the above error message (witnessed in the saucelabs web console). then protractor just hangs and never completes the multicapabilities run.it would be great to have some way of getting this condition reported to the console for the platform(s) on which it happened (along with the rest of the console output for other platforms. that it hangs makes it very difficult to connect to other automation systems that rely on it to come to completion.,neutral
appium/appium-uiautomator2-driver,eslint,2017-08-03T17:17:42Z,update eslint,neutral
cozy/cozy-ui,standard,2018-02-02T08:30:07Z,> je peux me tromper. mais je ne vois aucune raison de passer à ce composant des informations qui ne lui sont pas nécessaires. qu'en pensez-vous ?en effet. je pense même que quelque chose de plus neutre comme `text` ou `letters` serait mieux qu'`initials`. on pourrait très bien ne passer qu'une seule lettre (pour une entreprise par exemple).> c'est pas le parent qui fournit la box dans laquelle doit s'inscrire l'avatar ?je dirais que non. d'une part on va devoir adapter la taille du texte a celui de la box. d'autre part ca permet de définir un jeu de tailles standards au sein de cozy-ui. plutôt que de laisser chaque projet faire sa variante maison. un truc comme `size={small|medium\large}` me semble très bien.,negative
uber/tchannel-node,standard,2016-08-16T00:54:23Z,that doesn't actually work due to cross-language compatibility and init headers.an ip is expected. we could resolve the hostname for you... but you might as well just give us an ip.however. tcurl should support this.,positive
webpack/webpack-dev-server,eslint,2016-11-07T21:01:35Z,yes. if there is an error for the eslint and i fix that. it says 'no chnges' but the error is still reported.,negative
balderdashy/sails,mocha,2014-04-15T22:20:33Z,generators ftw!,neutral
balderdashy/sails,mocha,2014-04-28T14:03:16Z,answered. more than 6 months old~,neutral
balderdashy/sails,mocha,2014-05-07T15:48:34Z,noted~,neutral
mapbox/node-sqlite3,mocha,2014-05-29T04:00:18Z,database#get callback get passed only error arguement. according to api docs. the callback function for database#get has an arity of 2. and normally should always be called with 2 arguments (err. res) even if res is undefined ( no row matching the sql query). but actually this test fail``` javascriptvar db = litesql.db(":memory:");db.serialize(function() {    db.run('create table todos(task text)');    db.get('select * from todos'. function() {        assert.equal(arguments.length. 2);    })})```this could lead to extraneous bugs when using database#get inside async utility function that relay on argument passing ( like async#waterfall )i was having hard time to undestand why my mocha tests failed and that was because of this; observe the code below ``` javascriptasync.waterfall([   function(next) {      db.get('select * from todos where id=1'. next);   }.   function(res. next) {      if(!res) console.log('no task');      ....   }]. function(err) { ... } );```above the second function is expecting a result argument. because database#get should call next with (err. res) (the err argument is stripped and forwarded directly to the final callback). but. because db.get call the next callback with only 1 argument (err=null); the second function get passed only one argument (next) instead of 2 (res. next),negative
mapbox/node-sqlite3,coveralls,2016-09-06T23:59:28Z,you are drunk coveralls :d,neutral
cerebral/cerebral,eslint,2018-03-28T16:37:17Z,chore: clean up eslint configuration,negative
rooseveltframework/roosevelt,eslint,2017-10-30T16:50:16Z,config auditor will complain about missing npm scripts that we should probably consider optional. e.g. remove the `eslint`. `stylelint`. or `lint` scripts. and the config auditor will complain that they are missing.strictly speaking. those (and possibly other things?) should be considered optional.there is also probably a class of optional *but recommended* things too. i can't think of any right now. but in such cases. i would degrade this error to a warning. and explicitly note that roosevelt recommends that it be present even though it is optional.basically two extra layers: a class of optional configs that roosevelt shows a warning for when it's missing. and a class of optional configs that roosevelt will ignore when it's missing without showing an error or a warning.the whole config auditor needs to be audited to identify configs which belong on these reduced levels of urgency.,negative
keystonejs/keystone,eslint,2016-02-09T04:29:44Z,minimatch should be added to the devdependencies? i get some eslint errors after `npm install minimatch` in the directory,neutral
keystonejs/keystone,eslint,2016-02-09T23:11:08Z,added eslint rule eqeqeq. as per issue review .eslintrc #1797,neutral
keystonejs/keystone,eslint,2016-02-10T03:29:14Z,added eslint rule no-undef. as per issue review .eslintrc #1797,neutral
keystonejs/keystone,eslint,2016-02-10T08:30:39Z,thanks lennyboyatzis!,positive
keystonejs/keystone,eslint,2016-02-11T02:02:57Z,wow - some bugs caught in this one! thanks lennyboyatzis,positive
keystonejs/keystone,eslint,2016-02-11T03:36:41Z,added eslint rule - guard-for-in. as per issue review .eslintrc #1797,neutral
keystonejs/keystone,eslint,2016-02-11T04:27:13Z,added eslint rule key-spacing. as per issue review .eslintrc #1797,neutral
keystonejs/keystone,eslint,2016-02-11T04:34:17Z,cheers,positive
keystonejs/keystone,eslint,2016-02-16T02:47:30Z,added eslint rule no unneeded ternary. as per issue review .eslintrc #1797,neutral
keystonejs/keystone,eslint,2016-02-16T03:34:27Z,thanks for the work on this lennyboyatzis but after reviewing. a lot of these are important and i'm concerned including the rule in our linter config will discourage valid use of ternary statements to reduce conditions to simple values.on that basis i'm rolling back my recommendation we add this rule. and will update #1797 accordingly.,negative
keystonejs/keystone,eslint,2016-02-17T01:58:40Z,added eslint rule operator-linebreak. as per review .eslintrc #1797,neutral
keystonejs/keystone,eslint,2016-02-17T23:46:40Z,added eslint rule space-in-parens. as per issue review .eslintrc #1797,neutral
keystonejs/keystone,eslint,2016-03-05T22:51:57Z,added eslint rule new cap. progress commitas per review .eslintrc #1797,neutral
keystonejs/keystone,eslint,2016-03-10T06:13:22Z,added eslint rule - prefer-const. as per issue review .eslintrc #1797,neutral
keystonejs/keystone,sauce,2017-01-07T14:22:14Z,so. i've done some reading and the encrypted variable in `travis.yml` will override the one set in the web interface. therefore there are no security concerns about people gaining access to our saucelabs account from malicious external prs.,negative
doofinder/js-doofinder,mocha,2017-02-06T16:03:55Z,write some tests for suggestions widget. like for results widgets. write some tests for the suggestion list widget. using mocha and jsdom,neutral
seek-oss/seek-style-guide,eslint,2017-11-20T01:12:44Z,style(eslint): disable eslint-plugin-react's jsx-no-bind rule. fixes #375,neutral
rooseveltframework/roosevelt-less,standard,2018-09-06T15:45:36Z,updates for eslint and standard. this pull request:- updates eslint- updates lint-staged- updates standard- lints against standard,neutral
rwjblue/ember-template-lint,eslint,2018-09-07T02:56:07Z,> it seems print-failing and pending does not take account of the test files (with tagged templates)?definitely something we should address. first we need that eslint-plugin-hbs a valid module for the file. then we should we arbitrarily assume `.hbs` vs `.js`.,neutral
rwjblue/ember-template-lint,eslint,2018-09-17T19:18:06Z,so there is no way to configure a rule so that it generates a warning instead of an error?i like the sound of the process recommended above in general. but for a lonely team of one there is often little value to be gained from changing trivial things like where to break lines when writing component parameters. so if the tool is going to be so draconian that all i can do is turn a rule on or off i'm often going to have to forego most of the benefits of the linting and just turn it off. :( i want to conform to recommended guidelines. but unless there's some automatic fixing process there's no way i'll be able to justify to my employer that i spent a day or two reformatting code / configuring linter rules. plus it is really annoying to have a ci build fail after 20min just because of a linter violation even though the code would have otherwise built and passed its test suite just fine.,negative
yeoman/generator-karma,karma,2014-01-18T09:11:31Z,thanks daftmonk!,positive
haraka/Haraka,codecov,2016-10-03T19:58:43Z,move noops from #1629 to this pr. fixes # .changes proposed in this pull request:- use updated codecov syntax- eslint: add missing before/after settings to keyword-spacing- typo fix in config file doc- lint updates in bin/*,neutral
bitpay/bitcore,mocha,2015-02-12T15:54:04Z,add inspect method to opcode.. also added test for it. which is passing locally for me with mocha.,neutral
slackapi/hubot-slack,codecov,2017-10-17T02:04:33Z,overriding the codecov/patch check. it shows 50% of diff hit. but there isn't a great way to increase that. its still an overall improvement in coverage.,positive
electrode-io/electrode,mocha,2017-10-19T14:45:57Z,chai as promised. this gives the ability to handle rejected promises in mocha with chai-as-promised library.,positive
electrode-io/electrode,eslint,2018-01-03T22:10:05Z,redo eslintrc files,neutral
admc/wd,selenium,2015-04-21T13:37:06Z,the init will fail.,negative
admc/wd,mocha,2014-10-10T08:29:40Z,response status code::staleelementreference(10) && response status code::nosuchelement(7). hi. this may be issue related to the chromewebdriver itself as some research in google shows but i am seeking help here too... may be someone knows of a workaround. specially when using **wd**?having in mocha test:```...browser .get('some url') .elementbycss('#myid') .click() .eval("window.location.href")  .should.become('some url/some_path') .notify(done);...```results in exception:`error: [element.click()] error response status: 10. staleelementreference - an element command failed because the referenced element is no longer attached to the dom. selenium error: stale element reference: element is not attached to the page document`some hints show that the dom is destroyed when `.click()` is invoked thus the reference is lost and becomes stale. suggested is that the code should wait or make sure the element exists. something like:```...browser .get('some url') .waitforelementbycss(''#myid') .elementbycss('#myid') .click() .eval("window.location.href")  .should.become('some url/some_path') .notify(done);...```which again results in:`error: [elementbycss("'#myid")] error response status: 7. . nosuchelement - an element could not be located on the page using the given search parameters. selenium error: no such element`so how exactly to implement such behavior?this is something travail. clicking a link and running eval on the resulted page. so it should work out of the box but i have a feeling i miss something here!?just to mention. that both above snippets work when using **phantomjs** as browser. so it is something related to the chromedriver high possibly?any help will be appreciated!,negative
admc/wd,mocha,2014-10-10T10:28:16Z,the element is not on your page. the error message is coming from selenium. you can use source().print() to make sure.,neutral
admc/wd,mocha,2014-10-10T10:57:00Z,sebv the element is there (:. i proved it via source().print() as suggested.this test is part of a suite which have several steps to test url endpoints. i noticed that the first test works and then the exception occurs.should the instance used have to be reset somehow?looks like a cache related issue to me but not sure...??,negative
mapbox/mapbox-gl-draw,eslint,2017-12-04T04:48:19Z,remove console log and add eslint rule to prevent repeat. very small change to add an eslint rule to catch leftover `console.log`s. also remove a `console.log` in a previous pr.,neutral
angular-ui/bootstrap,karma,2014-02-15T21:04:16Z,when submitting a pr you need to update (or add if needed) the tests and then run karma to check that everything is ok. the build did break.,neutral
angular-ui/bootstrap,karma,2014-03-04T19:09:36Z,fix(karma): exclude demo files. i am working on #1884 and well. seems to be doable. but karma also adds the demo files and it start complaining if i change the functions to modules. since we are not doing anything karma-related with the demos. the first step would be excluding them.with this done. i could work on improving the demos.i think that the globbing is good enough (i tested it. it seems to work no problem).,positive
mcollina/aedes,standard,2016-05-12T15:32:23Z,i'm using the standard mqtt client(mqtt.js) and no significant changes in memory,neutral
pnpm/pnpm,standard,2017-08-04T17:30:31Z,thanks for the detailed investigation!the way it should work is when the tarball url has a standard form `<registry>/<package-name>/-...` then it is not saved in the shrinkwrap file (i mean the tarball url).i'll try to investigate it tonight.,positive
pnpm/pnpm,eslint,2017-06-16T21:08:24Z,frameworks/toolings don't resolve dependencies the way node does. we have a lot of issues that happen because toolings like webpack. browserify and others don't resolve dependencies the way node does. this is something that pnpm will never fix and the toolings should fix. and they should fix it not because of pnpm but because they should be node-compatible.open issues we currently have because of this:- [ ] webpack: #740- [x] browserify: #795- [x] angular (because of webpack): #769- [x] cra (because of webpack configuration?): #581- [ ] eslint (actually just a plugin of it but a widely used one): #739- [x] jest: #1007- [ ] maybe karma: #720help is highly appreciated here. if you have friends in those communities or are familiar with their codebase please try to make this happen faster.also please reference this issue to make tracking of progress easier,neutral
pnpm/pnpm,eslint,2017-06-19T08:10:04Z,if you use `mocha` in your typescript project. your project has to depend on `types/mocha` as well i believe. and in that case it will be in `node_modules/types/mocha`,neutral
pnpm/pnpm,eslint,2017-06-20T21:00:09Z,jbergstroem you have to register it via passing it to plugins. and then you can just pass the name to frameworks```jsframeworks: ['tap'].plugins: [require('karma-tap')].```,neutral
pnpm/pnpm,eslint,2017-06-20T21:09:33Z,zkochan: yeah. i did -- thanks for taking the time to follow up though. i'm kind of walking through the webpack/babel/karma stack now seeing how they all seem to enjoy the same inclusion pattern.,positive
pnpm/pnpm,eslint,2017-06-20T21:12:45Z,so it worked. right?,neutral
pnpm/pnpm,eslint,2017-06-20T22:00:28Z,> zkochan said:> so it worked. right?yes. it worked -- sorry should've clarified.,neutral
pnpm/pnpm,eslint,2017-06-21T08:36:22Z,i just discovered yesterday and i really believe in the idea. i would really like to help with this as obviously it's a major roadblock. where to start?,negative
pnpm/pnpm,eslint,2017-06-21T08:41:55Z,it seems to work fine with latest webpack. so the react stack and angular2 work fine. (they did not a week or so ago).so the eslint #739 issue and the browserify one #795 are next in priority.,positive
angular/angular-cli,uglify,2018-08-02T14:36:59Z,change the cache dir of build-optimizer and uglifyjs-webpack-plugin. ```- [ ] bug report -> please search issues before submitting- [x] feature request```### desired functionalityi need to change the 'build-optimizer' and 'uglifyjs-webpack-plugin' cache directory to another location. outside the 'node_modules'. i will store the cache for the other builds. done in the ci.is this possible?,neutral
angular/angular-cli,uglify,2018-08-04T11:40:53Z,this isn't a setting we expose currently. no.,neutral
bbc/bbc-a11y,karma,2016-12-07T16:25:36Z,i had the same issue and `sudo npm install -g karma-cli` worked for me,neutral
onsip/SIP.js,karma,2018-07-12T16:02:52Z,that's odd. `npm run buildandtest` works fine both on my laptop and on travis. is chrome on your path? you can define a chrome_bin environment variable to point karma to a specific chrome installation.,neutral
gatsbyjs/gatsby,eslint,2016-10-14T17:14:15Z,xo is just an eslint config at the end ;),neutral
mostjs/core,uglify,2017-12-01T13:28:38Z,having this in top level scope:```jsdisposeallerror.prototype = object.create(error.prototype)```will prevent tree-shaking of `disposeallerror` in most cases. because assignments like this are treated as effectful. especially considering the fact that `object.create` may not be whitelisted as "pure" in dead code eliminators like uglifyjs (it might be. aint sure about this. would have to check).,negative
webdriverio/wdio-junit-reporter,mocha,2018-01-26T18:31:20Z,sherlock1982 any updates?,neutral
pghalliday/grunt-mocha-test,mocha,2014-03-14T20:58:27Z,the correct method is:```    mochatest: {      test: {        options: {          reporter: 'tap'.          capturefile: './tests.tap'        }.        src: ['test/**/*.js']      }```note that `capturefile` is specified under `options`. i tried to implement with `dest` once upon a time but it doesn't work the way you would expect when you have multiple `src` entries (i forget the details now though),neutral
pghalliday/grunt-mocha-test,mocha,2014-03-17T08:56:21Z,closing in the hope that you found the asynchronous issue that caused this,positive
pghalliday/grunt-mocha-test,mocha,2014-04-08T16:00:25Z,environment variables not honored?. i noticed that grunt-env does not work with the grunt-mocha-test plugin. it would be nice to use environment variables in a way that is compatible with grunt env so we can set the environment in gruntfile.js.,neutral
pghalliday/grunt-mocha-test,mocha,2014-04-10T22:24:14Z,ok. to be honest i'm not sure it's a problem with this plugin.it seems that your call to `helpers.testdirectory` changes the current directory to `test/temp`. thus when the watch task starts the files you want to watch are not at the path you think they are. the solution is to restore the original path after each test.``` javascriptvar originalcwd = process.cwd();...    aftereach(function () {        process.chdir(originalcwd);    });```i have submitted a pull request to your example with the change so you can verify it.imho. i don't think it should be up to `grunt-mocha-test` to clean up stuff it didn't do after the tests so this seems the most correct solution,neutral
pghalliday/grunt-mocha-test,mocha,2014-04-10T23:05:21Z,seems to work as far as i can tell - i just added a test case to prove it (see `test/scenarios/gruntenvintegration`). maybe you could elaborate with an example of what doesn't work for you.,neutral
npm/npm,standard,2016-04-14T08:20:13Z,wip: (re)enable coverage & newest standard. this turns on coverage again (only now all of the tests pass. with one small tweak). and also cleans up the code to pass the latest major of tap.also. and this is unrelated. it fixes the fact that a test was trying to set the prefix for a global install test and not doing so successfully.not ready to land just yet. and mostly exists so that i can see how it looks in appveyor.,neutral
npm/npm,standard,2016-04-15T21:43:23Z,this has been merged into `iarna/windows-wip`. so i'm closing this.,neutral
npm/npm,standard,2016-04-29T20:59:31Z,given that:- both windows and unix provide standard. console-level tools that support manipulating where `stdout` and `stderr` get routed. and- the current programmatic api for npm is unsupported for use outside of npm's own code basethis isn't something that the team is going to change. having command-level output go to `stdout` and diagnostic output go to `stderr` is a pretty hard convention of npm. and when used as a child process. there are better ways to control where the two kinds of output are sent. thanks for your time!,negative
mishoo/UglifyJS2,uglify,2014-03-17T19:46:36Z,be careful with arithmetics. so there is expression: 'a' + ++n; uglifyjs2 turned it into 'a'+++n which is parsed as 'a'++ + n which obviously doesn't work. please handle this situation more carefully.,neutral
mishoo/UglifyJS2,uglify,2014-03-20T19:33:54Z,without reading through all of the pull requests. i made my own. but i'm impartial as to which one gets merged in. seems like it's been a while since anyone has looked at this. many task runners could really take advantage of this functionality. since uglify is one of the more common build tasks in web development. i recommend this become a priority.let me know how i can help.,negative
mishoo/UglifyJS2,uglify,2014-03-20T20:31:53Z,what we ended up doing is just not calling minify directly from uglify and instead used the custom minify function that is inside this pr.luckily the function is small. so we can maintain it for now. but yes. it would be nice to just have this in the library itself.,positive
mishoo/UglifyJS2,uglify,2014-03-22T23:06:20Z,something else i've had to do is be able to take in a source map as a string (coffeescript generated source map). i've got it on my fork. when i see mishoo spend a bit more time here on uglify. i'll send a pr. he seems to be pretty occupied with angular-kendo (understandably).,negative
mishoo/UglifyJS2,uglify,2014-04-04T00:00:37Z,good idea.  perhaps an external script can read a .js file. find & set configurations. then call uglifyjs?,neutral
jcubic/jquery.terminal,jasmine,2017-11-02T16:47:04Z,the setting numchars was just a hack to make test from jasmine node work becuase there are no css there to make width of the terminal so i've created that option to set number of chars. i didn't know it even work outside of tests.maybe i should not put it in docs.,neutral
krakenjs/adaro,mocha,2015-02-05T20:55:16Z,get rid of grunt and just run mocha,neutral
krakenjs/adaro,mocha,2015-02-05T20:56:04Z,hooray!,neutral
testem/testem,mocha,2013-12-12T16:52:57Z,62445421a3c0f8930627e7d207ec782fe2139810 resolves this issue,positive
testem/testem,mocha,2013-12-12T23:08:57Z,wonderful!,positive
oddbird/true,mocha,2017-05-26T01:56:37Z,resolved by #97,neutral
mochajs/mocha,mocha,2013-12-03T04:33:32Z,invalid return statement found in bin/_mocha,neutral
mochajs/mocha,mocha,2013-12-03T04:38:30Z,sorry for the duplicate.  closing this one out for the pull request.,neutral
mochajs/mocha,mocha,2013-12-04T19:14:26Z,when you call `test()` there's no receiver. so it becomes the global. if you're expecting it to be mocha's test object you'd have to do `test.call(this)`,neutral
mochajs/mocha,mocha,2013-12-06T15:01:08Z,segrey if the timeout is 0. it should never time out. this is both logical and necessary for things like running a debugger and inserting break points.sam-github one interesting discover i made while working mocha through intellij is that there are actually two use cases here when using a timeout of zero.1) test never completes. but it's simply because done() wasn't called. so the node.js script exits because it has nothing to do. mocha completes but the test case does not show up (in fact. the entire test suite it is in doesn't appear) in the results.2) test never completes. but there is still an open socket listening on a connection. so mocha never finishes and is essentially hung. this has the interesting side effect of hanging the test suite so that it never shows the list of tests at all. and i therefore don't know which one has failed.it posits a couple interesting idea:  it could be possible to detect a missed done() call if the node.js process exits (obviously there's no possibility the test could ever complete in this case) and it probably seems logical to declare it doa here.however. as long as the node.js process is still running. i could have a break point running. or it could be a legitimate failure of the test. i don't know that this one is so cut and dry. unless there's a way to tell if a breakpoint is active in the code.,negative
mochajs/mocha,mocha,2013-12-06T16:41:12Z,just for the record. my expected behavior:- node.js process exits without delay- `'should be unfinished'` test is reported as failed- `'should be passed'` test is reported as passedright now mocha reporter doesn't get called from mocha runner (i.e. no `'test end'` event) for both these tests.update:another acceptable fix would be:- node.js process never exits- mocha reporter api is extended with `'test started'` (or something) event to let a custom reporter track running tests.,neutral
mochajs/mocha,mocha,2013-12-06T17:26:37Z,it's not clear why's this change is needed?,neutral
mochajs/mocha,mocha,2013-12-06T17:35:51Z,if you run mocha in the browser today. it will _always_ expose the bdd style interface.for example. in an environment that states: `mocha.setup({ ui: 'tdd' });`. the `describe` and `it` functions will be defined globally in addition to the `suite` and `test` functions.,negative
mochajs/mocha,mocha,2013-12-06T17:43:29Z,mocha does not reset 'this' on every test run. pretty much all unit test frameworks i've used. allow me to run each test in an isolated environment. i was surprised to find out that this is not the case with mocha:```describe('something'. function(){  it('should one'. function(){    this.ok = true;  })  it('should two'. function(){    console.log(this.ok);  })})```the second test prints "true". i expected "undefined".is this how mocha is supposed to work. or did i do something wrong? i cannot find any documentation on what the intended behavior is. if this is the intended behavior. how do i reset 'this'? do i have to manually delete everything?,negative
mochajs/mocha,mocha,2013-12-06T17:59:52Z,ya this is expected. doesn't make much sense to put something on `this` when it's going to be used like a var scoped to its containing function anyway.,neutral
mochajs/mocha,mocha,2013-12-06T18:29:22Z,wait. i don't get your reasoning. in other unit testing frameworks it's quite common to set an instance variable in the setup/beforeeach function. which is then used in the test function. something like this:```class testsuite {   user user;   function setup() {       this.user = createuser();   }   function test_one() {       do_something_with(this.user);   }}```upon running every test function. a new testsuite instance is created. so that all instance variables are empty at the beginning. are you telling me not to do something like this in mocha? are you telling me to keep all my state in local variables within the test function? then how do i share data between the beforeeach and the test function?,negative
mochajs/mocha,mocha,2013-12-06T18:48:33Z,ya that works in mocha. you're saying two different things now. this is how you do in mocha what you have there```describe('something'. function(){  before(function(){    this.name = 'travis';  });  it('should have a name'. function(){    this.name.should.equal('travis');  })})```,neutral
mochajs/mocha,mocha,2013-12-06T19:46:39Z,travisjeffery that is the intent of this pull request. when you specify the "tdd" interface. `describe` should not be defined.,neutral
mochajs/mocha,mocha,2013-12-06T20:16:25Z,no i knew the intent. i thought i was testing it without your change and still seeing that expected behavior. all good now,positive
mochajs/mocha,mocha,2013-12-06T20:26:26Z,ah. i see. thanks for reviewing!,positive
mochajs/mocha,mocha,2013-12-07T21:03:48Z,closing to have the man page generated on install,neutral
mochajs/mocha,mocha,2013-12-08T16:38:52Z,is the idea of this to be able to do ```node test/a-mocha-test.js```and have it run that test?,neutral
mochajs/mocha,mocha,2013-12-09T07:33:01Z,travisjeffery thank you for your comment. the issue seemed to look dead because we were waiting for an opinion from mocha maintainers.i filled a proper bug #1065. so that we can discuss the right problem. which is the bug in mocha and not the fix presented here.,positive
mochajs/mocha,mocha,2013-12-11T18:20:33Z,it sounds like you should have different directories for different types of tests. for example i use gruntjs and i have unit tests and integration tests. they are in separate directories. i can run these all together or independent of each other.,positive
mochajs/mocha,mocha,2013-12-11T19:22:34Z,shanestillwell see the comments between hallas and pwnall above. the problem being addressed here can't be solved simply by grouping of tests in folders; it is more concerned with cases where certain tests cannot be run in certain environments.imagine that your test suite runs in-browser. and one of the integration tests requires local storage. one option is to simply not run the test if `localstorage` is not available. but it is clearer to mark that test as skipped. perhaps with a useful message to the executor like "localstorage not available." in either case. some runtime logic needs to determine whether to run the test.,negative
mochajs/mocha,mocha,2013-12-12T22:35:28Z,xunit reporter should use process.stdout.write instead of console.log. simple change that fixes metaskills/mocha-phantomjs#114 and makes it more consistent with other formatters that should not have formatting like `json`.,neutral
mochajs/mocha,mocha,2013-12-15T17:50:11Z,try running `mocha --compilers coffee:coffee-script-redux/register` or perhaps `mocha --compilers coffee:coffee-script-redux/register -r coffee-script-redux/register`.,neutral
mochajs/mocha,mocha,2013-12-17T17:55:26Z,browser - mocha and should.js. i'm using mocha and should.js in the browser. everything seems to work. but i'm getting:```typeerror: object #<object> has no method 'exist'```when running something like```should.exist(app);```---i can't find any specifics on how to make this work.i understand that i could use `app.should.exist()`. but then the errors shown in the spec runner become less useful.## **example****app.test.js**```describe("app". function() {    var app = window.something;    it("should be defined". function() {        should.exist(app);    });    it("should have a reqres method like a marionette application should". function() {        should.exist(app.reqres);    });});```,negative
mochajs/mocha,mocha,2013-12-17T18:11:34Z,it looks like i was using the wrong tool for the job. i was able to keep the same `should.exist(something);` syntax with [chai](,negative
mochajs/mocha,mocha,2013-12-19T18:51:43Z,i really like the workflow colin-jack describes. any tips on how i'd go about implementing this. having never looked at the mocha codebase before?,neutral
mochajs/mocha,mocha,2013-12-19T18:56:26Z,expose the globals as modules in mocha.. this change allows you to write mocha tests without referencing globals in your test files.this is useful when you want to lint your tests and your linter complains about globals.for example``` jsvar assert = require("assert")var describe = require("mocha/describe")var it = require("mocha/it")describe('array'. function(){  describe('#indexof()'. function(){    it('should return -1 when the value is not present'. function(){      assert.equal(-1. [1.2.3].indexof(5));      assert.equal(-1. [1.2.3].indexof(0));    })  })})```this also has a benefit of being able to write mocha tests in either the bdd or the tdd style by just requiring either `test` or `it` and the command line setting of the interface is irrelevant.,neutral
mochajs/mocha,mocha,2013-12-20T11:33:33Z,> another acceptable fix would be:> > node.js process never exits> mocha reporter api is extended with `'test started'` (or something) event to let a custom reporter track running tests.good news! mocha has a special event called `test` that is fired before each test start.that allowed to make my mocha reporter user-friendly with disabled timeout (`--timeout` is set to a large amount of time as sam-github suggested).at least now this issue doesn't affect me!,negative
mochajs/mocha,mocha,2013-12-20T13:47:47Z,canonicalize objects before stringifying and diffing them. assertion libraries can set the `showdiff` of the thrown error instances to true. which makes mocha serialize the `actual` and `expected` properties. then do a string diff -- effectively a poor man's object diff. however. it produces an unnecessarily big diff when the key definition order in objects are different:``` javascriptvar expect = require('unexpected');describe('the thing'. function () {    it('should dtrt'. function () {        expect({foo: 123. bar: 456. quux: 789}. 'to equal'. {quux: 78. foo: 123. bar: 456});    });});``````  0 passing (5ms)  1 failing  1) the thing should dtrt:      + expected - actual       {      +  "quux": 78.         "foo": 123.      +  "bar": 456      -  "bar": 456.      -  "quux": 789       }```this patch canonicalizes objects before comparing them so the above example produces:```  0 passing (5ms)  1 failing  1) the thing should dtrt:      + expected - actual       {         "bar": 456.         "foo": 123.      +  "quux": 78      -  "quux": 789       }```... which i've found to be a great help when diffing large objects.,neutral
mochajs/mocha,mocha,2013-12-22T05:13:52Z,makes sense. could you write a test though? thanks,positive
mochajs/mocha,mocha,2013-12-23T06:09:03Z,this is about the order that things run rather than scoping.mocha loads the files and then runs the suites. to reliably setup your tests the setup should be within the suite.,neutral
mochajs/mocha,mocha,2013-12-23T13:24:42Z,this breaks work mocha in browser.,neutral
mochajs/mocha,mocha,2013-12-23T17:35:25Z,what's the use case to run xunit in the browser without some way to dump the results to a file like mocha-phantomjs is doing?,neutral
mochajs/mocha,mocha,2013-12-24T01:15:18Z,hmm personally i'd rather export them in mocha than have tons of files,neutral
mochajs/mocha,mocha,2013-12-24T01:15:21Z,otherwise lgtm,neutral
mochajs/mocha,mocha,2013-12-24T01:19:22Z,+1 on exposing them as part of the mocha namespace. -1 on multiple files,neutral
mochajs/mocha,mocha,2013-12-24T01:23:52Z,wow. such files.,positive
mochajs/mocha,mocha,2013-12-24T03:02:08Z,+1 on this happening either as files or in namespace. will take either,neutral
mochajs/mocha,mocha,2013-12-24T03:17:57Z,+1 under mocha's namespaceraynos wanna update your changes?,neutral
mochajs/mocha,mocha,2013-12-24T03:18:52Z,you could just use node_path and give the test modules precedence. or hack require(). definitely not something that should be in mocha imo,neutral
mochajs/mocha,mocha,2013-12-24T03:30:47Z,> you could just use node_path and give the test modules precedencethat's something discouraged afair. jsdevel. but yeah. you can use other dependency injection libraries with mocha or write your own. not suggesting to copy angular decisions (it's turned out to be really bad library after all). but some amd.js loaders can help you with that task.,neutral
mochajs/mocha,mocha,2013-12-24T05:59:51Z,guille travisjeffery the beautiful. beautiful files :(i exposed them in lib/mocha.js instead.,positive
mochajs/mocha,mocha,2013-12-24T08:13:04Z,we want to run tests using both selenium and real browser. due to the need of working inside browser we can not use mocha-selenium. we have some workaround to dump xunit report through selenium. but really. xunit and test runs in browser.,negative
mochajs/mocha,mocha,2013-12-24T13:25:32Z,now it doesn't have newlines either,neutral
mochajs/mocha,mocha,2013-12-24T21:50:54Z,ok since all the tests passed. i assumed it wasn't a requirement for it to run in outside of node.js. tests for those reporters needing to run in the browser would help.,neutral
mochajs/mocha,mocha,2013-12-25T22:46:46Z,good idea. i have often problems with different order props in objects.,positive
mochajs/mocha,mocha,2013-12-29T07:01:12Z,:boom: done,neutral
mochajs/mocha,mocha,2013-12-30T03:50:49Z,visionmedia is this good to go?,neutral
mochajs/mocha,mocha,2014-01-01T04:20:41Z,add support for suppressing stack traces. i run mocha tests with `--watch` in a small tmux pane. but even using `--reporter min`. the stack trace makes it impossible to see the actual error messages. for instant feedback. it's nice to get only the error message. if you're running mocha with `--watch`. you're likely to know. already. where the error in the code is.,negative
mochajs/mocha,mocha,2014-01-01T04:28:53Z,sorry. i should not be doing this from master. i'll open a new pull.,negative
mochajs/mocha,mocha,2014-01-01T05:47:45Z,no i don't think this is needed in mochayou could write a make rule that greps for `debugger` and calls mocha with ---debug-brk if necessary,neutral
mochajs/mocha,mocha,2014-01-01T07:38:38Z,sorry. the branch got gummed up with a lot of other changes – originally it was focused only on the `ownerdocument` concerns. but then the pull request sat idle for so long that i forgot and merged the branch with some other stuff.  at this point. i'm not actively using mocha. but i'll think a bit about resubmitting the pull request.,negative
mochajs/mocha,mocha,2014-01-01T09:20:11Z,travisjeffery that shouldn't matter. i require `mocha` at the top of the test file so since the globals exist by then i will get them.,neutral
mochajs/mocha,mocha,2014-01-01T09:39:15Z,run it. that `pre-require` event is named with respect to the test file. e.g. require('some_test_file'). not mocha.,positive
mochajs/mocha,mocha,2014-01-01T13:12:03Z,i don't think it's the browser. it's the way globals are checked to be in ok in mocha isn't reliable. since it's based on the number of globals. e.g. you call `mocha.globals(['foo']);` and then somewhere in a test have `window.notfoo = 1` there's no error. but if you have `window.notfoo = 1; window.anotherfoo = 1` it does error. so i don't think #724 is the proper fix.,negative
mochajs/mocha,mocha,2014-01-01T19:28:21Z,ok. i'll look into it. add a test case and make sure it actually works.the multiple files approach would have just worked for free :p,neutral
mochajs/mocha,mocha,2014-01-02T02:57:11Z,travisjeffery you were right. i added a test!it works now.visionmedia is there a place where i can pr the docs for mocha itself ? there not in this repo as far as i can see.,neutral
mochajs/mocha,mocha,2014-01-02T07:42:15Z,travisjeffery because we have have redefined `describe` and `it` as local variables it will use the exported ones not the global ones.without the fix (moving the exports in the event listener) it will fail.i'll happily update it so that it bootstraps the mocha suite runner if it hasn't been bootstrapped by the time its required. then tests can be run with `node`the point of this fix is to not have globals in your test files even if you run the tests with `mocha`. it also allows you to name `describe` and `it` whatever the hell you want.,neutral
mochajs/mocha,istanbul,2017-11-28T21:32:32Z,thanks stale. this is no longer relevant,positive
mochajs/mocha,eslint,2018-04-04T04:40:09Z,upgrade eslint; lint. upgrades eslint and its ilk; lints,neutral
casperjs/casperjs,jshint,2013-11-14T09:42:53Z,great work! minor nits to be addressed. and a jshint issue to fix for the build to turn green:```modules/tester.js: line 455. col 12. possible strict violation.```thanks!,positive
casperjs/casperjs,jshint,2013-11-14T15:17:33Z,i hate jshint the idiot dictator :-p i will fix that. i reinstalled my laptop system last week and so i need to re-install jshint.,negative
karma-runner/karma-sauce-launcher,sauce,2015-01-18T08:24:23Z,this still appears to be a problem,neutral
karma-runner/karma-sauce-launcher,karma,2015-01-27T06:39:53Z,+1 for us too. we currently have an active support ticket with saucelabs to try and figure things out. of note. the navigation to about:blank is indeed the culprit. but changing it to navigate to some other site instead (we used google) does not help. will update as we learn more.,positive
wix/detox,mocha,2017-10-11T22:26:52Z,totally tangential question. but here goes... been playing around with detox and jest. and i noticed that if i have two test files (e.g. `firsttest.spec.js` and `secondtest.spec.js`). detox will terminate. uninstall. install and launch the app for each file.  it does _not_ do this with mocha. any ideas?  is this just because of the repeated call to `detox.init()`?   if so. where would a good place to put this so that it is only called once? _edit:_ happy to create a separate issue if you want.,neutral
wix/detox,mocha,2017-10-14T16:19:13Z,seems like some of the params passed to mocha have changed. try running `scripts/ci.sh` and see if it passes locally,neutral
wix/detox,mocha,2017-10-16T10:21:17Z,for my concern i had to add "--exit" in mocha.opts to get a proper exit at the end of successful tests.,negative
wix/detox,mocha,2017-10-16T12:48:55Z,kureev. some of our users use detox with mocha (or any other test runner for that matter) independently of detox-cli. the current change breaks their setup since they can not pass arguments anymore. when we spoke. i encouraged you use argv and merge them with env vars if needed. the fact that jest doesn't support argv doesn't need to enforce other test runners to work with env vars.,neutral
wix/detox,mocha,2017-10-16T13:10:53Z,detox core now only supports env vars. not argv. try running `node_modules/.bin/mocha e2e --opts e2e/mocha.opts --configuration ios.sim.release --loglevel verbose`it will not work.,positive
wix/detox,mocha,2017-10-16T13:18:20Z,> detox core now only supports env vars. not argv. try runningnode_modules/.bin/mocha e2e --opts e2e/mocha.opts --configuration ios.sim.release --loglevel verboseit will not work.sure. but this is not about detox either. detox should be run only by detox-cli and `detox test` command. isn't it correct?,neutral
wix/detox,mocha,2017-10-19T20:02:24Z,any idea why "something" is still open? for example jest (and i guess mocha is doing the same) are not exiting automatically because there is still something runing. adding things like --exit is forcing the runner to exit. but it should be natural...,negative
wix/detox,mocha,2017-10-25T10:12:37Z,do you have `--exit` in the mocha.opts? it helped for me,neutral
wix/detox,mocha,2017-10-31T19:28:47Z,hey skv-headless . please add verbose log (the current one is only with default loglevel . add `--loglevel verbose` to your `detox test` command`node_modules/.bin/mocha e2e --opts e2e/mocha.opts --configuration android.emu.debug--loglevel verbose`,negative
jantimon/html-webpack-plugin,standard,2016-11-11T08:06:37Z,sorry only utf8 is supported by now - utf8 has become the standard for web and it would be a lot of work to maintain other encondings.,positive
chentsulin/electron-react-boilerplate,eslint,2016-11-05T19:29:46Z,discussion: video tutorial series. i'm thinking of making a video tutorial series for this repo. i'm thinking of covering the following topics:* getting started  * ide/text editor setup (sublime. atom. vs code. intellij)  * project directory structure walkthrough  * configuration explanation    * webpack. babel. eslint. flow. electron. npm scripts. redux  * creating components  * adding env variables to dev and prod  * routing  * managing state with redux  * testing with spectron. enzyme. and jest  * typechecking with flow  * creating a todo list sample app from scratch using the boilerplate* advanced   * ipc  * debugging main/renderer processesi'm sure there are video tutorial series out there for these topics but based on the issues/questions that have asked and made. i think explaining these topics in the context of this project would help significantly. especially for those who are new to the js ecosystem.,negative
chentsulin/electron-react-boilerplate,eslint,2016-11-08T16:44:20Z,wouldn't ide setup be a bit opinionated?,negative
chentsulin/electron-react-boilerplate,eslint,2016-11-08T21:41:16Z,great idea!1) it would be good if you suggest some good starter react resources so that you don't have to teach react it self. it might be good to focus on an overview of the technologies and only go into detail about the boilerplate itself. 2) creating a good screencast takes time. only put it in if you are confident that there are not many big changes coming up as the screencast will become useless quite quickly. that would be a shame.,positive
chentsulin/electron-react-boilerplate,eslint,2016-11-08T22:01:20Z,> it would be good if you suggest some good starter react resourcesnever even thought of this. i'm in favor of this. great idea! > only put it in if you are confident that there are not many big changes coming up as the screencastover time. there will be a significant number of changes to the boilerplate. maybe after every 2-3 releases or so. i can revise the screencasts? this is something we should discuss further._ping_ chentsulin jhen0409,positive
chentsulin/electron-react-boilerplate,uglify,2018-11-09T11:15:02Z,ok. my bad. `switch back to uglify-js (uglify-es is abandoned. if you need uglify es6 code please use terser-webpack-plugin).` seems to be the problem.,negative
vatesfr/xen-orchestra,standard,2016-07-28T14:50:55Z,quoting seems to have improved it other than the emoticon. what's the standard for issue reporting? just upload a txt file?,neutral
rooseveltframework/generator-roosevelt,standard,2018-09-06T15:43:26Z,updates for eslint and standard. this pull request:- updates eslint- updates standard- updates nyc- updates lint-staged- lints against standard,neutral
tj/commander.js,eslint,2018-11-23T06:13:54Z,i am not familiar with `guix`. but fyi i think the devdependencies break down as follows:build:- `types/node`- `typescript`test:- `should`- `sinon`- `ts-node`lint:- `eslint`- `standard`,negative
walmartlabs/eslint-config-defaults,eslint,2016-11-08T21:40:10Z,try this npm install --save eslint-config-defaults,neutral
react-boilerplate/react-boilerplate,mocha,2016-11-03T18:40:09Z,no longer relevant now that we've switched to jest in #980! will be in the next release,neutral
react-boilerplate/react-boilerplate,mocha,2016-11-03T19:05:27Z,only miniscule ones. see the changes in #980 – should be a simple find and replace!,neutral
Esri/esri-leaflet,standard,2016-05-24T21:51:55Z,i'll consider digging in deeper if others reply in the future.in general. standard practices for scaling/load balancing requests to your arcgis server instance are your best bet to optimize performance for `export` operation responses.,positive
assaf/zombie,mocha,2014-03-12T08:26:36Z,browser.wait() doesn't seem to work as documented. as documented here:  the `wait()` function should accept two functions as arguments. the first of which is a return condition that. once met. will run the second argument function.however. in my mocha test. this is a failing example of a try at this. and the second function still runs. even though the first return returns false.i'm honestly not even sure the hashchanged function is ever run. any attempt to put a `debugger;` or `console.log( ... );` in the function never seems to catch or output anything.``` javascriptit('should change the location hash'. function (done) {    function hashchanged (window) {        return window.location.hash === 'this is never. and will never be true!';    }    browser.pressbutton('sign-in'. function (err) {        expect(err).to.be.undefined;        browser.wait(hashchanged. function () {            browser.evaluate('window.location.hash').should.equal('#');            done();        });    });});```,negative
assaf/zombie,mocha,2014-03-12T08:32:06Z,the `wait` method is using promise.a. so `done callback` is invoked in either case (success or error). when error happened. then an `error message` is passed as first argument to `done callback`.,negative
assaf/zombie,mocha,2014-03-12T08:42:20Z,that doesn't seem to be true. at least. the first argument to the browser.wait callback is `undefined` in the above example.,neutral
assaf/zombie,mocha,2014-03-12T16:03:30Z,the second function will **always** run. it will run if there is an error. or when there's no events left to process. or where there are events but the completion function (the first argument) returned true.,negative
yeoman/generator,mocha,2013-12-19T16:44:19Z,i feel `.extend` really is simple sugar syntax over inheritance. so i'm pretty confident any of these changes can maintain 100% backwards compatibility as long as we default every non specifically queued task on the default queue.i also feel we can bring everyone of these pieces progressively into play. and. i think just these simple change would allow a user from running (for example) `yo angular`. then `yo mocha` on the same project with more ease. also. that'll make it easier for a generator (`generator-angular`) to call another generator (`generator-gruntfile`) - and making the experience/flow for the end user much better.then when we make a decision on the composability api. we just bring it into play with more ease with these building pieces already in place.,negative
yeoman/generator,mocha,2013-12-24T00:58:09Z,in further reading through the generator-ember tests i noticed that every test file defines the function `filesdonotexist`. which just takes a list of files and verifies that they don't exist. this is another good candidate for inclusion in the generator helpers. so i've added the methods `assertnofile` (checks that file does not exist) and `assertnofiles` (checks that no files in the passed-in array exist).i'm working on writing the unit tests now for all these methods. no tests for helpers other than `creategenerator` have been written-- it seems like this is because the generator repo does not have a sample generator embedded in it (that generates files. anyway-- i can see there is an example custom-generator and mocha-generator in the fixtures directory) for tests. so there's nothing to test the file assertion methods against. i'm pretty new to testing-- correct me if i'm wrong. but shouldn't there be a basic generator available for testing purposes? if so. i can write one. or should i extend custom-generator-simple to create some files?,negative
yeoman/generator,mocha,2013-12-29T01:03:55Z,apparently linting and jscs errors doesn't break travis build (exit is still 0).i wonder if failing tests would? (probably since you `mocha.run` them mocha would throw a non 0 exit),negative
yeoman/generator,mocha,2013-12-29T01:45:49Z,i've updated the mocha and jscs plugins to emit an error event on error.,negative
yeoman/generator,mocha,2014-01-01T22:53:54Z,this is a very solid pr. awesome work dude! i'm very happy with the efforts you put in. thanks a lot! :stars: > i feel like before is just not a good name for a helper. it implies that the only mocha before hook you'd ever want to use is helpers.before. i suggest changing the name to setuptestdirectoryi agree. could you replace the name. but alias `before` to `setuptestdirectory` (with warning?) so we keep backwards compatibility.> the comment for helpers.gruntfile says that the method is intended to be used as a mocha handler. i'm pretty new to mocha. can a mocha handler accept an options object (the signature is function gruntfile(options. done))?that seems to be wrong. can you find it used anywhere in our code base? (is there unit test showing how the method is used?),positive
angular-ui/ui-select2,karma,2014-03-21T14:17:40Z,fix jquery bower reference in karma conf. fixes #167,neutral
zalmoxisus/redux-devtools-extension,eslint,2017-04-22T00:24:23Z,sorry. missed the es lint part in your docs.`/* eslint-disable no-underscore-dangle */`,negative
matrix-org/matrix-react-sdk,eslint,2017-11-10T11:52:18Z,i've reduced comment length.if this is required. maybe this should be set in eslint - it's currently set to ignore?,neutral
matrix-org/matrix-react-sdk,eslint,2017-11-10T11:55:25Z,>if this is required. maybe this should be set in eslint - it's currently set to ignore?probably,neutral
matrix-org/matrix-react-sdk,eslint,2017-11-16T13:20:13Z,add eslint rule keyword-spacing. because we follow it almost all of the time.,neutral
matrix-org/matrix-react-sdk,karma,2017-06-20T16:40:12Z,various logging cleanups. * don't just log errors without any context as to where they came from or what   they mean * avoid the use of '%s' and multi-argument console.log because it looks awful   under karma.,negative
vvo/selenium-standalone,selenium,2015-07-02T09:02:41Z,i think that the ie driver is a default one in selenium so that he tries to load it on every system. this is really no big deal. is it a problem for you?,negative
vvo/selenium-standalone,selenium,2015-07-06T15:18:53Z,i've confirmed that binarykitchen's patch causes the below code to output `error: another selenium process is already running`.```selenium = require('selenium-standalone');gulp.task('selenium'. function (done) {    selenium.install({        logger: function (message) { }    }. function (err) {        if (err) return done(err);        selenium.start(function (err. child) {            if (err) return done(err);            selenium.child = child;            done();        });    });});```,neutral
vvo/selenium-standalone,selenium,2015-07-10T09:14:32Z,hi. it's never installed automatically. you have to:``` shselenium-standalone install```,neutral
vvo/selenium-standalone,selenium,2015-07-21T22:53:39Z,i've added the following to my failing test : ```    var opts = {        spawnoptions : {            stdio : ['pipe'. 'pipe'. 'pipe'].        }    };```i have also tried with stdio : 'inherit'  and i'm still not seeing the data event fire,negative
vvo/selenium-standalone,selenium,2015-07-22T16:19:07Z,maybe we could not flush the stdin and out. i will try to find why i did it,neutral
vvo/selenium-standalone,selenium,2015-07-31T13:33:03Z,can you try running the official  and see if you get the same error? thanks,positive
linkedin/dustjs-helpers,jasmine,2013-11-26T22:48:16Z,one other alternative is for `addtocontext` to **require** a `global.xxx` scope for the key: ``` html{addtocontext key="global.foo.bar"}hello world{/addtocontext}<h1>{global.foo.bar}</h1>```this doesn't guarantee you aren't overriding something else in the global scope. but helps ensure you aren't messing with the json used in dust.render and makes it very visible what you're adding/referencing.,neutral
marionettejs/backbone.marionette,sauce,2017-08-21T13:30:49Z,it is possible that sauce magically decided to start working again.. kind of.,positive
marionettejs/backbone.marionette,coveralls,2015-05-06T17:38:46Z,alright coveralls...we get it:stuck_out_tongue:,neutral
jvilk/BrowserFS,karma,2017-08-01T02:43:28Z,fyi i have zero experience with karma so if that's a newb error that's why.,negative
jvilk/BrowserFS,karma,2017-08-04T00:59:54Z,i'm sure this is just my lack of familiarity with karma. but i can't figure out what/where/how to modify the tests to add a `"preferxhr: false"` variant. any chance you could add that? also. what do you think of the current code? i think i addressed all your feedback points. but you might still find ways to improve it.,negative
nteract/nteract,mocha,2016-11-15T20:43:45Z,mocha it() functions missing from menu-spec.js unit tests. noticed several tests in `menu-spec.js` are missing `it()` functions inside of their `describe()` function.the code still runs but it doesn't report to console and doesn't describe issue on failure (it just throws an exception).i have not checked if this is present in other test files.i assume these was just a small oversight.,negative
nteract/nteract,mocha,2016-11-21T10:57:48Z,closed by #1218,neutral
nteract/nteract,codecov,2017-02-13T21:27:59Z,tests pass by virtue of moving code. our codecov status is going to be so out of whack with our separate packages now. 🤔,positive
nteract/nteract,codecov,2017-02-13T21:42:39Z,from chat in the lerna slack:```rgbkrk: how do folks recommend doing coverage testing when using lerna?         we have our old coverage testing which is about to drop as we extract         more to individual packages.         current: mocha + jsdom + enzyme + chai. nyc + codecov         future: jest + enzymeevocateur: jest from the root with a little config globbing works greatrgbkrk: sounds like we have to go all-in. we can do that. makes senseevocateur: jest is totally worth it ```our code coverage is likely to go up and down during the next couple weeks while continuing on with the modularization and exportation.,negative
LiskHQ/lisk,coveralls,2018-01-17T10:25:36Z,closing the pull request as nyc is generating wrong report due to which the coveralls can not generate reports.,neutral
mantoni/mochify.js,mocha,2015-07-28T18:58:47Z,default mocha reporter is now "spec". not sure if you want to change it. or just eliminate the default and let mocha decide,negative
mantoni/mochify.js,mocha,2015-07-28T19:00:17Z,try mocha's `--full-trace` option.  we eliminated much of the stack trace to ignore mocha internals; maybe it's zapping lines it shouldn't.,neutral
mantoni/mochify.js,mocha,2015-07-28T19:21:14Z,makes sense to eliminate and let mocha decide. this is a leftover from mocha's decision to change the default reporter in a minor release. it was aligned before...,negative
mantoni/mochify.js,mocha,2015-07-29T21:00:25Z,> this is a leftover from mocha's decision to change the default reporter in a minor releaseugh. don't remind me. live & learn...,negative
mantoni/mochify.js,mocha,2015-07-29T23:11:20Z,i bet mocha's `--delay` flag could be used to do this. though it would conflict with any other usage.  i'm not in front of a computer; is mocha run in phantomjs itself. with a console reporter?,negative
mantoni/mochify.js,mocha,2015-08-03T19:21:28Z,i don't even know if the browser bundle of mocha supports `full-trace`,neutral
node-nock/nock,eslint,2018-07-13T16:08:44Z,this is likely because npm reset their tokens yesterday due to a possible virus grabbing them through an eslint dep. who owns the tokens? gr2m?,negative
cucumber/cucumber-js,jasmine,2013-11-27T09:08:11Z,thanks again for the hard work paul. this is very good! i'm merging this now.i'd like to see end-to-end tests added at some point. what i suggest is we consider these two new methods _unstable api_ at the moment. i'm ok if the build passes without this tested deeply as well as the rest. we'll also need to document them in the readme at some point.> taking your concerns into account. what if we moved the named beforex and afterx declarative methods to cucumber.listener and removed registerhandler from the helper. this would leave the only registerlistener on the helper. move apis you feel are more sensitive to the more internal listener object and still keep a declarative syntax in one place (now on listener rather than on the helper).i'll merge with `registerhandler()` in but we can keep on discussing alternative solutions. `registerlistener()` feels about right to me. though.> in regard to hook vs event behavior. what if we added the world and scenario to the event payload? i haven't looked at the implications for doing this. but it may allow you to make the hooker into a special-case wrapper of a listener and reduce complexity.that's interesting. would you like/have time to make a spike on that?,positive
cucumber/cucumber-js,jasmine,2013-11-27T09:17:27Z,closed by 4be20a5211bd213dd1e110fc126a9e027e635f6e,neutral
vector-im/riot-web,standard,2017-06-19T11:58:39Z,default email notifs scare new users. i introduced riot to a friend the other day with the standard failure modes.  - failed to find riot on the ios app store (arguably not our fault but worth mentioning) - registered without issue - tried to find me on riot - searched by email. phone number. user id but nothing came up even after they joined hq (under my instruction) - so i ended up searching for their user id and found them instantly from my phone. started a 1:1 - they then received a daily email recapping matrix hq and had zero idea what was going on and deleted the app.,negative
vector-im/riot-web,standard,2017-06-20T13:20:36Z,what's the rationale for the default settings' including the activity summary?i guess it keeps riot.im front of mind for users who are just dabbling with the platform. however an activity summary for matrix hq is pretty full on for users who are interested in _using_ the platform rather than in the _development_ of the platform.is there a happy medium here?,positive
vector-im/riot-web,standard,2017-06-21T11:00:20Z,what about pretty standard feature — `enter` for newline. `ctrl-enter` for send?and another hotkey-related request. i's really useful to close all chats to keep all messages unread. currently it can be done with `home` button in the bottom of left menu.will it be nice to have hotkey for this? for example telegram uses `esc` for this — very convenient and expectable.,positive
appium/appium,selenium,2015-03-15T04:36:53Z,sorry no server logs it was showing selenium doesn't have any stack trace information i am getting it. the action is not performing and no logs as well.,negative
appium/appium,selenium,2015-03-18T01:26:57Z,don't url encode cookie value. this change is to ensure we stay consistent with other selenium driverimplementation.this is a follow pr on #4727,neutral
appium/appium,selenium,2015-03-22T12:40:17Z,unable to prelaunch/load the simulator driver. hi. i got the following error in appium console. while trying to prelaunch and launch the browser session from my selenium tests:info: [ios_syslog_row ] mar 22 18:04:05 lab-mac-4b1891 filecoordinationd[26145]: (error) fileprovider: could not load bundle com.apple.clouddocsfileprovider. error: the bundle “clouddocsfileprovider” couldn’t be loaded because it is damaged or missing necessary resources.warn: instruments socket client never checked in; timing out (global)info: [debug] killall instrumentswould be great if anybody got any ideas why i am facing it.. i have tried re-installing xcode. downgraded  and upgraded appium. shuffled with settings i.e. increasing appium device timeout to 300 seconds.  etcetra.,negative
appium/appium,selenium,2015-03-25T23:32:25Z,hey. any feedback on this change? we can also discuss it further on the issue tracker.,positive
appium/appium,selenium,2015-03-25T23:33:30Z,hi sboudrias i'm not sure what's at stake here. can sebv chime in please?,positive
appium/appium,selenium,2015-03-25T23:36:09Z,on my side. the issue is that we'll run test in both desktop browsers and mobile browsers. so having a consistent behavior about how cookies are handled in both selenium drivers is very important.,neutral
appium/appium,selenium,2015-03-26T14:20:23Z,sure i believe you. just wondering why we did this in the first place,neutral
appium/appium,selenium,2015-03-26T18:23:15Z,ok. merged. thank you!,positive
appium/appium,selenium,2015-03-26T18:25:32Z,awesome. thanks!,positive
appium/appium,selenium,2015-04-01T11:15:51Z,subscribing to this issue for further details,neutral
appium/appium,selenium,2015-04-01T11:29:49Z,this guide doesn't address the multiple iphones testing issue at all. sorry,negative
appium/appium,selenium,2015-04-09T15:13:21Z,sauce labs achieves this by running each ios test on a dedicated vm (that's used only for that test. then destroyed),negative
appium/appium,selenium,2015-04-09T18:00:27Z,jlipps not being able to run appium tests on different ios devices in parallel is quite annoying and inefficient. we are trying to contact the guys from mirell since several weeks and didn't get a satisfying answer. did you ever thought about moving away from ui automation and using another approach (like compiling a test driver lib into an ipa at compile time or enhancing an already compiled ipa with an test driver lib). as far as i can say this is the way how commercial testing tools are doing there test for ios. this would also have some additional benefits like being able to run tests from windows machines.,negative
appium/appium,selenium,2015-04-09T18:22:01Z,aluedeke i don't want to compile stuff into the app under test. depending on your situation it might even be near impossible to get the devs to compile appium into their app for you. i think appium is the best approach by far; the only  hurdle is this parallel thing and mirell claims to have a solution. if we could just get our hands on it. this whole discussion would be totally different.,neutral
appium/appium,selenium,2015-04-09T18:49:15Z,tokunbo it is actually possible to enhance a already compiled ipa file with a test driver lib. it wouldn't  be necessary that dev's add the testing lib while building the ipa. fortunately there is currently no open source solution i am aware of which is capable of doing that.,negative
appium/appium,selenium,2015-04-09T22:10:35Z,0x1mason true if you're using the simulators. i actually disable the instruments-without-delay as the last time i tried that(over a year ago) i started suspecting it was causing app crashes and my tests were scheduled to run overnight; didn't care how long the test took to run. i still hope for the day of multiple physical devices with pristine apps installed. at most. perhaps rooted/jailbreaked devices to allow some permissions for some sorcery custom uiautomation-receiver in the physical device but still leaving the actual .ipa alone.i guess i'd feel better if i could see the source-code of merill's linux implementation. at least that way everyone knows what exactly was tampered with and my suspicions don't run wild with every odd behavior i see. i should just look into usbport sniffing on macosx and see if i can write a c program on linux to do even just one super-simple uiautomation-related command.,negative
appium/appium,sauce,2015-01-20T21:18:17Z,figured it out - needed the sauceclient library,neutral
appium/appium,sauce,2015-02-09T07:15:58Z,unable to get the snapshot from android simulator on sauce labs . i am trying to fetch the snapshot from androidsimulators using appium on sauce labs faces below exception: unknown error: unhandled inspector error: {"code":-32603."message":"unable to capture screenshot"} code for take a snapshotappiumdriver driver = new appiumdriver(); file scrfile = driver.getscreenshotas(outputtype.file); fileutils.copyfile(scrfile. new file("d:/a.txt"));but when i am trying to get the snapshot from realdevice in my local environment using appium code is workedany help will be greatly appreciated,negative
axemclion/IndexedDBShim,sauce,2013-12-27T16:25:02Z,allow running qunit without saucelabs.. - fixed qunit urls.- run qunit with phantomjs when there is no saucelabs keynot all tests work correctly yet. one crashes and after disabling that one. 3 are having issue.edit2: the nice effect of running this with phantomjs is that it doesn't support indexeddb and that it is actually testing the shim instead of the indexeddb implementation.,positive
axemclion/IndexedDBShim,sauce,2013-12-27T21:59:52Z,the failing tests have something to do with the indexes. they contain  "undefined". so  #82 or #94 might fix this!edit: pressed "close & comment" sorry :-),neutral
jhipster/generator-jhipster,eslint,2017-03-06T22:22:47Z,the lint only takes place when you do `gulp eslint` (and `gulp eslint:fix` to try to automatically fix them).those tasks are in the `gulpfile.js` file.anyway. this isn't a bug. so you would probably have better answers on stackoverflow.,neutral
jhipster/generator-jhipster,karma,2017-12-12T10:24:25Z,taurus227 its not nice to mix travis tests and unit tests. if you want to unit test this i suggest to take a look at the karma tests. you can do comparisons there easily. look at the test-entity.specbut if you want to test if unique attribute in the changelog works i guess its not needed as its a liquibase feature that you are testing and not our code,neutral
marko-js/marko-widgets,karma,2015-11-13T19:45:23Z,combining split renderer and widget for functional testing. right now. when a template is bound to a widget but the renderer and widget logic is split. there is an additional function:```function __registerwidget() {    if (typeof window != "undefined") {      __markowidgets.registerwidget(__widget. require("./widget"));    }  }```in the template.marko.jsthis causes `template.render` to not work and it throws the following error:`__markowidgets does not have function registerwidget`the purpose of this is to enable functional testing. if i can combine the renderer and widget logic. i can render the widget directly and interact with the component and the event handlers associated. if you have a better approach to functional testing rather than combining the two. that would be awesome too.currently i am using mocha for testing run on karma.,negative
marko-js/marko-widgets,karma,2015-11-13T21:04:30Z,hey sidsakhadeo. if i am understanding your problem correctly. it looks like in your case. the `window` global variable is defined on the _server_. this is causing `marko-widgets` to think that it is running in the browser and that is causing the non-existent `__markowidgets.registerwidget(...)` method to be called. we can definitely change the code to guard against that. but why is the `window` global being set on the server?can you confirm that the error you are seeing is being thrown on the server (and not in the browser)? can you also confirm that the `window` global variable is being set on the server? i can put in a fix to make the `registerwidget(...)` method a no-op on the server. but normally that would not be needed since that code should only run in the browser. let me now. thanks for reporting the problem!,negative
marko-js/marko-widgets,karma,2015-11-13T22:38:07Z,yo. thanks for getting back to me. in mocha. we have setup a global window object. so yeah. when i render the template client side in unit and functional tests. we have this error. the scenario we are dealing with is. we render the template server side and run unit tests on the code. for the functional tests on the client side. ideally it would be best if we extended the widget logic with the `render` function. rendered the template client side and ran the tests. or we could render the template server side and appended the rendered html to the document on client and then run tests.i could use some advice regarding this approach for unit + functional testing too. the main issue for us is we are trying to replicate both server and client at the same time but functional tests on karma is just client and unit tests run are just on the server.,positive
agda/agda-stdlib,standard,2018-10-16T12:46:44Z,include laws for functor. applicative. monad. currently. the modules for functor. applicative and monad include records for the raw types similar to the algebraic structures. but do not have corresponding types including the laws. i think this could be a nice issue for someone like myself who knows the laws. and wants to take a gentle first step into contributing to the standard library.from what i can tell this would involve:  - [ ] creating a `category.structures` module for definitions of `isfunctor`. `isapplicative` and `ismonad`  - [ ] creating the extended records which include proof the laws hold,neutral
agda/agda-stdlib,standard,2018-10-16T12:47:40Z,gallais any comments / gotchas i should know about with this?,neutral
agda/agda-stdlib,standard,2018-10-16T13:10:06Z,> any comments / gotchas i should know about with this?the right notion of equality to use in these is a hard question. e.g. you'll probably needfunctional extensionality to prove the laws for `state` if you pick `propositionalequality`as your notion of equality.,neutral
agda/agda-stdlib,standard,2018-10-19T00:15:56Z,i think this is a good issue. i was wondering the same thing too.,positive
agda/agda-stdlib,standard,2018-10-21T11:53:16Z,i guess `pointwise` could be made heterogeneous.,neutral
alphagov/govuk_elements,standard,2017-06-30T10:39:43Z,if this helps people i am all for it. i would avoid "error" or "mistake" because they imply blame. "retry" or "try again" would be better.it would be interesting to know what people put as the heaing in the summary box because there is no standard. i have seen "there is a problem" "there is a problem with the form". "this page has errors". and "there was a problem submitting the form". i am sure there are others.tax credits uses "there is a problem" and it tested well with people. i would not want to mention "submitting" and "form" because it's jargon.,negative
babel/babel,mocha,2016-07-26T22:22:32Z,i'm sure it is reproducable. but i don't know how to reproduce it. using mocha and babel-register and throwing an exception in the source did not reproduce it for me.,negative
babel/babel,mocha,2016-07-26T22:24:26Z,danez i'm not clear what error is not reproducing.can you try this without mocha?,negative
babel/babel,mocha,2016-08-09T08:02:43Z,hello again! any updates about this?i figured out that source map issue makes my tests unusable.i have typical react-components folder with the following structure:```app/components/├── button│   ├── index.js│   └── styles.scss└── table    ├── index.js    └── styles.scss```i have an `index.js` file for each components. but then i run tests with mocha and `babel-register` hook and i am getting useless error messages.``` typeerror: cannot read property 'label' of undefined      at mapstatetoprops (index.js:45:17)```i see only filename. but this is `index.js` which gives me zero information about actual place in source code.,negative
jpuri/react-draft-wysiwyg,uglify,2018-11-08T02:41:50Z,i solved it by using `babel-minify-webpack-plugin` instead of `uglifyjs-webpack`,neutral
jpuri/react-draft-wysiwyg,uglify,2018-11-28T02:59:06Z,i solved a similar issue by changing the uglify plugin's settings in the webpack config to not change fnames:```optimization:{  minimizer: [new uglifyjsplugin({      uglifyoptions: {        compress: {          inline: 1.          keep_fnames: true        }.        mangle: {          keep_fnames: true        }      }    })]}```,neutral
jshint/jshint,jshint,2013-11-12T21:51:05Z,i like the idea. why can't we just rely on the extension and extract js only from .html files? also. you'll need to convert your files to tabs since this is what we use within jshint codebase.,neutral
jshint/jshint,jshint,2013-11-13T12:46:07Z,what is difference between “options and error code” in jshint?. i had confusion between options and error/warning code in jshint.curly : trueorw116how to identify "curly options" belongs to w116 code? while(true)            alert("ok");demo.js: line 3. col 5. expected '{' and instead saw 'alert'.(w116)please let me know. if my question is not clear.,negative
jshint/jshint,jshint,2013-11-13T18:37:35Z,aside from reading the code. you can't. we're working on making this easier.,neutral
jshint/jshint,jshint,2013-11-13T21:56:35Z,jshint complains about arrow function arguments. following code gets warnings:one undefined variable2   x``` js/* jshint esnext: true */const inc = x => x + 1;```,positive
jshint/jshint,jshint,2013-11-14T21:59:19Z,yeah. you can ignore individual warnings. run jshint in a verbose mode (--verbose). note warning's error code (w\d\d\d format) and then do this: `/*jshint -w123 */` where w123 is the code of the warning you wish to ignore. see more in jshint.com/docs,negative
jshint/jshint,jshint,2013-11-14T22:49:47Z,you can put it into jshintrc if you want to.,neutral
jshint/jshint,jshint,2013-11-15T00:26:17Z,"-w053": true since jshintrc is a json file,neutral
jshint/jshint,jshint,2013-11-15T10:22:39Z,funcscope:true does not suppress warnings about variables declared in a try block. ```/* jshint funcscope:true */try {    var x = true;} catch (e) {    ...}if (x) {    ...}```the above still gives a warning about x being used out of scope.,positive
jshint/jshint,jshint,2013-11-20T13:40:11Z,kflorence it is not always possible or clean to use a `.jshintrc`. for example. you may want to enable qunit globals in a single file. if we had this environment in jshint. it would only be a matter of setting the right file header.,neutral
jshint/jshint,jshint,2013-11-20T23:45:11Z,same issue in the web-based jshint. removing the destructuring lines stops the error:- `let [ mimetype. icon ] = yield downloadicon(this.iconuri);`- `let [ mimetype. icon ] = yield downloadicon(iconuri);`- `let [ olduniquename. installpath ] = webapposutils.getlaunchtarget(this.app);`,neutral
jshint/jshint,jshint,2013-11-21T00:07:39Z,i don't think this is a duplicate because it doesn't deal with concise methods in general. rather it deals with concise methods that are explicitly named 'get' and 'set'. because if you currently try and use those as concise methods jshint will complain that their missing a property name. so i think it deals more with addressing this edge case than adding support for concise methods in general.re object.create example i just thought that in that case jshint may _want_ to warn users about things like having a setter without a getter. having parameters for the getter. etc. since in that case 'get' and 'set' are being used as accessor methods and not just plain methods written concisely.,neutral
jshint/jshint,jshint,2013-11-21T00:23:07Z,> i don't think this is a duplicate because it doesn't deal with concise methods in general. rather it deals with concise methods that are explicitly named 'get' and 'set'. because if you currently try and use those as concise methods jshint will complain that their missing a property name. so i think it deals more with addressing this edge case than adding support for concise methods in general.<img src=" not an edge case. it's a totally wrong case and you're right to address it.,negative
jshint/jshint,jshint,2013-11-21T10:03:45Z,changing `true` to `false` in the config does not have any effect. i have the following javascript file:``` javascriptvar a = {  a:'a'.};```both following .jshintrc files do not detect the extra comma.``` json{  "es3": true.  "-w070": true.}```and ``` json{  "es3": true.  "-w070": false.}```i would that the first one warm me about the extra comma.this one detects the extra comma.``` json{  "es3": true}```is it a bug or a feature?,negative
jshint/jshint,jshint,2013-11-21T13:46:16Z,springuper i think the `.gitconfig` example is a bit different because (in the examples you've shared) it allows git configuration to vary between contributors. this feature would be for projects that contain multiple `.jshintrc` files. in those cases. it wouldn't necessarily be wise for a project to declare (for example) `inherit: ~/.jshintrc`. since that assumes contributors have additional (and varied) `.jshintrc` files elsewhere. linting rules make the most sense on a project-specific basis.,neutral
jshint/jshint,jshint,2013-11-21T17:42:27Z,`-w070: anything` tells jshint to ignore the extra comma warning. just don't put `-w070` and you'll have your warning.,neutral
jshint/jshint,jshint,2013-11-21T22:32:51Z,ping,neutral
jshint/jshint,jshint,2013-11-21T22:49:51Z,do you mind adding a test case for your patch? otherwise looks good.,positive
jshint/jshint,jshint,2013-11-21T23:09:06Z,rwaldron nice catch--it definitely can,positive
jshint/jshint,jshint,2013-11-22T04:18:12Z,sweet. didn't notice the project already depended on underscore. updated the cli tests to check that this works as expected.,positive
jshint/jshint,jshint,2013-11-22T13:29:30Z,if i move `/* jshint -w084 */` declaration above `wat` function declaration. everything looks fine too,positive
jshint/jshint,jshint,2013-11-22T16:50:20Z,hmm...i could be wrong here. but it seems like this would be a feature more targeted at the reporting utility (such as grunt).  for the example of grunt. couldn't the reporting utility for grunt just call jshint on each file while printing the file name along the way to produce the results you are looking for?,positive
jshint/jshint,jshint,2013-11-24T06:31:00Z,this is so awesome. from the first day i used jshint. i thought this was a weird thing for it not to support.  thank you spenceralger. and my dripping wet `.jshintrc`'s thank you as well.,positive
jshint/jshint,jshint,2013-11-28T21:37:35Z,// jshint ignore:line not working. just tried this in the demo on the home page as well and it seems to have no effect. ignore:start / ignore:end does work,negative
jshint/jshint,jshint,2013-12-02T08:04:03Z,i mean```    try {        return require(fp).jshintconfig;    } catch (e) {        return null;    }```,neutral
jshint/jshint,jshint,2013-12-03T16:16:23Z,update jshint.js. little fix which made ie complain,negative
jshint/jshint,jshint,2013-12-04T21:39:29Z,+1 i have a lib dir with third party libraries i don't want for jshint to go into,neutral
jshint/jshint,jshint,2013-12-04T22:12:15Z,pgmemk this possible with a .jshintignore file (perhaps not ideal. but better than nothing),neutral
jshint/jshint,jshint,2013-12-04T23:45:00Z,false negative on scripturl. i've got the following line at the top of my node.js code:``` javascriptvar debug = require('debug')('mocha:multi');```this is getting flagged by jshint under the "scripturl" rule.unless i'm missing something. this is incorrect?i'll try and send a pr when i get a chance,negative
jshint/jshint,jshint,2013-12-05T00:44:09Z,jshint is not compatible with non-es5 compatible engines. sorry.,negative
jshint/jshint,jshint,2013-12-05T16:54:41Z,right :). did that and agreed with barneycarroll,positive
jshint/jshint,jshint,2013-12-12T19:22:43Z,spurious warning: "the body of a for in should be wrapped in an if should be wrapped ...". because i don't like code which indents too far. i often use this form:```for ( var k in dict ) {    if ( !dict.hasownproperty(k) ) {        continue;    }    // ...}```which is perfectly fine. jshint gives me the warning:```the body of a for in should be wrapped in an if statement to filter unwanted properties from the prototype```i don't think there should be a warning for that case.,positive
s-panferov/awesome-typescript-loader,mocha,2017-01-25T16:53:06Z,jemise111 you should be able to set it with "types". for example:`    "types": ["chai-http". "core-js". "mocha"]`,neutral
angular/angular.js,karma,2014-02-10T23:13:52Z,hey. actually karma gets installed by `npm install` as it's a dev dependency. this line also installs all of the required peer dependencies.i'm not totally sure why/when the windows tab changed to say "npm install -g karma". but the mac/linux tab should be correct as is.,neutral
dc-js/dc.js,jasmine,2014-09-27T15:20:01Z,gordonwoodhull 1 offset is both on left and top `translate(-_clippadding. -_clippadding)`. so i think this is all set unless i'm missing something.2 yup. agreed.3 yup. agreed.4 tests. i wasn't familiar with ci build. it looked like some fixture/s needed to be updated but i wasn't sure and didn't want to change things w/o understanding them. is that something you can update? i can add a jasmine test to set the padding and confirm the rect has the updated attribute.,positive
istanbuljs/istanbuljs,mocha,2018-01-11T23:57:00Z,bcoe thanks a lot for the hint about the double instrumentation. i am migrating from nyc/mocha to jest and just forgot about the existing babel plugin :-),positive
DefinitelyTyped/DefinitelyTyped,standard,2017-02-20T13:41:36Z,the build failed because i added a "prismjs-module-tests.ts" file alongside the standard "prismjs-tests.ts". my thought was that this library needs to support both global var and module import scenarios. how should i go about that. or should i just pick one scenario to test in "prismjs-tests.ts"?,negative
crcn/sift.js,coveralls,2015-12-21T04:22:24Z,only run coveralls tests in travis. when i do `npm test` in my local machine. it fails because it tries to send coveralls reports.this makes `npm test` work in development. yet still run coveralls reports in travisci.,negative
mholt/PapaParse,mocha,2016-05-08T14:00:14Z,it looks like **mocha** is missing when you run `npm test`.```npm warn local package.json exists. but node_modules missing. did you mean to install?```can you confirm that you have a node_modules folder inside the papaparse folder and you have run `npm install` successfully?,neutral
Cloud-Automation/node-modbus,standard,2018-01-12T23:49:13Z,happy to hear that you want to help :-)there is no collaboration board anywhere. i'll see if i can set something up on slack. we set the coding standard a while back. it follows the javascript standard coding style. there must be something in the readme about that. the class oriented approach is due to the new es6 features that helped me get rid of many dependencies like stamps. q and so on. composition over inheritance is the prefered way. the basic code structure is done i guess. at least for the client. i think the server needs some attention.what operating system are you using? i wasn't able to use the serialport module on linux. could be exactly the same error.,negative
