["jbudz bargs ci doesn't seem to run selenium tests. feel free to go over this already and give feedback. but that should probably be cleared up before signing off on it.", "this change makes it so we can't run the selenium tests against kibana builds unless they're running in dev mode. which is definitely not ideal.  this seems like a problem with our selenium tests more than anything else. but i'd rather not put the project in a state of limbo my merging this while that is the case.  can you look into what it would take to get the selenium tests to work with the angular debug mode disabled?to reproduce what i'm talking about. just outright disable the angular debug thing rather than wrapping it in a conditional. and then run `npm run test:ui`.", "the selenium tests don't normally run with kibana running in dev mode.  i don't think they can because of the basepath inserted in the url.  we might be able to work around that in the selenium tests if we needed to.i don't know anything about the angular debug info.  if we had to change the method in the selenium tests that checks if kibana is loaded. we certainly could.  that whole set of methods for loading pages is a bit of a mess.", 'this could be merged in. but as epixa mentioned it will prevent selenium tests from running unless they are running in dev mode ( which is currently the case ).in the future we need to update selenium tests to not depend on angular debug info. if running selenium tests in non dev mode is a requirement then this pr needs to wait until selenium tests are updated.', 'yeah. running selenium tests outside of dev mode is pretty important. so they should be updated to support that.', "> is this related to the fix #4919 ?yeah. the fix for that (#8022) caused the bug> i don't understand ishashingenabled(). is it a configuration option? or how does it get set?it just reflects the current value of the `state:storeinsessionstorage` setting. which is what turns on #8022> do the functional selenium tests pass locally for you?the tests pass locally. and this is specifically fixing the bug caused by #8022", "unfortunatly problem wasn't be solved. in addition to those error i had an exception:error: server terminated early with status 1    at error (<anonymous>)    at e:\\users\\user\\documents\\netbeansprojects\\angular-phonecat\\node_modules\\protractor\\node_modules\\selenium-webdriver\\remote\\index.js:204:18    at promise.controlflow.runinframe_ (eval at <anonymous> (e:\\users\\user\\documents\\netbeansprojects\\angular-phonecat\\node_modules\\protractor\\node_modules\\selenium-webdriver\\lib\\goog\\base.js:1124:19). <anonymous>:1857:20)    at goog.defineclass.notify (eval at <anonymous> (e:\\users\\user\\documents\\netbeansprojects\\angular-phonecat\\node_modules\\protractor\\node_modules\\selenium-webdriver\\lib\\goog\\base.js:1124:19). <anonymous>:2448:25)    at promise.promise.notify_ (eval at <anonymous> (e:\\users\\user\\documents\\netbeansprojects\\angular-phonecat\\node_modules\\protractor\\node_modules\\selenium-webdriver\\lib\\goog\\base.js:1124:19). <anonymous>:564:12)    at array.foreach (native)    at promise.promise.notifyall_ (eval at <anonymous> (e:\\users\\user\\documents\\netbeansprojects\\angular-phonecat\\node_modules\\protractor\\node_modules\\selenium-webdriver\\lib\\goog\\base.js:1124:19). <anonymous>:553:15)    at goog.async.run.processworkqueue [as _ontimeout](e:usersuserdocumentsnetbeansprojectsangular-phonecatnode_modulesprotractornode_modulesselenium-webdriverlibgoogasyncrun.js:130:15)    at timer.listontimeout [as ontimeout](timers.js:110:15)", "(#2926) - remove vendor from cordova app. i have no idea why i did this. but it's definitely not necessary to include the selenium jar within the cordova app. this balloons the app's size unnecessarily. and the scripts still run fine without it.", 'install jdk works for me', 'per the discussion on selenium. this looks like something to do with how angular2 is patching eventtargets.', 'looks like a problem with your connection to the selenium server. can you share your configuration file and any relevant logs from your selenium server?', "i agree with nick. this feels like a test setup issue. having many connections to one selenium server sounds like it may be causing the issue. i think you need to look at the logs for your selenium server.i'm unclear what the `done` changes have to do with  your issue. but i suspect it's a red herring.i'm going to close this issue because it is more of a setup/support problem than a reproducible bug that we can track here.", 'after taking another look at `remote.seleniumserver`. what if instead we add a `localseleniumstandaloneopts` object to the config. and just pass that directly to the `seleniumserver` constructor? we can set `config.localseleniumstandaloneopts.port = config.seleniumport` and `config.localseleniumstandaloneopts.args = config.seleniumargs` for backwards compatibility. then you can use `config.localseleniumstandaloneopts.loopback` to do this.', "browserstack support is now added. and it's possible to use others via `seleniumaddress`. i'd be happy to take a look at another specific pr. but for the sake of cleanup i'm going to close this general one.", 'juliemr sounds like a good idea. i just added changes to enable this. i used your suggested naming and the backward compatible fallback for `seleniumargs` and `seleniumport`.', "hi sjelin  was the selenium issue ever sorted for drag and drop i've been trying the past few hours to get something working but so far no luck.", 'feat(attachsession): attach protractor to existing webdriver session. attaching an existing selenium browser session to protractor rather than always creating new one. the session can be passed into the config file as a string via the `sessionid`.', 'added some review comments!', 'see comments above. thanks!', 'lgtm after the two cleanup comments', 'alecxe ah :facepalm:. makes complete sense. i was hung up on the dev tools implementation and not the selenium one.', 'closed with 3f3805f.', 'local webdriver-manager update required for npm test. in order to run `npm test`. the local package of `webdriver-manager` needs to be updated to download `selenium/chromedriver` for the direct connect test. a possible solution: `test.js` should call the local `webdriver-manager` to update itself right before running the test.', 'or it could be added to the pretest script in the `package.json`...', "i usually do this in `test` or `pretest`. since there's no noticeable slowdown if the binaries are already there and it's less overhead for contributors to my projects. i'm :+1: on doing it in `pretest` unless there's a reason that is a bad thing.", "in addition. lodash and marked are also required for the unit tests. i'll see if i can `npm install` the `website/package.json` in the pretest.", 'why not just add them as devdependencies?', 'as per discussion offline. devdependencies is still the right idea', "hi.    i am able to run protractor test against ios simulator and ios device. but i have issues with identifying invisible elements i.e the element is false when i check xpath in appium inspector. can protractor coders help if you have any api to identify invisible elements. can i use something like 'mobile: tap' in protractor. it worked with 'mobile: tap' with java script code in selenium+ appium+ java framework. it will be great if you can provide information whether protractor has support for this. also can you please let me know if protractor has full support for native app testing both on simulator and device", 'i need to change this... somehow my commit did not have the changes sjelin and i discussed.', "does protractor have support to tap or click on invisible elements on native apps?. hi. i am able to run protractor test against ios simulator and ios device on native app. but i have issues with identifying invisible elements i.e the element is false when i check xpath in appium inspector. can protractor coders help if you have any api to identify invisible elements. can i use something like 'mobile: tap' in protractor. it worked with 'mobile: tap' with java  code in selenium+ appium+ java framework. it will be great if you can provide information whether protractor has support for this. also can you please let me know if protractor has full support for native app testing both on simulator and device", "i've been hurt by this too. another place it behaves funny is that one can't make a spec (it()) wait for anything async in the beforeeach. which used to be possible by either declaring beforeeach to take a done callback. or by returning a promise from beforeeach. it is intermingled with so many other oddities that i just assumed my setup was completely broken (an example is buttons that element-finders mislocate and when invoking the click i get the infamous would-hit-another-element exception -- injecting javascript asking the dom for the location of the element confirms that selenium/protractor aren't doing it right.)", 'the init will fail.', 'i think that the ie driver is a default one in selenium so that he tries to load it on every system. this is really no big deal. is it a problem for you?', "i've confirmed that binarykitchen's patch causes the below code to output `error: another selenium process is already running`.```selenium = require('selenium-standalone');gulp.task('selenium'. function (done) {    selenium.install({        logger: function (message) { }    }. function (err) {        if (err) return done(err);        selenium.start(function (err. child) {            if (err) return done(err);            selenium.child = child;            done();        });    });});```", "hi. it's never installed automatically. you have to:``` shselenium-standalone install```", "i've added the following to my failing test : ```    var opts = {        spawnoptions : {            stdio : ['pipe'. 'pipe'. 'pipe'].        }    };```i have also tried with stdio : 'inherit'  and i'm still not seeing the data event fire", 'maybe we could not flush the stdin and out. i will try to find why i did it', 'can you try running the official  and see if you get the same error? thanks', "sorry no server logs it was showing selenium doesn't have any stack trace information i am getting it. the action is not performing and no logs as well.", "don't url encode cookie value. this change is to ensure we stay consistent with other selenium driverimplementation.this is a follow pr on #4727", 'unable to prelaunch/load the simulator driver. hi. i got the following error in appium console. while trying to prelaunch and launch the browser session from my selenium tests:info: [ios_syslog_row ] mar 22 18:04:05 lab-mac-4b1891 filecoordinationd[26145]: (error) fileprovider: could not load bundle com.apple.clouddocsfileprovider. error: the bundle "clouddocsfileprovider" couldn\'t be loaded because it is damaged or missing necessary resources.warn: instruments socket client never checked in; timing out (global)info: [debug] killall instrumentswould be great if anybody got any ideas why i am facing it.. i have tried re-installing xcode. downgraded  and upgraded appium. shuffled with settings i.e. increasing appium device timeout to 300 seconds.  etcetra.', 'hey. any feedback on this change? we can also discuss it further on the issue tracker.', "hi sboudrias i'm not sure what's at stake here. can sebv chime in please?", "on my side. the issue is that we'll run test in both desktop browsers and mobile browsers. so having a consistent behavior about how cookies are handled in both selenium drivers is very important.", 'sure i believe you. just wondering why we did this in the first place', 'ok. merged. thank you!', 'awesome. thanks!', 'subscribing to this issue for further details', "this guide doesn't address the multiple iphones testing issue at all. sorry", "sauce labs achieves this by running each ios test on a dedicated vm (that's used only for that test. then destroyed)", "jlipps not being able to run appium tests on different ios devices in parallel is quite annoying and inefficient. we are trying to contact the guys from mirell since several weeks and didn't get a satisfying answer. did you ever thought about moving away from ui automation and using another approach (like compiling a test driver lib into an ipa at compile time or enhancing an already compiled ipa with an test driver lib). as far as i can say this is the way how commercial testing tools are doing there test for ios. this would also have some additional benefits like being able to run tests from windows machines.", "aluedeke i don't want to compile stuff into the app under test. depending on your situation it might even be near impossible to get the devs to compile appium into their app for you. i think appium is the best approach by far; the only  hurdle is this parallel thing and mirell claims to have a solution. if we could just get our hands on it. this whole discussion would be totally different.", "tokunbo it is actually possible to enhance a already compiled ipa file with a test driver lib. it wouldn't  be necessary that dev's add the testing lib while building the ipa. fortunately there is currently no open source solution i am aware of which is capable of doing that.", "0x1mason true if you're using the simulators. i actually disable the instruments-without-delay as the last time i tried that(over a year ago) i started suspecting it was causing app crashes and my tests were scheduled to run overnight; didn't care how long the test took to run. i still hope for the day of multiple physical devices with pristine apps installed. at most. perhaps rooted/jailbreaked devices to allow some permissions for some sorcery custom uiautomation-receiver in the physical device but still leaving the actual .ipa alone.i guess i'd feel better if i could see the source-code of merill's linux implementation. at least that way everyone knows what exactly was tampered with and my suspicions don't run wild with every odd behavior i see. i should just look into usbport sniffing on macosx and see if i can write a c program on linux to do even just one super-simple uiautomation-related command."]