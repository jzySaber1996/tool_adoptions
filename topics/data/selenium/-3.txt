["seems more like a node/selenium/windows issue than an ie issue. if i'm not mistaken this used to work in the old browsertime. for now. we could try an early return in the script if it's running in ie.", 'sjelin ya i understand that.  in all likelihood its neither of our faults - it seems most likely its just an issue with large numbers of webdriver/selenium being started at the same time.  the "cannot get automation extension" error is just something timing out. which seems most likely to be caused by some kind of lock contention issue during startup.  the delay doesn\'t fix the problem per se. but it addresses it to the extent possible at the layer\'s we\'re working at.', 'automatic run testcases using protractor. selenium server with angularjs.. hello.i am able to write testcases using protractor. selenium server with angularjs.is it possible to automatic run testcase at some interval of time and store their result somewhere(i.e failed or success etc.)', 'how to wait until page freezes in protractor?. we have got following logic on frontend - so when new page is loaded. screen is auto scrolling to specific section and i have a script which clicks on the specific element at that time. hence. while this movement is occurring following error is appearing due to the fact that selenium is clicking on wrong element:"element is not clickable at point (x. y). other element would receive the click..." i have added plain sleep. but this solution is not a good one. so does any one know how to wait until page freezes - when auto scrolling is finished?', "it depends on how you added the scroll; if your scroll action/library contains `settimeout`. it will not work. otherwise it should work out of the box if `ignoresynchronization` isn't set.that being said. using a click/coordinates to identify an element is never a good idea. as it requires you to change the coordinate every time you make a small change to your app.", "here is my best explanation of why the above code requires the `webdriver.promise.delayed()` to lock.when the then/success callback of the promise is executed in the control flow. it is run with the `opt_active` parameter `false`. which means that the current active frame will not be switched to the child. it ends up with a pending task for execute1 and a child task for execute2 - thus the lock.on the other hand. if the code is just:``` jsvar webdriver = require('selenium-webdriver');var util = require('util');var flow = webdriver.promise.controlflow();flow.execute(function() {  console.log('a');  return flow.execute(function() {    console.log('c'); // called successfully  }. 'execute2');}. 'execute1');```then the execute2 task is scheduled in a child frame and the active frame gets switched to that frame - it finishes. the parent frame finishes. everything is happy.here are the annotated logs showing this difference (i used custom logging added to the webdriver node module):situation a: lock```{ history: [].  activeframe: '[execute1]'.  activeroot: '[execute1]' }--- loop turn ---{ history: [].  activeframe: '[execute1]'.  activeroot: '[execute1]' }--- run in new frame from run event loop ---execute1--- start run in new frame ---{ history: [].  activeframe: '[(pending - execute1)]'.  activeroot: '[(pending - execute1)]' }a--- run in new frame from notify ------ start run in new frame ---{ history: [].  activeframe: '[(pending - execute1)]'.  activeroot: '[(pending - execute1)]' }b--- after run in new frame ---{ history: [].  activeframe: '[(pending - execute1)[execute2]]'.  activeroot: '[(pending - execute1)[execute2]]' }and then that repeats forever```situation b: no lock```{ history: [].  activeframe: '[execute1]'.  activeroot: '[execute1]' }--- loop turn ---{ history: [].  activeframe: '[execute1]'.  activeroot: '[execute1]' }--- run in new frame from run event loop ---execute1--- start run in new frame ---{ history: [].  activeframe: '[(pending - execute1)]'.  activeroot: '[(pending - execute1)]' }a--- after run in new frame ---{ history: [].  activeframe: '[execute2]'.  activeroot: '[(pending - execute1)[execute2]]' }--- loop turn ---{ history: [].  activeframe: '[execute2]'.  activeroot: '[(pending - execute1)[execute2]]' }--- run in new frame from run event loop ---execute2--- start run in new frame ---{ history: [].  activeframe: '[(pending - execute2)]'.  activeroot: '[(pending - execute1)[(pending - execute2)]]' }c--- marking task execute2 complete--- loop turn ---{ history: [ 'execute2' ].  activeframe: '[]'.  activeroot: '[(pending - execute1)[]]' }--- run in new frame from notify ------ start run in new frame ---{ history: [].  activeframe: '[(pending - execute1)]'.  activeroot: '[(pending - execute1)]' }--- marking task execute1 complete--- loop turn ---{ history: [ 'execute1' ]. activeframe: '[]'. activeroot: '[]' }```", "but you don't have **any** examples of completely bootstrapping selenium tests from nothing. and even if there are. it's completely lost in the documentation.this is a great web driver. but if it is not a tutorial. could you. at the very least. provide a link to one towards the top of the readme?", 'work is ongoing here in the `selenium-testing` branch. it will probably take me another 6 weeks to complete this work.', "add firebug and firepath for debugging. hi. i've refactored some of the selenium related test case. and added firebug and firepath for debugging so that if ci is failing on travis it can be debugged on local.also i feel that we should delete notebook once selenium test case is finished.", 'also. is it a good idea to get rid of. this. as well ? and let selenium test case be part of regular test as well.```boolean endtoendtestenabled() {    return null != system.getenv("ci");}```', 'it depends if they are working :)one problem we had in the past was that selenium test tends to not work on classic machine.build is already hard to finish for some. but it was almost impossible with selenium tests running', 'anybody with selenium experience to test that? :p', 'can we merge this. if there is discussion around this ?', 'i think we need to avoid ship binaries in source release. but in this way. firebug binaries are going to be included in the source release.', 'sure leemoonsoo appreciate your point. thanks for the suggestion. removed binaries from the project.', "when's the next release going to be and with that the next release of webdriverjs-selenium-bundle?", 'thanks! do you think webdriverjs-selenium-bundle will be updated soon as well?', "instruments crashed on startup. hi.i'm observing this error on two machines (maverick with latest xcode):```self = <selenium.webdriver.remote.errorhandler.errorhandler object at 0x10a87f1d0>response = {'sessionid': none. 'status': 33. 'value': {'message': 'a new session could not be created. (original error: instruments crashed on startup)'. 'origvalue': 'instruments crashed on startup'}}```are there is way how to troubleshot the issues? appium-doctor reports everything green.", 'unfortunately instruments is often unreliable. restarting your computer sometimes helps. does it ever launch or does it fail every time?', 'and i see previous error again. and if i open console app i see next line:```19/02/14 11:40:13.347 google chrome helper[2085]: process unable to create connection because the sandbox denied the right to lookup com.apple.coreservices.launchservicesd and so this process cannot talk to launchservicesd. : lsxpcclient.cp #426 ___zn26lsclienttoserverconnection21setupserverconnectioneipk14__cfdictionary_block_invoke() q=com.apple.main-thread```', "no idea. never seen those errors before. are you sure you're automating an app that you have built and have a developer cert for?", "this is our app for sure. but i have currently installed two provisioning profiles and two keys (develop and distribution). but i don't think this is the case. i`m going to investigate more.if i will try to run instruments manually. how could i check that it is operate correctly with simulator?", "looks like a fruitstrap error. i'd bypass fruitstrap by manually installing the app on the device and then simply passing in the bundleid for the 'app' capability so we don't try to install it.", "i would have to look into the underlying implementations of the selenium server in question. for appium. master jlipps would know :)the only other option would be iosdriver. and it's unclear to me via their documentation that the async_script_timeout command is implemented.", 'did you try using the built-in selenium alert methods to accept the alert?', 'thankfully the prelaunch worked fine now. but i could not open the inspector. when i click on the inspector icon from gui. i get the usual message "could not get list of sessions from appium serverbe sure the appium server is running with an application opened by using the "app path" parameter in appium.app (along with package and activity for android) or by connecting with selenium client and supplying this in the desired capabilities object."', 'error message on pop up be sure the appium server is running with an application opened by using the "app path" parameter in appium.app (along with package and activity for android) or by connecting with selenium client and supplying this in the desired capabilities object.', 'i build the appium. but i can not find the selenium.apk in it.where is it ? i think the reset.bat .......', "nilapuanusha i'm sure you didn't start 'webdriver-manager' or at least you close it before you run your tests.make sure you open it in an other command prompt. and when it runs. run your selenium tests and it should work.", "add nightwatch to run e2e tests. the #1608 pr was too big. therefore i couldn't make it. i don't want to do the same mistake again. so. i will divide introducing e2e test as several prs.### these pr includes* configure nightwatch to run e2e tests with selenium* configure to run e2e test with saucelabs on travisci* add an e2e test to check initializing summernote.i couldn't check the e2e test run correctly with saucelabs because my saucelabs account is limited.to run e2e tests. dist files are needed. but now `npm run dist` occurred error. so. this pr depends on #2500 .and i configured e2e test don't depend on grunt much because it will be replaced rollup in #2495 . building dist files is only needed for running e2e test. so. changing to rollup will be easy for e2e tests.", 'outsideris thanks for contribution.']