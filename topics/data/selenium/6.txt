["i'll suggest we change from using `wreck.request('get'....` to `request.get(url)` like we use when we download the selenium jar.  i don't think i've ever had problems with that.", 'more useful chrome flags. kaptenjansson i think we should move the selenium lib into a npm package.', 'yes. i will do that this week.', "ftr what's the reason behind enabling these flags?", "dereke that's awesome. thanks!", "sorry for the scrolling. i removed some lines of selenium stdout result.thank's.", "sadly. selenium's browser logs are super inconsistent and generally work poorly.", "what an interesting thing.  i have no idea why this is the case.  it's part of selenium. so you'd have to ask them.", "our general thought has been that `webdriver-manager` is a quick setup for folks who want to get selenium/webdriver started quickly. we don't want to replicate every advanced option. if you're making a grid. the assumption is that you know what you're doing and don't need `webdriver-manager` to help. is there a particular reason that this option would be helpful to include?", 'firefox driver is packaged with the selenium standalone jar. so it does not need to be updated with a separate command.', 'feature request: modularize webdriver-manager. it would be really nice if `webdriver-manager` could be its own module. it is useful for any framework using `selenium-webdriver` or if you use `selenium-webdriver` without any framework.', 'cleaning up our issues - closing this as unfeasible given that we run with node.', 'add log of actions taken on webelements. this would supplement the webdriver logs and the selenium-webdriver control flow history and schedule. but be easier to read. e.g.```find element by(...)click element```could be printed on failure.', "tbh these are features made by the selenium team directly and you'd be best off asking them", "i'm not sure about the bypassing selenium but i do see it executing and displaying chrome.> the travis ci build passed", 'corneadoug it passed selenium test. is it enough?', 'ci failed because of selenium. i think', 'do not want to see errors when killing. every time i kill the selenium process i see this error:```     callstack:     -> session("delete")     -> end()]  message: \'runtimeerror\\n     (econnrefused:-1) couldn\\\'t connect to selenium server\\n     problem: couldn\\\'t connect to selenium server\\u001b[1;30m\\n\\n     callstack:\\n     -> session("delete")\\n     -> end()\\n\'.  name: \'runtimeerror\'.  hascallstack: true }```in the `process.uncaughtexception` handler.honestly. when it is getting killed. it should not throw an econnrefused error', "i think that's not a selenium standalone error. more a your selenium-webdriver error. try to listen for delete and end before killing the server", "and why aren't you mentioning this in the readme and recommend a direct `.kill()` there?", 'sorry i misunderstood something. i do not understand the problem you are facing. maybe show me a failing git project', 'forget it. all is good now. i solved this all by myself by rearranging and writing better gulp tasks. keeping all references in local scope.', ':+1:', "i really don't know. this output comes from selenium. so it's a selenium issue i guess?", 'this is a selenium issue. maybe try to launch selenium yourself:', "something like this``` coffeegulp.task('selenium:start'. (cb) ->  if (selenium.alreadyrunning())    cb()  else    selenium.start((err. seleniumprocess) ->      if err        cb(err)      else        gutil.log('selenium instance spawned.')        ...        cb()    ))```", "i think that if you started selenium you should already be able to know if it's running. with a simple flag you set?", "how to get the selenium logs?. is there any way to have a logger that outputs all the selenium logs when running selenium from within node. like the ones you see when you run the selenium-standalone server using the jar file?the reason i'm asking is because my tests are working fine with the selenium-standalone server from selenium. and also if i run selenium-standalone (the binary from this repo). however. if i start my tests using the selenium-standalone from within node. halfway through it stops working and i have no idea what is going wrong since i don't seem to have any way of retrieving the logs..", "alright. so the way you get the logging from the programmatic api is by doing the following:```child.stderr.on('data'. function(data) {    console.log(data.tostring());});```this should probably be in the documentation as it can be quite useful. anyway. back to the issue. when i put this piece of code in. the tests work.. so it's literally like a quantum problem. as soon as i try to observe it. the tests run fine. but when i remove this piece of code. the tests seem to stop halfway through.any ideas on what could be affecting this?", 'updated readme with two ways to retrieve the selenium logs', 'nice. i will just add another line about the cli command line tool already using the stdio inherit thing', 'cors issue. i have just setup a simple test with this and webdriver io. however i noticed that in firefox i am getting cors errors. i am not entirely sure if i need to set some args when starting up selenium-standalone to allow cors or if i need to set it in the dependencies for webdriver io. but i thought i would ask the question incase anyone else has had/solve an issue with making cors requests.just to be clear it works fine if i was just browsing and using the site in firefox normally. as the xhr and server all support cors based requests. it just seems to be while running via selenium it doesnt. but cannot find much information on the subject.', "sounds like a regular selenium-webdriver issue. you need to pass the 'browsername': 'safari'. or app:<hybridapp>. jlipps our error message is missing `browsername` cases.", 'the error caught by the script we are running is\'error\': (<class \'httplib.badstatusline\'>. badstatusline("\'\'".).the error that follows for the rest of the testcases is\'error\': (<class \'selenium.common.exceptions.webdriverexception\'>. webdriverexception()', 'some of the commands (e.g. settext) are a higher-level abstraction of many lower commands (focus. clear. send keys. etc) and i think that\'s done out of convenience.  i think trying to type through the keyboard is a bug.  i\'d vote to either throw an error (e.g. "widget is not visible" -- i think this is what selenium does) or put in the necessary logic to hide the keyboard or scroll to the widget.  hiding the keyboard would probably be easiest. though i wonder if it would have any negative side effects?do you by chance know what appium currently does if the widget is off screen (keyboard issue aside)?', "you don't use the selenium server jar to run appium. i'm not really sure what you're trying to do. appium isn't something you import into android studio. it's a standalone app you run completely independently of android studio.", "> we can add additional parameters beyond the spec. eg function overloads. so i don't see how we're limited in this case.we're limited in the sense that the driver methods which use `/touch/click` have a particular semantics. changing that semantics is technically feasible but not the approach we have taken with appium. which is only to extend. not to modify. any of the existing selenium protocol.hopefully the clients themselves will be updated to deprecate the old `/touch` endpoints in favor of the new spec. then this problem will go away.", "noizu for the contexts commands you need to use appium's ruby_lib. not the vanilla selenium client.", 'awesome. works fine for me too .. thanks ross']