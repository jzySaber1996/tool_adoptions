pubnub/chat-engine,codacy,2018-04-24T20:12:09Z,i think that codacy-bot doesn't like that you've only defined the var and never used it. you can do something stupid like ```syncchat.objectify()``` which returns json to resolve this. the proper solution is to create two lint configs. one for tests (where we can disable this) and one for src. where we can keep this enabled.,positive
jprichardson/electron-mocha,mocha,2017-03-20T16:51:36Z,support reporteroptions. add code (from mocha) to correctly parse and pass reporteroptions,neutral
jprichardson/electron-mocha,mocha,2017-03-20T21:29:20Z,can you add the new options line to `readme.md` as well? thanks!,positive
ramda/ramda,jshint,2015-11-12T15:13:34Z,from my post in gitter:since arguments object is used in only compose and pipe family of functions. i went ahead and added the necessary "fake" argument into function declarations... apparently this breaks the build since jshint doesn't like this unused argument :(apparently there is an option to silence this warning: jshint/jshint4ac15f6let me know if you like the pull request and i can fix this problem,negative
ramda/ramda,jshint,2015-11-22T00:50:34Z,fine with me. i have no great love for jscs or jshint. so if we can use 1 tool. and reduce our conf-file count. then let's.,positive
request/request,eslint,2015-05-24T12:22:56Z,flanneljesus i think that's a problem with your ide. i don't think we should make code changes just to please someones code editor. interestingly enough your ide didn't showed you the eslint errors.,positive
request/request,eslint,2015-05-24T12:59:19Z,ah. i found the eslint file in the root of the repo. sorry for this. i'm new to making pull requests to other people's repos. not trying to be an idiot.i would genuinely like to know if other ides recognize 'request.post' though.,neutral
request/request,eslint,2015-05-24T15:32:26Z,flanneljesus you are. by far. not the only person to miss the eslint and make a failing pull request :laughing:.  did you run `npm test`?  looking for and running the test suite are always good things to do before submitting a pull request.as for the changes. :+1:.  i bet yours is not the only ide that has trouble with this.  thanks for contributing!  i hope the failing build didn't scare you off from future contributions to `request` :).simov i don't think we should not make code changes just to not please someone's editor.  there were >9m downloads last month. so we should try to make it a pleasure to develop with `request` for as many users as possible. whenever possible.,positive
request/request,eslint,2015-05-24T15:45:37Z,flanneljesus feel free to squash together your two commits into one.  that way there's less noise in the diffs. in the git blame. etc.  since no one else is tracking the flanneljesus/fix-verbs branch. it's not a faux-pas to rewrite history.  in case you've never done this before. you can:do an interactive rebase onto two commits before head:```git rebase -i head~~```that opens your editor with this:```pick f5eaea8 fix the way http verbs are definedpick a63a3fc fix formatting according to eslint settings```then change the second `pick` to `fixup` like this:```pick f5eaea8 fix the way http verbs are definedfixup a63a3fc fix formatting according to eslint settings```and save and quit.  git will merge together the two commits into one and take the commit message from the first.  interactive rebase is super powerful.  instead of fixup. you can use squash (if you want to edit the commit message of the combined commit) or reword if you just want to change the commit message.  you can also reorder commits (just by reordering the lines in this file) and squash together multiple commits (put multiple fixup/squash in a row).  one thing i often do is find a typo from a few commits ago.  in order to fix that. you add a new commit that fixes it. then do an interactive rebase and reorder the lines and change the new commit to fixup.  it's like the typo never happened (again unless someone is tracking your branch. in which case rewriting history is ugly).  there might be merge conflicts when you reorder commits. so be careful with that.after you change your history. you have to do a _forced_ push to github:```git push --force origin fix-verbs```this automatically updates the pull request!,negative
node-inspector/node-inspector,mocha,2014-02-17T20:39:21Z,:+1: i don't have this functionality in my script. but really like to see coffescript and mocha integration - right now it's easier for me to use command-line debugger with `coffee --nodejs debug` and `mocha debug`,negative
node-inspector/node-inspector,mocha,2014-02-18T08:21:32Z,sidorares debugging mocha tests is easy:``` sh$ node-debug _mocha```supporting coffee script is more difficult. definitely out of scope of this pull request. can you use `coffee -c -w` as a workaround for now?sam-github thanks for review. i have added a couple of commits and replied to the rest of the comments. anything else to improve?,positive
electron-userland/electron-download,standard,2016-11-17T08:22:57Z,unfortunately not. it's es6 from the start. :*)i can make a compatible one very easily or we have to wait for next year. your call...,negative
electron-userland/electron-download,standard,2016-11-17T14:43:31Z,personally. i'm ok with waiting. in the meantime though. is it possible to add tests. particularly for the cache directory migration behavior?,neutral
electron-userland/electron-download,standard,2016-11-20T10:55:19Z,great idea. i discovered my implementation only to be working partially! now it's all good. added a test. :bulb:,positive
elastic/kibana,mocha,2015-06-02T18:19:40Z,lgtm. passing to chris for final looks. since i think he has more mocha knowledge than i do.,neutral
serverless/serverless,eslint,2016-12-05T12:24:50Z,jimmyp thanks for jumping into this one!i think the `eslint` output is fine (no issues) if you don't see anything in red on the console...furthermore the build will fail if you have some linting issues...,positive
pattern-lab/patternlab-node,coveralls,2017-10-20T08:16:59Z,feat(readme): add coveralls badge to readme. closes #728summary of changes:adds coveralls badge,neutral
pattern-lab/patternlab-node,coveralls,2017-10-20T08:38:34Z,add coveralls badge to readme. addresses #729 summary of changes: add the badge!,neutral
pattern-lab/patternlab-node,coveralls,2017-10-20T08:47:08Z,it was done. so i just deleted!,neutral
airbnb/javascript,eslint,2016-11-17T07:37:08Z,ljharb: on what systems does that install command work? does not seem to work on windows 10,neutral
airbnb/javascript,eslint,2016-11-19T03:01:07Z,run the install command in the readme for eslint-config-airbnb-base to ensure your peer dependencies are correct - also make sure you've restarted your editor (like atom) if you're using one.,neutral
airbnb/javascript,eslint,2016-11-21T03:54:51Z,yes. thanks. i'm aware that we have unreleased code. this is intentional - i'll release a breaking change of `eslint-config-airbnb` with the v3 dep of `eslint-plugin-jsx-a11y` when it's ready.in the meantime. please stick with the peer dependencies that the package readme's install command installs.,negative
airbnb/javascript,eslint,2016-11-22T21:50:31Z,i had a similar issue. what resolved for me was updating my global eslint package as atom seems to have been using that to read my package.json. `npm update eslint -g`does that resolve for you?,positive
airbnb/javascript,eslint,2016-11-23T01:22:43Z,alternatively. `npm uninstall -g eslint`. because you shouldn't have a linter installed globally - only per-project.,neutral
airbnb/javascript,eslint,2016-11-25T16:45:19Z,due to eslint limitations with shared configs. this will sadly add another peer dependency for both `eslint-config-airbnb-base` and `eslint-config-airbnb`. that said. this is a good rule that i think we should indeed add. but i'd like to test out the plugin on our codebase before adding it here.,positive
airbnb/javascript,eslint,2016-12-01T06:53:48Z,simenb i don't understand either! the `eslint-plugin-react` says > prevent usage of setstate in componentdidmount (no-did-mount-set-state). anyone can explain?,neutral
airbnb/javascript,eslint,2016-12-01T22:41:08Z,ah - you're using `babel-eslint`. if you're using the "legacy" config. you can't use the babel parser - you need to use the default parser.,neutral
airbnb/javascript,eslint,2016-12-02T16:14:53Z,well that's embarrassing. i was sure i didn't run a global eslint installation anymore.. but turns out i did. so removing it solved my problem. thanks a lot,negative
airbnb/javascript,eslint,2016-12-02T16:42:50Z,correct - airbnb/base is deprecated; use the separate eslint-config-airbnb-base package instead. for just this reason.,neutral
airbnb/javascript,eslint,2016-12-07T01:36:58Z,julesmoretti in your `.eslintrc` file. in the "rules" section.  has all the documentation for eslint.,neutral
airbnb/javascript,eslint,2016-12-09T15:45:22Z,shouldn't eslint-config-airbnb block this error for lifecycle methods?,neutral
airbnb/javascript,eslint,2016-12-09T18:13:21Z,myguysi first. `airbnb/base` is legacy - you want `eslint-config-airbnb-base` for that - but second. if you're using react. you need to use `airbnb` - ie. the top-level one.,neutral
airbnb/javascript,eslint,2016-12-09T18:14:36Z,your `eslintrc` should just be:```js{    "extends": "airbnb".    "parser": "babel-eslint".    "env": {        "node": true.        "jasmine": true.    }.    "rules": {        "id-length": 0.        "indent": [1. 4].        "no-console": 0.        "no-unused-vars": [1. {"vars": "local". "args": "none"}].        "strict": 0.    }.}```,neutral
airbnb/javascript,eslint,2016-12-10T16:13:18Z,fyi. if you just want to enable `for..of` in your own .eslintrc(.js). and keep airbnb's default values for everything else. just put this in the `rules` section:```js'no-restricted-syntax': [  'error'.  'forinstatement'.  'labeledstatement'.  'withstatement'.]```,positive
algolia/vue-instantsearch,eslint,2018-05-30T16:19:33Z,thanks! we definitely need to change eslint,positive
actions-on-google/actions-on-google-nodejs,mocha,2018-06-27T21:15:07Z,output context not working when using rich responses. so i got my basic intents setup with the actions on google client library on aws lambda. my app does some basic order inquiry and allows followup questions on resulting orders through the use of contexts. all of this was working fine. i recently added several rich response elements to the app. namely the basic card and the list. and they are also working. however. my output contexts aren't being received anymore. (the responses received by the simulator and other devices lack the output context section)## steps taken* i've taken a look at the responses from the actions on google simulator and they did not receive output context* checked the logs from google cloud platform and they also have not received output contexts* however. when i send in a test query to my lambda expression or api gateway. i receive the full response. simple responses. rich responses. output context and all.* not surprisingly. my own mocha test cases also get the full contexts.## thoughtsso it seems clear to me that something on the dialogflow end is cutting out my output contexts since i know for sure that all components of my intents work separately. i am wondering if this is intended behavior. that webhook responses cant provide both output contexts and rich responses. if this is intended behavior. then i can probably work around it using the user storage. but if it is not. i'd appreciate any help i can get looking into the issue.,negative
actions-on-google/actions-on-google-nodejs,mocha,2018-06-29T22:59:05Z,i'm sorry hoklaisung. i'm not exactly sure what the issue you're reporting is. it sounds like maybe the responses in the web simulator don't have the context included. but that your webhook always gets it. in that case. what's the actual problem?,negative
actions-on-google/actions-on-google-nodejs,mocha,2018-07-02T14:28:31Z,i was able to fix a seperate problem that got the intents that used output contexts working again. my problem originally was that these intents that rely on output contexts were not working. and i didn't see any output contexts in actions on google's simulator's request or response logs. so i assumed that was where the problem lay. i will say. it does look like the simulator does not show that information regardless(the recieved output context nor the output context being sent to followup intents). and that would be useful to see.,negative
actions-on-google/actions-on-google-nodejs,mocha,2018-07-02T16:15:15Z,thanks for surfacing this.,positive
ninjadev/nin,eslint,2017-07-18T14:35:27Z,should work now. i've had to disable uglify as it can't handle any newer than es5 (so no native async/await in the frontend then).in addition. there were so many indentation errors which showed up now for some reason. i've changed indentation to warn from err in eslintrc.,negative
ninjadev/nin,eslint,2017-07-19T15:13:15Z,is eslint running before or after typescript has altered the source?,neutral
webrtc/samples,selenium,2016-02-12T17:49:35Z,see utilities repo,neutral
webrtc/samples,selenium,2016-03-09T07:05:56Z,the way i have in mind currently is to run test edge by starting node on travis and then execute selenium as a remote webdriver. there are still some pieces missing (like hooking up the edge webdriver with a selenium hub) and some are not yet public but it seems that we don't need to change our overall approach of using travis.,negative
videojs/video.js,coveralls,2015-11-17T17:41:05Z,gkatsev is there any way to run the `coveralls` test locally? as i said. i have my own browserstack credentials but if i attempt to run it i get the following output:```running "coveralls:all" (coveralls) task>> no src files could be found for grunt-coverallswarning: task "coveralls:all" failed. use --force to continue.aborted due to warnings.```just a little information on why we're wanting this feature: this has great value. especially for broadcasters (we are a news station and are working to integrate this player as our new video player) who. by law. have to provide closed captions for live streams. which is currently done through rtmp in our system.,positive
tediousjs/tedious,eslint,2016-09-21T02:35:36Z,converted connector-test.coffee to javascript. eslint is passing. so i hope it's es2015 :),positive
prettier/prettier,eslint,2017-12-14T11:57:23Z,chore(docs): add webstorm setup with eslint integration. as webstorm has already integrated eslint support i find this more easy to setup and might be nice for ohers to know about.,positive
prettier/prettier,eslint,2017-12-14T15:41:42Z,i think that'd be easier as a eslint autofixable rule and run `prettier-eslint`.. that would mean: your code is formatted by prettier and then eslint rules can change the code.you could match `import`s and join the statement in a single line.,positive
prettier/prettier,eslint,2017-12-14T21:10:38Z,mitermayer i don't mind labeling as high priority. but that doesn't mean anyone will want to work on this...i haven't tried. but i believe it's kinda hard to bisect (for each flow commit. build the parser. link to prettier. link to draft-js codebase. run `eslint`) and it's not guaranteed find something actionable in the end.,negative
prettier/prettier,eslint,2017-12-14T22:33:53Z,don't use eslint-plugin-prettier's config. that should be considered deprecated as it breaks formatters like prettier-vscode and prettier-atom which use the `resolveconfig` api.,neutral
prettier/prettier,eslint,2017-12-18T10:10:50Z,convert eslint config and users/languages/editors files to yaml. yaml is much cleaner. easier to edit. and more diff-friendly than json. hopefully this will prevent merge conflicts with people adding new users to prettier.io,neutral
prettier/prettier,eslint,2017-12-18T11:49:50Z,add `root: true` to .eslintrc.yml. this ensures that peoples’ eslint configurations in parent directories aren’t used when linting prettier.,positive
prettier/prettier,eslint,2017-12-18T22:28:56Z,bakkot oh. to clarify: i think that the only property keys that should ever be quoted are non-identifiers; in other words. adding and removing a key never changes the quoting of any other key. airbnb doesn't use any of eslint's "consistent" options; only the "as-needed" option.,neutral
prettier/prettier,eslint,2017-12-19T05:58:43Z,for posterity: if prettier can become compatible with airbnb's styleguide. which means that it will allow configuration where we differ. both now and in the future. wherever eslint can not be used afterwards to clean up differences. then airbnb is indeed interested in using prettier.,positive
prettier/prettier,eslint,2017-12-19T20:42:50Z,austinkelleher honestly it's not something i. nor many people i've worked with. have run into. many different styles of syntax "happen" to help with an arbitrary regex or some other pattern. but it's not really a big enough issue to crack open something as big as a style change here for function definitions.ljharb i don't see what the issue is using prettier and eslint. use eslint-prettier-config (or whatever it's called) to disable the formatting-specific rules in eslint and you use both for what they are good at.you do lose determinism. the use case i show above would show up all over the place - prettier broke the function across lines but then somebody removes arguments and it's left expanded across lines. now in code reviews you'll have "the function definition fits on one line - please collapse it". these these show up all over the place. i don't see how eslint helps with determinism - use it for what its good at. which is analyzing semantics. and don't use it for formatting. that's prettier's official stance. prettier should always output y no matter what is in x. that's what the determinism means. you objectively lose that the more and more you depend on what's in x.adding another option. especially something that huge. is not an option imho. when somebody uses prettier they expect a certain output. that would be such a huge change that you don't really know what style a project has even though it uses prettier. right now you can generally know what style you're going to get. even though options tweak very small things like quotes. and even though we've added some options. i hope we're still embracing relatively zero config. there's always an option to fork. i still that's the way to go if you want a space after `function`. or some other large change like changing when it collapses things. that's the beauty of open source. it should be relatively easy to maintain and rebase changes on newer updates of prettier; those kinds of things are usually relatively small code tweaks. in my current app i've forked several popular open-source projects to tweak things for how i want them to work. i think that's a more ideal situation than trying to cater to the enormous size of the entire js community.,positive
prettier/prettier,eslint,2017-12-19T20:49:27Z,jlongster the issue is that when "the choice of multiline" is an explicit developer intention. and prettier removes that. eslint can no longer have any idea that that choice was made in the first place. disabling the formatting-specific rules in eslint doesn't work unless prettier exactly matches our configuration for those rules - which it decidedly does not. if/when we're able to get prettier working at airbnb (and with our public config). it will be with disabling zero eslint rules only.certainly this would require losing some determinism in prettier when the option i'm asking for is enabled. if adding an option like this is a nonstarter. then that's something we'll have to consider. however. the goal would not be that "prettier implies x style". it would be that "prettier-eslint implies x style".regarding a space after `function`; eslint already handles that for us. so there's no need to fork - the only place where that becomes a possibly necessity is when prettier is destroying information that eslint can not restore: namely. collapsing things (destroying the developer's intention to make it multiline) and removing parens (destroying the developer's intention to add the unnecessary parens for whatever reason).i think that the ease of forking is a wonderful thing about open source; but that doesn't mean forking has no cost. forking a project and constantly rebasing on top of the upstream is a very expensive thing to do. and in general *isn't* good for the overall ecosystem (when shared broadly - when it's done inside a single app for your own use. sure. go for it).,positive
prettier/prettier,eslint,2017-12-19T21:00:09Z,i think it's written in the instructions. that if you want to combine prettier with eslint you have to disable all the formatting rules.. if you don't. then you are on your own i guess..,positive
prettier/prettier,eslint,2017-12-19T21:36:42Z,lipis we've made some changes to eslint itself in the last month that makes that not true. currently you don't have to disable *any* of the formatting rules if they're configured correctly. and you use prettier-eslint.,negative
prettier/prettier,eslint,2017-12-20T10:03:15Z,need a way for a plugin (e.g. our own javascript support) to support multiple parsers that map to one printer.e.g. we have parsers:* `babylon`* `flow-parser`* `typescript-eslint-parser`and soon `babylon`'s `typescript` plugin will be compatible.which all output a similar ast. we have two "languages" here: `javascript` and `typescript`.all of them map to the same printer. (let's call it `estree` after the ast it serializes)could it look something like this?```jsexport const languages = [  {    name: 'javascript'.    // first would be the default?    parsers: ['babylon'. 'flow'].    astformat: 'estree'.  }.  {    name: 'typescript'.    parsers: ['typescript-eslint'. ['babylon'. { extraplugins: ['typescript'] }]].    astformat: 'estree'.  }.];export const parsers = {  babylon: parsewithbabylon.  flow: parsewithflow.  'typescript-eslint': parsewithtsep.};export const printers = {  estree: {    print: printasttodoc.    embed: embedfromestree.  }.};```then we can support a generic `--parser.javascript flow` option for the current `--parser flow` use case.,negative
prettier/prettier,eslint,2017-12-22T23:08:00Z,i haven't got it to work at all in vs code with format on save. my eslintrc extends standard but when i save a .vue file semicolons get added :(,neutral
prettier/prettier,eslint,2017-12-24T12:49:28Z,stevealee do you have prettier preferences set within your user settings in vs code? this is what mine looks like:```json{"editor.detectindentation": true."editor.fontfamily": "operator mono"."editor.fontsize": 17."editor.formatonsave": true."editor.formatonpaste": true."editor.wordwrap": "on"."workbench.colortheme": "cobalt2"."prettier.singlequote": true."prettier.semi": false."prettier.usetabs": true."prettier.tabwidth": 4."prettier.trailingcomma": "none"."prettier.eslintintegration": true."prettier.ignorepath": "package.json"."files.associations": {"*.js": "javascriptreact"}."workbench.startupeditor": "welcomepage"."files.autosave": "off"."sublimetextkeymap.promptv3features": true."editor.multicursormodifier": "ctrlcmd"."editor.snippetsuggestions": "top"."window.zoomlevel": 0."[javascript]": {}}```,neutral
prettier/prettier,eslint,2017-12-26T02:59:22Z,i wonder if we should be recommending `.prettierrc.js` or `prettier.config.js`. the latter seems to be more common. but eslint uses the former.,neutral
prettier/prettier,eslint,2017-12-26T03:26:30Z,i came to the same conclusion that it should be `.prettierrc.js` because eslint uses `.eslintrc.js`.  why do they both exist?,neutral
prettier/prettier,eslint,2017-12-26T12:00:16Z,we don't add options for this kind of thing (see #40). i'd suggest using eslint (prettier-eslint) to do this.,neutral
prettier/prettier,eslint,2017-12-29T20:35:16Z,this is a huge can of worms. at facebook we're in the process of solving it via an eslint plugin with autofix that reorders all the require/imports but it's been difficult.there's a bunch of cases where you have imports and code mixed together. how do you define when imports end? do you force a new line after each group of imports?```jsimport { myconstants } from 'myconstants';const { a. b. c } = myconstants;import ...;```same for exports. they are often in between the code. so it's not as clear when to put a \n.my gut feeling is that we're unlikely going to find something that works all the time and if/when we do so. it's going to be very complex and not provide a ton of value compared to the frustration it's going to cause. but i could be wrong :),negative
prettier/prettier,eslint,2018-01-04T05:59:38Z,i'm sorry i did not catch the fix or workaround for this issue.until now i just wrap an ugly `/* eslint-disable indent */` around ternary operators.it would be very  (*nice*) if someone could remind how to deal this.,negative
prettier/prettier,eslint,2018-01-08T14:42:25Z,what about copying eslint's approach when you try to lint ignored files? `0:0  warning  file ignored because of a matching ignore pattern. use "--no-ignore" to override`or negated pattern as proposed above.,neutral
prettier/prettier,eslint,2018-01-09T04:57:42Z,seems `.prettierignore` doesn't not work for `eslint-plugin-prettier`.how can i ignore `*.vue` for `eslint-plugin-prettier`.,negative
prettier/prettier,eslint,2018-01-09T06:20:11Z,jasonxia23  use `.eslintignore`.,neutral
prettier/prettier,eslint,2018-01-11T17:04:25Z,we would also have to be careful not to move `// eslint-disable-line` comments.,neutral
prettier/prettier,eslint,2018-01-11T17:07:20Z,…and `eslint-disable-next-line` and `tslint:disable-line` and `istanbul ignore next` and `prettier-ignore`. etc.,neutral
reactivestack/cookies,sauce,2017-11-15T14:08:22Z,yes. the errors say that the account has no permission to start the sauce tests (```{"message": "not authorized"}```).likely the repo owner has not renewed their plan at saucelabs and this why (all of) the saucelabs tests are failing.,negative
reactivestack/cookies,sauce,2017-11-23T02:23:42Z,open source projects are free with saucelabs so the plan should not be an issue. i'll take a look. this is anoying i agree.,negative
docpad/docpad,standard,2014-12-11T04:01:29Z,+1 for this. ready to merge. providing `--no-color` is implemented?,neutral
sequelize/sequelize,mocha,2014-03-21T00:33:42Z,i'll mess around with it a bit more to see if i can give a bit more info.. i've not done much testing yet as far as tdd/bdd goes (getting started with it using mocha/chai).,neutral
sequelize/sequelize,eslint,2017-11-25T07:12:12Z,release: missing eslint rules around spacing. <!-- thanks for wanting to fix something on sequelize - we already love you long time!please fill in the template below.if unsure about something. just do as best as you're able.if your pr only contains changes to documentation. you may skip the template below.-->### pull request check-list_please make sure to review and check all of these items:_- [ ] does `npm run test` or `npm run test-dialect` pass with this change (including linting)?- [ ] does the description below contain a link to an existing issue (closes #[issue]) or a description of the issue you are solving?- [ ] have you added new tests to prevent regressions?- [ ] is a documentation update included (if this change modifies existing apis. or introduces new ones)?- [ ] did you follow the commit message conventions explained in [contributing.md](../contributing.md)?<!-- note: these things are not required to open a pr and can be done afterwards / while the pr is open. -->### description of change<!-- please provide a description of the change here. -->,neutral
TryGhost/Ghost,mocha,2015-02-18T19:08:01Z,> in theory it would be better from ember-cli's perspective if the tests were in the "normal" locationi know we had this discussion a few months back regarding the location of ember tests. and i was in favor of the path of least resistance then (i.e.. locating them under `/client`). and i have to say that after working with ember-cli that i'm _really_ in favor of doing it now.i was able to get all the client tests running (and passing!) via `ember test` in like 20 minutes using ember-cli-mocha and ember-mocha.  i wasted that much time just trying to guess what to change in our current customized setup (and didn't get anything close to working).**edit**also. that weird problem i've been having where i can't test the rendered output of a component is gone when running the tests under ember-cli.,negative
workshopper/learnyounode,standard,2017-06-02T05:05:27Z,ok. it looks like it is now failing on the official node.js document generator api that is part of the offline document api. otherwise it seems to be working as intended. i could go through those files. and change them all to standard if needed. and it should remove any of the ci errors.actually. going to check out this eexists issue first.,positive
workshopper/learnyounode,standard,2017-06-02T05:12:31Z,ok. i see now. it is catching the fs.stat error which isn't an actual error. let me quiet that down. and see if it will ignore the standard on the official after that. fix coming up.,negative
caolan/async,mocha,2016-02-17T00:08:11Z,we test `lib/` with nodeunit and mocha using babel to compile the es modules.  we have a simple smoke-test for the compiled output (cjs. umd. and es formats).,neutral
caolan/async,mocha,2016-02-24T00:43:28Z,modularization is now on master. so no weird branch to consider now!,negative
caolan/async,mocha,2016-02-24T08:56:56Z,thanks for the heads up. i will submit a new pr soon.,positive
caolan/async,mocha,2016-02-24T12:04:09Z,cool jorgebay. by the way. it might make sense to implement this via `async.some` as you can accomplish the same result with `some`,neutral
caolan/async,mocha,2016-02-24T23:39:26Z,yeah. but heads up. we also want to change the arguments for `some` and family to take an error in the callback. #118,neutral
caolan/async,mocha,2016-02-26T11:15:30Z,async.race module. based on the discussion from #568 .contains mocha-based tests and readme update.same as #1018 but using modules.,neutral
caolan/async,mocha,2016-03-06T22:42:48Z,i'm still :100: on this. but master has changed significantly.  can you re-do the work?  it also would be nice if you added a `mocha_test` too.,positive
caolan/async,mocha,2016-03-06T22:44:38Z,sure. i'll redo this and add a mocha test as well :+1:,positive
caolan/async,mocha,2016-03-07T04:14:10Z,re-did this to support the new master and added a mocha test. i did some refactoring as well to the original code to make it clearer.,neutral
gaearon/react-hot-loader,mocha,2017-09-16T20:55:47Z,thelordhighexecutioner thanks but we will update all dependencies. not just mocha.,positive
JedWatson/react-select,eslint,2018-04-20T12:56:02Z,welp. i'm pretty sure i didn't `npm uninstall eslint`. so not sure what's up with travis :/,negative
smartsheet-platform/smartsheet-javascript-sdk,mocha,2018-06-08T19:08:23Z,cve-2017-16042 - fix growl vulnerability. updates the `mocha` and `gulp-mocha` packages.  watch the build to ensure nothing's been broken elsewhere.,negative
nightwatchjs/nightwatch,mocha,2016-04-05T09:16:01Z,question: tags & mocha runner. is it possible to use nightwatch tags with the mocha test runner? if so. how?,neutral
nightwatchjs/nightwatch,mocha,2016-04-05T10:31:16Z,not at the moment.,neutral
buildo/react-components,eslint,2016-09-10T17:15:23Z,replace ad-hoc eslint globals with jest env. as per title## test planci passes,neutral
videojs/videojs-youtube,sauce,2014-12-20T12:30:19Z,the saucelabs tests are now working fine. no need to rewrite everything.,positive
angular-fullstack/generator-angular-fullstack,karma,2015-03-05T02:13:59Z,add an injector target to inject bower components file into karma.conf. this will bring convenience instead of adding js file to karma.conf manually. but it also will bring an new issue of not ensuring all required files is added. and unnecessary css files is added in.,neutral
alexa-js/alexa-app,mocha,2016-12-16T20:47:50Z,gurpreetatwal would love to see a pr. you got my attention now.,positive
alexa-js/alexa-app,mocha,2016-12-16T23:31:08Z,i'll start working on it in about a week. are you taking over the maintenance of this repo now? i'd love to help with that if you like,positive
alexa-js/alexa-app,mocha,2016-12-17T00:08:28Z,thanks. i'm just helping out. i do have committer rights and such. i know matt-kruse is considering making an org and expanding the circle of friends. so looking forward!,positive
alexa-js/alexa-app,mocha,2017-01-02T19:40:53Z,i agree. these are mine.  out of curiosity do these reproduce for you locally?  i do not get them running mocha on my box (obviously or i wouldn't have put this up for pr to begin with).  i'm trying to decide if this is a build script issue. or my box issue and then a general code issue.,neutral
cure53/DOMPurify,karma,2016-05-03T08:20:28Z,run tests using jsdom on travis and the local-test script. also see #149 perhaps you could push this branch as a branch on cure53/dompurify to make sure that travis succeeds? this pr will of course also trigger a travis run. but without the karma tests.,positive
cure53/DOMPurify,karma,2016-05-03T09:52:54Z,awesome. checking now!,positive
cure53/DOMPurify,karma,2016-05-03T14:30:07Z,cool!,positive
zeromq/zeromq.js,mocha,2016-09-16T08:52:07Z,reduce mocha timeout. we could even go with a shorter timeout since we use `travis/appveyor_retry`.,neutral
Hacker0x01/react-datepicker,eslint,2018-06-19T13:11:20Z,is there any update on the status of this pr?,neutral
Hacker0x01/react-datepicker,eslint,2018-06-21T19:48:36Z,colinrcummings friendly poke for update on this pr,positive
Hacker0x01/react-datepicker,eslint,2018-06-21T20:42:25Z,cc aij,neutral
Hacker0x01/react-datepicker,eslint,2018-06-22T14:32:23Z,sorry. didn't catch this as it was failing some checks. merged it now!,negative
webpack/webpack,standard,2017-05-11T03:54:34Z,kevinokerlund. the problem with this plugin is that it modifies the behavior of es modules in a non standard way.also. because webpack ends up consuming commonjs modules. it cannot perform tree-shaking optimizations anymore (even though tree-shaking is only partially working so far)..,negative
webpack/webpack,uglify,2018-09-10T13:08:17Z,yep these warnings are pre-existing in `next`. they are from the uglifyjs-webpack-plugin (`--trace-deprecation` if you want details). it doesn't support webpack 5 yet. which deprecates some stuff.,neutral
webpack/webpack,uglify,2018-09-10T13:09:33Z,not sure if it makes sense to fix it in `uglifyjs-webpack-plugin` since it should be replaced anyway (which this issue is actually about).,neutral
webpack/webpack,uglify,2018-09-24T15:19:51Z,i really like google closure compiler and rollup approach that just create local variables and just rename variables as necessary to avoid collision. i know that just encapsulating every module in its own function is easier but it comes with a cost.when every export is just a variable declaration. a lot of tools like uglify will just strip unused variables. eliminating a whole bunch of unused modules.,negative
socketstream/socketstream,mocha,2015-06-01T18:24:16Z,kulicuu isn't that something mocha has documented?,neutral
metarhia/impress,eslint,2017-09-07T02:08:55Z,update eslint config. ###### first committhis commit removes rules from `.eslintrc.yml` in favor of using the`eslint-config-metarhia` package.  three rules are turned off for now.because they trigger lots of linter errors: - `arrow-parens` — forces consistent parens usage in arrow functions - `comma-dangle` — forces vcs- and diff-friendly comma usage - `handle-callback-err` — ensures the errors are handled instead of   being silently ignoredhow these exceptions are handled further is outside the scope of thiscommit/pull request.  former two of them are purely stylistic. but thelatter one points at legitimate potential bugs.`eslint` package has been updated to match what `peerdependencies` of`eslint-config-metarhia` require. and `eslint-plugin-import`. which isalso a part of the config's `peerdependencies`. has been installed.consequently. `eslint-plugin-impress` has been updated too. so that npmdoes not complain at unmet peer dependencies (technically. it isn'tstrongly connected with this patch. since eslint4 has already been usedon `master`. so it must have been complaining already. but given thatthe whole eslint infra is updated here. it kind of fits and is in spiritof the changes).###### second committake it or drop it. it doesn't really matter. similar changes in otherrepos involved migration to json for eslint configuration files. so ihave done it here too.,negative
metarhia/impress,eslint,2017-09-13T01:02:35Z,landed in 6a13521,neutral
acuminous/yadda,mocha,2016-02-19T15:17:55Z,that's a fun one. made more difficult because i took a shortcut with the jasmine plugin. it's really just the mocha plugin since their apis are so similar.a solution for now would be to set the default jasmine timeout to something much larger.going forward what to you think about specifying the timeout with an annotation at scenario level?```step-timeout=5000scenario: etc etc```this timeout would be applied to all steps. not perfect. but better than a global and without doing something crazy with the individual steps.,negative
prebid/Prebid.js,sauce,2016-12-15T13:39:29Z,kumasauce we are not using it at the moment (for completely unrelated reasons that are temporary) - but yes. we used it for months with no change in cpms. and we were happy with how much it reduced the amount of requests and bandwidth consumed.,neutral
canjs/canjs,sauce,2017-05-08T22:59:43Z,sorry morrme. the canjs builds are blocked because of the saucelabs configuration we're using for appium is no longer available. so this became higher priority. i look forward to your future contributions.,negative
tjunnone/npm-check-updates,eslint,2016-02-28T09:02:46Z,provide option to print upgradable packages as a simple list separated by spaces. especially for use with the global (`-g`) option. it would be useful if `ncu` was able to print the upgradable packages as a simple list of package names. separated by spaces. (eg. `babel-eslint eslint grunt-cli jshint jslint`) so that it could be copied and pasted (and manually edited) to be used in an `npm install -g babel-eslint grunt-cli jshint jslint` command (note that `eslint` was removed. as it must not be upgraded).,neutral
tjunnone/npm-check-updates,eslint,2016-02-28T09:14:11Z,btw. currently. i'm using the following. but it's a bit messy.`ncu -g | cut -d' ' -f2 | tr '\n' ' '`,neutral
tjunnone/npm-check-updates,eslint,2016-02-28T15:16:49Z,i just tried that. but the command `ncu -g --jsonall` doesn't output anything.,neutral
tjunnone/npm-check-updates,eslint,2016-02-28T17:25:44Z,yeah. we should fix that.,neutral
nodejs/citgm,eslint,2016-11-23T00:05:19Z,chore: do not double declare eslint. this is being included in both deps and dev-deps,negative
nodejs/citgm,eslint,2016-11-23T00:05:57Z,merging as this change is non controversial,negative
babel/babylon,eslint,2017-06-04T19:41:31Z,personally. i think more smaller projects is much better than one large. bloated. multipurpose project.separately. eslint is useful even when not using babel. and not everyone using babel uses eslint.,positive
babel/babylon,eslint,2017-06-04T20:04:52Z,thanks for your replies.as i understand. technically both `eslint` and `babel` developers can unite efforts to contributing of `acorn`. imho. if several projects use the same piece of software. they should unify it's interface and contribute to it together together.from developer point of view. work can be represented as stream from* compiling from `es6/7/etc` to `es5` according to `babel-env`* linting. static analysis (`eslint`)* minifying (`babili`)so. all tasks can be implemented as `acorn` plugins. isn't it?and. ljharb. management of big "bloated" project is not a problem with proper people.,negative
sasstools/sass-lint,eslint,2016-04-13T07:45:43Z,a question on how to disable a specific rule for a line or a block of lines. in eslint it is possible to disable a rule for a specific line in the following way:var unused; // eslint-disable-line no-unused-varsis there something similar in sass-lint ?also is there a way to disable a rule for a block of lines ?,neutral
sasstools/sass-lint,eslint,2016-04-13T08:03:05Z,not at the moment. please follow #402,neutral
rdf-ext/rdf-ext,mocha,2016-03-06T15:28:14Z,done. but i'd like to check if the test is working fine... the test package lacks of documentation. could you give me a quick hint how to execute the tests? something like `mocha rdf-test-graph/spec.js rdf-graph-array/index.js` i guess? i get a `typeerror: rdf.namednode is not a function`. so the rdf-graph-array implementation is not specified correctly...br.,negative
Automattic/mongoose,mocha,2014-05-31T09:59:45Z,the goal was to 'nodify' all the overheads of testing so you could just run `mocha` and the tests will run.,neutral
pouchdb/pouchdb,uglify,2015-01-10T15:53:14Z,(#3374) - fix some uglify warnings,neutral
pouchdb/pouchdb,uglify,2015-01-10T15:54:43Z,just some unused vars from the output of uglify. the rest are browser browserify and may take a look at fixing,neutral
pouchdb/pouchdb,uglify,2015-01-10T17:56:58Z,looks good. :+1: when green. :),positive
pouchdb/pouchdb,coveralls,2016-04-06T03:31:39Z,lol go home coveralls you so drunk,positive
pouchdb/pouchdb,selenium,2014-07-23T16:07:16Z,(#2519) - increase selenium timeout. default is 60 seconds; maybe 180 will give us more breathing room. especially with saucelabs.,neutral
pouchdb/pouchdb,selenium,2014-08-04T01:55:55Z,bower package way too huge. currently `bower install` grabs the `selenium-server-standalone` as well. which is way too huge for a normal frontend package. is it ok to get rid of it in `bower.json`?imho bower is for end users rather than developers. basically what the end users really uses are those in the `dist` directory. as for developers. they would use `npm` anyway.,negative
pouchdb/pouchdb,jshint,2014-08-12T04:13:47Z,(#2586) - add performance-bundle.js to jshintignore. forgot to do this when i moved it to the tests directory.,neutral
pouchdb/pouchdb,jshint,2014-08-12T22:51:40Z,f678c186813bac3b24df61d41b6f47ef5e7a5de0,neutral
vlucas/frisby,jasmine,2014-08-29T16:10:12Z,dsawardekar vlucas are you implementing this or is this an issue that is still unresolved?,neutral
vlucas/frisby,jasmine,2014-08-30T09:41:31Z,diablomarcus it's resolved for me at the moment. i ended up not needing single runs for the project i was working on at the time.,positive
angular/protractor,jasmine,2016-10-19T20:55:53Z,fix(config): add jasmine option to clear reporters. this adds an option in jasminenodeopts to clear all reportersbefore protractor registers it's own lifecycle reporter.this addresses an issue where the default jasminereporter conflicts with user registered reporters#3609,neutral
angular/protractor,jasmine,2016-10-19T21:00:20Z,we found a contributor license agreement for you (the sender of this pull request). but were unable to find agreements for the commit author(s).  if you authored these. maybe you used a different email address in the git commits than was used to sign the cla ([login here]( to double check)?  if these were authored by someone else. then they will need to sign a cla as well. and confirm that they're okay with these being contributed to google.<!-- need_author_cla -->,neutral
angular/protractor,jasmine,2016-10-19T21:03:06Z,commit was updated with the correct email address for cla.  commit author is the same in both cases.,neutral
angular/protractor,jasmine,2016-10-20T00:04:25Z,hi sakovias. i am having the same issue on with using --grep. did you happen to find any solution to skip beforeall for spec that does not match the grep value?,neutral
angular/protractor,jasmine,2016-10-26T13:46:26Z,awesome! thank you for looking into this. let me know if you would like me to test the fix for you.,positive
angular/protractor,jasmine,2016-10-26T17:57:38Z,dvanderb you'll need to respond with `i signed it!` for googlebot to check your cla,neutral
angular/protractor,jasmine,2016-11-10T13:07:20Z,for #3726 to fix this. we need to modify jasminewd a bit.,neutral
angular/protractor,selenium,2015-10-16T13:24:55Z,auto starting selenium server does not work with vpn. if we remove seleniumaddress in conf file. it should automatically start selenium server.however. i have been noticing that it doesn't work with vpn.  it stuck at starting server and it eventually time out.  does anyone experience the same?,neutral
angular/protractor,selenium,2015-10-16T14:26:04Z,there's nothing reproducible or actionable in your issue (i use protractor and selenium behind a vpn without problems). i think these sorts of things are best handled outside of the issues queue until we can actually isolate what the issue is.please feel free to update your issue with more details and an isolated problem. but try to keep debugging/discovery questions in more productive channels. keeping the issue queue clean makes it easier to actually solve problems once we know what they are. hopefully that makes sense. i don't mean to come off as dismissive or harsh; i'm just trying to get you help in the most productive way :),positive
angular/protractor,selenium,2015-10-19T16:25:41Z,fwiw. i am experiencing the same issue - i'd happily help try and identify the underlying problem (in the appropriate channel of course :wink: ).,positive
angular/protractor,selenium,2015-10-19T17:27:05Z,i can use protractor. with vpn too. it seems to me that it could be some wrong configuration in your vpn somewhere or in your firewall.,negative
angular/protractor,selenium,2015-10-20T07:22:17Z,as nick said. we're able to run on vpn fine. we can't reproduce this to investigate. i'm going to close this particular issue. but rbirbeck jlin412 if you have a set of steps we can use to repro on a particular vpn. please go ahead and open a new issue listing those. thanks!!,positive
angular/protractor,selenium,2015-10-22T18:55:44Z,the code is evaluated on the selenium server. not within protractor's codebase.,neutral
angular/protractor,selenium,2015-10-23T06:53:35Z,`process.stdin.on('data'. function(chunk) {` - it is nodejs code... webdriver-manager file in protractor's repository... so why it is evaluated on the selenium server?,negative
angular/protractor,selenium,2015-10-23T07:10:01Z,i mean i am wondering how and when 'data' event for `process.stdin` is generated. why does not it wait for receiving of the whole data and shuts down the selenium server by any chunk?,neutral
angular/protractor,selenium,2015-10-23T13:37:11Z,docs(readme): add instructions for starting selenium. trying to contribute something for the first time it wasn't completely obvious how to start a selenium server for running the tests.,neutral
angular/protractor,selenium,2015-10-26T21:23:52Z,merged in at f2371ef,neutral
angular/protractor,selenium,2015-10-28T18:21:46Z,can you explain how this helps. since reading the spec file should tell you the same thing.,neutral
angular/protractor,selenium,2015-10-28T18:33:14Z,this came up in a discussion with some cloud team members. the problem is that when you have a bunch of helper files and page objects. it can be a bit of a pain to find the list of commands that webdriver is seeing.this would be super easy to output if we had a webdriver proxy.,negative
angular/protractor,selenium,2015-10-29T17:20:26Z,nevermind. it was a problem with my selenium-server which was not updated.,neutral
angular/protractor,selenium,2015-11-09T15:04:39Z,its working fine when i use same xpath with my selenium script ..,positive
angular/protractor,selenium,2015-11-10T21:25:02Z,but. you still have to tell them to set the environment variable! i think the better way to solve this is:```  "config": {    "webdriver_manager_selenium_dir": "/abc/def/ghi"  }.  "scripts": {    "pretest":"webdriver-manager update --standalone --out_dir=$npm_package_config_webdriver_manager_selenium_dir"  }```,neutral
angular/protractor,sauce,2014-08-18T21:45:48Z,can i encrypt my saucekey?. i don't want to expose my `saucekey` to the world. is there any way to encrypt it?,negative
angular/protractor,sauce,2014-08-18T21:48:42Z,protractor doesn't support encryption of the key itself. you'll have to do it in some other way and then pass the string in to protractor - you can use the command line args: `--saucekey=$my_encrypted_key`,neutral
angular/protractor,sauce,2014-08-20T23:22:47Z,this isn't strictly true - you only need a tunnel identifier if you are using sauce connect. i think the method of using these is fairly well documented on sauce labs. so i'm not sure the documentation belongs here.,positive
appium/appium-uiautomator2-driver,eslint,2017-04-27T11:46:44Z,can you run the linter and fix the issues?```gulp eslint```,neutral
uber/tchannel-node,standard,2016-06-09T21:14:18Z,using host names as well as ipv4 addresses. right now tchannel accepts only ipv4 addresses to create socket. tchannel uses standard node 'net' module which accepts host names and ipv4 addresses. i believe we should allow users use any format which they want.,neutral
tapjs/node-tap,coveralls,2015-12-23T18:39:43Z,should running tests with coverage fail if coveralls command fails?. i have run into issues today where my tests pass. but coveralls is down. should this actually fail the build or is there a better way of handling an issue such as this?,negative
tapjs/node-tap,coveralls,2015-12-23T23:04:20Z,that's an interesting question.i'm not sure of the answer.  my general tendency is to favor failing if anything didn't go as expected. since otherwise you'll probably not notice. and then be surprised later.you can always re-try the build later when coveralls comes back. right?  maybe this could be a cli option or something?,negative
tapjs/node-tap,coveralls,2015-12-23T23:24:27Z,sure. retrying is no problem and i guess every developer will have his or her own preference on it? was just curious. i may take a look into adding an option in the future. but see no reason for this to stay open. thanks for your response!,positive
tapjs/node-tap,coveralls,2016-01-07T18:18:51Z,wait. so. coveralls can figure out the location without the `coveralls_repo_token`??  that's awesome. i had no idea!is it enough to check if `process.env.travis === '1'` then?  how does it figure it out?,positive
tapjs/node-tap,coveralls,2016-01-07T20:01:53Z,> i still find the coveralls_repo_token support usefulyeah. sure. it's presence should indicate you want it to upload. but it would be nice if that wasn't the only way to trigger it. use cases to cover:- the build is running on travis. but they don't want coverage uploaded (i.e. not using coveralls).- the build is not on travis. but they do want coverage uploaded. the presence of `coveralls_repo _token` is sufficient here.ideally you could reuse the same test script on travis and local dev machines. i've never had a use for uploading to travis from my local machine. so i definitely want `tap` to detect the environment. perhaps the best way to handle this would be to add a `--coveralls-if=travis` (a string flag that conditionally uploads if the specified environment variable is set). `coveralls_repo_token` continues to automatically trigger an upload.> i thought that travis always ran tests with the environment vars you set?"secure" environment variables are not available to pr's. otherwise i could just submit a pr with `console.log(process.env.xxx)` to get your token,neutral
tapjs/node-tap,coveralls,2016-01-07T22:36:51Z,there's basically no downside to uploading to coveralls from ci.the hazard i could see would be if a repo isn't set up with coveralls. what will the failure look like?,negative
jquense/yup,eslint,2018-05-02T10:22:52Z,jquense your solution does not seem to work for me as there are no arguments passed to the function.,neutral
benbria/coffee-coverage,istanbul,2015-12-11T23:34:50Z,yeah. i discovered some of the same stuff shortly after submitting this! at least. that `istanbul` very-usefully already supports multiple `coverage.json` files.i'm going to make a go of it later on. and i'll get back to you as to whether i was able to do it _usefully_ without writing javascript glue.,positive
balderdashy/sails,mocha,2014-01-13T13:30:24Z,validating should return an instance of error object. returning an instance of an error object in the validation callback makes it more aligned with the whole node ecosystem.for example. when running mocha tests like this:``` javascriptmodel.validate(function(err) {  if (err) return done(err);  done();});```the simple error object will trigger an error with mocha itself: `error: done() invoked with non-error: [object object]`,neutral
balderdashy/sails,mocha,2014-01-13T22:09:36Z,just fyi. if you do something like this instead``` javascriptmodel.validate(function (err) {  should.not.exist(err);  done();});```you get a more reasonable error message. i.e.```assertionerror: expected { object (validationerror) } to not exist```,neutral
balderdashy/sails,mocha,2014-01-27T12:22:34Z,set-cookie  for session for unlogged users.. hi.i like so much sails and i decided to use it. and cooperate in its evolution. congratulations!.i am using sails.js with passport.js with passport-local strategy. and use supergagent with mocha and chai for tdd.i expect the session cookie must be setted only on ok login api call.but it is setted on ok and wrong login api call. and on other apicalls that need to satisfy isauthenticated police when i send wrong session cookies. on apicalls sent with good session cookies. the session cookie isn't setted. it's ok for me.tests:1 ) if in the api call to login i send good credentials. the session cookie is setted ok. and works for api calls that need isauthenticated police. it's good.2 ) if in the api call to login i send wrong credentials. the session cookie is setted ( i expect no set-cookie for the session in this situation. ). but this session is wrong. and don't work for api calls that need isauthenticated police. it's so so.3 ) if i send wrong session cookie in the api calls that need isautheticated police. the session cookie is setted ( i expect no set-cookie for the session in this situation. ). but don't work if i use it in other api call that needs isauthenticated police ( i must add this additional test because the unspected set-cookie for session in unathorized apicalls )4 ) if i send ok session cookie ( obtained with a ok login prior api call ). the session cookie isn' t set ( it's ok ). and it works ok in futures api calls that need isauthenticated police. it's good.,positive
ioBroker/ioBroker,mocha,2018-09-05T18:36:05Z,the failure comes from windows/nodejs 10. where the installation of `request mocha chai` for the tests complains about a missing module - i cannot reproduce this on my local machine.everything else is looking good. i'm going to change the paths for the release now. so the following build will most likely fail.,negative
KeitIG/museeks,eslint,2017-02-20T08:49:13Z,comma-dangle: ["error". "always-multiline"]. we should respect this rule with eslint.,positive
cerebral/cerebral,coveralls,2017-05-17T23:23:46Z,that is why i marked it as wip and said that it is only a first step.my concerns was not only about publishing process.you may take a note that this approach doesn't involve long cross linking process that was happen with lerna bootstrap. here we have native module resolution mechanism.script to run tests was removed only because it was used lerna to run and coveralls is not. tests itself not gone. of course tests must be restored.i will prepare a list on what must be restored and improved. and i hope you guys could help with it. really i see a big improvements we can get with this approach.,positive
purifycss/purifycss,eslint,2016-09-30T12:28:55Z,selector regex fix. this fix solves the following:1) eslint octal errors (should be in separate branch really. but i couldn't run the tests without it)2) faulty selector regex - previously limited to only lowercase letters. now includes all valid css classnamesnote: i didn't do negative testing. so these changes _might_ mean that some other errant selector passes the new regex pattern and gets included when it shouldn't. but i don't think that likely.edit: hmm. apparently it now allows certain selectors when it shouldn't. gonna fix that and reopen the pr after i make the changes.,negative
purifycss/purifycss,eslint,2016-09-30T14:39:46Z,ok. i've added a commit that fixes that problem. unfortunately. this breaks one of the existing tests. i'm afraid i don't have the time to hunt down this bug as well. i suspect that with the new regexp. the "join" glue is captured (which probably suggests that there might be more false positives).,negative
keystonejs/keystone,eslint,2015-11-11T18:03:18Z,i'm all for adding both "one var per line" and "require dangling commas" to the linting rules. they both makes is easier to add/remove/reorder rows in arrays and objects and as you say doesn't break in any environments anymore.regarding how to best transition to new conventions; why not just edit `.eslintrc` and let the new rules trigger errors all over the place? whenever you work in an old file that uses the old conventions you probably feel like cleaning it up to get rid of the linting errors. and after a while the whole code base has been transitioned. ;)i think i prefer that than to have different conventions in different files and they all pass the linting rules.,neutral
keystonejs/keystone,eslint,2015-11-16T08:21:57Z,fix eslint error for double quotes,neutral
keystonejs/keystone,eslint,2015-12-10T00:07:13Z,review eslint. - remove nonexistant gulp task from package.json- change various eslint rules- enable recommended ruleset,neutral
keystonejs/keystone,eslint,2015-12-10T02:02:53Z,i like the rules. but definitely feel that the errors need to be addressed before merging this change. don't break the ci checks. =),positive
keystonejs/keystone,sauce,2016-09-28T10:15:55Z,jedwatson tests are only failing because of saucelabs. the push one passes. so if saucelabs wasn't erroring (too many active tunnels) then we'd be passing. can you merge this please?,negative
keystonejs/keystone,sauce,2016-09-29T12:29:39Z,build errors are just saucelabs failing. so i'm going to merge it,negative
keystonejs/keystone,mocha,2014-12-27T01:44:15Z,last time i looked at the mongoose source. i believe it exported a singleton. combined with node's caching of require calls and running `mocha -r test`. i'm sure there is a recipe for disaster in there somewhere.,negative
keystonejs/keystone,mocha,2015-01-05T20:37:02Z,closed due to - not an issue,neutral
rwjblue/ember-template-lint,eslint,2018-06-14T02:00:59Z,only report errors / hide warnings. is it possible to only report errors / hide warnings for the cli? something like the "--quiet" option in eslint?i was looking to integrate this in a ci setup with the "pending" config so my team could start using it. but i found out pretty quick that if there are errors. it also shows all other warnings too! so finding the error in the thousands of warnings doesn't really work. i played around with the code a bit and was able to make such an option. so i could take a crack at making a pr if you guys are open to it?,negative
rwjblue/ember-template-lint,eslint,2018-06-15T03:13:27Z,ya. definitely happy for a pr here...,positive
rwjblue/ember-template-lint,eslint,2018-06-17T23:48:22Z,ignore warnings / only report errors with "--quiet" option. resolves #428 if you pass "--quiet" to the cli. it will now remove warnings from the console output. i also updated the console output to show the number of warnings. like how eslint does:eg: ✖ 3 problems (2 errors. 1 warnings)i understand this may not be desirable in this pr. as each pr should probably implement one feature. so feel free to tell me that. i'm also new to nodejs (but not javascript) and tests in general. so constructive feedback is welcome!,positive
rwjblue/ember-template-lint,eslint,2018-06-18T20:38:40Z,prettier!. - [ ] stand alone `.prettierrc.js`- [ ] plug into eslint,positive
rwjblue/ember-template-lint,eslint,2018-06-18T20:41:54Z,add eslint plugin esque documentation grid to readme.. * list all rules* separate stylistic from rules from safety/error related rules* show which are in the recommended config,neutral
rwjblue/ember-template-lint,eslint,2018-06-18T23:52:44Z,oh! i completely forgot about `--json`. will do!,neutral
rwjblue/ember-template-lint,eslint,2018-06-19T01:57:29Z,rwjblue i have made the requested changes. please review.,positive
rwjblue/ember-template-lint,eslint,2018-06-20T02:25:07Z,rwjblue okay. take another look when you have some time. edit: whoops. accidentally clicked "close" lol.,negative
rwjblue/ember-template-lint,eslint,2018-06-22T00:35:20Z,absolutely!,neutral
rwjblue/ember-template-lint,eslint,2018-06-22T00:48:49Z,i've updated the readme. i think in the future it would be nice to have a section for the arguments you can pass. instead of just throwing more examples to the list  hehe. also. would you like me to rebase onto master?,positive
rwjblue/ember-template-lint,eslint,2018-06-22T00:54:02Z,thank you! i’ll try to get this released in the am (feel free to ping me if i forget )...,positive
rwjblue/ember-template-lint,eslint,2018-06-22T01:16:19Z,you're welcome. and thank-you for the feedback. sir!,positive
nodegit/nodegit,jshint,2015-02-27T18:46:29Z,oh. i didn't run `jshint lib test/tests examples lifecyclescripts`,neutral
haraka/Haraka,eslint,2017-09-02T23:07:16Z,eslint no-useless-escape. a recent release of eslint added `no-useless-escape` to the recommended ruleset. i reduced the severity of it to a warning for now.todo:* [ ] go through the list of warnings and fix them.* [ ] remove the rule from .eslint.json,neutral
haraka/Haraka,eslint,2017-09-02T23:28:26Z,> wow! it wasn't as bad as i thought. the first couple commits were `eslint --fix`. which caught the majority of cases. i didn't see a single error made by `--fix`. what it did do is leave behind quite a few manual changes. but they were straight forward: either hoist the const/let or add block scope to a switch/case with `{}`.,negative
haraka/Haraka,eslint,2017-09-03T01:35:28Z,so what i would like to do. if you agree. is push a quick point release for the outbound fixes before merging this. thoughts?> on sep 2. 2017. at 7:28 pm. matt simerson <notificationsgithub.com> wrote:> > wow!> > > > it wasn't as bad as i thought. the first couple commits were eslint --fix. which caught the majority of cases. i didn't see a single error made by --fix. what it did do is leave behind quite a few manual changes. but they were straight forward: either hoist the const/let or add block scope to a switch/case with {}.> > —> you are receiving this because you are subscribed to this thread.> reply to this email directly. view it on github. or mute the thread.>,negative
haraka/Haraka,eslint,2017-09-03T22:56:31Z,> the only thing i'd be adamant on is putting the eslint-disable comments at the top of the filei strongly disagree. putting them inside the scope they effect limits them to only the section of code that needs the exception. as well as making it way more obvious **why** they are needed. (hey ya'll. this chunk of code right here is an exception to the rule). it's no matter though. because i've removed them all as they were only needed before i found and set prefer-const's ignorereadbeforeassign option.,negative
jakubpawlowicz/clean-css,jshint,2013-08-16T06:47:05Z,update .npmignore.. remove the now removed .jshintrc and add .npmignore.,neutral
jakubpawlowicz/clean-css,jshint,2013-08-16T06:53:41Z,goalsmashers: which of the two ways do you prefer?,neutral
jakubpawlowicz/clean-css,jshint,2013-08-16T21:04:20Z,whitelisting is nicer so the `package.json` way seems better. could you merge both commits?,positive
jakubpawlowicz/clean-css,jshint,2013-08-17T05:44:06Z,done.,neutral
jakubpawlowicz/clean-css,jshint,2013-08-17T08:22:35Z,cool. just to be sure. `package.json` is included by default. right?,positive
jakubpawlowicz/clean-css,jshint,2013-08-17T08:26:53Z,```c:\users\xmr\appdata\roaming\npm\node_modules\clean-css>dir /bbinhistory.mdindex.jsliblicensenode_modulespackage.jsonreadme.md```,neutral
jakubpawlowicz/clean-css,jshint,2013-08-17T08:30:12Z,fair enough.,neutral
bitpay/bitcore,mocha,2014-11-21T13:18:01Z,code: ackmocha: 3194 passingindex.html: passes: 3166,neutral
bitpay/bitcore,mocha,2014-11-25T14:08:03Z,mocha tests: 245 passingcode: ack,neutral
bitpay/bitcore,coveralls,2015-01-23T02:23:53Z,change coveralls token,neutral
bitpay/bitcore,coveralls,2015-02-06T14:23:49Z,lgtm. waiting for coveralls,neutral
admc/wd,selenium,2015-01-20T20:53:53Z,add info about selenium server to docs. re: #266,neutral
admc/wd,selenium,2015-01-21T17:46:47Z,looks like you guys need to fix the build..,positive
admc/wd,selenium,2015-01-23T10:23:48Z,is there any possibility to get text from ui like gettext() command in selenium?,neutral
admc/wd,selenium,2015-01-23T12:52:06Z,it is a selenium client.,neutral
admc/wd,selenium,2015-01-30T02:01:36Z,check the selenium log. maybe it's some backlash missing in your binary path.,neutral
admc/wd,sauce,2013-10-08T02:35:10Z,wd doesn't support the sauce 'tunnel-identifier' desiredcapability. this is useful if you are running multiple tunnels and want to specify the one you want.,positive
admc/wd,sauce,2013-10-08T09:10:36Z,what does `wd` need to do? had a quick look at the doc. looks like passing it as desired parameter in `init`. and starting `sauce connect` with a special parameter should work.,neutral
admc/wd,sauce,2013-10-10T03:37:31Z,we are using this feature with intern and it works fine.,positive
admc/wd,sauce,2013-10-10T06:49:12Z,confirmed to work here too.make sure you pass the option as part of the desiredcapabilities hash. at the same level as "browsername" etc.le 10 oct. 2013 à 05:37. colin snover notificationsgithub.com a écrit :> we are using this feature with intern and it works fine.> > —> reply to this email directly or view it on github.,positive
angular-ui/bootstrap,karma,2013-11-25T19:52:29Z,run tests on both jqlite and jquery. from what i understand ui bootstrap is supposed to work without jquery. i suggest that we run jqlite tests as well.the specs would be able to run both with and without jquery. and karma should have two configurations (jquery and jqlite).i'll need to see how difficult this is. one way is to transition slowly by only adding the specs that are compatible with the jqlite testing in the jqlite karma config file.,negative
angular-ui/bootstrap,karma,2013-11-25T19:59:03Z,chrisirhc good idea. i was already beaten once or twice by different behaviors of jquery and jqlite. the real issue. though. is that we are using jquery selectors to use dom-based testing and replacing it would be rather hard. maybe the following trick would work: we should load jquery _after_ angularjs (so it is using jqlite) and explicitly use `jquery` when needed. but it all would require a bit of gymnastic so i'm not sure it is worth it in the end. feel free to play with the code to see what you can come up with.we could easily have a separate karma config for ci. this is not an issue.,negative
angular-ui/bootstrap,karma,2013-11-25T21:30:23Z,pkozlowski-opensource just wrap them:```  function contents() {    return $(elm).find('div.tab-content div.tab-pane');  }```,neutral
angular-ui/bootstrap,karma,2013-11-28T07:32:56Z,pkozlowski-opensource i started pr #1318 refactoring specs (only typeahead for now) to be able to run tests based with jquery/jqlite. let me know your opinion,neutral
pypyjs/pypyjs,selenium,2015-12-17T06:48:15Z,oh. gotcha. i didn't know about `exec`. thanks for the help. it's working just fine now.,positive
angular/angular-cli,jasmine,2017-05-04T13:46:28Z,most of these are karma / jasmine issues rather than cli issues.at the moment the cli is committed to only supporting one test tooling chain. which is karma and jasmine. since there cannot be hidden 100% like a bundler is (because you use the test framework apis in your tests). the choice is also exposed to the users. this has nice side effects like:- you can easily add / replace karma reports in karma config- you have full control over the `test.ts` file used to run the testsalso. if you agree to give up calling `ng test` (replacing it with a `test` npm script for example. so you just run `npm test`). you can easily move away to jest if you prefer to. i have tried it myself in a medium size real project and found it pretty easy.it's worth mentioning that the built in jasmine html reporter does allow you to click on a single test or suite of tests and only have these run. and the cli itself supports a watch mode (enabled by default actually. and can be changed either per cli call. or by changing the default in karma config). it's not a jest-style watch for changed files only. but that's because it's simply not jest. it's karma + jasmine.,positive
angular/angular-cli,jasmine,2017-05-08T13:13:56Z,it is really odd issue. it seems after i disabled the karma-jasmine-html-reporter. and ran several cases. and then enabled karma-jasmine-html-reporter again. it suddenly works.,negative
angular/angular-cli,jasmine,2017-05-09T02:32:42Z,filipesilva i can reproduce this on a new machine. just follow the steps wind13 gave. although i got my macbook work. today i ran into this on a linux machine as well. and it seems it did not get around this by disabling and enabling karma-jasmine-html-reporter.,neutral
angular/angular-cli,uglify,2018-04-23T13:38:26Z,+1,neutral
kirjs/react-highcharts,mocha,2016-03-25T19:13:17Z,running without webpack. i am having a problem with importing highcharts/highstock without webpack.i am importing highstock like this```import reacthighstock from 'react-highcharts/bundle/reacthighstock.src';```and then using it like this (amongst other ways)```reacthighstock.highcharts.setoptions(theme);```this works correctly when bundled with webpack.when ran without it. via mocha. everything still works except the shown import. which does now equal some webpack object.i really need to run my tests directly without first running through webpack. how can i do that?,neutral
kirjs/react-highcharts,mocha,2016-03-28T17:27:22Z,try require maybe instead of import?,neutral
kirjs/react-highcharts,mocha,2016-03-28T19:33:20Z,oh. i forgot to mention it but i also tried require and it seems it worked exactly as 'import'. no difference whatsoever.it took me some time to figure it out. but it is definitely very weird. no other component in a big project exhibited such behavior.,negative
cssinjs/jss,codecov,2016-12-13T23:37:37Z,maybe it would be much simpler to just add coverage for jss itself here and for all other repositories separately in the corresponding repository the same way. should be easy. right?,neutral
bbc/bbc-a11y,standard,2017-11-15T15:39:01Z,i'm happy to change the wording. but there are many other instances of 'standard' in the code. so i would argue this makes the language _less_ consistent without a lot more replacement. do you think there any cases where the word 'standard' is correct. or can we replace all cases?,negative
bbc/bbc-a11y,standard,2017-11-15T15:47:43Z,hi josh.i think we need to change all occurrences of "standard" for "guideline". once the new team site goes live (soon!) then the html v2 standards will be going away and becoming a guide.long term we'll have "guides and guidelines" where the guides are all platform specific guides to how to confirm to the guidelines. hope that helps.jamie + lion,positive
bbc/bbc-a11y,standard,2017-11-15T16:21:52Z,agree that referring to the guidelines as standards needs to be changed. i'm always wary of sweeping find-all-and-replace. however. as they sometimes pick up uses of a word that are correct and should not be changed.,neutral
bbc/bbc-a11y,standard,2017-12-01T14:32:47Z,move minimum text size under content resizing for now(and update manual testing questions - e),neutral
bbc/bbc-a11y,standard,2017-12-01T14:34:42Z,review docs,neutral
bbc/bbc-a11y,standard,2017-12-01T15:04:23Z,fantastic work josh! it's really taking shape well. last few points to wrap up and this should be good to merge. make the repo public again. and get the pre-release created.,positive
onsip/SIP.js,eslint,2018-07-12T16:00:18Z,travis is reporting it can't find "eslint" on node 6. but it worked on previous passes. i recently saw this on another project and the fix was clear travis's cache.could someone clear out the travis cache for this pr please?,positive
gatsbyjs/gatsby,eslint,2016-07-26T16:38:23Z,oh so sorry about this... we'd run across this same problem elsewhere but missed fixing this one :-( thanks for the pr! i'm sure it'll save a lot of other people trouble.the pr looks great other than an eslint error. if you could fix that. i'll get this merged and cut a new release.,positive
mcollina/mosca,mocha,2014-06-27T07:18:38Z,that's harder than i thought. as i'm using random to generate a disambiguation id for the message. causing the fact that we may have messages delivered not in order.the 'stop the world' thing you are seeing is mocha trying to calculate the diff between two 16kb buffers.skip that test. i'll work on it.,neutral
pghalliday/grunt-mocha-test,mocha,2013-12-18T14:52:45Z,nested grunt configuration blocks do not work. when i configure grunt-mocha-test using``` javascriptmochatest: {  foo: {    options: [ … ].    src: [ … ]  }}```everything works fine. especially. i am able to run it by calling:```$ grunt mochatest:foo```if i now start to nest things. it doesn't work any more. e.g.. if i use``` javascriptmochatest: {  foo: {    bar: {      options: [ … ].      src: [ … ]    }  }}```and try to run it using```$ grunt mochatest:foo:bar```it does not work. it basically looks as if there were no tests defined. if you run grunt in `--verbose` mode you see that it only looks for `mochatest.foo`. and does not dive down into recursion.is this by design. or is this a bug? either way: how could i accomplish this?,negative
pghalliday/grunt-mocha-test,mocha,2013-12-18T16:40:18Z,no problem. thanks for closing ;),positive
Project-OSRM/osrm-backend,codecov,2017-02-02T08:54:48Z,seems like travis is on its feet again - is there anything to do with regards to the codecov results? (we merely reduced complexity. but it had a side effect on coverage),neutral
photonstorm/phaser,jshint,2014-11-19T23:46:39Z,scalemanager + dom - window constraint updates. scalemanager.windowcontraints now allows specifing 'visual' or 'layout' asthe constraint. using the 'layout' constraint should prevent a mobiledevice from trying to resize the game when zooming.including the the new changes the defaults have been changed to   windowcontraints = { right: 'layout'. bottom: '' }this changes the current scaling behavior as seen in "game scaling" (as itwill only scale for the right edge) but also prevents such scaling fromgoing wonkers in some mobile environtments like the newer android browser.(automatic scroll-to-top. albeit configurable. enabled for non-desktop bydefault is not a fun situation here.)to obtain the current semantics on a desktop the bottom should be changedto 'layout'; although this will result in different behavior depending onmobile device. to make the sizing also follow mobile zooming they shouldbe changed to 'visual'.also added temp rectangle re-used for various internal calculations.---phaser.dom now also special-cases desktops to align the layout boundscorrectly (this may disagree with css breakpoints but it aligns the withactual css width). without applying a window height/width expansion asrequired on mobile browsers.(and the jshint error isn't mine..),neutral
npm/npm,standard,2016-01-25T13:07:40Z,discuss npm install behaviour: do not install locally if available globally. i would like to discuss here this feature.if approved. i could try to implement it. it does not look so complex.if i do `npm install` and a package. for instance _standard_. is in my devdependencies. but it is available globally. it would be nice if npm skips the local installation (which takes time) since the _standard_ package is already available globally.this could be governed by a flag. something like `npm install --skip-packages-available-globally` which is too verbose by now. just to have an idea.,neutral
npm/npm,standard,2016-01-25T22:36:16Z,for the case of libraries -- node does not have a global search path. for the case of a command line tool like this. there may be a use case. but it seems too narrow to really save any time on the larger scale. since even some of those prefer to be installed locally per project.the use-case is even narrower when you take into account semver compatibility -- you might end up with a subset of subset of projects that are actually able to use this. and the optimization from having npm3's flattening already does a ton to easy this (along with our local caching).all-in-all. i can see the intent of this feature and really appreciate it. but it's very likely not something that would make it into the cli as far as my understanding of it goes. thanks for taking the time to write up the feature. as that is already appreciated <3,positive
npm/npm,standard,2016-01-26T23:53:11Z,offer a standard scripting interface for package / lifecycle scripts. this has been discussed in many places. but i'm not sure that it's been filed as a feature request now: the current cross-platform behavior requires people writing package scripts to use a very tightly-constrained subset of shell scripting syntax so that both windows and unix users can use the same scripts. this basically would involve choosing a simple subset of shell command syntax and then wrapping that around something like `shelljs`. thealphanerd had some thoughts as well.see also #1543 (add a `npm exec`). which is closely related.,negative
npm/npm,standard,2016-02-03T08:52:21Z,igorminar set angular as peer dependency of your polyfill. and let the user explicitly depend on both angular and the polyfill and require both and somehow pass at runtime the polyfill to angular.it's the standard peerdependency feature (at least now in npm3): the user is in control.,neutral
npm/npm,standard,2016-02-06T01:26:05Z,(instead of command being `shjs`. maybe `shell` is fine.),neutral
npm/npm,coveralls,2016-11-15T01:22:21Z,while it's interesting to see the current coverage of the cli code base. i'm not going to take this pull request. this is because. in my judgment. i don't believe that advertising the coverage level is currently useful or actionable for the cli's users. coverage has been at around 85% pretty much since we finished fixing up the test suite to run under travis. and that's not super great. this is even despite the fact that we have several thousand individual test cases in the test suite. and pretty extensive integration test coverage.the team insists that new changes come with tests. even if writing them is fairly complex. this process frequently needs a lot of support from the team. because npm's internal architecture is unwieldy in a way that makes writing traditional unit tests difficult – you either have to do a significant amount of redesign of the relevant cli code. or you end up having to do fairly tricksy mocking within the module cache. also. as a cli tool.  a lot of the tests are written to drive npm from the command line. which makes the test suite slow (and. because a lot of them end up doing similar things. makes it tough to safely parallelize tests. as you suggest in #14431).because writing good tests for npm requires an intimate familiarity with the cli's internals. the core team pretty much needs to be in the loop to review any sizable changes to the test suite. also. given the idiosyncrasies of the code base (which the team is working diligently to reduce over time). new tests need a certain amount of vetting to ensure that they're testing the right things. this makes improving the coverage of the test suite a slow. incremental process. and one that requires a lot of time and attention from the core contributors.as a result. the coverage number is stubbornly slow to increase. and the project isn't in a place where we can really delegate to process of improving that coverage (which is not to say that the team wouldn't _tremendously_ appreciate it if contributors took the initiative to write the missing tests – we would :heart:love:heart: this. were it to happen). as such. having a crappy coverage number at the head of the readme would be more of a discouraging reminder of how many different ways our time and attention are split right now more than any kind of encouragement. we do very much care about the direction the coverage arrow is pointing. but the actual number itself is less interesting / helpful right now.thanks for your time and attention. and please. if you are interested in helping us get the coverage number up. by all means contribute new tests! we're happy to work with you. time permitting. to understand the bits of the architecture that make it challenging to write tests. and we appreciate all help in making the code easier to test. see #14431 for more thoughts on switching test frameworks.,positive
npm/npm,coveralls,2016-11-15T01:51:01Z,> if coverage isn't a concern. then why have it at all? it's either important. or not important.it's important to the cli team. but maybe not so important or relevant to people not on the team. is what i'm saying.,negative
npm/npm,coveralls,2016-11-15T01:51:55Z,as to the rest. improving the contributors' documentation is high on my list of things to do. but so are many other things. i'll try to get to that before the end of the year. if at all possible. it's absolutely important.,positive
mishoo/UglifyJS2,uglify,2013-12-06T12:51:55Z,browserify+uglify test case proposal. if apply uglify after browserify. then often errors. for example:```(function(it/**/) {return"<div"+t.printattributes()+">"+t.printcontrols()+"</div>"})```i do not know why this happens. but the errors of various types. may be necessary to add this combination browserify+uglify in test cases?,negative
mishoo/UglifyJS2,uglify,2013-12-06T13:29:38Z,what is the error?,neutral
mishoo/UglifyJS2,uglify,2013-12-06T14:04:56Z,oops. perhaps i was mistaken....sorry. uglify was not the cause of the error.,negative
mishoo/UglifyJS2,uglify,2013-12-13T14:30:24Z,`drop_console` is not a supported option. drop_console option with --compile  doesn't work`$ uglifyjs scripts/scripts.js --compress drop_console=true``'drop_console' is not a supported optionsupported options:{ sequences: true.  properties: true.  dead_code: true.  drop_debugger: true.  unsafe: false.  unsafe_comps: false.  conditionals: true.  comparisons: true.  evaluate: true.  booleans: true.  loops: true.  unused: true.  hoist_funs: true.  hoist_vars: false.  if_return: true.  join_vars: true.  cascade: true.  side_effects: true.  pure_getters: false.  pure_funcs: null.  negate_iife: true.  screw_ie8: false.  warnings: true.  global_defs: {} }`,positive
mishoo/UglifyJS2,uglify,2013-12-13T15:22:30Z,that is up to mishoo :),neutral
mishoo/UglifyJS2,uglify,2013-12-13T15:25:49Z,hehe. ok thanks anyway. closing...,positive
mishoo/UglifyJS2,uglify,2013-12-19T01:51:42Z,futurereservedword "yield" in es5 strict mode. this code :``` javascript"use strict";var foo = {    'yield' : 1};```will be :``` javascript"use strict"var foo={yield:1}```after uglify compress.because of the 'yield' is one of `futurereservedword` in es5 strict mode. the code compressed will cause an error in some android browser like this:> uncaught syntaxerror: unexpected strict mode reserved word at xxx.js:2,negative
mishoo/UglifyJS2,uglify,2013-12-22T03:22:32Z,doesn't```uglifyjs file.js -c warnings=false -m```work?and if you're using the api:```var ast = new uglifyjs.compressor({ warnings: false });```,neutral
mishoo/UglifyJS2,uglify,2013-12-22T18:12:05Z,how old are those android browsers? (it's ie8 all over again...),neutral
mishoo/UglifyJS2,uglify,2013-12-22T18:45:30Z,it's a glitch in how our argument parsing works.  the `--mangle` flag takes optional arguments. and the file name is interpreted as an argument to `mangle` if it follows it immediately.  i admit it's not exactly nice. but that's how things are at the moment.the workaround is to pass the file(s) first. for example:```uglifyjs a.js b.js c.js --mangle --compress```,negative
mishoo/UglifyJS2,uglify,2013-12-22T18:53:37Z,mzgol stupid indeed. but as long as we claim to be ie8-compatible. the issue is valid.  use `--screw-ie8` if you don't care about it. ;-),positive
mishoo/UglifyJS2,uglify,2013-12-23T02:41:40Z,ok. let's make sure that uglify only handles "_regular_ js code" correctly.,neutral
mishoo/UglifyJS2,uglify,2013-12-23T13:26:08Z,allow configuration in a file. either a "uglify.config.js" or just inside of "package.json". let us store config options instead of having to pass them on the command line.,neutral
mishoo/UglifyJS2,uglify,2013-12-23T13:27:08Z,option (or default) to add trailing new-line to output. git (and other scm's) complain about lack of trailing new-line. i manually have to add the new-line to the end of uglify output. which sucks. can we have this as a default. or at least as an option?,neutral
mishoo/UglifyJS2,uglify,2013-12-23T13:29:43Z,i don't think you should care about newlines for minified files.,neutral
mishoo/UglifyJS2,uglify,2013-12-23T13:31:40Z,i do care about them because i include a pre-minified file in my repo. and i don't like git complaining needlessly.,negative
mishoo/UglifyJS2,uglify,2013-12-24T09:31:42Z,agree but a name like `.uglifyrc` is better i think. just like this guys:  - `.bowerrc`- `.jshintrc`- `.jsbeautifyrc`although the `package.json` file option is the best.,neutral
mishoo/UglifyJS2,uglify,2013-12-24T13:47:11Z,agreed on both points. +1,neutral
mishoo/UglifyJS2,uglify,2013-12-29T22:33:08Z,agreed with rvanvelzen. it's simple to change your `uglify ...` invocation to a `(uglify ...; echo)` invocation.,neutral
mishoo/UglifyJS2,uglify,2013-12-29T23:52:01Z,mzgol: because my program. `process.exit(+!function(a){}.length);` exits successfully before minification. but with an error code after passing through uglifyjs. all i did was program according to standards.,negative
mishoo/UglifyJS2,uglify,2013-12-30T04:06:51Z,not quite so simple when you're **not** running uglify manually from the command line. but are instead running it through automated utilities like grunt attached to a watch. etc.what's the harm in a simple feature addition like this?---for the record. i don't like that git complains about trailing new-lines. i think it's stupid to need them. but that ship sailed long ago. and it's frustrating to have an otherwise pretty useful utility like uglify thumb their nose at that precedent when it probably would take less than 30 bytes of logic to address. **and again**. it'd be an option that defaulted off so it has no danger to anyone who doesn't want it.,negative
valor-software/ng2-dragula,karma,2017-05-08T17:03:34Z,issue with karma test related to angular/cli change - need to update karma.conf.js,neutral
konvajs/konva,mocha,2015-08-24T11:15:56Z,lavrton any comments?,neutral
konvajs/konva,mocha,2015-08-24T13:42:24Z,hello. i am already trying to merge request. now i have some failed tests. so i need time to look what is going on.,negative
konvajs/konva,mocha,2015-08-28T03:12:25Z,thanks. now need to create an tutorial for site.,positive
konvajs/konva,mocha,2015-08-28T21:54:12Z,lavrton yep. i try to do it in the near future.,neutral
konvajs/konva,mocha,2015-08-28T21:54:52Z,wait for release,neutral
testem/testem,mocha,2013-09-16T13:24:30Z,thanks. this is a recent breakage. will try to sort it out asap.,positive
testem/testem,mocha,2013-09-16T14:01:15Z,please test the fix.,positive
DevExpress/testcafe,mocha,2017-07-20T17:22:55Z,> i also noticed a new typescript program is created for each file. this might not be the fastest way...we are investigating it in context of the #1591,neutral
DevExpress/testcafe,mocha,2017-08-08T15:25:31Z,i'd really like to use both jest and testcafe and typescript. and the currently problem regarding duplicate types (aka `types/jest/index.d.ts (23. 13): subsequent variable declarations must have the same type.  variable 'test' must be of type 'testfn'. but here has type 'it'`) is a show stopper.i think it would be helpful if testcafe could use a local test directory tsconfig.json that would allow specifying types.,positive
DevExpress/testcafe,mocha,2017-08-08T21:20:10Z,hotell ah. ok. i'll try your `tsc && ...` trick tomorrow. i can imagine it will work. thanks.,positive
DevExpress/testcafe,mocha,2017-08-09T13:30:42Z,mike-packetwerk  cheers mate!,positive
DevExpress/testcafe,sauce,2016-05-17T12:45:28Z,adding to the previous comment: it's reproduced only on saucelabs virtual machines with ios device emulators. it's **not** reproduced on macbook and browserstack,neutral
DevExpress/testcafe,sauce,2016-05-19T10:05:24Z,unfortunately `resize` functional tests will not work on travis+saucelabs because they are run on remote browsers (the testcafe server and browsers are run on different machines). this is actual for `take screenshot` tests too.we have to remove these tests now. but i see a possible way how we can implement ci testing for this. but it will take some time.,negative
DevExpress/testcafe,sauce,2016-05-19T16:55:03Z,discovered the following behavior on the android simulator platform:overriding a native dialog method. like in the example below. will make the native environment call the overriden method. this leads to an unexpected dialog error being raised. and tests where we check that an error wasn't raised fail.window.alert = function() {};this is only reproduced on saucelabs vm's with automated testing in the webview browser.,neutral
DevExpress/testcafe,sauce,2016-06-02T15:05:53Z,i think it makes sense to have basic saucelabs browser provider as a poc before merging this. more likely we will encounter some caveats which will affect final design.,neutral
DevExpress/testcafe,sauce,2016-06-02T16:21:11Z,thinking of it a little bit i guess we should completely get rid of `browser` entity. let's move all logic in browser to `browserproviderhost`. we will use browser connection id as browser id (just switch to short-id). and btw afair we decided to get rid of local browser connection. we need new machinery which will decide on provider-level if we need to actually close browsers or not. because e.g. saucelabs will have remote connections. but we need to gracefully close browsers for it. like we do for local,positive
oddbird/true,mocha,2017-02-03T19:56:10Z,unexpected rule type "font-face"; looking for module header. in our sass files we define the font-face using a bourbon mixin.`include font-face(...)`and then assign that font to a variable and use it where need be.using `grunt mochacli` i am getting the error in the title. i imagine true is trying to interpret `include font-face` font-face as a rule or a test? do you guys have a workaround for this?,negative
oddbird/true,mocha,2017-02-03T21:38:56Z,this is related to #74 (true doesn't like arbitrary output) and would require improvements to the parsing logic used for mocha. carljm do you want to weigh in on that? i'd love to see a pr for it. 'cause it's outside my skillset. :p the workaround right now is that you should only import sass files without output. and only use mixins inside a test.,positive
seek-oss/sku,uglify,2018-04-18T01:28:51Z,chore(config): disable comment perserving in uglifyjs. remove many preserving comments containing /*!. /**!. preserve or license that we don't need and reduce bundle size```js * react.production.min.js * * copyright (c) 2013-present. facebook. inc. * * this source code is licensed under the mit license found in the * license file in the root directory of this source tree. */```look at this mess in main.js ☝️,negative
mochajs/mocha,mocha,2013-09-08T07:00:13Z,visionmedia you said your interested in this change.if i were to do i would be tempted to have the intermediate format be tap. so you could do `mocha --tap | reporter-dot` with tap on stdout & tap on stdinobviously there would be a js api and `mocha --dot` needs to work.the only breaking change would be "how to write custom reporters" and maybe default mocha to tap.alternatively we can have a json like tap interface on stdout & stdin.if i work on this i'll probably not do all reporters at the same time but do them a bunch at the time and get the ball rolling earlier.,neutral
mochajs/mocha,mocha,2013-09-11T01:30:29Z,the problem with tap is that it encodes a fraction of the information that mocha provides and that mocha-reporters consume.  it wouldn't be that much of a stretch to envision a really nice format for structured test logs as newline delimited json.  that would be much easier to extend with all the additional information.,positive
mochajs/mocha,mocha,2013-09-11T01:32:21Z,yeah that's the thing you'd have to augment tap. making it super ugly and not very useful to tap consumers that aren't familiar with the format. i'd love the change but i don't think we should use tap. it would just end up being json-infused tap haha,positive
mochajs/mocha,mocha,2013-09-11T01:34:35Z,you could support tap by essentially doing tap + json comments.  i don't think there would be any real point though as the reporters wouldn't be tap compatible,neutral
mochajs/mocha,mocha,2013-09-11T01:39:03Z,tough call. i think the best action to take would be to allow these assertion libraries to hook into mocha. i'm not a fan of the done(callback) sort of thing,negative
mochajs/mocha,mocha,2013-09-11T01:46:10Z,plus tap isn't really all that popular. node is about it. most cis don't consume tap. so we're not losing much. they all have their own crazy-ass weird format. it's too bad we don't have test-anything-json because then you could augment it at will without making the test labels super ugly,negative
mochajs/mocha,mocha,2013-09-11T07:21:58Z,if anyone has a suggestion for the new line delimited json format i"ll use that.otherwise i'll use whatever mocha does. i'll probably get the reporters to understand tap as well since that will make them work with tape for my use case,positive
mochajs/mocha,mocha,2013-09-13T13:03:27Z,visionmedia now with |test-integration| which will not use mocha itself to verify the sanity of mocha (just for this bug at the moment),neutral
mochajs/mocha,mocha,2013-09-14T20:45:42Z,i like the walking up idea. what about conflicting files: e.g. `mocha test/acceptance test/compiler`. each dir with its own mocha.opts? perhaps this case's behavior can be undefined or first mocha.opts found.,neutral
mochajs/mocha,mocha,2013-09-14T23:07:21Z,imo this should be done with complete process isolation. you could use json-stream or the json reporter and exec(). plus then that keeps mocha lighter. win-win situation :d,neutral
mochajs/mocha,mocha,2013-09-15T00:39:44Z,bitwiseman yep.mcandre you need to call the mocha in bin.,neutral
mochajs/mocha,mocha,2013-09-15T05:08:30Z,a (minor) disadvantage of doing it with exec is that the path to the executable ends up being different depending on whether mocha is globally or locally installed. for example. i could put mocha as a dependency in package.json and always put the exec path as "./node_modules/.bin/mocha". which would end up ignoring globally-installed mocha if the user has one.the bigger disadvantage is that if i just pipe the output out to my host process. i lose the colors and formatting. if i use the json reporter for the child process as you suggest. it is not possible to re-use mocha's existing reporters on the output and i'd have to format it myself.i don't see how this change makes mocha not light. and given the above disadvantages i would like you to reconsider.,negative
mochajs/mocha,mocha,2013-09-20T14:04:06Z,exception in a reporter silently crashes mocha. if a reporter raises an exception. mocha just stops without any error message. an example reporter demonstrating the problem (needs a failing test in the suite):```module.exports = crash;var spec = require('mocha/lib/reporters/spec');function crash(runner) {    spec.call(this. runner);    runner.on('fail'. function(test. err){        throw new error();    });}crash.prototype.__proto__ = spec.prototype;```,negative
mochajs/mocha,mocha,2013-09-20T14:18:53Z,a custom reporter using async functionality is not possible. currently. a third-party reporter using asynchronous calls is not possible. see the following example (failing tests required):```module.exports = async;var spec = require('mocha/lib/reporters/spec');function async(runner) {    spec.call(this. runner);    runner.on('fail'. function(test. err){        settimeout(function() {            console.log("this should be executed. even though the hook is done");                    }. 2000);    });}async.prototype.__proto__ = spec.prototype;```why this is needed: every kind of asynchronous reporting. from fetching screenshots from selenium to posting stuff to a test results web service.,negative
mochajs/mocha,mocha,2013-09-20T14:29:59Z,apparently. this is something node doesn't do -- will investigate more.,neutral
mochajs/mocha,mocha,2013-09-20T14:58:32Z,i've changed the wiki. so this issue is done.,neutral
mochajs/mocha,mocha,2013-09-22T03:30:48Z,env var likes this typically just check for any value for them to be on. e.g. `mocha_colors=1 mocha test`. and afaik. the process global object shouldn't need to be guarded.,positive
mochajs/mocha,mocha,2013-09-27T01:09:49Z,expose only the specified ui in the browser. i'm happy to add tests for this. but it doesn't look like there are any tests for the browser build--is this the case?commit message:> when instantiated in the browser. mocha registers the "bdd-style"> interface. since an explicit call to the browser-specific `mocha.ui` is> required. the original registration is invalid. prevent that ui from> reacting to the `pre-require` event (and exposing its api).,negative
mochajs/mocha,mocha,2013-10-03T16:00:38Z,i think it would be great to have the filename in the test object.,positive
mochajs/mocha,istanbul,2017-09-05T07:19:05Z,oh. wait. we *do* use `istanbul-combine`.  my bad.,negative
casperjs/casperjs,eslint,2015-11-16T10:41:34Z,from what i can see that last travis result is an error (`couldn't resolve host 'github.com'`) as opposed to the previous eslint failure. would someone be able to kick off this run again? thanks,negative
casperjs/casperjs,eslint,2015-11-21T11:41:30Z,updated eslint. adjusted some settings (e.g. comment markers).,neutral
node-schedule/node-schedule,eslint,2015-11-01T07:51:21Z,good point about git blame / dissect. i will fix the current eslint config (it is broken- true/false should not be there. it's a 0-2 scale iirc). add strict mode. and use module.exports in a separate filesmaller diff is preferred,negative
NaturalNode/natural,jasmine,2014-10-24T15:13:04Z,external dependencies are:    "lodash" : "_".    "fs" : "_".    "log4js": "_".    "typeof": "_"plus jasmine-node for testing.files you need are:from lib:agenda.jschartparser.jscykparser.jsearleyitem.jsgrammarparser.jsleftcornerparser.jschart.jscyk_item.jsdoubledotteditem.jsearleyparser.jsgoalitem.jsheadcornerparser.jspeg-grammar-for-unification-grammar.txtand from spec:chartparser_spec.jschart_spec.jscykparser_spec.jsearleyitem_spec.jsgrammarparser_spec.jsheadcornerparser_spec.jshugo,neutral
karma-runner/karma-sauce-launcher,karma,2014-10-23T17:51:55Z,i am not actively using this tool right now so i would like to delegate the merge to someone else. i wonder about having 'team' be the default though. i think sauce defaults to setting the visibility to 'public' for open sauce accounts and 'private' for private accounts. so it may make sense to not have a default.,negative
karma-runner/karma-sauce-launcher,karma,2014-10-24T06:07:27Z,good point chriswren. i removed the default visibility and updated the pull request.,positive
wix/detox,mocha,2017-07-15T23:06:12Z,what about just for now use `xcrun simctl io booted screenshot testid.png` in the mochajs tests?,neutral
wix/detox,mocha,2017-07-31T06:45:21Z,rotemmiz i just download the detox demo . and run it with the guide. but **command failed: node_modules/.bin/mocha e2e --opts e2e/mocha.opts --configuration ios.sim.release** always happened,negative
ipfs/js-ipfs,uglify,2018-07-02T19:59:26Z,this was solved by adding the following to `uglifyoptions`:`compress: { unused: false }`,neutral
chentsulin/electron-react-boilerplate,standard,2017-11-22T14:14:07Z,app icon in development vs production. hi!i just build an app using this boilerplate and i added a custom icon in main.dev.js where is makes a new broswerwindow. but whenever i build it it says application icon not found uses standard electron icon. am i missing a place?`  mainwindow = new browserwindow({    show: false.    width: 1170.    height: 728.    icon: __dirname + '/icon.png'.    autohidemenubar: true  });`,negative
chentsulin/electron-react-boilerplate,standard,2017-12-01T08:54:43Z,hi.i integrate react-intl in my app ! maybe i can help !,neutral
chentsulin/electron-react-boilerplate,eslint,2016-07-21T23:30:21Z,no. actually the only reason of creating separate config file for eslint is that eslint doesn't use babel or any other transpiler to be able to deal with es6 stuff (import\export statements in particular).and `require('babel-register');` in `webpack.config.eslint.js` allows us to enable transpiler on the fly and require es6 modules like `./webpack.config.development`.,neutral
chentsulin/electron-react-boilerplate,eslint,2016-08-02T01:39:15Z,install eslint v3 and plugins. #320. #319 . #318 . #317. #287need fix: `import/no-extraneous-dependencies`,neutral
chentsulin/electron-react-boilerplate,eslint,2016-08-03T06:36:31Z,what do you think about turning off this specific config?,neutral
chentsulin/electron-react-boilerplate,eslint,2016-08-03T16:09:26Z,ok. already disable it. so should pass the linter now.,neutral
chentsulin/electron-react-boilerplate,eslint,2016-08-08T10:56:32Z,unify/fix .eslintrc quotation. eslint wants it's property keys doublequoted.,neutral
chentsulin/electron-react-boilerplate,eslint,2016-08-08T11:12:48Z,thanks,positive
AnalyticalGraphicsInc/cesium,eslint,2018-06-27T13:40:52Z,please merge in master. also looks like you have some eslint issues.,neutral
AnalyticalGraphicsInc/cesium,eslint,2018-06-28T21:38:00Z,fixed the eslint error,neutral
GoogleCloudPlatform/nodejs-docs-samples,jshint,2016-03-16T21:56:18Z,ty for the extra review justin/jon (3 names that start with j in the review btw) i addressed all review comments. jshint passes. i think one of the travis jobs is about to fail due to a flaky datastore test. lmk if you think i can merge anyway. trying to help techwriter get something to point to.,negative
GoogleCloudPlatform/nodejs-docs-samples,mocha,2016-06-30T05:10:38Z,switch back to mocha from ava.,neutral
GoogleCloudPlatform/nodejs-docs-samples,mocha,2016-06-30T16:26:08Z,lgtm. it's a test-only change.,neutral
xtuple/xtuple-extensions,mocha,2014-08-18T13:50:58Z,fix bi mocha test timeout,neutral
moment/moment,coveralls,2016-02-12T18:37:32Z,bump.despite #2778. coveralls is still not working.,neutral
walmartlabs/eslint-config-defaults,eslint,2016-08-22T20:07:51Z,deprecation notice. this project has been replaced by `eslint-config-walmart`. maintaining copies of other people's config is neither useful or helpful at this point.ryan-roemer kenwheeler jchip,positive
walmartlabs/eslint-config-defaults,eslint,2016-08-22T20:08:41Z,.,neutral
walmartlabs/eslint-config-defaults,eslint,2016-08-22T21:49:41Z,:+1:,neutral
react-boilerplate/react-boilerplate,karma,2016-12-25T10:35:22Z,debug karma tests in webstorm. hiis anybody was successful to debug karma tests in webstorm?i successfully run karma tests in webstorm but breakpoints do not work in usual way. i mean debug which is described in docs/general/faq.md,positive
react-boilerplate/react-boilerplate,coveralls,2016-09-22T22:41:04Z,mxstbr no problem. excited for the move to jest/enzyme!,positive
OpenZeppelin/zeppelin-solidity,eslint,2018-07-26T15:40:53Z,woot. moving towards a more consistent coding style always makes me happy. thanks justuswilhelm!could you add the relevant [eslint]( rules to the `.eslintrc` file? i think some of them are missing at the moment. like the newline at eof one.,neutral
OpenZeppelin/zeppelin-solidity,eslint,2018-07-27T02:33:46Z,nventuro i've checked and made the eslint rules a tiny bit more specific :) we should be all good now.,positive
stripe/stripe-node,eslint,2018-05-31T18:32:08Z,brandur-stripe apparently i had no idea how eslint actually worked. :joy:,positive
stripe/stripe-node,eslint,2018-05-31T22:31:38Z,> brandur-stripe apparently i had no idea how eslint actually worked. haha. you and me both!ptal jlomas-stripe,positive
bbyars/mountebank,coveralls,2016-05-08T05:52:33Z,hmm. looks like coveralls isn't picking up the error handling code as being covered. probably because it is throwing an exception. not sure how to work around that.,negative
bbyars/mountebank,coveralls,2016-05-09T00:03:09Z,don't worry about coveralls. you provided plenty of test coverage - the fact that you figured out how to add the the documentation test is impressive. coveralls is just looking at unit test coverage which isn't necessarily the most important to me.,negative
vvo/selenium-standalone,selenium,2015-04-03T23:23:20Z,after installing `xvfb` and `selenium-standalone` and run the command above. i get this error:```$ xvfb-run --server-args="-screen 0. 1366x768x24" selenium-standalone startexecvp(): no such file or directoryevents.js:72        throw er; // unhandled 'error' event              ^error: spawn enoent    at errnoexception (child_process.js:980:11)    at process.childprocess._handle.onexit (child_process.js:771:34)```looks like `selenium-standalone start` is the problem. i have already done `selenium-standalone install` successfully.,negative
vvo/selenium-standalone,selenium,2015-04-06T15:30:35Z,correct. when i run `selenium-standalone start` on my ubuntu server i get this:```$ selenium-standalone startexecvp(): no such file or directoryevents.js:72        throw er; // unhandled 'error' event              ^error: spawn enoent    at errnoexception (child_process.js:980:11)    at process.childprocess._handle.onexit (child_process.js:771:34)```,negative
vvo/selenium-standalone,selenium,2015-04-07T07:45:49Z,great answer for future reference,positive
vvo/selenium-standalone,selenium,2015-04-15T12:49:12Z,i get a similare issue when calling this code:``` jsvar selenium = require('selenium-standalone');selenium.start({spawnoptions: {stdio: 'inherit'}}. function(err. child) {     // code section never called...});```callback never called...,neutral
vvo/selenium-standalone,selenium,2015-04-16T14:28:47Z,gghez can you open a separate issue? did you `selenium-standalone install` or install via programmatic api before trying to start? let me know in a separate issue,neutral
vvo/selenium-standalone,selenium,2015-04-17T12:49:09Z,programmatic .start() does not resolve. i get an issue when calling this code:``` jsvar selenium = require('selenium-standalone');selenium.start({spawnoptions: {stdio: 'inherit'}}. function(err. child) {     // code section never called...});```callback never called... i'm currently forced to use `selenium-standalone start` command which works fine (but i then need to encapsulate in a `spawn` call :()i try this code after either calling `.install()` or executing `selenium-standalone install`.,negative
vvo/selenium-standalone,selenium,2015-04-17T21:11:54Z,my reasoning is probably a unique case.  basically. my selenium hub is a separate docker container. linked to the nodes in the form of add'l docker containers.  (so the grid itself will fail if selenium hub doesn't start appropriately.)  i've reverted that last commit and kept my changes as just the check-started.js change + unit tests... with your approval we can merge.,negative
vvo/selenium-standalone,selenium,2015-04-22T13:23:41Z,here's how i did it. if anyone is interested:``` js  before(function (done) {    selenium.install({      logger: function (message) { console.log(message); }    }. function () {      selenium.start(function (err. child) {        if (err) { throw (err); }        selenium.child = child;        client = webdriverio.remote(clientoptions)          .init()          .url(':9000'. done);      });    });  });```(this is mocha + webdriverio + selenium-standalone.),negative
vvo/selenium-standalone,selenium,2015-04-24T14:44:13Z,gghez can you create a github repo where i could easily reproduce the behavior? thanks,positive
vvo/selenium-standalone,selenium,2015-04-25T13:39:29Z,> it should not complain about it since by default we pass a noop if no logger givenit's complaining if no argument is passed. but passes if i pass it an empty object.``` jsrequire('selenium-standalone').install({});```,negative
vvo/selenium-standalone,selenium,2015-04-25T16:13:46Z,add integration example gulp + webdriverio + mocha. selenium-standalone was a missing ingredient in my workflow. so i wrote a post about integrating it with webdriverio + gulp + mocha.at first i was struggling a bit because the recommended usage seemed to be installing and running it globally. and i wanted to run it programmatically to minimize any global deps. finally. i came up this and it seems to work very well.if you don't think it's useful. feel free to close :wink:,negative
vvo/selenium-standalone,selenium,2015-04-26T08:32:24Z,this is great. thanks a lot :),positive
vvo/selenium-standalone,selenium,2015-04-26T08:37:31Z,binarykitchen if you run the program that's using selenium.start() using xvfb it should work. otherwise reopen,neutral
vvo/selenium-standalone,selenium,2015-04-27T10:24:06Z,as soon as i get time to envolve myself. unfortunately not for the moment.,negative
vvo/selenium-standalone,selenium,2015-04-27T16:18:45Z,programmatically and headlessly. hey there.```xvfb-run --server-args="-screen 0. 1366x768x24" selenium-standalone start```works fantastic on my linux server. however. i'd like to now use the programattic api on my linux server. is there a way to do that?i currently have ```selenium.install({    logger: function (message) {        console.log('log:'. message);    }}. function (err) {    selenium.start(function (err. child) {        selenium.child = child;    });});```but i know i probably need to use `xvfb-run` somehow. i'm just not sure how. any ideas?,negative
vvo/selenium-standalone,selenium,2015-04-27T18:43:10Z,shtirlits. vvo did anyone ever solve this? i'm having the same issue where my local ip is not being proxied even then i passed the proxy arguments via `seleniumargs`. could the chrome driver just be ignoring the arguments and using the machine's ip?,negative
vvo/selenium-standalone,mocha,2015-04-08T20:00:16Z,seems fine. what do you mean by > would like to also wrap unit tests around the getseleniumhub function in check-started.js but need a little help getting my understanding of mocha kickstarted...? programmatic usage seems to be fine. you did not break anything. wonder how we could add a unit test for this.,positive
TypeStrong/ts-loader,mocha,2016-02-26T15:36:27Z,unfortunately i don't personally use any of those technologies (angular. karma. ~~mocha~~ (doh)). i'll leave this open in case anybody else can help and i'll try to take a deeper look at some point but i'm not sure how much help i can be.,negative
oliviertassinari/babel-plugin-transform-react-remove-prop-types,eslint,2016-11-11T21:45:25Z,shouldn't this be a eslint plugin ?. excuse me if i'm completely missing the point here. but. this seems like a bit of an after the fact solution. in one way you could almost says it promotes not cleaning up your code. if your declare a proptype and then don't use it in your compoment. essentially it's an unused param. and it should be highlighted or removed from the code trough eslint.,negative
oliviertassinari/babel-plugin-transform-react-remove-prop-types,eslint,2016-11-11T22:08:39Z,> excuse me if i'm completely missing the point herei think you do miss it  .the point is to have an eslint rule enforcing the use of `proptypes`.you want to do it as `proptypes` are defining a clear api of your isolated component.the thing is this code is only useful in development. it doesn't worth anything in production.and worth. it's costing you bandwidth. parsing and evaluation time.i'm gonna refer to the readme:> ### the problem solved> > remove unnecessary react proptypes from the production build. you can save **bandwidth** by removing them.,negative
oliviertassinari/babel-plugin-transform-react-remove-prop-types,eslint,2016-11-11T22:11:54Z,oliviertassinari but in the example in the readme you show a compoment that does not use the foo proptype ( meaning is essentially an unused prop ). my argument is that you shouldn't have written the foo proptype in the first place ( or remove it ).is this a bad example then ?``` jsxconst baz = () => (  <div />);baz.proptypes = {  foo: react.proptypes.string};```,neutral
oliviertassinari/babel-plugin-transform-react-remove-prop-types,eslint,2016-11-11T22:13:19Z,helmus oh right. it's not a great example!,positive
oliviertassinari/babel-plugin-transform-react-remove-prop-types,eslint,2016-11-11T22:15:22Z,thanks. i have updated the readme.,positive
nathanboktae/mocha-phantomjs,mocha,2016-02-17T22:59:23Z,ok so when you say "you write browser tests in mocha" you would just in your mocha tests work with the dom (window. ect). not the phantomjs page object?  yea i'm probably needing casper or zombie...,neutral
nathanboktae/mocha-phantomjs,mocha,2016-02-17T23:07:29Z,i think it would be very helpful to have more of an intro on your mocha-phantomjs page.  for someone new to this. you just dive into getting it installed and really don't explain the use case for using it or use cases.  i get that it allows you to run mocha tests in the browser. ok fine but then what's the use case around that with tests.  i think it would be helpful to show examples of mocha tests.  the tests that are core to moch-phantomjs lib doesn't work with any dom elements. etc. because it's core code. so having some additional test examples using mocha running in the .html would be nice.  just a suggestion,positive
nathanboktae/mocha-phantomjs,mocha,2016-02-25T12:17:00Z,there is another point i forgot to mention - when i run the tests in browser (using mocha.run) it works fine. the stats on top of the html update fine. the problem appears only with running tests using command line - mochaphantomjs.run()i can safely say that there is no infinite loop. because commenting out any random test seems to get it working.also. the ci system killing is not a problem because i get the same problem when running it from command line.i will be looking to possibly debug this. any pointers in that direction will be very helpful.thanks!,positive
nathanboktae/mocha-phantomjs,mocha,2016-02-29T03:19:26Z,edit package.json nocha -> mocha. fixing a minor typo in the package.json description.,neutral
nathanboktae/mocha-phantomjs,mocha,2016-03-01T07:45:53Z,yes it is.,neutral
firebase/emberfire,mocha,2015-02-27T16:18:59Z,we now use `ember-cli-mocha`,neutral
typicode/husky,standard,2017-09-05T16:29:34Z,i think pr must be closed :) just realized that `scope feature` is usable only for pre-commit case and can be implemented much more simpler way:```    // package.json    ...    "precommit": "npm run -s is_changed && lint-staged || true".    "is_changed": "[ $((git diff head --name-only; git ls-files -o --exclude-standard --modified) | grep '^src' | wc -l) -ne 0 ]".    ...```,neutral
nteract/nteract,mocha,2016-09-05T05:25:41Z,not quite. i ended up resorting to switching to electron-mocha which breaks coverage reporting.,neutral
andyearnshaw/Intl.js,sauce,2014-09-05T22:56:14Z,travis is failing due to saucelab for what i can tell. need a hand on that!,negative
andyearnshaw/Intl.js,sauce,2014-09-05T22:58:31Z,> travis is failing due to saucelab for what i can tell. need a hand on that!saucelabs + travis doesn't work on prs because of the credential issues.,negative
hoodiehq/hoodie,sauce,2014-07-02T14:43:02Z,i believe that's an internal error. will check logs at saucelabs.,negative
cucumber/cucumber-js,jasmine,2013-09-06T20:27:05Z,thank you for this pr. we definitely need to be able to attach listeners from inside support code and probably hooks as well. however. i'm not convinced we should expose the runtime instance to the end users; this is internal stuff. what about exposing another method on the support code helper (i.e. the object holding definestep(). given(). world. etc.)? ```this.registerlistener(mylistener);this.before(...```it would be more consistent with the rest of the api. imo.  wdyt?,negative
cucumber/cucumber-js,jasmine,2013-09-06T22:55:51Z,thanks for your feedback.  i understand your argument for appropriately restricting the api.  if i understand your suggestion. support code with this.registerlistener(mylistener) would have a listener registered.  as a user would i add this to a step definition?it may be a bit odd if users commingle their registerlistener functionality with step definitions.  cucumber-js may want to encourage the use of a common.js. listeners.js. or similar pattern.  and if i understand the world constructor correctly (that the last this.world assignment wins) it may be useful to put the world constructor there as well.i'd also like to add a list of event name strings to listeners.event (e.g. listeners.event.beforescenerio = 'beforescenerio') to assist in code completion and prevent typo frustration.let me know what you think.  i'm ready to move forward w/ the discussed code changes.,positive
vector-im/riot-web,standard,2017-03-21T17:22:44Z,check for updates feature for electron app. would be nice if the app automatically checked for updates and had the standard menu item option for checking for updates so users don't have to follow the project on github or twitter to know when new releases are available.,positive
vector-im/riot-web,standard,2017-03-22T14:26:24Z,i thought it diddbkr ?,neutral
vector-im/riot-web,standard,2017-03-22T18:11:03Z,triaged as a: - bug (because it's a bug if as suspected this is an established feature that's not working) - p2 (because not picking up changes is something we should definitely fix soon if it's really happening) - major (because the whole 'feature' of detecting updates is broken. even if the desktop riot is still quite usable despite the failure)from the conversation above it _sounds_ like maybe everything's fine. but waiting on dbkr to verify that this is a feature that should exist before then spending any time checking if there's been a regression.,negative
vector-im/riot-web,standard,2017-04-06T13:09:18Z,how necessary will this be once rte is standard?,neutral
appium/appium,selenium,2014-12-15T14:32:48Z,hi paymand thanks for the suggestion – just tried. i believe that the method is setvalue in java. but it's giving me an error that the method is not yet implemented...i'm casting the webelement to a mobileelement which apparently is necessary. jlipps can you assist? i'm not really a selenium expert. apologies if it's a dumb question with an obvious answer.i should mention though that i'm using a real android device. if that makes a difference...,negative
appium/appium,selenium,2014-12-17T16:13:27Z,hi jlipps . i just got the same error on our system.we are running with selenium grid.could you guide me what information do you need on triaging the problem?thanks!,neutral
appium/appium,selenium,2015-01-05T05:59:25Z,javascriptexecutor not working for android application testing (appium). hi .i'm working on testing an android app.i can't find any important parameters to find elements.it contains only class name and index .i tried xpath also but wasn't work so i'm trying it to execute it from javascriptexecutor...code is..```if (appiumdriver instanceof javascriptexecutor) {    js = (javascriptexecutor)appiumdriver;     system.out.println("instance found");}js.executescript("var list = document.getelementsbyclassname(\"android.view.view\");         list[5].click(); ");```when i run this code an error occurred said .error message: org.openqa.selenium.webdriverexception: not yet implemented. please help us:  (warning: the server did not provide any stack trace information)i google it but some blogs said i can't use js in appium(android),negative
appium/appium,selenium,2015-01-07T08:50:44Z,you can simply do this by using the following command driver.navigate().back();,neutral
appium/appium,selenium,2015-01-07T09:08:17Z,failed searching element on android by id. hii am trying to use the findelementbyid or findelementbyandroiduiautomator methods of appiumdriver while searching for an element with it's given id taken from ui automator viewer. the field id is taken from resource-id selector but it keep failingis there a way to search by this selector? is it possible to search by id as in the regular  web driver of selenium ?,neutral
appium/appium,selenium,2015-01-09T21:03:12Z,get the ipad safari browser cookies in java/js. hi.can anyone let me know how i can get the ipad safari browser cookies when running the selenium tests in ipad using appium safari launcher and ios-webkit-debug-proxy. i'm running the tests on ipad using intellij on mac.thank you.srujan.,neutral
appium/appium,mocha,2014-12-26T00:05:53Z,hi. guys!it took long time as i needed to wait for next release of opera for android.now the 'opera' device can be tested with tests for 'chrome' device with the following command:device=android browser_name=opera mocha test/functional/android/chromejlipps would you find some time to review this? :),neutral
brunch/brunch,eslint,2016-07-30T07:49:04Z,fix eslint errors (tests). our lint tests weren't passing.this lines of code had the wrong indentation.,negative
brunch/brunch,eslint,2016-07-30T16:05:04Z,shvaikalesh   i've removed the extra braces,neutral
brunch/brunch,eslint,2016-07-30T19:46:01Z,awesome! herenow. thanks for the contribution.,positive
agda/agda-stdlib,standard,2018-07-25T07:50:44Z,wasn't there something about not using the `fromnat` class in the standard library? i can't find any existing instances of `fromnat` anywhere in the current standard library. so while adding one is tempting. i think it might not be taken well?,negative
agda/agda-stdlib,standard,2018-07-25T13:11:24Z,gallais so. including something like the following. with the appropriate imports?```agdalevelnat : number levellevelnat .number.constraint _ = ⊤levelnat .number.fromnat    n = # n```andreasabel i vaguely remember you being opposed to using `agda.builtin.fromnat` in the standard library. could you let me know if and if so why this is the case?,negative
agda/agda-stdlib,standard,2018-07-25T13:36:30Z,you can import the "instance" and then assign it to a proper instance yourself. i.e.```agdaimport level.literalsinstance levelnat = level.literals.levelnat```as far as i know. this is the recommended practice. if you search the standard library. then you will not find a single instance declaration anywhere.,neutral
agda/agda-stdlib,standard,2018-07-25T19:12:25Z,> you can import the "instance" and then assign it to a proper instance yourself>....> as far as i know. this is the recommended practice. if you search the standard library. then you will not find a single instance declaration anywhere.this is indeed the current policy (see #33).  it might well be a throwback to the when the instance feature wasn't well developed. however i've encouraged it on the grounds that the standard library tries to keep proofs as explicit as possible. the overhead of `instance levelnat = level.literals.levelnat` probably isn't that great. and at least warns the reader that there is some instance magic about to happen...,positive
agda/agda-stdlib,standard,2018-07-28T12:59:10Z,after merging. i've renamed `levelnat` to `levelℕ` as i've just remembered we don't tend to use `nat` much in the standard library.,negative
agda/agda-stdlib,standard,2018-08-05T08:30:02Z,in my mind `coinduction` corresponded to `codata.thunk`. but it's true that there is also thedefinition of `rec` in there. not sure if it's worth having tbh: it's not standard to encode datatypesas a coinductive definition by enabling `--guardedness-preserving-type-constructors`.and there does not seem to be any results available. just the raw definition.,neutral
ExactTarget/fuelux,sauce,2014-04-25T18:57:55Z,travis sauce badges. making status badges work for sauce and travisci in readme.md,neutral
alphagov/govuk_elements,standard,2017-03-28T14:58:38Z,accessiblewebuk sorry - missed it. so that sounds like something we could consider recommending? 19px bold or 24px standard at minimum,negative
simov/grant,coveralls,2015-08-24T13:47:43Z,added some tests to comfort coveralls.,positive
jshint/jshint,jshint,2013-08-19T09:32:51Z,i don't know is this can ever happen. as the "bad or evil" licence is the original software licence for jslint.,negative
jshint/jshint,jshint,2013-08-19T14:57:50Z,interesting.. adding `/* jshint unused:true */` at the top of the file makes the problem go away. same if i put that setting in .jshintrc. docs say that unsued: true is default. so it feels wrong somehow.,negative
jshint/jshint,jshint,2013-08-22T09:47:18Z,i'd also like to be able to disable the check for trailing unused function arguments.,neutral
jshint/jshint,jshint,2013-08-22T20:53:26Z,this isn't possible without removing all crockford code from jshint. it can definitely happen though.,neutral
jshint/jshint,jshint,2013-08-22T21:00:43Z,i need input from someone who understands legal. (i don't),neutral
jshint/jshint,jshint,2013-08-22T21:02:04Z,i'm pretty sure goatslacker is correct. you could ask crockford to change his license :),positive
jshint/jshint,jshint,2013-08-22T21:05:00Z,goatslacker where can i find a reference to all the code written by crockford part of this repository?,neutral
jshint/jshint,jshint,2013-08-22T21:05:50Z,hellais you can run a diff against the first commit to jshint (which would have been where the fork started). to the current head,neutral
jshint/jshint,jshint,2013-08-22T21:28:58Z,antonkovalyov i think a regular diff will not work either because the code structure has drastically changed. i am looking into a possible way of determining which portions of the code are from the original author.exploring possibilities such as simian or checkstyle,neutral
jshint/jshint,jshint,2013-08-22T22:19:08Z,btw those are 195 lines of code in a project that has over 9000 lines of code.,neutral
jshint/jshint,jshint,2013-08-22T22:19:59Z,i may have no idea what's going on here. but i can't imagine that jshint rewrote 8800 lines of jslint,negative
jshint/jshint,jshint,2013-08-22T22:31:28Z,i re-ran simian with a threshold of 2 (this means blocks of fewer similar lines will also be displayed) and i got 708 duplicate lines.dcramer what would you suggest doing regarding refactoring out crockford's code from jshint or getting the license changed?,negative
jshint/jshint,jshint,2013-08-22T23:25:38Z,hellais i'd suggest talking to a lawyer as i think anything else is likely to be pointing a gun squarely at some feet.,neutral
jshint/jshint,jshint,2013-08-23T00:01:20Z,the easy answer to this is that we would need to move away from the pratt parser to esprima.,neutral
jshint/jshint,jshint,2013-08-23T10:04:25Z,douglascrockford why not put that last bit in license instead; "...this software may not be used in the investigation. torture. and murder of patriots who dare to resist tyrants." <- from a shared  form me!,negative
jshint/jshint,jshint,2013-08-23T17:38:28Z,douglascrockford have you actually ever tried suing somebody that has used your software for evil?i bet the nsa uses jshint for their javascript projects and i think they are doing quite an amount of evil. it seems like your license has not been very effective at stopping them from doing so though...,positive
jshint/jshint,jshint,2013-08-23T18:57:01Z,soxofaan what you said is correct. but i think you missed what orangedog was talking about. yes the jshint output is correct with the options and switches but the checkstyle reporter is not. in orangedog example he (and i for that matter) believe that the error in the xml output should not be there as he has not used the --show-non-errors option. it seems it should either not be present or be something other than a warning. maybe info?,neutral
jshint/jshint,jshint,2013-08-23T19:10:57Z,>  the easy answer to this is that we would need to move away from the pratt parser to esprima.at this point jshint covers more javascript (stable parts of es6. mozilla-specific extensions) and is more fail tolerant than esprima so the switch isn't going to happen in near future.> i bet the nsa uses jshint for their javascript projects:-),negative
jshint/jshint,jshint,2013-08-23T19:13:33Z,hellais did you read his link?>  it is not effective at all. but it at least states my intention.haha,neutral
jshint/jshint,jshint,2013-08-23T19:21:15Z,anyway. i sent an email to douglascrockford asking for an explicit permission to remove that clause from jshint. if he grants one. i'll remove it. if he doesn't. debian people will have to install jshint through npm or do some other workaround.to be honest. i'm getting tired of these not-true-open-source talks. out of all things i need to do with jshint this issue is probably the least important one.,negative
jshint/jshint,jshint,2013-08-26T09:12:37Z,that maybe indeed nice to have less messages for consecutive same errors. but that would mean adding code only for handling such a case. though. the goal of a static code analyzer being to spot out every mistake an user could do. so when integrated into an editor each semicolon shall be focused. i don't think jshint shall do such factorization of errors. in my opinion. that something that could be done in the reporter or simply by parsing the output.in the end i'd vote for closing this issue.,negative
jshint/jshint,jshint,2013-08-26T11:55:59Z,anton. there are other ways to work around this that will allow debian to carry a package containing jshint and without creating extra effort for you.  other developers may also volunteer to help do this work for your project.as an example. if you wanted to. you could request a google summer of code (gsoc0 student in 2014 and the student could refactor this code in a clean way.  debian and other big projects have plenty of experience with schemes like gsoc and as your project is good for all our other javascript you would have a very credible case for this.the first thing that needs to be cleared up is how much code really is common between jshint and jslint?  for example. when you did refactoring. did you copy and paste whole chunks of code from jslint into other source files?  or were the other source files developed independently without using cut-and-paste?  if you did use the cut-and-paste approach. then you need to include the douglascrockford "no evil" terms in the license text of all those other files too and they will all need to credit him as a contributor.if it is only jshint.js. then it may be possible for other people to re-write sections of the file.  as a bare minimum. you may want to avoid making any more changes to that file and do any new code in a separate file. so the new code won't be tainted by the "no evil" clause and it will be easier for some volunteer working on it in future as there will be less "no evil" code for them to refactor.the bottom line is that douglascrockford has to decide whether it is genuinely important to him to have his work recognised and have projects like debian and jshint propagate his well-founded concerns about coding style.  the alternative is that people simply act as if his project doesn't exist and eventually something will emerge to replace it entirely and his ideas fade away (it has certainly happened to bigger projects. just think about how quickly wordperfect or lotus 123 disappeared),neutral
jshint/jshint,jshint,2013-08-26T17:24:39Z,i second this. i switched to jshint specifically because i refused to rewrite 876 .js files when jslint made onevar mandatory.until es6 is available for production use. we need something as a stop gap,negative
jshint/jshint,jshint,2013-08-28T08:17:00Z,i'm assuming he defines this options inside the gruntfile which is a javascript file.also for valid json he would need to quote the string jshint and options. i just spotted the real error:```'-w038': true;```the semicolon at this point is not allowed. this is a syntax error.,negative
jshint/jshint,jshint,2013-08-28T19:30:22Z,this would solve the #1 complaint about jshint-enforcement on the enyo js team.,neutral
jshint/jshint,jshint,2013-09-04T06:32:21Z,if you have a single json file with an extension of `.json` i completely agree with you that you should have double quotes. i don't think jshint claims to be a json validator or something similar.> jshint is a tool that helps to detect errors and potential problems in your javascript code.in javascript it is perfectly valid to use single quotes. as of this i think jshint handles this as expected.,negative
jshint/jshint,jshint,2013-09-04T10:02:55Z,:+1: would be great to see this feature make its way in. it's the one thing jshint keeps bugging me about that i won't "fix" ;),positive
jshint/jshint,jshint,2013-09-06T23:51:22Z,btw use a `.jshintignore` file,neutral
jshint/jshint,jshint,2013-09-10T22:59:24Z,thanks for the reply. it was very helpful!  i wonder if antonkovalyov has made any progress with the style module which was hinted at in that request?  is this src/style.js. or something entirely separate?  if the 'module' in question is src/style.js.  i would be more than willing to add this option once i get to know jshint and the expectations of the project a bit better.,positive
jshint/jshint,jshint,2013-09-12T12:41:17Z,bug?. hi.when testing the jshint.com homepage. the following code triggers a console error```for(;0);a++ ```the error in the console is:uncaught typeerror: cannot read property 'identifier' of undefined,negative
jshint/jshint,jshint,2013-09-12T14:17:40Z,this would be very useful for a project i worked on where the customer facing app and admin facing app ended up sharing a .jshint file but used a different list of globals.,neutral
riot/riot,sauce,2015-12-11T07:39:56Z,no it's just saucelabs that sucks!,negative
angular/angular.js,sauce,2014-02-03T09:16:34Z,for the benefit of others: we are working with travis/saucelabs/browser stack to solve this problem once and for all... fingers crossed.,neutral
angular/angular.js,karma,2013-11-27T20:33:28Z,added a new npm command to e2e karma execution. i got an error message on running karma e2e test. after the new npm run it worked. platform win7x64,neutral
angular/angular.js,karma,2013-11-27T21:08:06Z,actually all the dependencies are in the `package.json` so we really ought to be able to simply run```npm install```,neutral
angular/angular.js,karma,2013-11-27T21:12:21Z,ok. i actually run it also but i got rid of the error message only when i installed karma-junit-reporter.,negative
angular/angular.js,karma,2013-12-05T22:10:19Z,i have updated steps 2 and 3 to remind people to run `npm install`. this should ensure the relevant karma plugins are available. see 39c5ffb and 2adbcf1,neutral
angular/angular.js,karma,2013-12-09T20:38:45Z,while karma does globally install with a bunch of plugins. we do need the `npm install` because without that you don't get the `karma-ng-scenario` karma plugin.,neutral
dc-js/dc.js,jasmine,2014-07-07T06:50:21Z,hi mtraynham. i am finally merging this.  thanks!i figured you probably wouldn't mind me snagging parts of your fiddle for the jasmine spec.  if you have a minute. could you double check the test in 9c682c9?  it definitely fails before your patch and succeeds after. but it fails differently from your fiddle: whereas your fiddle usually shows little stubs of wrong values. this just gets a straight zero wrong value.,positive
dadi/web,standard,2017-05-02T08:41:57Z,josephdenne are there any particular engines you'd like us to start with?what i've done so far is fully decouple dust from the core and turn it into its own module interface. similar to what jimlambie has been doing for api data stores. this interface consists of a set of standardised lifecycle functions that core will expect engines to implement (and will validate against).we can start taking this interface and building support for the various engines we want to ship with. but it also allows the community to build their own interfaces to add support for additional engines. this would happen in the same way they can currently install custom dust helpers and filters. which effectively needs you could use virtually any templating engine with web without having to touch the core.any thoughts appreciated!,positive
istanbuljs/istanbuljs,istanbul,2017-10-16T06:15:33Z,feat: work around supporting .mjs files. starting to do some work in nyc/istanbul related to supporting es modules and the `.mjs` extension.,neutral
istanbuljs/istanbuljs,istanbul,2017-10-19T00:40:19Z,fwiw "treshold" appears nowhere in the istanbuljs source.```(20:40:01) jamies-mbp:/tmp/istanbuljs $ grep -r treshold . | wc -l       0```,neutral
DefinitelyTyped/DefinitelyTyped,standard,2016-11-09T20:25:02Z,_flux-standard-action/index.d.ts_to author (tkqubo). could you review this pr?:+1: or :-1:?checklist- [ ] pass the travis ci test?,neutral
DefinitelyTyped/DefinitelyTyped,standard,2016-11-10T12:34:27Z,seansfkelley i've been spending the past few days trying to tackle this issue. but i'm running into a couple of major roadblocks (correct me if i'm wrong on something):from what i've gathered. `connect` doesn't really function as a true class decorator (by typescript's standards) and isn't usable in its current form. the wrapped result of the connect call doesn't actually extend the targeted class. it uses its own type definition. typescript views decorated classes under the assumption that the resulting class will pass a `typeof` check on the target. this just simply isn't true with what react-redux is doing.the connect class returned is an entirely new class that wraps the targeted class. with its own unique set of props. this is the main block here is because the props that the connect class says are allowed are different than those that the class it's wrapping are. this is what causes the `types of property 'props' are incompatible.` message when using it as a decorator. typescript can't verify that the connect class is indeed a `typeof` the wrapped class because this offending property.to work around this. we can make the type declarations for props less strict. i am currently aware of two. the first is to say``` typescriptinterface stateprops {  mystate: mystate}interface dispatchprops { ... }interface ownprops { ... }connect<stateprops. dispatchprops. ownprops>(.... ...)export class mycomponent extends component<any. componentstate> { ... }```saying that any props are assignable on the component. this has the disadvantage that ts can't vaildate anything pertaining to props. the other (and i think better) way is to make every property in `stateprops` and `dispatchprops` optional:``` typescriptinterface stateprops {  mystate?: mystate}interface dispatchprops { ... }interface ownprops { ... }connect<stateprops. dispatchprops. ownprops>(.... ...)export class mycomponent extends component<ownprops & stateprops & dispatchprops. componentstate> { ... }```this way everything checks out. but ts can still complain if props in `ownprops` are omitted in jsx.,negative
DefinitelyTyped/DefinitelyTyped,standard,2016-11-10T15:35:36Z,thanks for pointing me to those. glad i'm not going crazy. is there any point in messing with this further until we have mapped types then?,negative
DefinitelyTyped/DefinitelyTyped,standard,2016-11-10T21:22:47Z,in agreement. the "extend" method is also a public method (private in the typescript definition).,neutral
DefinitelyTyped/DefinitelyTyped,standard,2016-11-15T04:33:57Z,yuit as the config documentation say about this method:if no directory is given. reads the standard config directory and parses node_config. so the configdir param is optional. and if there is no param take the 'rootpath/config' path by default.,negative
DefinitelyTyped/DefinitelyTyped,standard,2016-11-15T14:12:06Z,core-js: split into standard and non-standard definitions. - [x] i want to talk about `core-js/core-js.d.ts`.  - the authors of that type definition are rbucktoni use the "shim only" part of core-js. unfortunately some non-standard part of the the full definitions conflict with some other definitions i have. and in general i'd prefer only to have definitions for the parts i use.wouldn't it make sense to split the definitions into standard and non-standard. so that one can chose what he wants without getting conflicts (e.g. es5 target with default core-js => both standard and non-standard definitions. es5 with shim-only => only standard definitions. es6 with core-js => only non-standard definitions as ts will already include the compiler-provided es6 definitions).,negative
DefinitelyTyped/DefinitelyTyped,standard,2016-11-29T04:31:35Z,i haven't figured out a good way to handle these differences. the problem obviously comes down to the fact that isomorphic-fetch is really two different fetches. with different implementations and standards compliance.there are at least two ways to build a typings file for this situation. one option is to go with the common subset approach. which would remove all expected fetch typing information that was not in node-fetch. this would present problems for people who want to make full use of fetch in the browser. of course. a second option is to include everything in the browser-based fetch and rely on the developer to know what environment they're running in. and to know what is and isn't supported in node-fetch. this can lead to build or runtime errors. the second approach is what the current typings use. as you've pointed out. if it were possible to split out the browser-fetch superset. modulo the common subset. i think that would be very useful. i'm not sure how best to do that in a way that supports common environments and tools. if you have some ideas. i'd be interested in hearing them. thanks.,positive
angular-ui/ui-mask,sauce,2016-05-04T07:52:59Z,lukepfeiffer10 today i'll do. there was 4 days holidays in russia :d by the way. i have a problem with running gulpfile. sauce is running with error```$ gulp buildmodule.js:338    throw err;    ^error: cannot find module 'sauce-connect-launcher'```no idea what to do,negative
angular-ui/ui-mask,sauce,2016-05-04T14:36:48Z,i'm not sure how to actually fix your issue but you shouldn't need `sauce-connect-launcher` to run the tests locally so i would just comment it out locally for now to get your tests running and then maybe figure out the module issue later.,neutral
