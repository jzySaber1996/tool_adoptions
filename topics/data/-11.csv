webpack-contrib/sass-loader,mocha,2015-10-05T20:53:00Z,thanks. as i've never used mocha before :),positive
webpack-contrib/sass-loader,jshint,2015-10-26T23:28:30Z,updated:- remove order tests- fix understandable errors tests- disable jshint noempty for empty block in case of css file,negative
jprichardson/electron-mocha,mocha,2015-10-15T22:44:43Z,support `--compilers` arg. in order to support mocha compilers. the cli `--compilers` argument has been pulled to the `electron-mocha` front-end. which makes calls like `electron-mocha --compilers js:babel/register test/example.js` possible in case one has written tests in es6 for example.,negative
jprichardson/electron-mocha,mocha,2015-10-16T13:29:22Z,if you create a file. say `babel.js` that includes `require('babel-core/register')`. you could then call `electron-mocha --require ./babel.js test-file.js`.but i imagine that a lot of people are going to expect the mocha `--compilers` flag to work. so maybe i'll just accept this since it's not much code to maintain.,neutral
request/request,standard,2016-05-02T17:15:58Z,i like your spec! could maybe evolve into something similar like the promise standard. i already have multiple request implementations in my app because of the combination of libraries i use. with a standardised interface libraries could allow injecting the preferred request implementation.,positive
pixijs/pixi.js,jshint,2015-10-17T02:15:36Z,fixes jshint errors,neutral
dresende/node-orm2,mocha,2013-09-16T21:37:07Z,and thank you for the `it.only` code. i didn't know that about `mocha`. great feature! :),positive
dresende/node-orm2,mocha,2013-09-17T08:05:09Z,at first - thank you for good work of building orm for node. i hope it will become something like activerecord in ruby world.and of course. thank you for lighting fast fixing of the bug.about mocha - yes. it has its secrets. most of them are in manual though :),positive
pugjs/pug,mocha,2012-04-11T23:31:51Z,i am using winblowz. so i don't have make to hand.but i got mocha.  typing `mocha` from the jade directory seems to be giving me some tests.right now i am failing.  the body tag is acting like a text node.  i haven't figured out why yet.,negative
pugjs/pug,mocha,2012-04-13T13:31:52Z,actually the performance hit is maybe not so much.  at least when i run the tests in mocha. it gives (approximately. within the noise) the same time for `pretty` and `prettypretty`.  maybe not the best benchmark but indicative.edit: sorry. this is stupid. this is only the time to compile. not the time to render.,negative
uber/uber-ngen,jshint,2014-03-17T17:06:05Z,use .jshintignore. so we can just use .jshintignore. and then running jshint outside of npm (like say from editor integrators) gets it right too (tm).i briefly considered adding some generic symlink support along side your `directories` vs not (aka files. because like that's all there is right?) but decided not to.,neutral
uber/uber-ngen,jshint,2014-03-17T17:21:37Z,raynos can revert this if he really doesn't like it. ;),positive
Azure/autorest,standard,2015-08-28T14:55:30Z,perhaps any of the internal variables used in the generated code should have some naming prefix such as to not interfere with standard argument naming. perhaps. an underscore or some other prefix char to denote it's a generated variable.``` csharp// construct urlvar __url = new uri(...).tostring();```,neutral
airbnb/javascript,eslint,2015-05-22T18:07:13Z,create package eslint-config-airbnb. this is a sharable eslint config package. we could optionally just use our eslint config as the package `main` for `airbnb-style` but it'd be nicer for everyone if the eslint package had a cool name.solves for issue #349,positive
airbnb/javascript,eslint,2015-05-23T23:07:59Z,to make config searchable via [standalone npm packadge]( please. extend packadge.json keywords with `eslintconfig`:```  "keywords": [    "eslint".    "eslintconfig"    "config".    "airbnb".    "javascript".    "styleguide"  ].```,neutral
airbnb/javascript,eslint,2015-05-28T06:58:37Z,update .eslintrc. just a consistency thing. :),neutral
airbnb/javascript,eslint,2015-05-28T06:59:26Z,lol,positive
airbnb/javascript,eslint,2015-06-17T11:31:24Z,update(readme.md): added airbnb style .eslintrc link. i added the missing airbnb style .eslintrc link into the documentation file.,neutral
airbnb/javascript,eslint,2015-06-17T14:58:08Z,:+1: thanks for this!,positive
airbnb/javascript,eslint,2015-06-18T20:27:48Z,ok. sounds good. i will try to move react styleguide options from `eslint-config-airbnb` to `eslint-config-airbnb-react` next week. i'm also planning to do an audit of the `.eslintrc` to make sure it conforms with both the letter and the spirit of the styleguide.goatslacker hshoff should we have 3 separate eslintrcs? `eslint-config-airbnb`. `eslint-config-airbnb-es6`. `eslint-config-airbnb-react`? i would prefer not to split out the es6 rules since those are considered part of the core style guide. but i'm up for discussion on the matter. i would prefer to only maintain two. `eslint-config-airbnb` and `eslint-config-airbnb-react`.,negative
angular/angular-phonecat,karma,2013-05-20T20:17:41Z,looks like a local network or npm server error. please try again and if it doesn't work. try to debug your network. i bet that the whole npm doesn't work for you. not just installing karma.,negative
angular/angular-phonecat,karma,2013-05-21T18:19:21Z,wow! i did not know that shifting around branches can somehow also adjust tags in git? what sorcery is this! thank you! even doing `git checkout -f step-9` etc.. works with karma being used instead of testacular.,positive
pillarjs/send,standard,2015-07-08T11:56:37Z,it is by design. you'll notice your file system does the same thing. so having multiple slashes wouldn't result in a 404. as the file system would still find the file anyway.funny enough. expressjs.com does not even run on node.js or this library. so really. those examples demonstrate we are doing the standard thing.,negative
videojs/video.js,standard,2015-10-10T21:33:55Z,flash can only seek to keyframes in an mp4. so. if your mp4 has keyframes that are spaced far apart. you'll only be able to seek to only some parts of the video.if you are using standard options for videojs. then an mp4 will end up playing in html5 which can seek whereever.do you have a working example somewhere? though. it's probably best to get away from flvs nowdays :),positive
expressjs/express,mocha,2012-04-26T16:05:37Z,yeah. i can install coco. mocha. and coffee-script fine ( a few random libraries i thought of),positive
sequelize/sequelize,mocha,2012-09-29T06:52:13Z,thanks a lot :),positive
sequelize/sequelize,eslint,2016-05-29T08:04:41Z,alitaheri i'm already working on a refactor. finished 80%. changed everything to classes. arrow functions. let and const. also. i have a eslint ready for #5963. which has rules like `no-var` and `prefer-arrow-function`. so i will likely open that pr after the refactor.,negative
TryGhost/Ghost,mocha,2013-09-02T22:40:35Z,ah i think i was running the mocha command instead of validate. i'll fix it as soon as tomorrow-adam> on 2 sep 2013. at 23:31. hannah wolfe notificationsgithub.com wrote:> > this has a jslint error > > —> reply to this email directly or view it on github.,negative
cujojs/most,eslint,2015-03-03T23:23:07Z,interesting. thanks for the link.  it looks like they could be complimentary: eslint for warnings/errors and jscs for code style?,positive
cujojs/most,eslint,2015-03-04T21:10:12Z,yes. though there is some overlap in functionality.,neutral
ember-intl/ember-intl,eslint,2017-03-15T03:20:05Z,eslint prettier integration. title says it all,positive
ember-intl/ember-intl,eslint,2017-03-15T05:55:12Z,adding eslint & eslint-plugin-prettier,neutral
i18next/i18next,karma,2015-03-13T17:55:37Z,browserify cannot find express/jquery. using karma-browserify fails when trying to require i18next somewhere.the problem is that i18next does require('jquery') in a try/catch block but browserify obviously does not know about this and tries to find it.my workaournd was to use i18next-client (where at least express is not needed) and add jquery as a dependency in my project - not very beautiful,negative
angular/zone.js,selenium,2016-05-23T19:27:37Z,just bumping this bug ticket up. since my team is encountering this bug as well running our selenium tests. my teammate was able to switch to using a chrome driver. but would definitely appreciate a fix/patch for this!,positive
angular-fullstack/generator-angular-fullstack,sauce,2014-09-26T05:18:32Z,kingcody ok i just had to fix the credentials for sauce labs in the .travis.yml. travis wasn't building pull requests with sauce labs. for running the protractor tests. not sure why only one set of e2e tests was failing though. they all should have failed.,negative
elwayman02/ember-data-github,eslint,2017-02-25T00:37:31Z,i added one more clean up piece.,neutral
elwayman02/ember-data-github,eslint,2017-02-25T00:38:23Z,thanks for the review. i like the result much better and i had to learn a bit about another corner of the ember ecosystem.,positive
elwayman02/ember-data-github,eslint,2017-02-25T00:44:15Z,sg. go ahead and merge! you should have access now :),neutral
Hacker0x01/react-datepicker,karma,2014-09-10T09:56:57Z,added first jest test (including jest setup). we really need javascript tests for this component. and jest was the first toolkit that came to mind. i'll also try to workout a pull request for at least one other tool (maybe karma). so we can compare the pro's and con's.,neutral
Hacker0x01/react-datepicker,karma,2014-09-12T15:41:50Z,looks good. some questions inline. how do i run these tests locally. could you add that to the readme?,positive
Hacker0x01/react-datepicker,karma,2014-09-12T15:46:20Z,will add,neutral
Hacker0x01/react-datepicker,karma,2014-09-12T15:48:10Z,let's merge it back after that!,neutral
webpack/webpack,uglify,2017-03-06T18:35:24Z,can't see anything obviously wrong - seems like the same one-liner as `grunt-contrib-uglify`,negative
webpack/webpack,uglify,2017-03-08T10:53:53Z,i think the culprit is the uglifyjs plugin. i do not use the commonchunks but have the same issue. removing uglifyjs works. then a sourcemap is generated again. is there an option to run the sourcemap command before the uglifyjs?,neutral
webpack/webpack,uglify,2017-03-10T06:36:01Z,cansin what if you minify through an uglify loader instead of a plugin? that would solve the order issue. another way would be to hook into the process through a plugin and calculate a hash then perhaps. you can find a couple of third party plugins that do something like this already.,neutral
webpack/webpack,uglify,2017-03-24T12:43:51Z,do we already know why this is not working? is it because the default export exports everything. which means evaluating everything?even then. shouldn't side-effect-less functions then be removed by uglify?i just would like to understand how to write code so that unused exports without side-effects are not included in the final bundle…,neutral
acuminous/yadda,mocha,2014-08-26T13:19:34Z,false positives with new `mocha.steplevelplugin`. i have a request counter in place during testing and switching from the deprecated `mocha.asyncsteplevelplugin` to the newer `mocha.steplevelplugin` causes the request count to be off and correspondingly a bunch of false positive successful tests.with deprecated async plugin:```request counts:    "get /statements": 105total:  105---------------  286 passing (1s)  29 failing```with new plugin:```request counts:    "get /statements": 1total:  1---------------  314 passing (101ms)  1 failing```it appears after the first failed assertion all the rest have been skipped though marked passing. in this case it is the first scenario failing.based on a cursory glance at the code i'm guessing it might be related to the scoping of the `abort` variable. i'll hopefully have a chance to dig deeper but if someone has a quick fix that'd be great.,negative
acuminous/yadda,mocha,2014-08-26T13:53:28Z,hi brian.i think you're right - the abort variable should be scoped to the steps method. i'll fix up and release this evening. thanks for reporting and sorry for the trouble.steve,positive
acuminous/yadda,mocha,2014-08-26T22:19:01Z,i'm :thumbsup:. it works here. i wonder if it makes sense when aborting to do something similar to:`if (abort) return done(new error("aborted"));`or something similar to prevent the false positives. this kind of feels like the difference between a "pending" and a "skip" that some test frameworks provide but i've not yet figured out if that is possible here. either way avoiding the false positives would be an improvement i think.thanks for the quick turnaround again!,positive
prebid/Prebid.js,standard,2017-01-18T23:31:58Z,maintenance/refactor hb deal. ## type of change- [x] refactoring (no functional changes. no api changes)## description of changecontributed by snapwich changed the way hb_deal is handled in the code to behave more like a standard targeting key.## other informationshould fix #827 replaces #871,neutral
tjunnone/npm-check-updates,mocha,2014-09-07T16:06:25Z,only check/update selected packages. as an example. i'd like to do `npm-check-updates -u mocha should` to only update the `mocha` and `should` packages.  this doesn't appear to be possible.this might conflict with the fact that the first non-option argument is currently a `package.json` or a directory.  but really. how often do you want to run `npm-check-updates` outside of the current directory?,neutral
Automattic/mongoose,mocha,2012-11-11T15:17:02Z,thanks for reporting. will look into it on the plane today.on nov 8. 2012. at 2:36 pm. rschooley notificationsgithub.com wrote:> quick thought: the default timeout of a single test in mocha is 2 seconds. so if the timeout above worked it would call done prior to that limit.> > \> reply to this email directly or view it on github.,positive
speakeasyjs/speakeasy,standard,2016-01-27T06:45:30Z,mrose17. we actually decided to go with semistandard in the new release. really appreciate your pr though – thank you!,positive
vega/vega-lite,mocha,2015-02-01T19:57:43Z,console log message doesn’t show up in mocha. domoritz  there must be some missing config.   i am also curious why we use mocha directly here instead of karma. also. we’re using mocha here and jasmine in the other two ui project.   should we stick with one for consistency?,neutral
vega/vega-lite,mocha,2015-02-01T19:58:32Z,i don't know much about this. do whatever you think is best.,positive
vega/vega-lite,mocha,2015-02-01T22:51:25Z,i think i’ll stick with `mocha` here.  we don’t need karma here because we’re not testing ui or something that needs to run a browser during testing.  we might switch `vegalite-ui` / `facetedviz` to mocha instead of jasmine later.,neutral
angular/protractor,jasmine,2015-04-25T20:18:57Z,juliemr are there any patterns for waiting. ex: in `specdone`?,neutral
angular/protractor,jasmine,2015-04-25T20:47:08Z,for now i ended up using:``` jsafterall(function(done){    process.nexttick(done);});```,neutral
angular/protractor,jasmine,2015-04-29T12:40:45Z,please tell me how can i set default timeout for browser.wait function?i have in my conf.jsjasminenodeopts: {    defaulttimeoutinterval: 50000  }but it don't affect browser.wait function,negative
angular/protractor,jasmine,2015-04-29T21:06:14Z,this is not possible with the plugin framework. the problem is that plugins are agnostic to the test framework being used. so they do not emit test results in a way specific to jasmine-reporters.you can get all test and plugin results in json format using `resultjsonoutputfile` in the config. i'd suggest doing that. and then processing it in any way you need.,negative
angular/protractor,jasmine,2015-05-04T22:59:22Z,tokunbo eddywashere the problem with that hack is that it looks like a noop. if i saw that in a code base i was working on without any surrounding context. i would rip it out.,negative
angular/protractor,jasmine,2015-05-12T15:18:23Z,the latest commit from this ticket seems to be on production. but the url goes to 404 now.,neutral
angular/protractor,jasmine,2015-05-19T15:46:40Z,use a jasmine reporter.,neutral
angular/protractor,jasmine,2015-05-19T19:34:58Z,oh. sorry. i was thinking that it would be straight forward to install a custom jasmine reporter. so no new feature was needed.  now i see that i was wrong.,negative
angular/protractor,jasmine,2015-05-20T18:52:10Z,yes i am using jasmine only step 1 is example i mentioned here. i am thinking is there any way protractor can extend functionality to identify the failure based on annotation like step instead of parsing stacktrace . then identify the line number then find corresponding step for that failure like number,negative
angular/protractor,selenium,2014-04-22T14:47:54Z,> glepretre not really. i want to split up my tests across several machines so that i can get a quicker result. multicapabilities allows you to do that across browsers. but i want to split up my tests even if i'm just using one browser.+1 paolodm,negative
angular/protractor,selenium,2014-04-23T17:25:33Z,i think this is now a dupe of #569 - until that gets implemented. i would start up selenium using `webdriver-manager` once. and then concurrently run protractor against it with different configuration files pointing at the same `seleniumaddress`.,neutral
angular/protractor,selenium,2014-04-26T00:28:30Z,silence here for a while. so i'm assuming that the sad answer to the original question is no. no way to run without the java runtime. closing.,negative
angular/protractor,selenium,2014-05-15T13:35:00Z,selenium doesn't work on linux. execvp(): no such file or directoryseleniumprocess.pid: 26186events.js:72        throw er; // unhandled 'error' event              ^error: spawn enoent    at errnoexception (child_process.js:988:11)    at process.childprocess._handle.onexit (child_process.js:779:34),negative
angular/protractor,selenium,2014-05-15T15:33:48Z,sorry about that. the site was not running locally,negative
angular/protractor,selenium,2014-05-15T15:36:07Z,protractor is a little slower on linux. browser is not opened fast enough. and so the test fails. is there a general solution for this.,negative
angular/protractor,selenium,2014-05-16T23:07:07Z,hi.thanks for looking into this. i agree that the situation as it stands can be confusing. i think you're right that `get/first/last` would make more sense if they return elementfinders. i'm not sure about `map` and `each` - these imply "now i'm doing something with the elements". and i think it makes sense for them to be talking immediately to selenium. i'm also not quite sure what you mean by wrapping elements returned from `findelement` - once you've talked to selenium. you can't go back.,negative
angular/protractor,selenium,2014-05-17T02:28:24Z,sorry to be a little confusing on that.by wrapping i meant to make the interface consistent i.e. any element(or set of elements) returned(regardless of whether it is deferred or returned from selenium) via protractor layer always provides elementsfinder(or elementsfinderarray) interface.this wouldn't make sense if there needs to be a clear distinction from the finders that will defer the operations.,neutral
angular/protractor,selenium,2014-05-20T07:11:19Z,what is the syntax to specify `maxsessions`? is it documented yet?,neutral
angular/protractor,selenium,2014-05-20T17:21:36Z,this question might be better for stack overflow. where you could tag with selenium - it's a general selenium/webdriver setup question. not really anything specific to protractor.,neutral
angular/protractor,selenium,2014-05-20T18:45:31Z,sorry i misunderstood your issue; this particular feature isn't available yet. reopening,negative
visionmedia/superagent,sauce,2014-01-24T14:59:15Z,gjohnson you need to setup the sauce credentials as encrypted vars in .travis.yml for zuul to work against sauce on travis.,neutral
restify/plugins,mocha,2015-09-09T06:47:53Z,migrate to mocha. split out plugins. mapparams defaults to false. wip,neutral
restify/plugins,mocha,2015-09-10T05:48:42Z,yunong micahr plugins broken out! all functionality is intact. added more unit tests for queryparser and bodyparser. also made mapparams: false the default behavior.,negative
restify/plugins,mocha,2015-09-14T17:44:46Z,donutespresso looks good. if we're going this route. let's move all plugins out of server. even cors. it's fine for the server to pull it in as a dependency. also. when you're moving the files over to new repos. please save the git logs for the files so we're not starting anew.,positive
restify/plugins,mocha,2015-09-14T18:56:55Z,not sure what to do with cors - the tests require restify so pulling cors out would result in a circular dependency for tests (or we keep cors tests in core). we also have existing prs open against cors. the git history is complex. let me see what i can do.,negative
ember-cli/ember-cli-mocha,mocha,2016-02-26T15:22:56Z,ballpointpenguin did you actually test this at all? because i just found out that `removepackagesfromproject()` isn't even able to remove packages from `bower.json` and only targets `package.json`...,neutral
ember-cli/ember-cli-mocha,mocha,2016-03-01T08:26:58Z,turbo87 i did not. i looked at the code and it seemed obvious enough. i should have tested it.,neutral
admc/wd,selenium,2013-07-22T19:24:59Z,selenium ide formatter. it would be really cool if we had a formatter to export directly from the selenium ide to node.is this reasonably easy / has it been done yet?,positive
angular/angular-cli,uglify,2016-10-21T18:12:13Z,with webpack being blackboxed. it could potentially be swapped out for rollup or something else entirely in the future.  webpack just happens to be the _internal_ build engine that the developers decided upon at this point in time.  so using the cli or not using the cli solely based on webpack usage is probably not the best of ideas.  and realistically (or maybe ideally). you shouldn't know the difference if it was swapped out in the future.as to tree-shaking. rollup does seem to do a better job.  however. the uglifyjs method employed by webpack (which is currently used for cli production builds) seems to perform well enough.  combine that with the added infrastructure provided by webpack and the scale tips in its favor.  (atleast for now.),neutral
angular/angular-cli,uglify,2016-10-27T07:00:49Z,might be. but then the documentation needs to be updated."all builds make use of bundling. and using the --prod flag in ng build --prod or ng serve --prod will also make use of uglifying and tree-shaking functionality.",neutral
angular/angular-cli,uglify,2016-11-02T16:38:35Z,personally i think the most practical avenue is to always uglify/minify scripts. but there have been talks of having an alternative way of pulling in scripts in prod (e.g. from a cdn). that's definitely a feature for the future though.,neutral
angular/angular-cli,uglify,2016-11-03T06:57:50Z,production build without compression. is there a way to make a production build without compression. or at least without uglifying the code?,neutral
angular/angular-cli,uglify,2016-11-03T07:37:50Z,as far as i know `ng build` will build app without uglyfing and compression.,neutral
angular/angular-cli,uglify,2016-11-03T13:30:31Z,that will do a dev build so there will be other differences as well. for global stylesheet handling. you're going to get a js bundle instead of css.  output filenames will have no hashes.  probably some others as well.also. your builds will be significantly larger without the minification step.,neutral
angular/angular-cli,uglify,2016-11-03T23:10:58Z,basically i want the js bundled. but no uglifying on the index html or the css. grunt and gulp let me have full control over what is and isn't done. i wasn't sure if there was a way for me to control with angular cli does.,negative
angular/angular-cli,uglify,2016-11-04T00:37:10Z,the cli is meant to be an opinionated build system.   so if you're interested in full control. it's probably not what your looking for.in regards to what you want. index.html is not minified or compressed currently.  component css is bundled with their respective component's js.  global css will be combined and minified in production builds.  (in development builds they will be combined into a js bundle).,positive
angular/angular-cli,uglify,2016-11-04T17:50:52Z,what clydin said is very accurate. i can also say that as far as future plans are concerned. we aren't looking specifically at adding this toggle but it might happen if we end up giving more granular build control overall.,negative
angular/angular-cli,uglify,2016-11-09T14:29:30Z,you're right. webpack's tree-shaking in general would probably have a limited benefit in that situation.yes; there is plenty that could be improved:  rollup has better tree-shaking ability. closure in advanced mode has advantages over uglifyjs. etc.  these (or something akin) will most likely be integrated as the system moves forward.but personally. i think that outside of presentations and demos. super-optimizing the "hello world" scenario has limited utility overall.  real world applications won't benefit; they will be using multiple additional libraries and most likely leveraging a majority of es2015+'s capabilities.  and with current browser improvements. the polyfills can be incrementally dropped moving forward.,neutral
angular/angular-cli,uglify,2016-11-10T13:58:47Z,sourcemaps for production environment . is there a way to generate source maps for production? i have a bug that only reproduces after uglify/mangle,neutral
quailjs/quail,standard,2014-05-06T12:54:20Z,so. what happened with this? it doesn't appear to have been excised from the project dependencies.,neutral
aksonov/react-native-router-flux,eslint,2016-04-21T18:13:09Z,true. i'd say. submit a pr with the new .eslintrc and such (which i agree would be an awesome addition). but let aksonov do the big "reformat" commit.,positive
aksonov/react-native-router-flux,eslint,2016-04-24T21:21:43Z,fix some eslint errors. ✖ 1023 remaining problems (1011 errors. 12 warnings),negative
aksonov/react-native-router-flux,eslint,2016-04-25T07:23:58Z,is there any way to check prs before merge to comply with code style? i've added you as collaborator.,neutral
aksonov/react-native-router-flux,eslint,2016-04-25T08:16:55Z,revert "fix some eslint errors". reverts aksonov/react-native-router-flux#585,neutral
aksonov/react-native-router-flux,eslint,2016-04-25T13:29:20Z,charpeni is there any automatic tool to do all these changes (so i could do it by myself)? i'm about to commit now some improvements for navbar (with old eslint issues). so your changes will have conflict...,negative
aksonov/react-native-router-flux,eslint,2016-04-25T13:49:43Z,unfortunately. i do not believe that such tools exists.i think for a project moving as fast we should only fix one file at time and do a pull request with solid test coverage. don't worry with it. i will redo.,negative
aksonov/react-native-router-flux,eslint,2016-04-27T15:54:19Z,fix eslint errors in switch.js. also:- adds an eslint rule to allow console statements- fixes malformed json in `.babelrc`,neutral
aksonov/react-native-router-flux,eslint,2016-04-27T16:15:24Z,cleanup router.js. cleans up the eslint errors in `router.js`. previously. destructuring was being used to omit values from an object. which was creating unused reference errors. i've added lodash in order to use `omit` in place of the destructuring.,negative
aksonov/react-native-router-flux,eslint,2016-04-27T16:15:37Z,lgtm.,neutral
aksonov/react-native-router-flux,eslint,2016-04-27T16:24:16Z,this pr in general lgtm. this does add a dependency on `lodash/omit`. which i think is reasonable. but i want to allow someone else to comment on that as well.,neutral
aksonov/react-native-router-flux,eslint,2016-04-27T16:28:36Z,cleanup modal.js. fixes eslint errors in `modal.js`.,neutral
aksonov/react-native-router-flux,eslint,2016-04-27T16:33:12Z,for the group: an alternative is to disable the eslint rule for unused references on the line that uses destructuring to omit properties:``` js// eslint-disable-next-line no-unused-varsconst { children. style. scenes. reducer. createreducer. ...parentprops } = props;```,negative
aksonov/react-native-router-flux,eslint,2016-04-27T17:59:01Z,fix eslint errors in defaultrenderer.js,neutral
aksonov/react-native-router-flux,eslint,2016-04-27T18:21:21Z,maybe the render methods could be defined in the same order they are binded ?``` javascriptthis.rendercard = this.rendercard.bind(this);this.renderscene = this.renderscene.bind(this);this.renderheader = this.renderheader.bind(this);```,neutral
aksonov/react-native-router-flux,eslint,2016-04-27T18:24:09Z,cool with me. charpeni. updated.,positive
aksonov/react-native-router-flux,eslint,2016-04-27T19:25:09Z,why not try and mirror react-native's lodash dependency to avoid any actual additional requirements?,neutral
aksonov/react-native-router-flux,eslint,2016-04-27T20:17:34Z,fix eslint errors in state.js,neutral
aksonov/react-native-router-flux,eslint,2016-04-27T22:34:42Z,i suggest to have own stack of needed functions to avoid dependencies.`omit`. `pick`. `compare`move them to helpers/utils file and reuse in components.,negative
aksonov/react-native-router-flux,eslint,2016-04-27T22:53:52Z,mikefowler maybe we just use the proposed ignore comment + object-rest?```// eslint-disable-next-line no-unused-varsconst { children. style. scenes. reducer. createreducer. ...parentprops } = props;```this way the behavior is sure to be the same. and we have no question of additional dependencies?,neutral
aksonov/react-native-router-flux,eslint,2016-04-28T04:08:54Z,sounds good. y'all. i'll move this back to using rest properties.charpeni: good call. this isn't in our styleguide. we've been using them a bit internally since react native supports them. i'll move back to the approved way.,positive
aksonov/react-native-router-flux,eslint,2016-04-28T04:16:14Z,- removed lodash dependency in favor of rest properties.- pull proptypes out of static propertyfeel free to review again. y'all.,negative
aksonov/react-native-router-flux,eslint,2016-04-28T05:20:21Z,mikefowler looks good. could you merge with latest master and submit again (now it has conflicts) ?,positive
aksonov/react-native-router-flux,eslint,2016-04-28T13:25:12Z,pull request has been updated.,neutral
aksonov/react-native-router-flux,eslint,2016-04-28T14:22:38Z,aksonov. conflicts resolve. charpeni. addressed your comment as well. should be good to merge.,positive
aksonov/react-native-router-flux,eslint,2016-04-28T14:24:07Z,lgtm. good work !,positive
aksonov/react-native-router-flux,eslint,2016-04-29T14:15:14Z,fyi 12 eslint errors remaining.can you move 355c03c _fix navbar height for android_ to a different pr?,neutral
aksonov/react-native-router-flux,eslint,2016-04-29T18:58:09Z,aksonov before leaving can you give authorization to circleci for this repo ?  will do the config soon with eslint and unit tests.,neutral
aksonov/react-native-router-flux,eslint,2016-04-30T08:17:27Z,4 eslint errors remaining but i need help.,negative
aksonov/react-native-router-flux,eslint,2016-05-05T17:56:26Z,at a quick glance. this looks good. does this pass our new fancy eslint rules?,positive
aksonov/react-native-router-flux,eslint,2016-05-05T18:07:50Z,good job :)lgtm if you can tell us if it pass the eslint rules ? i will setup circleci really soon. until that we will trust you.,positive
aksonov/react-native-router-flux,eslint,2016-05-05T21:58:30Z,yes. it's pass the eslint rules ;),neutral
aksonov/react-native-router-flux,eslint,2016-05-06T00:14:59Z,fix eslint example/components/tabicon.js,neutral
aksonov/react-native-router-flux,eslint,2016-05-06T00:15:00Z,by analyzing the blame information on this pull request. we identified sarovin to be a potential reviewer,neutral
aksonov/react-native-router-flux,eslint,2016-05-06T00:16:07Z,fix eslint example/components/register.js,neutral
aksonov/react-native-router-flux,eslint,2016-05-06T15:42:43Z,fix eslint example/components/navigationdrawer.js,neutral
aksonov/react-native-router-flux,eslint,2016-05-06T15:42:43Z,by analyzing the blame information on this pull request. we identified froelund and sarovin to be potential reviewers,neutral
aksonov/react-native-router-flux,eslint,2016-05-06T16:27:43Z,fix eslint issues and add circle.yml,neutral
aksonov/react-native-router-flux,eslint,2016-05-06T16:27:44Z,by analyzing the blame information on this pull request. we identified sarovin. lelandrichardson and zidail to be potential reviewers,neutral
aksonov/react-native-router-flux,eslint,2016-05-07T21:09:02Z,lgtm,neutral
aksonov/react-native-router-flux,eslint,2016-05-09T12:02:16Z,probably they are caused by eslint formatting done for master branch....,neutral
aksonov/react-native-router-flux,eslint,2016-05-09T14:53:17Z,aksonov fixed and merged into master.1 eslint error remaining (except example folder). i will fix it.,neutral
aksonov/react-native-router-flux,eslint,2016-05-09T15:07:33Z,fix eslint src/navbar.js. related to #567,neutral
aksonov/react-native-router-flux,eslint,2016-05-09T15:07:34Z,by analyzing the blame information on this pull request. we identified sarovin. timzaak and froelund to be potential reviewers,neutral
aksonov/react-native-router-flux,eslint,2016-05-09T15:14:04Z,charpeni ops. sorry. enabled os x plan but it didn't run because it is paid! for open source! reverted back. could you submit another pr to run build again? maybe we must use travisci instead with os x support for free (we could build example project and run gui tests for it!),positive
aksonov/react-native-router-flux,eslint,2016-05-09T15:17:16Z,travisci is really slow. but i like your idea. maybe we could setup travisci only for os x build and keep circleci for eslint and mocha ?,positive
aksonov/react-native-router-flux,eslint,2016-05-09T15:21:43Z,ugh. circleci schedules new builds. and don't want to remove 'os x' ones. i'm removing it and re-adding the project again...,negative
aksonov/react-native-router-flux,eslint,2016-05-09T15:21:53Z,yes. we could try both,neutral
US-CBP/cbp-theme,standard,2016-12-06T17:05:29Z,input type file needs :focus style. as a developer. i want the input type of file to have the same focus as other buttons that highlights the element so that it will meet accessibility standards and is consistent with other elements.,neutral
npm/npm,standard,2014-07-23T22:21:24Z,`npm shrinkwrap` should be idempotent. reason: noisy diffs. potential nondeterminism.key order within the dependencies and other properties should have a stable ordering (i.e. be sorted). a useful implementation strategy would also involve centralizing all the calls to `json.stringify` so that we have a standard way of marshalling objects for external use.,neutral
npm/npm,standard,2014-07-26T00:47:06Z,i'm super aware of `npm-shrinkwrap` (pretty sure there's no way raynos would _not_ let us be aware of it). and i'll probably be stealing bits and pieces from it as i try to turn shrinkwrap into the feature it's supposed to be. thanks for the pointer!,positive
npm/npm,standard,2014-08-01T15:12:01Z,how about creating some kind of a standard changelog? many projects have that already. look for `history.md` files everywhere.,neutral
npm/npm,standard,2014-08-01T15:15:13Z,rlidwka that's what i described: > i think that including release metadata within the repo in a standard form. and maybe eventually exposing it via the web site. is enough of a next step. i completely agree that the current changelog is not enough (especially because updating it isn't integrated into the release process).,neutral
npm/npm,standard,2014-08-05T13:23:48Z,we run into this issue with ghost. we specify the engine & enginestrict parameters. but it never gets checked. this is because the standard way to install ghost is as a download. and npm is used to manage its dependencies rather than managing the ghost package itself (although we do publish to npm).,neutral
mochajs/mocha,mocha,2012-03-13T19:30:59Z,looks like `globals` is not a function of the `mocha` object anymore. i'm sorry for the `index.html` changes. but that's the output of homebrew's markdown from the `index.md` file. i've looked at the browser and the page looks as it is today.,negative
mochajs/mocha,mocha,2012-03-13T20:54:33Z,forum. can you please create a forum where people can ask questions about mocha?  a google group maybe?,neutral
mochajs/mocha,mocha,2012-03-13T23:56:01Z,probably not a bad idea i'll set something up when i have a min,negative
mochajs/mocha,mocha,2012-03-14T01:03:08Z,+1,neutral
mochajs/mocha,mocha,2012-03-14T13:18:25Z,looks like ff exposes the 'location" global variable between the jquery ready event and the window.onload event.  i.e. if i move mocha.run() from jquery.ready to window load the error goes away. (using ff 11)p.s. i also had a problem with a third party lib "syn.js" exposing a global which i used mocha.run().globals(['__synthtest']) to remove the error.  but what is interesting is that chrome reports it as a leaked global while firefox does not.  i think its also a timing issue of when globals are introduced.  i got rid of my global issues by doing the following:```$(window).load(function() {  return settimeout((function() {return mocha.run();}). 1);});`````````,negative
mochajs/mocha,mocha,2012-03-15T16:11:57Z,nagyv if you're executing other code in parallel and following that with a call to mocha's done() you may still have some races. it depends,neutral
mochajs/mocha,mocha,2012-03-16T15:33:25Z,this is the _only_ way they work in mocha. they're executed sequentially. perhaps you're calling done() too early? but that's the only way mocha operates,neutral
mochajs/mocha,mocha,2012-03-16T20:11:33Z,i hate jquery's xhr api haha. we can let people vote here but -1 from me. ultimately mocha is about being simple and crud-free. adding support for adhoc things like this takes away some of the elegance imo,positive
mochajs/mocha,mocha,2012-03-16T20:26:50Z,and that's an artifact of it being difficult to work with. that's not really something i want in mocha,neutral
mochajs/mocha,mocha,2012-03-16T20:28:58Z,i'd be up for that; i was just going to write a package that overrode `mocha.runnable.prototype.run`. which of course would be a bitch to maintain in the face of upstream changes since that method is so long.,negative
mochajs/mocha,mocha,2012-03-18T20:43:32Z,it seems to me that currently sinon.usefaketimers doen't work at all with mocha. in the sense of not even making it to timeout.the following code takes 5 minutes to run. without any errors.```beforeeach(function(){  this.clock = sinon.usefaketimers();});aftereach(function(){  this.clock.restore();});it('updates every 5 minutes'. function(done){  sinon.stub(statusapp.module('jobs').events. 'update'. function(){    statusapp.module('jobs').events.update.restore();    console.log('in');    done();  });  statusapp.module('jobs').events.last_run = new date().gettime();  this.timeout(302000);  this.clock.tick(300000);});```,neutral
mochajs/mocha,mocha,2012-03-18T20:50:01Z,it works. just not with my code :(this works fine:``` javascript  var mocha = require('mocha').  sinon = require('sinon');describe('test fake timer'. function(){  beforeeach(function(){    this.clock = sinon.usefaketimers();  });  aftereach(function(){    this.clock.restore();  });  it('should be fast'. function(done){    settimeout(function(){done();}. 300000);    this.timeout(500000);    this.clock.tick(20000000);  });});```,neutral
mochajs/mocha,mocha,2012-03-19T21:37:34Z,i absolutely love mocha's support for coffee-script!,positive
mochajs/mocha,mocha,2012-03-20T21:24:35Z,hmm i'll check that out in a minute. the error messages themselves are up to node core though that's not mocha,negative
mochajs/mocha,mocha,2012-03-21T21:05:46Z,joewhite yeah. i debated that when i was putting this together. since iced (in theory) is fully backward compatible. you're probably right. and re 2. yeah. right again.visionmedia i understand. in that case. what about a way to hook into mocha and provide custom compilers? maybe something like `--add-compiler extension:require_path`. that way i could do `--add-compiler iced:iced-coffee-script` and someone else could do `--add-compiler myext:./my_local_compiler`. would you accept a pr that does that?,negative
mochajs/mocha,mocha,2012-03-22T15:09:27Z,added teamcity reporter to exports (it had been left off). the teamcity reporter was left off of lib/reporters/index.js.  i added it there and to the built mocha.js file.,neutral
mochajs/mocha,mocha,2012-03-22T18:56:09Z,node.js: maximum callstack size exceeded. we are hitting an issue in our specs where. for some reason. we are getting 4k+ entries in the hooks array inside runnable.js. since this array is processed using recursion. this easily blows the cap off of node's callstack.this pull request uses the settimeout of zero technique to reset our callstack as we reach the callstack limit. as an initial pass. i've hardcoded 2000 as the max-allowed depth before resetting the callstack - but it would probably be good for this to be configurable in some way.on a side note. it does seem strange that we have so many entires in the hooks array. we do have about 880 specs and do tend to highly nest contexts using nested describes. many with associated beforeeach hooks. if it sounds strange that we'd have 4k+ hooks entries with that setup. please let me know.thanks! (and mocha friggin rocks by the way!),neutral
mochajs/mocha,mocha,2012-03-22T18:58:40Z,np! the "for some reason" part worries me a little though haha. i dont want to go changing things for some reason. are you guys looping and generating a ton of hooks?,positive
mochajs/mocha,mocha,2012-03-22T19:17:31Z,i still need to inspect the hooks entries to see what each one was.we aren't doing any spec generation. so i was certainly surprised tosee that there so many in the list.,neutral
mochajs/mocha,mocha,2012-03-22T19:28:04Z,yeah definitely sounds like a bug of some kind. you figure something out let me know,positive
mochajs/mocha,mocha,2012-03-23T01:44:31Z,can't change test directory. the documentation on the main page says that "by default mocha(1) will use the pattern ./test/*.js. so it's usually a good place to put your tests". which seems to imply that this pattern could be changed.  the documentation doesn't show any way to do this (shouldn't this be a command line option?) and the code that seems related to this area doesn't clarify much.,negative
mochajs/mocha,mocha,2012-03-23T04:21:35Z,actually. looks like this got merged in already in a slightly different form.this should work as of at least b57b53037246868846c366233ca5176e15c05ec9```mocha.setup({  ignoreleaks: true});```,neutral
mochajs/mocha,mocha,2012-03-23T12:00:51Z,--require does not work for coffee files. require('coffee-script') should be called before the line program.parse(process.argv); in _mocha to enable requiring of coffee-script files via --require.,neutral
mochajs/mocha,mocha,2012-03-23T14:47:42Z,i figured a way to do this without a code change -- just pass `--require coffee-script` before the other requires that need it and it works like a charm.sorry for the spam.,neutral
mochajs/mocha,mocha,2012-03-23T15:52:10Z,alright cool thanks :),positive
mochajs/mocha,mocha,2012-03-23T15:52:53Z,yup thanks hebo. unfortunately the new js api and the browser api are a bit different but i'll fix that up soon,positive
mochajs/mocha,mocha,2012-03-23T15:55:12Z,pass file(s): `mocha --reporter spec spec/{my.awesome}.js`. `mocha --ui tdd test/unit/*.js` etc,neutral
mochajs/mocha,mocha,2012-03-24T00:24:21Z,globals 'mocha' and 'describe' are also not working after this change.,neutral
mochajs/mocha,mocha,2012-03-24T15:13:45Z,fixing the browser based tests - '__dirname' was undefined. i tried running the browser based tests for mocha and received this error:```uncaught referenceerror: __dirname is not defined```on line 894 in mocha.js``` javascriptvar images = {    fail: __dirname + '/../images/error.png'```this pull request should fix all browser based tests.,negative
mochajs/mocha,mocha,2012-03-24T17:18:14Z,this would require that everyone using mocha has to define __dirname,neutral
mochajs/mocha,mocha,2012-03-24T17:34:57Z,we had another pr like this. i'll have to look into it a bit more but i'd like to avoid this if possible. iirc the vague "script error." is because of cross-origin script. are you hot-linking mocha from github?,negative
mochajs/mocha,mocha,2012-03-24T18:05:46Z,yup. makes sense! thanks!,positive
mochajs/mocha,mocha,2012-03-24T21:34:37Z,yes i was hot-linking mocha from github. using it locally gives me a fine error. maybe it should be removed from the documentation then... with a note talking about this issue.thanks for the response.,positive
mochajs/mocha,mocha,2012-03-26T16:03:14Z,:\makes mocha snail like in the browser,neutral
mochajs/mocha,mocha,2012-03-27T21:17:42Z,i think that as an experienced javascript developer it's easy to believe that some things are obvious even though they're not to someone new to javascript and mocha/should testing. for them the mocha docs"the --require option is useful for libraries such as should.js. so you may simply --require should instead of manually invoking require('should') within each test file."may make it seem as if you can just --require should and you'll be able to use it just as the docs of should says.i'm not sure. maybe you're right and it would just bloat the docs and it's better if the user figure it out themselves. or maybe a small change to the docs would help some people avoid the mistake.,neutral
mochajs/mocha,mocha,2012-03-27T21:42:54Z,added some more docs. i could go into detail about exposing globals for mocha blah blah but it would get a bit too much for that page,neutral
mochajs/mocha,mocha,2012-03-27T23:05:33Z,just a bump. is there any reason you haven't merged my commit above? i can break it out into its own pull request if you want. but it should be pretty trivial to cherry pick or just do by hand...,neutral
mochajs/mocha,mocha,2012-03-28T01:39:58Z,i dont recall growl failing on a require(). but failing on growl() maybe. i'll have to take a look at the lib again i cant remember where it fails. either way i dont want to console.log() though,negative
mochajs/mocha,mocha,2012-03-31T17:29:31Z,enoent is what you'll get if a user does `mocha test/foo.js` and foo.js doesn't exist. i dont want to ignore it,neutral
mochajs/mocha,mocha,2012-03-31T17:32:33Z,oh. gotcha. i was thinking in terms of running mocha without specifying a target file/dir at the command line.,neutral
mochajs/mocha,mocha,2012-03-31T21:08:16Z,segmentation faults. stderr and exit code. i'm using mocha to test a c++ addon for node.js. and sometimes the c++ side of things is causing segmentation faults.if usage of the addon is wrapped in a child proces. e.g. with `child_process.exec`. the segfault results in `"segmentation fault"` messages being sent to the child's `stderr` and the child's exit code is something other than `0` (e.g. `139` in my linux env).in the context of mocha. the messages to `stderr` are getting swallowed and the segfault results in the mocha processexiting with status code `0`.any thoughts on whether mocha could be adapted to pass on the messages to `stderr` and close with a non-zero exit code in the event of a segfault?,negative
mochajs/mocha,mocha,2012-04-04T16:01:34Z,ah i see.. you're wanting to meta-generate them from async stuff. i suppose we could have some mechanism to tell mocha to wait. though personally i think setup stuff like that might as well be sync (if possible),neutral
mochajs/mocha,mocha,2012-04-04T21:04:22Z,docs: sample code for globals ignore flag in browser is incorrect. in the "browser support" section of the docs. the sample code snippet says:mocha        .globals(['foo'. 'bar']) // acceptable globals        .run()but this doesn't actually work - acceptable globals are defined as part of mocha.setup(). there is no .globals() function as far as i can see,negative
mochajs/mocha,mocha,2012-04-04T21:18:16Z,this has changed a little. and will in the future to match the server-side js api,neutral
mochajs/mocha,mocha,2012-04-04T21:18:24Z,i'll update them soon,neutral
mochajs/mocha,mocha,2012-04-05T15:59:57Z,i dont think i want to expose the runner to the tests themselves unless there's a really compelling reason. right now you could do that with the runner returned from mocha.run(). maybe chuck the html in a property `this.html = html` in the test-case. we should have the context available. if not i can add that. `test.context` or something,negative
mochajs/mocha,mocha,2012-04-06T15:50:50Z,you can put them in the `mocha.opts` file if you want them for any `mocha(1)` call. to run one file just pass that one file to mocha,neutral
mochajs/mocha,mocha,2012-04-10T01:29:09Z,i'd like to help out with this. what did you have in mind: something like``` jsmocha.setup({  ui:'bdd'.  grep:'foobar'});mocha.run()```or more like``` jsmocha.grep('foobar').run()```,neutral
mochajs/mocha,mocha,2012-04-10T19:36:52Z,hmm still seems to jump a char at times. for example in mocha run `$ make test reporter=progress` you should see it,neutral
mochajs/mocha,mocha,2012-04-10T20:32:13Z,hmm. i can't reproduce it - the bar gets all the way across on mocha tests using that command - can you send more info on the char jump?,neutral
mochajs/mocha,mocha,2012-04-10T21:44:35Z,fix issue #325 (add better grep support to js api). fix issue #325 - when testing in the browser. the mocha object now has a grep() method which you can chain like so: mocha.grep('foo').run() - with shwaydogg,neutral
mochajs/mocha,mocha,2012-04-10T22:02:56Z,we should use the mocha prototype in ./lib/mocha.js. right now you can only pass a `grep:` option but it would be nice to have this there. allowing a regexp _or_ a string,neutral
mochajs/mocha,mocha,2012-04-10T23:26:24Z,ah i see - i had it in my head that this was an enhancement to browser test running only. but ya we should totally make this api available in node. etc.one question: it appears that in the browser tests you have that you're not actually instantiating a mocha object ... you're adding methods (specifically .run() and .setup()) _to_ the mocha constructor. and not using the mocha.prototype methods. what's the reason for that?related to that. should we keep the code we have in support/tail.js?,neutral
mochajs/mocha,mocha,2012-04-11T18:59:02Z,now in opera an error is thrown:global leak detected: statsthats exactly what visionmedia  said. mocha has a global leak :p,negative
bcoe/sandcastle,mocha,2013-07-03T15:34:23Z,switch micro-test to mocha. i far prefer mocha for unit testing at this point. we should move to this.,neutral
teerapap/grunt-protractor-runner,selenium,2014-03-05T06:02:00Z,i am having the same issue. running protractor directly works. but from grunt it does not.installing chromedriver package and pointing to it in grunt gets past this error. then it complains about no selenium. when i do the same for selenium as for chromedriver. it still complains but with a different error. that new error is the same one i get when i run protractor on its own with seleniumserverjar. chromedriver or seleniumaddress with any value (to get protractor working i had to leave these values blank).wish i could be of more help. only been using protractor for a couple of hours.,negative
google/closure-library,selenium,2015-07-30T16:28:53Z,i amended my commit to fix an issue with the name of the "postinstall" script that is responsible for installing selenium and chromedriver dependencies. s/post_install/postinstall,neutral
AnalyticalGraphicsInc/cesium,eslint,2017-01-11T16:31:05Z,> if we plan to automate this. that can be a separate issue or part of #652unfortunately this would be hard to automate (as it relies on webstorm). however when we finally switch to eslint. they have plugins for it.,neutral
yandex-ui/noscript,jshint,2013-05-29T11:59:10Z,я тут коммитил чего-то и travis мне сообщил. что мол ошибки.ошибки из jshint'а.вот такие:первая `[l329:c24] w004: 'i' is already defined.` в коде типа такого:```for (var i = 0; i < 10; i++) {    ...}...for (var i = 0; i < 10; i++) {    ...} ```вторая `[l531:c10] w083: don't make functions within a loop.` в коде вида:```for (var id in ids) {    (function(value) {        that.on('...'. function() {            //  сделать что-то с value        });    })( ids[id] );}```обе "ошибки" мне кажутся странными.формально да. в первом примере `i` переопределяется. потому что в js нет блочного скоупа.но я предпочитаю писать именно так — так понятнее и логичнее.второй пример вообще непонятен. это ж классическая проблема — приходится в цикле делать замыкание.как предполагается это писать? выносить отдельно в именованную функцию? неудобно.,negative
yandex-ui/noscript,jshint,2013-05-29T12:04:54Z,да. я тоже такие ошибки игнорирую.лёша. а travic jshint-ом проходится по коду?может опций добавить?,neutral
yandex-ui/noscript,jshint,2013-05-29T12:06:19Z,я так понимаю. что travis падает прямо на jshint'е и никаких реальных тестов не запускает.,neutral
yandex-ui/noscript,jshint,2013-05-29T12:06:54Z,сначала jshint потом тестыне считаю. что на jshint можно забить и пусть пишет кто как хочет,neutral
yandex-ui/noscript,jshint,2013-05-29T12:12:23Z,опцией к чему? continious integration для того и нужен. чтобы все проверятьруками ты можешь запускать `grunt mocha` или `grunt jshint`,neutral
yandex-ui/noscript,jshint,2013-05-29T12:20:00Z,> опцией к чему? continious integration для того и нужен. чтобы все проверятья имел ввиду опций для jshint (в `.jshintrc`),neutral
yandex-ui/noscript,jshint,2013-06-11T13:19:26Z,edoroshenko поправь code-style по jshint плиз,neutral
Azure/azure-sdk-for-node,jshint,2012-07-09T21:36:33Z,fixes to some jshint uncovered issues,neutral
Azure/azure-sdk-for-node,jshint,2012-07-09T21:36:50Z,thank you. merging.,positive
assaf/zombie,standard,2013-05-10T09:49:58Z,browser options: global wait completion-function. it would be handy if a global wait completion-function could be set as a top-level option on browser.i need this so `clicklink` and `pressbutton` can always wait for a standard condition. but ideally it would be overridable per call e.g. if i pass `options.element`.btw thanks for your great work on zombie!,positive
jeffjewiss/ember-cli-postcss,eslint,2017-03-17T13:17:27Z,allow addon-local configuration. this allows an addon to have its own postcssoptions. for example. this can appear in an addon's index.js:```jsvar cssimport = require('postcss-import');var cssnext = require('postcss-cssnext');module.exports = {  name: 'my-addon'.  options: {    postcssoptions: {      compile: {        enabled: true.        plugins: [          { module: cssimport }.          { module: cssnext }        ]      }    }  }};```those options will remain properly scoped to the addon's own code and have no effect on the wider application (and may not be using ember-cli-postcss at all)i also had to streamline the eslint configuration to get it working for me. this is now using the out-of-the-box eslint setup provided by the latest ember-cli. this removed several eslint plugins that weren't doing anything (given that we don't have any clientside code in the addon).,negative
jeffjewiss/ember-cli-postcss,eslint,2017-03-22T12:27:51Z,no worries. i realized later that part of the problem was my own mistake. my editor was running the globally-installed eslint. which doesn't see the plugins in the project's node_modules.,negative
jeffjewiss/ember-cli-postcss,eslint,2017-03-22T13:04:20Z,i actually experienced a similar issue when editing the project after merging the pr since i have `eslint` and `standard` setup globally. are you by chance using vim with syntastic?i'd like to keep using `standard` javascript style for this project. but i'd like to get `eslint` setup correctly before committing to it.thanks!,neutral
jeffjewiss/ember-cli-postcss,eslint,2017-03-22T14:28:33Z,no. emacs with flycheck. but probably the same basic idea.the solution i have used in my own projects is to do module resolution directly in the config file instead of leaving it up to eslint:```js// .eslintrc.jsmodule.exports = {  "extends": require.resolve('some-eslint-module')};```,neutral
jeffjewiss/ember-cli-postcss,eslint,2017-03-22T15:08:14Z,thanks for clarifying!i'm going to try sticking with `standard` for now and if it continues to cause problems. revert to the recommended default eslint settings.thanks again for this fix.,positive
datproject/dat,standard,2014-07-21T20:14:05Z,i find it stimulating. myself. it is nice that the flows are (relatively) straightforward. and aren't tangled into circular references or a big-ball-o-mud. which means parts can be encapsulated at various scales. components switched out. apis standardized. etc. thanks. mlovci!,positive
GoogleCloudPlatform/cloud-trace-nodejs,mocha,2016-08-02T17:53:37Z,update mocha and timekeeper,neutral
GoogleCloudPlatform/cloud-trace-nodejs,mocha,2016-08-02T18:24:32Z,googlecloudplatform/node-team ptal.,neutral
GoogleCloudPlatform/cloud-trace-nodejs,mocha,2016-08-02T18:41:46Z,lgtm,neutral
anvilresearch/connect-nodejs,standard,2015-07-01T08:21:59Z,use correct property on error object. the `error` object has a standard `message` property which `callbackerror` correctly uses. and which `unauthorizederror` should use.,neutral
anvilresearch/connect-nodejs,standard,2015-07-01T18:20:21Z,thanks for getting me up to speed. :)in that case. why does `callbackerror` set `message` and not `error_description`? and. shouldn't `message` also return the same value as `error_description` seeing as it is a standard property on the `error` object? e.g. restify will return `{ "message": "" }` as a response when an `unauthorizederror` happens because `message` is not set.,negative
anvilresearch/connect-nodejs,standard,2015-07-01T18:54:06Z,callbackerror isn't used as an oauth-type error response from the server. `message` makes more sense there given the context.what we should probably do is have anvil.verify middleware use res.send with the error directly from the middleware instead of passing it to next. it shouldn't be on the user of the lib to define the correct error handler in their application/service.,neutral
anvilresearch/connect-nodejs,standard,2015-07-01T18:56:13Z,i think the solution you've outlined is solid. i'm closing this pr as it is not a proper fix.,neutral
tapio/live-server,eslint,2015-05-31T14:38:41Z,eslint. i'd like to suggest that the codebase be made more consistent through the use of [eslint]( if you agree. i'd like to volunteer to do the cleaning. please suggest the ruleset you'd like to use and i can get to work.i would suggest switching from tabs to spaces for better-looking diffs but it's completely up to you :),neutral
nathanboktae/mocha-phantomjs,mocha,2014-08-12T15:16:40Z,allow mocha reporter file output. this change allows reporters to output to a file simply by setting the cli arg --reporterfile. anything in reporter.output will be written to the file.,neutral
nathanboktae/mocha-phantomjs,mocha,2014-08-12T16:27:15Z,`mocha-phantomjs` is just an executable. we document the parameters and you can put the parameters in your makefile like any other exec task. i don't see too much value in this. but if someone sent a pull request i'd consider it.,positive
nathanboktae/mocha-phantomjs,mocha,2014-08-12T16:31:25Z,we already have this feature. `--file` does exactly what you added. except without tests and a bug (you don't close the file).,neutral
nathanboktae/mocha-phantomjs,mocha,2014-08-12T16:38:54Z,you have a point about closing the file and including tests. i'll get some tests added and actually close the file...the `--file` feature does not work for things like outputting an xunit file since all output (including console.log - see metaskills/mocha-phantomjs#133) is sent to the file. this allows the reporter to be the only thing outputting to the file without having to remove console.log from code (which isn't always possible depending on external libraries being used).if you think a different approach (besides removing console.log statements) would be better. please let me know.thanks!,neutral
nathanboktae/mocha-phantomjs,mocha,2014-08-12T16:45:01Z,if you have to write a custom reporter anyways. then write one that uses `process.stdout.write` and use the existing `--file` feature.,neutral
nathanboktae/mocha-phantomjs,mocha,2014-08-12T16:47:35Z,not to mention we also have the hooks feature (#99) which you can dump output to a file with (yes we need better documentation on that feature).,neutral
nathanboktae/mocha-phantomjs,mocha,2014-08-12T17:02:08Z,okay. i'll see if i can get hooks to work instead and then probably submit a pull request for readme.md to outline the feature a little better.,neutral
nathanboktae/mocha-phantomjs,mocha,2014-08-22T05:59:41Z,don't spam the issues. this has nothing to do with mocha-phantomjs.,neutral
nathanboktae/mocha-phantomjs,mocha,2014-09-02T12:13:01Z,reporters like xunit. for example. attempt to produce xml. and if that gets randomly sprinkled with logging output. sometimes the xunit report becomes invalid. i think. in general. reporters that need to produce a specifically formatted file will break. apart from that. there's also the visual thing. mocha-phantomjs outputs a line to mark the beginning of a test. then the test outputs some logging. and mocha-phantomjs tries to go back and amend its previously output line with success or failure. and it fails. so it outputs the success of failure line after the test's logging. this messes up test reporting very much. making it tiresome to try to read it.,positive
nathanboktae/mocha-phantomjs,mocha,2014-09-02T15:37:55Z,> the important thing is you disagree and you won't fix this.no you missed the point where it's not possible to fix it as suggested. reporters use `console.log` and random code uses `console.log`. both are pieces of code that runs in the client browser. the built in mocha reporters are compiled in to it.not to mention i gave you another alternate solution of forking the reporter. why is that not an option? will take you 2 mins to do.btw i have tried to resolve this issue before too - see visionmedia/mocha#1068,negative
nathanboktae/mocha-phantomjs,mocha,2014-09-02T15:53:57Z,sorry. by > thanks for the suggestion.i meant i'll try it. so it is an option. but i still thought it makes sense for mocha-phantomjs to support this without tweaking the reporter. i'm not sure how to do it. and i know what you mean. that both the reporter and the tests use `console.log`. still. there might be a way to separate them. if i have time to look into it i'll see what i come up with.,negative
godaddy/javascript,eslint,2016-03-08T03:32:52Z,i've actually never used `godaddy-js-style-lint`. have you tried with `godaddy-js-style-eslint`?,neutral
godaddy/javascript,eslint,2016-03-08T15:32:53Z,hi gzurbach.  based on that eslint issue. it definitely seems like something is amiss. however. i'm unable to reproduce it locally. on either v2 or v3 of godaddy-style.  can you provide any more details about this one?  your package.json would be a good start.  i might have a dependency that is masking the problem.,positive
godaddy/javascript,eslint,2016-03-12T19:25:26Z,i'd personally prefer it was an error still since there is no legitimate reason for the sample code as given. if the it block referenced the variable and eslint still complained. i'd fully agree. but the message is incorrect. so i guess +0 on balance.,negative
godaddy/javascript,eslint,2016-03-17T23:55:19Z,add instructions to override a specific rule locally. we have been using godaddy's style guide in 4 projects so far and we always encounter the need to override one or two eslint rules.we struggled quite a bit to understand how to extend and override the provided `.eslintrc` file in `dist`. we thought it would be nice to share our findings with everyone else.-- the mya and api teams,negative
mccormicka/Mockgoose,mocha,2014-05-12T22:20:45Z,needs an "unmock" method. because node will only `require` a module once globally in a process instance. when mockgoose "infects" `mongoose`. it causes _all_ future calls to mongoose to be mocked. this is fine most of the time. but i have a specific (not uncommon) usecase where this is problematic:my express app has a suite of unit tests (testing mongoose models) and a suite of integration tests (testing http. controllers. and mongoose). i use mockgoose for the unit tests. but a real mongo database for the integration tests. running both tests in the same call to `mocha` will fail because there is no way to tell mockgoose to "unmock" mongoose.does this make sense? am i misunderstanding something? thanks :),negative
mccormicka/Mockgoose,mocha,2014-05-13T22:18:08Z,i ran into the same problem the other day as well. my solution was to rethink my test strategy. but i was surprised that there was no option to 'unmock'.,negative
mccormicka/Mockgoose,mocha,2014-05-13T22:41:01Z,likewise — i actually ended up ditching mockgoose entirely. i was using it for unit testing mongoose models. but really testing that `save()` works is basically pointless because mongoose itself has tons of test cases covering that.,negative
jshint/fixmyjs,jshint,2012-08-19T23:59:26Z,ability to exclude files/folders ?. hi.i can't seem to find a way to exclude files/folders when running "fixmyjs"i have tried setting .jshintignore and .fixmyjsignore with no successany pointer?thanksjt,negative
jshint/fixmyjs,jshint,2012-08-20T01:55:31Z,i thought about adding it to jshint but i don't want to bring this baggage into jshint. so i ended up choosing to deprecate those options and take them out of .jshintrc. instead they'll be passed into fixmyjs as a parameter.the node.js package will use cli arguments instead.i've already implemented this. just have to ship it.,negative
jshint/fixmyjs,jshint,2012-08-20T01:56:32Z,it uses `.jshintignore` can you please post a sample .jshintignore which fails for you?,negative
jshint/fixmyjs,jshint,2012-08-20T02:57:09Z,thanks will check it out.,positive
cucumber/cucumber-js,standard,2017-03-10T23:01:00Z,no. please see the documentation for custom formatters. there is a link on the readme.,neutral
cloudchen/grunt-template-jasmine-requirejs,jasmine,2013-02-21T17:17:21Z,have you examined the generated specrunner? use `grunt jasmine:[your task name]:build` to retain your specrunner and post it here if necessary. that requireconfig is just json stringified and that doesn't look like it would break.,neutral
cloudchen/grunt-template-jasmine-requirejs,jasmine,2013-03-13T05:37:42Z,specrunner ends up loading jasmine-helper.js before successfully loading all the scripts (specs). i encountered an issue where jasmine-helper.js gets loaded into dom before successfully loading all the specs files. as a result. no specs are found/ executed.**to reproduce:**include a dependency bigger in size in one of the spec file or source javascript file. in my case. i have a dependency on knockout.js (~40k in size) in my source file and as a result 9 out of 10 times jasmine doesn't find/execute any of the specs. **cause:**nested require calls don't guarantee any order in loading of dependencies. hence.  inner require (for scripts.start file in template) statement gets executed before all the dependencies in outer require call are successfully loaded into dom.**fix:**wrap the inner require call with requirejs:domready plugin to ensure that dom is in ready state!,negative
appium/appium,selenium,2013-06-25T09:27:32Z,nice one :+1: it's definitely easier than have to restart appium to re-register with the grid.,positive
appium/appium,selenium,2013-06-25T13:19:56Z,it looks good to me. i don't know much about grid either. /cc jlipps,positive
appium/appium,selenium,2013-06-25T16:09:59Z,also. we typically define functions as variables instead of doing `function foo()`. but since i didn't catch this the first time. i'll let it slide :-)bonus points for rewriting the function definition style in this file!,neutral
appium/appium,selenium,2013-06-25T17:02:28Z,calls to window_handles crash appium when remote debugger not online. it shouldn't fail. but should return a selenium error or an empty list of handles instead.,neutral
appium/appium,selenium,2013-06-25T23:47:41Z,support .isselected() for switch elements. in ios. a "uiaswitch" object is an on/off toggle switch. trying the isselected() method on these elements isn't supported in ios (seems to work in selendroid. though)java example:driver.findelement(by.name("example").isselected())returns:org.openqa.selenium.webdriverexception: not implemented in this context. try switching into or out of a web view (warning: the server did not provide any stacktrace information)technically. .gettext() on a switch returns "1" or "0" for on/off respectively. so there is a workaround.,neutral
appium/appium,selenium,2013-06-25T23:59:03Z,in android there is a field selected for some toggle controls. so this isselected() can work cross platform. i wonder if there is a .select() method in appium already?,neutral
appium/appium,selenium,2013-06-26T21:59:51Z,additionally. for android. element.attribute("selected") will return the value.,positive
appium/appium,selenium,2013-07-11T20:16:40Z,there are already selenium methods for changing the device orientation. this shouldn't go in mobilecmdmap.,neutral
appium/appium,selenium,2013-07-11T20:17:22Z,if methods for changing orientation in java don't exist. those should be contributed to the java selenium bindings. methods exist already in python. wd.js. etc...,neutral
appium/appium,selenium,2013-07-11T20:26:41Z,where can i find an example of that selenium method to rotate?,neutral
appium/appium,selenium,2013-07-12T01:00:40Z,implement set and get orientation. currently java and python selenium does not support setting orientation. python selenium only has the get option.  it would be good to add the get and set orientation to the mobilecmdmap so it can be called using the javascript executor "mobile: xxx" until java implements the rotation since it is already available in the controller.js.if possible. add these to controller.js. setorientation : exports.setorientation. getorientation : exports.getorientation,neutral
appium/appium,selenium,2013-07-16T18:25:37Z,implement full screenshot support for mobile safari and mobile chrome. being able to take full screenshots (entire webpage. below the browser view port) on mobile devices with selenium would be a huge enhancement!,neutral
appium/appium,selenium,2013-07-19T09:17:42Z,alert handling is not implemented for android. alert alert = driver.switchto().alert();system.out.println("alert text: "+alert.gettext());when i run the above code in android + windows + appium. the exception is.org.openqa.selenium.webdriverexception: not yet implemented. please help us:  (warning: the server did not provide any stacktrace information)command duration or timeout: 5 milliseconds,neutral
appium/appium,selenium,2013-07-19T21:10:41Z,i don'y believe switch().alert() is implemented on android. and if it is not implemented it would be equally not implemented between windows and mac,neutral
appium/appium,sauce,2013-05-06T23:54:55Z,android example for sauce,neutral
appium/appium,sauce,2013-05-07T00:45:07Z,android on sauce example for node,neutral
appium/appium,sauce,2013-05-09T21:21:33Z,yes i just tried ios on sauce. i received an alert for location service enabling. i did it manually but it didn't switch back to app. so i think some sort of flag to enable/set location is required.,neutral
appium/appium,mocha,2013-06-30T17:39:46Z,hi girija. i tried to reproduce this but can't. what happens if you run the delete all cookies test in the codebase?`mocha -r spec -t 60000 test/functional/safari/safari.js --grep "delete all cookie"`,neutral
agda/agda-stdlib,standard,2017-02-04T12:25:35Z,mmh. i find this too drastic.  `unsafe` modules should only do things that are really unsafe. not things that are declared unsafe because of the deficiency of the `--safe` mechanism.for instance. in `data.nat.base`. ```agdaerase : ∀ {m n} → m ≤″ n → m ≤″ nerase (less-than-or-equal eq) = less-than-or-equal (trustme.erase eq)```is perfectly safe even though it uses `trustme.erase` (which is also safe).as such. i am against this reorganization of the standard-library.  better investigate how to make the `--safe` mechanism generate less false positives.,negative
agda/agda-stdlib,standard,2017-02-04T20:59:05Z,i know there is a work around. i'm asking by `fix-agda-whitespace` because it *isn't* in the standard library repository. did you install `fix-agda-whitespace` in *your* sandbox using the makefile? how?,negative
agda/agda-stdlib,standard,2017-02-06T16:58:09Z,sorry i meant **selectively** move the contents of `data.nat.base` back into `data.nat`. for example the things that don't seem essential to me are:-  anything to do with `_≤′_` and `_≤′′_`- the `generalisedarithmetic` module- the `ordering` definition.these are just suggestions for the future of course! the important things that this pull requests achieves is that- the standard ordering properties (reflexivity. transitivity etc.) are accessible without having to open the `dectotalorder` module every time- they are where you'd expect them i.e. in `data.nat.properties` rather than in `data.nat`.the reasoning module has to be moved because it relies on the fact that its a decidable total order. as i mention above. i feel that maybe it should go in its own separate file as is the case in lots of other parts of the library. but again that's only a suggestion and this pr doesn't attempt to do that.,negative
agda/agda-stdlib,standard,2017-02-08T20:46:14Z,> i'd be great if you could run the `make test` of agda with your library branch before a pr.for what? if the pr's author find a problem running `make test` on agda. he cannot fix the problem using a pr for the standard library. > after running `make test` the final time i must have missed `divmodutils` out my `git add`.i don't think so. i guess you didn't run `make test` on the agda repository but in the library repository which is the correct procedure.,negative
agda/agda-stdlib,standard,2017-02-09T09:24:32Z,> for what? if the pr's author find a problem running make test on agda. he cannot fix the problem using a pr for the standard library.true. but he can alert about the expected breakage. and also get a bit more feeling about the backwards-compatibility of the change.,neutral
jshint/jshint,jshint,2012-02-23T02:37:31Z,neither funcscope nor latedef triggered when both violated. run the following code over jshint:```function f() {    "use strict";    console.log(y);    for (var x = 0; x &lt; 10; ++x) {        var y = x * x;    }}```the variable y is used in line 3 before defined in line 5. and out of "scope" of the for loop as well.  somehow neither funcscope and latedef catch it. which is clearly incorrect.  if the use of y is moved to below the loop. jshint catches funcscope.the error is triggered on variable definition. so i think perhaps the problem is that the existing usages of variable are not passed into newly defined function.  i don't have the time to trace the code though. so i cannot be sure.,negative
jshint/jshint,jshint,2012-03-04T00:29:50Z,gozala jshint now parses the comma operator at some positions... not perfect yet. but maybe it helps a bit,neutral
jshint/jshint,jshint,2012-03-05T03:39:21Z,closing in favor of jshint-next.,neutral
jshint/jshint,jshint,2012-03-05T03:43:30Z,we will introduce this in jshint-next.,neutral
jshint/jshint,jshint,2012-03-05T07:30:03Z,this sounds like a wishlist kind of ticket. goatslacke could you move it to jshint-next please?,positive
jshint/jshint,jshint,2012-03-12T23:26:06Z,sorry. didn't see the question.because jshint has other option names than jslint. e.g.`/*jslint unparam: true. sub: true. cap: true. on: true. fragment: true*/`,positive
jshint/jshint,jshint,2012-03-12T23:34:09Z,you're right.  the problem is with komodo's implementation of jshint.  komodo jshint is not honoring latedef set to false.  thanks!,positive
jshint/jshint,jshint,2012-03-19T14:57:02Z,thanks for not closing the issue it for me but rather asking me to close it.now that you explain it. it makes sense - of course this does not involve jshint itself.not sure why i haven't found the documentation in the first place.,negative
jshint/jshint,jshint,2012-03-19T14:58:47Z,ripper234 to make it easier. attach your functions to a single global object (aka a namespace) and just list that one object as a global in your jshint config.  this is also just good practice to try and reduce the chance of naming collisions.,positive
jshint/jshint,jshint,2012-03-19T21:16:32Z,based on gh-483 i'm going to assume you're using node-jshint and offer a solution that works for that.why not use a config file? you can set a `.jshintrc` file and specify which globals will be used in your project:```"predef": [  "mysingleton". "mvcframework4". "flowcontrolzjs"]```,neutral
jshint/jshint,jshint,2012-03-20T06:56:22Z,goatslacker - right. i'm using node-jshint. with your proposal. i'll have to declare all my functions this way. it's not practical. we're currently not using a namespace for our own functions. but rather defining them globally.,neutral
jshint/jshint,jshint,2012-03-20T11:15:13Z,as a workaround. you can use `/*jshint undef: false*/` after `"use strict";`,negative
jshint/jshint,jshint,2012-03-20T11:37:37Z,i worked around by editing jshint.js as described aboth. since both are on by default anyway. when user sets the to false he usually does not mean "i only want to surpress this for the non strict mode parts". as you shouldn't have much non-strict code anyway.,neutral
jshint/jshint,jshint,2012-03-20T11:38:40Z,goatslacker i think we have to switch the parser as fast as we can ;) (where style related and "functional" parts are clearly kept apart - and hopefully we find an easy way to separate all the tests from another. too)i also think we should emphasize the so true sentence from crockford: **it will definitely hurt your feelings** (its only purpose is to hurt your feelings)jslint and jshint are no parsers - they should warn if something is known as bad practice (at best with a quick example. why it is bad) - even if it's compilable..,positive
jshint/jshint,jshint,2012-03-20T11:42:28Z,wolfgangkluge - i'll append your statement with "ideally. it should be possible to turn off any specific warnings. using a global config file".it's ok that jshint/lint "hurt my feelings". but i should be able to control it.,negative
angular/angular.js,standard,2014-11-22T19:38:56Z,use standard event.preventdefault when available (event.returnvalue is deprecated) - #4557,neutral
angular/angular.js,standard,2014-11-22T21:38:04Z,clas look good. thanks!<!-- ok -->,positive
angular/angular.js,standard,2014-12-14T12:21:18Z,sjurba out of curiosity - what is the practical use-case you've got for this change? i'm aware of the ffoxos-specific args that we need to pass to the xhr's constructor but i wonder what are the non-standard properties that you've bumped into.i'm leaning towards proposing a more generic solution where there would be a dedicated service responsible for creating xhr instances but yeh. would like to understand all the use-cases first.,neutral
angular/angular.js,standard,2014-12-17T20:28:24Z,imo `.success` and `.error` were a bad bit of api design in the first place. this issue highlights a number of situations where developers get confused because they either expect `.success` and `.error` to work the same way as `.then` or vice versa.in a perfect world i would rather just ditch these `$http` specific "promises". instead we could encourage developers to use the standard `$q` promise api `.then` and `.catch`. there is very little benefit imo in working with explicit parameters over working with the response object.,negative
DefinitelyTyped/DefinitelyTyped,standard,2015-06-10T17:43:03Z,this one too. vvakame. added standard header to d.ts and test file. unorm-tests.ts. ready to merge? thanks!,positive
