['fix(karma): fix unit tests across the all supported browsers', 'fix(karma.conf): fix for incorrect definition of mime type of test.ts file. chrome v.55 tried to run test.ts file as a video file. setting *mime* option in karma.conf.js should fix it', 'yep. karma used to not set the `bin: {}` stuff to let npm to identify the clis (they wanted people to install karma-cli). want to send the same patch in for underscore?', 'this seems to be related to #163i was able to solve my problem by installing bower and karma globallynpm install -g bowernpm install -g karmathen i could run npm install within the angular-phonecat directory successfully.i also needed to make sure that i ran the npm install within a command prompt which had the git executable in the path. i had installed git to only run in git bash and then i was attempting to use the normal windows command prompt to run npm install which did not work because git was not in the path.', 'would you rather i pull this in now or wait until you can apply you latest learning?', 'i think the easiest way is to download a free virtual machine from modern.ie and use it to run the tests.you can copy the karma runner url and open it in the vm browser and everything should work.', 'wow millerren thanks so much for this. i was banging my head against the wall debugging karma (i inherited an old repo) and leaving angular-scenario in my bower.json was breaking my tests.', 'also just thought. can you add the babel karma preprocessor and make sure that tests run alright?', 'hey andrew - have just booted up this fork again. will have a look at getting babel and karma dancing when my time frees up this week.', 'oh and i would need to remove any references to angular-scenario.js from my original karma.conf.js file too.', 'i see that you have some unit tests and i got it working. but i had to manually copy all media files that are used by unit tests. also. some unit tests do not pass anymore (getinitializationsegment removed). to test mse in browsers karma can be used. it can run code in chrome. or selenium maybe?..', 'thanks daftmonk!', 'when submitting a pr you need to update (or add if needed) the tests and then run karma to check that everything is ok. the build did break.', 'fix(karma): exclude demo files. i am working on #1884 and well. seems to be doable. but karma also adds the demo files and it start complaining if i change the functions to modules. since we are not doing anything karma-related with the demos. the first step would be excluding them.with this done. i could work on improving the demos.i think that the globbing is good enough (i tested it. it seems to work no problem).', 'i had the same issue and `sudo npm install -g karma-cli` worked for me', "that's odd. `npm run buildandtest` works fine both on my laptop and on travis. is chrome on your path? you can define a chrome_bin environment variable to point karma to a specific chrome installation.", '+1 for us too. we currently have an active support ticket with saucelabs to try and figure things out. of note. the navigation to about:blank is indeed the culprit. but changing it to navigate to some other site instead (we used google) does not help. will update as we learn more.', 'fix jquery bower reference in karma conf. fixes #167', "various logging cleanups. * don't just log errors without any context as to where they came from or what   they mean * avoid the use of '%s' and multi-argument console.log because it looks awful   under karma.", "fyi i have zero experience with karma so if that's a newb error that's why.", 'i\'m sure this is just my lack of familiarity with karma. but i can\'t figure out what/where/how to modify the tests to add a `"preferxhr: false"` variant. any chance you could add that? also. what do you think of the current code? i think i addressed all your feedback points. but you might still find ways to improve it.', 'taurus227 its not nice to mix travis tests and unit tests. if you want to unit test this i suggest to take a look at the karma tests. you can do comparisons there easily. look at the test-entity.specbut if you want to test if unique attribute in the changelog works i guess its not needed as its a liquibase feature that you are testing and not our code', 'combining split renderer and widget for functional testing. right now. when a template is bound to a widget but the renderer and widget logic is split. there is an additional function:```function __registerwidget() {    if (typeof window != "undefined") {      __markowidgets.registerwidget(__widget. require("./widget"));    }  }```in the template.marko.jsthis causes `template.render` to not work and it throws the following error:`__markowidgets does not have function registerwidget`the purpose of this is to enable functional testing. if i can combine the renderer and widget logic. i can render the widget directly and interact with the component and the event handlers associated. if you have a better approach to functional testing rather than combining the two. that would be awesome too.currently i am using mocha for testing run on karma.', 'hey sidsakhadeo. if i am understanding your problem correctly. it looks like in your case. the `window` global variable is defined on the _server_. this is causing `marko-widgets` to think that it is running in the browser and that is causing the non-existent `__markowidgets.registerwidget(...)` method to be called. we can definitely change the code to guard against that. but why is the `window` global being set on the server?can you confirm that the error you are seeing is being thrown on the server (and not in the browser)? can you also confirm that the `window` global variable is being set on the server? i can put in a fix to make the `registerwidget(...)` method a no-op on the server. but normally that would not be needed since that code should only run in the browser. let me now. thanks for reporting the problem!', 'yo. thanks for getting back to me. in mocha. we have setup a global window object. so yeah. when i render the template client side in unit and functional tests. we have this error. the scenario we are dealing with is. we render the template server side and run unit tests on the code. for the functional tests on the client side. ideally it would be best if we extended the widget logic with the `render` function. rendered the template client side and ran the tests. or we could render the template server side and appended the rendered html to the document on client and then run tests.i could use some advice regarding this approach for unit + functional testing too. the main issue for us is we are trying to replicate both server and client at the same time but functional tests on karma is just client and unit tests run are just on the server.', 'hey. actually karma gets installed by `npm install` as it\'s a dev dependency. this line also installs all of the required peer dependencies.i\'m not totally sure why/when the windows tab changed to say "npm install -g karma". but the mac/linux tab should be correct as is.']