["this is just a long over due following up to this thread. i've been experimenting with different code coverage solutions. and how to use them with pixi. would like to get coveralls working with it. showing coverage would be great in order to get writing proper tests going. as it's always nice to see that number go up.there is a solution with karma. and mocha. and various others.what are your thoughts on all this?", 'karma cleanup. spec reporter. - cleanup on karma task. and config- use karma-spec-reporter for much better test reporting in the builds- make sure chrome launcher is installed (for local testing currently until chrome can be used on travis)', 'manually merged into `dev`', '"i like karma because it does do those minimal things you mentioned. it can also run all the generation commands as a karma watcher task. which allows ""save + refresh"" debugging...."', "so just to converge on minimum solution: let's implement simple web runner with karma launcher and istanbul preprocessing. cool?", 'this seems to be pretty old. you have to do `git install --save-dev karma` to run into it.', 'restructured tests. now they are much more readable. because in separate files. other points still need to be done.', 'update to karma. update travis to karma and add chrome as a test browser', 'grunt. first grunt file.to build: grunt buildto test with karma. single run: grunt karma:unitto watch: grunt watchto clean: grunt cleandefault: karma:unit build', 'are you aware that travisci does not support chrome?you need to remove your last commit for me to merge this in.', "not i was not. i've never used travisci in my projects so far.how can i remove a commit from a pull-request? thanks!", 'readme.md should be updated to integrate grunt targets.', 'this will be resolved by #12', "jirikavi  we can probably configure it to run the tests directly via karma without including gulp (although personally i don't mind if we use gulp to make local builds easier for automated minification :p).`script: node_modules/karma/bin/karma start karma.coverage.js --single-run` might do the trick if we add it to the travis file.that'll run the karma coverage as part of the full test run i think.", 'fixed coverage paths. updated karma.coverage to support multiple reporters.if in the travis environment. an lcov reporter is added.', "i'm all for using a real browser for testing instead of phantom. :+1:we still need to swap out the `npm test` script and add `karma-cli` to `package.json` right?", 'sync test scripts with karma config.. `setup/dom-setup.js` depends on jquery so it must be included after.', 'updated karma to run on phantom rather than chrome.', 'you are my new best friend.', "i have definitely reaped the benefits of using your project so i always like to contribute back wherever i can. i don't know of a way to dynamically switch between chrome and phantom but i left the chrome karma plugin in there incase you ever wanted to run them side-by-side.", 'karma test framework. use karma test framework for local in-browser test automation and ci support for saucelabs.', "what's karma? can you provide a link please? cheers! :)", 'oh man change log brilliant!thank so much for giving this a look over!!yeah. that is my greatest fear is the module rename - but i think it will be for the best in the long run - i feel awkward with my name in there!', 'lol. are you affraid to be famous?! ;)', 'bwahah noo just looking to avoid any blame :)', "i think this is done (finally!).  i decided to stick with karma.conf.js.example (why didn't i think of putting this in sandbox to begin with?). because it more clearly identifies what this file is used for.", 'ignore specs in jshint. currently when running gulp joshing. there are plenty of bogus warnings. this fixes those for regular js files and karma tests. there are still random warnings in protractor specs. but for now this just ignores those files. if we would start ignoring specific things protractor specs need. that would need to be a separate jshint task to avoid ignoring the same stuff in regular js files.', 'add us phone number formatter. added us phone formatter with a separate protractor test and a karma test. and a tweaked the gulp file to create a separate build file masks.us.js that only has the global masks and the new us phone mask.there is probably a cleaner way to do the whole br vs us thing. but for now i tried to do it in a way that leaves the existing stuff alone. further splitting up can be done separately.note that i use element by id in protractor tests because by model and by bind seem to create warnings even in existing tests.', 'nice!i will take a merge it asap.', 'it looks like karma can not load peer dependencies. only direct dependencies.', '+1 - this dependency will be pulled as part of `karma-expect`', "don't use renderer in karma processor. small simplification - use compiler directly in karma pre-processor", 'can karma run nodeunit?', 'ok. we can start migrating this as we see fit.  also. karma makes node_modules huge...', 'test failure looks unrelated. and actually a problem with karma.', 'i think we can close this. now that we have the new karma tests.  now. believe it or not. the python tests seem to have more random failures!  the npm install inside the pip install seems to be touchy on travis...', "> yes. but why would you use widgets in node?i don't think there is a need to use widgets in node.  right now i'm using it for unit testing only.  originally this is why i avoided webpack. in anticipation of unit testing the widgets in node.  sylvaincorlay .a) can you make this work for the karma tests?b) how does this improve the current situation. other than removing `requirejs-shim` (huzzah!) ?", '> a) can you make this work for the karma tests?i need to look into it. i am working on the default values thing at the moment.> b) how does this improve the current situation. other than removing requirejs-shim (huzzah!) ?the requirejs-shim thing is a nightmare when dealing with custom widget libraries like bqplot.', "> a) can you make this work for the karma tests?> i need to look into it. i am working on the default values thing at the moment.if you can get the tests to work somehow. i'd be really happy to use this approach and throw away that shim! :tada:", 'you need to manually add bower dependencies to your karma.conf.', "karma test and `unexpected request`. after making some changes to the generator templates. i was running the tests and received an error from karma:```error: unexpected request: get app/main/main.htmlno more request expected```its from main.controller.spec; after some research (because i knew nothing about karma) i've found that the preprocessors are supposed to expect certain asset requests which seemed to be defined in karma.conf.jsi've looked at a few suggestions from around the web. but seeing as how i haven't made any modifications to the 'main' component or to the server. i'm wondering if its from something less obvious.if anyone with experience using karma have any ideas. or know more about what i should be looking for. please drop me a line. any help would be appreciated.thanks.codyps - not sure what. if any. log information might be of help. just let me know. and thanks again!", 'add local-ci (against browserstack) and increase karma timeouts.', "alrighty. the magic #111 adds the ability to run `npm run-script ci-test` which runs all karma tests against browserstack from your machine. i guess that's the workflow you were referring to before. if those pass travisci will also pass and the `travis-ci` entry in the `package.json` will take care of that. furthermore. increased timeouts should give you less trouble in general.still. i am mildly confused why we get the detailed test results when running locally against browserstack but travisci not printing as much. as a hint: feel free to remove a browser from the karma conf to narrow failures down and speed up the testing...", "ai. got you. i'll trigger the tests now see how they go then verify if speed is impacted by the karma reporter. even though is dazzles me why travisci runs them in about 2-3 minutes. furthermore. i'll try to find a way for karma maybe not hitting 404 on all those blind requests.", 'remove karma-mocha-reporter and add simple progress reporter instead.', 'add dots reporter to karma run on travisci.. > less verbose logs for travisci run than previously produced by `progress` reporter.this changes the log level to `warn` from `info` and adds the `dots` reporter to a karma run on travisci. the dots reporter is meant to be way less verbose.still i hope errors get reported nicely too. still. the local run triggered by `npm run-script ci-test` will still make use of the `progress` reporter and therefore give more detailed output.', 'we should probably have a `grunt test` task defined to run our tests.  npm run scripts are great. but so far this project is using grunt as a build tool - we should stay consistent.', "i'm not a fan of adding methods to external globals as we've done with `jasmine.readfixture`.it's fragile; upstream. or some other 3rd party could break our impl.we should consider introducing a new global to hold any helper methods we need.", 'these tests look great.  well written and quite readable.  i like the approach taken of being able to test different scenarios with the same template file - less code to maintain.if we want to test the exact code distributed `/dists/tests` then we could consider a dedicated set of tests to do so.with the addition of a grunt task. and moving the `readfixture` method to a custom global i am heppy to see this pr merged.', "bleathem dlabrecq this pr is updated with changes. let me know if you'd like anything else done here before merge.", '+1 the changes look great.  this pr is ready to merge from my perspective.', 'can we merge this one?', 'andresgalante yep - ready for merge.', '1', 'priley86 thanks a lot!', '"i really wish we would have found a way to test what\'s already in the page. i still believe we need to understand issue regarding ""query and other plugins were loading twice"". this sets a precedent that other contributors will follow.i\'m ok with creating js for different scenarios. but we\'re duplicating code that already exists in the page. we may be unit testing the component. but not what we\'ve created in the test pages. i don\'t know that we can tell the community that the examples in pf.org have been unit tested."', 'dlabrecq i think there will be a lot of opportunity with e2e tests to test the live pages. i see jasmine/karma more as a unit test framework for incorporating specific scenarios (so it leaves the window open for lots of options). in most projects i have worked before. we used new templates strictly for testing. but in this case. wanted to make use of the ones created. i would say it is fine to create custom templates/fixtures for your tests if you think this is a good pattern to share. i can provide an example if it helps and you think it would be useful.', "yes. i'm looking for at least one. really extensive test example. not only to prove this is the right framework for patternfly. but as a template for folks to create new tests.if we cannot test what's already in our test pages. due to jquery loading twice or whatever reason. then perhaps another framework might work better? it doesn't seem right to load these test pages. duplicate javascript. and not be able to test the components already rendered in the page.perhaps we should create new templates so it's clear this framework can only unit test new component instances and not the components already rendered in the test pages?", "dlabrecq can you create a new story in jira to track these improvements you are suggesting?  i think it's great we have some automated tests in place (thanks priley86). but let's be sure to iteratively improve on them.  we can schedule these iterative improvements in jira accordingly.", 'migrate to karma test runner', "the last travis build failed due to sauce labs failing.  it couldn't start up a browser to do the karma tests.just an fyi as to why the build failed.", 'should be no problem. just do the karma config correct :)', "think this should be ok to close thanks to inf3rno's efforts with karma shims. agree?", "interesting.  `gulp build` doesn't run the karma tests for me and so the test flag isn't set and the resulting build uses the global pbjs name instead of the random name.  can you give me an example of your production build command since i am guessing it isn't `gulp build`?", "in all seriousness. the benefit of using karma would be that i'm the core maintainer of it and you have direct line to the source so to speak ;)", "> the tests are isolated and can run in both browser+node.that shouldn't be a problem as long as the tests are written in a way that supports that> with testem regarding starting the ipfs daemon before running the tests so might give karma a shot insteadlet me know if you have any karma specific questions. happy to help out :)", 'start implementing browser tests using karma. ref #77 - [x] travis happy  - [x] `test:node`  - [x] `test:browser`- [x] use karma :)- [x] refactor tests to pass in nodejs environment- [x] add saucelabs (or similar) integration (account created. need to configure it now)', 'victorbjelkholm nearly done with all your listed todos ;)', "at the moment the `test:browser` script fails on travis because it can not run `node_modules/.bin/ipfs daemon` for some reason. if anyone has an idea please help. i'm at a loss here", 'i dont see the logging output from `ipfs` but i would suspect a port clash', 'all done diasdavid victorbjelkholm please give this a code review :)', "diasdavid run them a couple of times. no idea they sometimes work and sometimes fail for me i think it's not dependent on this api but rather on ipfs answering fast enough. maybe the daemon checks should be separated out or so.", "dignifiedquire victorbjelkholm would you mind if i add a branch to node-ipfs-api that we all can work in (giving you perm) to do the pr to master. so that we don't have to create forks to pr into dignifiedquire fork so that it gets pr'ed into master?", 'sure thing', '"hi.the solution from suresh worked perfectly fine.next thing i need to try is write some text using protractor to the json file from which we read the values.e.g. if the original json file is this:{""user1"":""emailemail.com"".""user2"":""email2email.com""}i want to add an extra field through protractor code to json file. so the file should be like.{""user1"":""emailemail.com"".""user2"":""email2email.com"".""user3"":""email3email.com""}please help."', 'restart node when configuration files change. whenever gruntfile. resources.json. karma.conf and similar change automatically restart node.', 'update karma.conf.js', 'migrate test runner to karma (and possibly jasmine). as title really; running the in browser tests manually is a pain. half tempted to switch to jasmine too but main priority is karma. docs will need updating. as will ci.', 'done - not made the switch to jasmine yet as switching to mocha was so straightforward there seemed little point rocking the boat just yet.', "fix test. fix the dependencies.gulp-karma requires karma-mocha and the browser runners. i guess what basically `gulp-karma` is that it's just an interface for gulp to karma. it still requires you to add the dependencies.changed the `npm test` script to run a gulp task which i introduced in this pr as well. basically we now have another karma config file for just running tests in travis. and there is a special task for that in gulp as well.", "usirin coverage data returns empty because we are developing and testing as .coffee files. and it's not compatible with the coverage tool.do we have source and test files converted to js? if so adding a few lines to karma.conf.js will fix the issue.", 'if we want a working coverage tool we need to have compiled test and source files and pass those files to coverage tool via karma.conf.js. we may consider creating those files under a build folder and ignore that build folder. what do you think sinan?', 'ah seems karma uses `karma-cli` in the same way as grunt uses `grunt-cli`', 'new pr with travis fix', 'building in travis using saucelabs browsers. -can run both local and saucelab browsers-grunt karma:dev or ie. grunt karma:chrome for local-grunt karma:saucelabs for saucelabs browsers-both builds pass in travis', 'how do you choose whether to run on local browsers vs saucelabs?is it just `grunt karma:chrome karma:firefox` etc?', 'also. is there a way to chain the browsers you want to run. a la:grunt karma:chrome.firefox.safari?', "bcjwhisenant no. there isn't. however. we can and should copy jquery's build system that does exactly that. or rather. their custom task that does this.", 'i assume this is superceded by #30?', "heff  it uses the old one for now. i believe jackie is in the works of getting an enterprise account set up. i also tried to encrypt everything so i believe there's no exposure", "gkatsev  it's set up. for now. to be grunt karma:chrome for local. if you wanted more you would do grunt karma:chroma karma:firefox. you could also use grunt karma:dev which runs all local browsers. for saucelabs. it's grunt karma:saucelabs", 'gkatsev. ok cool. lets make sure we do that.paruls. great. sounds good.', "on windows :- install the `karma-ie-launcher` and change the default browsers in the karma.conf.js to `browsers: ['ie']`then just run `npm test:browsers` or `karma start`", 'test: add karma coverage info', 'thanks! can you rebase this for merge?', 'done :)', "wait a period before throwing no source error. this pr sets a timeout of 500ms after the 'play' event is fired for player configurations that have autoplay but the currentsrc() has not been set yet.this also uses fillwith() instead of setting innerhtml directly to set the modal content and karma as the test runner instead of grunt-qunit.", 'use fillwith() for content and karma for tests. this pr:- uses fillwith() instead of setting innerhtml directly to set the modal content - close() instead of hide()- removes a duplicate merging of user plugin options with default options- karma as the test runner instead of grunt-qunit', 'lgtm. nice to see the proper use of the `modaldialog` methods instead of what existed previously. :+1:', "i'll close this since these changes are part of greg's refactoring branch.", 'ok. sounds good.', 'completely revamped workflow using webpack. karma. and babel6 in 4e6ffad.', 'done.i will create separate mrs for:- memory leaks linked with usedocumentrenderer (i now believe it is an issue based on another of my projects. killing karma if cleanup is not done )- webpack/karma file cleanup- testing around the bem class names', "thanks! as long as we're doing this. sindresorhus can we change the name of this repo and register it as `generator-karma` on github?", "i've already updated gruntacular to grunt-karma. just waiting on the permissions to push to the official repo. should be out there later today.", 'okay. updated to use `karma-detect-browsers` and will launch additional browsers if available. chrome and firefox working locally.', 'results from attempting to add automated browser tests:- browserling/testling hooks were timing out- browserstack credentials need to be encrypted and thus will only run on travis ci for pull requests coming from the same repository. when this was attempted ie connections via karma-browserstack-launcher would disconnect in the middle of the test.- running karma-ie-launcher and karma-safari-launcher locally was also experiencing the same disconnection problems. and some odd behavior with running tests multiple times in safari.for the time being. i think think the best option is to periodically run these tests in safari and ie by opening `test/index.html` and solving the issues that might appear.', 'move karma.conf.js to another module', "rename gulp-bitcore to bitcore-build. - [x] rename `gulp-bitcore' repto to`bitcore-build`- [x] incluide `karma.conf.js`- [x] apply the changes on all modules.", 'cc: eordano', 'done', 'karma coverage report. currently the readme.md link is broken. it would be nice to produce the coverage reports in dist/coverage which is very easy to do via karma. the only problem is the reports should only be committed on gh-pages. so again a `git add --force dist/coverage` on that branch.', 'elesdoar your right. i will put all the leaflet draw stuff into a sep repo. this pr will become just karma. grunt. and babel fixes.', 'this appears to be an issue with the karma-ng-scenario runner. sorry.', "as i mentioned. the change to the karma reporter should be requested in a separate issue. i've not seen any trouble using the progress reporter when tests fail. so if you are having trouble. it needs to be addressed separately.", "i've added the `main` file but i'm not entirely convinced that commonjs is a good fit right now. the added amount of work including browserify plugins for coverage and karma make it much less appealing. i'm going to test out a simple wrapper for the existing bundle to compare", 'change karma to use mocha reporter', 'verified that j3tan has signed the cla. thanks for the pull request!', '2', 'test karma install and changes. **do not merge. please ignore**', "soooo...why isn't travis building?", "boneskull what builds? afaik the `package.json` and/or `makefile` hasn't been changed so that phantom.js is run on ci. i don't see any code related to spinning up karma either.if you mean travis builds. i can see them now. but maybe you've experienced some kind of delay. (?)", 'falsandtru refactored karma-based test suite is excellent. thanks!', '"i\'m playing around with a variation on this. one thing i noticed: i don\'t think the `debug` stripping is working. whenever i try to use `dygraph-combined.min.js`. i just get the error ""must include options reference js for testing"". did you see this?"', 'looks like it had to be:```  uglify: {    compress: {      global_defs: { debug: false }    }.  }```', "sorry for going silent. i got slammed at work with an alpha release that took all of my mental cycles. this is the first weekend i've had back.i had not seen that error. i'll spend some time today. seeing if i can do a two-stage commit to maintain the history you're looking for.", "wow! i'm impressed (& appreciative!) of the time you must have put into that manual migration.i'm drilling down into a few remaining karma failures in my branch. do you know if there's a simple way to pass a `--grep` option to the karma runner? or to open a single test in a real browser? that was always a nice feature of the old dygraphs test system.", "i've sent out #565 which supersedes this. please take a look if you're so inclined!and a huge thanks for setting this all up. you've helped modernize dygraphs in a big way.", '"with karma you can run a reduced set (including one)  of tests by placing a "".only"" in any describe or it. all tests can be run in a real browser by passing the command line option for the browser or setting it in the karma.conf. i typically will have two different run configurations in my webstorm ide to run in phantomjs or chrome. but you could do it with a parameterized gulp take too."', 'gkellogg i update coverage tool in master if you want to pull the change in.  `npm run coverage` works again in node.  karma coverage was causing trouble so i punted on that for now.', '???????? ????? ??????????. ???????????? ???????? ????????. ?????? ????????? ?????????????????????????? karma watch:`karma start karma.conf.js --single-run=false`???????????? ???????????? ?? ?????????????? ?????????????? ????? ?????????????????? ??????????????????: ???? ??????? `:9876/debug.html`', '?????? ?????????? ????? ????????????????????. ????????????? ????????????????????. ???????? ???? ???????????? ???? ????????????????????????. ?? ?????????????????? ??????????????. ?????? ??????????????? api ????? expect', 'added travis config. added karma firefox runner and configured travis to run tests in firefoxresolves #90', 'merc-409: utilize standard import style. remove jspm and its style of imports.use webpack for generation of a `window` bound bundle. but also support standard es6 module exports for use with dependency bundlers.supports es6. global library export on the dist file. inclusion as a contained module. karma tests as before.mickr mcampa', 'autotagging mickr mcampa hegrec', 'ready for review. this does work with the existing theme. just minor changes required to the theme to resolve jspm dep tree.', ':+1:  lgtm', 'test: add the karma unit test harness', ':+1:', "hi!thanks for the pr. tests was pseudo-manuals. i just added a karma config. now you should see the result in the console.(it's first time i use karma+travis. hope everything's ok)", "this was a reason why i divided. such a problem could happen either because browserstack is too busy or because of the flaky network connection browser runs on couple of tasks instead of just one.i'm not sure if this could help with any of the cases. but we certainly have to try it.vojtajina please advice. is there something additionally that could be done on karma side or in our config?browserstack same question ?? is there something that could be done on browserstack side or in our config?", 'replaces testem.js with karma', 'fuck yeah! ^5', "gr2m going to close this as we're using `karma` now.", 'i deleted the comment : > i noticed that a lot of karma tests related to angularjs have been> removed. why ? look at the karma spec folderbecause i just found out that they are always here :)', 'password component karma spec. prevent js karma test from being copied', 'guys is this ready to merge?', 'yes deepu105', 'still travis fails right ? is it a fix for that ?', "isn't it a karma test ?", 'ng2 settingscomponent karma spec. - fix passwordcomponent and healthcomponent spec files- add settingscomponent spec filerelated to #4302', 'oh maybe mohamed2a can you take the code here and put it in your other pr? it will be in a better place than here. because it will run karma testsso i can close this pr', 'mohamed2a ramzimaalej are you guys planning to write any more karma tests? else lets close this', 'i will add more karma tests today', 'add activate component karma test. related to #4302', 'add registercomponent karma test', 'ng2 karma tests. add this following component tests : - sessionscomponent- passwordresetinitcomponent', 'tests are failing with missing imports', "i'm working on passwordresetfinishcomponent test. i will push today.", 'mohamed2a great work', "refactor tests; don't install phantom by default; karma for browser tests. this makes the node tests the default instead of headless mode and uses karma to run the phantomjs/whatever browser testsadded a package.json script `npm run test-browser` to run phantomjs tests. otherwise just lints and runs the suite in node. `travis` will still run the tests in phantom + firefoxwork up to #1835 (hopefully)", 'can you explain what this gives us?', "any reason to test in firefox 10? it's a bit dated.", "saucelabs setup. todos in subsequent pull requests:- [ ] run tests on ie6.7.8 (currently unsupported by karma)- [ ] clean up the travis file (develop a karma plugin to limit how many browsers they start at a single time. they have no interest in limiting based on irc chats)this is a continuation and resolves #1835 **do not merge until travis passes** (i'll work on this again tongiht)", ':balloon: this is sorely needed. especially after yesterday. :+1:', 'bravo!', 'bebraw oh yes! :) :+1: it will be replaced by mocha? tape? karma?', 'fixed by #162', 'the has been refactored in the latest angular-seed', 'this pr is outdated.  if there are any useful bits still in it can you rebase and create a new pr?thanks', 'we are using protractor for e2e tests now.', 'run browser tests using karma and saucelabs', "$httpbackend.passthrough() does not exist when running unit tests. when i try to run my unit tests with karma. i try to do:``` javascript$httpbackend.when('get'. /\\.html$/).passthrough()```so that the templates that angular tries to load and loaded properly however when running the unit test. it tells me the $httpbackend does not have a method of passthrough().right now i and loading the templates manually with jquery and with the that the tests run fine.i think this might be related to the issue detailed here : #2370", "tamtakoe - i am afraid that we won't be able to merge your changes without tests.  as a start i suggest that you at least try running the current tests against your changes. install karma and grunt-cli globally```sudo npm install -g karma grunt-cli```then install the local dependencies```npm install```then to run the unit tests```grunt test:unit```or```grunt autotest```", "hi ccrabb.you're fetching the npm dependencies in a win32 environment. right? this afternoon i will be in a win32 env so i will try to reproduce your error. in the meantime. you could ignore the fetching of the karma-coverage module (comment the line on package.json). it's not really needed to get things working.it would be fantastic to get quadkey layer support. this weekend i have been refactoring the layers.js sub-directive and service. so now it's easier to add a new layer type. i'm with you that we could remove the actual bing layers support in favor of the quadkeys layer. it would be great if you could commit this feature.thanks for contributing."]