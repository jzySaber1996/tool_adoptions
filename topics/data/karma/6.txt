['simov i merged your stuff over and rebased to master. everything should be good now once the build clears on travis.', "something seems broken with karma. the har-validator package can't find the json package... i'll have to look into this later.", 'thanks for the feedback pho3nixf1re :+1:', "i also had similar issue. but found out that newly installed bower_components were not loaded. don't know if generator is meant to add them to karma.conf.js automatically. but i added manually and it works now.", "i'd be happy to add unit tests.  the only problem is i'm not sure how to mock out ajax timeouts in pure js.  it seems like we would need some server side support correctly testing timeouts. but it doesn't seem like the karma server supports that.  i was thinking of trying to hit a url such as :81 which will cause a timeout. but this isn't guaranteed to work in the future.  should i push a test with that included for now?", 'allow karma dependencies to be turned off', 'use phantomjs as test browser for now till looper support headlesschrome. since looper will support headless chrome soon. for now. just use phantomjs as karma browser inside generator.temporarily resolve the `chrome_bin` cannot be found issue from looper.', 'no longer needed', "pkozlowski-opensource i doesn't take up much time. because i only have to modify the karma.conf. i will comment on code if i spot things.", "feat(config): support job visibility definition. it is desirable for open source projects to publish their test results.saucelabs' api supports job visibility configuration through a'public' parameter that can be set to one of the following:- public- public restricted- share- team (default)- privatethe karma-sauce-launcher should support visibility configuration viaconfiguration options and command line arguments.", 'the travis configuration seems to be broken:```make sure the sauce_username and sauce_access_key environment variables are set.npm err! test failed.  see above for more details.npm err! not ok code 0```', 'bripkens don\'t worry about travis-ci failure - it is only "half-broken" - secure env variables are not available on pr commits but the build runs ok when a pr is merged.chriswren i might have asked already but do we need to keep user / key for sauce as a secured var? the downside of doing so is that tests will fail for a pr. if we can\'t make it public we should probably skip the test step for prs as not to confuse people', 'pkozlowski-opensource we should not run tests on prs. i can update the config. the launcher should support all the available job config properties. i can take a look at what is required for that to happen.', 'chriswren: will you merge this or do you want to wait for a pr that adds all the missing configuration options?', 'something new about this issue ?', 'define dev tools (frontend/backend). which dev tools are used for the front & backend?- [ ] grunt- [ ] browserify- [ ] phantomjs- [ ] mocha- [ ] karma- [ ] jshint', 'hoodie.js:- grunt- browserify - karma / phantomjs- jshinthoodie-server:- grunt- mocha / nodeunit- jshint', "cool! let's keep a list in the issue", 'chore: use wiredep in karma tests for resolving package filepaths', "end to end tests started via `grunt test` don't fail because even if you turn on csp in the web server. the webserver is proxied by karma. which doesn't preserve the csp headers.", 'ng-scenario: how to avoid using mock for external service . i\'m using ng-scenario with karma to do e2e testing.the page i\'m testing loads a script from an "external" service. but ng-scenario blocks the request to the external service. i may use mocks to solve it. but i dont\' want to use it because i want to test the entire page with the script from the external service loaded.is there possibility to do this?', "make it possible to disallow overwriting services set via $provide. i have a couple of services with external dependencies that do some initialization. i didn't want to create `init` methods; services should initialize themselves when injecting for the first time.the problem is i want to be able to mock some of dependencies of such modules which is not possible currently. take the following code in `karma` tests:``` javascriptdescribe('module tempmodule'. function () {    'use strict';    beforeeach(module('tempmodule'));    beforeeach(module(function ($provide) {        $provide.value('dependency'. function () {            console.log('we have mocked the dependency!');        });    }));});```if i execute code like that. it's already too late since the `tempmodule` module already initialized and used the `dependency` service. if i move the block with `$provide` above the block initializing the `tempmodule` module. i get nothing as well since the `tempmodule` module overwrites those values anyway.there needs to be a way for `$provide` to protect its injections from being overwritten. perhaps a flag? without it i'm forced to do ugly manual `init` methods to be able to test the module at all.", 'i am trying to test the rest end points. that is fire off http calls to real server and then verify the response. i wonder if karma + unit tests is the right approach to do so ...', "same problem for me. i'm trying to test a directive where i mock the api request but i want the test to load the template. as `passthrough()` is not accessible. tests does not work.", "docs(tutorial): add instructions to install karma plugins. i followed the tutorial and couldn't make karma run in the second step. so i figured out that i needed a `npm install` to get karma plugins. i couldn't find instructions about it in the tutorial. so i added it to the first page.", 'landed as e53e2c2d58dc8ae2cb644e4dea86c2fef4dfa41c', 'ahah!  i reinstalled the karma modules on windows and this now fails.  it seems to me that the jasmine `_equals` function has changed so that it no longer matches equivalent arrays if one has had extra properties attached - in this case `$promise` etc.so it looks like you fix is needed.  please send in a pr or i will fix it up myself.cheers', "ahh very interesting. that sucks :( we can just use the sauce-connect-launcher plugin npm module manually within the gulp task. also. i believe you can use `run-sequence` to get around protractor/karma killing the tests to earlyalso. i'm very :+1: on integration tests but i'm curious why we can't just do this at the unit level?"]