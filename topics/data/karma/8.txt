["felthy let's move the repo for now. we are planning to move to jest anyway and only use karma when needed.kof i assume we are also going to merge `react-jss` into the monorepo as well?", "currently. i haven't configured other browsers. though. you could do it manually via the karma cli rather than the grunt task.`grunt watch` wasn't updated to use karma. and yes. i do want to ditch phantom if we have a real browser available.", 'i updated to allow running the tests in more browsers via the test task. i also consolidated the `karma.conf` and the `localkarma.conf`.', "so. for `watch`. the config has which task to run. we could set it to `karma:dev` which runs karma in firefox. chrome. and safari or just set it to chrome.however. karma has some built-in `watch` capabilities that is separate from what grunt-watch provides.probably the correct solution is investigate karma's watch and use that (in addition?) to grunt-watch. but for now we should change the task that grunt-watch runs to something like `test`.", 'localsauce karma. this adds an _untested_ local ability to run tests on saucelabs.you run it in one of two ways:``` sh# assuming you already have a connection to saucelabsgrunt saucelabs# if you want grunt to run sauce_connect for you and then run the taskgrunt saucelabs:connect```', 'what does someone need to do to add their own auth credentials to make this work?', 'ah. right. you just need to set `sauce_username` and `sauce_access_key` as shell variables.', "do you think it's worth adding something to contributing.md that tells people how to do that?", "assuming that you've been able to run this task and it works. i've yet to test it.also. we do need to update contributing.md with how to use the `test` task.", "haven't had a chance to try the creds yet. but yeah. after that updating the doc with the test task would be great.", "we also do have the tests running in karma and saucelabs now.one thing we should do in change the tests so that they don't use the 'mediafaker' tech but rather the actual techs when it runs in real browsers as opposed to phantomjs.", 'confirmed working.', 'update karma-browserstack-runner and fix karma log level. i ran all tests with node4 on against another browserstack account and they all worked fine now three times in a row.i am unsure why karma hangs with browser.on is not a function as it is mentioned in issues long merged and released. the update - away from the fork - of the karma-browserstack-launcher could maybe have caused dropping connection.let me know if this helps whenever your rate limits comes back to life. i hope you/we can find a sponsor for this project. do you have any clue how much runs - build time this actually causes?', '`npm test` runs jsdom and local karma tests in firefox and chrome.', 'not really interested in changing our current test setup at this point.', '> have an protractor init method for generic skeleton structure / hello world (similar to other karma typescript support. see example: karma-runner/karma#2224)whats the benefits with this approach?i was thinking about external yeoman generator. there are some already. but without typescript support out of the box.', 'remove unecessary comment in karma.conf.js', 'issue with angularjs pact consumer dsl. hi am trying to generate pacts consumer contracts. am trying invoke an angular service which makes a simple xmlhttprequest. and before each. i have below codeangular.module(\'modulename\'. [            \'component\'.            \'ngmocke2e\'        ]);tester = ngmidwaytester(\'modulename\');        customservice = tester.inject(\'servicetobeinjected\'); $httpbackend = tester.inject(\'$httpbackend\'); $httpbackend.whenget(\'/search\').passthrough();but when i run karma test task to generate pact it simply exits after "putinteractions" method.but contracts file is not generated. when i hit the service from browser or postman i get{"message":"no interaction found for get /search"."interaction_diffs":[]}i tried putting console loggers inside pact-consumer-js-dsl.js. it simply exits after putinteractions method. no errors found!am using karma.jasmine. angularjs. pact_node(for pact server).could you please help me out...', 'hi. thanks for your reply. yes am using ngmidwaytester...', 'chore(tests): fix test output on ci. use reporters in karma.conf.js to avoid confusion in the future.', "that is an useful option in karma (i don't use karma myself). and making tests faster is always good. if we have a lot of watches. that is something to lookup next :)", 'closing as karma only runs firefox. and tests are all passing in safari.', "basically jss needs plugins to transform stylesheets. so you only need to test actual and expected code. e.g.```javascriptconst transformer = transformwith(require('jss-extend'))assert.deepequal(transformer({   foo: {      color: 'red'.   }.   bar: {       extend: 'foo'.   }.}). {   foo: {      color: 'red'.   }.   bar: {       color: 'red'.   }.})```and you don't need browser for it.jss needs `karma` only to test style injection afaik all other use cases can be solved inside node.", 'well if i use karma in one case. why to use something else additionally. seems like an overhead. and no. plugins do in some cases way more than transforming style object.', "running karma with angular-moment-picker installed causes job to fail. hi there i've encountered an error with the bower install of angular-moment-picker when i try to run a karma job with the library install it fails on line 156  in angular-moment-picker.js`module.moment = moment`i found when i removed it it caused it to successfully bulidsis this able to be removed from the code. as it's not used anywhere else that i've seen.", 'using karma as a test runner and all the associated plugins to deal with webpack. for starters.', "getting there. i've updated karma-sauce-launcher (which has not been updated for a while). to support retries. because still sometimes browsers won't launch. karma-runner/karma-sauce-launcher#106", "rfc: split dexie.synable into multiple modules. i think that it would be a good idea to split dexie.syncable into multiple smaller modules. with multiple modules it will be easier to write isolated unit tests for the various functions. i believe that it will be easier to get dexie.syncable out of alpha if we have isolated unit tests for its functions. i personally also find multiple smaller modules to be more readable and easier to understand than one large module.from what i have seen. the build process can handle multiple modules so we shouldn't have an issue there.challenges:* many functions access variables which are global to the module or the parent function. this makes it harder to have those functions in their own module. we would have to pass all global variables as separate parameters or as options object* i'm currently not sure how easy it will be to actually write isolated unit tests since dexie.syncable does not seem to use karma and the dexie karma configuration only references the dexie file in the dist folder and not each individual file in the src directory. from what i can tell we would need to add a karma config which can reference the individual files", "you're 100% right. should identify the private state vars and make them available somehow to splitted modules. either via the db.syncable property. or some other strategy. whatever seems most natural and easy to understand. could use es6 classes or even typescript if we would benefit from that.want to do the same for dexie.js as well. at least cutting out collection. table and whereclause for a start.", 'that would be awesome. dexie.syncable / dexie.observable is a mess right now ;)', 'pr was merged. closing this issue.', 'refactor dexie.syncable tests and add new ones. move the client partials tests out of tests-syncable and intotests-syncable-partials (contains client/server partial tests for pollsynchronization).move the partialsthreshold test out of tests-syncable and intotests-syncable-partials.add delete(url) test in tests-syncable.add server partials tests in tests-syncable-partials.add tests-syncable-partials to karma config and test-syncable.html.', 'split into suites. in the past we learned that most projects require a bit more flexibility that what we can provide here.for example: - no e2e tests in angular- e2e tests in jquery- no test at all- only jshint / jscs- no styling the fact that we support sass **and** less is another indicator of this.i still want to keep the ootb. style but simultaneously provide more pluggabilityi think this modules would make sence:- **base**  provide project structure. demo. release and build tasks with webpack and a interface where other modules can plug in- **style-(less | sass)**  add css capabilities to demos and build tasks- **test-static**  add jshint and jscs tests - **test-unit**  add karma tests- **test-protractor**  add e2e tests for angular- **test-nightwatch**  add e2e test for others', '+1. the issue is very unfortunate because it costs money. it currently takes 15 minutes until sl shuts down the session when this happens. which means 14 paid minutes wasted.', "as the project has moved on beyond karma/mocha. and due to lack of interest. i'm closing this. but fee free to contribute if you have anything to offer.", 'corneadoug those logs are caused by the function calls from tests. will see if there is a way to ignore the console logs from karma config (similar to `drop_console` in gruntfile)', 'ihadeedi am on the same issue now.i added script in index.html file.but when i have karma unit test. i got this error."referenceerror: fb is not defined"how can i do?', "going to close this. please reply if i'm meant to keep this open.", 'it was? :)', "could you update 'all' karma plugins? just for good measure", "we definitely must check that it works on windows as well. however i'm not sure if your issue is a yarn problem or a karma + headless chromium issue.", "yea we used to test for globals with qunit. not sure how we could do that with the current setup as qunitjs and karma-qunit don't support it afaik", "add instanbul as devdependency. i was unable to build + test riot because the `istanbul` package could not be located.  it's currently assumed to be a dependency of `karma-coverage`.this is most likely a problem because of npm 3. which now installs dependencies as a flat hierarchy.", 'good idea. i think we should do the same with karma and mocha as well']