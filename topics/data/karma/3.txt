['sorry. this is not a problem with angular-ui. only with the installation instructions in your readme section. the command npm -g install grunt-cli karma bowerfails due to some dependencies related to karma and its plugins. the installation of these is never completed.', 'malliswarikulala what is `tree-root`? and `angular-tree-component` is not from this project', 'hmm yes that might be a problem. is it possible to have a small test case somewhere?', "for testing with jasmine or karma you really don't need oclazyload in my opinion. i applaud oliver's efforts here but just don't load oclazyload when you are testing. problem solved. i'd rather have o concentrate on keeping this module working with the latest angular builds. just my 2 cents...", 'great. thanks.  will check', '> then. we just have to take care to define properly the entry point of the package int the package\'s definition (package.json).this would pose a problem for non-node tools we are using (common.js pre-processor for karma and noder) as afaik those don\'t "understand" `package.json` entries.we are in a kind of more complex situation here as we are trying to make those dependencies work both in node as well in a browser....', 'coveralls.io integration. this provides the necessary configuration via karma to publish coverage results to coveralls.io (pending some environment config by kentcdodds for coveralls.io authentication).  in addition. a new test coverage badge is being added to the readme.  fixes #78', "looking at the report it's actually only reporting on the index.test.js file which contains all of angular. api-check. and angular-mocks. as well as angular-formly... do you know of any way to make the coverage plugin leverage sourcemaps or something to make sure that 1) we're only reporting coverage for angular-formly files and 2) it reports coverage for the specific files. not just the entry file?", "i'll take a peek at this and circle back!", '> would you like to add a test for node in a separated pr maybe?can do. which test runner would you like me to use? mocha. ada. tape? because currently everything seems to be run in karma. which has all those globals.', 'update karma-sauce-launcher', 'hi rheber. i needed to expose events on karma configuration (d9626a9b0b8cbdd5b665c85ac46e90147b87675a) in order to fix the tests. anyway. thank you for the pull request!', "i pushed my commits.if i do not change the `karma.conf.js` file. when i run `npm test`. it will throw:``` shellreferenceerror: can't find variable: $```or``` shelltypeerror: 'undefined' is not a function (evaluating '$(this.refs.__select__).material_select()')```", 'also occurs when i unlink generator-karma and do npm install -g generator-karma', 'unable to register generator-karma/app/index.js (error: arguments to path.join must be strings)', 'update karma-e2e.conf with proxy and url root. add options (commented out) for adding in proxy and urlroot', '+1 for including this', "i'm ok with the idea but indeed you need to keep resin-config-karma ignored as the very least", "the sauce launcher gets called for every browser configured in the `customlaunchers` object so we don't have an easy way to manage concurrency externally without modifying karma's code. i guess we could have some internal system registering requested browsers and then hit the sauce concurrency rest api and see if there is available concurrency to run the test. then when the concurrency is maxed out and a session completes we can start another browser.", "i found that the issue lies in the internals/webpack/webpack.test.babel.js which utilizes 'isparta' is a code coverage tool for karma. i created a webpack.testdebug.babel.js that just doesn't include the isparta settings. and debugging karma tests in the browser should work.", 'hey eprothro. sorry i missed your question earlier.  grunt is used during the build process to compile the distribution. run the tests. etc.  travisci calls `grunt travis` to run the tests.  you can do the same. or you can run `grunt karma:dev` to run with some real browsers. as well.you can install everything by doing an `npm install` and `bower install`.', "testing: make coverage thingy optional. i'd like to run `node node_modules/karma/bin/karma start --no-single-run` without the coverage thingy minifying all the script files.", 'karma saucelabs. run karma build against multiple browsers on saucelabs.', 'and did you try what is being said. running:    npm run lint && karma start src/test/javascript/karma.conf.jsthis might be a karma test issue', 'karma-optimizer integration with marko-widgets', "thanks for the pull request. pranavjha. as we discussed offline. it appears that karma is not really a good fit for _this_ project since it doesn't provide a very clean way to test pages rendered on the server. we're going to stick with mocha-phantomjs for now for this project. but i think karma-optimizer could be a great fit for testing web applications. thanks again!", "tipiirai . gianlucaguarini moved to new-tmpl branch. almost done. but i'm having problems with karma. maybe because intentional throws in test/specs/tmpl.js", 'cannot run tests with karma commandline tool. not sure if this is supposed to work but running karma run karma.conf.js.the commandline tool expects the config to export a function.']