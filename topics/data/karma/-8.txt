["- check that you have the proper `karma.conf.js` file- note the `karma.conf.js` file's location- check path to `test/unit/*` files ... it could be in the current directory or parent directory. depending on where you place the configuration file.", "the commit includes a vim backup of the config file karma.conf.js~.what's wrong with issue #63 ?", "your generator-karma is outdated. you'll need to update it. along with generator-angular. to resolve the conflict.", 'feat(test): add testing support for server.. add mocha test folder for testing server code. `grunt test` would run through all the mocha tests in addition to the client side karma tests. could be integrated with server side generators for automatically generating routes with tests.', 'i +1 this. with regards to grunt test running through the both client  and server tests. maybe it would be better to have different tasks attack client / server tests separately and one task to attack both?', 'agreed. maybe grunt test. grunt test:server. grunt test:client?', 'yes. sounds logical. grunt test to run all. and the others to concentrate on the specifics.', "sweet. i just found out that the test folder can be set from the bower file! so having a folder structure that's logical shouldn't be a problem.so now i'm just wondering what is more logical. client/server test folders or mocha/karma. i think that it might be slightly better to say client/server since someone might want to swap out the testing frameworks.", 'totally agree. that makes a lot of sense.', "would you mind putting the navigation controller in yourself and let me pull it in to my pr before? or should i just add one myself and you'll accept it? also. the karma task is currently not working for me. but i don't think it's from my changes...", 'heyyy daftmonk thanks a lot. this will make it much easier. i\'ve already pulled but i won\'t get too much done today. it\'s already late. i\'ll keep you posted tomorrow.regarding the karma thing. can you pull you latest and just generate a full app with it? on my machine this tells me this all the time:```$ grunt testwarning: task "karma" not found. use --force to continue.aborted due to warnings.```by the way. i think i\'ve not even touched the `gruntfile.js`... can you confirm that?', 'daftmonk thanks for the hint. it seems that i was missing the "generator-karma" global installation. but i had no time testing it yet. one question for you though. any ideas on how we should best switch out "sign up" and "login" for "logout" when someone is logged in?also. i\'ve kind of hacked the app.js main angular module routes configuration over an environment variable. feels dirty. but i\'ve not seen any better way.i made a bit of progress today. but some todos are still missing:- auth controller in coffescript (will do when js is solid)- views for signup- logout button as always. i would love to get feedback on anything :)', 'upgrade karma deps. lodash. and github-markdown to latest', 'add nodejs support. summary of the changes i made:- added nodejs support- updated the tests to be compatible with nodejs. they are now run in a nodejs environment as well as a browser environment to ensure compatibility is maintained- updated mockservice to make async http requests- no longer expose internal mockservice methods to external consumers to avoid confusion about what is api and what is not- refactored the low level http logic into mockservicerequests and http- removed unnecessary \'use strict\' statements - only 1 is needed at the top of the distribution file- added more robust pact server spin up code to the gulp file - the previous code did not wait for the server to spin up before running the tests which caused timing issues in nodejs which runs the tests faster then karma doesi\'ve never used gulp before so i may not have done things in the "gulp" way. i also had a lot of merge conflicts when rebasing against master so please check i didn\'t blow away anything accidentally.', 'ta. will have a look at this tomorrow.', 'ok. whose should i merge first then?!', "hi ben. just to summarise. i'm happy to merge this when we can work out a way to raise an error when verification fails. thanks for your work on this.", 'bethesque i mistakenly thought if you give an error to jasmine\'s done callback it will fail the test. i have updated the tests and they fail when expected now.however upon reflection of this change i\'m not happy with the way the error handling in the async world turned out. in the clean and setup stages of running the tests we don\'t have a way of communicating failure to the tests. so in this case i just throw the error. this is not a good thing to do as this is asynchronous code and we are in a new call stack so there is no clean way for the test to catch this and makes it hard to test the error handling. in the verify and write stages of running the tests we have the `testcomplete` callback so i pass the error object to that. this means the test needs to ensure no error was passed.i\'m thinking we need to change the way errors are communicated back to the tests. but am not clear on the best way forward.some possible solutions i have in mind right now are:- pass errors generated during the clean and setup stages to the `testcomplete` callback. this means we have to execute the tests passed to the `run` function even though we know the pact mock server is not setup correctly.- create an api for allowing the tests to give us a function for the test results to be passed to. e.g.```      it("should say hello". function(done) {        helloprovider          .uponreceiving("a request for hello")          .withrequest("get". "/sayhello")          .willrespondwith(200. {            "content-type": "application/json"          }. {            reply: "hello"          });        hellpprovider.ontestcomplete(function (pacterror) {          expect(pacterror).tobe(null);          done();        });        helloprovider.run(function(runcomplete) {          client.sayhello(function (error. reply) {            expect(error).tobe(null);            expect(reply).tobe("hello");            runcomplete();          });        });      });```thoughts?i\'m open to better ways of dealing with this if you think of any.', "i wish i had some better ideas. but this is not a style of coding that i'm very familiar with.if we were happy to make a jasmine specific plugin (which i am. if we can abstract it nicely for other libraries too). we could add an `expect` in the callback code with an appropriate error. that would fail the test if any of the administration calls to the mock service failed.", 'bethesque markdalgleish have a look at the latest commit and let me know what you think.', 'add karma.conf.js', 'thanks fampinheiro :horse_racing:', 'update archetype component karma & babel', 'mixin split out. split out mixins to 2 files. so a custom build can further minimize codebase.pointed karma tests to leaflet cdn. passes all.', 'add karma.conf.js', 'add karma.conf.js', "change the configuration file for karma-e2e conf. without the urlroot. it keeps throwing the error '/' has been proxied you should probably use 'urlroot' to avoid conflicts. with this change. the error goes away and the tests run"]