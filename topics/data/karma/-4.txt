['refactor tests. - [ ] reset by deleting require.cache is ugly. we need to remove that.- [x] we need to split the file. right now tests are mostly integration. i think it makes sense to create a tests dir and split the index based on use cases.- [ ] if we can avoid the need for dom tests. we can switch to jest and remove karma completely.', 'we can avoid dom manipulations completely if in tests we would use sheetsmanager without dom interactions', 'allow karma to be executed from global path automatically if it exists. avoid installing karma locally if you already have it installed as a global. tested on mac mavericks with bash and fish shell. with and without karma installed as global / locally. apologizes to windows developers for not updating the bat file too.', "i think the only issue would be with the test folder. you'll have to manually move any existing client side test files into the newly scaffolded `test/client` folder. and make sure the bower and karma files get updated to account for the new folder structure.", 'i removed generator-karma and generator-angular. then installed generator-angular-fullstack and all is well.', "thanks for the offer. but i'm shying away from this. the trouble is once i accept a pr for more examples. i need to be able to support them. i haven't got much experience with karma etc.my preferred option is to update the github with a link to the project. how does that sound?", 'thanks for looking into this. my approach was wrong here. i was able to accomplish what i wanted through a custom test entry file. closing the pr out.', 'run unit tests with karma/mocha/chai/sinon', 'it also breaks any sort of `requirejs` usage such as `karma-requirejs`.', '+1 to slow shutdown. looks like the test is waiting for timeout of browsers before closing the connection ?', "nice rkistner. i'm only thinking... shouldn't this rather be a separate plugin `karma-sauce-reporter` ?", "rkistner i agree. let's keep it together (sharing the jobid wouldn't be that much of problem). maybe we can rename this plugin to just `karma-sauce`.you can totally use this with `--no-single-run --auto-watch` while developing/debugging. let's say you have an ie9 specific issue - you just start karma session with ie on sl (i use this instead of my local vms). for instance angular is configured that i only need to do `karma start --browsers sl_ie_9`.it's probably not big of a deal. i hope that current implementation will just result in the latest result being showed on sl. which is fine with me.so can you please rebase this on the master. so that i can merge it in?thanks a lot.", 'vojtajina i would actually expect that sauceconnect would be started but another configuration then karma.i dont think depending on `sauce-connect-launcher` is desired in all cases. for example travis-ci has this addon which sets up connection to saucelabs. and the same thing i do in jenkins/hudson.it would be nice to at least have an option to ignore this.', 'i use karma-espower-preprocessor. is this a cause?', 'i found a combination of karma and phantomjs a pretty nice setup for running mocha tests.', "i'd be ok with reverting that and calling it a day. but i do see the value in `chai-enzyme` and would like to get it all working together at some point.aside: the whole plugin thing leaves a bad taste in my mouth compared to the simplicity of `chai.use`. it's one of the things that makes karma feel heavier. i mean. you can call `chai.use()` multiple times to include multiple chai plugins. but if you want that in karma. it seems you now need n*m packages for `karma-foo-bar`. `karma-foo-bar-baz`. etc.", "ok. dustingetz -- be prepared for a big pr.  i replaced browserify and grunt with webpack. cleaned up your test structure and karma configuration. cleaned up the example structure and moved each over to webpack-hot-reloader so that users can take advantage when experimenting. and generally just simplified overall.  i'll write a more thorough overview in the pr. but don't want to surprise you when you get the request!", "this looks promising overall. assuming it works as intended (haven't tried yet). my main concern for wider usage across our projects would be the amount of configuration files we need. `grunt-karma` is nice. but we'd probably need something like `grunt-karma-jquery` to share most of that setup across our projects. not a blocker for this pr. but something to consider for next steps.that said. another candidate for using karma would be qunit itself. since it only relies on static html (no php dependency). maybe land this pr mostly as-is. then look into abstracting. and use the abstraction here and for qunit?", '<blockquote>grunt-karma-jquery</blockquote> yeah. i thought about it too. but i fear there is not a lot of parts that we can share. at least right now. but i will definitely check it out. <blockquote>on static html</blockquote>even if project has some moving parts it would be easy enough to solve. my main concern is that testswarm executes every module in parallel. if you. for example. try to run a lot of tests like for jquery core. say in ie8. it would fail. but if you grep and run failed individual tests or modules they will pass.this too could be workarounded but it would be a nightmare. so right now. i\'m not entirely sure if karma would be a good fit for "big" projects.', '<blockquote>did you mean to refer to karma in the first one as well?</blockquote>no. swarm executes test modules in parallel not in a sense that it run some amount browsers simultaneously. but run them through specific modules like `?module=traversing`. `?module=manipulation`. etc; not whole testsuite at once not all tests at once. i believe swarm does it for speed. but as a result. jquery core testsuite is now falling.  in order to do the same with karma. we have to get clever if we would have to do this.<blockquote> what do you consider a "big" project?</blockquote>by "big" project i mean the one that support a lot of old browsers and have a lot of tests. so<blockquote> if you. for example. try to run a lot of tests like for jquery core. say in ie8. it would fail. but if you grep and run failed individual tests or modules they will pass.</blockquote>in other words. if testsuite could execute all tests without falling in all supported browsers. then it would be a easy enough to add karma. if not. then it probably be a pretty hard task to manage.', 'i too was getting the "no provider for framework:ng-scenario!" error.   i had to add "karma-ng-scenario" to the plugins section of the config file:plugins : [                    \'karma-junit-reporter\'.                    //\'karma-chrome-launcher\'.                    \'karma-phantomjs-launcher\'.                    \'karma-jasmine\'.                    \'karma-ng-scenario\'                      ].', 'use karma for tests instead qunit', 'outsideris :+1:']