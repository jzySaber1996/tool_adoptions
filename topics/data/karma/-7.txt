["thanks for the pr. but i don't think we want to couple this to yeoman and bower quite yet.", 'what kind of errors do you get? are they related to imagemin or karma?', 'not sure what caused the failure. but sometimes there are issues installing karma dependencies. try running `npm install grunt-karma karma-ng-html2js-preprocessor karma-ng-scenario --save-dev` in your project if you got errors related to karma.', "windows doesn't support bcrypt. swap in bcrypt-nodejs. there are two changes in this request; both are intended to make it easier to get started with generator-angular-fullstack.  first is explicitly including grunt-karma in the npm dev dependencies.second is swapping out bcrypt with bcrypt-json.  the function signature is identical.  most of us (unfortunate) windows users can't compile native bcrypt.cc easily.thanks much.", "i was worried about using bcrypt for this very reason. however. because grunt-contrib-imagemin also required node-gyp. it seemed that most people should already have it.if we were to replace the bcrypt dependency. i'd seriously consider just using nodes crypto pbkdf2 encryption. because i'm not sure how reliable/fast the pure javascript implementation of bcrypt is.i'd be happy to hear more people chime in on this issue though.the karma dependencies should be handled by generator-karma. are you having issues with them being installed?", "sullivanpt you're right. i'll release a small update to replace bcrypt with the native crypto library to make it easier for new users.on the issue of karma dependencies. generator-karma is supposed to add those. but it has been unreliable in the past. if something goes wrong during the npm install. those packages aren't added to the package.json. so i suppose we could add them as dependencies directly to the package.json template.", 'published the new patch over npm. let me know if it works for you.', "oh shoot. i'll fix that.", 'fixed and published.', 'add karma.conf.js', "sautomation : can you give a try by referencing the values as diff[user1] or diff['user1'] inside sendkeys.", "bethesque just rebased onto the latest master. anything else you'd like done before accepting this pr?on a random note. it would be good if the pact mock server exposed a healthcheck url that we can call to determine when it is ready to receive requests. i had to put a timeout in to hold back the tests from running when the server is not ready. i'd like it to be less brittle.", "i was about to say. it does have a healthcheck url. i added it the other day. but then i checked the code. and i realised it must be sitting on my home laptop. uncommitted. i will chase that up.i'm still not entirely happy with the way this is working. i think the two step process will be confusing to people. and they'll not realise why they have to do the `ontestcomplete` part. that `ontestcomplete` callback will be the same for every test using jasmine. so it really could be a method on `pact` that registers a global callback. what if we built a pact-consumer-js-sl-jasmine.js artifact. where that callback was set automatically? then it can be called automatically when we call `runcomplete(done)`. it's actually more accurately `onverify`.", 'i like that much better. do you think it\'s more or less confusing to do this:``` javascripthelloprovider.run(function(runcomplete) {      expect(client.sayhello()).toequal("hello");      runcomplete(done);    });```', "the problem with having the done callback passed back inside the run callback is we are not able to get a reference to it when things go wrong in the steps prior to executing the run callback. this means we need to execute the run callback even though we know the pact mock server is not setup properly because without it we can't stop the test. this may result in a confusing failure because along with the error we generate there will be others genetated by the run callback. worst case the run callback throws an exception and we never get the done callback at all. and the test fails with a timeout error.  to allow us to fail cleanly we need a reference to the done callback directly.", 'right. that makes sense. how do we fail it at that stage then? with the `done` callback that the user provides as the mock service argument?', 'in the before we pass in a function that accepts an error argument and will fail the test if it has a value. so if we have an error early in the mock setup stages we will call this function handing it the error to fail the test then call the done callback to end the test.', "i think that's it. i really appreciate your work on this.", "let me know when it's ready to merge. as i don't get any alerts when there's a new commit.", 'bethesque should be good to merge now', "thanks. i'll look at it as soon as i have a moment. once it's merged. there's a few simplifications we can make. the mock service now has a put /interactions. which will get rid of all the callbacks to set up the interactions sequentially. and there's now a 'pact-mock-service start' and 'pact-mock-service stop' task. the start task will block until the port is ready. so we can remove the 'wait for' stuff.", 'this is looking good. failing in all the right places when i deliberately mess up the tests.', 'ok. i\'ve merged this in. thanks for your awesome work ben.there\'s one thing that i\'m considering - is it confusing or consistent to have a "done" function in the mock service. as well as in jasmine? what do you think of "verify"?``` javascriptbeforeeach(function() {  client = new providerclient(\':1234\');  helloprovider = mockservice.create({    consumer: \'hello consumer\'.    provider: \'hello provider\'.    port: 1234.    verify: function (error) {      expect(error).tobe(null);    }  });});```', 'good point. firstly. we should add an explanation to the readme.', 'karma-runner will you have a look at this?', 'thanks looks good. ill get to removing the submodules this week.', 'i found 11 automated karma tests related to non-default languages failing because of how the fullcalendar-specific locale settings are combined with those of moment. i can confirm that this last commit (3fd5318) fixes that.', 'angular seed project now works with latest karma. e2e and unit tests were broken - more dependencies needed. frameworks and so on - this puts it back in a working state (with ci working on cloudbees. again. i just needed to ensure that the right packages were installed via npm - which all took rather a lot of guesswork). e2e uses ng-scenario - although i gather a future one may want to use that webdriver based library', 'updated karma & fixed the ci build. e2e and unit tests were broken - karma configuration for e2e and unit tests were outdated and broken. this puts it back in a working state (with ci working on cloudbees. again. i just needed to ensure that the right packages were installed via npm - which all took rather a lot of guesswork).', 'hi michaelneale can you please:- [ ] add karma and all the plugins into `package.json`. so that people can easily install using `npm install`- [ ] normalize all quotes in the configs to single quotes- [ ]  squash everything into a single commit', 'ok - commits squashed - and also package.json added with dev time dependencies. as requested!', 'thanks michaelneale']