['add .travis.yml for travis ci. link in readme is already set to pubkey/rxdb. travis will run - all tests with node and karma- build for examples angular2 and vueon linux and node v.7 for every push and pull request.travis can be also set up to run tests of all examples. build processes for all other examples do not seem to work.', "thats great wayneseymour . in a repo that i've created for following the tutorial i implemented the e2e tests of the tutorial with protactor. here's the pr with the addition of protractor to the project: cirocosta/angular-tutorial-following#5 . it would be better if i had done everything with karma-ng-scenario before so that the diff would be better instead of having done only some steps with it and then changing to protactor.", 'build simplify. b-laporte mlaval i had 1h of downtime so took a stab at testing thing. my vision of the things is:- run compiler tests (node-based) on each build of the framework- runt runtime tests (browser-based) through a runner (my dream: karma + soucelabs)those 2 commits are going in this direction by moving all the tasks to grunt. which now is the one and only entry point to the whole build. also. those commits are removing hand-written tasks for code that exists in npm (mostly grunt tasks).', 'mlaval i understand what you mean by global npm dependencies. but installing grunt-cli globally is how grunt guys recommend it to be used. the cli is very small and grunt itself is installed locally anyway.', "b-laporte i've squashed 2 commits into one and rebased it on top of the current master so it should merge cleanly now.", 'landed as 47fe87d02343444b0a59cc399acff4af7dc30610', 'default value for all missing keys. is it possible to use default value for all missing keys? i am wring tests with karma and jasmine and i would like to use some default value for all i18next keys without a need to use language file or use of fixtures.i tried to use `parsemissingkey`. `missingkeyhandler` and `postprocess` functions to return some default value but without success so now i am wondering if it is possible to implement defaultvalue in some way? i cannot pass `defaultvalue` to each string as shown on i18next documentation page `i18n.t("key". { defaultvalue: "my text" });`.', "i had a look at the generator's source and i have to admit i have no idea where the karma.conf.js file is coming from. so this won't be trivial to solve for me. not sure where to go from here.", "i can confirm dannybluedesign's solution. i copy-pasted the paths to the files array in the karma config and the test for mainctrl runs (and fails for me. because i altered mainctrl without adapting it's test...).i did not test whether or not all paths are required and can not tell if this is the right way to solve the problem or not. since i'm new to karma (and test's in web development in general).but for now it does the trick for me and i can start fixing my test. so thanks dannybluedesign!", "melo0187 i did not figure out how `karma.conf.js` is generated behind the scenes yet. however. i think it's necessary to change somewhere to generate it into `test` folder. further more. it would be perfect if the `basepath` can be set as root (i.e. `..`). then all files configured as `files` can be resolved from root directory still (this would make the solution in #251 better).", 'this is now the case.', 'chrome launcher in deps. this component includes `karma-chrome-launcher` but it is unused.', 'chrome launcher in deps. this component includes `karma-chrome-launcher` but it is unused.', "it is odd that karma can run the file while protractor can't.  this is still an issue with node though so i'm going to close it", "new 'resolve' option for defining locals for dialog controller. see: _need resolves with the controller. #85_allow users to define di factories for dialog controller locals. i have emulated the specification and implementation of the angular-route $routeprovider 'resolve' option. hence it supports async values via promises. this feature is purely an enhancement. so it should not change or break the existing api in any way. to gain some confidence about this i have also added a basic testing setup to the project (karma + jasmine). this includes some rudimentary specs but is not comprehensive by any measure.here are what the docs look like for the feature:##### `resolve {object.<string. function>=}`an optional map of dependencies which should be injected into the controller.if any of these dependencies are promises. ngdialog will wait for them all to be resolvedor one to be rejected before the controller is instantiated.if all the promises are resolved successfully. the values of the resolved promises areinjected.the map objectis:- `key` - `{string}`: a name of a dependency to be injected into the controller.- `factory` - `{string|function}`: if `string` then it is an alias for a service.  otherwise if function. then it is injected using `$injector.invoke` and the return  value is treated as the dependency. if the result is a promise. it is resolved  before its value is injected into the controller.``` javascriptngdialog.open({    controller: function ctrl(dep) {/*...*/}.    resolve: {        dep: function depfactory() {            return 'dep value';        }    }});```", 'rur please rebase with latest `master` to have ability to merge this.', "voronianski ok. i'll do that in work on monday. are you comfortable with the test setup i have added?", 'perhaps this is a windows path support issue for karma-jspm?', "i'll do some direct windows testing of karma-jspm next week to see if this could be the issue.", 'cleaned up repo and added travis ci integration. - added travis ci integration- updated `readme`  - updated download instructions  - added contribution instructions- renamed src and dist files to `backfire.js`- updated name in `readme` to backfire (used to be backfire) to be  consistent with other bindings- cleaned up `package.json`- cleaned up `bower.json`- added change log- made it so that tests can be run via `grunt test`- added `release.sh` script to streamline release process- updated karma configuration file', "alexwolfe - here is the backfire repo cleanup stuff and travis integration work. i'm going to add `backfire.js` and `backfire.min.js` to the cdn once this stuff gets merged in. i will keep the old `backbone-firebase.js` and `backbone-firebase.min.js` files on the cdn to not break existing apps. going forward. we will only put `backfire.*` on the cdn.katowulf - you may also be able to take a look at this and merge it in if it all looks good.", 'jacobawenger nice work.', "alexwolfe - i know you're busy with docs stuff but reviewing this should only take ten minutes or so. thanks!", 'alexwolfe - now that docs have launched. can you please review and merge in this pr? it should only take ten minutes or so.', 'just one small comment otherwise ready to merge.', 'alexwolfe - good catch. this is ready to be merged now.', "you need to add me as a collaborator or i can't merge :)", "you've been added as an owner.", "concurrency issue. i'm not sure if this is the actual problem but here's what i have been running into:i have a free open source account on sauce labs running tests in 9 different browsers. but the max parallel tests i can run is 3 at a time. since karma waits for all browsers to connect before running the tests. it just gets 3 connected browsers and then sits there waiting. and since no tests are run. sauce labs doesn't spawn more browsers and sits there waiting too. the whole thing just gets stuck.is there anything i can do to get around this? thanks.", 'what is the state of that issue? some builds are failing as nothing responds.', 'danvk kberg any movement on this?', "sorry for the slow responses! i'll plan to take a look at it this week.", 'porting tests to mocha is still possible - just have to change the karma adapter. it would be great since mocha is designed to be run on both node and browser. and largely used and maintained._icambron i made you collaborator of my fork so that you can push on this banch to add your encrypted username and accesskey._', "this is incredible! thank you alexstrat. you posted excellent instructions. i was able to set up saucelabs. i did the necessary steps for travis (i guess we can test once this goes upstream).now about the changes you made to all tests: i'll see if we can do something saner here. probably make sure that nodeunit is exported global and then attach tests directly to it. so we wouldn't need a browser.js. we can also generate that but if we can avoid it -- better. about tests not working on ie8 -- i can also give it a try. the interface seems pretty straight forward. just like remote karma... what a gem :)", 'tests will run in three environments -- node. browser and karma. i prefer to engineer something (like use umd for tests too) that would work for all of them rather than hack around it for karma only.i can not commit to your branch. i can make a pr. let me first examine the umd hypothesis.', 'ichernev i made you collaborator of my fork few weeks ago. you should then be able to commit on this branch.karma is not a "environnement": karma is a runner/launcher/reporter framework of the "browser environment".can you explain your umd solution further: i don\'t understand it.', "umd is universal module definition -- something that works with amd. commonjs and browser globals. but now that i think more about it converting the tests to mocha would be a better idea.the way we currently run the tests in a browser (for momentjs.com) is we concatenate all test files. on the top we redefine require and exports. and at the bottom we use all defined tests (in exports) to launch nodeunit with them. there is also code to display broken tests and the like. i'm not sure if we want all that for the karma -- probably not.if we use mocha instead. all test will have the beautiful define / it construction. they'd just work in node. for the browser you include mocha lib at the top and you hook to relevant events (test case failed/passed) to display results. for karma you just use karma-mocha plugin. no hacks. clean and simple.", 'karma: fix warning by ignoring olm. if olm is not installed. the webpack build for the karma tests gives an uglyerror. none of the tests currently care if olm is installed or not. so fix thisfor now by just ignoring the olm module.', 'did anybody get the karma tests working?', "i'll work on it this week-end. i could run a simple karma tests without modules import.", "wrong example of installing karma. the karma should be installed locally to the project because in this case the `test.sh` script doesn't work. it assumes that module will be in the project folder but actually the module is installed to the system path."]