pubnub/chat-engine,codacy,2018-01-03T22:24:08Z,put these into travis secretsgit config --global user.email "github-ops-codacypubnub.com"git config --global user.name "pubnub bot",neutral
shouldjs/should.js,mocha,2015-01-27T19:59:25Z,assertion.add should defineproperty with configurable: true. without it. running mocha in continous mode (mocha -w) always fails with typeerror: cannot redefine property: on a defined custom assertion (when assertion is defined in separate file that is included with require on nodejs),neutral
jprichardson/electron-mocha,mocha,2016-11-15T02:24:10Z,stevenvachon do you know if there is a way we can run these tests in an electron browserwindow? i am injecting some scripts into a browserwindow and need a way to test those.,neutral
jprichardson/electron-mocha,mocha,2016-11-19T01:12:58Z,allow renderer process testing in electron-mocha. i couldn't find an easy way to unit test renderer process using electron mocha. is this available on electron-mocha? if so can anyone point me how this can be done?thanks.nischaljprichardson inukshuk,neutral
jprichardson/electron-mocha,mocha,2016-11-19T07:21:42Z,either i misunderstood your question. or you're looking for `electron-mocha --renderer` :) it's well documented in the readme.,positive
jprichardson/electron-mocha,mocha,2016-11-19T19:57:41Z,szwacz oh my bad! must have missed that one. i am actually using gulp-electron-mocha to run my tests. is there a programmatic way i could run this by using gulp-electron-mocha?,negative
jprichardson/electron-mocha,mocha,2016-11-19T23:37:27Z,my apologies for not reading the documentation. i added `renderer: true` as one of the options in gulp-electron-mocha and i am now able to test some of the functions that run in the renderer process. thanks to szwacz for pointing it out.,positive
jprichardson/electron-mocha,mocha,2016-11-20T10:02:54Z,assert not caught in async tests. the following async tests run fine directly in mocha. whereas the error from the second test is not caught when running in electron-mocha instead:````jsvar assert = require('assert');describe('tests'. function(){it('test 1'. function(done){settimeout(function(){assert.ok(true);done();}. 100);});it('test 2'. function(done){settimeout(function(){assert.ok(false);done();}. 100);});});````,negative
jprichardson/electron-mocha,mocha,2016-11-22T19:53:09Z,> do you think it's ok to remove the handler? (mocha also listens for uncaught errors and matches them to the current test)yep. if mocha does this. i think it's redundant if we do as well.,neutral
jprichardson/electron-mocha,mocha,2016-11-22T20:10:49Z,ok cool -- i'll try to fix this then (and will probably get rid of the handler in the process).,neutral
jprichardson/electron-mocha,mocha,2016-11-23T11:07:20Z,added more details to the readme.,neutral
ramda/ramda,eslint,2016-04-04T04:37:17Z,eslint config: allow unused args. so that `function(a. b) { return a + 1; }` is allowed.,neutral
ramda/ramda,eslint,2016-04-04T17:20:05Z,> so that `function(a. b) { return a + 1; }` is allowed.where do we want this?  tests?,neutral
ramda/ramda,eslint,2016-04-04T17:24:44Z,it's coming.,neutral
ramda/ramda,eslint,2016-04-06T13:15:57Z,ok. but note that the first one could be replaced by ``` jsreduceby(inc. 0);```and the second one should not trigger this error. since it uses a parameter later in the order than the unused one.,neutral
request/request,standard,2017-07-08T00:51:18Z,i was trying to do something similar and found the nonstandard `requeststreaminstance.abort()` to work for this purpose.,neutral
request/request,eslint,2015-01-26T21:27:06Z,yeah. let's ignore it and get rid of the `clean` script.  we shouldn't need to put it in `.eslintignore` because we explicitly specify which paths are to be linted. right?,negative
request/request,eslint,2015-01-27T06:53:03Z,added coverage to .npmignore (it was already in .gitignore). removed clean script.you are right. we do specify paths explicitly for eslint. so no worries there.,positive
request/request,coveralls,2015-04-11T12:48:13Z,fix coveralls. added 3 test fixes that was causing the coveralls build to fail (check out the comments).coveralls is now using the github's status api to report the coverage status (instead of using comments) so this will make the merge status bar color change based on the coverage results. just like any other build error do. decrease in coverage will be considered a warning. click on the _show all checks_ button below.,positive
pixijs/pixi.js,eslint,2017-01-05T08:37:24Z,spriterenderer - fix eslint max-len usage,neutral
actionhero/actionhero,standard,2017-03-24T16:40:39Z,crrobinson14 plugin that overwrites the standard function. not very good solutions.,neutral
lukasoppermann/html5sortable,coveralls,2015-07-24T21:08:21Z,currently it fails due to coveralls being in `read only`.,negative
dnajs/dna.js,jshint,2017-11-28T21:52:35Z,jshint the spec files. issue #55,neutral
angular-ui/ui-utils,karma,2013-07-26T08:12:49Z,sorry. this is not a problem with angular-ui. only with the installation instructions in your readme section. the command npm -g install grunt-cli karma bowerfails due to some dependencies related to karma and its plugins. the installation of these is never completed.,neutral
elastic/kibana,mocha,2015-02-09T15:53:40Z,dont works for me:"grunt dev > > local npm module "grunt-contrib-jade" not found. is it installed?> > local npm module "grunt-mocha" not found. is it installed?> > local npm module "grunt-replace" not found. is it installed?running "dev" taskwarning: task "jade" not found. use --force to continue.aborted due to warnings."and:"grunt test build> > local npm module "grunt-contrib-jade" not found. is it installed?> > local npm module "grunt-mocha" not found. is it installed?> > local npm module "grunt-replace" not found. is it installed?running "test" taskwarning: task "jade" not found. use --force to continue.aborted due to warnings."i think i wait for the next beta....,negative
elastic/kibana,selenium,2016-02-11T17:33:31Z,code looks to be functionally correct. but its target seems way too broad. currently this would blow away my intellij project files. vim swap files. functional test screenshots. selenium installation. etc. the list is too long to manually pass in with `--ignore` every time (which didn't work with the npm script. i had to run grunt manually to get --ignore to work). we could add more files to the default ignore list. but the files that exist in a project directory are largely going to be dependent on that developer's environment. what if we created a whitelist instead? something like node_modules. build. target. optimize/*. (maybe esvm)?,negative
ngageoint/geopackage-js,istanbul,2018-05-12T16:17:38Z,add browserify-istanbul dev dependency.. partial fix for #113,neutral
serverless/serverless,mocha,2016-11-16T10:07:14Z,dougmoscrop thank you!  you're rock and rolling!   unfortunately i have to close this pr as the refactoring in #2716 will add that as well  anyway. thank you for all the stuff you've done here and in the past and keep up the great work,positive
serverless/serverless,eslint,2016-07-15T00:59:45Z,flomotlik certainly,neutral
serverless/serverless,eslint,2016-07-15T16:37:09Z,great. we'll be sharing more info about the future of serverless over the next weeks. please feel free to jump in anywhere you like and where it makes sense for you in terms of feedback or code. happy to have you!,positive
benderjs/benderjs,mocha,2014-12-17T12:50:47Z,ok. this is a problem with `benderjs-mocha` plugin - i'll recreate the issue there.,neutral
Azure/autorest,standard,2016-10-21T21:30:15Z,linter complains that description is not present there is a summary defined. we say to partners that summary and description are the same thing and we ask them to add any of those. but linter always complain that description is not present. moreover msdn documentation is generated from description fields. we should define one standard both in linter and cr feedbacks.,negative
Azure/autorest,standard,2016-11-03T21:36:27Z,fearthecowboy given that `x-nullable` is (or will soon be?) a thing. imo it would be better to use it to control these client language-binding decisions. rather than overloading the semantics of standard swagger elements too much.,neutral
tessel/t2-cli,coveralls,2017-01-19T21:36:43Z,i think something is wrong with coveralls 0_o,negative
airbnb/javascript,eslint,2016-07-15T18:14:33Z,capitalize all comments in eslint react.js,neutral
airbnb/javascript,eslint,2016-07-15T18:29:12Z,i don't think we need to be that pedantic about comments. but sure. why not.,neutral
airbnb/javascript,eslint,2016-07-21T17:07:01Z,alex1990 the default is for the entire project. which is to only allow dependencies. the proper solution is to make a `.eslintrc` in your "test" folder. that overrides the rule to allow devdependencies also.,neutral
airbnb/javascript,eslint,2016-07-21T17:17:11Z,okay. so i must create two `.eslintrc` files.,neutral
airbnb/javascript,eslint,2016-07-21T21:16:18Z,no matter what. you'll have to use eslint v2 with eslint-config-airbnb. until #936 is resolved.,positive
airbnb/javascript,eslint,2016-07-25T19:24:17Z,sure – i brought this up because these weren't explicitly set to `false` in the config. which seemed like a potential oversight. and because eslint-config-fbjs was disabling this rule because they wanted to use this pattern.,negative
airbnb/javascript,eslint,2016-07-27T05:25:13Z,great. that seems to work fine for me as well. let's update it to use that - both here and in `eslint-config-airbnb-base`,positive
airbnb/javascript,eslint,2016-07-27T05:37:53Z,jglover update in-place please :-) it would also be ideal to use git locally and rebase it down to one commit. rather than using the web ui. (also. it still needs to update the `eslint-config-airbnb-base` readme),positive
airbnb/javascript,eslint,2016-07-27T10:22:47Z,updated readme for eslint-config-airbnb & eslint-config-airbnb-base. relates to #970 added subshell to usage commands and converted samples to the three backtick markdown syntax with language specifier for highlighting. this fixes an issue where zsh (and potentially other shells) don't execute the commands properly because of a missing semicolon after variable declaration.had to change some of the wording because if you embed a code block under a numbered list item without text on the same line as the number. markdown gets upset and drops the list formatting.,neutral
airbnb/javascript,eslint,2016-07-27T15:38:47Z,thanks!,positive
airbnb/javascript,eslint,2016-08-02T08:18:32Z,can you provide the output of `npm install` and your linter command? is that command correctly an `npm run-script`. or are you incorrectly running a global `eslint`?,neutral
airbnb/javascript,eslint,2016-08-02T08:34:48Z,thank you for the awesome response time ljharb. it was atom / atom linter / linter-eslint returning the error. i was using an older globally installed eslint package. when i disabled "use global eslint installation" everything works fine,positive
airbnb/javascript,eslint,2016-08-03T17:30:09Z,how to use either extends airbnb and mocha in eslint . i'm new to eslintmy eslintrc.js> `module.exports = {`> `"extends": "airbnb".`> `"installedeslint": true.`> `"plugins": ["react". "mocha"]`> `};`question:when i try to lint a mocha unit test file. it shows 'describe' is not defined. (no-undef)it seems like mocha plugin doesn't works.mocha plugin should add all of the mocha testing global variables.if i remove `"extends": "airbnb"` . then it will be fine.how can i use both or just  prevent it to lint mocha testing filesthank you. regard,neutral
airbnb/javascript,eslint,2016-08-03T17:38:39Z,if you want mocha globals pre-defined. you need `"env": { "mocha": true }` somewhere in your eslint config. adding the mocha plugin just provides rules that can be enabled - it doesn't set any configuration. i'm assuming the mocha plugin documentation should tell you how to add your own config.,neutral
airbnb/javascript,eslint,2016-08-06T00:06:01Z,amilajack i'm sure `eslint` would appreciate a bug report if you could figure out on which code that's erroring out.lukebennett since this guide does not yet recommend using `async`/`await`. nor generators. i don't think it's worth mentioning just yet. since `async/await` is now stage 4. hopefully `eslint` will support it soon - at which point. this incompatibility will go away.,negative
airbnb/javascript,eslint,2016-08-06T21:14:35Z,which package - `eslint-config-airbnb`. or `eslint-config-airbnb-base`?,neutral
airbnb/javascript,eslint,2016-08-12T05:40:52Z,yes. updating the base config is correct. please prefix your commit with `[eslint config] [base] [breaking]` if you can :-)i'm not sure which section would be more appropriate. but we can bikeshed that on the pr :-),neutral
airbnb/javascript,eslint,2016-08-12T21:57:58Z,the usual cause of this error is that your editor is using the global eslint instead of the local one - although the stack trace doesn't seem to indicate that.you may want to update to the latest eslint. eslint-config-airbnb. and eslint-plugin-react. but i'm not sure why your error is happening.,negative
chaijs/chai,mocha,2013-04-25T11:02:19Z,ie / object doesn't support property or method 'class'. i'm using chai-jquery with chaijs & mocha.works well in most browsers. chrome (linux & win). firefox (linux & win). opera(win) but in ie10. it shows this error:```typeerror: object doesn't support property or method 'class'```for this    expect($el).not.to.have.class('xyz'),neutral
chaijs/chai,mocha,2013-05-07T19:17:32Z,i'm also having this problem on ie10 :(,negative
chaijs/chai,mocha,2013-05-07T19:28:18Z,this is a chai-jquery issue; closing.,neutral
jdan/cleaver,jshint,2014-03-31T07:04:23Z,oops. did not notice jshint in npm test.,neutral
guidone/node-red-contrib-chatbot,mocha,2017-06-27T22:25:33Z,fabianoleittes hi. i'm fine and thanks for using red bot.yes. i accept pull requests. redbot is still a work in progress so it's welcome a bit of coordination to avoid duplication of works.i generally use telegram for the development. it's easier to setup. this is also the reason many features for messenger are yet not implemented.yes i've tests. i use **mocha**. to test locally `npm test` and i lint the code before pushing it with `npm run lint`.nodes are generally very simple. all the code for the specific platform are in /lib/* and chatbot-*-receiver.js nodes.the general rule of thumb with nodered is that a node should do the minimum. don't let a node do a task that can be done with two nodes. the more granular are the nodes the easier is to compose the flows.i don't have a public roadmap yet. i'll open a wiki page in the next few days. for sure it includes facebook cards and buttons. slack support. email support and of course payment support.,negative
velesin/jasmine-jquery,jasmine,2013-12-18T15:11:04Z,there's no timeline. i may kill this. there are too many things missing or different in zepto from jquery,neutral
velesin/jasmine-jquery,jasmine,2014-01-07T20:32:26Z,would be great to see this patch in. do we know when this might happen? /cc peeja travisjeffery,positive
velesin/jasmine-jquery,jasmine,2014-01-08T19:36:19Z,thanks. really appreciate it!,positive
velesin/jasmine-jquery,jasmine,2014-01-08T19:48:05Z,awesome travisjeffery! looking forward to seeing it happen!,positive
webrtc/samples,selenium,2015-10-19T15:32:48Z,btw: i can't see what's wrong with _selenium-webdriver/_base.js_. i.e. why travis gives `syntaxerror: unexpected token )` after `vm.` on line 104?,negative
videojs/video.js,standard,2016-11-16T15:42:43Z,i vote to kill it. i don't think it's documented. and it's not a standard attribute.,negative
fergiemcdowall/search-index,standard,2017-01-11T16:46:29Z,ah yes. i wonder- does it make more sense to use `offset` and `pagesize` in `categorize`? since `categorize` now takes a standard query object. it would make things more consistent,neutral
solid/node-solid-server,standard,2016-05-10T21:43:53Z,updating to standard 7,neutral
solid/node-solid-server,standard,2016-05-10T21:44:26Z,see #340,neutral
mongoosastic/mongoosastic,eslint,2015-12-19T11:17:00Z,this contains lots and lots of changes not related to the feature. i can't review all of that and find out which ones are style changes and feature changes. could you minimize the changes just to the feature and only that?for example: - don't update dependencies. only the ones you need. - don't change travis.yml- don't deactivate any eslint rules- don't change style or indentation nor reformat any object literal. - squash all commits into only those are not bad. just doesn't belong to this specific pr. you can send them with new prs. the more specific the pr. the better.,negative
valor-software/ng2-tree,karma,2017-04-27T21:05:32Z,malliswarikulala what is `tree-root`? and `angular-tree-component` is not from this project,neutral
prettier/prettier,codecov,2017-11-05T06:00:12Z,not sure why codecov is saying coverage decreased. didn't touch any source code.,negative
prettier/prettier,eslint,2017-08-17T09:52:12Z,this seems to be very much a semicolon vs no semicolon debate. and as suchi'd suggest it be a configurable option.  i work on dozens of projects withvarious teams. each with their own unique eslint config... and it'd begreat to use prettier among all of them. without imposing a huge rewrite toevery codebase to drop wrapped parens around a single arg.  the issueitself filed here has had the most feedback i've seen in such a long time.so many people have voiced their opinions. many probably first time githubusers.bottom line - **do you want a huge userbase using a fork of this project**(that has no reasonable belief to be secure or maintained) because youwon't add a few lines of code to configure it optionally?quite bizarre if you ask me.,positive
prettier/prettier,eslint,2017-08-20T12:53:01Z,lydell sorry for noise i put the issue in wrong project. it is related with eslint and prettier integration.,positive
prettier/prettier,eslint,2017-08-23T02:52:20Z,basically using both `eslint-plugin-script-tags` and `eslint-plugin-prettier` together will yield the exact result that you're looking for. you should be able to test using the branch of that pull request.,neutral
prettier/prettier,eslint,2017-08-23T02:53:42Z,i've already tested `eslint-plugin-script-tags` + `eslint-plugin-prettier` and linting works. just eslint's auto-fix mode doesn't come into play like it does with normal `.js` files. that pull request turns on `--fix` mode for "processor" plugins (f.e. `eslint-plugin-script-tags`). which will make `eslint-plugin-prettier`'s fixes automatically apply.,neutral
prettier/prettier,eslint,2017-08-23T02:56:26Z,trusktr. this is nice! though i wish we did not had to rely on `eslint --fix` to "prettierize" vue files..,positive
prettier/prettier,eslint,2017-08-23T16:49:18Z,i considered that it might be ambiguous but eslint warns with `no-extra-semi`.,negative
prettier/prettier,eslint,2017-08-23T16:49:58Z,well. you should turn off that eslint rule :),neutral
prettier/prettier,eslint,2017-08-24T11:58:27Z,oh! you right. i probably missed it.i solve it using:```js/* eslint prettier/prettier: ["error". { trailingcomma: "es6" }] */```,negative
prettier/prettier,eslint,2017-08-27T03:00:02Z,i totally understand. the downside is that after prettier reformats xode. eslint can no longer throw on that formatting. i could run eslint both before and after prettier. with a different config for the first round to catch the possible-error formats. but that increases the time it takes.,positive
prettier/prettier,eslint,2017-08-29T07:16:21Z,but is it reasonable? if so. that would break both eslint and tslint checking.,neutral
prettier/prettier,eslint,2017-09-03T20:23:26Z,trusktr i tried your solution and it doesn't seem to work for me. eslint complains about line-breaks that an auto-fix don't solve. also. all the rules of `eslint-plugin-vue`that should be triggered in `template`are simply ignored.i would very much like an update on this issue and any pointer to where to start in order to help.,negative
prettier/prettier,eslint,2017-09-08T06:49:48Z,cc the eslint-plugin-prettier folks: not-an-aardvark zertosh,neutral
prettier/prettier,eslint,2017-09-08T19:01:04Z,azz mitermayer vjeux don't you think we should keep this flexible for compatibility with eslint-plugin-prettier's pragma option allowing arbitrary strings?i definitely see the advantage of keeping this to a known value so in the future option-values can be applied. i'm still worried about the existing adoption of eslint-plugin-prettier's arbitrary pragmas though.,negative
prettier/prettier,eslint,2017-09-10T02:13:46Z,i don't suppose there's a way to force prettier to format according to eslint configurations without having to place `// prettier-ignore` inside my code?,negative
prettier/prettier,eslint,2017-09-12T10:22:00Z,i guess this could also be solved in a general way by using one of those automatic git hook installers adding a "run `npm install`/`yarn` if package.json or package-lock.json/yarn.lock has changed after `git pull`". that would also protect against `eslint --fix` resulting in the same issue.,negative
prettier/prettier,eslint,2017-09-12T13:58:40Z,lydell thanks for the update. i'm new to prettier but having the option `eslintintegration: true` makes me expect prettier would respect any rules defined in the project specific .eslintrc? is that not the case?,positive
prettier/prettier,eslint,2017-09-12T21:53:14Z,i'd love to see this implemented as well. you can technically achieve this with `eslint --fix` and `comma-style: ['warn'. 'first']` but i'd rather not see warnings in eslint for something that can be cleaned up with prettier.,positive
prettier/prettier,eslint,2017-09-13T14:14:06Z,`eslintintegration: true` is a `prettier-vscode` setting to use `prettier-eslint` instead of `prettier`.,positive
docpad/docpad,standard,2014-09-04T20:51:49Z,i agree with dinomike on the gulp idea. if we can make a module for this it would be great. i did consider this a couple of times in the past.i guess it's just all about making sure it's modular so then we can do this properly without having to re-write a big part of docpad. just need to replace a module (or several).and i also agree that going with javascript is just a good idea. while coffeescript is awesome. not every js dev knows coffeescript. but every cs dev knows javascript (or they should for their debugging).also i don't like whitespace significant languages because of how they look (gonna bring the flame with that one if i say it in hacker news or something similar). loli say go with plain js. at this point in time it is still the standard.,negative
ocombe/ocLazyLoad,karma,2015-02-18T08:42:26Z,hmm yes that might be a problem. is it possible to have a small test case somewhere?,neutral
ocombe/ocLazyLoad,karma,2015-03-03T19:20:16Z,for testing with jasmine or karma you really don't need oclazyload in my opinion. i applaud oliver's efforts here but just don't load oclazyload when you are testing. problem solved. i'd rather have o concentrate on keeping this module working with the latest angular builds. just my 2 cents...,negative
ocombe/ocLazyLoad,karma,2015-03-05T11:18:41Z,great. thanks.  will check,positive
sequelize/sequelize,jasmine,2013-06-18T21:00:04Z,it looks like some jasmine tests are failing due to the different timezone format that moment uses vs. the previous manual formatting. the moment format better matches postgres' internal format; i'll update the tests and amend the pull.,neutral
sequelize/sequelize,jasmine,2013-06-19T20:39:32Z,uhh guys. are we still using jasmine? i was under the impression that we're not :/,neutral
sequelize/sequelize,jasmine,2013-06-21T20:04:43Z,note: there is a commented out test in jasmine dao-factory spec that should be able to run once a pr for this is submitted,neutral
sequelize/sequelize,jasmine,2013-06-24T22:03:44Z,please update the jasmine tests :),positive
sequelize/sequelize,jasmine,2013-06-25T08:37:46Z,woops. stupid me. we really need to migrate away from jasmine soon so i don't forget to run half the tests :d,negative
sequelize/sequelize,jasmine,2013-07-09T00:48:56Z,wait. why are we **not** updating timestamp(s) on updateattributes? :/ (according to jasmine),neutral
sequelize/sequelize,eslint,2017-08-07T03:21:40Z,working on this i noticed sequelize eslint rules can benefit from a few extra rules.it might be useful to extend the  "eslint:recommended" rules which protect against using duplicate keys in objects and reassigning values to const among other things (those are the two i noticed that were missing).also i used the complexity rule to calculate the cyclic complexity of the methods ( but i'm not sure if this is as important as the other rules),positive
sequelize/sequelize,jshint,2016-05-21T07:15:44Z,my tests failed with docker before i did not include mocha and jshint installations globaly.. ### description of changemy tests failed with docker before i did not include mocha and jshint installations globaly.,negative
sequelize/sequelize,jshint,2016-05-22T16:54:57Z,hmm. weird - all commands in the package.json file use `node_modules/.bin/` to reference the files - which specific command was failing?,negative
sequelize/sequelize,jshint,2016-05-22T17:20:57Z,try `npm run jshint` :),neutral
sequelize/sequelize,jshint,2016-05-22T17:21:13Z,hmm but that's what docker does,neutral
sequelize/sequelize,jshint,2016-05-22T17:35:15Z,ok... i see now where problem lies. you have to npm install localy. before doing docker tests.but then i do not see any reason for rows in dockerfile:```copy package.json /run npm install```,negative
sequelize/sequelize,jshint,2016-05-22T17:39:25Z,imho before any tests docker inside should do npm install it'self. that way you have clean test inside docker.,neutral
TryGhost/Ghost,mocha,2014-10-18T17:57:22Z,i'm wondering if it might be time to consider switching away from using casperjs and phantomjs for these tests. at the very least. i'm tempted to use the mocha-casperjs modules to try to make the format of our functional tests more consistent with the rest of the test suite.i am wondering if it wouldn't be better to use selenium webdriver. as long term it'd give us more flexibility.still casperjs does support running tests against phantomjs and slimerjs. i am also aware that there is a major rewrite of phantomjs (phantomjs 2) in progress. so perhaps we should just sit tight. still i'm not loving the 10minute slowdown of the tests or the random crashing.,positive
swagger-api/swagger-ui,eslint,2017-06-20T18:43:58Z,i actually had trouble importing the module with webpack. it complained that the brackets () are not expected where they are. my guess is that it's a strict eslint rule that disallows arrow functions for compatibility reasons - so yeah - blame it on ie ;-),negative
swagger-api/swagger-ui,eslint,2017-06-28T17:30:22Z,also note that ci is failing - looks like your update to eslint caused it to become more strict. it was probably the react eslint preset. it's good that we updated it. but we need to get it passing again.i'd like to see the code fixes for that in a separate pr. we can merge that pr. then merge master into this pr. which should clear the way for ci to run normally here.,positive
ariatemplates/hashspace,karma,2014-04-25T09:14:26Z,> then. we just have to take care to define properly the entry point of the package int the package's definition (package.json).this would pose a problem for non-node tools we are using (common.js pre-processor for karma and noder) as afaik those don't "understand" `package.json` entries.we are in a kind of more complex situation here as we are trying to make those dependencies work both in node as well in a browser....,neutral
nightwatchjs/nightwatch,jshint,2014-07-13T10:18:22Z,update linted files and fix some jshint issues. add `tests/*.js` to list of _linted_ files and fix it's issues.,neutral
formly-js/angular-formly,karma,2015-04-17T03:33:09Z,coveralls.io integration. this provides the necessary configuration via karma to publish coverage results to coveralls.io (pending some environment config by kentcdodds for coveralls.io authentication).  in addition. a new test coverage badge is being added to the readme.  fixes #78,neutral
formly-js/angular-formly,karma,2015-04-17T05:07:56Z,looking at the report it's actually only reporting on the index.test.js file which contains all of angular. api-check. and angular-mocks. as well as angular-formly... do you know of any way to make the coverage plugin leverage sourcemaps or something to make sure that 1) we're only reporting coverage for angular-formly files and 2) it reports coverage for the specific files. not just the entry file?,neutral
formly-js/angular-formly,karma,2015-04-17T05:29:52Z,i'll take a peek at this and circle back!,neutral
FezVrasta/popper.js,karma,2017-04-26T06:32:36Z,> would you like to add a test for node in a separated pr maybe?can do. which test runner would you like me to use? mocha. ada. tape? because currently everything seems to be run in karma. which has all those globals.,neutral
tejacques/crosstab,sauce,2015-06-24T05:36:24Z,i'm actually in the process of testing this now. just need to run it over saucelabs and it should be good to go. eta pushes to npm tomorrow.,positive
angular/zone.js,jasmine,2017-03-19T13:36:25Z,fix(jasmine): modify jasmine test ifenvsupports message. add jasmine spec ifenvsupport message,neutral
angular/zone.js,sauce,2015-06-01T05:04:35Z,we need to fix the issue with ie first - which is s real bug in the lib before we can merge - not delete - the pr. to be clear this is no related to sauce but a bug that wasn't tested before,neutral
adamgruber/mochawesome,mocha,2015-05-15T15:49:21Z,this is more a question than an issue. how do i set the report title that shows on to of the html page?right now it seems that reportname is really the name of the html page that will be outputted. for example if i put reportname='index'. it outputs index.htmlbut the title of the report on the actual page seem to always be the name of the root directory (i loko at your code and actually that is how you are getting the reporttitle)could you kindly update that to use reporttitle if specified with the reportoptions?that way we can do simply:mocha({        reporter: 'mochawesome'.        reporteroptions: {          reportdir: reportdir.          reportname: reportname.              reporttitle: reporttitle        }    }thank you so much for your greta work with this package!damiano,positive
adamgruber/mochawesome,mocha,2015-05-16T01:23:14Z,i think this is a valid option and worth adding.,neutral
adamgruber/mochawesome,mocha,2015-05-18T19:33:32Z,thank you.,positive
adamgruber/mochawesome,mocha,2015-05-21T13:37:04Z,maybe i am doing it wrong. let's say you want to try to reach a page on a browser : www.dev.mysite.com/runtest/. with your node server you want to run the test programmatically and then display the result on this page.(and you don't mind waiting for the test to complete does not have to be live) since it is async. the probleme is you cannot just return the html file because you don't really know when it will be done writing in the file(html.css.js). so i was thinking promise or a callback when everything is done so i can return the html file knowing its complete.it's only a proof of concept but look :var html =templates.mochawesome(obj);                savetofile(stringify(obj. null. 2). config.reportjsonfile. function() {});                savetofile(html. config.reporthtmlfile. function() {                    console.log('\n[' + chalk.gray('mochawesome') + '] report saved to ' + config.reporthtmlfile + '\n\n');                    options.reporteroptions.callbackaftersave();                });i know it isn't clean code and fail proof because callbackaftersave() could be empty and race condition ... and it doesn't follow the logic of config and your param but it kinda work. it calls my function when its done writing the html. now i can safely return it.,negative
adamgruber/mochawesome,mocha,2015-05-22T19:19:59Z,the report gets saved to the `mochawesome-reports` directory which contains everything you need for offline viewing.,positive
adamgruber/mochawesome,mocha,2015-05-22T19:25:35Z,so you're hitting a website that triggers the tests to run and you want the mochawesome report to display on that website when the tests are done? i'm not so sure this is a common use case. the tests themselves could take awhile to run leaving you to have a blank browser window while they run. it seems a better solution would be to employ a build server like jenkins to run your tests and then notify when they are complete. the build jobs can be configured to save the html report to a box somewhere when done and email out a link to the page. we have a similar setup where i work.,neutral
adamgruber/mochawesome,mocha,2015-05-26T13:11:47Z,html reports problem. i am trying to run my mocha test cases and reporting output with mochawesome but i endup with a error 137 passing (184ms)24 pendingfatal error: call_and_retry_last allocation failed - process out of memoryaborted (core dumped)mochawesome-reports folder is generated and inside it i have css  fontsjsfolders but html reports are not generated.could you please suggest  me the solution i have tried spec.dot and various other reporter they are running perfectly over the stdout but i want html reports.,negative
joeybaker/generator-iojs,eslint,2015-05-19T03:01:17Z,convert eslint to a shareable config. for abstraction!,neutral
Hacker0x01/react-datepicker,karma,2015-10-29T13:38:48Z,update karma-sauce-launcher,neutral
Hacker0x01/react-datepicker,eslint,2018-03-08T22:40:05Z,martijnrusschen flow is a lot like a linter. in that it doesn't affect the runtime behavior at all. but it does require more annotations than eslint. they can be in comments. but it's prettier when they're not. transpiling flow is as simple as removing the annotations. which we already seem to have babel configured to do.the way we're using it at work. we have webpack configured to run flow. but it continues even if flow finds errors. (so you'll see the type errors but they don't get in the way of running the code.) on our ci server. we do reject changes that fail to typecheck. though initially we didn't.another advantage of flow over typescript. is that react uses flow. so our users are more likely to be familiar with it.i added #1307 as a simple example.,negative
linkedin/hopscotch,jasmine,2015-04-08T18:22:03Z,looks good to me. barring any objections. i'll pull this in by eod.,negative
sass/node-sass,jshint,2014-04-23T08:43:57Z,btw the lint script doesn't really make a lot of sense to have; it's just one line which executes jshint. if you plan to add more stuff later. then i guess it makes sense.,negative
webpack/webpack,standard,2016-12-20T23:33:26Z,that would definitely help! but still -- it seems like webpack has _many_ features that could benefit users if they only knew to use them. when the time comes. thanks to sections like `optimization` in your docs. they discover them and turn them on. this seems no different. js runs in so many different environments. all with different perf standards / requirements. default warnings seem most helpful when you can be totally certain that your assumption is global.,positive
webpack/webpack,standard,2016-12-23T12:41:03Z,posix defines:* standard output = for writing conventional output* standard error = for writing diagnostic outputprogress is a diagnostic output so it belongs to standard error.,negative
webpack/webpack,standard,2017-01-02T12:35:16Z,> should be squashed imo otherwise lgtmyes. for sure (good catch chicoxyzzy ). we shouldn't add broken commits inside master branch. i don't know for now if we are not using squash as standard. but if not it's a good idea add it.,negative
webpack/webpack,standard,2017-01-04T12:26:50Z,thelarkinn. i added some tests for `chunk` class. but i don't have all context about the scenarios and standards that we are using in webpack repository. i found different styles inside the test files and there's nothing talking about it on `test/readme.md`. i don't know if you guys are aware of it or what you are doing to improve this. so i don't know if makes sense create an issue to handle this or if we have some work in progress.,negative
webpack/webpack,uglify,2018-05-02T11:43:15Z,looks like stale issue. close due stale. feel free to open new issue if somebody faces with this problem in `webpack3` and `webpack4`. also i use latest uglify plugin and using long term cache and all works fine. maybe problem can be in other plugins. thanks,positive
webpack/webpack,uglify,2018-05-08T20:41:24Z,maximaximum expected behavoiour. webpack don't remove legal comment (copyright. licenses and etc). we should respect other developers. you can configure uglify plugin in `minimizer` option and set `comments: false`. thanks!,positive
webpack/webpack,uglify,2018-05-19T07:40:41Z,my guess was wrong. it's not caused by the worker pool in the uglifyjs-plugin...,negative
webpack/webpack,uglify,2018-05-19T07:49:58Z,i’ve also observed timeout failures on stat test cases but they seem to be gone the day uglify was disabled.,neutral
webpack/webpack,uglify,2018-05-21T16:49:05Z,kzc i found that if i build blacksonic's example with webpack 4 using awesome-typescript-loader and `plugins: [new uglifyjsplugin({ uglifyoptions: { compress: { passes: 3 } } })]`. unused classes can be tree-shaked.is this an expected behavior?if yes. does this mean one does not need to use a string-replace plugin to tree-shake unused classes from typescript code as mhegazy noted if they specify `{ compress: { passes: 3 } }`?,neutral
webpack/webpack,uglify,2018-05-22T15:19:43Z,> it is likely that uglify-js can drop unused side-effect-free class iifes even if they are not annotated with `/*__pure__*/`.i was mistaken. it only worked in trivial cases. you still need to replace the comment text.,negative
webpack/webpack,uglify,2018-05-25T17:23:19Z,txiaocao installing uglifyjs-webpack-plugin from npm worked for me. it seems that the docs are wrong about the supposed existence of `webpack.optimize.uglifyjsplugin`.my config:`const uglifyplugin = require("uglifyjs-webpack-plugin");`...`plugins: [    new uglifyplugin({      uglifyoptions: {        output: {          comments: false        }      }    })  ].`,negative
stealjs/steal,sauce,2017-03-22T17:05:53Z,make it so that saucelabs runs all of the individual test pages. we have tests spread out over multiple entry-point test pages. currently saucelabs only runs test/test.html. which means some tests (such as the npm tests) are omitted from running in ci.,neutral
stealjs/steal,sauce,2017-03-27T20:50:34Z,closed by #1128,neutral
stealjs/steal,sauce,2017-04-12T21:32:43Z,use test-saucelabs package,neutral
stealjs/steal,sauce,2017-04-12T23:08:21Z,:d,neutral
clappr/clappr,karma,2014-12-22T02:53:13Z,hi rheber. i needed to expose events on karma configuration (d9626a9b0b8cbdd5b665c85ac46e90147b87675a) in order to fix the tests. anyway. thank you for the pull request!,positive
acuminous/yadda,mocha,2015-10-25T17:34:55Z,thanks. xeladotbe. that fixes the issue. i am surprised that calling the same mocha function from different locations changes its behavior. does mocha understand the context in which the function is being called?,neutral
sidorares/node-mysql2,eslint,2016-08-18T23:35:05Z,chalker did you use some custom script or eslint to log this? i'd like to add test rule so that it's not accidentally introduced in the future,negative
sidorares/node-mysql2,eslint,2016-08-18T23:36:09Z,sidorares no. i don't have an eslint rule for that. sorry. and am not aware of any. it would be super-awesome if you would find one. though =).,positive
prebid/Prebid.js,standard,2018-03-06T21:22:46Z,this issue has been automatically marked as stale because it has not had recent activity. it will be closed if no further activity occurs. thank you for your contributions.,positive
prebid/Prebid.js,standard,2018-03-08T02:13:23Z,code looks good.  i'm a bit puzzled by the build failure for standard/object-curly-even-spacing since when i run lint locally on the pr. it passses,negative
prebid/Prebid.js,standard,2018-03-16T16:09:13Z,hi jsnellbaker. thanks for taking the time to look over the code. we appreciate it. all your suggestions are very sensible. and i agree it is good to bring this code up-to-date with regards to es6 standards. i certainly prefer it myself.i have pushed the fixes and changes so let me know if all is as expected.,positive
prebid/Prebid.js,standard,2018-03-20T22:27:15Z,well in the standard banner workflow when we set keys we mark the bids as used but that doesn't work great for video because we don't get a callback letting us know the bid won.i like the idea of a clearing api though. open to a pr for that.,positive
CenterForOpenScience/ember-osf,coveralls,2017-06-15T14:25:34Z,brianjgeiger merge conflicts are gone. tests passing. coveralls a little unhappy about skipping test,negative
clarkie/dynogels,eslint,2016-09-30T09:01:28Z,i'm a little confused why you'd need to call `createtables` if you know the tables exist. i have an application config setting that allows us to trigger table creation based off a flag or environment variable:```function maybecreatetables(config. callback) {  if (config.createtables) {    console.log('creating tables...'); // eslint-disable-line    return dynogels.createtables(callback);  }  return callback();}```if i've misunderstood the question then please let me know. thanks,negative
babel/babylon,codecov,2016-10-15T16:04:43Z,count babel tests towards babylon code coverage. as we're already running babel's tests in ci to detect any integration issues early. we can also use them to meaningfully bump up babylon's test coverage. by doing this with an instrumented build of babylon and using codecov's automatic report merging feature.in practice this currently helps us cover things like `do` expressions and the `::` operator which are conspicuously uncovered in the current `master`. obviously for new features the ideal still is to add covering tests from the get-go.(also. file this under "workarounds we can retire if babylon is ever merged back into the babel monorepo" ),neutral
babel/babylon,eslint,2017-01-24T13:24:47Z,danez > it maybe even easier to adjust the typescript parser to have an option to output babel-compatible astso `ts + typescript-eslint-parser` is already a way to effectively take typescript source code and produce an estree ast.if i understand correctly. the work currently being done on babel + estree is around babel _outputting_ estree. but if it were possible to for babel to also consume estree as an option. then we potentially have a lot of the moving parts already...i don't yet know enough about babel to know how that relates to hzoo task list  in the description above,neutral
babel/babylon,eslint,2017-01-24T13:30:13Z,jameshenry nearly.the work that is currently done is to have an option (or plugin) that enables babylon (the parser of babel) to output estree. this is so that other tools like eslint. react-docgen. basically everything that consumes estree asts to be able to drop in babylon and be able to support every spec that babylon supports.afaik there are no plans to use the estree mode within babel. as the changes that were made to the estree format are all valuable additions/changes and make it way easier to write plugins in babel. it would be nice to contribute them back to estree. but they don't allow/want any breaking change.,neutral
babel/babylon,eslint,2017-01-24T13:31:42Z,danez the intention of the issue/discussion earlier was that i thought we could possibly have a `ts` plugin like with flow/jsx? and that the babel team wouldn't be the ones maintaining/creating it. but it would be like flow in that the flow team can make prs etc.and yes jameshenry already has done separate work via `typescript-eslint-parser` which uses the ts parser -> estree. this issue was about getting babylon itself to parse ts but maybe that's unnecessary?>  and instead focus more on making it more easy to extend.not sure what we can do there yet?,neutral
react-materialize/react-materialize,karma,2016-03-04T01:52:47Z,i pushed my commits.if i do not change the `karma.conf.js` file. when i run `npm test`. it will throw:``` shellreferenceerror: can't find variable: $```or``` shelltypeerror: 'undefined' is not a function (evaluating '$(this.refs.__select__).material_select()')```,negative
pouchdb/pouchdb,eslint,2016-05-23T20:49:09Z,not sure if moving 'my' submodules of express-pouchdb is a good idea. as they have separate test suites. more chances of travis breaking down accidentally (e.g. due to upstream bugs in mocha/eslint/babel etc.). and its runtime would increase too (although only marginally).but anyway. we can figure that out later. the order nolanlawson names sounds like a good start.,negative
pouchdb/pouchdb,eslint,2016-06-01T09:33:45Z,so the tests failed with a minor eslint. i pointed it out in the comments. i had a few small comments about the code style but otherwise its looking great. hopefully get a green run with that semi colon and i think it will be good to land,positive
pouchdb/pouchdb,uglify,2014-08-16T04:47:05Z,rebased,neutral
pouchdb/pouchdb,uglify,2014-08-17T17:48:04Z,nah sorry missed the issue. yeh im leaning towards -1 on this. i know it doesnt have a huge downside. but theres a cost both in download and more complexity with each additional dependency and i would rather be getting rid of them. especially for the sake of 500bytes. we can report the size differences to the original projects and hopefully end up with the benefit and no extra depscalvinmetcalf wanna cast the vote?,negative
pouchdb/pouchdb,uglify,2014-08-17T18:19:19Z,fair enough. pouchdb has gotten a little big around the waistline. though. we should try to find ways to slim it down.,neutral
pouchdb/pouchdb,mocha,2014-06-12T20:45:14Z,unfortunately it looks like this won't work. because mocha is not equipped to run in node-webkit.  it assumes it's in node (or something). which results in:```uncaught node.js error rangeerror: maximum call stack size exceeded    at window.require (eval at undefined. <anonymous>:1:26)    at window.require (eval at undefined. <anonymous>:1:112)    at window.require (eval at undefined. <anonymous>:1:112)    at window.require (eval at undefined. <anonymous>:1:112)    at window.require (eval at undefined. <anonymous>:1:112)    at window.require (eval at undefined. <anonymous>:1:112)    at window.require (eval at undefined. <anonymous>:1:112)    at window.require (eval at undefined. <anonymous>:1:112)    at window.require (eval at undefined. <anonymous>:1:112)    at window.require (eval at undefined. <anonymous>:1:112)```plus ```uncaught referenceerror: require is not defined```,negative
pouchdb/pouchdb,selenium,2014-04-06T17:53:19Z,this is a script that needs to run locally. and not just a browser one (we dont only test in the browser). i expect its mostly something that just checkout out a repo. does a build and runs a test incrementally```./bin/backfill-performance.sh git-sha```just giving a heads up in case you go for a different architecture. at the least it shouldnt be limited to the browser. and it should run a clean profile in the browser each time (which we get for free with using selenium tests),neutral
pouchdb/pouchdb,jshint,2014-03-18T11:07:46Z,ok. installed linux. fixed a jshint issue. now all tests seem to pass.,neutral
pouchdb/pouchdb,jshint,2014-03-18T20:43:18Z,just in case you didn't know. you can also put it in your global .gitignore.  i've done that myself; i found it's also a good habit since it forces me to put project config elsewhere (e.g. jshintrc).,positive
pouchdb/pouchdb,jshint,2014-03-18T23:02:10Z,yo. minor jshint fix needed here. but yay less code,positive
pouchdb/pouchdb,jshint,2014-03-18T23:31:47Z,so jshint checks indentation based on the line before it. the real error is that the previous line should be at 3 not 5,negative
pouchdb/pouchdb,jshint,2014-03-18T23:45:48Z,yup. daleharvey . you are right. i'm not testing it right. it took two different issues to screw me up here.#1 - the jshint website doesn't check for indenting errors#2 - when i switched branches locally in git it turned out that it was still applying changes that weren't in master. once i ran reset it was all good and i got the same error.thank you! by running the test yourself you proved i had screwed up which made finding the problem much easier.,negative
pouchdb/pouchdb,jshint,2014-04-04T03:08:13Z,results are in the browser. cleaned up a bit about the location of the files. added jshinting,neutral
pouchdb/pouchdb,jshint,2014-04-07T17:35:48Z,you should be able to put in jshint exceptions. like `/* jshint maxlen: false /*` in a comment above them,neutral
pouchdb/pouchdb,jshint,2014-04-07T17:53:56Z,ok. added the comment to just those lines. and added in the maxlen: 80 option into the .jshintrc file.,neutral
pouchdb/pouchdb,jshint,2014-04-14T00:49:57Z,d'oh. forgot to jshint. should be green now.,neutral
vlucas/frisby,jasmine,2014-05-01T19:01:58Z,if you make this work. i will certainly link to it from the frisby website - in my view. it's just another test runner as an alternative to `jasmine-node`.,neutral
angular/protractor,jasmine,2016-06-18T07:25:01Z,"restartbrowserbetweeneachtest: true" with jasmine 2 restart browser extra one more time . when i am using "restartbrowserbetweeneachtest: true" in conf with jasmine 2. having two "it" in spec then it restart the browser 3 times but i want 2 time only as their are 2 "it". how to resolve that problem.??,positive
angular/protractor,jasmine,2016-06-21T18:38:04Z,hi all. we are using jasmine-reporters for generating both html as well as xml reports. however we have written a custom dot net console application to take the xml reports generated and write it back to microsoft test manager. if i try to invoke a console application within the it block of a spec file it invokes fine. however when we try to invoke the console application from oncomplete event(as xml reports would be generated by now) in conf.js it is not invoking at all. kindly advise.,neutral
angular/protractor,jasmine,2016-07-11T07:06:19Z,shankscriptthat's great. thanks a lot.and i think addjasminenodeopts: {defaulttimeoutinterval: 60000}.  is neccessary too.,positive
angular/protractor,jasmine,2016-07-14T17:15:05Z,can we make the wait plugin easily available/default in some way? assigning sjelin since you've got background here.,neutral
angular/protractor,selenium,2015-06-22T10:24:55Z,when i run webdriver-manager start. after an update which processes successfully. i get this error:c:\users\developer>webdriver-manager startseleniumprocess.pid: undefinedevents.js:85      throw er; // unhandled 'error' event            ^error: spawn cmd enoent    at exports._errnoexception (util.js:746:11)    at process.childprocess._handle.onexit (child_process.js:1053:32)    at child_process.js:1144:20    at process._tickcallback (node.js:355:11)    at function.module.runmain (module.js:503:11)    at startup (node.js:129:16)    at node.js:814:3,negative
angular/protractor,selenium,2015-06-26T22:52:50Z,reported reduced case here: seleniumhq/selenium#715,neutral
angular/protractor,selenium,2015-06-29T17:56:01Z,definitely looks like a selenium or angular bug to me,negative
angular/protractor,selenium,2015-06-29T19:45:24Z,nope. it never makes it past the first getcurrenturl.in the console i am getting an error. maybe that will help```c:\projects\si\presentations\site\node_modules\protractor\node_modules\selenium-webdriver\lib\webdriver\promise.js:1877      var result = fn();                   ^typeerror: undefined is not a function```,negative
angular/protractor,selenium,2015-06-30T14:45:26Z,it does not hang. it just fails the test "navigates - fail" and gives me an error like before```c:\projects\salesindicator\presentations\site\node_modules\protractor\node_modules\selenium-webdriver\lib\webdriver\promise.js:1877      var result = fn();```that being said. i played around with it some more and it looks like it is not waiting for angular to finish before failing the tests. in the console i will see a bunch of failures. but in the browser the pages are way behind and still loading.did something change in v2 that would cause protractor to not wait until angular has loaded?,negative
angular/protractor,selenium,2015-06-30T17:15:17Z,the stack trace probably won't be very useful since there isn't actually a file which is running. the errors would just be from protractor/selenium-webdriver modules. would those be useful to you? could you describe a situation and what you would like to see?,neutral
angular/protractor,selenium,2015-07-05T21:04:59Z,hi there. i ran into the same issue. how about adding something like elementnottobecovered? that way the functionality would be easily available without creating inconsistencies :-),positive
angular/protractor,selenium,2015-07-07T18:46:35Z,hankduan thoughts on dbartholomae's suggestion?,neutral
angular/protractor,selenium,2015-07-07T22:13:12Z,maheswaranunni  and conceptdeluxe thank you so much for this. solved my problem in 2 minutes.,positive
angular/protractor,selenium,2015-07-10T05:10:58Z,jimmynavio  good going :) :+1:,positive
angular/protractor,sauce,2014-05-06T15:24:08Z,added line to print out webdriver session id. added line to print out webdriver session id for sauce connect to use. this lets bamboo or jenkins show test results in their own page avoiding the need of logging into sauce lab to view the results.,neutral
angular/protractor,sauce,2014-05-07T20:37:14Z,test(travis): added travis_retry for testonsauce.sh. `travis_retry` checks the return code of a command. in this case **testonsauce.sh**. retrying up to 3 times if the return code is non-zero.this will help avoid false positives errored builds due to unrelated timing issues with sauce labs.,positive
appium/appium-uiautomator2-driver,mocha,2017-10-12T00:25:20Z,refactor to use admc/wd and testobject tests. * refactored all the tests to use admc/wd so that we can use remote appium servers (specifically testobject)* run a mocha script before tests that. when testobject_tests variable is set. overrides 'wd' and points the server to testobject servers to run remotely* added several endpoints to no_proxy that should have been there* added an appveyor.yml for future testobject ci (want to do it on appveyor instead of travis because it will lighten the travis load and we don't need a linux or mac box. windows is fine),positive
cozy/cozy-ui,standard,2017-07-04T07:30:40Z,i added two little fixes:- update `standard` (js linter) script in `package.json` ;- lint javascript filesare we cool?,positive
ripple/ripple-lib,eslint,2015-06-12T16:28:39Z,remove iou_suffix from orderbookutils.js and clean up serializedtypes.js. - remove iou_suffix from orderbookutils.js- change serialize function in serializedtypes.js (line 412) to accept values as well as amounts- clean up serializedtypes.js so it follows eslint rules,neutral
ripple/ripple-lib,eslint,2015-06-23T17:07:13Z,this is still "work in progress". maybe we should close this pull request until it's ready?,neutral
ripple/ripple-lib,eslint,2015-06-25T17:23:56Z,decouple the amount class from math performed on values. - remove iou_suffix from orderbookutils.js by using the correct currency and counterparty when available - create new values class that performs math without using the amount class - change serialize function in serializedtypes.js to accept values as well as amounts- clean up serializedtypes.js so it follows eslint rules,positive
ripple/ripple-lib,eslint,2015-06-26T21:41:10Z,looks like eslint didn't run. i'm not sure what happened. do you know?,negative
ripple/ripple-lib,eslint,2015-07-02T10:45:28Z,update eslint,neutral
ripple/ripple-lib,eslint,2015-07-02T10:55:09Z,looks like eslint didn't run?,neutral
ripple/ripple-lib,eslint,2015-07-02T10:55:40Z,oh. guess there's nothing to run against. heh,negative
ripple/ripple-lib,eslint,2015-07-02T10:56:27Z,if we're mad keen we could ssh in i guess and run `npm run-script lint` :) ?  may as well just run it locally,positive
ripple/ripple-lib,eslint,2015-07-02T10:56:37Z,ye,neutral
ripple/ripple-lib,eslint,2015-07-02T11:31:38Z,use parser: babel-eslint which supports facebook flow. fixes #395,neutral
ripple/ripple-lib,eslint,2015-07-02T11:50:46Z,clark800,neutral
ripple/ripple-lib,eslint,2015-07-02T17:13:41Z,madeline and i were planning on making this change too. lgtm,neutral
ripple/ripple-lib,eslint,2015-07-03T12:39:00Z,i don't think babel-eslint is quite working as intended,neutral
ripple/ripple-lib,eslint,2015-07-06T16:45:11Z,updated once again:- in the amount class. this._value now stores an iou or xrp value- in iou and xrp value. this._value is now private- out bn implementation is now hidden (i removed the exposed bn constants in the amount class),positive
ripple/ripple-lib,eslint,2015-07-06T17:15:08Z,the issue above is that babel-eslint doesn't understand flow's comment syntax. one way to address this is to inline the type annotations. though there is probably a better option.,neutral
ripple/ripple-lib,eslint,2015-07-07T16:49:45Z,integrated clark800 's comments to make value.js an abstract base class and other fixes. let me know how it looks!,neutral
ripple/ripple-lib,eslint,2015-07-08T00:22:52Z,updated once again,neutral
ripple/ripple-lib,eslint,2015-07-08T17:34:13Z,updated to include the newest round of comments,neutral
ripple/ripple-lib,eslint,2015-07-08T18:54:36Z,updated with the two small fixes,neutral
ripple/ripple-lib,eslint,2015-07-08T19:13:38Z,lgtm!!,neutral
erming/shout,eslint,2016-02-07T10:51:29Z,package.json: lint all .js files. this makes the linting process less prone to miss new (or evenexisting) files. ignoring specific file paths is delegated to the.eslintignore file in the root directory.i just noticed this. not sure why i had explicitly set files to lint to begin with..,neutral
erming/shout,eslint,2016-02-07T11:30:52Z,are there no new errors thrown up? because this will lint the libraries.,neutral
erming/shout,eslint,2016-02-07T11:32:56Z,> because this will lint the libraries.which libraries?,neutral
erming/shout,eslint,2016-02-07T18:51:47Z,williamboman /node_modules/*,neutral
erming/shout,eslint,2016-02-07T18:53:02Z,maxleiter eslint skips `node_modules` and `bower_components` by default. i don't even think you can override that. like. at all :p.,positive
erming/shout,eslint,2016-02-07T19:09:15Z,yeah. i means client/libsdidn't notice you had them ignored already. looks good then. it shouldn't change anything for now. i think. but it's a good change to make.,positive
erming/shout,eslint,2016-02-07T22:15:16Z,:+1: from me,neutral
tapjs/node-tap,coveralls,2015-08-20T15:46:12Z,bucaran coverage support was added when this issue was closed. there's even a section in the readme for it. including specific support for coveralls.io.,positive
benbria/coffee-coverage,mocha,2015-08-20T20:54:04Z,did you ever get this working. btw?,neutral
benbria/coffee-coverage,mocha,2015-08-20T21:14:08Z,nope. i've got it working with other projects. but not with this one :cry:,negative
balderdashy/sails,mocha,2013-09-20T21:47:41Z,i think the `mocha.opts` file under the `test` directory has been taking care of this.  looking back through previous pull requests. all the tests have been running on travis.,neutral
balderdashy/sails,mocha,2013-09-20T21:57:56Z,`mocha.opts` doesn't include a test pattern in master. travis does run them for development though. next time development is merged into master i expect it will bring the testing situation into parity across both branches.,neutral
skulpt/skulpt,jshint,2014-11-03T15:42:32Z,leszekswirski awesome to get the exec limit from the compiled code! the first part however i don't completely understand. :smile: do you use that to yield a process to the ui "thread"?you  left a vim swapfile in there you. and jshint nags about creating a function in a loop. i tried calling the settimeout with a var_args array like `settimeout(handleresponse. 0. [r.resume]);` but the closure compiler doesn't like that. and it also changes `this` and i don't know if that bad. the tests pass.,negative
skulpt/skulpt,jshint,2014-11-03T15:51:18Z,albertjan oops. thought i'd got rid of all the swap files (stupidly did a `git add .` at one point).scheduling resuming with `settimeout(.... 0)` essentially pushes the resuming onto the back of the ui event queue. and so allows other things in the queue (like ui events or other scheduled functions) to run first. it's basically a cooperative multithreading "do something else if you want to" operation.the jshint warning is stupid (since i return directly after creating the function). but i'll add a workaround.one issue with conditional codegen of the exec limit is that there is currently an interface for setting an exec limit in `sys`. which won't actually function if the exec limit wasn't previously defined. since setting the exec limit in python seems odd to me anyway. i don't think this is a big deal. and actually i'd be in favour of removing that functionality entirely. but i didn't want to make a backwards incompatible change like that here.,negative
css/csso,mocha,2014-01-11T15:07:38Z,sorry about that. we're in the process of getting new maintainer.hope it'll be much faster soon.,neutral
ModuleLoader/es-module-loader,mocha,2015-04-16T15:51:47Z,guybedford can we run the mocha tests in the browser?,neutral
twbs/bootstrap,sauce,2014-04-12T18:40:40Z,safari fluid layout bug means a column falls 1-2 pixel short of it's correct width.. this bug only appears in safari on os x as far as i can tell. chrome. firefox and ie 9/10 are ok. on this fluid layout  the right coloured columns. fall 1-2 pixels short of the full column width. resizing the browser width slowly shows that the pixel gap closed to full column width every now and again. there must be some sort of rounding on column width that is producing this effect.,negative
twbs/bootstrap,sauce,2014-04-13T05:38:54Z,thanks chris i hadn't seen that in the documentation. you help much appreciated.,positive
keystonejs/keystone,mocha,2014-08-21T09:43:22Z,unique fields aren't unique after list.model.collection.drop(). _this isn't a keystonejs' issue. it's just something about mongoose (or maybe mongodb) that you should be aware of._after a `list.model.collection.drop()` all data and indexes are gone and. for a short period of time. you can insert duplicated `unique: true` fields without any errors or warnings.i've discovered this running mocha tests. i dropped and redid the collections after every test and then uniqueness tests (trying to register/update users with an existing email. username) failed. _but_ only when they were in the middle of other tests. running alone they were fine.i was able to query a `find` with an unique field and i've receive two and three results. after some ~~mad~~ research i've found that the issue came from the `drop`. now i have replaced `list.model.collection.drop()` with `list.model.remove()`. more inefficient but safe in terms of model integrity.i haven't got the time to go really deep into it yet but i hope it helps someone._if it's a well known issue and i've forgot how to search on google properly. my apologies._,negative
keystonejs/keystone,mocha,2014-08-22T10:08:56Z,this sort of thing is really valuable. there are some other things i know of as well (jossmac found one earlier today with regards to mongodb indexes not being dropped)i think we should add a "tips & gotchas" section to the site that everyone can contribute to - will leave this open until then so we don't lose it.,positive
agershun/alasql,mocha,2016-01-09T08:38:46Z,please. use:``` js   if(typeof exports != 'object') {...}```instead of:``` js   if(window) {...}```try to run `mocha .` in node.js now :),neutral
agershun/alasql,mocha,2016-01-10T08:31:26Z,:+1: now if you run `mocha .` it opens the browser with empty page. how to eliminate this?,negative
yeoman/generator-karma,mocha,2013-06-18T11:47:13Z,updated to latest generator and mocha,neutral
yeoman/generator-karma,mocha,2013-06-20T00:40:27Z,is included in pr #25,neutral
yeoman/generator-karma,karma,2013-06-06T21:01:14Z,also occurs when i unlink generator-karma and do npm install -g generator-karma,neutral
yeoman/generator-karma,karma,2013-06-22T10:28:32Z,unable to register generator-karma/app/index.js (error: arguments to path.join must be strings),neutral
yeoman/generator-karma,karma,2013-06-24T23:11:49Z,update karma-e2e.conf with proxy and url root. add options (commented out) for adding in proxy and urlroot,neutral
yeoman/generator-karma,karma,2013-07-02T14:10:53Z,+1 for including this,neutral
jquery/jquery-migrate,coveralls,2016-05-17T01:05:54Z,coverage really didn't decrease. coveralls doesn't see the tests that happen in the iframe.,negative
ember-cli/ember-cli-mocha,mocha,2017-04-26T09:44:17Z,taheilo there are a few issues with your code examples above:- in the first snippet instead of returning a new `promise` instance you can just `return currentsession().authenticate(...).then(...)` without the need for the `resolve()` call. if the second assertion fails you would otherwise have a `promise` that is never resolved. but also never rejected because `reject()` is not called anywhere.- in the second snippet you're mixing the `done` callback. ember's async `andthen()` helpers and the `promise` returned from the `authenticate()` method. i'd suggest to remove the `done()` and `return` the `authenticate()` result from the `andthen()` function. then it should hopefully work.as this doesn't seem to be an issue with `ember-cli-mocha` itself i'm closing this issue for now.,negative
bitpay/bitcore,mocha,2014-08-06T13:29:52Z,code: ackmocha: 3157 passing (7s)browser: passes: 3129,neutral
bitpay/bitcore,mocha,2014-08-06T13:56:02Z,code: ack. i would add a test for a specific message and a specific key. asserting that the result is a specific signature.mocha: 3164 passing (5s)index.html: passes: 3136,neutral
bitpay/bitcore,mocha,2014-08-11T20:07:09Z,mocha: 3164 passing (5s)index.html: passes: 3136code review: ack.,neutral
bitpay/bitcore,mocha,2014-08-12T16:17:37Z,mocha: 3178 passing (5s)index.html: passes: 3150ack. good work!,positive
qunitjs/qunit,eslint,2017-01-06T01:15:56Z,there's nothing here breaking. fixing a bug or introducing a new feature. everything is just using some new language features. i like this pr and don't think it's needed. it will open a discussion for us to discuss a potential style guide.> do we need to do refactoring separately (like this pr) or should we let it happen over time? i tend to think letting it happen over time will tend towards it not happening at all.i'll solve this problem in a couple minutes.> is there an es6 style guide for jquery? if not. we should define eslint rules for things like let vs const as they come up.not that i am aware of. but i believe it's a nice opportunity for us to see if we want to define our own. defining our own specific eslint rules. even if it's the same - or almost - of the jquery rules. is inevitable.,positive
paritytech/parity,mocha,2017-02-11T00:13:43Z,just stumbled upon this same issue.  i have a bunch of contract tests using mocha which submit multiple transactions in rapid succession.  i have to force it to wait 2 seconds between each tx which is frustrating.i agree with checking for pending tx's and then seal again.,negative
resin-io/resin-sdk,karma,2017-08-10T19:35:58Z,i'm ok with the idea but indeed you need to keep resin-config-karma ignored as the very least,neutral
admc/wd,selenium,2014-09-15T03:19:17Z,fix/add package.json keywords for discoverability. might help others find this project quicker. for a long time i thought the only two options were selenium-webdriver and webdriverio.,neutral
admc/wd,sauce,2013-05-24T08:17:55Z,new sauce widget with browser matrix. showing what browsers were used to run a test with status,neutral
needim/noty,standard,2017-07-11T21:48:20Z,yeah. but it means another network request for very small file. maybe we can separate later if we have more themes.,neutral
angular/angular-cli,uglify,2017-12-30T16:38:20Z,filipesilva. please. add this possibility to specify uglify options,positive
cssinjs/jss,codecov,2016-09-02T08:44:02Z,setup codecov. current setup of codecov.io isn't working ...,neutral
onsip/SIP.js,eslint,2018-02-20T20:46:04Z,> i am uncomfortable with the `.gitattributes` change. i think it may cause adverse side effects particularly on the release branch with minified javascript. based on my reading. it appears the correct solution is to set the attributes locally in your dev environment.i assume you mean by setting `core.autocrlf` but that is a global git configuration flag. not a per-repository one.> in terms of the copy files. can you provide some evidence that this is a generally accepted approach?i cannot. i just looked around for other people experiencing the same problems with unix specific commands and environment variable interpolation and determined what their solution was.,negative
onsip/SIP.js,eslint,2018-02-20T20:53:52Z,> i am uncomfortable with the .gitattributes change. i think it may cause adverse side effects particularly on the release branch with minified javascript.if this is something that i can assist with testing. i am more than willing.,negative
onsip/SIP.js,eslint,2018-02-22T21:19:06Z,hi seanbright.while we appreciate the effort to make this work. we are not going to take this pr. you can clone the repo with `--config core.autocrlf=input` which will fix the crlf issue. additionally. you can compile sip.js using git bash on windows without adding further dev dependencies to our repo.we looked at other (bigger) projects on github to see what they were doing in regards to these things cross platform and they are not addressing it in this matter. as far as i can tell the recommended solutions are to clone with the config flag or change your core git config. as for the cp. the recommended solutions is to use git bash.,neutral
onsip/SIP.js,eslint,2018-02-22T21:30:38Z,hey egreenmachine.was there anything done on your side to see if the `.gitattributes` change would actually have any negative impact on your release process or are you just assuming that it would?> as for the cp. the recommended solutions is to use git bash.recommended by whom?,neutral
onsip/SIP.js,eslint,2018-02-22T21:47:24Z,we did not do any testing to see if the change would have a negative impact. my assumption currently is that there would be little to no impact. but it is not something that we need to do. the issue is really outside the scope of this project.it is a generally recommended approach for getting a unix like shell on pc. similar to the crlf issue. we believe that getting `cp` to work on a system is outside the scope of this project.,negative
onsip/SIP.js,eslint,2018-02-22T22:14:28Z,i tested the `--config core.autocrlf=input` flag on clone and that seemed to do the trick. the bug about using the `cp` command instead of a webpack plugin will just have to remain outstanding.> the issue is really outside the scope of this project.i am not sure that i consider build failures on non-unixy platforms "out of scope" for a project that assembles a handful of smaller text files into one larger text file - especially considering that every component of your build toolchain supports cross platform development. we'll just have to agree to disagree.,negative
aksonov/react-native-router-flux,eslint,2017-07-07T01:30:55Z,brunsy was closed to adjust the code to pass by eslint constraints.,neutral
mostjs/core,mocha,2017-05-05T12:02:16Z,feat(witharrayvalues): add witharrayvalues and ziparrayvalues. ### summarythis adds `witharrayvalues` and `ziparrayvalues` for mapping values from an array onto a stream.  in the case of `witharrayvalues`. for each event. the stream provides the time component. and the array provides the value component.  similarly for `ziparrayvalues`. except it accepts a function to compute the value component from the array value and incoming event value.### other changes- run flow on the whole test dir.  it will only check files with `flow` at the top. which for now. is only the new `witharrayvalues-test.js`.  but. i like the idea of using unit tests also to check types.  feedback welcome    - note that to do this. i had to give flow visibility into the top-level `node_modules` folder. since lerna is hoisting common dependencies (such as `mocha` and `briancavalier/assert`) to the top level.### todo:- [ ] deprecate `fromarray` and `fromiterable`,negative
mostjs/core,mocha,2017-05-06T13:09:03Z,i really like having the tests type checked :+1:,positive
RubenVerborgh/N3.js,eslint,2017-01-07T21:12:30Z,travis hates my lack of adherence to linting - but eslint hated my code :(,negative
RubenVerborgh/N3.js,eslint,2017-01-11T17:14:47Z,i was thinking particularly about how strict mode turns some errors that are normally silent (and therefore hard to chase down) into hard-errors. i'm pretty sure i lost an hour (or more) to exactly this when i was implementing the store api extension? can't fix that without a time-machine though! ;)i suspect part of the reason you've not seen the need is that you may be more familiar with javascript than i am - another reason is that you have your eslint settings quite strict. already catching a bunch of stuff that strict mode disallows.but i notice this change caused failed builds on travis and appveyor?,negative
photonstorm/phaser,jshint,2014-07-15T11:38:57Z,thanks for your pr - you did it correctly too! right branch. jshint passed. etc. so many people do it wrong :)but i'm afraid i'm quite worried about implementing the change. the thought of generating a brand new point object _every single time_ you call `camera.position` seems incredibly inefficient to me. sorry. i like the idea. but we're going to need to find a different way to implement it.,negative
photonstorm/phaser,jshint,2014-07-15T15:23:13Z,added: .editorconfig file to help with jshint issues. added: grunt-notify to send growl/notification center notifications on jshint issues,neutral
npm/npm,standard,2015-09-11T17:15:22Z,the question i'm asking is one layer up. if i'm using node-pre-gyp. and i want the user invoking `npm install` to be able to specify the value of `--target_arch` in my package. is there a convention for doing that? or does every package invent their own convention?,negative
npm/npm,standard,2015-09-12T23:18:53Z,i don't think there's a convention for that.i think people generally advise that the consumer of your package should run `npm install` on the target architecture.in the situations where that's not possible (eg. bundling for later deployment onto devices or networkless deployments...) people do. as you suspect. have to roll their own.,neutral
npm/npm,standard,2015-09-14T18:59:53Z,ok. thanks!,positive
npm/npm,standard,2015-09-19T04:10:42Z,why introduce another parser do to weird. non-standard command linkage using `and` instead of using json how people would expect it? and why not make it an optional thing. similar to how `repository` works? if it's a string. it's one command. if it's an array. it's multiple commands that are run in succession so long as they exit with `0`.i was actually kind of surprised npm doesn't do this by default; as discussed in sindresorhus/xo-init#6. `&&` has its downfalls. further. being dogmatic about it. while realistically `&&` is pretty reliable. it shouldn't be expected to work on every platform. always.as stated in the aforementioned issue. manipulating the `package.json` data automatically now becomes a hassle because we have to _guess_ (never good) the format of the command string; does it contain a `;` at the end? does it already have some weird postfix operator that will cause unintended side-effects with `&&`?it's a hack at best. and bad design at worst. in my opinion. array scripts should be _possible_. maybe unnecessary a lot of the time. but for those who wish to be 100% compatible. the option should still be there - without some weird. intermediate language - the json way.,negative
npm/npm,standard,2015-10-07T22:49:03Z,refactor all the code dealing with module/package names. the recent change to `read-package-tree` to set `package.name` if it wasn't already set had broader fallout than i'd originally realized. this pr includes a refactoring of all of the places unguarded uses of `package.name` existed to use a set of standardized and tested functions.,negative
npm/npm,standard,2015-10-08T00:09:39Z,:sheep:,neutral
mishoo/UglifyJS2,uglify,2013-08-20T09:26:01Z,(function(){ }())  converted to  !function(){ }(). a some module has a dependency dot.jsafter successive execution of commands browserify and uglifyjs this module does not work in firefox browser onlythis line of the dot.js```(function(){ return this || (0.eval)('this'); }()).dot = dot```was transformed to```!function() {this ||(0.eval)("this")}().dot=dot```(i will give all files to reproduce if need),neutral
mishoo/UglifyJS2,uglify,2013-08-20T09:39:27Z,bummer.  i'll look into a fix. for now the workaround is to pass `negate_iife=false` to the code generator. you can do like this:``` shuglifyjs file.js ... -cmb beautify=false.negate_iife=false```,positive
mishoo/UglifyJS2,uglify,2013-09-05T11:44:26Z,old npm package uglify-js2 causing confusion. this github repo is called uglifyjs2 and there is an old package on npm called uglify-js2 causing confusion.i see in the package.json its been renamed back to uglify-jsperhaps the old uglify-js2 npm package should be deleted?,neutral
testem/testem,mocha,2013-05-22T23:26:15Z,i ran into a similar problem adding parallelism to mocha.  to prevent interleaved reporting. i had to buffer reporting events and replay them ( visionmedia/mocha#849 ).  i also had to run each parallel suite in a domain to make sure uncaught errors were handled by the proper suite.,neutral
testem/testem,sauce,2016-02-22T09:04:46Z,i really like the array of test pages idea :+1:the `parallel` setting currently allows you to control your launchers like the following:- `-1`: all launchers are run in parallel- `x < launchers`: launcher runs are pooled and will never exceed `x`. this is important for platforms like saucelabs were you are only allowed to run a limited number of jobs in parallel.- `x > launchers`: just runs everything in paralleli think cleanest way would be to implement running an array of test pages with your defined launchers respecting the defined parallel setting. wdyt?,positive
testem/testem,sauce,2016-03-09T18:15:10Z,sorry to revive a dead thread. but did anyone find a solution for this?i tried to integrate with sauce labs and bamboo and noticed that the tests failed to start. then i started a manual test into the tunnel and visited :7357 and they started running.,neutral
testem/testem,jshint,2016-02-17T21:33:51Z,update: force-pushed a change fixing a jshint error,neutral
testem/testem,jshint,2016-03-01T15:58:51Z,bantic it might be good if i clarify that i am breaking jshint rules on purpuse to produce a failed test.,negative
DevExpress/testcafe,mocha,2017-03-16T13:25:48Z,inikulin no. i meant to stop the tests once the first break. exactly like mocha --bail,positive
DevExpress/testcafe,mocha,2017-03-16T13:35:21Z,darlanmendonca oh. my bad. `mocha -- bail` fails whole task once there is an error in the test. i guess we can implement it. can you issue separate feature request. please?,negative
DevExpress/testcafe,mocha,2017-03-16T13:41:37Z,stop test task on first failed test (`--bail`). ### are you requesting a feature or reporting a bug?feature### what is the current behavior?when a test fail. the process continues. will be good if have a option to stop to dont have an avalanche of test errors. just the first in focus (reference `mocha --bail`)### what is the expected behavior?fails whole task once there is an error in the test. like `mocha --bail`,negative
DevExpress/testcafe,sauce,2016-01-18T16:03:57Z,fyi: guys. now the tests are failed because of  `saucelabs environment error`. this is an error not on our side. saucelabs often can't run osx virtual machines for some reason (i don't know why). we with georgiy-abbasov are working on improving `qunit-harness` to stable this,negative
DevExpress/testcafe,sauce,2016-01-22T11:51:59Z,fpr(it's seems we've stabilized saucelabs virtual machines running),neutral
mochajs/mocha,mocha,2013-05-07T19:31:18Z,it's just a shell script in .git/hooks. with anything you want in it. i don't have the mocha one on this machine,neutral
mochajs/mocha,mocha,2013-05-07T19:50:58Z,thanks for the quick reply. indeed. hooks are just some scripts in `.git/hooks`. however. when i clone this repo. `.git/hooks` only contains some sample hooks. maybe you could add them to this repo?,positive
mochajs/mocha,mocha,2013-05-08T20:01:35Z,hello. i'm the maintainer of grunt-simple-mocha. i'd also like a way to do this via the api.- it seems inconsistent that mocha would allow you to `require` via the cli but not the programmatic interface.- mocha already has such a convenient place to hook into the test runner.- it feels like a hack to put it in the grunt plugin since the required file gets used _within_ the tests.thanks for maintaining mocha and your other work.,negative
mochajs/mocha,mocha,2013-05-09T10:29:37Z,may i use mocha in this way `mocha --compilers coffee:"coffee-script --map"` to support source map?,negative
mochajs/mocha,mocha,2013-05-10T07:38:33Z,--require option does not work for absolute path value. there is a bug in "\node_modules\mocha\bin_mocha" file. program.on('require'. function(mod){..}); . line 150 - "if (abs) mod = join(cwd. mod);"it should be if (!abs) mod = join(cwd. mod);,neutral
mochajs/mocha,mocha,2013-05-10T22:40:08Z,windows has some form of globbing no? i don't really want to butcher mocha just to support posix stuff on windows. there's no end to how many things break on windows,neutral
mochajs/mocha,mocha,2013-05-16T15:57:27Z,some rules in mocha.css seem too broad.. restricting css rules to the mocha container as necessary. should minimize interference with external styles,neutral
mochajs/mocha,mocha,2013-05-16T16:13:47Z,thanks man.,positive
mochajs/mocha,mocha,2013-05-17T08:15:31Z,adds ability to load external interfaces. this adds support for loading additional interfaces with the `--ui` option. similar to how the `--reporter` option works.after this commit. you should be able use an alternate interface like this:`npm install somemochaui``mocha --ui somemochaui path/to/a/mochatest.js`,neutral
mochajs/mocha,mocha,2013-05-17T23:40:17Z,you are right. this is an oversight on my part -- it didn't show up in my testing.  this can be solved by using domains. but then mocha will not run properly in the browser.   my fork of mocha would be node-only. or require explicit passing of the error to done().,negative
mochajs/mocha,mocha,2013-05-17T23:50:29Z,also just ran into an issue where mocha no longer exits with a non zero on test failure. seems to be related to nested runners but haven't dug very deep just yet.,neutral
mochajs/mocha,mocha,2013-05-18T22:10:08Z,support node's --debug-brk=1234 syntax to have debugger listen on specif.... ...ic porti like to use a range of ports for each project so i can switch between projects at will without worrying about port conflicts. this is supported by node but was not supported by the mocha wrapper.,neutral
mochajs/mocha,mocha,2013-05-22T03:15:33Z,sorry :( i dont want to go down that road with mocha. "expresso" was fully parallel before and it causes nothing but issues. and in many cases it's not any faster. in most of my experience it usually results in slower tests (depending on case of course) due to thrashing of various kinds. consistency and predictability is definitely preferred here over slight performance gains. some people might be interested in a fork though i'm not sure,negative
mochajs/mocha,mocha,2013-05-22T03:53:47Z,that wouldn't be right either. but i change it to use path.resolve,neutral
mochajs/mocha,mocha,2013-05-22T04:07:05Z,arg haha watchers are nothing but trouble. every lib shouldn't be re-inventing / maintaining this sort of thing. i'd propose we get rid of --watch all together and someone writes a proper command-line tool to replace all watchers for all of these tools,positive
mochajs/mocha,mocha,2013-05-22T07:45:36Z,well. despite my writing this pull request. i pretty much agree with you. could be that guard or watchr are good enough for this case. in which case maybe the best thing really _is_ to remove it and add an alternative to the readme.,positive
mochajs/mocha,mocha,2013-05-22T12:45:54Z,i'm having this problem too. wenn i try to start a mocha test in the browser that uses web worker. i get the following error:"error: an attempt was made to break through the security policy of the user agent."this same test works flawlessly in qunit. thanks,negative
mochajs/mocha,mocha,2013-05-22T12:50:33Z,visionmedia i can rebase the pull request. if you'd take a look at it afterwards. sinon.js accepted my web workers pr. and i'd really like to get it in mocha as well. so i can use it in dropbox.js.thanks so much!,positive
mochajs/mocha,mocha,2013-05-22T17:02:26Z,quite a bit to review. might be a while sorry. in general i'm not a huge fan of making big sweeping changes for such a small use-case. personally i'd test the web workers as a black box since it's the messaging that really matters,negative
mochajs/mocha,mocha,2013-05-22T18:54:24Z,+1 here. different enough environment that it needs to be tested individually.,neutral
mochajs/mocha,mocha,2013-05-22T19:13:37Z,why does the test runner need to be executed in the web worker? if your idea is to test code that runs in web workers. you can do message passing?,neutral
mochajs/mocha,mocha,2013-05-22T19:16:09Z,closing unless there's a compelling reason to run mocha itself in the workers. it should be fine to test associated components outside of a web worker and then add some acceptance tests for the messages themselves,neutral
mochajs/mocha,mocha,2013-05-22T20:14:27Z,sorry for the late response. i dont want mocha to run inside a web worker. but rather have the tests be able to start worker threads. my code could be tested without workers. but since i do alot of multithreading it would decrease the code coverage quite a bit.,negative
mochajs/mocha,mocha,2013-05-23T03:32:14Z,going to close sorry. i don't have the capacity to maintain so many features for now. i'd like to keep mocha pretty simple and more abstract,negative
mochajs/mocha,mocha,2013-05-23T03:33:11Z,closing for now. i'd prefer to have ~/mocha.opts over env vars at least,neutral
mochajs/mocha,mocha,2013-05-23T03:37:34Z,too obscure,neutral
mochajs/mocha,mocha,2013-05-23T16:43:54Z,can we brainstorm a bit about how we can round out mocha's code coverage tools to do suppression of blocks that do not require testing in a way that fits with your vision for the project? because honestly. i'm building large-scale backends with a team. and i'm finding code coverage tests to be a great way to ensure consistent quality. like you. i think 100% coverage is a fallacy and do not wish to waste anyone's time testing cases that just don't need test coverage. but as it stands. without code suppression. our coverage reports would have decreasing value as the size of the source tree increases.,negative
mochajs/mocha,mocha,2013-05-28T10:15:50Z,add a way to hint implementation-files to --watch. currently. `--watch` only re-runs your tests when _the test files themselves_ change. obviously. that's somewhat less than ideal.i'd love to see `--watch` take an optional _argument_. that being a glob of files or directories (other than the tests. which are already listed at the command-line) to subscribe to changes for.example:```mocha --watch source/ --reporter dot --watch test/*.js```,negative
mochajs/mocha,mocha,2013-05-28T23:43:01Z,fyi. i am finding that domains are not adequate to handle all asynchronous errors.  see joyent/node#3908it's frustrating. because i cannot create a simple test case that reproduces the error i get when running a complicated suite.  all the node core methods are fairly fastidious about binding their callbacks to the current domain.  i'm going to investigate using separate processes. but in the meantime. parallelism is better achieved outside of mocha itself.,negative
mochajs/mocha,mocha,2013-05-30T22:10:49Z,cool! feel free to add a link in the mocha wiki,positive
mochajs/mocha,mocha,2013-05-31T02:34:34Z,you'll need to at least re merge this change.  also. with this change. if i ran `make` wouldn't the calls to `mocha` end up searching the path instead of finding the one in the local project's `bin/`?,neutral
mochajs/mocha,mocha,2013-05-31T17:16:45Z,visionmedia  said: > i'm all down for failure tests but i'd definitely prefer to use node so we have some more flexibility with the assertions.hmm... the problem is that we need to cover cases where there are uncaught exceptions.   i guess i can go back to and write this in javascript. but really we don't want that - we want to know what happens when we call mocha from the command line.,negative
mochajs/mocha,mocha,2013-06-05T19:13:27Z,the grunt-mocha-phantom was built on top of a hack. my vote is we expose using mocha.process.,negative
casperjs/casperjs,eslint,2015-07-23T17:51:43Z,ping paazmaya i don't know why but eslint configuration is totaly broken. can you help me ?,negative
karma-runner/karma-sauce-launcher,sauce,2014-06-19T09:46:29Z,+1 i keep hitting it randomly (mostly with android browsers). chriswren vojtajina is there any documentation anywhere on the format of the data we can get back with the error? if not maybe we should print out the message _and_ dump the whole error object as well?,neutral
karma-runner/karma-sauce-launcher,sauce,2014-06-27T10:59:39Z,i can see a lot of those failures as well when running tests in batches of > 3-4 browsers. due to this i was obliged to split my build into several steps. not a big deal but not ideal either. while i agree that we could limit the number of browser tests started by karma (i'm still not familiar with karma internals enough to say how much effort it would involve) maybe there are some parts that we could try to "fix" in the launcher / sauce itself? i must say that i've spent already substantial amount of time trying to track-down those issues. fiddled with timeouts etc. but with limited luck so far....  i would be willing to devote some more time to understanding / fixing those issues if someone could give me a hand with some aspect of saucelabs working.  chriswren could we somehow co-operate on this topic? i think that having good karma + sauce integration would be beneficial for the whole js community.,negative
karma-runner/karma-sauce-launcher,sauce,2014-06-29T12:20:26Z,chriswren since i haven't had any input regarding the format of sauce errors and there is not much discussion going on in this pr i've decided to push an alternative implementation via 9aed48396967fff819a45c124922b7248a97b65d. i wanted to play it "on the safe side" so we don't loose debugging info.,negative
karma-runner/karma-sauce-launcher,sauce,2014-06-29T17:05:41Z,awesome. great work!,positive
karma-runner/karma-sauce-launcher,sauce,2014-07-05T10:56:08Z,chriswren do we need to keep the sauce key encrypted for travis-ci? the problem is that secure vars are not evaluated for prs (and rightly so!) and thus all the tests on prs will be failing...caitp i'm looking into various issues connected with sauce luncher and was wondering if there was any particular bug / suspect that trigger this pr?,negative
karma-runner/karma-sauce-launcher,karma,2014-07-07T05:38:32Z,the sauce launcher gets called for every browser configured in the `customlaunchers` object so we don't have an easy way to manage concurrency externally without modifying karma's code. i guess we could have some internal system registering requested browsers and then hit the sauce concurrency rest api and see if there is available concurrency to run the test. then when the concurrency is maxed out and a session completes we can start another browser.,neutral
jantimon/html-webpack-plugin,standard,2016-04-24T10:02:35Z,jantimon dns-prefetch allows the pre resolution of resources. in this case. stylesheets. in terms of the article you sent. for which. i didn't read all of it. i try to follow standards and implement changes that have support for more than just one browser. it's entirely up to you to implement my change. i appreciate your feedback though.,positive
jantimon/html-webpack-plugin,standard,2016-04-25T09:29:56Z,to be fair.  and notwithstanding the implementation. this pr does not follow the coding standards of the project and has no additional tests for the added functionality.  these should at least be addressed before getting onto the conceptual stuff of what `prefetch` is about.,neutral
jantimon/html-webpack-plugin,standard,2016-04-26T10:45:28Z,semistandard - to test on your machine that you are compliant run `npm test`have you alread done some tests on the change?,neutral
jantimon/html-webpack-plugin,standard,2016-04-29T22:58:37Z,i recognize that this is probably non-standard. i really appreciate your help!,positive
philschatz/octokit.js,mocha,2014-03-27T19:03:52Z,heh. with `grunt test --verbose --force` i end up with```running "mochatest:test" (mochatest) taskverifying property mochatest.test exists in config...okfiles: test/node.coffeeoptions: reporter="spec". require="coffee-script">> mocha exploded!>> error: cannot find module 'underscore'```,negative
chentsulin/electron-react-boilerplate,standard,2017-07-19T11:01:24Z,implement api call (fetch). hi. first and foremost.thanks for the great work!i was trying to have some actions that run asynchronous api call. in react standard project i would use fetch. unfortunately. i was not able to do something similar with this boilerplate.did anyone had any luck in implementing either a fetch node library. or any other solution with this boilerplate? (especially the packaging seems to be really tricky. as well as having those libraries being invoked in actions and not on the main thread).,negative
chentsulin/electron-react-boilerplate,standard,2017-07-19T11:25:40Z,thank you kelion for the prompt answer.to rephrase my question.if i want to have an async call to an http resource in a react action in this boilerplate. how can i do it?,neutral
chentsulin/electron-react-boilerplate,standard,2017-07-23T17:58:27Z,turn out fetch did work. just need to close the react hot reloader server and restart it.,neutral
chentsulin/electron-react-boilerplate,uglify,2018-04-10T22:14:37Z,including html scripts in the boilerplate's html is an antipattern. you should try to import scripts from your app itself. for example. you should try importing the script from `./app/index.js`. this allows you to reap the benefits of optimization from webpack. uglify. etc.,neutral
AnalyticalGraphicsInc/cesium,eslint,2018-02-21T06:50:12Z,fixed eslint errors. updated changes and contributors,negative
AnalyticalGraphicsInc/cesium,eslint,2018-03-05T02:27:39Z,enable eslint `no-multiple-empty-lines`. also use eslint to auto-fix them.hpinkos this will probably cut out half your pr review comments :smile:,positive
AnalyticalGraphicsInc/cesium,eslint,2018-03-05T16:27:38Z,thanks mramato!,positive
GoogleCloudPlatform/nodejs-docs-samples,standard,2016-08-18T20:22:11Z,all storage samples are now up to standard.. - [x] - all samples use `yargs` for cli- [x] - all samples follow sample template pattern- [x] - all tests follow same conventions,positive
GoogleCloudPlatform/nodejs-docs-samples,standard,2016-08-19T01:56:50Z,there is a reason. i accidentally committed `.only` in one of the tests. removing it. will merge once tests pass.,negative
GoogleCloudPlatform/nodejs-docs-samples,standard,2016-08-19T22:21:02Z,bring logging samples up to standard.. fixes #175 - [x] - sinks- [x] - logs,neutral
GoogleCloudPlatform/nodejs-docs-samples,standard,2016-08-19T23:57:49Z,ace-n ready for review. when you have a moment.,neutral
GoogleCloudPlatform/nodejs-docs-samples,standard,2016-08-21T02:47:59Z,lgtm. other than my comments.,neutral
GoogleCloudPlatform/nodejs-docs-samples,standard,2016-08-21T02:56:06Z,cool. just pushed again. will merge when green.,positive
GoogleCloudPlatform/nodejs-docs-samples,standard,2016-08-21T02:56:11Z,thanks!,positive
GoogleCloudPlatform/nodejs-docs-samples,standard,2016-08-26T23:06:56Z,bring language sample up to standard.,neutral
GoogleCloudPlatform/nodejs-docs-samples,standard,2016-08-27T00:28:05Z,lgtm. aside from my comments.,neutral
GoogleCloudPlatform/nodejs-docs-samples,standard,2016-08-28T00:36:11Z,dpebot merge when green.,neutral
GoogleCloudPlatform/nodejs-docs-samples,standard,2016-08-28T00:36:12Z,okay! i'll merge when all statuses are green.,neutral
GoogleCloudPlatform/nodejs-docs-samples,standard,2016-09-01T19:55:20Z,jmdobry if you want. i'll go ahead and upgrade this to the new "simpler samples" standard.if not. we can review this as-is and take care of that via a future pr.,neutral
GoogleCloudPlatform/nodejs-docs-samples,standard,2016-09-06T22:38:39Z,simplify bigquery samples according to our standard.,neutral
GoogleCloudPlatform/nodejs-docs-samples,standard,2016-09-07T21:57:40Z,lgtm. but i think there's some app engine dependency issue going on...,neutral
mafintosh/hyperdb,standard,2018-03-21T20:24:08Z,forgot to `standard`!,neutral
bustle/mobiledoc-kit,sauce,2016-07-05T19:37:04Z,use selection polling to update editor.range. selectionchangeobserver maintains a singleton instance that polls thewindow using `requestanimationframe` for changes to the selection.editors' eventmanager instances use a selectionmanager to listen for`selectionchanged` events. and update the editor's `range` if necessary.removes code that would use some keyup events (when `key.ismovement()`)and `mouseup` events to detect when the range could have changed.the range-detection code was previously spread out over `eventmanager`.`editor`. `cursor` and `editstate`. this code change consolidates mostof the responsibility for knowing/reading/updating the editor's `range`o its `editstate` instance. the editor now delegates `range` to the editstate instance. and the edit state instance is responsible for knowingwhen the editor's inputmode or range has changed.some tests assumed selection changes would be picked up synchronously;for those tests a `helpers.wait` helper is added that schedules acallback with `requestanimationframe`.also:- use "hidepassed" for sauce tests to improve test failure debuggingfixes #408 fixes #383 related #369 related #302,negative
avajs/ava,coveralls,2016-01-18T22:06:15Z,jamestalmage as for me. i also prefer having only nyc && ava in npm test. i generate lcov and pipe it to coveralls right away. the same stuff as in ava's config. it looks clean and simple.,neutral
Modernizr/Modernizr,sauce,2014-03-19T15:15:25Z,about ios. we have done some configuration changes for ios. can you re-try now?,neutral
Modernizr/Modernizr,sauce,2014-03-20T10:46:58Z,dhimil i tried the ipad running ios7 as well as the iphone and it had the same problem. watching the live session safari was never launched and it is sitting on the home screen until the session timesout.,neutral
Modernizr/Modernizr,sauce,2014-03-25T23:33:25Z,dhimil seems it was an issue with me running it as a local module. installed your branch globally and it launched fine uninstalled and globally installed the latest npm release and worked fine too.,positive
alfa-laboratory/arui-presets,eslint,2018-02-27T16:24:34Z,fix(eslint): add some rule about jsx-curly-spacing. не работали отступы eslintможно было писать так:```jsx<hello>{ firstname }</hello>;<hello>{firstname}</hello>;<hello>{  firstname}</hello>;```,neutral
react-boilerplate/react-boilerplate,eslint,2016-08-21T12:20:43Z,```npm install -g eslint-config-pedant```and change `airbnb` to `pedant` in package.json  here```  "eslintconfig": {    "parser": "babel-eslint".    "extends": "pedant".    "env": {```fix this problem.,neutral
react-boilerplate/react-boilerplate,eslint,2016-08-21T16:45:45Z,i use atom with react-boilerplate and don't have this problem.> note: if you installed eslint globally (using the -g flag) then you must also install eslint-config-pedant globally.> > a globally-installed instance of eslint can only use globally-installed eslint plugins. a locally-installed eslint can make use of both locally- and globally- installed eslint plugins.that `npm install -g eslint-config-pedant` works suggests that you have eslint installed globally. is that right? if so. you probably need to `npm uninstall -g eslint`. or `npm install -g ...` all the eslint related packages used in react-boilerplate.> may be let remove airbnb config? its config make more problem for developerswhile linting style is a matter preference. this project has standardized on airbnb and i don't see that changing. still. it's nice to have an example that shows how easy it is to change to pedant.thanks for sharing.,negative
react-boilerplate/react-boilerplate,karma,2016-08-22T20:15:15Z,i found that the issue lies in the internals/webpack/webpack.test.babel.js which utilizes 'isparta' is a code coverage tool for karma. i created a webpack.testdebug.babel.js that just doesn't include the isparta settings. and debugging karma tests in the browser should work.,negative
apache/zeppelin,selenium,2016-05-24T15:58:50Z,the build is still failing. looks like a selenium test. any ideas?,negative
apache/zeppelin,selenium,2016-05-24T17:12:09Z,hmmm. still failing with a ff selenium test,negative
apache/zeppelin,selenium,2016-06-02T09:18:59Z,ci failure is un-related```08:00:02.254 error org.apache.zeppelin.abstractzeppelinit:153 - exception in zeppelinit while testsparkinterpreterdependencyloading org.openqa.selenium.timeoutexception: timed out after 30 seconds waiting for visibility of element located by by.id: notenamemodal...    at org.apache.zeppelin.abstractzeppelinit.createnewnote(abstractzeppelinit.java:133)```arkoniak can you please make sure it's rebased on to of the latest master and then close and re-open this issue to trigger the ci again? thanks!,positive
FormidableLabs/webpack-dashboard,eslint,2017-12-24T12:50:26Z,split compile / lint messages. hello. is there possible to output webpack and eslint error messages to separate screen sections? for example eslint to problems section. webpack to log. thx,neutral
yeoman/generator,mocha,2013-06-04T23:38:25Z,mocha generator should point to the right place. link was pointing to generator testing instead of mocha testing,neutral
yeoman/generator,mocha,2013-06-05T09:05:09Z,good catch. thanks!,positive
datproject/dat,standard,2015-09-10T00:37:45Z,dun4n we use js standard style which only restricts usage of unnecessary semicolons  in the case of for vs foreach there are performance differences that sometimes necessitate usage of one over the other.in this case perf doesn't matter. so theres no functional difference between for vs foreach here. in the future we would appreciate contributions that address an open issue. you can always open a new discussion issue if you have questions about style etc.,positive
datproject/dat,standard,2015-09-10T01:08:21Z,i'm sorry to have wasted your time (btw. i didn't know standardjs.com),negative
camunda/camunda-modeler,eslint,2018-05-13T16:17:42Z,my current design idea has been: use eslint preprossor plugin to convert the bpmn file into bpmn-moodle js and the. pass that js into eslint rules.,neutral
senecajs/seneca-mysql-store,coveralls,2016-05-19T11:06:52Z,added coveralls,neutral
senecajs/seneca-mysql-store,coveralls,2016-05-19T11:46:00Z,lgtm,neutral
GoogleCloudPlatform/cloud-trace-nodejs,mocha,2017-09-07T22:45:57Z,convert the trace agent to typescript (part 1). this change adds a new `gulp`-based build system for the trace agent. and does a superficial refactor of the code to work with this new build system.i've separated this change into a few commits. each of which should be completely self-contained. i'd recommend looking at each commit separately (almost all new code is in the first commit). here's a description of what each commit does:## `build: add typescript build files`this commit adds `tsconfig.json` and `gulpfile.js`. and amends other files to reflect build system changes.i've written a new set of gulp tasks to exhaustively cover compilation. as well as all the ci functionality we had before:* unit tests (`gulp test`)* coverage reporting for unit tests (`gulp coverage`) (todo(kjin): verify this in ci)* system tests (`gulp system-test`)* linting (`gulp lint`)there are a lot of "helper" tasks -- the general rule being that `x.y` is a helper task for `x`.i also added a `test.single` task. which runs a mocha test in the same process as gulp. this should be useful for debugging.notably. there is a `--dev` flag that compilation-related tasks consume. this relaxes `tsconfig` compilation options. as files receive types in the next pr. this flag will go away.## `refactor: add convert-to-ts`adds a script as described below.## `refactor: run convert-to-ts`this commit is the result of running the `convert-to-ts` helper module. it's a purely mechanical operation which:* renames source and test files to have the `.ts` extension* removes `.js` from module requires* adds `export default {}` to the bottom of each renamed file (as `tsc` mistakes them for scripts otherwise)## `src: src changes`this commit sums up the minimum changes in `src` needed to make `gulp compile --dev` compile source files without any errors.## `test: test changes`this commit sums up the minimum changes in `test` needed to make `gulp test --dev` pass all unit tests.## `revert: remove convert-to-ts`this commit does exactly what it describes.,negative
GoogleCloudPlatform/cloud-trace-nodejs,mocha,2017-09-11T23:39:47Z,ofrobots i'm going to move all build stuff out of the `gulpfile` and into a `scripts/` directory. which will get transpiled along with `src` and `test`. `gts` works for tasks such as lint/format checking and cleaning. but there are still things i would like to see as js (ts) scripts. such as installing fixtures.on a semi-related note. `index.ts` and `config.ts` currently reside outside `src`. i'm going to move them in `src`... ofrobots matthewloring let me know if you have any objections.,negative
GoogleCloudPlatform/cloud-trace-nodejs,mocha,2017-09-13T21:19:54Z,i've added/changed some commits:`build: remove gulpfile` added`build: add new build scripts` added (build scripts in ts)`test: test changes` changed (to make `npm run compile` pass without errors)googlecloudplatform/node-team ptal,negative
rwjblue/ember-lifeline,eslint,2018-04-16T16:22:06Z,set is a good improvement. i prefer using this.mytask rather than “mytask” as eslint will find typos. could an eslint rule be added to prohibit anonymous functions in throttletask which would be the main danger here?,positive
tildeio/htmlbars,sauce,2015-03-23T19:34:11Z,updated sauce addon. bundle start / stop commandsthanks rwjblue for the suggestion.,neutral
tildeio/htmlbars,sauce,2015-03-23T19:45:58Z,thank you!,positive
TryGhost/Ignition,eslint,2017-10-04T18:23:50Z,additionally we should study the eslint plugin architecture as they have been successful with theirs.,positive
OpenZeppelin/zeppelin-solidity,coveralls,2017-08-22T01:20:26Z,removed coveralls script from package.json. - no `scripts/coveralls.sh` anymore. ✅,neutral
OpenZeppelin/zeppelin-solidity,coveralls,2017-08-22T23:46:45Z,thanks sot528!,positive
cfpb/capital-framework,uglify,2017-12-12T22:39:26Z,updates deps. ## changes- updates `gulp-qunit`. `qunit`. `sinon`. `uglifyjs-webpack-plugin`. `webpack `## testing- `npm install && npm run build && npm test && gulp test:unit`,neutral
cfpb/capital-framework,uglify,2017-12-14T15:44:39Z,update dependencies. ## changes- updates `jsdom` and `uglifyjs-webpack-plugin`## testing- `npm install && npm run build && npm test && gulp test:unit`,neutral
matrix-org/matrix-react-sdk,standard,2017-05-18T22:30:34Z,dtygel - thanks for putting this together :)  we're thinking about putting a generic postmessage interface into riot in the near future (cc rxl881). which this can form the basis of!however. it's going to be critical to future-proof the api a bit.  can i suggest that the `action` field is namespaced to `im.vector.login` and `im.vector.logout` or similar. to avoid it clashing with other possible methods we add in future?  once standardised. these would become `m.login`. `m.logout` (yes. we're considering defining a postmessage api for matrix clients as an appendix of the matrix spec(!)),negative
matrix-org/matrix-react-sdk,eslint,2017-04-25T21:04:48Z,fix user settings store. conform to eslintbut more importantly. respect defaultvalues for getlocalsetting and getsyncedsetting,positive
matrix-org/matrix-react-sdk,eslint,2017-04-29T16:48:35Z,tidy up src/components/structures/* (conform eslint). ignore (for now)exploiting travis,neutral
zurb/foundation-sites,karma,2014-02-20T23:12:57Z,hey eprothro. sorry i missed your question earlier.  grunt is used during the build process to compile the distribution. run the tests. etc.  travisci calls `grunt travis` to run the tests.  you can do the same. or you can run `grunt karma:dev` to run with some real browsers. as well.you can install everything by doing an `npm install` and `bower install`.,negative
vvo/selenium-standalone,selenium,2014-12-21T01:57:05Z,i had this same problem. solved it by adding a sleep() instruction in order to wait for the programmatically launched server to start up. every time i used the start-selenium console command i was waiting long enough.,negative
vvo/selenium-standalone,selenium,2015-01-02T05:25:51Z,rdepena i do not understand. what other url would you use to download selenium or chrome driver for example?selenium-standalone already supports setting a proxy for download (just set the proxy on your system or set env variables).,neutral
vvo/selenium-standalone,selenium,2015-01-02T10:55:00Z,callback notifying when selenium is ready to use,neutral
vvo/selenium-standalone,selenium,2015-01-02T10:57:36Z,wasnt particularly certain about whether it should maintain the var server = selenium() api as well as the callback one. i would get rid of the sync api as i always end up needing to go async at some point,neutral
nathanboktae/mocha-phantomjs,mocha,2015-10-12T16:33:20Z,nathanboktae following on from resource loading. is requirejs supported? i seem to have a problem with mocha not being initialised when running from the cli. but working fine in a browser.,negative
nathanboktae/mocha-phantomjs,mocha,2015-10-14T15:55:00Z,if the download bugs you. use `mocha-phantomjs-core` yourself directly.,neutral
nathanboktae/mocha-phantomjs,mocha,2015-10-22T23:35:13Z,see nathanboktae/mocha-phantomjs-core#9 for require.js stuff and comment there if you have questions. it should be fine though if you aren't using require.js to load mocha (but even then. you should get a different error.,positive
nathanboktae/mocha-phantomjs,mocha,2015-10-24T04:16:59Z,ah. the issue is actually nathanboktae/mocha-phantomjs-core#12. sorry about that.but do what it says and call `window.initmochaphantomjs()` before calling `mocha.setup` or other setup functions```window.initmochaphantomjs && window.initmochaphantomjs()mocha.setup('bdd') // or whatever. mocha.ui('tdd'). mocha.slow(). etc etc...```,neutral
nathanboktae/mocha-phantomjs,mocha,2015-11-01T04:02:10Z,phantomjs terminated with signal sigsegv. when i run "mocha-phantomjs -r dot /test/file.html"，it catch "phantomjs terminated with signal sigsegv". what caused this error？,neutral
mccormicka/Mockgoose,mocha,2015-07-29T10:56:37Z,aroman i just run into the same problem in the past few days. i am using jasmine for my tests. and for some tests i needed mongoose mocked while for others i needed the real thing. here is how i solved it: for the tests that i required mongoose mocked. i did the mocking in the `beforeall()`block and then i cleared the require cache for mongoose in the `afterall()` block. this way. when the next test is coming. mongoose is required again. and it's returned unmocked. like this:```describe('my_test' function() {    var mockgoose = require('mockgoose');    var mongoose;    beforeall(function() {        var mongoose = require('mongoose');        mockgoose(mongoose);    });    afterall(function() {        delete require.cache[require.resolve('mongoose')];    });    it('my first spec'. function() {        ...    });});```,negative
typicode/husky,standard,2017-04-22T07:38:25Z,why is your lint script returning 0? it will always pass in that case. you're basically throwing away the error code from standard. unless i am misunderstanding some aspect of shell scripting. which is very possible.,negative
typicode/husky,standard,2017-05-05T22:19:19Z,nevermind! i just had removed another precommit lib (`precommit-hook`) and had to remove all hooks `rm -f .git/hooks/*` and run `yarn add husky --dev --force` again. now all works fine!,positive
marionettejs/backbone.marionette,mocha,2014-09-13T18:53:14Z,is this really necessary? seems like `_.isfunction` and documentation gives you more than doing this kind of strict type checking.,negative
marionettejs/backbone.marionette,mocha,2014-09-13T20:52:03Z,yeah. i agree with thejameskyle. i don't think we need to pollute our helpers with li'l things like this. gonna close for now. thanks. though. paulovieira!,positive
marionettejs/backbone.marionette,mocha,2014-09-16T01:58:58Z,> is this really necessary? it is necessary for any property that accepts a class as the value (to have the alternative function-that-returns-a-class form). currently this happens in `collectionview` only. but would be useful for user-defined classes.for people new to backbone/marionette it is not obvious how to do this kind of verification. the previous issues where this subject has been discussed prove it. thus it makes sense to bring this into the codebase. imo.thanks anyway for considering it!,positive
auth0/lock,sauce,2016-07-19T13:32:36Z,temp split browser tests. for some reason. we can't run test for more than 3 browsers in saucelabs. we can run ie tests individually until we find a better solution. (couldn't find a way to give the zuul cmd more than one browser or an alternative .zuul.yml config file).,neutral
nteract/nteract,eslint,2016-08-16T01:38:45Z,bump eslint-plugin-jsx-a11y for peer dep,neutral
nteract/nteract,eslint,2016-08-16T03:38:32Z,woot :cactus:,neutral
nteract/nteract,eslint,2016-08-26T03:20:54Z,evergreen programming. bumped deps. added a eslintrc escape hatch for until we refactor a little bit.,neutral
nteract/nteract,eslint,2016-08-27T22:24:18Z,bump more deps. yay. came to bump spawnteract. noticed we could do with an `eslint` bump.,neutral
nteract/nteract,eslint,2016-08-28T21:48:49Z,^^ that's mostly addressing linting (function repeated. fix path to messaging. remove unused imports. put eslint config back).,neutral
jira-node/node-jira-client,eslint,2016-04-18T16:32:00Z,change from eslint-config-exchange-solutions to eslint-config-airbnb,neutral
jira-node/node-jira-client,eslint,2016-04-18T17:02:40Z,:shipit:,neutral
jira-node/node-jira-client,eslint,2016-04-28T14:28:12Z,my first question for you is. where are your unit tests?we also use editorconfig and eslint to ensure that the code is styled in a manner that is easily read and that it is consistent.  from you command line. you can run `npm run lint` to get a detailed output of any issues after running `npm install`.once you add the appropriate tests to the `/test/jira-tests.js` file (and ensure they pass with `npm run test` command). please squash your commits to one commit.  i will review this pull request again and if it's all good i will have no trouble bringing this in and getting it released for you.  my apologies. i had meant to get a contribution guide written up last week for this repo. but i haven't had the time.,negative
walmartlabs/eslint-config-walmart,eslint,2016-08-23T16:54:14Z,this project is just a set of json files and as such having large packages like eslint as a peer ep isn't a good fit. if this package were to be an actual linter or lint runner that might be a consideration.,neutral
walmartlabs/eslint-config-walmart,eslint,2016-08-24T19:00:18Z,tested using `eslint3` and works with no adjustments.,neutral
hoodiehq/hoodie,sauce,2014-03-03T11:18:05Z,looks good tho. just checking with the build to see why it's error'ing again.. probably down to saucelabs..,negative
hoodiehq/hoodie,karma,2013-10-30T12:04:30Z,testing: make coverage thingy optional. i'd like to run `node node_modules/karma/bin/karma start --no-single-run` without the coverage thingy minifying all the script files.,neutral
hoodiehq/hoodie,karma,2013-11-06T20:17:56Z,karma saucelabs. run karma build against multiple browsers on saucelabs.,neutral
vector-im/riot-web,standard,2016-11-15T11:31:19Z,elopio: that's not our standard stylesheet. are you using a custom userstyle?,neutral
vector-im/riot-web,standard,2016-11-18T09:56:10Z,ah right. actually i see the misalignment too. and the non-standard colours are probably coming from your room. will add it to the list to investigate.,neutral
vector-im/riot-web,eslint,2017-04-22T01:43:18Z,hm. by switching forward slashes for backwards slashes. doesn't this break things on unix in favour of working on windows?  or is there some voodoo happening to make it work on unix too that i'm missing?also. i'm not keen on some of the formatting changes here (or mixing them together with the functional bit of the commit) - the long lines have been deliberately broken up in places for aesthetic clarity.  (or has eslint bullied you into this?),negative
appium/appium,selenium,2014-08-19T17:00:13Z,perfect. thanks imurchie now "getcontexthandles()" returned: [native_app. webview_com.example.testecontext]but when i try to change the context "driver.context(contextname);" an exception occurs```org.openqa.selenium.webdriverexception: an unknown server-side error occurred while processing the command. (original error: did not get session redirect from chromedriver) (warning: the server did not provide any stacktrace information)```,neutral
appium/appium,selenium,2014-08-26T21:21:34Z,did you try using the built-in selenium client alert methods? fwiw. autoacceptalerts only works on ios. not android.,neutral
appium/appium,selenium,2014-09-10T06:49:15Z,how to scroll down a window in android native application using web driver command.. hi...i am trying to use java script scroll command to scroll the page while automating android mobile native application to scroll the window dowm .but i am getting error message :org.openqa.selenium.webdriverexception: not yet implemented. please help us:  you please tell me how to scroll down in android mobile native application using appium and selenium webdriver command.,negative
appium/appium,selenium,2014-09-10T14:45:44Z,appium shuts down as page load is not released. hi.i'm trying to execute test scripts on mobile chrome using appium in a hybrid selenium web driver framework. while doing so. encountered an error.some pages are not getting loaded fully during execution. this leads to following exception once after the 'newcommandtimeout' time limit it attained and appium shuts down .org.openqa.selenium.webdriverexception: an unknown server-side error occurred while processing the command. (warning: the server did not provide any stacktrace information)didn't get a new command in 180 secs. shutting down appiumplease provide solution for this.,negative
appium/appium,sauce,2014-06-24T13:42:14Z,also after testing on real device this code works fine. it only seems to be a problem when run on  a local emulator or  a saucelab's emulator,positive
jhipster/generator-jhipster,eslint,2016-07-24T20:40:24Z,fix eslint error. fix eslint error in social.state.js and social.state.ts,negative
jhipster/generator-jhipster,eslint,2016-07-24T20:41:16Z,fix eslint error. fix eslint error in social.state.js,negative
jhipster/generator-jhipster,karma,2017-04-23T17:33:02Z,and did you try what is being said. running:    npm run lint && karma start src/test/javascript/karma.conf.jsthis might be a karma test issue,neutral
jashkenas/underscore,eslint,2014-08-27T16:42:24Z,eslint is being a pain but tests pass. merging.,negative
marko-js/marko-widgets,karma,2015-04-07T04:44:57Z,karma-optimizer integration with marko-widgets,neutral
marko-js/marko-widgets,karma,2015-04-15T14:50:39Z,thanks for the pull request. pranavjha. as we discussed offline. it appears that karma is not really a good fit for _this_ project since it doesn't provide a very clean way to test pages rendered on the server. we're going to stick with mocha-phantomjs for now for this project. but i think karma-optimizer could be a great fit for testing web applications. thanks again!,positive
agda/agda-stdlib,standard,2018-03-18T17:38:37Z,what would a user of the standard library want to use them for?,neutral
agda/agda-stdlib,standard,2018-04-04T16:53:35Z,i was thinking about it for the last couple days. and i hope i got a better picture of this.i think it might not be the problem of this library (though it's indeed very nice if unsafe code can be extracted to submodules in the previously mentioned way). i do agree that it's going to be much better of. if the compiler can check the safety of every function. like matthewdaggitt suggested. one of the very important aspects of being able to do so. is to make tactics more realizable. since tactics are macros and based on yet another bunch of postulates. there is no way if a program is written by tactics and can be safe. however. the program built by tactics itself can be entirely safe; while on the other hand. one can indeed embed unsafe code via tactics as well.from that aspect. i believe adding such functionalities to the compiler will help largely to eliminate boring mechanical programming in agda. and that also means that it's more on what the compiler does. instead of what this particular library looks like.,positive
agda/agda-stdlib,standard,2018-04-05T08:49:46Z,> as per gallais' suggestion i generalized the if-dec-{true.false} lemmas and called them diag and antidiag respectively. since they now don't mention fin. i've moved them to relation.nullary.decidable. as it turns out. they're pretty similar to the fromwitness family of functions that is already there. but it would be enough hassle to make use of those that i think it's still worth including my new definitions.you probably won't need any of these proofs if you use patten matching directly in the definition of `swap`:``` agdaswap : ∀ {n} → fin n → fin n → fin n → fin nswap i j k with k ≟ i... | yes _ = j... | no  _ with k ≟ j...   | yes _ = i...   | no  _ = k```this form is much more in keeping with the style of the standard library as it preserves type information (the library tries to avoid `bool` where possible as it requires all sorts of the lemmas like `diag` and `antidiag` to recover the type information),negative
agda/agda-stdlib,standard,2018-04-11T12:46:26Z,agreed. these would be useful. i agree with the mailing list and jacquescarette though. they should be called `icong` and `icong₂`. drphil feel free to open a pull request. for when you do. just a friendly note that the standard library puts arrows at the end rather than the start of lines.,positive
agda/agda-stdlib,standard,2018-04-12T14:46:32Z,`--safe` + `--ignore-interfaces` is pretty reliable,positive
agda/agda-stdlib,standard,2018-04-12T15:08:16Z,on thu. apr 12. 2018 at 07:46:35am -0700. g. allais wrote:> `--safe` + `--ignore-interfaces` is pretty reliableexcept that it cannot be resumed easily if there is a crashbefore completion(most likely due to starting agda with insufficient heap space. which will in turn quite likely be due to hardware constraints...).admittadly. this should not be a problem for the standard library.but in general. removing all .agdai files is safer.,negative
agda/agda-stdlib,standard,2018-04-13T09:18:15Z,> i'm rapidly coming to the opinion that the `--safe` option currently doesn't provide anything much in the way of guarantees (either in-file or at the command line)the `--safe` feature was originally implemented by someone who is no longer contributing to agda. and it seems as if no regular developer is eager to maintain it. fixing the documented bugs related to `--safe` requires some work. but i think it should be doable for someone who is not intimately familiar with the internals of agda. contributions are welcome.,positive
agda/agda-stdlib,standard,2018-04-13T10:54:19Z,> there's also the question of using list-style foldr and foldl rather than the vec-style onesas in you think we should the vec-style ones as well? i've also been thinking of standardising the `folds`. i'll open an issue to discuss it.,neutral
agda/agda-stdlib,standard,2018-04-13T11:24:47Z,>>i'm rapidly coming to the opinion that the --safe option currently doesn't provide anything much in the way of guarantees (either in-file or at the command line)>> fixing the documented bugs related to --safe requires some work. but i think it should be doable for someone who is not intimately familiar with the internals of agda. contributions are welcome.while i would love to. i feel i already spend far too much of my time of my phd on internet routing protocols playing around with agda! sorry. i realise that my original comment perhaps came off as a complaint. it wasn't meant to be.,positive
agda/agda-stdlib,standard,2018-04-14T23:33:48Z,> disadvantages: performance gets even worse.i am astonished by the performance part. might i ask how important performance is. and how many people are relying on it? sorry about my ignorance...what about irrelevance? i've not seen the description in official doc. but from my understanding. this should be the secrete magic to tame the tradeoff between complex proof flow and performance. is it not?,negative
webdriverio/wdio-allure-reporter,mocha,2016-09-26T03:54:17Z,just-boris it is not just cucumber. i face same the issue which is reported above in mocha framework also,neutral
webdriverio/wdio-allure-reporter,mocha,2016-09-26T08:38:56Z,anarwal that's true.so. if you have example. how to reproduce this issue using mocha framework. welcome to #29 that issue will be focused on fixing integration with mocha.,neutral
linkeddata/rdflib.js,mocha,2017-04-07T16:28:22Z,this should do ```{  "extends": "standard".  "env": {    "mocha": true  }.  "globals": {    "tabulator": true.    "components": true  }.  "rules": {    "array-bracket-spacing": [      "error".      "always"    ].    "camelcase": "off".    "no-unused-vars": "warn"  }}```,neutral
linkeddata/rdflib.js,mocha,2017-04-07T16:52:35Z,the mocha env part and the warnings about the globals are handled in the standard: globals section of `package.json`.in the case of `testhelper.kb.statementsmatching(undefined. undefined. lit).should.not.be.undefined` considered unused -- which part of it does it complain about being unused? we're widely using chai with standard across most our libs. and hasn't been a problem. to enforcing array spacing. or silencing unused warnings.,neutral
jshint/jshint,jshint,2013-04-16T22:13:17Z,jshint crashes on `return throw new error()`. obviously `return throw new error()` is an illegal js statement. however. jshint fails to pick up on it. and fails to check the file as a result.to reproduce. simply run jshint against this file:```var func = function(){    return throw new error();}```,negative
jshint/jshint,jshint,2013-04-16T22:58:30Z,thanks niggler. and sorry. i still don't like tabs and tend to forget to set them up when editing jshint :-),positive
jshint/jshint,jshint,2013-04-17T18:12:43Z,there's already `jshint --verbose` that shows warning codes. could you re-do this pr for jslint_xml reporter only. please?,positive
jshint/jshint,jshint,2013-04-18T21:26:16Z,any chance of a release including this?,neutral
jshint/jshint,jshint,2013-04-24T16:43:20Z,here's a smaller test case:``` js/* jshint devel:false */console.log("foo");```when putting that in `a.js`. executing `./jshint a.js` unexpectedly does not result in an error.,negative
jshint/jshint,jshint,2013-04-24T18:06:55Z,...and the reason was that i had a `.jshintrc` higher up in the hierarchy which included `"node": true`.,neutral
jshint/jshint,jshint,2013-04-24T20:02:40Z,have you tried linting individual files? it's quite possible there's a particular file which jshint has trouble dealing with.,neutral
jshint/jshint,jshint,2013-04-24T22:52:02Z,not really for your issue. we're always open to documentation patches (see jshint/site repo)!,neutral
jshint/jshint,jshint,2013-04-25T16:46:50Z,can you give a bit more context about this bug?- try to pinpoint what line(s) of code makes it blow- give your `.jshintrc` configuration as well as `/* jshint: */` directives you may not include with your codeto fix a bug. we need enough context to be able to reproduce it and confirm it,negative
jshint/jshint,jshint,2013-04-26T19:13:14Z,indent:false triggers indent. .jshintrc:``` json{  "indent": false}```demo.js:``` javascriptfunction test() { sup();```running jshint against these fails will trigger an indentation warning which doesn't make sense since indent is set to false.,negative
jshint/jshint,jshint,2013-04-27T20:18:35Z,indent: true option for uniform input. it'd be nice to be able to specify `/* jshint indent: true */`and have jshint check that the file is indentented consistently.but without having to specify how many tabs/spaces you're using.,positive
jshint/jshint,jshint,2013-04-29T03:52:38Z,not a bad idea but this should be a thread on jshint mailing list. not a ticket. i prefer tickets to be immediately actionable.,negative
jshint/jshint,jshint,2013-04-30T14:03:02Z,ignore ...min.js files by default. i'd prefer that my results aren't polluted by files like `jquery-x.y.z.min.js` and `backbone-min.js`. so i've put this in my `.jshintignore`:```*.min.js*-min.js*/*.min.js*/*-min.js```could we ignore such files be default?,negative
jshint/jshint,jshint,2013-04-30T16:52:38Z,jshint searches for `.jshintignore` all the way up the tree until it hits the root. so if your files are under your home directory it should work fine.,positive
jshint/jshint,jshint,2013-04-30T16:53:47Z,i'd rather not enforce these restrictions. if someone happen to have a legitimate file that ends with `[-.]min.js` then we will have to implement unignore which complicates things even further.,negative
jshint/jshint,jshint,2013-04-30T17:31:50Z,ah. my syntax was slightly off. i needed to set my `~/.jshintignore` to:```node_modules*.min.js*-min.js*/*.min.js*/*-min.js```,negative
jshint/jshint,jshint,2013-05-01T16:52:35Z,how to ignore .min.js and -min.js files in all subdirectories?. i can eliminate a specific folder's minified js from jshint results by putting `<folder>/*[.-]min.js` in my project's `.jshintignore`. how can i eliminate all minified js from jshint results. no matter which subfolder or how deeply nested? i tried `*[.-]min.js`. `*/*[.-]min.js`. and `**[.-]min.js`. all without success.,negative
jshint/jshint,jshint,2013-05-01T17:02:14Z,since the matching is based on minimatch. i think it would be `**/*-min.js`,neutral
jshint/jshint,jshint,2013-05-01T17:15:37Z,nschonni works for me!,neutral
jshint/jshint,jshint,2013-05-01T17:22:53Z,feature: merge. don't overwrite. jshintignore rules up to top directory. i keep some general rules like `node_modules` in my `~/.jshintignore`. but these are overwritten by any project-local `.jshintignores`. could we change the behavior to merge rather than overwrite these rules?,neutral
jshint/jshint,jshint,2013-05-03T02:56:17Z,i don't know if this is older than this functionality. but i was just looking at the source. and the docs for jslint. and this could do the trick as well```/*jshint -w027*/```,negative
jshint/jshint,jshint,2013-05-03T02:58:13Z,the documentation says that sytax turns off those warnings everywhere. so i'm not sure if function scope works with those. also i would like to note another use case for this is the use of a preprocessor. it would be nice to be able to lint before and after preprocessing if you take the time to set jshint options. so far i'm going to try the approach i just mentioned.**update:** it is function scoped.,neutral
jshint/jshint,jshint,2013-05-03T17:30:15Z,okay. thanks jeff. :+1:,positive
jshint/jshint,jshint,2013-05-03T17:38:08Z,i think this is not the case on the newest jshint. but actually letting the reporter exit would allow them to be async.,neutral
jshint/jshint,jshint,2013-05-04T15:02:40Z,i basically added a bandaid patch to my patch. it works for more cases. but not all cases. the bigger issue is that scope-handling in jshint is split among at least two different systems. once that is unified. a lot of scope-related bugs will be a lot simpler to fix. and more robustly.---main point; this patch is better done after scope is unified. does closing and re-opening github pulls work currently? i'm seeing conflicting information on the net. so keeping it open for now.in the meantime. please ignore this pull until its next update.,negative
jshint/jshint,jshint,2013-05-05T23:36:21Z,make `jshint` behave like `jshint .`. `jshint` by itself is often misleading. printing no errors. can we make it behave by default like `jshint .` ?,negative
jshint/jshint,jshint,2013-05-05T23:37:45Z,no. jshint is not jslint. it used to be two years ago but not anymore.,neutral
jshint/jshint,jshint,2013-05-06T02:18:38Z,could you please be more specific as to why this should not be the default behavior?,neutral
jshint/jshint,jshint,2013-05-06T21:31:43Z,just about to send a pull request. but as a workaround in the meantime. you can just use `/*jshint opt: val*/` in your `~/.jshintrc`. as you can see. it's not a real `.jshintrc` file. i fell into the same trap when i first tried out `jshint.vim` today.,negative
jshint/jshint,jshint,2013-05-06T22:27:49Z,i believe that it's not clear which of strategies 2 and 3 will end up being the smaller change. since there is a lot of code in jshint that depends on the original system with `"(context)"` and so on. the only way to be sure is to do a rough implementation of each.---> and btw. a close request being nothing more than a special case of issue in github. i see no reason why you can't close and reopen it.in that case. i'll go ahead and close this pull temporarily until the scope issue is resolved.i'll open up another issue to handle the scope discussion.,negative
jshint/jshint,jshint,2013-05-06T22:43:23Z,i understand that jshint has diverged significantly from jslint. what i'm asking is. apart from jslint history. _why_ is making `jshint` with no options behave like `jshint .` less than an enhancement that makes jshint more intutive?,negative
jshint/jshint,jshint,2013-05-07T15:25:10Z,jshinting client-side code: 'window' is not defined. in web browsers. `window` is an automatically defined. global scope variable. how can we inform jshint that specific code files are designed for client side code? i think some syntax for `.jshintrc` would be good for this.,neutral
jshint/jshint,jshint,2013-05-07T15:25:42Z,antonkovalyov there was no mention of jslint in this issue until you mentioned it - maybe you misread something?,neutral
jshint/jshint,jshint,2013-05-07T15:49:38Z,> no. jshint is not jslint. it used to be two years ago but not anymore.--antonkovalyovcan someone please explain in terms _other than jslint_ why this enhancement would be anything other than a good idea?,neutral
jshint/jshint,jshint,2013-05-07T16:34:44Z,nschonni thanks!,positive
jshint/jshint,jshint,2013-05-07T16:55:50Z,ah yeah my mistake. for some reason i read it as `jshint` acting as `jslint .` oooops. as for the original suggestions. its not a very unix-ey way i think but i can be convinced otherwise.,negative
jshint/jshint,jshint,2013-05-07T17:39:29Z,antonkovalyov no worries :)when jshint is invoked by itself (`jshint`). it returns with no output. this behavior for `jshint .` indicates that no warnings were found in the code scanned. i think that a lot of people would instictively call `jshint` by itself. forgetting to give it arguments. and mistakenly believe their code to be passing.so i think we should either consider making `jshint` behave like `jshint .` by default. or make `jshint` print its usage statement as if it were called with `-h`.,negative
jshint/jshint,jshint,2013-05-08T04:29:29Z,comma operator not understood as single expression. using the comma operator (not particularly clean. but valid js syntax) causes jshint to incorrectly report a syntax error.```var do_x. do_y. do_z;do_x = do_y = do_z = function(){ console.log('hello'); };if (true)    do_x(). do_y();else    do_z();```yield the following jshint errors:```test.js: line 7. col 1. expected an identifier and instead saw 'else'.test.js: line 7. col 1. expected an assignment or function call and instead saw an expression.test.js: line 7. col 5. missing semicolon.```,negative
jshint/jshint,jshint,2013-05-08T22:48:01Z,jshint + `"use strict";` results in spurious "'exports' is not defined." warnings. i'd like to apply both jshint and `"use strict";` to my node.js code. but when i do. jshint complains:```$ jshint .binfix.js: line 14. col 1. 'exports' is not defined.binfix.js: line 24. col 1. 'exports' is not defined.binfix.js: line 48. col 1. 'exports' is not defined.```,negative
jshint/jshint,jshint,2013-05-08T23:00:09Z,use `/*jshint node:true */` option.,positive
jshint/jshint,jshint,2013-05-09T03:30:44Z,antonkovalyov thanks again! all the warnings went away when i added `"node": true` to my `.jshintrc`!,positive
jshint/jshint,jshint,2013-05-09T12:42:04Z,unicode support is lacking. the following snippet is perfectly valid. but jshint chokes on the `x̄` and wrongly finds scope and syntax errors for the rest of the file.``` javascript var data = {    min: results[0].min.    max: results[0].max.    x̄: results[0].sum / results[0].count.    s: math.sqrt(variance).    n: results[0].count};```,negative
jshint/jshint,jshint,2013-05-09T16:44:24Z,we discussed this on the irc. thanks pal!,positive
jshint/jshint,jshint,2013-05-10T13:54:31Z,antonkovalyov sorry for bringing this up one again. but i can reproduce the incorrect warning w/ current master using spadgos' sample test code (see tmuellerleile/jshintaad230274ab52e95eed8a804c07f1ae903e99ade). would you mind taking another look at this?,negative
jshint/jshint,jshint,2013-05-10T16:31:41Z,support /*jshint shelljs:true*/. imo. it'd be rather useful to support shelljs through a single directive rather than allowing a bunch of globals.thoughts?,positive
jshint/jshint,jshint,2013-05-11T18:09:14Z,preface each warning with the name of the .jshintrc rule that turns it off. i like the laxcomma note. i think we can go further with this.in cases where warnings don't have real names. we can still advise `"-w07"`. etc.,neutral
jshint/jshint,jshint,2013-05-13T18:20:06Z,optionally warn about anonymous functions. when using anonymous functions instead of named function expressions or function declarations it will make stacktraces and code less readableit would be nice if jshint could warn about them.,neutral
jshint/jshint,jshint,2013-05-14T20:48:44Z,real name for all warnings in jshintrc (no more -w070 in every file. etc). hello.surprised i didn't find this issue floating around already. i think all warnings should be controllable via jshintrc; couldn't get this to work or find docs on it. have i missed something?- kenn,negative
jshint/jshint,jshint,2013-05-14T21:11:03Z,naming is hard. plus. named options sometimes combine multiple warnings. basically. if you find yourself adding lots of `-wxxx` comments ask yourself why do you need a linting tool at all if you ignore its warnings anyway.,neutral
jshint/jshint,jshint,2013-05-14T21:45:07Z,ok no names. but project-wide support for e.g. -w070 would be nice since it is a legacy ie warning. how about just the warning number in jshintrc?,positive
jshint/jshint,jshint,2013-05-15T14:45:48Z,(my answer to your rhetorical question is the usual: i am a highly multilingual programmer and need a community repository of js's issues so that i can program using my full capability while avoiding pitfalls specific to the language. and i need fine control over those warnings that do not apply to my project.),negative
jshint/jshint,jshint,2013-05-15T15:15:31Z,kennknowles have you tried something like `{ '-w070': true }`? is that too annoying?antonkovalyov it might be a good idea to clarify that this is how to enable number-options. i was trying to do the same thing a couple of months ago. and was stumped when `{ 'w070': false }` didn't work.,positive
jshint/jshint,jshint,2013-05-15T15:33:38Z,skalman thanks! that is exactly what i wanted. i mistakenly asked for "real names" when what i meant was "a name i can put in jshintrc". thinking that the -wxxx were only implemented in file-level comments. i was reading the code to discover just that functionality. or where to add it in my fork. when i found "es5".,negative
riot/riot,karma,2015-06-28T00:14:50Z,tipiirai . gianlucaguarini moved to new-tmpl branch. almost done. but i'm having problems with karma. maybe because intentional throws in test/specs/tmpl.js,negative
angular/angular.js,standard,2016-01-30T04:16:09Z,gkalpak thanks! also thanks for best practice stuff. i thought that was the standard for all services. will update!,positive
angular/angular.js,standard,2016-02-01T20:39:20Z,narretz that's great. as for the argument of 'further complicating the ddo api'. the api docs can be made to appear less complicated by adding a standard highlighted paragraph 'best practice'. which would recommend using these new bindings for inputs and `&` (or events?) for outputs.,positive
angular/angular.js,karma,2013-08-10T13:41:08Z,cannot run tests with karma commandline tool. not sure if this is supposed to work but running karma run karma.conf.js.the commandline tool expects the config to export a function.,neutral
dc-js/dc.js,jasmine,2014-02-19T18:59:25Z,ok jasmine test is up.. i am fairly new to jasmine so please let me know if any changes are needed,positive
getsentry/sentry,eslint,2015-12-10T23:59:40Z,implement missing translations triggered by eslint rule. cc mitsuhiko dcramer,neutral
istanbuljs/istanbuljs,istanbul,2017-06-16T06:40:37Z,thanks for the feedback :) hard to get one even in my company. where i introduced it few months ago.so the sorting is definitely a concern. although i hardly remember to ever use it. i left it broken. because i felt like there will be a better time to address this when i will implement it the _clean_ way.i haven't try this on mobile (iphone or android tablet) until you pointed out some issues on smaller screen. i saw the modal is in fact unpredictable. so i will try to find a better component or simply fallback to page reload.the summary with chart is based on some first idea that came to my head when i tried to make it "speak" to the reader something meaningful. _consumable_ at first glance. i agree it will be better to change the message and i already suppressed the animation for the [demo](). if you have any better idea for top section. please don't hesitate to share :),positive
istanbuljs/istanbuljs,istanbul,2017-06-28T16:58:29Z,i am having the same issue.  i found some fix that uses comments to ignore lines of code like /* istanbul ignore next */ but these do not work at all.,negative
DefinitelyTyped/DefinitelyTyped,standard,2016-07-29T00:21:04Z,note that installing the node typings also changes the standard javascript api and breaks my code. so definitely is not an option.,neutral
DefinitelyTyped/DefinitelyTyped,standard,2016-08-02T11:26:40Z,sadly they don't work with typescript 2's `npm install -- save types/ramda`. which will be standard soon,neutral
DefinitelyTyped/DefinitelyTyped,standard,2016-08-02T18:04:17Z,o.k. had a quick glance at the above:_ad 1)_ i will provide a follow-up comment. you are right this is not what i had hoped for either. but it came about after digging through the source code/tests and some of the patterns that surfaced there._ad 2)_ i am with you in principle on the type aliases for maintainability. the rationale why i stopped using some of the most pervasive ones. like your example `numeric` is as follows. each individual d3-module exports into the same `d3` **global** when used as a vanilla script (this is d3 as per mike's design). it also gets  re-exported as part of the standard d3 bundle. having `numeric` defined in each individual module. would create duplicate identifier problems. defining the semantically same type alias just with a slightly altered name in each module. is a path i did not want to go at the time (e. g. `pienumeric`. `arraynumeric` etc.) where i could define an alias that can reasonably be imported following a _proper d3 module dependency_. i have done so (e.g. `basetype` between **d3-selection** and **d3-transition**._ad 3)_ good catch. i believe. this can be generalized to a coercible-to-number. i'll check again and amend the pr._ad 4)_ correct. will add a chore to establish consistency and amend pr in follow-up.as for your added `d3-voronoi` hint. i think this should be something that can be carried over. i will do a sweep of the source code to check something related and if all goes well tighten up the interface.,negative
angular-ui/ui-mask,sauce,2016-01-06T14:48:17Z,closed and reopened to restart the travis build. the previous one failed due to a sauce labs issue.,negative
