bower/bower,mocha,2012-09-16T21:29:33Z,re-read... this isn't against mochas repo.  this is the bower-mocha repo that **i created**..,negative
bower/bower,mocha,2012-10-07T10:54:42Z,add devdependencies. i have several projects that use mocha. expectjs and othe stuff for testing.having the user to download these kind of dev/test dependencies seems wrong. but it would be great if bower also managed those for me. thats why npm supports the devdependencies.at the moment i'm using the npm to manage dev dependencies for me. this way i don't bloat the component.json with stuff the user doesn't need but its kind of ugly because i'm using two package managers..,negative
bower/bower,mocha,2012-10-09T19:30:39Z,i've been thinking about this as well. i'm on the fence whether mocha and expectjs really should be available via bower as they're not actually web components. that said. there certainly _are_ web components that would be a good fit for devdependencies or optionaldependencies. for example. if you have a library that requires jquery _or_ zepto. you might put both of those in optionaldependencies. and one or both in devdependencies for testing.,positive
bower/bower,mocha,2012-10-09T23:34:40Z,jamesarosen exactly. if this has a go i can implement it.,neutral
bower/bower,mocha,2012-10-10T00:12:37Z,i'll help out however i can.,neutral
bower/bower,mocha,2012-10-11T02:35:45Z,i added dev deps to component(1) a while back. haven't converted mocha over to utilizing components but imo test frameworks would make great components. no easier way to install them than that!,positive
bower/bower,mocha,2012-10-12T16:53:48Z,i certainly wouldn't complain about being able to merge my `package.json` (used only for `devdependencies`) into my `component.json` :),neutral
infernojs/inferno,coveralls,2016-01-11T08:39:48Z,links to coveralls master branch. by the way i got a huge pre-commit lint error. so i had to use the github ui to commit.```inferno/src/dom/domregistry.js   76:22  error  unexpected trailing comma                    comma-dangle  283:23  error  there should be no spaces inside this paren  space-in-parens  283:40  error  there should be no spaces inside this paren  space-in-parens  284:30  error  there should be no spaces inside this paren  space-in-parens  284:32  error  there should be no spaces inside this paren  space-in-parens  284:50  error  there should be no spaces inside this paren  space-in-parens  284:64  error  there should be no spaces inside this paren  space-in-parens  287:6   error  there should be no spaces inside this paren  space-in-parens  287:36  error  there should be no spaces inside this paren  space-in-parens  296:33  error  there should be no spaces inside this paren  space-in-parens  296:56  error  there should be no spaces inside this paren  space-in-parens  297:33  error  there should be no spaces inside this paren  space-in-parens  297:55  error  there should be no spaces inside this paren  space-in-parens  298:33  error  there should be no spaces inside this paren  space-in-parens  298:61  error  there should be no spaces inside this paren  space-in-parens  299:41  error  there should be no spaces inside this paren  space-in-parens  299:78  error  there should be no spaces inside this paren  space-in-parens...✖ 1507 problems (1507 errors. 0 warnings)pre-commit: pre-commit: we've failed to pass the specified git pre-commit hooks as the `lint:source`pre-commit: hook returned an exit code (1). if you're feeling adventurous you canpre-commit: skip the git pre-commit hooks by adding the following flags to your commit:pre-commit: pre-commit:   git commit -n (or --no-verify)pre-commit: pre-commit: this is ill-advised since the commit is broken.pre-commit: ```,negative
jprichardson/electron-mocha,mocha,2016-01-22T15:03:59Z,jprichardson have you had the time to look at this pr? what do you think about it?it raises the question of how to test a renderer view and not just a renderer script. from what i've understood of electron-mocha code there is nothing. as of now. that can be used to load a renderer view. do you think electron-mocha could be modified/extended to deal with this use case? would you be willing to? i could spend some time on this. should you agree. and give some directions on how you would like it to be.thanks!,neutral
request/request,standard,2016-08-25T20:29:56Z,progress event. this completes my programs requirements. but as i'm not familiar with all of the ins and outs of `request`. i'm sure i'm missing some other point where a progress event might make sense.at the moment it:- ⏲  adds a transferred property to the `request` object to track bytes sent. -   during the `write` operation. it will emit a `progress` event that includes the standard `progressevent` object as defined in the [progressevent spec]( due to my unfamiliarity with the code base. and being the first time i've used `tape` tests. i would say my test cases are pretty minimal and permissive. so i definitely welcome some direction from the team on that.closes #1450,negative
request/request,standard,2016-08-26T13:43:14Z,i'll dig into the failures for the older node platforms. but does anyone have any off-the-cuff thoughts about what might be going on?,neutral
fnogatz/transportation,standard,2015-03-16T01:28:23Z,use javascript standard style for executables. the files in `/bin` are not checked by `standard`.,neutral
jsreport/jsreport,standard,2015-04-21T16:58:34Z,hi.jsreport.template object is provided just by wrapped-html recipe.in phantom-pdf you can use standard approach with templating engines. so for example with handlebars it could be $.get(serviceurl{{e._id}}.function(data){......,neutral
serverless/serverless,mocha,2016-02-05T21:03:24Z,hrm.  good point.  that would just kick the can down the road.  i'd guess that in such a case. you could use project templates but that isn't dynamic in the fashion that could be useful for doing something silly like running test suites. ;)i've primarily iterated using the local event by specifying what i want _right now_ and working from there.  my test suites handle the rest by providing the specific event definitions that i want to call each function with.  because this more involved capability of mocha-chai-sinon serves my purposes better. i've seen event.json as a transitory debugging tool rather than something for extensive. planned. and structured use.,negative
serverless/serverless,mocha,2016-02-05T21:12:22Z,good point about using mocha-chai-sinon...i haven't actually looked much into that because i am so under the gun right now. but that sounds like it is probably worth a look for me atm.perhaps the right approach for serverless is to do the simplest thing. which would be to allow someone to sepcify an alternate .json on the cli and recommended "proper" testing be done my mocah-chai-sinon.,negative
dherault/serverless-offline,mocha,2016-06-20T17:47:56Z,i'm not sure how well i understand your question. so correct me if i'm wrong. but you'd like to know what content-type i'm sending to serverless offline & what content-type is in the lambda function template. right?in my lambda s-function.json. there is this:``` "requesttemplates": {                "application/x-www-form-urlencoded": "{\"payload\": $input.json('$'). \"apiid\": \"$context.apiid\". \"stage\": \"$context.stage\". \"path\": \"$context.resourcepath\". \"method\": \"$context.httpmethod\". \"all-params\" : \"$input.params()\"}"            }.```i have a mocha test case that uses request-promise (& co-mocha) like so:```var response = yield request({    method: 'post'.    uri: urltotest.    form: body.    resolvewithfullresponse: true.     simple: false});```(this is somewhat sparse. i know. but the code is proprietary so i don't want to post anything revealing.)the test passes when i point it to the deployed api. but not when pointed to serverless offline.,negative
craigsimps/gulp-wp-toolkit,eslint,2017-02-02T10:53:02Z,add self:eslint. see #2 when run under the context of genesis starter theme. this `self:eslint` passes.,neutral
Azure/autorest,mocha,2017-02-27T19:42:53Z,adding basic test infrastructure. adds ability to use gulp test/typescript to run typescript mocha unit tests.,neutral
airbnb/javascript,eslint,2015-09-29T16:19:11Z,yeah. i just copied over the comment from `eslint-config-defaults` instead of re-using the old comment there. i didn't realize that their comment there was so confusing. though.,negative
airbnb/javascript,eslint,2015-10-02T12:19:02Z,bump.this would be nice also if you add {"switchcase": 1} to eslint rules according to your decision on switch statement indenting.,positive
airbnb/javascript,eslint,2015-10-04T07:30:44Z,add npmignore to eslint-config-airbnb. it only makes sense now that there's a `test` directory.,neutral
airbnb/javascript,eslint,2015-10-08T10:46:17Z,ariporad :+1: :+1:,neutral
airbnb/javascript,eslint,2015-10-08T19:03:51Z,thanks. but i'd prefer not to ignore this. test files should always be published to `npm`. so that `npm explore foo && npm install foo && npm test` always works.,neutral
angular/angular-phonecat,karma,2013-10-09T20:59:57Z,thanks for the pr. but i don't think we want to couple this to yeoman and bower quite yet.,neutral
algolia/vue-instantsearch,eslint,2017-04-13T16:43:30Z,style/eslint prettier. i realize i kinda liked it without ending semicolons :/,positive
velesin/jasmine-jquery,jasmine,2013-03-01T15:23:13Z,basic library header. adds a basic library header (description. url. copyright. license).  this is pretty standard for most projects (ex: jasmine-ajax file header) and is usually required before libraries can be used by copyright sensitive applications.,positive
velesin/jasmine-jquery,jasmine,2013-03-03T05:01:18Z,i was about to open an identical pull request -- since the docs say "simply download jasmine-jquery.js from here and include it in your jasmine's test runner file " it really ought to have the license in that file.,neutral
velesin/jasmine-jquery,jasmine,2013-03-04T03:05:51Z,shoot.  this pull request is referencing only my commit and not the whole branch.  closing and replacing with #115,neutral
videojs/video.js,standard,2016-01-28T21:08:59Z,was a solution ever found for this issue? i've run in to this exact issue. and have had no luck fixing it.,positive
videojs/video.js,standard,2016-02-02T07:34:34Z,enhance modularity of text track settings. it seems much more logical to move all of the text track settings and styling into one component (`texttracksettings`). and leave `texttrackdisplay` to do a fairly standard timing and display function. this way. future changes for text tracks (such as adding support for displaying several tracks. including a description track and a captions track) will be more modular.,negative
videojs/video.js,standard,2016-02-02T16:24:24Z,maybe instead of of moving the styling into texttracksettings we put it in another file that we can import statically inside of texttrackdisplay?,neutral
videojs/video.js,standard,2016-02-03T21:19:50Z,my feeling is that `texttracksettings` is in charge of displaying the dialog to the user and also possibly caching this value between player loads. if we move the element styling portion from the `texttrackdisplay` into `texttracksettings`. we're now having the `texttracksettings` be in charge of two separate tasks. the `texttrackdisplay` is supposed to be in charge of displaying the cues. so. styling them is sort of in it's ball park as well. however. i do agree it will make the `texttrackdisplay` much nicer if it delegated the actual styling to something else. the other thing shouldn't be the `texttracksettings`. i don't think. the styling function could still do a check to see whether `texttracksettings` are included in the player and be a no-op if it isn't.,negative
videojs/video.js,standard,2016-02-09T22:31:16Z,not able to access controlbar component options. i am unable to access the controlbar component options. yet my standard options (controls. autoplay. preload) are working just fine. i'm running rails. and coffeescript. the code is following the documentation.``` javascript  player = videojs "media-video".    controls: true    autoplay: false    preload: "auto"    controlbar:      mutetoggle: false      progresscontrol:        seekbar:          seekhandle: false  . ->    console.log "good to go!"    on "ended". ->      console.log "awww...over so soon?"```,negative
videojs/video.js,standard,2016-02-09T22:43:47Z,can you elaborate on what you mean by not being able to access control component options?what are you seeing vs what are you expecting to see? a live reduced test case. on a site like jsfiddle or jsbin. is _super_ helpful.,positive
videojs/video.js,standard,2016-02-09T23:17:54Z,added en.json as localisation template. adds en.json as a localisation template.if dialog/modal/window is to be standardised (#3085) and close will change to close dialog (#2924) imminently this will need to be updated.,neutral
videojs/video.js,standard,2016-02-10T06:31:17Z,after discussion with gkatsev. it seems like this isn't the way we're going to go right now with handling captions settings.,neutral
videojs/video.js,standard,2016-02-10T16:20:22Z,hartman thanks for your reply.,positive
videojs/video.js,standard,2016-02-10T17:23:24Z,thank you hartman . is there a way to disable seeking while still having the progress bar present on the player?,positive
videojs/video.js,standard,2016-02-10T20:23:40Z,shroy not easily. there doesn't seem to be a provision for disabling or cancelling seeking in the html5 video specification. there also is no option for the video.js custom controls to prevent this as far as i can determine.the only suggestions i can find for something like this is to continuously record the current time during playback from timeupdate functions. and then after seeking. seek back to the position 'before' seeking.,negative
videojs/video.js,standard,2016-02-10T20:28:43Z,you could use `pointer-events: none` on the progress control to prevent clicks. this won't prevent users from seeking programmatically but should take care of the majority of cases on the majority of browsers.,neutral
videojs/video.js,standard,2016-02-10T21:13:07Z,ok great. thanks gkatsev and hartman,positive
videojs/video.js,standard,2016-02-10T21:41:38Z,lgtm. thanks.,positive
expressjs/express,mocha,2012-08-06T21:48:29Z,i have helvetica neue on my box. it looks good. i do notice that the font in the other paragraphs is tiny. can i suggest bumping up to 14px for the 'open sans'? or at least comparable to the mocha.js site.,neutral
babel/babel-loader,jshint,2015-04-15T08:15:06Z,thanks for the pointer. i took a quick look at jshint-loader. i think that i know what the problem is.i will fix that later (currently at work) the fix should land on the develop branch.,positive
babel/babel-loader,mocha,2015-04-27T15:27:15Z,using the inject loader doesn't work for me in combination with with babel and mocha loaders.right now i'm using sinon after importing and making sure my modules all export objects.,neutral
docpad/docpad,standard,2013-10-18T16:12:59Z,not sure if you guys managed to fix this but just so your aware..there is a difference in how the paths work for the different prompts\terminals we use on windowsbash and standard windows prompt use the same path but nodejs cmd prompt isn't quite the same as it uses a batch file to launch the a prompt.what i find is that when i'm using **nodejs** prompt and installing global plugins via **npm** it installs the plugins in to ```c:\program files (x86)\nodejs\npm\....```but when in standard prompt or bash it installs global plugins in to ```c:\users\{username}\appdata\roaming\npm\....```so probably like me. many windows users will vary between these different prompts during the day without realising and end up installing global npm plugins in different places.i've had issues in the past where docpad says its not installed when doing a docpad uninstall and yet it runs just fine lolthe work around i found for this is to ensure the path is the same for all prompts by adding the following to the path in the environment variables section in windows```c:\users\{username}\appdata\roaming\npmc:\users\{username}\appdata\roaming\npm\node_modules```hopefully this will fix your enoent issue,negative
sequelize/sequelize,jshint,2015-08-11T12:45:02Z,remember to run jshint. you have an undefined variable,neutral
cujojs/most,standard,2017-04-26T15:01:51Z,i don't understand why it's considered "pollution" to have promise in the global scope. why is that polluting the global scope. but all other standard native types are not pollution? (map. set. settimeout. etc.) promise is found in the global scope in every modern javascript vm. asking for it to not be in the global scope sounds like asking for special behaviour that deviates from the modern standard.,negative
cujojs/most,standard,2017-04-26T15:07:39Z,hey rjgotten.> it also continues to write itself into the global scope. so it doesn't solve the original problem either.hmmm... i don't think it does.  i didn't test the resulting code. but it certainly looks like it doesn't pollute the global scope to me.  unless i'm missing something. it looks like it creates a module-scoped `promise` instance. and since most.js doesn't specifically look in the global scope. it uses it.  no???> thanks. but that's not what i meant. you picked one promise polyfill and baked it directly into the library. which means users no longer have a choice of which polyfill to use. personally. i think this is the best way to allow people to use a local implementation of a *normally* global object.  if promises were just another third-party utility. then i'd be 100% agreeing with you.  however. they're equivalent to `array`. `regexp`. etc. now.  i know it kinda sucks dealing with browsers. but library authors need to work towards standards and the future. :),negative
nightwatchjs/nightwatch,mocha,2015-02-05T05:30:52Z,definitely  more control over the tests within a test file is wanted,neutral
linkedin/dustjs,jasmine,2012-06-18T18:48:00Z,hi kilianc we would be really happy to add your change after you add some jasmine test. we believe that you did a great job and the test would be the icing on the cake.,positive
linkedin/dustjs,jasmine,2012-07-04T18:43:46Z,try running the test with the make command. execute "make jasmine" in the dust root folder.,neutral
linkedin/dustjs,jasmine,2012-07-11T16:57:26Z,hi oleics . thanks for the pr. could you add the test for jasmine??. please,positive
linkedin/dustjs,jasmine,2012-07-11T18:41:48Z,refactor the examples.js for the jasmine. may be we should refactor thisone for core dustone for helpersone for dust grammar,neutral
angular-fullstack/generator-angular-fullstack,karma,2014-01-05T03:32:00Z,what kind of errors do you get? are they related to imagemin or karma?,neutral
angular-fullstack/generator-angular-fullstack,karma,2014-01-05T03:41:23Z,not sure what caused the failure. but sometimes there are issues installing karma dependencies. try running `npm install grunt-karma karma-ng-html2js-preprocessor karma-ng-scenario --save-dev` in your project if you got errors related to karma.,negative
angular-fullstack/generator-angular-fullstack,karma,2014-01-16T10:58:45Z,windows doesn't support bcrypt. swap in bcrypt-nodejs. there are two changes in this request; both are intended to make it easier to get started with generator-angular-fullstack.  first is explicitly including grunt-karma in the npm dev dependencies.second is swapping out bcrypt with bcrypt-json.  the function signature is identical.  most of us (unfortunate) windows users can't compile native bcrypt.cc easily.thanks much.,negative
angular-fullstack/generator-angular-fullstack,karma,2014-01-16T12:23:08Z,i was worried about using bcrypt for this very reason. however. because grunt-contrib-imagemin also required node-gyp. it seemed that most people should already have it.if we were to replace the bcrypt dependency. i'd seriously consider just using nodes crypto pbkdf2 encryption. because i'm not sure how reliable/fast the pure javascript implementation of bcrypt is.i'd be happy to hear more people chime in on this issue though.the karma dependencies should be handled by generator-karma. are you having issues with them being installed?,negative
angular-fullstack/generator-angular-fullstack,karma,2014-01-16T17:08:17Z,sullivanpt you're right. i'll release a small update to replace bcrypt with the native crypto library to make it easier for new users.on the issue of karma dependencies. generator-karma is supposed to add those. but it has been unreliable in the past. if something goes wrong during the npm install. those packages aren't added to the package.json. so i suppose we could add them as dependencies directly to the package.json template.,negative
angular-fullstack/generator-angular-fullstack,karma,2014-01-16T18:42:26Z,published the new patch over npm. let me know if it works for you.,neutral
angular-fullstack/generator-angular-fullstack,karma,2014-01-17T03:01:34Z,oh shoot. i'll fix that.,negative
angular-fullstack/generator-angular-fullstack,karma,2014-01-17T03:21:54Z,fixed and published.,neutral
travi/any,eslint,2016-06-11T03:18:38Z,apply eslint config,neutral
economist-components/component-icon,karma,2015-09-15T14:48:35Z,add karma.conf.js,neutral
webpack/webpack,standard,2016-02-21T22:02:07Z,sokra. hi sorry to bring back such an old issue. but some loaders have equals signs in their query options. do you have any suggestions for how to handle that?edit: so okay. the standard query option converts the queries to use the equals sign. whereas json.stringify converts the options to having brackets and colons. what i imagine in my mind is something like this:``` javascript      test: /\.ext$/.      loaders: [        "loader3".        {           loader: "loader2".          query: {            querya: 1.            queryb: "something"          }        }.        "loader1"      ]```edit \* 2. okay. i've stuck with suggestion 2. that worked. i looked through the webpack source code and saw that that's how the query is passed anyways. it doesn't have to be equals signs. sorry to bother!,negative
webpack/webpack,standard,2016-03-10T17:49:54Z,i'm working on this. it's not that hard to test if the first statement is "use strict" via a parser plugin and move the statement before any inserted dependencies. but there are a few gotchas. the statement must be /only/ the string literal "use strict". but acorn strips enclosing parentheses unless the preserveparens option is set. the parser could be modified to check for a proper strict mode statement before actually parsing the file. it could parse the file with preserveparens and produce an ast with non-standard parenthesizedexpression nodes that the parser and plugins using it would need to be aware of. or strict mode could be detected at some other stage. i'm not sure what's really best in terms of webpack coding style.,neutral
webpack/webpack,uglify,2017-07-06T00:02:15Z,sokra question on this issue; i have an `index.js` file which exports { someclass } from `./someclass.js`. and { somefunction } from `./somefunction.js`; if i `import { somefunction }` from this index. i still see the class defined in the pre-minified bundle. thus the uglify issue comes into play.is it possible for webpack to simply not include files which contain no explicitly imported modules? i never explicitly imported the class. yet webpack still wants to include the file. and uglify throws up. i think the tree shaking problem could be mostly avoided here at the webpack layer. you might still have non-optimization issues where the file contains multiple exports. but as of now afaik there is no way to get tree shaking working with classes.i was trying this with an es5 transpiled class first. but even if `someclass` is defined as an es6 class export. it still shows up in the pre-minified bundle.,negative
webpack/webpack,uglify,2017-07-07T08:31:19Z,uglifyjs introduced the `pure` annotation. typescript (or any transpiler) can help uglifyjs to detect side-effect free code by generating code with this annotation now.,neutral
webpack/webpack,uglify,2017-07-20T14:58:03Z,what does "evaluated" mean? i assume webpack is evaluating whether the code is included in the final product. but is this specific about having uglify evaluate?without this the whole idea of tree shaking seems rather fragile and doesnt do whats expected unless you follow very specific semantics. if thats the case then we would need even greater gates. like "global code is prohibited in es6". including static initialization.,negative
webpack/webpack,uglify,2017-07-22T17:51:03Z,i dont recommend this approach for the problem at hand. `sourcemapdevtoolplugin`'s responsibility is more on the actual support of this feature - rather than how it's configured.last i checked. `uglifyjs-webpack-plugin` (which is what is added when u use `--optimize-minimize`/`-p` option) is restricted to sourcemapping when your `devtool` value is `source-map` or `hidden-source-map`. that caveat aside - i recommend solving this in your webpack config; by setting the `devtool` option. or. by introducing your own plugin which performs this for you.,negative
webpack/webpack,uglify,2017-07-26T08:48:38Z,had the `"mappings":"aaaa"` issue too. fixed by changing production source maps to `source-maps` and enabling `sourmap: true` in uglify. before i had sourcemaps set to `cheap-module-source-map` which didn't work.,negative
socketstream/socketstream,mocha,2014-03-30T12:18:46Z,paulbjensen the problem with putting it in the same file is that we'd have to mock the global connect cookie parser middleware. which could affect rest of our tests which could affect rest of our tests. i'm not sure if there's a way around it since i'm not too familiar with mocha.,negative
acuminous/yadda,mocha,2015-01-06T20:56:23Z,i have a theory. i think something in one of your sub directories must be reseting the global scope. this would explain: a. why you couldn't reproduce with the 130 branchb. why you only get the error when running with --recursivewhat happens if you move `yadda.plugins.mocha.steplevelplugin.init();` down a few line to``` bashnew yadda.featurefilesearch('./test/features').each(function(file) {  yadda.plugins.mocha.steplevelplugin.init();  featurefile(file. function(feature) {```,negative
prebid/Prebid.js,standard,2017-05-15T15:45:31Z,jaiminpanchal27 i understand your concern. it's one of those "isn't exactly like. but must behave like to properly test" sorts of things. in some ways. it is accurate that this is a test. but the current testing in ./test is more like unit tests. not outside in testing. this is more of a black box outside in interaction with controls vs. a whitebox unit test. is there an alternate place for this sort of thing that can provide the same level of testing interaction. particularly pre-prod style integration testing which is the focus here?the current testing options are great for prebid at a code level. not necessarily at an integration level. they don't provide access to the dfp related items like delivery diagnostics when an error is encountered. at least part of the focus here is "a hb ad did not display. why? oh. we're running a standard lineitem still because we missed it while reconfiguring for prebid". or. "the line items for hb aren't active." or "our price priority lineitems should kick in at < x cpm. we need to verify that." all of this style of testing is in-browser integration testing that the mocha/jasmine/gulp tests don't provide.,negative
prebid/Prebid.js,standard,2017-05-19T03:13:06Z,mkendall07. thanks for the response. i am working on a prebid integration with a customer using prebid video and display. but most of the time publisher would like a different granularity between display and video ads. it would be great to have a specific method for video. for instance:pbjs.setpricegranularityvideo("low");pbjs.setpricegranularity("low");orpbjs.biddervideosettings = {    standard: {         [...]    }.    appnexus: {         [...]    }.    rubicon: {         [...]    }.}pbjs.biddersettings = {    standard: {         [...]    }.    appnexus: {         [...]    }.    rubicon: {         [...]    }.}best.antoine,positive
prebid/Prebid.js,standard,2017-06-06T06:04:47Z,set `alwaysusebid` in bidder settings and don't use `enablesendallbids()`. you should get your custom keys along with standard keys (if `biddersettings.bidder.sendstandardtargeting = true`) then the bid landscape values won't overwrite the bidder settings values.,neutral
prebid/Prebid.js,eslint,2017-05-17T01:38:53Z,fix eslint exceptions. ## type of issuecode quality improvement## descriptionthis is a tracking issue for code quality improvements. the `.eslintrc` files include many exceptions which are not actually good ideas (see the comments in those files).anyone who has time is encouraged to fix code which violates them. and. if possible. remove those exceptions. everything which eslint could `--fix` automatically has already been taken care of. i recommend removing at most one quality issue per pr. to keep the diffs manageable.,positive
prebid/Prebid.js,eslint,2017-05-18T21:15:34Z,please fix linting errors. you can use `eslint --fix`,positive
prebid/Prebid.js,eslint,2017-05-19T14:53:03Z,jbadyoulike please fix the linting errors. `eslint --fix` might help,positive
prebid/Prebid.js,eslint,2017-05-29T16:02:15Z,dbemiller sorry. i deleted the repo by accident. is it ok if i create a new pr for this branch but rebased?btw. i ran eslint and it didn't show any error or warning about the code,negative
ipfs/js-ipfs-api,uglify,2017-02-22T11:05:40Z,if you want to uglify it you will need to either transpile it to es5 using something like babel. or use the harmony branch from uglifyjs as we do. the default installation of uglifyjs sadly does not have support for es2015 yet.,positive
Automattic/mongoose,mocha,2013-03-27T20:31:04Z,i finally got mocha to work. in windows it seems that `mocha test` is the one that works. not `make test`.i'll push the commit when i'm done testing. thanks for all the help aheckmann,negative
Automattic/mongoose,eslint,2015-07-23T19:20:12Z,i'll remove it from "posttest" for now.i would recommend re-enabling it later. either fully or in quiet mode (which only shows errors not warnings).currently quiet mode takes the log from ~13.000 to ~600 lines of output from eslint.,neutral
Automattic/mongoose,eslint,2015-07-23T19:39:26Z,alright remove eslint from posttest. the logs are looking much nicer :smile:,positive
Automattic/mongoose,eslint,2015-07-24T16:36:13Z,vkarpov15 eslint passes running `eslint . --quiet` with current settings. i'm not spotting any new :fire: in the tests.travis ci tests on this branch have the same errors as master.running the tests on my local machine has been flakier than travis ci :frowning: .so it would probably be a good idea to run the tests on a different machine.just to be sure no :bug: were introduced.but it should be good to go. :smile:,negative
pouchdb/pouchdb,jshint,2013-06-02T05:58:36Z,wow this is superb. thanks a lot. theres been a lot of questions about cors and credentials recently but i havent had time to dig into it.i will come back with more comments shortly. giving it a quick one over i have a few superficial comments. the linting steps fail (you can run $grunt jshint to test locally). also we will almost certainly want to expose the enablecors / disablecors as grunt helpers to help users set up their couch instance so we might want to put them in a new pouch.cors.js or something similiar. the indentation is also a little funkyi think we can likely do something to avoid having to duplicate the withcredentials in each request. but i need a little more time look into this and get it running. travelling right now but will work to get this merged asap. thanks a lot,negative
pouchdb/pouchdb,jshint,2013-06-02T06:44:17Z,thanks for the tip on the jshint command. fixed those errors. they were predominately function naming errors. as for the weird indentation. it could be my editor. or i just have a weird coding style. i was using 2 spaces for indentation (sublime text 2). because thats what it seemed like you were using. if you could give me an example of what you mean. i will look into more closely or it may just be my editor (i just switch to sublime text 2 a week ago to try it out).,neutral
mojotech/pioneer,selenium,2014-10-15T20:52:53Z,it's not strictly a callback as it's not for notification. but people understand the notion of a callback. it's really a predicate function.i guess the block term comes from another language (probably ruby in this case) that uses them for waiting logic.samccone not sure if i'm in the same wavelength as you here. but i've seen this done in ruby selenium tests before.,negative
mojotech/pioneer,selenium,2014-10-16T22:32:13Z,attach `driver` to environment.. this issue was discovered while trying to send keys which are held in the `driver.key` object.in pioneer's current state. i would need to require `selenium-webdriver`. this would also require adding `selenium-webdriver` to my project's package.json.it would be great if i could just use `this.driver.key.shift`.will be more than happy to send a pr...,positive
angular/protractor,jasmine,2015-08-26T02:24:03Z,for karma now you have to use fdescribe or fit ('f' is for focus). how ever in the protractor context nothing is working...,neutral
angular/protractor,jasmine,2015-08-28T10:25:17Z,i have problems with jasmine.default_timeout_interval. too. no matter how i write my code... i can't get rid of it.,negative
angular/protractor,jasmine,2015-09-04T13:08:38Z,replaced this.addmatcher to jasmine.addmatcher.it works with jasmine2 framework settings.should i write everywhere jasmine.addmatchers?,neutral
angular/protractor,jasmine,2015-09-07T16:00:46Z,all tests use new api. custom matcher are adopted too.in protractor instead of jasmine.\* i always wrote this.*but when i use jasmine2 in configuration `this.addmatcher` doesn't work as it worked before,neutral
angular/protractor,jasmine,2015-09-08T13:53:28Z,as i've mentioned. please read the jasmine2 upgrade guide (referenced above):> the addmatchers function is no longer on the spec (this) it is now on the global jasmine object.also note that `jasmine.addmatchers` requires a spec context - i'd suggest to call it in `beforeall` definitions.,negative
angular/protractor,jasmine,2015-09-15T16:05:33Z,+1 that's a pretty cool jasmine2 feature and it's a pity that we cannot use it with protractor. is anyone taking care of this?,positive
angular/protractor,jasmine,2015-09-16T01:42:06Z,without fit and xit how can we run single test in protractor?,neutral
angular/protractor,selenium,2014-08-20T09:47:21Z,done!,neutral
angular/protractor,selenium,2014-08-20T22:38:38Z,correct. the url field was getting set properly prior to the latest chrome update. i initially noticed a discrepancy between running the tests using the config to specify the location of the chrome driver. and launching the driver manually and specifying the seleniumaddress instead. launching the driver via config would cause the url to get set incorrectly. while the manual approach would be more reliable. however. after the last update. neither of these works.,neutral
angular/protractor,selenium,2014-08-21T22:09:51Z,what are you trying to do? are you just trying to solve #1221? i think that's an issue with the way the protractor launcher is starting up selenium. not your fault.the way that the drivers work is more like:selenium standalone server ---> chromedriver ---> chromeselenium standalone server ---> iedriver ---> ieselenium standalone server ---> firefoxdriver ---> firefoxfirefoxdriver comes with the selenium standalone server. so you don't need a separate binary for it. but everything goes through the selenium standalone server. in #1221. the issue is that multiple instances of that are trying to use the same port.,neutral
angular/protractor,selenium,2014-08-21T22:52:15Z,is it possible to modify your workflow so that before starting protractor. you start up the selenium server (e.g. using `webdriver-manager start`). and then use `seleniumaddress` in the config? that would avoid the port-race-condition. and also would make your tests run faster because the selenium server only needs to be started once.,neutral
angular/protractor,selenium,2014-08-22T06:02:59Z,to clarify - when a new selenium server is started. it _should_ be picking itself an unused port automatically. you do not need to set anything up to make the ports different. the issue seems to be that this isn't working 100% of the time.,neutral
angular/protractor,selenium,2014-08-27T19:07:13Z,whelp that's not good. your selenium server is not being started up correctly.can you try re-downloading and starting it again?,neutral
angular/protractor,selenium,2014-08-29T06:08:59Z,hi. thanks a lot for your response. yap i understand this is something beyond protractor may be issue at webdriver. i've also posted same on appium/selenium as well but no response - may be some expert on webdriver can help me on it. not able to find any so far.let say if there are 10 elements on page i am able to click on 6 out of 10. rest are not. not able to understand what is the problem.,negative
angular/protractor,selenium,2014-08-29T19:30:21Z,iedriver not being downloaded by default is working as intended (many users are on linux/mac and iedriver isn't usable there).my first impression is that it's not a good idea to go around changing the system path for the user - but we should have better docs on how to get iedriver set up. chromedriver is not actually added to the path - instead. its location is passed to the selenium server explicitly.,neutral
angular/protractor,selenium,2014-08-29T22:00:57Z,what about just having an explicit option to require the user to say if they need to turn off strict ssl? that way we don't need to introduce more dependencies and wrap existing code.,negative
angular/protractor,selenium,2014-08-29T22:06:10Z,merged as 2204bf1efcdd46a7d478857e22e22cf91143915e,neutral
angular/protractor,selenium,2014-08-30T02:42:56Z,or perhaps we could support both approaches? i.e. cli argument and strict-ssl npm setting?feel free to let me know how you'd like this done.,positive
angular/protractor,selenium,2014-08-30T06:20:28Z,i have a strong preference for avoiding adding more dependencies. so i'd like to just use the cli argument. i don't know if there is a strong precedent pattern of using the strict-ssl setting though (you mention one other package) - if this is a node.js wide best practice then i'd consider it.,negative
angular/protractor,selenium,2014-09-01T02:43:39Z,i honestly do not know if there's a general pattern of using the strict-ssl setting for this kind of thing. because i saw that it was used in karma. which is after all another google project. i assumed that it would be something consistent with this current project.anyway. i'll make the necessary changes to use it with a cli option only.,negative
angular/protractor,selenium,2014-09-01T08:39:16Z,internet explorer is actually still in the top 3 most used browsers according to the majority of statistics on the web. which means that every project that aims to get maximum exposure should support it. the days of `<!--[if lte ie 8]>` might be over. but ie 10+ is still a factor. and wine seems to allow linux users to test internet explorer.that said. i do understand why it is not set as default. this was more of an issue that i had to investigate and spend effort on circumventing than anything else.> chromedriver is not actually added to the path - instead. its location is passed to the selenium server explicitly.is it possible to implement similar functionality for the iedriver?,negative
angular/protractor,selenium,2014-09-01T14:26:20Z,if anyone needs to pass it via grunt-shell like me. you need to bump max buffer size. my config:``` jsshell: {    webdriverupdate: {        options: {            execoptions: {                maxbuffer: 1024 * 1024 * 64.            }.        }.        command: './bin/selenium.sh install'.    }.}.```,positive
angular/protractor,selenium,2014-09-02T10:22:36Z,multiple seleniumaddresses?. is it possible to use multiple seleniumaddressess (in connection with `multicapabilities`)? i would like to share the same config for a browser `x` on selenium address `y` and browser `a` on selenium address `b`.,neutral
angular/protractor,selenium,2014-09-03T21:31:50Z,thanks! i definitely prefer the explicit cli only way for now.,positive
angular/protractor,selenium,2014-09-04T19:23:49Z,nope. this is not currently supported.,positive
angular/protractor,selenium,2014-09-05T15:45:54Z,i've now modified my code to use a cli option named `ignore_ssl`.having said that. the travis build failed but i'm not sure that it's related to my change...,negative
angular/protractor,selenium,2014-09-05T18:03:18Z,thanks! merged as ee82f9e3d0656b3c88f041f0115743352bc08941,positive
angular/protractor,selenium,2014-09-05T19:36:40Z,cheers!,positive
angular/protractor,selenium,2014-09-08T05:41:56Z,assigning specific ports to selenium server when using multi capabilities. hi.we are using protractor as testing framework for our web product.our coverage includes 3 browsers: chrome. firefox and ie. current configuration includes multi capabilities and the ports for selenium server instances are chosen randomly.the problem is that sometimes selenium server choose the same port for two instance which fails one of test instances.is there any way to add port assignment per browser. such that each selenium instance will work on specific predefined port?thanks.munir,negative
angular/protractor,selenium,2014-09-08T22:07:09Z,this is a bug with selenium's port finder. i believe.closing issue as a dupe of #1221,neutral
angular/protractor,selenium,2014-09-08T22:11:28Z,hm - at some point. if you want to customize a ton. i feel like you should just download the binaries and run the standalone server yourself. `webdriver-manager` is intended to work for the simple use case. not to replicate every single option available. if you actually had to specify all those download urls and the hub option. would using `webdriver-manager` really be adding any value to you over just running `java -jar selenium-standalone.jar`?,neutral
angular/protractor,selenium,2014-09-09T15:05:21Z,sorry julie - i asked the question but due to changes to the account i haven't got the answer notification.i will explain what i meant:i wrote a library for selenium webdriver that wraps the driver instances and the web element instances. this way - the user can use her existing tests and i keep track of the "user actions" (i.e. mouse clicks. keyboard input using sendkeys - etc.). this is a small part of what i'm doing - but it's what's relevant right now.so. for example. my driver instance wrapper implements findelement in order to return my wrapper of web element - so that my implementation of sendkeys will be called.now i'm trying to achieve the same in protractor. the problem is the use of globals. i don't want to cause the user to change the tests more than i have to. ideally she would only have to call a wrap method and leave the following code unchanged.if i understand your suggestion correctly - i still have to override browser and element in the global namespace - right?thank you!,negative
angular/protractor,selenium,2014-09-10T17:48:49Z,you are launching with `&` not giving enough time to update & start selenium> $ webdriver-manager update &> $ webdriver-manager start &> $ protractor protractor.jsprotractor will start before selenium is ready therefore econnrefused,neutral
angular/protractor,selenium,2014-09-12T21:57:49Z,one possibly interesting thing i've noticed is that when phantom does crash i see org.openqa.grid.selenium.gridlauncher on my mac menu bar at the top. i see terminal momentarily lose focus while this happens. the occurrence of this failure seems to be completely random. but when it happens all the tests fail. and the tests usually won't pass again unless i wait a while before trying to run them.all my tests always pass in chrome.,negative
angular/protractor,selenium,2014-09-14T06:05:38Z,what is the alternative of  findall.findany & findbys  (selenium) in protractor ?. we are using findall.findany &findbys in selenium page object model.we want same thing with protractor page object.is there any way to use in protractor?,neutral
angular/protractor,selenium,2014-09-17T04:23:45Z,i want to use two identifiers for same element for example:userbox is same ui element that having different id & name on different pages likevar userbox=element(by.id('userxox'))orvar userbox=element(by.model('ng-userbox'));so if userbox identified by id than use userbox first one   else use userbox second one (that is identified with ng-model).,neutral
angular/protractor,karma,2015-07-08T20:09:11Z,sautomation : can you give a try by referencing the values as diff[user1] or diff['user1'] inside sendkeys.,neutral
tapjs/node-tap,standard,2015-06-10T20:25:26Z,tap: suppress tap header in subtests. there appears to be no official standard for subtests. but the tap4jthat the jenkins tap plugin uses seems to expect only one header andbarfs if the subtests include their own headers.see,neutral
tapjs/node-tap,standard,2015-06-10T20:49:10Z,fixed the tests and commit message. includes regenerated fixtures. shall i merge once travis is green? or do you want to mull it over a bit more?,neutral
tapjs/node-tap,standard,2015-06-10T21:13:36Z,travis failures are because the save-file test is taking enough ms to be rounded to `1s` in the timing output.worth fixing. but unrelated to this pr.  lgtm!,negative
tapjs/node-tap,standard,2015-06-10T22:16:27Z,isaacs i can merge but publishing is still up to you. would you mind cutting a release?,neutral
tapjs/node-tap,standard,2015-06-10T23:08:25Z,i've got some config changes i'd like to roll out to strongloop's ci that are waiting on this patch so that it doesn't result in a flood of passing tests failing at the last minute when parsing the tap results. (yay jenkins!),negative
tapjs/node-tap,mocha,2016-12-03T23:24:23Z,you can run one file at a time pretty easily. perhaps it's better to break your script out into separate files rather than trying to run something in the middle of a file.,positive
meanjs/mean,uglify,2015-02-21T23:17:31Z,they everyone. i lost a few hours today with this issue. i was finally able to get it working with freezx  comment. i ran into this issue because of a deployment requirement with heroku. heroku needs to have a grunt task called <i>heroku:production</i> for a production deployment. i had the same issue of having a blank landing page.i was finally able to get it working by adding the following env:development code to my grunt file.``` javascript...    env: {      development: {        node_env: 'development'      }.      test: {        node_env: 'test'      }.      secure: {        node_env: 'secure'      }    }....grunt.registertask('build'. ['env:development'. 'lint'. 'loadconfig'. 'ngannotate'. 'uglify'. 'cssmin']);grunt.registertask('heroku:production'. ['build']);```i hope this helps out someone else.,positive
meanjs/mean,eslint,2017-04-03T05:17:57Z,what do you mean how to stop it...?you have a modified eslint setup which obviously isn't compatible with the way the code is structured.so you either go with the project's guideline or you use your own but you'd have to change all the code style to make it pass.,neutral
meanjs/mean,coveralls,2016-02-21T23:31:36Z,is there another service that we can use other than coveralls?,neutral
meanjs/mean,coveralls,2016-02-28T05:27:43Z,ilanbiala i'm not opposed to giving that a shot. could we set it up along side coveralls just too see how it does?,neutral
DiUS/pact-consumer-js-dsl,karma,2015-01-22T02:08:47Z,bethesque just rebased onto the latest master. anything else you'd like done before accepting this pr?on a random note. it would be good if the pact mock server exposed a healthcheck url that we can call to determine when it is ready to receive requests. i had to put a timeout in to hold back the tests from running when the server is not ready. i'd like it to be less brittle.,negative
DiUS/pact-consumer-js-dsl,karma,2015-01-22T21:36:05Z,i was about to say. it does have a healthcheck url. i added it the other day. but then i checked the code. and i realised it must be sitting on my home laptop. uncommitted. i will chase that up.i'm still not entirely happy with the way this is working. i think the two step process will be confusing to people. and they'll not realise why they have to do the `ontestcomplete` part. that `ontestcomplete` callback will be the same for every test using jasmine. so it really could be a method on `pact` that registers a global callback. what if we built a pact-consumer-js-sl-jasmine.js artifact. where that callback was set automatically? then it can be called automatically when we call `runcomplete(done)`. it's actually more accurately `onverify`.,negative
DiUS/pact-consumer-js-dsl,karma,2015-01-28T06:19:56Z,i like that much better. do you think it's more or less confusing to do this:``` javascripthelloprovider.run(function(runcomplete) {      expect(client.sayhello()).toequal("hello");      runcomplete(done);    });```,neutral
DiUS/pact-consumer-js-dsl,karma,2015-01-28T12:45:11Z,the problem with having the done callback passed back inside the run callback is we are not able to get a reference to it when things go wrong in the steps prior to executing the run callback. this means we need to execute the run callback even though we know the pact mock server is not setup properly because without it we can't stop the test. this may result in a confusing failure because along with the error we generate there will be others genetated by the run callback. worst case the run callback throws an exception and we never get the done callback at all. and the test fails with a timeout error.  to allow us to fail cleanly we need a reference to the done callback directly.,negative
DiUS/pact-consumer-js-dsl,karma,2015-01-28T20:39:35Z,right. that makes sense. how do we fail it at that stage then? with the `done` callback that the user provides as the mock service argument?,negative
DiUS/pact-consumer-js-dsl,karma,2015-01-28T22:26:40Z,in the before we pass in a function that accepts an error argument and will fail the test if it has a value. so if we have an error early in the mock setup stages we will call this function handing it the error to fail the test then call the done callback to end the test.,negative
DiUS/pact-consumer-js-dsl,karma,2015-01-29T19:58:39Z,i think that's it. i really appreciate your work on this.,positive
DiUS/pact-consumer-js-dsl,karma,2015-02-01T02:17:04Z,let me know when it's ready to merge. as i don't get any alerts when there's a new commit.,negative
DiUS/pact-consumer-js-dsl,karma,2015-02-02T08:39:01Z,bethesque should be good to merge now,neutral
DiUS/pact-consumer-js-dsl,karma,2015-02-02T21:28:48Z,thanks. i'll look at it as soon as i have a moment. once it's merged. there's a few simplifications we can make. the mock service now has a put /interactions. which will get rid of all the callbacks to set up the interactions sequentially. and there's now a 'pact-mock-service start' and 'pact-mock-service stop' task. the start task will block until the port is ready. so we can remove the 'wait for' stuff.,positive
DiUS/pact-consumer-js-dsl,karma,2015-02-03T10:01:44Z,this is looking good. failing in all the right places when i deliberately mess up the tests.,negative
DiUS/pact-consumer-js-dsl,karma,2015-02-03T10:19:29Z,ok. i've merged this in. thanks for your awesome work ben.there's one thing that i'm considering - is it confusing or consistent to have a "done" function in the mock service. as well as in jasmine? what do you think of "verify"?``` javascriptbeforeeach(function() {  client = new providerclient(':1234');  helloprovider = mockservice.create({    consumer: 'hello consumer'.    provider: 'hello provider'.    port: 1234.    verify: function (error) {      expect(error).tobe(null);    }  });});```,negative
DiUS/pact-consumer-js-dsl,karma,2015-02-04T06:43:39Z,good point. firstly. we should add an explanation to the readme.,neutral
apache/cordova-windows,jshint,2015-02-09T09:26:09Z,muratsu merged in 8e7ad53191ebf34c7faec9ed1a3e4c0634372e2d and 232968c062cf73ae7482f13cc3b6584d72933498 . could you please close this pr manually.,positive
mozilla/nunjucks,jshint,2014-09-23T22:06:18Z,from the sounds of above. how about:- expand on the "how to ask for features/send a patch" process:  - which features are undesirable from jinja (as part of its pythonic inheritance)   - which language features we inherit from javascript that doesn't lead us too far off from "the philosophy"- what's required in a patch (documentation. tests. performance. code style)- use tooling that makes it easier to measure above (jshint. test suite. benchmark suite. ...) and possibly even bake that into a script that people run on their feature branches and paste as part of the issue- elaborate on the review process so everyone can jump with feedback. end goal would be to bake it into an easier acceptance for merge (by the committer)- possibly also introduce issue janitors and not assume that core submitters should get that task for free.i guess a combination of docs/code committed to the repo as well as github wiki would be proficient? travis is a good tool for build testing but not really performance testing since its available resources are unreliable. it could probably verify the tooling step of above suggestion.,neutral
mozilla/nunjucks,jshint,2014-09-24T15:07:38Z,can you add a jshintrc for code style. it can be run in travis for checking every pr.,neutral
jprichardson/node-fs-extra,standard,2014-10-01T19:55:23Z,> please. keep the code to the modern js standards.that's not necessary. libraries. ecosystems and standards evolve. send a patch.,positive
ModuleLoader/es-module-loader,mocha,2014-06-25T14:17:31Z,use a test runner. mocha works in both browsers and node so might be a good one to use. tape with testling might be a good choice as well,positive
cerebral/cerebral,mocha,2016-04-08T18:00:57Z,yes. and also``` jsmodules: useaddons: true. false useforms: ... userouterbuild:   webpack  grunt  gulptest:  mocha/chai  nodeunitbackend:  express  :)```maybe backend is taking it to far,positive
cerebral/cerebral,eslint,2016-10-25T20:51:34Z,henri-hulski just add a comment at the top of fileupload.js and request.js``` js/* eslint-env browser */```,neutral
rooseveltframework/roosevelt,mocha,2017-06-20T14:48:10Z,help me out here if i'm thinking about this too crudely. right now to check for the `appdir` we use a naive(? for lack of better of a better word) implementation which checks where roosevelt is required and then keeps grabbing the parent until it finds the `roosevelt.js` and then goes two parents above that. so in regular app cases this is good. two parents above the `roosevelt.js` file is the `appdir` but when required outside of that level we have problems. for example. say two levels down in a test directory. can we not just use `process.env.pwd` since you will always be in the app directory when running commands. so `npm run dev` `process.env.pwd` will give the appdir. running npm test and using `process.env.pwd` will set the `appdir` correctly. then we don't have a hard-coded two step and roosevelt can be required anywhere.is there a flaw in this thought?,negative
rooseveltframework/roosevelt,mocha,2017-06-20T15:46:46Z,pwd will be wrong because if you start the app from a directory that isn't the same as app.js. pwd will be set to whatever your current directory is.,neutral
rooseveltframework/roosevelt,mocha,2017-06-20T15:51:19Z,yeah good point didn't think of the case where you could be up a directory and call `somedir/app.js`. so we will have to use a walk to try and smartly find the appdir.,neutral
brave/browser-laptop,codecov,2017-06-12T19:55:28Z,yeah. still working on it with codecov support,positive
workshopper/how-to-npm,standard,2016-06-21T22:53:19Z,thank you!i definitely agree that we should ensure that we should enforce/ensure the usage of standard.i think two options are just linking to the `standard`/npm style guide in an issue template or readme. but there is also the possibility of including the `standard` linter itself. alongside asking the contributor to make sure tests are passing.,neutral
dadi/api,standard,2016-03-02T04:55:05Z,add file rotation option for standard log files. the access log can be rotated on a daily/weekly/etc basis. ensuring log files don't get too large. the same functionality would be useful for the standard log files.,neutral
dadi/api,standard,2016-03-02T05:14:33Z,standard log rotation. this pull request adds the ability to set standard log files to rotate the same way as the access log does. the default setting is "" which means the rotation is disabled.```logging: {  filerotationperiod: "1d"    fileretentioncount: 7    // keep 7 back copies}```close #30,negative
agershun/alasql,mocha,2015-03-12T10:11:14Z,mathias. hi! thank you for tests and your effort. sorry. i have some work in the office this month and  very slow with answers.i think it is better to split original test one-by-one and add them to `test` directory to simplify the testing process with `mocha` library.,positive
haraka/Haraka,eslint,2016-07-12T23:33:00Z,eslint requires node 4 atleast it seems (per package.json).,neutral
cibernox/ember-basic-dropdown,eslint,2017-06-23T13:28:39Z,fix eslint warning,neutral
cibernox/ember-basic-dropdown,eslint,2017-06-23T14:03:09Z,i'm going to merge now because test suite is broken for unrelated reasons.,negative
admc/wd,selenium,2013-12-06T23:54:14Z,sure. `cbrowser` is a "plain" `webdriver` instance (c for chained).the third party tool i happen to be looking at right now is `mocha-selenium`.  it provides a function `setup()` that returns an instance of `webdriver` created with `wd.remote()`.  i want to use the promise api. so i'm looking for a way to get an instance of `promisewebdriver` or `promisechainwebdriver` from that.,negative
admc/wd,selenium,2013-12-07T00:23:34Z,looks like it would be really easy to add the option to mocha-selenium. jaredly any opinion on this?,positive
admc/wd,selenium,2013-12-07T00:41:20Z,yeah. that definitely makes the most sense. i put together mocha-selenium before the new `wd` promise api came out. so it's due for an update,positive
admc/wd,selenium,2013-12-15T08:20:39Z,closing. saw the patch on mocha-selenium. btw jaredly it would be good to have some code sample in mocha-selenium. could not get it to work in 5mn with the readme doc so gave up. if you send me a working config file. i can help with that.,positive
mapbox/mapbox-gl-draw,eslint,2016-07-05T14:38:49Z,hmmm. ok. i'm up for seeing what lots of constants can do for us. can we follow this pr up with some linting and maybe some flow work? i'd really like to know that the constant i'm using is defined by the constants file. i don't see a rule for this in eslint. but maybe flow would catch it?,neutral
mout/mout,jshint,2013-02-08T13:46:42Z,fix string/replace spec on ie7 and rename 3rd argument to replacements. spec was failing on ie7 because strings chars can't be accessed with `[0]`notation. also renamed 3rd argument to `replacements` to make it different fromthe function name (jshint stops complaining and easier to understand).,negative
angular/angular-cli,uglify,2017-03-02T13:28:18Z,fyi:noticed this in wikibundling: all builds make use of bundling. and using the --prod flag in ng build --prod or ng serve --prod will also make use of uglifying and tree-shaking functionality.seems it does seem to work for me in prod.,neutral
angular/angular-cli,uglify,2017-03-03T09:47:11Z,added section on difference between building with or without prod flag. my team spent a long time figuring out why our code broke when building our project with the `--prod` flag compared to when we did not.since we don't know much about the build process in angular-cli we did not know what the real difference was when using the flag.we finally found out that `constructor.name` did not work when building prod.therefore this pull request contains a warning with example and a "difference" section.i know that tree shaking is done and uglifying. is there more that could be added?,negative
angular/angular-cli,uglify,2017-03-03T09:47:12Z,we found a contributor license agreement for you (the sender of this pull request). but were unable to find agreements for the commit author(s).  if you authored these. maybe you used a different email address in the git commits than was used to sign the cla ([login here]( to double check)?  if these were authored by someone else. then they will need to sign a cla as well. and confirm that they're okay with these being contributed to google.<!-- need_author_cla -->,neutral
angular/angular-cli,uglify,2017-03-03T10:59:35Z,clas look good. thanks!<!-- ok -->,positive
angular/angular-cli,uglify,2017-03-03T12:20:13Z,perhaps a lint warning should be added aswell ?,neutral
angular/angular-cli,uglify,2017-03-06T21:26:34Z,btw. maybe need add something like this:> -- aot flag is enabled by default with a production build,positive
angular/angular-cli,uglify,2017-03-13T15:30:14Z,i dont understand why uglifyjs can't parse this character while targeting es5 in my code yes i use this chatacter through my app but donno why getting this error,negative
aksonov/react-native-router-flux,eslint,2016-08-16T19:08:28Z,vonovak good idea to pass direction. but please fix eslint :),positive
aksonov/react-native-router-flux,eslint,2016-08-23T10:33:56Z,can you fix eslint errors?,neutral
aksonov/react-native-router-flux,eslint,2016-08-25T21:30:30Z,can you fix eslint?,neutral
aksonov/react-native-router-flux,eslint,2016-08-27T09:08:27Z,charpeni fixed issue reported by eslint and rebased.,neutral
npm/npm,standard,2014-11-16T10:49:31Z,> while npm and node have gone beyond the specification in many ways. both still adhere to the spirit (and largely the letter) of the standard.this is not correct imho for one single reason: npm does not support `overlay` field.`package.json` is designed to be shared between different projects. but right now npm reserves all top-level fields like `name` or `dependencies` for itself.i don't like having `*.json` for every single package manager. but it's better than what we have now.,negative
mishoo/UglifyJS2,uglify,2012-10-15T15:39:04Z,ah. i see.  that almost works:```echo 'console.log(test)' | uglifyjs2 -cd test='"a;b"'→ console.log("a;b")```there's a bug currently if you include a comma. but it's just the command-line parser. nothing deep.  i'll fix that.also note that you need to double the quotes (the first level is dropped by your shell).,neutral
mishoo/UglifyJS2,uglify,2012-10-24T01:34:56Z,if statement body with empty return errors out.. when minifying this code. with. -c -m``` javascriptfunction foo(bar) {    if (bar) {        return;    } else {        return 1;    }}```uglify2 errors out with:       /uglify-js2/lib/transform.js:202```   self.consequent = self.consequent.transform(tw);   typeerror: cannot call method 'transform' of null```,negative
mishoo/UglifyJS2,uglify,2012-10-30T11:04:45Z,i know. it works fine for me. however i do not know how other people use my libraries. i think this is important. for example if i use 2 libraries which are both already minified by uglifyjs2 and now if i minify them again there will be problems. this actually happens a lot of time when i use frameworks that has build-in assets management tools. so it would be good to have this option. i think most of the time stable is more important than the size.,positive
mishoo/UglifyJS2,uglify,2012-11-09T15:05:49Z,it should really be in the same github repository. with the old uglifyjs as a branch. although that's less important.,neutral
testem/testem,mocha,2012-07-20T07:37:06Z,now i switched to mocha (as it really more robust and convinient). i used jasmine as well it doesn't actually matter. and i use dependency management tool to load scripts (like requirejs - i use steal.js)custom page is testem specific (loads testem.js. test framework. test scripts) why use proxy for rendering it?,positive
mochajs/mocha,mocha,2012-07-11T19:43:36Z,+1. maybe i'll give this a try?,neutral
mochajs/mocha,mocha,2012-07-11T20:45:53Z,doubt it has anything to do with mocha either unless it's the reference issue,neutral
mochajs/mocha,mocha,2012-07-16T02:21:14Z,`--recursive` needs documenting. quick pull request here: #512,neutral
mochajs/mocha,mocha,2012-07-16T05:40:33Z,+1 for supporting file options to html-cov. because i'm writing some testcases which makes http request to my developing services. and these services can't give me coverage results. i wrote my own coverage-write function. but mocha's reporter doesn't support arbitrary filenames...,negative
mochajs/mocha,mocha,2012-07-18T16:50:23Z,i've only seen this once and it was because i didn't have redis fired up and tried to run tests. so that makes me think we are only really getting this under similar conditions when mocha is not even really running yet. so we should re-throw to expose the original error and bail out of mocha,negative
mochajs/mocha,mocha,2012-07-18T17:25:41Z,although now i wonder if i'm doing this correctly... i'm new to node and am still running through tutorials. should mocha test and my node dev environment be listening on a different ports?,neutral
mochajs/mocha,mocha,2012-07-19T21:45:58Z,you know they exist in every single respetable bdd/tdd/xunit framework. that's why you designed it like that in mocha. it just needs a small tweak heheh,neutral
mochajs/mocha,mocha,2012-07-23T12:53:45Z,true jhnns thats what i'm doing so i can test it in ie.hopefully mocha adds it to its core.,positive
mochajs/mocha,mocha,2012-07-25T19:14:26Z,i guess my main issue with this is that we're optimizing for the failure cases. which of course happen when testing. but i'd prefer that we don't have to change how we code in order to get reasonable reporting. i dont think this is a terrible solution at all. imo it beats forcing everyone to use a mocha-specific assertion lib. the only other alternative really is that mocha provides a single `.assert(expr. msg)` method that others tap into conditionally. then mocha can of course _not_ throw and just deal with things appropriately. "real" uncaught exceptions would still be a problem,negative
mochajs/mocha,mocha,2012-07-25T19:31:53Z,visionmedia imo one of my favorite things about mocha is that it uses no assertion libs itself. it has been a huge selling point when advocating the use of mocha.i just live without the stack in many of my libs ( i have at least 4-5 projects using mocha but only one using the done(fn) syntax). so it would not be a huge deal to live without it and just use it in new project (for me anyway),neutral
mochajs/mocha,mocha,2012-07-27T17:54:30Z,we're getting this error in ie10 as well.does anyone have any clue what's going on? is this a design problem in mocha using recursion to run tests. under a limited stack frame environment? or ???any help is appreciated. as we are running in to what looks like a limit of around 20 `it` blocks.the problem we're seeing is that the tests complete (pass or fail). and then trying to report the problem fails at line 1753:   `stack[0].appendchild(el);``stack` on this line is an empty array.,negative
mochajs/mocha,mocha,2012-07-27T23:15:57Z,for that single case? wtf. hard to say how mocha would have anything to do with that if it's within the function call. we'll have to profile,negative
mochajs/mocha,mocha,2012-07-28T06:42:12Z,"!" - could be used for pending"*" - for exclusiveor ("?" for pending and "!" for exclusive)some symbols could be chosen as defaults but  also made configurable via parameters and via mocha setup in browser.,neutral
mochajs/mocha,mocha,2012-07-28T12:54:52Z,reduce test error output in console. is it possible to reduce test output in node console?use case:i have a huge object and expect it to have some property. if the property is not there. mocha spec reporter outputs in a console red error:expected {.. huge object on multiple screens... } to have proper ..huge error message. but i'd rather see just line about an error and some info that would allow to identify whats happens but not huge redundant output.,negative
mochajs/mocha,mocha,2012-07-28T22:53:39Z,that part is up to the assertion lib,neutral
mochajs/mocha,mocha,2012-07-30T14:30:07Z,add -o --opts options support. sometimes we put testcases at `test` folder. but sometimes we put testcases at `unittest` folder. the mocha default support `test/mocha.opts` file. add this patch. we can execute it like `mocha -o unittest/mocha.opts`.,negative
mochajs/mocha,mocha,2012-07-31T05:07:09Z,add error reason for test failing in growl notifications. hi i use mocha extensively throughout my node application and have it watching my directory to ensure that code is working as expected. it would be great if my growl notifications could display the reason for a failed test as well. if this is not a priority could u refer me to where i can perhaps learn how to implement this myself? thanks.,negative
mochajs/mocha,mocha,2012-07-31T15:41:43Z,the messages can get pretty massive though that's the problem,positive
mochajs/mocha,mocha,2012-08-01T13:43:51Z,whitecolor thank you. but changing the source of mocha is not a solution for us. is this the only way?,negative
mochajs/mocha,mocha,2012-08-01T21:15:15Z,hi. i would ideally like just the error. not the full stack trace. any suggestions?,negative
mochajs/mocha,mocha,2012-08-01T21:23:20Z,what we could do is truncate the msg if it's too long. for example object comparisons might be really large. i'd be fine with that. we can just trail with …,positive
mochajs/mocha,mocha,2012-08-06T08:28:06Z,tj. could you process this pull request.,neutral
mochajs/mocha,mocha,2012-08-06T22:19:20Z,changed my mind. this is too specific. just use `./test`,neutral
mochajs/mocha,mocha,2012-08-07T05:33:17Z,because i need run automation testcases and unit testcases. it's not able to put them together.,neutral
mochajs/mocha,mocha,2012-08-07T05:34:11Z,i really need this feature. any alternative?,neutral
mochajs/mocha,mocha,2012-08-07T15:43:13Z,js examples next time please :p i can verify that it does work fine for me for test-cases. but yes if a hook fails mocha will pretty much bail immediately. though i suppose we could change that behaviour for after / before hooks only,positive
mochajs/mocha,mocha,2012-08-08T09:22:59Z,not the cases' issue. eg. the unit case need set 2000ms for timeout. but other cases need set 10000ms for timeout. the options not same.,neutral
mochajs/mocha,mocha,2012-08-08T14:37:45Z,so do```test-unit:  mocha --timeout 2stest-acceptance:  mocha --timeout 10s```,neutral
mochajs/mocha,sauce,2015-10-26T19:44:11Z,travisjeffery if you have some secret benchmarking sauce you're hiding from us. please share,neutral
fb55/htmlparser2,jshint,2013-08-26T12:07:22Z,the underscore prefix indicates private properties. this is a common convention. so it won't be changed.if you need to lint the source code. consider changing your jslint options. otherwise. you'll run into may similar issues. btw.. i'm using jshint for this project. so i've already got some style limitations in place.,negative
karma-runner/karma-sauce-launcher,karma,2013-09-02T11:08:18Z,karma-runner will you have a look at this?,neutral
felixrieseberg/ember-electron,eslint,2017-01-19T05:37:08Z,that's just a linting issue -- do you use jshint or jscs or eslint? by default. `require` isn't available in browsers. so your linter is telling you that it doesn't think it's defined. so you need to tell it that `require` is a global. which you can do in the linter's config file. or at the top of the file in which you reference it you can put `/* global require */`.,neutral
felixrieseberg/ember-electron,eslint,2017-01-19T05:56:22Z,no i haven't used any of them jshint or jscs or eslint. i am kind of new to ember and electron. but after writing global requireon top of the file in controller section of my app. now it doesn't get build. and it throws a bunch of errorwhere am i wrong ?my sample code now looks likeimport ember from 'ember';global require;export default ember.controller.extend({actions: {center() {const {remote} = require('electron');const {browserwindow} = remote;const win = browserwindow.getfocusedwindow();  win.center();     }});,negative
chentsulin/electron-react-boilerplate,eslint,2015-06-08T20:02:29Z,sure. let's improve `.eslintrc`,positive
chentsulin/electron-react-boilerplate,eslint,2015-06-08T20:03:55Z,improve .eslintrc. #17,positive
chentsulin/electron-react-boilerplate,uglify,2017-07-01T04:53:00Z,jhen0409 i've tried out `uglify-es` and i don't think it supported classes. not sure if i set it up correctly. will give this another try,positive
AnalyticalGraphicsInc/cesium,eslint,2017-05-10T01:56:10Z,jhwohlgemuth that would be awesome and very much appreciated!  i think your task list sounds perfect.  the only real concern i have over eslint is possible performance issues over jshint. but i think that's just a fact we have to deal with since ultimately eslint will help us do a lot more.i'm happy to answer any questions you have as you go.,positive
AnalyticalGraphicsInc/cesium,eslint,2017-05-18T23:43:47Z,mramato would you like me to tackle transitioning the sandcastle app from jshint to eslint in the same pr for replacing jshint with eslint in the cesium source?at this point. i am unsure of the work required to make the switch for the sandcastle app...> **semi-related question**: have you guys ever considered handling the sandcastle app as a separate project/repo? feasibly. you could even share your eslint config as a npm module (something like `eslint-config-cesium` or `eslint-config-agi`),neutral
AnalyticalGraphicsInc/cesium,eslint,2017-05-19T12:41:13Z,are we confident we aren't losing any rules from jshint here?  at some point we need to explore what new rules eslint could help us with that jshint couldn't.  when we do es6 modules for cesium. i'm sure this will be a big help.kring since you've been using `eslint` in your other projects. do you have any suggestions here?,negative
AnalyticalGraphicsInc/cesium,eslint,2017-05-19T12:52:10Z,jhwohlgemuth thanks for getting this started.  i think that's all of the comments i have for now. but i still want to play with this some more and also educate myself better regarding eslint as a whole.before we merge this. we'll also want to update our webstorm and vs code configs to use our eslint settings instead of jshint. but we can do that at the end.thanks again!,positive
brainflake/node-hubspot,mocha,2016-02-16T15:12:29Z,sounds good to me. also +1 on mocha being a little better for node.,positive
rooseveltframework/generator-roosevelt,standard,2017-04-03T11:59:24Z,during the standard install. the view engine is setup incorrectly. the `package.json` when using the generator on standard creates this `"viewengine": "teddy: html"` but it should be `"viewengine": "html: teddy"`,neutral
libp2p/js-libp2p,uglify,2017-03-26T12:08:55Z,checking for websockets constructor name fails under uglification. currently to add the websockets transport index.js does a check for the constructor.name being 'websockets'. this fails under uglification unless 'websockets' is made a reserved word in the uglify config. as constructor names are one of the things uglify removes. i recommend that either this is documented. or a different solution is devised; there is already a todo in the code suggesting that this is found. for example. we could standardise some kind of boolean flag in a transport class which tells libp2p to include it even if there are no listening addresses. that wouldn't be websocket-specific. and wouldn't require checking the name against a string.,negative
libp2p/js-libp2p,uglify,2017-03-26T18:13:42Z,this is unfortunate. we use this pattern in a couple of places. i guess we need to find a new way to do these kinds of detections.,negative
alfa-laboratory/arui-presets,eslint,2017-05-18T19:07:27Z,кажется. нужно ещё разрешить генераторы в eslint. если не ошибаюсь.,neutral
walmartlabs/eslint-config-defaults,eslint,2015-07-01T00:35:20Z,create eslint.js in each directory and use that as default config,neutral
Esri/esri-leaflet,karma,2013-12-16T16:14:58Z,thanks looks good. ill get to removing the submodules this week.,positive
assaf/zombie,standard,2013-09-14T11:40:46Z,could you comment on the unittest i added? i tried to mimic the existing unit-tests. but i can imagine it not being up to standards somehwo. suggestions are welcome.,positive
iotaledger/iota.lib.js,mocha,2016-09-13T20:39:52Z,work on tests (mocha) . too lazy now. will do in the future.,neutral
datproject/dat,standard,2014-12-03T22:11:39Z,out of curiosity; is there no standard contribute.md we could use? this one looks fine. but it seems like there ought to be a template for different sorts of open source projects.,positive
datproject/dat,standard,2014-12-10T17:50:22Z,i think the `contribute.md` standard is a bit verboose. i also like the one by jden. i think adding a `codeofconduct.md` would be good.however i instead tried to make it a bit shorter now and more about the steps when contributing code.,negative
matrix-org/matrix-react-sdk,eslint,2016-07-01T17:44:09Z,feat: add and configure eslint,neutral
matrix-org/matrix-react-sdk,eslint,2016-07-01T17:44:11Z,can one of the admins verify this patch?,neutral
strongloop/generator-loopback,jshint,2014-07-11T07:40:43Z,example: add jshint and fix style violations. include .jshint\* files in the generated example app. add `npm pretest`script to run jshint.fix style violations in the `rest-api.test.js` template./cc ritch fyi,neutral
vvo/selenium-standalone,selenium,2014-03-05T21:32:39Z,paulboony i removed the request dependency and now you could just make a pr to selenium-standalone modifying the request to use a proxy.please reopen this issue when you have a working pr,neutral
nathanboktae/mocha-phantomjs,mocha,2014-12-10T17:57:33Z,the tl;dr is if you need your reporter output separated. use a reporter that uses `process.stdout.write` and use the `--file` option to output it. and then you can pipe stdout from mocha-phantomjs wherever you want.,neutral
nathanboktae/mocha-phantomjs,mocha,2015-01-02T08:50:12Z,hello.a) nope. i don't have `mocha-phantomjs.opts` file.b) i tried both `testrunner.html` and `./testrunner.html`. the result is the same. are you able to reproduce the problem. maybe it is something with my local setup.,negative
nathanboktae/mocha-phantomjs,mocha,2015-01-05T14:12:20Z,yeah i was thinking about the test. and it is tricky to implement as we do not have a dependency outside the box for the ci build. nor a server running during tests. also nor do we have tests for the existing functionality! i'll take a look at it later.also i did double-check and mocha uses `-i` to invert grep results. so we'll implement that when `-g` gets implemented (tracked in #145),negative
nathanboktae/mocha-phantomjs,mocha,2015-01-05T23:12:02Z,tl;dr - just pick anything that makes sense.names of args is hard :( which side do we lean too. i think there are seldom good answers and we should just be careful and cognitive. so first side (mocha) or (phantomjs) to implement the need is maybe our winner :),positive
paypal/nemo-view,selenium,2015-05-13T19:39:47Z,actually i haven't given it a great deal of thought either. just felt that we could have an abstraction added in nemo-view some how so that users don't have to know internals of selenium-webdriver. wanted to open an issue so that it doesn't fall though. i'll let you know what i think,positive
paypal/nemo-view,selenium,2015-05-14T14:51:27Z,any particular reason we need scroll? selenium-webdriver should by default scroll to an element and interact with it as a normal user would do. if it doesn't then its a bug in selenium-webdriver,neutral
paypal/nemo-view,selenium,2015-05-14T15:07:19Z,yeah. i'm more inclined towards generic use cases. also our core libraries should stay away from using js executor. i would vote to add js if we can fulfill a wider use case to bridge in gaps until selenium-webdriver adds such native support. i'll let grawk decide :),neutral
jfhbrook/node-ecstatic,codecov,2016-01-05T23:15:35Z,coverage data using codecov. unfortunately. i don't know how to test if this works with out doing a pr.,negative
typicode/husky,standard,2016-07-12T16:47:08Z,quick update. works with `nvm` + `github desktop`.need to test with node installed differently.,neutral
fullcalendar/fullcalendar,karma,2015-12-21T01:35:49Z,i found 11 automated karma tests related to non-default languages failing because of how the fullcalendar-specific locale settings are combined with those of moment. i can confirm that this last commit (3fd5318) fixes that.,negative
wycats/handlebars.js,mocha,2012-07-23T18:53:34Z,mocha tests. add node tests running qunit_spec under mocha and revs the node package to the latest.,neutral
cloudchen/grunt-template-jasmine-requirejs,jasmine,2013-06-17T03:52:16Z,i think this template shouldn't be responsible for this kind of improvement. i suggest you to submit your requirement to `grunt-contrib-jasmine` repo since your need doesn't only work for requirejs template.,positive
cloudchen/grunt-template-jasmine-requirejs,jasmine,2013-06-17T17:31:21Z,stilva . this would be appreciated as a pr to grunt-contrib-jasmine if you can abstract out of the template. thanks for the time and interest!,positive
cloudchen/grunt-template-jasmine-requirejs,jasmine,2013-07-09T21:48:40Z,fix for relative base urls. currently `grunt-template-jasmine-requirejs` removes the `baseurl` specified in the require config from each `src` in the generated `_specrunner.html`. the existing logic uses a regex to replace the baseurl which only matches when the baseurl starts with `./`.this pull request resolves `src` scripts against the expanded baseurl providing relative paths in the generated specrunner - allowing relative baseurls that do not start with `./`.,negative
appium/appium,selenium,2013-11-05T11:06:20Z,ios: ui testing with appium. using selenium webdriver with java. how to verify text color. font. background colour in appium on ios deviceiam using selenium webdriver with java,neutral
appium/appium,selenium,2013-11-05T15:28:10Z,yes. you can get a screenshot of the ios device using the selenium screenshot command. the image diff will have to be done with a 3rd party library,neutral
appium/appium,selenium,2013-11-05T15:29:11Z,this is not in the scope of the appium project. you can get an image using the selenium screenshot command. but reading the text from it will have to be done with a 3rd party tool. i know these tools exist. but i cannot recommend one,neutral
appium/appium,selenium,2013-11-06T06:10:12Z,ios: how to verify splash screen in appium. hicould you please help on thisis it possible to verify splash screen that displayed on the ios application. also can we get the text displayed on splash screen. iam using appium-selenium webdriver with javahicould you please help on this,positive
appium/appium,selenium,2013-11-06T06:38:21Z,please stop cross postingon nov 5. 2013. at 10:10 pm. ubmobile notificationsgithub.com wrote:> hi> could you please help on this> > is it possible to verify splash screen that displayed on the ios application. also can we get the text displayed on splash screen. iam using appium-selenium webdriver with java> > hi> could you please help on this> > —> reply to this email directly or view it on github.,positive
appium/appium,selenium,2013-11-11T16:50:49Z,i was able to create test setup for my android apk with your help. now i am able to install. run the application and log into it using c# code and selenium web driver on the emulator.i want to log out of the application which i am not able to do. i need to access the menu button of the emulator and then the logout option which i am not finding any way out. please let me know how we can do it. thanks.,positive
appium/appium,selenium,2013-11-13T20:07:31Z,this is common in selenium testing. you should wait for some element that appears when the code is ready to move on.,neutral
appium/appium,selenium,2013-11-14T09:30:13Z,how to add web driver jar to the test project.?. i dont know whether what i am asking is correct or wrong.i just started working on appium.i am working on windows.how to add webdriver jar to the test project.?"import org.openqa.selenium.*" .so what jars should i add to make these imports work..?will this library be provided with appium for windows which i have downloaded from the official site.?,negative
appium/appium,sauce,2013-09-15T15:12:12Z,appium postings are usually on the [sauce blog](,neutral
appium/appium,mocha,2013-10-28T15:59:03Z,ok. makes sense.when i pulled your branch and reset this time. i ran this command instead:``` bashmocha -t 60000 -r spec test/functional/safari -g "findelement```this time the first test passed. but the logs show appium hanging after `info: shutting down appium session...`maybe something to do with the callback you added?,neutral
appium/appium,mocha,2013-11-14T11:28:54Z,added ability to close tabs in safari when using safarilauncher . by changing the window.close() javascript call we can now close tabs for mobile safari on physical devices as well. this solution bypasses the rule that javascript can only close a tab opened by javascript.in addition we automatically connect to the latest window (rather than the first) as this is the one opened by safarilauncher.tested this on sim (ios6 and ios7) with:<i>mocha -t 60000 -r spec test/functional/safari -g "findelement"</i>and on physical ios6 (iphone) and ios7 ipad and i was able to close tabs and run safari tests.,neutral
appium/appium,mocha,2013-11-14T17:41:28Z,great discovery. thanks!,positive
appium/appium,mocha,2013-11-14T22:00:13Z,jlipps. i think the travis build failed because i squashed the commits.,negative
appium/appium,mocha,2013-11-14T22:02:14Z,travis is passing now. squashing wouldn't cause a build failure.,negative
appium/appium,mocha,2013-11-14T22:20:52Z,thanks!,positive
appium/appium,jshint,2013-09-12T15:39:45Z,looks like travis doesn't like your stylerunning "jshint:all" (jshint) tasklinting app/appium.js...error[l63:c46] trailing whitespace.  this.forcestopapp = this.args.forcestopapp;  [l523:c2] mixed spaces and tabs.forcestopapp: this.args.forcestopappwarning: task "jshint:all" failed. use --force to continue.,negative
stealjs/transpile,mocha,2014-04-21T15:46:38Z,npm test definition to facilitate contributions. `npm test` to runs mocha tests. including code coverage report.,neutral
stealjs/transpile,mocha,2014-04-23T01:02:02Z,great. thanks!,positive
xbmc/generator-kodi-addon,eslint,2017-02-10T12:27:45Z,bumped yeoman and eslint dependencies,neutral
brunch/brunch,mocha,2012-07-22T15:02:18Z,looks awesome!i guess we need an mocha adapter so that testacular can read mocha's results,neutral
brunch/brunch,mocha,2012-07-27T16:58:16Z,actually. looks like this isn't related to mocha. but to brunch.  just got into the office and tried to build after a restart and it's still throwing this error.  any idea how to fix?  we're kicking off a massive multi-dev project today so any help would be appreciated.  i want to make sure there won't be any catches along the way,negative
brunch/brunch,mocha,2012-08-05T15:45:38Z,btw +1 for `test-cli-helpers` and `test-browser-helpers`.this (separate mocha.js) is pretty strange. vojtajina maybe there is some low-level api so testacular will be able to use brunch' concatenated mocha? is it possible to make if there is no?,positive
babel/babel,mocha,2015-02-23T00:41:40Z,and in the case of mocha. it's asynchronous.,neutral
babel/babel,mocha,2015-02-26T00:35:30Z,> the top-level source code example appears to be correct. though the line number referenced there is not correct (though the stack trace below is correct). so maybe an option would be best?probably not an issue. can't really do an option since the require injection stuff is done on require so it can be used like `$ mocha --require babel/register` and you can't override any of the `source-map-support` settings after initialisation.just to verify. would adding in your custom `uncaughtexception` handler before `babel/register` work? if not. i'll just merge this as-is and deal with the (minimal) consequences of having the first line number incorrect.,neutral
babel/babel,mocha,2015-03-10T07:22:40Z,thanks.great work! :+1: the `mocha --compilers js:babel/register` also works.,neutral
angular/angular-seed,karma,2013-08-20T09:40:27Z,angular seed project now works with latest karma. e2e and unit tests were broken - more dependencies needed. frameworks and so on - this puts it back in a working state (with ci working on cloudbees. again. i just needed to ensure that the right packages were installed via npm - which all took rather a lot of guesswork). e2e uses ng-scenario - although i gather a future one may want to use that webdriver based library,negative
angular/angular-seed,karma,2013-08-20T18:49:31Z,updated karma & fixed the ci build. e2e and unit tests were broken - karma configuration for e2e and unit tests were outdated and broken. this puts it back in a working state (with ci working on cloudbees. again. i just needed to ensure that the right packages were installed via npm - which all took rather a lot of guesswork).,negative
angular/angular-seed,karma,2013-08-24T21:23:28Z,hi michaelneale can you please:- [ ] add karma and all the plugins into `package.json`. so that people can easily install using `npm install`- [ ] normalize all quotes in the configs to single quotes- [ ]  squash everything into a single commit,neutral
angular/angular-seed,karma,2013-08-27T02:50:36Z,ok - commits squashed - and also package.json added with dev time dependencies. as requested!,neutral
angular/angular-seed,karma,2013-08-28T01:17:29Z,thanks michaelneale,positive
jshint/jshint,jshint,2012-06-21T14:26:16Z,jshint should support some line breaks without laxbreak. the following code is marked as an error without laxbreak:```foo = bar    ? 'yes'    : 'no';```as does this:```foo = (bar    ? 'yes'    : 'no');```i can understand why the first one might be considered dodgy. it's safe. but easy to misread by an idiot in a hurry. the second one. however. is perfectly fine. the open parenthesis makes it clear that the line break cannot possibly be the end of the statement.note that neither of these is marked as an error by jslint. as jshint pretends to be more lenient than jslint. i fail to see how this could require `laxbreak: true` to pass.even more inane: the error given is "illegal line break before '?'". which is plain wrong. this is doubly so if you consider that the permitted alternative is```foo = (bar ?    'yes' :    'no');```which is no less or more safe than operator-first ternaries.,negative
jshint/jshint,jshint,2012-06-22T17:22:44Z,the other issue is jshint still complains if you have already declared your for in variable higher up in the current function.... it needs the var statement to be inside of the for in loop declaration.  weird.,neutral
jshint/jshint,jshint,2012-06-26T01:38:30Z,hm. i wonder if we can do something like `/*jshint browser:-event.-document */` for this and/or for next. blacklist is an unfortunate name because you usually blacklist something you disallow.,negative
jshint/jshint,jshint,2012-06-26T01:43:16Z,i like the `+/-` syntax as it looks nice.the only issue i see. which i'm not even sure it's much of an issue. is that it will default to adding the option.example:```/*jshint browser: document. -location */```adds document and removes location. although it's not necessarily apparent.we could require `+` for all adds but that would be weird.,negative
jshint/jshint,jshint,2012-06-29T03:25:27Z,that is a java project. you cannot use jshint to lint java code it only works with javascript files.try using the website www.jshint.com and pasting in some javascript code.,neutral
jshint/jshint,jshint,2012-07-01T09:46:01Z,good that it is possible. but i doubt that this option solves the problem. since turning it on will definitely lead to problems and the declaration pattern itself is absolutely valid. convenient. useful and doesn't cause confusion. to me it's the point where a tool like jshint conflicts it's own purpose :|,negative
jshint/jshint,jshint,2012-07-03T06:23:26Z,when using `node-jshint` one can enter files in `.jshintignore` that will be used to skip files. such as these.other than that. per-function `/*jshint .. */` comments are supported. but turning off completely is not possible. and manually embedding third party code within a file sounds like a problem. seems like something a dependency manager or build process should do instead.,negative
jshint/jshint,jshint,2012-07-03T06:31:37Z,can you paste an example of the regexp code that fails jshint?,neutral
jshint/jshint,jshint,2012-07-03T06:37:51Z,if your code doesn't have to work in older browsers / engines. enabling es5 mode in jshint will no longer show these warnings.,neutral
jshint/jshint,jshint,2012-07-03T06:40:50Z,exactly how is this related to jshint?,neutral
jshint/jshint,jshint,2012-07-03T07:00:40Z,the primary reasoning behind this convention is that the operator makes it clear that the line is a continuation of the preceding line. with the operator before the line break. this is much harder to spot.this convention is so widespread that it doesn't make sense to treat it as an error unless the operator can be interpreted as unary and the expression isn't enclosed in parentheses.,negative
jshint/jshint,jshint,2012-07-03T14:15:39Z,krinkle. you are absolutely right that a dependency manager or build process should probably used in cases like the one i described (and is exactly what i ended up doing. i was just in a hurry at the time and wanted to get all my other linted before committing). jshint maintainers: would a `jshint off:true` option be a welcomed patch or is this a "won't fix"?,positive
jshint/jshint,jshint,2012-07-08T14:11:56Z,line and character offset differs from documentation. the documentation included in `jshint.js` describes the error fields `line` and `character` as follows:```line      : the line (relative to 0) at which the lint was foundcharacter : the character (relative to 0) at which the lint was found```actually. both line and character are always 1-relative. for example. when checking a js file that only contains the single character `'#'`. the error object has these fields:```{  line: 1.  character: 1.  reason: "expected an identifier and instead saw '#'.".  …}```this has been the case with jslint already. i'd suggest to adjust the documentation.,negative
jshint/jshint,jshint,2012-07-11T01:45:50Z,also curious. has this feature been implemented?,neutral
jshint/jshint,jshint,2012-07-11T19:05:28Z,mutationobserver use fails. `mutationobserver` is present starting in firefox 14. but jshint doesn't know about it.,negative
jshint/jshint,jshint,2012-07-12T15:25:01Z,fjpulidop if you can provide a use case that relates to jshint then i'll reopen the ticket.,neutral
jshint/jshint,jshint,2012-07-14T10:59:59Z,for jshint-next. i'd like to see a more complex solution where one can provide regex-pattern for each allowed type of definition (and jshint warns if it does not match)..something like. e.g.`[a-z]\w+[a-za-z0-9]` for function names.`[a-z][_a-z0-9]+[a-z0-9]` for const variables.`[_a-z]\w+[a-za-z0-9]|[a-z]+` for variable names. ...`[a-z]\w+` for property names ... (_it's only an early idea - maybe there are many more things to consider_)so yes and no. i think we should stop support for all the jshint options marked as legacy (and some more) - but we have to provide a better solution (which can lead to the same results) ;),neutral
jshint/jshint,jshint,2012-07-17T09:27:38Z,any news to share about this?,neutral
jshint/jshint,jshint,2012-07-18T08:34:46Z,smarttabs not works in grunt. i am parsing/lint some javascript code and has problem with switch off this warning "mixed spaces and tabs." reproduce:create some file with mixed space ans tabsadd smarttabs to grunt.jsgrunt lintresult:still jshint produce warnings.,neutral
jshint/jshint,jshint,2012-07-18T16:44:07Z,yes. sorry for the confusion. i am using `regexp: true` but since the `insecure '^'` is not documented on the jshint web site under that option. i didn't know that this option was causing the check to be enabled.although it would be nice to have separate options. perhaps the more immediate problem then is the documentation bug.,negative
jshint/jshint,jshint,2012-07-18T18:05:10Z,smarttabs !== mixed spaces and tabs.can you please post an example of the code that triggers this warning?,neutral
jshint/jshint,jshint,2012-07-18T18:07:39Z,sure i will give you some samples in next post - i think that this warning is very low priority compare to others so it should be allowed to off this warning and others.,negative
jshint/jshint,jshint,2012-07-18T18:14:14Z,`/*jshint scripturl:true*/`,positive
jshint/jshint,jshint,2012-07-18T18:15:40Z,eek. you can format code by adding 4 spaces in front of it. otherwise post a jsfiddle or a gist.,neutral
jshint/jshint,jshint,2012-07-18T18:18:12Z,not want to reformat code because such restriction since white spaces not impact on execution - what is jsfiddle or gist is it related to jshint?,neutral
jshint/jshint,jshint,2012-07-18T18:23:54Z,somewhere to post your code so it doesn't get mangled and i can figure out what's going wrong.,negative
jshint/jshint,jshint,2012-07-18T18:26:15Z,i will do screenshot.,neutral
jshint/jshint,jshint,2012-07-18T18:34:16Z,are the dots spaces and the >> a tab?,neutral
jshint/jshint,jshint,2012-07-18T18:58:53Z,it should not warn since this warning is not important comparing to errors or other warnings it make mess not information.**why not to stop this warning if value of it is low and make mess?**it is my own code but not want fight with space since not care about it at all - it not give any value for user of my program :)i am afraid that writing middleware is too complicated - how much time is need to write such middleware?i try to use grep but it is multiline and  not works on windows - whatever it make grunt less usable.not want use fixmyjs at all and any automatic tool formating code since it generates errors and requires always additional testing or code review. do you have other suggestions how to easly solve such trivial problem?,neutral
jshint/jshint,jshint,2012-07-18T20:48:27Z,that's the spiritual heritage of jslint ;)in some cases it's also really helpful. e.g.`[0-9-a]` should be rewritten as either`[-0-9a]`. `[0-9a-]`. or `[0-9\-a]`even it's not necessary at all - jshint is not a parser. it's a linter ;)for now. you can use `/*jshint regexp: true. regexdash: true */`to suppress some of the messages.hopefully we can make it more configurable in jshint-next..,positive
jshint/jshint,jshint,2012-07-19T07:26:09Z,thanks. it looks that middleware is easy but how to attach it to grunt when i am using jshint with lint - i have no idea where is hook/binding point?what should be add to command line like "grunt lint" or grunt.js?,positive
s-panferov/awesome-typescript-loader,jasmine,2016-07-26T02:43:58Z,i experimented a bit more and found that explicitly using the `types` array in tsconfig fixes it. but it shouldn't be necessary:```    "types": [      "jasmine"    ]```,neutral
angular/angular.js,standard,2015-03-23T16:54:50Z,that's what i was going for! though i would hope it could be pulled off without breaking changes?,positive
dadi/web,standard,2016-03-11T16:13:56Z,option to choose whether logs are in text or json format. when troubleshooting production environments. under pressure and with limited bandwidth / time. it's key to process the log files with standard linux command-line tools. so it would be great to have a configuration option so that log files can be in text instead of json,positive
dadi/web,standard,2016-03-12T13:42:47Z,thanks for the info; the thing is that when you are on a shaky mobile connection. even adding a pipe to another command can be a challenge anyway. solved with this```$ cat .bash_aliases jtail() { tail "$" | bunyan; }jgrep() { grep "$" | bunyan; }```,positive
jribble/grunt-jasmine-node-coverage,jasmine,2014-04-30T16:18:53Z,load the configuration settings based on the task's name without assuming "jasmine_node". it's possible to rename the task using `grunt.renametask`. but if the task is renamed then the settings are not loaded correctly.this is useful if you want to have multiple test suites which load different configs.in particular. for my implementation. i want one test suite which runs with `userequirejs: '...'` for our legacy code. and another with it set to false for our new code. and the only way i can seem to be able to do this is to have two instances of `jasmine_node` running._disclaimer: i'm a bit of a grunt n00b. so if there's a better way of doing this. then i'd be very glad to know_,negative
jribble/grunt-jasmine-node-coverage,jasmine,2014-05-15T15:11:06Z,+1 for this. i'm facing the same issue.,positive
DefinitelyTyped/DefinitelyTyped,standard,2015-09-21T19:11:16Z,ryancavanaugh despite not being in that list. it's `miterlimit` based on the convention.> all dom properties and attributes (including event handlers) should be camelcased to be consistent with standard javascript style.and the actual svg attribute is `stroke-miterlimit`.i had the same thought before i +1'd so i looked it up :grin:,positive
senecajs/seneca,eslint,2015-11-09T13:51:04Z,i've started working on this,neutral
senecajs/seneca,eslint,2015-11-10T08:12:29Z,geek it seems that all the tests are corrected so i don't have to do a pr at this moment. also. should i close this?,negative
senecajs/seneca,eslint,2015-11-18T23:21:05Z,build.sh references jshint. but the project uses eslint through lab now?also: should we be using pre-commit hooks instead. through something like husky?,neutral
senecajs/seneca,eslint,2015-11-19T18:45:36Z,if we have a working ci system on our pull requests. like we do today... and people run tests prior to a commit. i think we can avoid the hook.  i know you can force a commit and avoid the hook. just not a fan of adding it in the first place.,negative
