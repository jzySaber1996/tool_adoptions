lindell/JsBarcode,coveralls,2016-08-04T15:18:21Z,this will probably not be node before es6 import / export comes to node since coverage on compiled code isn't what i want.,neutral
redux-saga/redux-saga,eslint,2018-01-05T10:39:29Z,you'd have to share a repository with the issue reproduced to get help. unfortunately i'm not familiar with `eslint-plugin-import` that much.,negative
webpack-contrib/sass-loader,eslint,2017-05-24T09:35:43Z,namespace: package name update. how about update the package name to webpack-sass-loader? at the moment. the webpack plugins/loaders namespace isn't very consistent. in comparison. babel. eslint. react. redux all have the namespace in a consistent convention. helping make the dependency tree clean.,neutral
webpack-contrib/sass-loader,eslint,2017-06-06T20:58:40Z,chore(package): update dependencies. exclude `eslint-plugin-*`. because in `webpack-default` we have own plugins and configuration.,negative
webpack-contrib/sass-loader,eslint,2017-06-06T23:15:47Z,michael-ciniawsky can we merge and release patch. no access :smile:,positive
infernojs/inferno,eslint,2017-06-06T22:10:12Z,use prettier . close #949 and cover the codebase to use prettier. i've loosened the `tslint` config and removed `eslint` as they are now handled by prettier itself for style. we were only using `eslint` for tests since our main source is written in typescript so it didn't seem much point for the added complexity.,positive
infernojs/inferno,eslint,2017-06-10T19:40:17Z,closing this for now.,neutral
infernojs/inferno,eslint,2017-06-12T21:09:26Z,activate prettier. close #949 and cover the codebase to use prettier.i've loosened the tslint config and removed eslint as they are now handled by prettier itself for style. we were only using eslint for tests since our main source is written in typescript so it didn't seem much point for the added complexity.,positive
ramda/ramda,eslint,2016-05-31T00:36:08Z,quick update: i tried updating to latest and am running into a problem with eslint not recognizing 'arraybuffer'. 'int8array'. and 'promise' and throwing a `no-undef` error when linting. i'm digging in to see if i can figure out why and get it passing.,negative
request/request,eslint,2015-03-20T10:35:16Z,this pr is looking good to me. we can think about enabling some of the `eslint` options later. the only thing that i'll suggest is to rebase all commits into one. as they are too small to have any meaning on its own.,neutral
request/request,eslint,2015-04-10T08:23:28Z,that's great. i'm only not too sure about the `space-before-function-paren` rule.if you run (without the tests)```node node_modules/.bin/eslint lib/ *.js```with `"space-before-function-paren": [2. "never"]` you get 99 warningswith `"space-before-function-paren": [2. "aways"]` you get 41 warningsso it turns out that there are more occurrences using space. of course without the tests. but they were largely refactored by one person at some point.so i'm for keeping the things as they are for now regarding this rule.,neutral
request/request,karma,2015-06-04T12:47:57Z,webpack karma config. this adds a configuration for webpack as a reference to anyone using it over browserify since it requires some special configuration to work. there is a todo task here to make the tests run with both webpack and browserify configs in series. but that will take some work as the current test setup won't allow that easily. for now. having this example will help others to figure out how to get request working with webpack.,positive
request/request,coveralls,2015-05-17T17:24:02Z,nylen that's the thing. there is some weird logic in coveralls that you have to be the one initially added the project to be able to delete it. also your login token will be used for calls to the github api. not mine. so without you re-authenticating it won't work.,neutral
request/request,coveralls,2015-05-17T17:32:24Z,hmm.. want me to delete the repo from coveralls and see if that helps?,neutral
request/request,coveralls,2015-05-20T17:39:15Z,a few minor fixes:. - moved `removerefererheader` to the appropriate section of the options docs- pass `options` to the redirect's module `onrequest` method. as it makes it more obvious from where these options are coming from (the extending of the request object in the ctor is a bit unexpected to say the least)- attached the `debug` function to the request's prototype to make it accessible to the modules through the request instance<br>  this also fixes the `request.debug` call in the `har` module. which obviously is not covered by the tests atm. or rather it should be obvious if coveralls was actually working ..,neutral
pixijs/pixi.js,jshint,2017-01-16T13:29:16Z,friksel thanks for the issue. i ran the built code generated with all those excludes and it ran fine in chrome/firefox. also. browserified and/or minified code is not intended to be run through jshint. color-coding in the editor like sublime will typically have issues with minified js files because of the underlying regular expressions used to create the colorization. i'm using sublime text 3 and only half the code is colorized correctly. from my experience. this is not unusual.,positive
reactjs/react-docgen,eslint,2016-11-22T23:38:33Z,i wonder if going the route of eslint and having pluggable parsers is the right way. it's too bad we can't just have one,negative
angular-ui/ui-utils,karma,2013-09-27T21:51:31Z,updated karma + config. tested and works.,neutral
angular-ui/ui-utils,karma,2013-09-27T21:53:33Z,looks good - thank you.,positive
angular-ui/ui-utils,karma,2013-09-27T21:58:58Z,wow. that was quick!,positive
angular-ui/ui-utils,karma,2013-09-27T21:59:44Z,clean commit and clean message makes for quick merges :),neutral
elastic/kibana,selenium,2016-03-15T23:02:25Z,it does not currently have selenium tests. correct. we're working on it. leedr any idea how that looks right now?,neutral
serverless/serverless,eslint,2016-09-25T13:31:28Z,yes they should.. it's the difference between```npm install -g eslinteslint .```(which is running eslint directly because global node module bin is in your path)and```npm install eslint(add script "lint: eslint ." to package json)npm run lint```(which is npm running a script where local node module bin is put in to your path.)when any npm script execution returns a nonzero status code (e.g. linting failed) npm prints that debug info.,neutral
serverless/serverless,eslint,2016-09-26T15:34:28Z,mocha supports a `mocha.opts` file within a directory that houses the test where you can specify various opts. maybe it would be cleaner to revert a bit back to your regular eslint style. and just deal with timeouts that way. (so move integration_test.js to /integration/...) and add a mocha.opts file there that specifies a timeout for all integration tests of 10s or whatever?edit: sorry. these are not in integration_test... i forgot.,negative
serverless/serverless,eslint,2016-09-30T02:38:18Z,allow to provide a default value for plugin options. i believe it would be useful to allow a default value for plugin options.``` jsoptions: {  mode: {    // eslint-disable-next-line max-len    usage: 'specifies the mode: "local". "remote". "both"'.    shortcut: 'm'.    default: 'remote'  }.}.```this has two benefits:- a default is not hidden in code- the help command can provide this information on the help command & hints,positive
metarhia/metasync,eslint,2017-09-07T01:00:05Z,i've taken another look. and yeah. `handle-callback-err` failures are legitimate. but all of them are in tests. not in the library code itself. i'd say land this as-is. and then remove `"handle-callback-err": "off"` from `.eslintrc.json` and add `test.notok(error. 'operation must not return an error');` where necessary as a separate commit.,negative
janl/mustache.js,eslint,2015-10-15T09:06:57Z,linting cli tool & fixing its current style issues. ensure the same code style on the cli tool. as we do on the main file `./mustache.js`.also minor .eslintrc change to be able to use `process.exit()`. instead of having to `throw new error()` to exit the process.,neutral
janl/mustache.js,eslint,2015-10-15T10:08:51Z,cool. thanks! :rocket:,positive
Palindrom/Palindrom,sauce,2017-10-03T07:52:38Z,>i thought that only palindromdom really needs wct and seleniumyou're right. >  palindrom itself should be testable in node without a browser and selenium.it is 100% testable```shnpm run test```runs perfectly. if you want to test the whole thing you can use:```shnpm run test-sauce```so i would say this issue is done.,positive
valor-software/ngx-bootstrap,karma,2016-07-19T13:47:18Z,fix(build): change src path for karma,neutral
tessel/t2-cli,coveralls,2017-03-25T18:14:12Z,rwaldron can you help me read the coveralls report? i can't tell what it doesn't like about this pr,negative
tessel/t2-cli,coveralls,2017-03-27T18:40:24Z,frijol i'm having trouble understanding why `nyc` and coveralls (the website) are reporting different numbers than what i see locally :|,negative
airbnb/javascript,eslint,2016-09-15T08:25:21Z,`echo 'const foo =`foo${bar}`;' | eslint --stdin --no-eslintrc --rule prefer-template:2 --rule quotes:2 --parser-options '{ecmaversion:6}'` has no errors (with latest eslint),neutral
airbnb/javascript,eslint,2016-09-15T16:31:00Z,perhaps your atom is set to use the global eslint? you basically want to completely uninstall eslint globally. and configure atom to look at your local one.,neutral
airbnb/javascript,eslint,2016-09-19T01:41:44Z,higher order functions and the arrow-parens rule. the `arrow-parens` rule requiring parentheses for blocks and no parentheses for one-liners takes no account of higher order functions.i find it downright bizarre that i should be required to write code like the following:``` jsreturn next => (action) => {  // etc};```i don't know whether this is a config issue or an eslint issue.,negative
airbnb/javascript,eslint,2016-09-19T01:47:58Z,this is definitely our config and our styleguide. a function with one arg that's using implicit return must omit the parens; any function using explicit return must include the parens. (one-liner versus blocks isn't the issue),neutral
airbnb/javascript,eslint,2016-09-19T01:50:50Z,i don't understand why you've closed this. do you really think it makes sense to write higher order functions in this fashion?,neutral
airbnb/javascript,eslint,2016-09-19T02:01:59Z,when you switch from implicit to explicit return in that chain. the parens help visually break apart the implicit part of the chain from the explicit part of the chain.in addition. very importantly. it takes something that is developer choice (whether to omit or include the one-arg parens) and legislates it. so that there's only one correct way to write it for a given codebase.this is the style we use inside airbnb - you're more than welcome to override any part of our config in your own eslintrc. or to fork the guide and make whichever changes you like.,neutral
airbnb/javascript,eslint,2016-09-19T02:19:40Z,for what it's worth. i'm not taking issue with either no parens for one line one arg functions or required parens for block body functions; i simply find the inconsistency jarring for higher order functions. obviously you don't agree. so i'll leave the complaint there.> this is the style we use inside airbnb - you're more than welcome to override any part of our config in your own eslintrc. or to fork the guide and make whichever changes you like.i realise this. but i hate fragmentation. so i prefer to avoid overrides. hence i'll bring to your attention anything i see as anomalies. in this case what i thought was a bug turns out not to be.,negative
airbnb/javascript,eslint,2016-09-19T02:35:52Z,just so i understand your preference - you'd prefer that the one-arg paren either be always required or always forbidden?,neutral
airbnb/javascript,eslint,2016-09-19T03:04:13Z,i'm saying where there is a block body all the parentheses should be required. since it's not a true one-liner. i.e. `(x) => (y) => (z) => { … }`,positive
airbnb/javascript,eslint,2016-09-19T03:06:14Z,it's not about being a one-liner tho - single-arg implicit return can be on multiple lines too. depending on what it's returning. it sounds like you want a special rule for when the single-arg of an arrow function is chained with other one-arg arrow functions - which is a scenario that eslint doesn't yet cover.,neutral
airbnb/javascript,eslint,2016-09-20T08:39:44Z,did you update `eslint`. as well as all the peer dependencies? specifically. you should use the `npm install` shell command in the readme.what's `npm ls` output?,neutral
airbnb/javascript,eslint,2016-09-20T09:12:01Z,yes. i reinstall gulp-eslint. it works now.thanks. ljharb,neutral
airbnb/javascript,eslint,2016-09-20T16:50:06Z,this is now waiting on a release of `eslint-plugin-import`.,neutral
airbnb/javascript,eslint,2016-09-24T16:13:11Z,upgrading eslint is the solution to the op as well.,neutral
airbnb/javascript,eslint,2016-09-25T03:36:51Z,steida thanks - for the prop types ones. please file bugs on eslint-plugin-react if you find you still need the overrides. for the no-class-assign one. it seems like you could do `const inneremail = class email { … }` and then `const focusedemail = focus(inneremail. 'focus');` etc?,positive
airbnb/javascript,eslint,2016-09-26T03:28:39Z,peterhb999 do you have a global eslint? i think by default atom runs the global one. not the local one? `npm uninstall -g eslint` to be sure.,neutral
airbnb/javascript,eslint,2016-09-26T03:29:10Z,you may not have updated `eslint-plugin-import` - can you use the install command in the readme of the package. so that all the proper peer deps are installed?,neutral
airbnb/javascript,eslint,2016-09-26T16:07:11Z,i'd argue that accepting duplicate import paths when one is `import type` and another is just `import` should probably be filed as a corner case with the import eslint plugin. seems like a valid use case to me.,negative
airbnb/javascript,eslint,2016-09-26T17:46:44Z,relekang lencioni lelandrichardson since `no-duplicate-imports` is an eslint core rule. they'd need to support flow in order to detect that corner case. i think it would make more sense for flow to allow you to combine `import type`s and `import`s all into one statement.,neutral
airbnb/javascript,eslint,2016-09-29T07:58:13Z,how are you running eslint? are you sure you're running a local one. not a global one?,neutral
airbnb/javascript,eslint,2016-09-30T00:38:50Z,are you sure you are not using a global install? try `npm uninstall -g eslint`,neutral
airbnb/javascript,eslint,2016-09-30T05:21:40Z,ljharb using `eslint` as a `devdependencies` within my application. configured it to run with `atom` editor and show warnings on save. i do have a `gulp` lint task. but the issue i see is thrown by the editor itself.```gulp.task('lint-jsx'. () =>  gulp.src(files.jsx.concat(ignorelist))    .pipe(eslint())    .pipe(eslint.format())    .pipe(eslint.failaftererror()));```,neutral
airbnb/javascript,eslint,2016-09-30T05:39:15Z,hozefaj the only thing i've seen with atom is either mistakenly using a global eslint. or. not restarting atom after updating node modules. beyond that. unless you can reproduce the error on the command line directly. i'd file a bug with atom.,negative
airbnb/javascript,eslint,2016-09-30T05:40:50Z,yes. i think that's a section we need to add - and since trailing function commas are now supported by eslint. we'd require those as well.in other words. a section that simultaneously discourages long function signatures/calls. but describes the proper way to indent them multiline with trailing commas. would be a welcome pr.,positive
airbnb/javascript,eslint,2016-10-02T18:05:25Z,james075 if you are still having issues please file a bug on `linter-eslint`. i'm _guessing_ that it is pulling the wrong `eslint` instance for some reason but that's a problem that should be diagnosed over there as it has nothing to do with this project :wink:.,negative
airbnb/javascript,eslint,2016-10-02T21:37:46Z,noahleigh yes. that's a good point - the dom is one of the places that makes it very hard to avoid mutation (which is part of why we use react at airbnb). for cases like these. i'd use an eslint override comment: `// eslint-disable-line no-param-reassign`,negative
airbnb/javascript,eslint,2016-10-04T05:36:09Z,caisah of which dependencies? the only thing we're out of date on (via semver ranges) is eslint-plugin-import. and #1101 is open to handle that in the next semver-major of eslint-config-airbnb-base.,neutral
airbnb/javascript,eslint,2016-10-05T15:35:58Z,yep. as of last week. they're now stage 3,neutral
airbnb/javascript,eslint,2016-10-05T15:56:53Z,ljharb sorry i searched for "eslint-plugin-import 2" in the issues,neutral
airbnb/javascript,eslint,2016-10-05T16:47:16Z,everyone still needs to use a transpiler right now to use them though. is the reason they've been added is because they're more of a certainty now and the spec is less likely to change. (sorry. not up to speed on the stage process),neutral
airbnb/javascript,eslint,2016-10-05T17:14:04Z,silverlight513 yes. the guide assumes you're using babel. and encourages it (and the linter config requires it implicitly).yes. in stage 3. features only change in response to browser feedback about implementation feasibility or web compatibility. and this one in particular is highly unlikely to change.,neutral
airbnb/javascript,eslint,2016-10-06T14:36:03Z,is there an eslint rule that could enforce this? if not should it be part of core eslint or eslint-plugin-import?,neutral
airbnb/javascript,eslint,2016-10-06T16:16:06Z,petersendidit there does not yet appear to be. i think it probably belongs as a core rule. but would be fine in eslint-plugin-import as well.,neutral
airbnb/javascript,eslint,2016-10-09T17:01:19Z,i'd recommend not installing anything globally - if you do. i think you'd need to manually cd into the global location where `eslint-config-airbnb` is installed. and manually install the peer dependencies.it's best to install everything locally. only.,neutral
airbnb/javascript,eslint,2016-10-09T17:04:25Z,is there a way to install it locally and use eslint for atom. sublime text? i'm using the airbnb standard for color linting in gui editors.,neutral
airbnb/javascript,eslint,2016-10-09T17:30:28Z,if i understand. i should install airbnb standard inside one of my projects. then i set the eslint executible path to this local install in sublime text / atom?maybe i just create a new node project which contains all of the eslint. airbnb standard related stuff and i set this eslint's path to the gui editors? kinda like a .dotfiles repo. but only for local installs for gui editor dependencies?,negative
airbnb/javascript,eslint,2016-10-10T12:41:55Z,ljharb i'm with dlwalsh and i've come here just to find an issue or create one xdi don't know what does the parens have to do with the curly brackets here. they serve different purposes and they are **independent** from each other.the only thing that depends on parens vs no-parens **is the number of arguments**. if 0 or >1. required. else nope. please. it doesn't matter if there is a return or a block. **that doesn't have anything to do with the number of arguments!**this is more like... if you want parens because of readability. because not everyone is haskell programmer (this is a bad argument). because of easy refactoring. etc... just use parens everywhere no matter what! but why create this rule so special? it makes no sense.,negative
chaijs/chai,mocha,2013-07-02T11:36:10Z,if i may pitch in on this last message. specifically the part about decorating the `chai` object:a official way to access an exported value of each plugins from within the test suites. like `chai.plugins.myplugin.<..>` would be nice for programmability.also an export of the various utils. something like `chai.util.inspect()`. this could also hold helpers like `isarray`. `objectdiff` etc so we can use them when debugging failing tests instead of carting them around ourselves (and without dual import issues when writing cross node/browser tests). and maybe it's interesting to think about the ideal way to present a custom multi-line error message. its easy to just pass it in as the regular message but this does clutter reporter 'spec' or 'list': you'd want a single-line in the spec-tree-structure and a detailed report below (like the way the string-diffs and stack trace show up). i'm not sure if this is possible with the current mocha though: i tried mashing things in the actual / expected values and disabling `showdiff` but mocha will always diff strings.,positive
liferay/clay,eslint,2018-06-25T13:34:44Z,updates .eslint to forbid for of loops | fixes #1031,neutral
liferay/clay,eslint,2018-06-29T09:01:57Z,just started reviewing :) <br><br>:octocat: *sent from [gh]().*,positive
velesin/jasmine-jquery,jasmine,2014-02-23T00:31:53Z,that isn't from jasmine-jquery,neutral
velesin/jasmine-jquery,jasmine,2014-02-23T08:34:48Z,sorry. was node-jasmine-jquery...  (installing jasmine-jquery from node turned up that one instead)that project looks abandoned. is there a better suggestion for running headless with e.g. jsdom?thanks :),negative
velesin/jasmine-jquery,jasmine,2014-03-03T21:35:57Z,release on npm. it would be nice if jasmine-jquery was available over npm. currently only some old fork is available there.,positive
velesin/jasmine-jquery,jasmine,2014-03-04T15:45:30Z,second that. i've just wasted 10 min of trying to use `getjsonfixture` with old fork from npm.,negative
videojs/video.js,standard,2017-02-01T20:23:20Z,should we expose the ability to deregister a component/tech?. ## proposalwe have a method to deregister a `plugin` called `deregisterplugin`. is there any reason not to have something similar for `component`'s and `tech`'s. i think that these methods would be:* `component.deregistercomponent`* `tech.deregistertech`### pro's* some unit tests will be easier* more standard api* there doesn't seem to be any good reason that `component`'s/`tech`'s should not be deregistered### con's * more code to support* may not be used by anyone outside of the video.js organization,negative
videojs/video.js,standard,2017-02-01T21:56:35Z,nope. it'll just override what's currently registered.,neutral
videojs/video.js,standard,2017-02-01T22:14:41Z,in `tech`'s case it will also re-add that same component to `defaulttechorder_` twice. not sure if that will cause issues or not. seems like a major edge case bug.,negative
videojs/video.js,standard,2017-02-01T23:40:37Z,the example it tests does follow accessibility guidelines - it's just that automatic testing can't distinguish when one thing is turned off by javascript. and another thing is turned on. so it thinks the two elements overlay each other. that's why it's flagged as a warning. not an error - it's recommending that this issue is checked manually. there isn't a standard way to flag to the checker that this is okay. and shouldn't cause a warning. so the easiest thing is to turn off that warning. alternatively we could turn off all warnings. and just look for errors. but this gives better coverage than that approach.,negative
sitespeedio/browsertime,selenium,2015-08-28T16:07:45Z,soulgalore thanks for looking into this. i will try your suggestion when i get a chance. i thought that using seleniumserver parameter would disable browsermobproxy. would installing browsermobproxy on the selenium hub and nodes fix this?once again awesome job guys! :)warm regardschris,positive
prettier/prettier,eslint,2017-10-22T12:57:38Z,so what if i don't want to use eslint? i think should be an option to insert that newlines,neutral
prettier/prettier,eslint,2017-10-22T15:23:37Z,i got prettier working for `<script>` tags in my `.vue` files using the following setup:packages:```eslint eslint-plugin-htmleslint-plugin-prettiereslint-config-prettier```eslint config:```json  "eslintconfig": {    "extends": [      "eslint:recommended".      "prettier"    ].    "plugins": [      "prettier".      "html"    ].    "rules": {      "prettier/prettier": [        "error".        {          "printwidth": 90.          "semi": false.          "trailingcomma": "es5".          "bracketspacing": false.          "singlequote": true        }      ].      "camelcase": [        "error".        {          "properties": "never"        }      ]    }  }```run using:```basheslint --ext .js..vue src --fix```,neutral
prettier/prettier,eslint,2017-10-23T08:17:16Z,> i'm surprised to hear you say that about those coming from the airbnb config.it's kind of all-or-nothing with compatibility. this option is not 100% compliant with airbnb style and therefore people running that eslint config will report issues.,neutral
prettier/prettier,eslint,2017-10-23T10:27:46Z,great flybayer but `eslint-plugin-html` is not compatible (anymore) with `eslint-plugin-vue`.,positive
prettier/prettier,eslint,2017-10-30T17:19:10Z,if you're trying to get this to work with the vue cli. just add this line as one of the rules in the .eslintrc.js file in the root folder...`'space-before-function-paren': 0`,neutral
prettier/prettier,eslint,2017-11-03T13:26:39Z,let me try to shred some light on this.in vscode i started to experience the following message from prettier when i saved my nodejs project:> importdeclaration should appear when the mode is es6 and in the module context.it only happend in my nodejs project. using webpack. typescript and the import syntax - not in react with the same tech. the reason for this was the following setting:   > "prettier.eslintintegration": true.if it's changed to false the message will "go away". so something with eslint is conflicting here.,negative
prettier/prettier,eslint,2017-11-07T08:36:12Z,im not using eslint anymore. so it was more of an info to anyone experiencing thise,neutral
prettier/prettier,eslint,2017-11-09T23:35:17Z,docs: eslint config is orthogonal to plugin,neutral
prettier/prettier,eslint,2017-11-10T05:15:58Z,i just edited the text a bit because there are stylistic rules prettier doesn't care about (like `camelcase`).anyway. this is a great improvement to the docs. thank you very much!,positive
prettier/prettier,eslint,2017-11-10T17:30:28Z,for typescript. i think we can use `typescriptnext` directly. which is the daily build from ts master. but i guess we'll have to get updates from `typescript-eslint-parser` first.,neutral
ocombe/ocLazyLoad,karma,2015-04-09T23:31:07Z,yeah. the router will definitely get hit in e2e tests.it may be true that we simply shouldn't try to test the router from the jasmine / karma tests. however. i like doing as much as possible from them because they're so much faster and reliable compared to protractor / selenium tests.,positive
sroze/ngInfiniteScroll,selenium,2015-10-26T14:25:23Z,looks like the build failed due to a timeout issue with saucelabs selenium server. is this something you are interested in merging into your branch? i'm also about to check-in a bug fix against this. $interval only runs once in firefox when the delay argument is not provided.,negative
bencevans/node-sonos,standard,2015-09-11T15:21:41Z,i had this same problem. changing the broadcast address did not work. the solution: remove my 'sonos bridge' from the sonos system. and either: connect ethernet directly to a speaker. or use standard wifi setup with the sonos. i went with the latter as sonos themselves have now deprecated the bridge device. the bridge must be blocking/dropping the broadcasts from getting onto the sonos-net where the speakers are (?). i didn't check this with wireshark though. so i might be wrong.,negative
ariatemplates/hashspace,sauce,2014-06-19T09:28:27Z,chore: print out sauce connect logs only after failrue. tiny pr to only print out souce labs logs if things go bad and avoid spamming travisci output when things are in order.,negative
ariatemplates/hashspace,sauce,2014-06-19T09:47:01Z,:+1:,neutral
ariatemplates/hashspace,karma,2014-06-23T08:16:09Z,well benouat mentions the playground - whereas i am here interested in the tdd task (i know there is also a karma:tdd task. but i personally prefer the tddrt which i find more comfortable).so i will ineed move the renderer import inside the express function (will do this tonight) - thx.,negative
nightwatchjs/nightwatch,mocha,2016-02-18T20:37:17Z,allow colored/chalked output from tests. i'm in the process of porting my tests from mocha to nightwatch. and discovered that any output written to `console.*` or `process.std*` by my code (not nightwatch itself) is stripped of colors before it reaches my terminal. i tried explicitly setting `disable_colors` to false. but it had no effect.,negative
nightwatchjs/nightwatch,mocha,2016-02-21T13:00:01Z,can you provide an example?,neutral
nightwatchjs/nightwatch,mocha,2016-02-22T16:44:01Z,``` jsconst chalk = require('chalk');module.exports = {  'test1': function() {    console.log(chalk.red('hello') + chalk.blue('world'));  }};```digging through the chalk docs. i found that i could run `force_color=1 nightwatch` and get the expected output. so at least there's a workaround.,neutral
Dash-Industry-Forum/dash.js,mocha,2016-07-19T10:42:02Z,i checked the output of the build process and everything seems to work as expected which is great.unfortunately two things are still broken: - the tests still don't run under grunt.- no coverage information is collected.to get the test running again:- in gruntfile.js change `mochaoptions: ['--compilers'. 'js:babel/register'].` to `mochaoptions: ['--compilers'. 'js:babel-register'].`- create `.babelrc` in project root with following contents```{  "presets": [ "es2015" ]}```i have no idea why converage information is not collected.,negative
Dash-Industry-Forum/dash.js,mocha,2016-07-19T11:02:28Z,ah. i didn't run `grunt test` is isolation. i've updated the gruntfile to use the same configuration file as the other tests use (the `mochahook.js`). i'll look into why coverage is failing.,negative
FezVrasta/popper.js,sauce,2017-06-29T12:11:56Z,okay. saucelabs doesn't work that way :),neutral
FezVrasta/popper.js,sauce,2017-06-29T12:23:56Z,oh. okay. i never used saucelabs before. so i naively tried :)hmm. travis doesn't re-run after my change. how can i trigger it manually ?,negative
FezVrasta/popper.js,eslint,2017-06-17T20:00:35Z,hey hey hey... looks like i managed to break codeclimate and bithound in a single shot! they both don't support local lerna packages like my `eslint-config-popper` for eslint,positive
adamgruber/mochawesome,mocha,2015-07-23T05:47:51Z,reset total test counter in reporter init. when using mochawesome multiple times in one process - for example tests are executed on web server. then total tests counter is not reseted before each run. first run has correct count of tests. but second round is starting when previous ended - which means statistic is broken.i am a newbie in forks and pull requests. maybe something important is missing now..,negative
adamgruber/mochawesome,mocha,2015-07-24T13:41:09Z,can you explain your use case a little more?,neutral
adamgruber/mochawesome,mocha,2015-07-27T06:42:05Z,yes.i have written simple http server in node. this server executing mocha tests (tests are part of server code) and collecting mocha results. for test reports. there is mochawesome.but there is a problem. when mocha tests are executed in same process as server. it looks like there is only one counter init / reset - at the server start and total test counter is increasing from this point. what i need is reset this counter for each mocha run in one process. and maybe there should be someone else in future. for who it should be useful too.,positive
adamgruber/mochawesome,mocha,2015-07-31T17:14:33Z,if you are running these tests in a server process aren't the other metrics incorrect as well?,positive
adamgruber/mochawesome,mocha,2015-08-03T06:33:51Z,total tests. totally passed percentage. totally failed percentage. totally skipped tests.but with reseting counter in init. all these metrics looks good.,positive
Hacker0x01/react-datepicker,eslint,2018-05-03T02:26:06Z,fix-unsafe-lifecycles. - change componentwillreceiveprops to componentdidupdate- update .eslintrc,neutral
optimizely/nuclear-js,karma,2015-11-01T19:28:44Z,lyonlai i checked out your branch and couldn't get tests to pass using `grunt karma:chrome` and running them in debug mode.  i had initially tried an approach where the observermap was using a getter by reference as a key. however i couldn't get it it to pass tests.if you are able to get tests to pass i'm happy to include.,positive
optimizely/nuclear-js,karma,2015-11-01T19:47:11Z,jordangarcia while you are doing that i'll run karma manually to see if i can get the test running.,neutral
optimizely/nuclear-js,karma,2015-11-01T19:52:22Z,lyonlai it's working for me. not sure if it's becuase i have a globally installed module that maybe you don't have.do you have karma install globally?are you running on osx?,neutral
webpack/webpack,standard,2017-02-26T21:22:31Z,arceglos isn't `process.node_env === 'production'` the de facto standard way to go?,neutral
webpack/webpack,uglify,2018-07-09T10:05:53Z,this worked for me```js{  optimization: {    minimizer: [      new uglifyjsplugin({        uglifyoptions: {          output: {            comments: false          }        }      })    ]  }}```,neutral
webpack/webpack,uglify,2018-07-17T19:55:21Z,you could also use uglify to extract the licenses to another file.,neutral
webpack/webpack,uglify,2018-07-19T14:24:42Z,uglifyjs-webpack-plugin with terser will be release on next week/cc sokra i think we can update plugin in webpack4. because it is fork of uglify-es and contains only fixes,neutral
webpack/webpack,uglify,2018-07-20T07:33:23Z,> i think we can update plugin in webpack4. because it is fork of uglify-es and contains only fixeskzc could you confirm that uglify-es to terser is not a breaking change upgrade?,neutral
webpack/webpack,uglify,2018-07-20T12:54:31Z,> could you confirm that uglify-es to terser is not a breaking change upgrade?terser is a superset of and drop in replacement for `uglify-es`. like any open source project by unpaid volunteers there is no guarantee. as was the case with `uglify-es`. every point release can potentially introduce errors. although there's an extensive test suite with close to 2000 tests. you'd be well advised to test it with your project as you would with any library. feel free to check the terser open issues and commit log.,negative
webpack/webpack,uglify,2018-07-20T19:23:50Z,sounds good to me. in my opinion uglifyjs-webpack-plugin could upgrade...,positive
webpack/webpack,uglify,2018-07-23T10:22:23Z,hi guys. sorry for coming back to this topic. but i have tried a billion ways now to get the uglyjsplugin running. all i get i the same error over and over again. any thoughts what i might be doing wrong here?const uglifyjsplugin = require("uglifyjs-webpack-plugin");module.exports = {  mode: "production".  optimization: {    minimizer: [      new uglifyjsplugin({        sourcemap: true.        ecma: 5.        warnings: false.        ie8: false.        safari10: false.        dead_code: true.        comments: false.        uglifyoptions: {          compress: {            inline: false          }        }      })    ]  }....};,negative
webpack/webpack,uglify,2018-07-23T10:42:03Z,you need add `const uglifyjsplugin = require('uglifyjs-webpack-plugin')` in your config file,neutral
webpack/webpack,uglify,2018-07-23T11:16:00Z,d19cannon seriously? you use `const uglifyjsplugin = require('uglifyjs-webpack-plugin')` in top. but in `minimizer` option you use `uglifyjsplugin`. look on `s` in plugin  name (first example with lowercase. second in uppercase),neutral
bertho-zero/react-redux-universal-hot-example,uglify,2018-01-28T14:08:16Z,i upgraded uglifyjsplugin.,neutral
JustinTulloss/zeromq.node,mocha,2015-01-21T02:35:49Z,cool. thanks :)we'll deal with the customfds later. i guess (or mocha will?),positive
acuminous/yadda,mocha,2016-01-04T17:18:11Z,that's how mocha works unfortunately.,neutral
acuminous/yadda,karma,2016-09-01T00:21:19Z,cressie176 nothing works here. i just tested it with a simple `throw new error("xxx")`. what is interesting. that this is a node.js only issue. by using karma + browserify i got the stack.,negative
prebid/Prebid.js,standard,2018-05-28T06:59:57Z,polapi prebid.js consentmanagement module does not generate consent strings. neither implements any vendor-specific allowences. it's a proxy. which looks for standard *__cmp()* function. gets encoded data. and passes it over for adapters.what i see as a possibility for prebid.js is instead of querying *__cmp()* function. it can accept config value (let's say. `pbjs.setconfig(consentstring:'xxxxx'`) and carry it through.,negative
prebid/Prebid.js,sauce,2016-10-24T20:45:59Z,mkendall07 should be good now.  saucelabs didn't like my mocked `window.screen` so i just replaced that with a regexp check and it seems to be happy now.,positive
johntitus/node-horseman,mocha,2016-02-25T20:05:26Z,switch tests to promises. mocha has [support for promises]( i need to go through all the tests and return the horseman chain rather than using the `done` callback.,positive
johntitus/node-horseman,mocha,2016-03-04T00:06:57Z,i have done this. because i am neurotic.,negative
babel/babylon,codecov,2016-12-16T09:15:51Z,danez i squashed my pr. adding tests. apparently codecov does not update its review.the tests are in the `test/expressions` directory. i added an `esprima` test set based on the expressions test i could find in `fixtures/esprima`  (keeping the licence file i found in this dir). and an `is-babylon-expression` dir with the tests that were in this module.you will see i added a new `denylinecomment` option (defaults to false) to babylon.this was a trade-off that i measured via benchmarks to keep a feature that was in `is-babylon-expression`. raising an exception for expressions that finish with a linecomment.timothygu. note that i reversed the default behavior of `is-babylon-expression` to avoid having a different default for `parse` and `parseexpression` so `linecomment: true` is not necessary anymore. and all other cases need a `denylinecomment: true`tell me what you think and if we agree on this. i will then add documentation on the readme regarding the new option and `parseexpression` api.thanks,negative
babel/babylon,codecov,2017-01-02T09:36:32Z,could you please rebase the commit on current master? the commit it is currently based on seems to be broken. that's why codecov is not updating.,positive
sasstools/sass-lint,eslint,2016-02-11T10:41:39Z,it's because we're extending the eslint formatters to output formatted results. looks like they've got links in them which obviously wouldn't link up to our rules.definite oversight on our part!,positive
sasstools/sass-lint,eslint,2016-03-02T07:18:06Z,> a 1 usually represents true. so if you haven't read through the docs. this looks like you want a space after a bang and before a colon. or perhaps even looks like you're setting the number of spaces. what do you think of this format?:glen-84 looks like they are just copying eslint's config format.,neutral
sasstools/sass-lint,eslint,2016-03-07T09:47:16Z,it would be nice to update to use this yes. internally though eslint is just transforming them back to 0. 1. 2 so it's just an abstraction. no reason we couldn't move to this model though.,positive
ipfs/js-ipfs-api,mocha,2015-11-06T23:35:57Z,auto generate api.md using mocha. found a nice way to generate docs from tests. maybe we can combine this with #104,neutral
ipfs/js-ipfs-api,mocha,2015-11-06T23:40:20Z,cc victorbjelkholm richardlitt,neutral
ipfs/js-ipfs-api,mocha,2015-11-06T23:56:38Z,oh. that does sound awesome! so we can have really clear and focused tests (better for development) that we also can use to generate the api.md? sounds to good to be true! :),positive
ipfs/js-ipfs-api,mocha,2015-11-07T00:13:49Z,so very excellent :+1:,positive
ipfs/js-ipfs-api,mocha,2015-11-07T00:20:53Z,this looks pretty awesome! this just grabs it from the tests file?,positive
ipfs/js-ipfs-api,mocha,2015-11-18T14:40:46Z,how do i access this file: `test/tmp-disposable-nodes-addrs.json`?,neutral
ipfs/js-ipfs-api,mocha,2015-11-18T14:56:46Z,richardlitt not sure what you mean with "access",neutral
ipfs/js-ipfs-api,mocha,2015-11-21T21:26:28Z,dignifiedquire i updated with your requests. for multiple test files i parse the karma config's files for the mocha task. let me know if you want that handled differently,neutral
san650/ember-cli-page-object,coveralls,2017-10-15T22:17:08Z,seems like coveralls code coverage got completely broken,negative
react-materialize/react-materialize,eslint,2016-05-09T08:46:34Z,`eslint` is not happy :(,negative
pouchdb/pouchdb,mocha,2014-08-08T14:51:21Z,it's mocha. throws an error if you pass anything other than an `error` object to `done`.i'll give it a try. cheers.,positive
pouchdb/pouchdb,selenium,2014-06-12T20:30:13Z,test in node-webkit. because why not. although i don't think selenium will be possible.,neutral
pouchdb/pouchdb,selenium,2014-06-12T21:36:46Z,man. that's so cool.  there are leveldb files in the `indexeddb` folder. websql databases in the `databases` folder. and sqlite databases for localstorage in the `local storage` folder. never knew webkit used sqlite for localstorage.,neutral
pouchdb/pouchdb,jshint,2014-05-25T07:02:35Z,this needs to be squashed into a single commit. and i'm not sure why the gitignore and jshintrc changes. but other than that. it should be good.,neutral
pouchdb/pouchdb,jshint,2014-05-25T12:09:00Z,it's the jshintignore that was added,neutral
pouchdb/pouchdb,jshint,2014-05-26T16:16:31Z,this pr is a :+1: from me; i know we do a similar test in websql.js and idb.js. and i could have sworn we were doing it in leveldb.js.however. davedoesdev. you seem to have a whitespace error. so jshint is failing.,negative
pouchdb/pouchdb,jshint,2014-05-30T22:55:14Z,(#2326) - ignore cordova/www in jshint. otherwise the files in deps/ are throwingerrors and annoying me.,negative
pouchdb/pouchdb,jshint,2014-06-02T14:35:43Z,1586a42f845eb48bb6eb29e6d477e745e5e7afd0,neutral
pouchdb/pouchdb,sauce,2013-07-15T05:51:26Z,i could try doing a grunt --verbose to see wat is going on ... this is weird - could be saucelabs misbehaving .,neutral
vlucas/frisby,jasmine,2014-06-10T16:04:15Z,i've got the impression that when i have sequential tests in one file they are executed in expected order. how many tests do you have in each of your files?,neutral
vlucas/frisby,jasmine,2014-06-10T16:21:14Z,please don't rely on the sequential order of tests in a file. as it's not reliable. they generally do execute in order because of the way the file is read top to bottom. but the order in which the tests run is definitely not guaranteed. and can sometimes be surprising. if you need to run one test after another. use the `after` and `afterjson` callbacks to nest your tests.,neutral
vlucas/frisby,jasmine,2014-06-10T19:28:02Z,yeah. i understand the issue here - i was mainly replying to marcin-wosinek's comment about sequential tests in a single file.what you need is some sort of `before` and `after` block. as well as some sort of suite grouping concept. i don't think i will ever be able to guarantee the order in which files are run (that is the `jasmine-node` test runner). but what i _can_ build into frisby is the concept of test suite groups and before/after callbacks. would that be sufficient to solve your issue?,negative
vlucas/frisby,jasmine,2014-06-10T19:31:00Z,vlucas thanks for the tip:) i've read other issues and just got the feeling that my configuration isn't reliable.pigulla sounds like in this configuration you cannot have any tests run in parallel. maybe you can run them one-by-one from some starter script:```node-jasmine testa.spec.jsnode-jasmine testb.spec.js```,positive
vlucas/frisby,jasmine,2014-06-22T07:06:00Z,test suite definition like jasmine. hi.i'm fan of `jasmine-node` and used it frequently. i came around to `frisby` to test my newly written rest api. i'm trying to figure out any `grouping` method like `jasmine`. we used to write something like this in `jasmine`:``` javascriptdescribe("/users endpoint test suite". function() {   it("should login the user". function(done) {               ....   });});```here. we're using `describe` to group all `it`. is it possible to do something similar with `frisby`?,negative
vlucas/frisby,jasmine,2014-06-28T09:58:52Z,use local jasmine node. i would suggest moving jasmine-node global dependency for frisby itself. so that it's `npm i` and `npm test` only needed to get up and running with modifying frisby.,neutral
vlucas/frisby,jasmine,2014-06-29T20:28:02Z,good idea. :+1:,positive
vlucas/frisby,jasmine,2014-07-01T14:44:15Z,support for reporters?. does frisby support jasmine reporters?   i need to be able to output the results in a junit format.  also i do apologize if this is a naive question. i'm guessing there is a jump down to jasmine type of solution.  but i'm not sure what would be the intended way of doing that.,negative
vlucas/frisby,jasmine,2014-07-01T17:25:11Z,sorry not ont he readme page but on the web site:  jasmine-node spec/api/ --junitreport,neutral
vlucas/frisby,jasmine,2014-07-04T19:04:32Z,travis cli build failed due to an error with the latest jasmine-nodeissue: larrymyers/jasmine-reporters#63,negative
angular/protractor,jasmine,2016-09-01T01:39:55Z,json test report should include jasmine describe in test name. when using the json output file that's enabled with the resultjsonoutputfile config property. i am only getting the spec portion of the test description but i should also get the suite portion for the report to be really useful with jasmine.most runners either: nest the spec's within a suite. using the respective description strings; prepend the suite description to the spec description.,positive
angular/protractor,jasmine,2016-09-06T17:35:43Z,fix(jasmine): pass controlflow to jasminewd. fixes #3505. which is caused by jasminewd and protractor using different controlflow instances.,neutral
angular/protractor,jasmine,2016-09-06T21:50:07Z,tymurphy551.thanks for the reply. i was able to fix this issue by upgrading nodejs. protractor and jasmine.josh,neutral
angular/protractor,jasmine,2016-09-07T00:28:09Z,fix(jasmine): pass control flow to jasminewd. fixes #3505 and #2790. which is caused by jasminewd and protractor using differentcontrolflow instances,neutral
angular/protractor,jasmine,2016-09-07T00:35:02Z,lgtm once travis is happy,positive
angular/protractor,jasmine,2016-09-07T18:47:47Z,deps(outdated): update types/q and jasmine,neutral
angular/protractor,jasmine,2016-09-08T21:11:30Z,fix(types): remove relative path used for types/node and types/jasmine. closes #3533,neutral
angular/protractor,selenium,2015-08-19T06:42:08Z,sjelin is this really a documentation issue?typical scenario: i run protractor locally or from a ci provider ('host c') via saucelabs ('host b') against our staging site ('host a'). for us. this is key for testing internet explorer. if it's a documentation issue. then you're saying that the above shouldn't work and there's no solution to our issue? (other than manual testing?)else it's actually a bug either in selenium or in webdriver. but having read through a number of issues here. i'm unclear as to whether that bug has been raised in an appropriate manner (such that it's still on the radar for someone to fix :)),positive
angular/protractor,selenium,2015-08-19T13:05:31Z,the benefit (as i understand it) is not needing to spin up a selenium server to run your tests. that means anywhere from a 10 to 40 second savings for me depending on the machine. i think it shines for quick local testing. feel free to open a pr with clarification in the documentation if you want.,neutral
angular/protractor,selenium,2015-08-19T19:04:08Z,yeah. i've just confirmed that the same things happens with directconnect and standalone selenium.,neutral
angular/protractor,selenium,2015-08-28T10:43:26Z,tried to solve the problem with a firefox profile but it didn't work.  i might be misusing the feature though - i'm not sure.  nothing more i can do until the selenium people come through.,negative
angular/protractor,sauce,2014-06-21T00:29:08Z,i think qidonna's solution should fix this. closing.if there is another problem with saucelabs and proxies. please open a new issue and include the error you are getting.,positive
angular/protractor,sauce,2014-06-21T22:34:12Z,caitp thank you so much for the fast reponse. test suite pass. you've made my day! i will start implementing saucelab integration.,positive
angular/protractor,sauce,2014-06-23T22:32:00Z,tests can be broken up by files and run in parallel (both locally and on saucelabs) as such:```  multicapabilities: [{    'browsername': 'chrome'.    shardtestfiles: true.    maxinstances: 10.  }].```can we close this issue? (i don't see the need to break up by individual tests but definitely argue against this if there are reasons)well. let me know if there's something missing; otherwise i'll close this issue in a few days.,negative
angular/protractor,sauce,2014-07-09T08:02:14Z,allow for custom server addresses when running against saucelabs.. sauce connect can tunnel selenium traffic. not just browser traffic.  this is often used in restricted networking environments.this is supported by running sauce connect. then pointing your remote webdriver to the sauce connect machine rather then `ondemand.saucelabs.com`.this pr lets you specify a seleniumaddress as well as a sauceuser and saucekey. and still use sauce with job status updating et al.,negative
angular/protractor,sauce,2014-07-09T09:05:10Z,it didn't look like that build failure was due to this pr;  i'm not entirely sure. js isn't my native programming language:p,negative
ripple/ripple-lib,eslint,2015-08-12T07:12:41Z,this is going to be an eslint moan fest!,negative
agco/harvesterjs,coveralls,2015-08-12T12:05:45Z,hey! it wasn't me :)> regarding the coveralls,positive
tapjs/node-tap,coveralls,2015-10-20T18:11:40Z,any interest in adding codecov.io in addition to coveralls?. i'd be happy to do the legwork to make it happen. just wanted to make sure you were open to adding it before doing so.,neutral
tapjs/node-tap,coveralls,2015-10-20T21:22:43Z,yeah. that'd be great!,positive
balderdashy/sails,mocha,2013-11-14T13:51:09Z,sails leaking globals. running my mocha tests it detected multiple leaks: error: global leaks detected: config. hook. moment. user. project. _. async. sails. both user & project are models and should be "leaked". same goes for sails.  but the rest shouldn't be leaked right?,negative
balderdashy/sails,mocha,2013-12-05T19:48:25Z,use sails.log instead of console.log(). it would be great if we could replace this `console.log()` with a `sails.log`. in my integration tests this `console.log` call messes up the output of the mocha reporter by printing new lines to the console. if its replaces with a `sails.log` i can disable these newlines along with other log output by setting the log level to `error`. thanks.,negative
skulpt/skulpt,jshint,2015-01-05T08:11:00Z,very cool thanks! i added a few comments. there are some more coding style issues. that i think should have been caught with jshint. i'm going to check why that didn't happen :smile:,positive
restify/plugins,mocha,2017-01-19T15:51:55Z,now i see this is not bug restify-plugin or mocha. but script is failed and test not show this.,negative
meanjs/mean,uglify,2016-02-19T05:46:07Z,ngannotate isn't already in uglify task?``` js// js minifying taskgulp.task('uglify'. function () {  var assets = _.union(    defaultassets.client.js.    defaultassets.client.templates  );  return gulp.src(assets)    .pipe(plugins.ngannotate())    .pipe(plugins.uglify({      mangle: false    }))    .pipe(plugins.concat('application.min.js'))    .pipe(gulp.dest('public/dist'));});```,neutral
meanjs/mean,snyk,2017-04-06T16:34:13Z,fix(snyk): travis snyk setup,neutral
meanjs/mean,snyk,2017-04-07T06:35:31Z,disabling snyk until we resolve insecure deps & snyk integration. * snyk requires snyk_token which is unavailable on forks from travis* snyk has detected insecure deps which we will run tests not on ci yet but rather with gh integration which will be effective after we fix current issues.,positive
meanjs/mean,snyk,2017-04-11T10:10:20Z,build(snyk): enabling snyk again on ci,neutral
KeitIG/museeks,eslint,2016-12-12T07:56:42Z,pshhhhh. bad boy. i'm on it. don't forget to check eslint.,negative
KeitIG/museeks,eslint,2016-12-14T14:01:32Z,heh. are there any eslint rules for that?,neutral
pouchdb/express-pouchdb,selenium,2014-12-19T15:08:25Z,marten-de-vries using firefox all tests pass but if using client=selenium:firefox i get the error `unable to connect to selenium` in console. any ideas?,neutral
pouchdb/express-pouchdb,selenium,2014-12-19T15:14:47Z,rudasn no. i don't know enough about selenium.daleharvey / nolanlawson : any ideas?,neutral
dannygarcia/grunt-jekyll,mocha,2014-04-01T15:31:44Z,update .travis.yml.. - add `travis_retry`- remove mocha from `npm install`- remove `gem update --system`- add `--no-document` in `gem install`,neutral
dannygarcia/grunt-jekyll,mocha,2014-04-01T15:59:29Z,lgtm.,neutral
nodegit/nodegit,istanbul,2014-12-05T20:32:47Z,so. this is still an issue. unfortunately. you have to be very careful to generate the code and then to not have the project built (even from earlier). or it gets skipped. i think we gotta move this out of prepublish (maybe in to publish?). tbranyen suggested moving the binary stuff out of publish anyways.,negative
yeoman/generator-karma,karma,2013-08-11T04:54:41Z,+1 currently. karma does not presently run correctly with the old-style configs and needs to be updated. other generators relying on this are presently failing.,negative
yeoman/generator-karma,karma,2013-08-20T20:02:28Z,not registered in yo list. running yo does not list the karma generator in the list of generators,neutral
quilljs/quill,sauce,2014-08-09T00:51:13Z,allow tests to be run on pull requests. travis's native sauce labs add on is disabled for pull requests,neutral
haraka/Haraka,eslint,2017-06-25T18:23:37Z,whitespace changes for eslint 4 compat. changes proposed in this pull request:- adjusts some whitespace  - reduces severity of no-useless-escape to warn (it's not always accurate),neutral
haraka/Haraka,eslint,2017-06-25T18:29:28Z,the issue causing test failures in this pr is an eslint 4 whitespace rule change which <s>is being</s> was addressed in #1979,neutral
bitpay/bitcore,istanbul,2014-11-26T16:56:39Z,ack tested both (the gulp-istanbul fix also works #582),neutral
tommikaikkonen/redux-orm,eslint,2017-11-15T07:53:16Z,i'm so sorry for the eslint error commit :( :(,negative
electrode-io/electrode,karma,2018-04-19T17:49:44Z,yeah. we are planning to allow tests for karma and jest to co-exist and will detect and run them both.,neutral
electrode-io/electrode,karma,2018-05-08T20:17:13Z,load user karma config,neutral
ractivejs/ractive,karma,2017-03-07T13:42:33Z,node.js test coverage. ## description:currently. ractive's coverage only covers the browser tests. since we use the same karma setup for all tests. it should be easy to add it to the node tests. but here's the catch...the coverage must be combined when reporting to coveralls to get the overall figure. unless coveralls merges tests from the same build. there might be a need to do merging and reporting manually instead of karma-coveralls.also gives way to just merging the coverage report to the test. instead of having a separate. redundant setup for it.not sure if this is a good idea. opinions are highly valued here.,positive
ractivejs/ractive,karma,2017-03-30T01:18:52Z,coverage to map to es source instead of bundle. ## description:would be nice if the coverage mapped to the raw source. that way. it's easy to find which portions of the code are left uncovered instead of hunting them down using the bundle. also. this would let coveralls map back to github for the source.i've read somewhere that karma can pre-process es modules so the reports generate based on the raw source. but i'm not sure how to tie it to the build.,negative
admc/wd,mocha,2014-05-09T04:44:11Z,ps: i am using grunt-mocha-webdriver ...,neutral
Asana/node-saml-lib,jshint,2014-12-20T19:44:14Z,sigh. looks like it failed the jshint linting test. i'll fix and reopen,negative
pnpm/pnpm,eslint,2017-01-23T14:54:18Z,> imho this solution also allows to add a pretty exciting feature to pnpm. we can make local clis available in the command line. when inside the package folderit does make sense for babel and eslint. but what is the pnpm use case?,positive
pnpm/pnpm,eslint,2017-01-24T13:39:34Z,i though it is`{clipkg}`s' responsibility to choose a way to handle this. eslint. babel. ava. gulp. etc are doing this and its explicitly stated in their documentation. why do you want to implicitly force this choice on all cli tools?,negative
pnpm/pnpm,eslint,2017-01-24T13:48:34Z,because pnpm creates a special kind of cmd-shims that set the node_path env variable. setting the node_path env variable is a workaround to allow tools like eslint find their plugins.however. when tools like eslint execute the local instances of themselves. they omit the cmd-shims created in `.bin` and as a consequence. they won't work correctly.imho. this solution is fine. as *ied doesn't even support global packages* and this solution allows to use them with our symlinked node_modules structure.,positive
pnpm/pnpm,eslint,2017-01-24T22:12:44Z,what if the solution proposed in #571 would be applied only for globally installed packages that don't have  `preferglobal: true` in their `package.json`?i have checked some of the popular pluggable packages: eslint. babel. typescript. gulp. they don't have prefereglobal true. packages intended specifically for global usage have it: npmrc. forever. although seems like not all of them: grunt and nodemon don't have preferglobal specified. so this might be not a reliable solution.,negative
angular/angular-cli,jasmine,2017-02-14T13:37:24Z,chore(devdeps): update jasmine-spec-reporter,negative
angular/angular-cli,jasmine,2017-03-03T14:39:02Z,i tripped over the removal of `jasmine-spec-reporter` while following the upgrade guide. turns out it is still needed for protractor.,neutral
angular/angular-cli,jasmine,2017-03-11T19:54:04Z,the tsconfig.e2e.json using --ng4 is the following:  > {  "extends": "../tsconfig.json".  "compileroptions": {    "outdir": "../dist/out-tsc-e2e".    "module": "commonjs".    "target": "es6".    "types":[      "jasmine".      "node"    ]  }},neutral
angular/angular-cli,mocha,2016-12-19T00:44:28Z,does this support for mocha?,neutral
angular/angular-cli,mocha,2017-01-12T20:18:00Z,filipesilva sorry about the late reply - i think it's actually only available in the mocha plugin. not karma itself.,neutral
angular/angular-cli,uglify,2018-03-02T20:46:29Z,i think it would still be nice to be able to specify some uglify options. i like smknstd am really interested in being able to turn off compression. we did that in our prior webpack build before moving to the cli and it made it almost 3 times as fast. we got the idea from a post from [slack]( which quotes the author just like smknstd did.it would be nice to have a flag for that at least as having our build server take 3 times as long doing builds for 5% improvement is definitely not ideal.if people are interested in other uglifyjs options it seems like perhaps a viable option would be to handle uglifyjs options like the `proxy.conf.json` and allow fine tuning?,positive
jshemas/openGraphScraper,eslint,2018-03-13T00:53:50Z,thanks for opening the pr!i'm a little confused on what you are trying to do. is the issue with the usage of `const`? what browsers are you trying to support? why did you copy everything from the `lib` folder into a new `src` folder?why did you move everything around in `fields.js`? are you using a different eslint rule set then the one in this project? this makes reviewing this pr harder...,negative
Matt-Esch/virtual-dom,sauce,2014-12-15T13:56:12Z,migrating virtual-hyperscript probably broke ie support. raises the issue that running on sauce is too slow/inconsistent/buggy through travis using zuul. so catching regressions like this is difficult.,positive
quailjs/quail,sauce,2014-06-06T19:52:39Z,removed all sauce labs components from testing.. since saucelabs is timing out and causing too much churn in travisci. this pull removes saucelabs. we can add this back to release branches and manually run for badges. etc before we make a release.,neutral
cssinjs/jss,codecov,2016-11-05T11:20:18Z,there is a prob with node 7 #338 nathanmarks can you help out with both issues?,neutral
slara/generator-reveal,coveralls,2014-05-21T22:14:55Z,yeah. it seems that the coveralls svg badge service was down while i was changing the `readme.md` file. now it's working fine :),positive
bbc/bbc-a11y,standard,2017-09-29T16:12:34Z,mag guidelines. this adds the mag guidelines to bbc-a11y. maps the existing tests onto them. adds new tests where there are gaps. and generally opens the code up for multiple standards mapped to a single set of tests.at this stage. most of the guidelines are implemented as manual tests. but they can be replaced with automated tests.,neutral
gatsbyjs/gatsby,eslint,2016-06-01T13:40:57Z,using lodash to filter is definitely more explicit (you can see the name `react-hmre`). however it does violate the law of demeter. and i think it would be best to use the public interface if we're changing the config where it doesn't belong. we'd also have to `eslint-disable no-underscore-dangle` on two lines and between that and the comment i feel like there would be too much noise surrounding the code.,neutral
miguelcobain/ember-paper,eslint,2018-06-11T13:45:19Z,fix setup of defaultattrs for paper-virtual-repeat. closes #926the `defaultattrs` was probably wrapped in a computed property because of the new "leaking object state" eslint error.since creating a computed property poses an issue here. let's simply setup it in `init()` lifecycle method.,neutral
aksonov/react-native-router-flux,eslint,2017-09-02T22:37:42Z,updated example project. - fixed tab in drawer bug- added modal and lightbox examples with distinguished styling- added base classes for ease of implementation- added prop-types as example dependencies- small rn updates to match eslint standards,neutral
aksonov/react-native-router-flux,eslint,2017-09-02T22:37:46Z,mcabs3. thanks for your pr! by analyzing the history of the files in this pull request. we identified charpeni. sarovin and aksonov to be potential reviewers.,neutral
barrysteyn/node-scrypt,mocha,2016-02-17T19:09:32Z,this seems like a setup problem with mocha. i can't say why this is not working. but i don't think it is due to my code. can you try again?,negative
pghalliday/grunt-mocha-test,mocha,2013-10-21T12:06:39Z,colors option not working. i tried for w hile to get this to work but couldn't. my workflow implied that grunt mocha test is run from a subprocess and color was disabled even with colors: true in the options.i found out that setting``` jsmocha.reporters.base.usecolors = true;```does fix the color rendering.is it possible to patch in some way grunt-mocha-test so it sets this variable accordingly to options.colors?thanks a lot...,negative
pghalliday/grunt-mocha-test,mocha,2013-10-24T11:32:46Z,problem about the path of test files. if i cd in the folder where is the js file containing the test. and i execute mocha in this folder. the test will success.if i execute grunt-mocha-test with grunt. the test fails.i think the problem is related to the path.i don't want to move the files containing test cases.how may i solve this issue?,negative
pghalliday/grunt-mocha-test,mocha,2013-10-24T12:50:27Z,did you specify the location of your test files in the gruntfile? maybe you could post your gruntfile and i can take a look,neutral
pghalliday/grunt-mocha-test,mocha,2013-10-24T12:58:43Z,do any of your tests run?,neutral
pghalliday/grunt-mocha-test,mocha,2013-10-24T13:10:51Z,sorry. my fault. i was forgetting the node_env variable.now the tests fail for an other reason. i will investigate more :-)thank you,negative
pghalliday/grunt-mocha-test,mocha,2013-10-24T13:11:29Z,ok no problem,neutral
pghalliday/grunt-mocha-test,mocha,2013-10-24T13:13:59Z,maybe if i could figure out how to test it :s,neutral
pghalliday/grunt-mocha-test,mocha,2013-10-24T13:31:36Z,you could set this to true only if options.colors = true.,positive
pghalliday/grunt-mocha-test,mocha,2013-10-24T13:53:37Z,i already have this code```  var mocha = new mocha(params.options);```and this```      if (mocha.options.colors != null) {        mocha.reporters.base.usecolors = mocha.options.colors;      }```and i have not seen any issues with colors - can you supply a more explicit test case?i am wondering if this is an issue with mocha or possibly even by design.,neutral
pghalliday/grunt-mocha-test,mocha,2013-10-24T14:25:32Z,i've looked into the mocha code and it looks like it disables colors if the process is not running in a tty. it also looks like mocha doesn't allow you to override this behaviour with the colors option which is really only used to disable colors (tbh i'm not sure about this).as such i wouldn't want grunt-mocha-test to treat the colors option differently to the underlying mocha implementation.in my own tests i use subprocesses using exec but colors work as this has valid io streams (i think).,negative
pghalliday/grunt-mocha-test,mocha,2013-10-24T15:34:29Z,ok cool. thanks,positive
Project-OSRM/osrm-backend,eslint,2016-09-22T13:43:58Z,just noticed that travis is failing because of some minor eslint issues. otherwise good to go.,negative
photonstorm/phaser,jshint,2014-10-02T15:26:13Z,messed it up fixing a jshint problem. my editor managed to beautify the file. commited it before realising then got into git hell trying to undo it. easier to delete repo and start again,positive
npm/npm,standard,2015-12-08T14:55:08Z,feature request: `postshrinkwrap` lifecycle event. i'd find it very useful to have a `postshrinkwrap` lifecycle event that would be run _after_ `npm shrinkwrap`. specified in either the `scripts` section of `package.json` or in `node_modules/.hooks`.(while i don't need it. i suppose a `preshrinkwrap` event would make sense. too.)while i realize i might be (ab)using the `shrinkwrap` functionality in a somewhat non-standard way. i want to do a bit of normalization on the `npm-shrinkwrap.json` file—in my case. just normalizing the `resolved` url. while i can do this as a `pre-commit` hook in `git`. it'd be nice to do that immediately after the `npm-shrinkwrap.json` file is written.,negative
npm/npm,standard,2015-12-08T15:00:11Z,i should mention that i tried using the `node_modules/.hooks/postinstall` lifecycle event. but that script is run _after_ the installation but before `npm-shrinkwrap.json` is updated.i suppose i could use `settimeout` there. but that seems a bit of an unstable hack.,negative
mishoo/UglifyJS2,uglify,2013-10-08T16:32:14Z,i corrected the error by replacing(function(){ return this || (0.eval)('this'); }()).dot = dot;withthis.dot = dot;function(){ return this || (0.eval)('this'); }()in safari under debug returns undefinedbut. why this error occurs only after processing uglifyjs i did not understand. perhaps because of the brackets?,negative
mishoo/UglifyJS2,uglify,2013-10-14T00:16:54Z,while it's a good feature to have to preserve utf-8 as is in uglify. for those who arrived at this page looking for solution to the "invalid regular expression: range out of order in character class". you can at least add charset="utf-8" in your script tag's attribute. and also make sure you have <meta charset="utf-8"> in your html mark up to get rid of the error.,negative
mishoo/UglifyJS2,uglify,2013-10-22T16:37:23Z,does `-m toplevel=true` work?,neutral
mishoo/UglifyJS2,uglify,2013-10-24T09:25:16Z,> by the way. consider disable cleanup of unused variables in `uglifyjs` by default. that looks like `jshint` task.a lot of the time you're not just compressing your own code. but plugins &c. as well. it is a safe transformation.in the same sense you could ask why uglifyjs prints out parse errors. that's a job for your editor. right? ;),negative
mishoo/UglifyJS2,uglify,2013-10-25T23:27:35Z,still. though. seriously... uglify should be using regular modules and explicit exports. rather than this homegrown vm stuff.  what percentage of users of uglify are _not_ running it on the command line with node?,neutral
mishoo/UglifyJS2,uglify,2013-10-27T12:45:53Z,comments at end of file not being recognised. it seems the parser is not recognising comments located right at the end of a file. for example:``` javascriptvar uglify = require("uglify-js");var content = "function foo() {};\nfoo();\n//comment here";var parsed = uglify.parse(content);````parsed` contains no mention of the last comment. shouldn't the parser parse _all_ comments. even if it excludes them from the minified file?,neutral
mishoo/UglifyJS2,uglify,2013-10-27T15:21:46Z,i didn't see those. i solved the problem in my case by appending `\n'';\n` to the content before calling `uglify.parse`. but that won't be appropriate in every case.,negative
mishoo/UglifyJS2,uglify,2013-10-29T20:18:36Z,there are some known problems with unicode support in ie (also in ie10). they are seemingly not rushing to fix this.the best approach for now is to pass `-b "ascii-only=true"` when uglifying.,positive
mishoo/UglifyJS2,uglify,2013-10-29T20:33:56Z,if anyone is still looking for a solution. heres a simple way to disable warnings:``` jsuglifyjs = require('uglify-js');uglifyjs.ast_node.warn_function = function() {};```,neutral
mishoo/UglifyJS2,uglify,2013-10-29T20:44:54Z,create test suite for outputstream. the test suite currently present does its work perfectly. however. because it uses the outputstream to verify equal output. alas. bugs in the outputstream are not easily found.for example. uglifying `x = 2 * (a % b / b * c)` gives `x = 2 * a % b / b * c` which is clearly wrong.,negative
mishoo/UglifyJS2,uglify,2013-10-30T22:56:14Z,i think this is closed by #125,neutral
mishoo/UglifyJS2,uglify,2013-11-02T18:18:22Z,my real-life example: browserify source maps don't work if the source files contain maps of lodash. jquery from uglify because the offsets are wrong (new lines when there are none. etc).,negative
mochajs/mocha,mocha,2013-07-12T17:45:03Z,visionmedia do you have any reaction to the latest change?,neutral
mochajs/mocha,mocha,2013-07-13T17:12:31Z,yes. i suppose some could get furious. but i agree --watch should deprecate.to make it less traumatic someone could create a mocha-watch package by simply combining mocha and nodemon.(that would allow integration with other apps. ides. notifiers. to move to that project),negative
mochajs/mocha,mocha,2013-07-22T03:13:50Z,the fact that promises are annoying _here_ isn't indicative of promises being annoying; it's just indicative of the impedance mismatch between nodeback `(err. res)` apis and promise apis. because they're not the same. there's some annoyance involved whenever the two need to interact.the most common cases of interaction are encapsulated in the promise libraries to cut down on such annoyance – `q.nfcall` is a prime example of this – but mocha tests are not a common promise/nodeback interaction scenario. mocha's api only expects nodeback interaction. so promise interaction suffers from impedance mismatch. adding support for the promise style. which honestly is not that complicated (even given its need for black magic. `mocha-as-promised` completely achieves support in under 200 lines. and support in mocha core would be _much_ shorter). would eliminate this impedance mismatch.,negative
mochajs/mocha,mocha,2013-07-24T15:58:29Z,mcollina just came across this thread and was wondering if you had found or implemented anything that solved your issue.  we have the same need.  thanks!,positive
mochajs/mocha,mocha,2013-07-24T17:35:44Z,geekdave i decided it was too much effort for a very little gain :).,positive
mochajs/mocha,mocha,2013-07-28T21:13:31Z,is there any update on this? stepping through the mocha source line by line until all of my project source files are loaded is terribly painful.i could always not run mocha command-line. instead `require('mocha')` in my own wrapper. but what a waste.,negative
mochajs/mocha,mocha,2013-07-30T14:28:59Z,i'd like this too. we have tests that are only sensible if you have a local identd running. i'd like to be able to skip the tests when we detect that identd is not running.,neutral
mochajs/mocha,mocha,2013-07-31T21:36:59Z,bump.this would be especially useful for the karma js mocha adapter.  currently it reports just results back to karma.  i would like the debug view to show tests in progress using the test reporter. and this would allow that fairly simply.,positive
mochajs/mocha,mocha,2013-07-31T23:49:22Z,i had try to do like your code. but done is 'done'. semantic is not match.so i extend to function.prototype.or may like this:```test('foo'. function (done.dotry) {  myasyncfn(function (err. result) {    dotry(function () {      expect('mocha is good').to.equal('mocha is awesome');      done();    });  });});```,positive
mochajs/mocha,mocha,2013-08-01T22:01:46Z,shouldn't we just allow options to be passed for the reporters and then individually support alternative output types on the reporters?,neutral
mochajs/mocha,mocha,2013-08-04T02:17:25Z,modify --watch option: continue when syntaxerror. i want 'mocha --watch' continue when sytaxerror.becase rerun is a little difficultiy. (running happy!)but was stopped 'mocha --watch' when sytaxerror.this modify ...- when command start and sytaxerror then stopped.- when 'mocha --watch' runninng and modify js sytaxerror then running.,neutral
mochajs/mocha,mocha,2013-08-04T11:21:42Z,fb55 i suspect the problem is simply wrong execution of the growl "repoter"``` shfeedy:cssselect felix$ mocha -r growl --watch```should be ``` shfeedy:cssselect felix$ mocha --growl --watch```i do agree however that the api to growl should probably be a reporter just like any other...,negative
mochajs/mocha,istanbul,2017-06-18T06:06:11Z,possibly speed up dev-dependency installs?. i've probably been watching too many travis builds lately. but it seems like at least half (and sometimes most) of the two to five minutes taken by non-browser jobs is just installing through npm. with several times as many jobs in our build matrix as travis allows us to run at once. this can really slow each build down a lot. mocha installs quickly enough as a dependency of other projects. it's all those dev dependencies that make its own ci installs (and local development installs) sloooow.caching may or may not be a viable strategy to speed any of that up -- obviously we want to reinstall cleanly if anything that could affect it changes. and obviously running on so many different environments there isn't going to be a whole lot of opportunity to share an install between multiple jobs even in the same build. i suppose all the node 8 environments could be sped up by sharing an npm cache (not the install itself but the cache npm uses to install from). but that still leaves the variety of non-browser node test jobs...however. not all of our dev dependencies are actually needed by all jobs. could we perhaps make them optional dev dependencies and install them where they're needed? is optional dev dependencies a thing?here's what i believe are prematurely pessimizing our installs by being downloaded in all of them:- watchify appears to be referenced nowhere in our codebase except package.json; unless i've missed something. we can just remove it- eslint and eslint-* are only used in the lint job to my knowledge- the following are only used in browser jobs. to my knowledge:  - browserify  - browserify-istanbul (in my browser coverage branch/pr)  - karma  - karma-*  - os-name? the one place i know it's being used is to determine whether to use phantom or chrome in a non-sauce browser test  - ~rimraf?~ (nope. that's actually being used in a node-only test. and if we want to get off the makefile we'll probably need rimraf to clean the build before publishing as well as before at least some testing)  - through2- the following are only used in the phantomjs browser job. to my knowledge:  - phantomjs  - karma-phantomjs-launcher- karma-sauce-launcher is only used in sauce browser jobs. to my knowledge- karma-chrome-launcher is used if somebody runs the browser tests locally on mac. but not in ci as far as i can tell- the following are used in ci. extensively with my coverage enhancements. but might not be needed locally unless you want to generate coverage reports:  - coveralls  - istanbul-combine  - nycobviously. whatever makes these get pulled in for the relevant ci would also need to happen for local uses of them in order for us to be able to not download them by default...and if there's no optional dev dependencies. then removing them from package.json may be dubious anyway (they'd be depended upon but untracked...).anywho. i figured i'd throw the idea out there and see if anybody wants to look into it further. it would be awesome to bring the install time down. both locally and to speed up ci builds; but it would depend on really being able to get this all correct...,negative
mochajs/mocha,istanbul,2017-06-18T11:00:43Z,you could make `package-<task>.json` files and have a script rename the appropriate one to `package.json`.,neutral
mochajs/mocha,istanbul,2017-06-19T16:35:55Z,scottfreecode as far as caching is concerned. both travis and appveyor are smart enough to disregard the cache when dependencies have changed. travis does it by default. appveyor settings can be tweaked as follows:```ymlcache:  - node_modules -> package.json```,negative
mochajs/mocha,karma,2016-10-11T03:33:27Z,yes to everything. except karma-babel-preprocessor ;),neutral
mochajs/mocha,karma,2016-10-11T06:03:04Z,increase browser coverage. only a fraction of our test suite runs in browsers.  everything that should work in a browser should run in a browser.  here are some reasons:- mocha's i/o is not sufficiently abstracted.  too much node.js-specific stuff strewn throughout various places.  as a result. the specs suffer the same problem; they overwhelmingly expect a node.js environment.- initialization of interfaces (`tdd`. `bdd`. etc) and actually _running_ mocha differs wildly between node.js and the browser.  see `karma.conf.js` for examples of the broadway production necessary to simply test the `qunit` interface.- exposed globals and module exports are inconsistent.  for compatibility. `browser-entry.js` actually exports `global`. which is a profound wtf.  this probably has to do with the fact that mocha originally hand-rolled its own browserify implementation. _that being said_. i believe there are a small handful of tests that can be run with little or no modification which simply _aren't_ being run.to address this. start by telling karma to run everything. and then remove the tests that break.,negative
twilio/twilio-node,jasmine,2014-03-24T22:32:15Z,tests: add `jasmine-node` to `devdependencies`,neutral
twilio/twilio-node,jasmine,2014-03-25T06:47:20Z,npm will automatically run `jasmine-node` as defined in `package.json` as `./node_modules/.bin/jasmine-node` when running `npm test`. there is no need to force global installation of the test runner.,negative
twilio/twilio-node,jasmine,2014-03-25T14:29:28Z,awesome. wasn't aware of that.  thanks!,positive
sitespeedio/sitespeed.io,selenium,2015-08-27T15:11:04Z,thank you. specifically the use case i have is wanting to pass --useproxy false to browsertime via --btconfig.  ideally we could use mobproxy via external --seleniumserver (no har generated in the described use case) but alas in my case the test to external selenium grid times out because mobproxy isn't available locally.,negative
karma-runner/karma-sauce-launcher,karma,2014-08-14T19:34:29Z,problem here is console.log's being logged twice when using the sauce reporter with another karma reporter.,neutral
karma-runner/karma-sauce-launcher,karma,2014-08-19T19:40:44Z,make disconnected builds make as fail in sauce. this will make disconnected builds fail in sauce.currently if karma disconnects it still shows pass.,negative
karma-runner/karma-sauce-launcher,karma,2014-08-28T13:06:36Z,in new wersion used next code in lib/sauce_launcher.jsthis.on('kill'. function(done) {    if (sessionisready) {      ....      driver.get('about:blank').catch().quit().nodeify(alldone);      sessionisready = false;    } else {      pendingcancellations++;      process.nexttick(alldone);    }  });};when i run karma with existing virtual tunnel and setted startconnect: false - all work excellentbut when i run with creating virtual tunel (default) tunnel not closingand event driver.get('about:blank').catch().quit().nodeify(alldone);do not fired,negative
karma-runner/karma-sauce-launcher,karma,2014-08-28T13:23:48Z,dont close sauce-launcher. in new wersion used next code in lib/sauce_launcher.jsthis.on('kill'. function(done) {    if (sessionisready) {      ....      driver.get('about:blank').catch().quit().nodeify(alldone);      sessionisready = false;    } else {      pendingcancellations++;      process.nexttick(alldone);    }  });};when i run karma with existing virtual tunnel and setted startconnect: false - all work excellentbut when i run with creating virtual tunel (default) tunnel not closingand event driver.get('about:blank').catch().quit().nodeify(alldone);do not fired// karma.conf.jsvar customlaunchers = {    'sl_chrome': {      base: 'saucelabs'.      browsername: 'chrome'    }  };.....saucelabs: {      testname: 'karma and sauce labs demo'    }.    customlaunchers: customlaunchers.    browsers: object.keys(customlaunchers).    browsernoactivitytimeout: 60000.    capturetimeout: 120000.    singlerun: true.,negative
jantimon/html-webpack-plugin,standard,2016-06-27T17:52:47Z,i see the issue. so the "semistandard" prepublish fails because it can't find "htmlelement" a webcomponent feature.  how can i get it to ignore that check?  i tried environment targeting to browser but no fix.  this is getting sort of ridiculous just adding a few examples...,negative
ipfs/js-ipfs,uglify,2018-04-14T11:16:42Z,fsdiogo can we get a confirmation from your example that everything is working as expected and also a pr to ipfs/aegir to bring back uglify and reduce the bundle size?,neutral
google/blockly,eslint,2018-05-02T18:15:27Z,looks fine but lint is failing. probably because this file is no longer excluded.  add it to .eslintignore and you're good to go.,negative
google/blockly,eslint,2018-05-02T19:18:56Z,fixed lint via `.eslintignore`.  in the future. we'll probably want a solution that allows us to list node scripts like this.,positive
Sharlaan/material-ui-superselectfield,codecov,2018-05-06T09:15:53Z,mmmmm i just investigated through snyk.io and got a different report : to me a false positive from npm adding these 2 deps (codecov and coveralls) to published packages ?i have added snyk to our ci. thanks tamethecomplex,positive
webpack-contrib/grunt-webpack,eslint,2017-04-07T16:13:40Z,some files use crlf instead of lf. enable eslint rule that checks for the correct (lf) line ending and fix all src files.,neutral
yahoo/express-yui,jshint,2014-03-24T19:12:05Z,remove yui-hint in favor of plain jshint config,neutral
libp2p/js-libp2p,uglify,2018-04-03T08:40:29Z,fsdiogo is handling this.,neutral
react-boilerplate/react-boilerplate,mocha,2016-06-02T12:39:32Z,i'm currently working on a test setup using just mocha and chai (without karma & test-bundler). hoping this will fix the issue. i will post updates here once i got it working.,positive
react-boilerplate/react-boilerplate,mocha,2016-06-04T13:21:39Z,we switched to using the test bundler because mocha require hooks (`mocha --require js:babel-core/register`) don't allow for a bunch of custom. webpack specific stuff. e.g. with webpack you can import images. but if you do that the tests won't run which is really annoying.the idea is to have a webpack compiled build that's testable. which is what the `test-bundler` achieves. this means that we're using our standard setup which in turn means that whatever works in our apps works in our tests.if you have any better ideas of how to do this feel free to submit a pr. i have yet to figure out a better solution! (the current one was thought up by the amazing jbinto)---to answer to the question at hand. i've sadly never seen that error before. so i can't really help you with it! :confused: since it seems like an environmental problem on your end. i'll close this issue for now—feel free to comment again if you think this is something we can fix from our side!i hope you'll figure it out soon…,negative
react-boilerplate/react-boilerplate,mocha,2016-06-11T03:43:03Z,mocha and arrow functions. in your tests you use arrow functions with mocha. but it's not advised by mocha's doc: you know something that i don't?,neutral
react-boilerplate/react-boilerplate,mocha,2016-06-11T07:31:50Z,til. i didn't know `this.timeout` was a thing in mocha and have never used it before! lets remove all arrow functions from the tests since they're an antipattern!,neutral
react-boilerplate/react-boilerplate,mocha,2016-06-11T10:17:11Z,oh no. that's a shame i'll close this issue for now. lets revisit this when glob support is in eslint! thanks for notifying me of this. let's keep an eye on this!,positive
react-boilerplate/react-boilerplate,mocha,2016-06-11T10:48:12Z,seems really dirty. to be honest. i'd keep it as-is for now. it hasn't killed anybody yet so i don't think it's that critical :grin:,positive
react-boilerplate/react-boilerplate,eslint,2016-10-17T11:48:55Z,ugh that's a really annoying bug!i thought `eslint-plugin-import` lints those imports too. but apparently not. benmosher could support for `system.import` be added to `eslint-plugin-import`?,negative
react-boilerplate/react-boilerplate,eslint,2016-10-23T18:47:46Z,oh my bad. i found this in an example and found it pretty conveniant.i have restore the default eslint rules now. thanks for warning me.however. i have followed the advices provided in your link the bring the context into my _getemployeefunctioni have tried with : - autobind es7 decorator : but it wasn't supported by es6- the purposed syntax :     ```  constructor() {      super();      this._getemployee = this._getemployee.bind(this);  }    render() {       return (          <button onclick={this._getemployee}>get /employees (test)</button>      )  }  ```i keep having my events binded. is this the error you were pointing me at ? because it didn't change much.should i take care of the unbinding my self ? do you have an example i could start with ?,negative
react-boilerplate/react-boilerplate,eslint,2016-11-01T11:03:26Z,now i think it is not a good idea to play eslint packages this way. but this helped to find a way to fix hard peerdependencies requirements if some packages demand,positive
react-boilerplate/react-boilerplate,eslint,2016-11-03T07:34:18Z,```// eslint-disable-next-line new-cap```,neutral
react-boilerplate/react-boilerplate,eslint,2016-11-08T23:05:41Z,ahh. i should have been more clear - sorry!i mean in terms of docs. a .md file that explains the guidelines in a wordy way. wether that be a copy of the airbnb gls. a short write up that justifies it and references it or something along those lines.the eslint additions are great but i feel there's room for some docs that support them - could be wrong though. having the eslint rules ship out with the boiler plate might just be enough!,positive
react-boilerplate/react-boilerplate,coveralls,2016-08-14T03:49:00Z,mxstbr coveralls seems stalled :-/ can you give it a 'kick in the slats'...,negative
react-boilerplate/react-boilerplate,coveralls,2016-08-14T07:04:41Z,restarted travis to get the coverage in. but it doesn't really matter if the test pass so :shipit: when coveralls is in! thanks so much for doing this :fire:,neutral
Esri/esri-leaflet,standard,2015-12-16T19:55:27Z,tc558 can we provide any additional assistance?,neutral
Esri/esri-leaflet,standard,2015-12-25T21:04:35Z,tc558 i'm going to close this since there is no response.,neutral
yeoman/generator,mocha,2013-07-11T00:20:29Z,in my opinion. i think it should be a centralized. but free to write section. the structure could be on two level. the first one divide the file between every generators used on the project. and inside this a simple key-value store.``` json{  "yeoman-generator" : {    "foo": "bar"  }.  "generator-bbb" : {    "test_framework" : "mocha"  }}```for an api. i'd like it this way:``` javascriptthis.storage.get("test_framework");this.storage.set("test_framework". "qunit");this.storage.set({  "test_framework": "qunit".  "module_style": "commonjs"});this.storage.getall(); // returning a hash```i think reading the `package.json` would be the best way to determine the name of a generator.,neutral
yeoman/generator,mocha,2013-08-01T06:31:44Z,running `yo` just list 2 generators : backbone and mochawhere can i find the latest rc ?,neutral
yeoman/generator,coveralls,2014-04-05T21:58:42Z,ping :),neutral
angular-ui/ui-select2,karma,2013-10-23T20:44:07Z,add a watch grunt task to use karma's autowatch,neutral
NetsBlox/NetsBlox,codeclimate,2018-04-20T15:26:32Z,this looks good and i am going to merge it but wanted to make a couple notes about the failing checks:- the codeclimate issues are about the number of arguments (which is fine) - the travis build is failing bc of the fork not having the environment variables set. as the tests all pass locally (where the env variables are set). it should be good to go,negative
stripe/stripe-node,eslint,2018-04-03T10:04:13Z,also i'm a bit surprised this wasn't caught by eslint?,neutral
stripe/stripe-node,eslint,2018-04-03T11:44:38Z,> also i'm a bit surprised this wasn't caught by eslint?unfortunately the indent rule is currently disabled -- it's something we should fix one of these days.in the meantime. thanks for the contribution! much appreciated.,positive
stripe/stripe-node,eslint,2018-04-03T11:50:06Z,enable indent linting rule. r? brandur-stripe cc stripe/api-libraries kesla enables the indentation rule in eslint config. and fixes a few files with bad indent (by running `eslint . --fix`).,neutral
stripe/stripe-node,eslint,2018-04-03T16:09:52Z,nice!!lgtm.,positive
baconjs/bacon.js,mocha,2013-07-25T19:43:48Z,i updated browsertests so that they work again (tests use mocha now). i can indeed run them on my own machine. but testling.ci is not building anymore. what could be the problem there? the service hook is there.,negative
matrix-org/matrix-react-sdk,karma,2017-01-16T18:41:05Z,> would it be worth splitting the session export/import functions to a separate module so we can test it properly?which ones? the stubs in `index.js`?  i'd kinda gone with keeping them as simple as possible to avoid having to test them. `exportroomkeys` and `importroomkeys` are tested in the js-sdk; `megolmexportencryption` is well-tested here (and can only be tested in-browser thanks to different crypto apis in node. so we can make good use of the karma infrastructure.),negative
webtorrent/bittorrent-tracker,standard,2015-07-08T05:50:33Z,onfilter returning error details rather than global "disallowed info_hash". since filter function has become async and receives a callback. perhaps it'll be good to have functionality for standard callback(err. res) form which allows for errors to be passed through. for customised error reasons.it'll be more usable than just having "disallowed info_hash" for every reason for failure.,negative
vvo/selenium-standalone,selenium,2015-02-03T07:59:30Z,do you have java installed?did you do this:- selenium-standalone install- selenium-standalone start?,neutral
vvo/selenium-standalone,selenium,2015-02-03T10:07:08Z,i did   `$ selenium-standalone install && selenium-standalone start`let me check if the system has java installed and get back to you.,neutral
vvo/selenium-standalone,selenium,2015-02-04T22:01:03Z,stop?. how do we stop selenium-standalone programatically?,neutral
vvo/selenium-standalone,selenium,2015-02-04T22:11:32Z,thanks. i'll give this a try. if it works out. we should add it to the docs. =)i see the "you can child.kill() when you are done" in the docs now that i'm looking. but i think it deserves its own section. maybe "stopping selenium".,positive
vvo/selenium-standalone,selenium,2015-02-05T00:31:49Z,seems to be working great. thanks!,positive
vvo/selenium-standalone,selenium,2015-02-05T08:09:06Z,will accept pr as for the docs :d,neutral
vvo/selenium-standalone,selenium,2015-02-06T18:05:43Z,very nice work!released with some fixes. `npm install selenium-standalone4`,positive
vvo/selenium-standalone,selenium,2015-02-26T22:52:18Z,firefox driver is builtin into selenium dunno for safari,neutral
nathanboktae/mocha-phantomjs,mocha,2015-12-25T17:29:02Z,nothing was ever specifically disabled - it should just work.,neutral
nathanboktae/mocha-phantomjs,mocha,2015-12-27T03:53:46Z,ah right. i forgot about that :) i'll remove it shortly.,positive
godaddy/javascript,eslint,2017-07-19T21:03:08Z,adds react-flow package. some teams are adopting flow. but additional configuration is needed to get eslint to work with it.,neutral
godaddy/javascript,eslint,2017-07-20T01:20:47Z,give this a couple days to marinate. i know indexzero wants a chance to review,neutral
acvetkov/sinon-chrome,mocha,2016-05-06T13:00:32Z,i should rephrase that - i was very tired when i wrote it.i've written a chrome plugin and having seen a couple of libraries for converting the chrome api to promises. it seemed like a great time for a rewrite. i unit tested it with jasmine and i feel i can do much better with mocha and sinon.i can see i am perhaps being stupid and that all i need to do is stub the promises returned from your chrome promises library.,positive
cisco/node-jose,sauce,2016-09-06T20:30:58Z,build: include saucelabs in travis-ci,neutral
NewSpring/meteor-launch,eslint,2016-12-06T03:50:20Z,update eslint. resolves #91,neutral
typicode/husky,standard,2017-06-19T13:07:18Z,> for ghooks compatibility. actually i didn't see the benefit of supporting `ghooks` fields in `husky`sorry if it wasn't clear. but my main concerns were actually easing the upgrade path and not clobbering scripts. that could also be achieved by simply changing `pkg.config.ghooks` to `pkg.husky` and respecting the current ghooks format (could be automated. but trivial if manual).> i would feel it kind of intrusive for a package to do thatagreed.> that said. to make it easier for users. existing `ghooks` scripts in `.git/hooks` are automatically migrated.nice touch.> to be honest. i don't always have the time to reply to all...hope you're able to prioritize the migration over feature development assuming that's where most users could use you at present.> if `ghooks` suits you better. that's cooli'd rather be using the more feature-rich and well-supported product. personally. and that's why i tried `husky` but as mentioned above i don't feel right updating the `scripts` object. updating the scripts object would result in stuff like this:```json"scripts": {  "pre-push": "npm run lint".  "lint": "standard"}```which seems to have a design smell which could lead to:- potential build breakage while taking a _major_ (reasonable. but perhaps not expected).- individuals spending time trying to figure out the origin of the magic hook scripts.- possible removal by individuals not understanding why those scripts are there.perhaps a `husky:pre-push` script. etc.. would mitigate the concerns above. if not creating a `pkg.husky`. but only time will tell i suppose.---at any rate. best of luck with the upgrade. looking forward to learning from husky over time.,negative
typicode/husky,standard,2017-06-24T10:00:31Z,husky runs ghooks twice. **package.json** ``` "scripts": {    "precommit": "npm test".    "commit": "git-cz".    "test": "grunt coffeelint"  }.```i run `npm run commit`. in this scenario. pre-commit happens before executing `git-cz` and again after while `git-cz` is making actual commit.also this works well for standard git commit commands,neutral
typicode/husky,standard,2017-06-24T13:37:47Z,hi sibiraj-s.try to rename `commit` to `cz`. it happens because when you run `commit`. `npm` automatically runs `pre*` and `post*` scripts.,negative
typicode/husky,standard,2017-06-24T13:41:07Z,typicode i renamed it. then it when i got the error. everything works fine. i posted the issue to let know of this condition. is there thing that could be done on these scenarios,negative
typicode/husky,standard,2017-06-24T13:42:35Z,if the behaviour is fine. issue can be closed.,positive
marionettejs/backbone.marionette,mocha,2014-11-12T22:47:20Z,just merged. thanks!,positive
marionettejs/backbone.marionette,mocha,2014-11-12T22:57:40Z,:clap: megawac,neutral
getsentry/raven-node,eslint,2016-06-09T23:07:27Z,coverage directory shouldn't be linted. as it stands if you try to `npm test` twice in a row while the `coverage/` directory still exists. eslint will attempt to lint all of the `*.js` files in the `coverage/` directory and gets very red very quickly. i'm guessing this isn't desired behavior!i'm not convinced my solution here is the best one. but it does seem to do what i'd expect it to.,negative
getsentry/raven-node,eslint,2016-06-09T23:14:55Z,thanks!,positive
apache/tinkerpop,standard,2015-07-22T17:20:24Z,tinkerpop3-779: rfc for coalesce retain path. i tried to make some progress on this.  first. i added unit test to reproduce the bug.i then changed the child traversals from local to global. based on the fact that branchstep shows its branch traversals as global.  i'm not entirely sure what this does. and it had no effect on the test.next. i tried to reimplement coalescestep using computerawarestep (instead of flatmapstep).  this seems necessary. since the child traversals can do whatever they want.  my test now passes in "standard" mode. but fails in "computer" mode.in "computer" mode. i'm not sure how to implement the sequential "first successful child" logic.  what's in there now is "follow all paths" logic.  if it appears that i am on the right track. i can work more on this.,negative
apache/tinkerpop,standard,2015-08-01T18:06:43Z,the problem with olap (global children) is that you can't do stuff like (as you say) "first successful child" as everything is executing in parallel and you don't know for which input what child output you are referring too. i suspect you could get fancy with path analysis. but then bulking goes away.we really need to make it so that global and local children behave "the same" as there are other steps that currently can't work in olap (e.g. `intersect()`. etc.).,positive
nteract/nteract,eslint,2016-11-07T23:37:37Z,chore(deps): bump electron-context-menu and eslint a11y. this bumps a couple dependencies. the extra package.json changes came from using `npm-check -u` (just formatting).,negative
nteract/nteract,eslint,2016-11-08T00:28:56Z,thank you. oh human greenskeeper.,positive
nteract/nteract,codecov,2016-09-14T00:45:54Z,merging despite the churlishness of codecov. this is really cool!,positive
nteract/nteract,codecov,2016-09-15T05:51:36Z,fine codecov. fine.,positive
nteract/nteract,codecov,2016-09-17T15:00:46Z,yikes! i didn't want to freak you out. i was joking about codecov being odd.,positive
less/less.js,jasmine,2014-07-27T12:19:11Z,i moved tests into urls.less (the one in root) and re-enabled jasmine for merge.less.,neutral
walmartlabs/eslint-config-walmart,eslint,2016-10-27T18:28:15Z,baer i definitely gave automation thought. but ultimately not everything represented in this style guide comes from an eslint rule. and the examples are all custom made to best illustrate the rule. i think the best way to keep it updated would be to require any pr to a rule also include appropriate documentation updates.,neutral
jshint/fixmyjs,jshint,2014-01-06T02:21:26Z,yes. in your `.jshintrc` file just add `{ asi: false }` also use `--legacy` option switch.,neutral
vector-im/riot-web,standard,2017-01-18T19:50:39Z,i was also noticing that when i used the built-on riot emojii. i only get 8 emojii showing up. is this standard?,neutral
vector-im/riot-web,standard,2017-02-01T23:11:32Z,yes. if one has date time setting preferences. one can of course offer dozens of ways to format them (see xkcd picture). if one has not. the best way to go is iso standard.also. do **not** expect that language and datetime format preference is coupled.if someone wants english. that doesn't necessarily mean he wants mm/dd/yyyy or so.,negative
vector-im/riot-web,standard,2017-02-04T21:16:55Z,i would support the idea of implementing international standards (iso) in order to avoid using a system based on preference of a limited number of people.when translation comes. then maybe different format of date could be proposed.so the proposed :  `myip  2017-02-01 00:10:34`seems the more suitable to fit with the diversity of culture. language and practices of matrix users.,neutral
vector-im/riot-web,standard,2017-02-06T15:33:26Z,rageshake: abide by go standards. - host under `/api`,neutral
vector-im/riot-web,karma,2017-01-18T22:37:40Z,a couple of tweaks to the karma config. * allow the imgs to be served from the karma server to avoid 404s* use the source-map-loader for js,neutral
HospitalRun/hospitalrun-frontend,snyk,2016-10-03T14:51:41Z,there seems to be a new error now. caused by snyk. ill look into it,negative
appium/appium,selenium,2014-10-15T19:09:33Z,you should use the touch api,neutral
appium/appium,selenium,2014-10-15T19:17:33Z,thanks for your quick reply. jlipps!if i understand you correctly. yes. i've tried unchecking the "use browser" option and leaving the capabilities the same:dc.setcapability("apppackage". "com.android.chrome");dc.setcapability("appactivity". "com.google.android.apps.chrome.main");i get the same "org.openqa.selenium.webdriverexception: not yet implemented." error when trying to make any webdriver calls.thanks.,positive
appium/appium,selenium,2014-10-15T20:30:44Z,you can change the new session command timeout to be however long you need it to be for pages to load. or set it to 0 to turn it off entirely.,neutral
appium/appium,selenium,2014-11-05T05:30:09Z,gaige raftheunis87 jlipps,neutral
appium/appium,selenium,2014-11-05T06:43:38Z,ok sebv,neutral
appium/appium,selenium,2014-11-05T14:27:47Z,closing due to inactiivity.,neutral
appium/appium,selenium,2014-11-07T10:44:26Z,i am trying to execute javascriptexecutor jse = (javascriptexecutor) driver;jse.executescript(keyboard_done); code but getting error like : org.openqa.selenium.webdriverexception: not implemented in this context. try switching into or out of a web view,negative
appium/appium,selenium,2014-11-07T10:48:49Z,jlipps :i am trying to hit done button in my android real device but i am not getting any solution please could you help me on it.,negative
appium/appium,selenium,2014-11-10T05:20:59Z,in saucelabs i have only selenium log and sauce log how to get appium log?,neutral
appium/appium,sauce,2014-08-17T13:53:37Z,jlipps i only tried to run it in intelij +javacan i send you the code (with or without my saucelab account)so you can see for yourself?,neutral
appium/appium,sauce,2014-08-18T23:33:59Z,i think there are two parts to this task:- [ ] make sure the build isn't failing- [ ] go through tests and make sure we aren't quarantining tests on travis (or if we are. put an extensive comment by them to explain why it's impossible for them to pass on sauce),neutral
appium/appium,mocha,2014-10-29T00:06:48Z,ok let's go to the extreme and compile doom to run on the browser. and then you want to use tools like mocha to test it. do you think it is going to work well? you see. ultimately  it's not about what is the language is compiled to. it's all about the stage where humans write it. what you gain in design/tooling. you'll loose it in testing/flexibility. this is an old arguments and to write server code. dynamic language have an history of being better. to write front end app the balance tends to be in favor of strongly typed language. but even in this space the tendency is reversing with languages like rust.i would agree that js is not the easiest language to work with on server side. but in spirit. using transpilers like ts and to a less measure coffeescript is using a different language. the subset of generated javascript  is smaller than what you can write in pure js.,neutral
nodeca/js-yaml,jshint,2013-08-08T15:45:57Z,devdependencies fixes. lets npm know about external developer tools (jshint+ndoc) rather than relying on the makefile to document it.(-also i'd rather not have anything installed --global unless i specifically ask npm for it),neutral
nodeca/js-yaml,jshint,2013-08-09T01:45:13Z,thanks. i understand your concern. while a different patch just recently covered the "cut" issue. this pr fixes the remaining things that prohibit `make` (-and by design `npm test`) from executing correctly out-of-the-box in my os x environment.,positive
nodeca/js-yaml,jshint,2013-08-09T08:02:25Z,ps. if you have plans to seriously work on js-yaml - let me know details. i'll connect you with dervus for consultations. because js-yaml needs some refactoring prior to move forward.,neutral
sendgrid/sendgrid-nodejs,mocha,2013-09-05T17:21:19Z,cannot send?. im not sure if this is sendmail. or my own code. but it's working on my live site right now.  i am trying to run a mocha test with my web app. and i am not getting any feedback from the callback of sendgrid.send({payload}. callback);  i have a console.log() in there. and nothing is happening... and... the email never got sent!.. payload looks fine.,negative
sendgrid/sendgrid-nodejs,mocha,2013-09-05T17:32:46Z,i just dont want to upgrade my live api with this code now because it aint working.,neutral
sendgrid/sendgrid-nodejs,mocha,2013-09-05T17:34:23Z,hmm. is there some config setting in your mocha tests that is different possibly? i just re-ran the libraries tests and hand tested with a demo app i have and the sends are working just fine.,positive
sendgrid/sendgrid-nodejs,mocha,2013-09-05T17:34:57Z,can you paste more context of that code - some of the code surrounding it. that might help.,neutral
sendgrid/sendgrid-nodejs,mocha,2013-09-05T17:36:04Z,let me try running the app itself (and not through the mocha test)...,neutral
sendgrid/sendgrid-nodejs,mocha,2013-09-05T17:38:46Z,kk. i'm about to get on a plane so i might not be able to respond right away,neutral
sendgrid/sendgrid-nodejs,mocha,2013-09-05T17:46:10Z,looks like it worked from within the actual app... that is weird.. look like it's time to debug on my end.... thats weird. thanks.,positive
jhipster/generator-jhipster,eslint,2016-10-05T21:33:14Z,capitalize.filter: fix eslint error [ci skip],neutral
niklasvh/html2canvas,karma,2018-01-17T12:21:42Z,the build failed because the travis have config issue`error [launcher]: cannot start chrome` then karma exits with 1,neutral
angular-ui/ui-sortable,karma,2014-06-02T15:41:15Z,chore: add karma-junit-reporter to profile performance,negative
angular-ui/ui-sortable,karma,2014-06-12T20:30:00Z,chore(travis): use karma-coveralls for coverage reports. closes #171,negative
agda/agda-stdlib,standard,2018-05-25T13:44:35Z,it's only obvious if you are quite familiar with the standard library and its layout. so beginners could get quite befuddled as to the exact meaning. furthermore. it is not very google-friendly.  sometimes the changelog contains some of the most accessible documentation for some features. and a quick google is a good way to find it.  if the full module name isn't there. it could be missed.,positive
agda/agda-stdlib,standard,2018-06-08T09:27:24Z,fixed with 2d5710df58390f29ba6fe0c99e4259984d439577,neutral
agda/agda-stdlib,standard,2018-06-09T18:38:38Z,in the setoid view of the world. which is the view taken by most of the standard library here. reflexivity only makes sense with respect to the equivalence relation of the underlying setoid. the induced equivalence relation of a preorder is in general coarser. and the preorder that has the induced equivalence relation as its setoid equivalence relation is an order (your `inducedposet`).in many cases (but not in all!) we will indeed start from preorders that use propositional equality as the equivalence underlying reflexivity ─ i tend to prefer to make that explicit. but notational support for that may still come in useful.  > the `inducedequivalence` does not care about the equivalence relationthat is okay. but `invispreorder` does care  ─ it re-uses it.> which is minimal of what is actually needed... in cases where what you have is a `reflexive` proof instead of the more general```    -- reflexivity is expressed in terms of an underlying equality:    reflexive : _≈_ ⇒ _∼_```using your `inducedstructures` with actual `preorder`s would require adaptation.as a matter of attitude. i recommend considering the setoids based on propositional equality to be the special case. and design for the general case.,neutral
babel/babel,mocha,2016-02-15T14:23:32Z,> comment originally made by jonathan samines (jn.samines)hi! fraudster is a module which i use to mock a "require" dependency. i removed fraudster. and even tried to execute my test without "gulp mocha" and only using mocha and the --compilers flag. but i got the exactly same error.,negative
babel/babel,codecov,2017-05-16T21:58:17Z,turns out i dont understand codecov yet. why does it say coverage drops when all i did was add a test case?,neutral
zaproxy/zaproxy,coverity,2015-12-13T19:26:19Z,rebase for update of coverity scan branch,neutral
zaproxy/zaproxy,coverity,2015-12-14T12:16:29Z,using owasp.org email. for notifications by coverity,neutral
mozilla-comm/ical.js,istanbul,2015-09-17T13:47:31Z,heya. i totally forgot about this pr. i guess this one is good to merge and all previous comments are taken care of? i see code coverage has slightly decreased. can you look into that? one issue is that a comment says `istanbul ignore else` instead of `istanbul ignore if`. and i'm not sure about the utcoffset lines. you don't have to fix lines that were not covered before of course,negative
jshint/jshint,jshint,2013-06-17T19:41:08Z,have you even read what i've said? yes i've read the documentation. and yes i see that the behaviour is as documented. yet. i do not believe that this behaviour is desirable.please pay me the courtesy of actually addressing my request and answering the follow-up question. rather than fobbing me off with an rtfm. you did exactly the same thing for #1073 and it very frustrating not being able to engage with jshint developers.,negative
jshint/jshint,jshint,2013-06-17T20:52:20Z,`/*jshint -w086 */`,neutral
jshint/jshint,jshint,2013-06-20T06:31:37Z,yes. how is this not a thing. yes please!,positive
jshint/jshint,jshint,2013-06-20T13:45:44Z,nschonni i think that's a great idea. and i'm wondering why i haven't thought about that when i refactored the esx code.jchorn i think a way to remove "information" messages would be better. the same way we do `/* jshint -wxxx */` (`-ixxx` is not supported). and maybe limit more the number of `i003`.,negative
jshint/jshint,jshint,2013-07-01T22:14:33Z,closing then.,neutral
jshint/jshint,jshint,2013-07-02T00:01:24Z,now that jshint supports stdin you can transform your dynamically generated config into `/*jshint ... */` prepend it to the file you're linting and pipe everything into stdin. (or you can just create a temporary file)otherwise. implementing this request will complicate our options system for a very small number of use cases. sorry.,positive
jshint/jshint,jshint,2013-07-03T01:33:14Z,incorrect interaction with globalstrict and esnext arrow functions. when globalstrict is enabled. arrow functions fail because the argument is being detected as an undefined variable access:badcode.js:```/* jshint devel: true. globalstrict: true. esnext:true */"use strict";var ident = (foo) => { return foo; };console.log(ident("hi world"));```works as expected with an es6 translator:```$ traceur badcode.jshi world```causes jshint to complain about an undefined name:```$ jshint badcode.js badcode.js: line 3. col 14. 'foo' is not defined.1 error```,negative
jshint/jshint,jshint,2013-07-03T15:19:30Z,zenhob i would include your original `var ident = (foo) => { return foo; };` as well :),positive
jshint/jshint,jshint,2013-07-04T11:31:37Z,enforce consistent naming of "this" alias. it is often necessary to have a variable capture the current scope to make it available in closures and callbacks:``` javascriptvar me = this;$('div.foo').click(function (event) {    var el = $(this).toggleclass('bar');    me.bar();});```it would be nice if jshint had an option to enforce consistent naming of that variable. some people prefer `me`. others `that` or `self`. and mixing them in a project makes code more difficult to understand.,negative
jshint/jshint,jshint,2013-07-05T07:36:20Z,it maybe very difficult because 'this' is resolved at runtime.,positive
jshint/jshint,jshint,2013-07-05T07:38:57Z,couldn't jshint easily find assignments of the form `<variable> = this`? i don't think there are many reasons to ever assign `this` to a local variable other than for keeping scope.or did i misunderstand your comment?,neutral
jshint/jshint,jshint,2013-07-10T17:37:15Z,make a pull request for the `jshint/site` repo. thanks.,positive
jshint/jshint,jshint,2013-07-10T18:21:31Z,this shouldn't be closed as it is still not implemented (unless it has been deemed `wont-fix`).as far as i can tell. there is no way to instruct jshint to only warn about syntax errors.,negative
jshint/jshint,jshint,2013-07-11T00:30:57Z,antonkovalyov -- true. but extra commas aren't syntax errors. so they're hard to detect without jshint..  for now i'm using `jshint blah.js | grep "extra comma"` unfortunately it's quite slow.,negative
jshint/jshint,jshint,2013-07-11T12:10:33Z,do not show undefined identifier warnings for identifiers defined in external files. my project is composed of multiple js files and in phpstorm i can see jshint warnings referring to undefined identifiers that are actually defined in other files.  jshint should be aware of the externally defined identifiers and not show such warnings.this could be achieved by being able to specify the dependent js files and directories in `.jshintrc`.  then jshint could do two passes on these files.  in the first pass it could extract the externally accessible identifiers from all the files.  in the second pass it could lint the files individually but insert all the external identifiers just like with the global directive.one could use the global directive right away but it's redundant and error-prone to update this directive in every related files whenever a new external dependency is added to a project.thoughts?,neutral
jshint/jshint,jshint,2013-07-12T20:11:26Z,build process: rhino-wrapper is (h|l)inted wrongly. this describes an issue in the build process:the build file seems to lint all files with the same options. as given in jshint.json. however. the rhino wrapper uses the in-file declaration of jshint options. these are not respected during build. but instead the jshint will - for example - assume a node environment for the rhino wrapper.,negative
jshint/jshint,jshint,2013-07-13T19:09:15Z,changed 'predef' to 'globals' in example .jshintrc,neutral
riot/riot,sauce,2015-10-27T16:53:24Z,removed saucelabs credentials,neutral
angular/angular.js,karma,2013-09-25T08:18:43Z,i'm not using ngscenario in the context of an angular app. we are using karma and the karma-ng-scenario plugin for testing generic websites. it seems like a great alternative to selenium. and we have no issues besides this one.,positive
angular/angular.js,karma,2013-09-26T11:14:45Z,can you give a running example of this not working?  it may be the configuration of the application or karma?,neutral
angular/angular.js,karma,2013-10-04T23:17:05Z,unfortunately i don't think the above change fixes this issue.  i'm seeing the entire serialized object included in the request. rather than simply an empty string.embarrassingly enough i'm not really currently set up to run karma tests normally. but as a quick test that i demonstrated the following test failing in our local build (thanks for the collaboration jeffbcross!):``` javascriptit('should not include a request body when calling $delete'. function() {  mockbackend.expect('delete'. '/fooresource'. null).respond({});  var resource = $resource('/fooresource');  var resource = new resource({ foo: 'bar' });  resource.$delete();  mockbackend.flush();});```,negative
dc-js/dc.js,jasmine,2014-04-18T17:27:38Z,this looks really helpful.  using the example for testing is great. but could you add jasmine tests for the following cases?- labels only- functions only- objects only- no header (is this still supported?)for the object formatting. i would prefer an object rather than an array.  so. instead of ```                ["open".              function (d) {              return numberformat(d.open);              }].```i would prefer something like:```                {label: "open".              format: function (d) {              return numberformat(d.open);              }}.```it's a little more verbose but clearer.thanks!,positive
dc-js/dc.js,jasmine,2014-04-18T21:09:44Z,thanks. we're close... i'm surprised the test won't fail on master. though. because the heatmap-spec does specify `.transitionduration(0)` so it should... any clues?  if you think you're still getting transitions. you can call `jasmine.clock().tick(1000)` to skip them.,negative
summernote/summernote,sauce,2015-12-19T11:57:41Z,fix saucelabs connection problem. i expect it will fix the problem. it works on my repository.,neutral
summernote/summernote,sauce,2015-12-19T13:16:01Z,it works. but there are test fail in ie8 on winxp.because of it. test result is faild on travis. i'm not sure whether we should allow saucelabs failed or not.,negative
istanbuljs/istanbuljs,istanbul,2017-09-09T07:52:29Z,i have more now like maps merging and advanced reports. i would like to contribute with this project regarding documentation. these are my comments:  * i see that the intention is to provide a high level api with istanbul-api  * i see jsdoc comments in some part of the source - and some snippets in some readme.md files. but surprisingly i didn't found any command to generate the api-docs - i dont think there are. also i think the apidocs comments are not 100% complete.  * imo the most important missing part are examples. will try to make some. similar to the ones in istanbul v1 and pull request them in the main instanbuljs/readme.md file.  * before contributing with more docs. i would like some advice / opinions from the authors about the correct place / and technology to use. this library is awesome but the missing "getting started" documentation makes it hard to adopt for beginners - and is very easy to put some simple examples in a readme or in the main webpage. :(,negative
DefinitelyTyped/DefinitelyTyped,standard,2016-09-23T19:44:18Z,while enforcing es6 module paradigm over commonjs module might be a good goal to strive for in the long run. forcing users to add babel to their tool chain just to resolve es6<->commonjs differences is not practical.  ---es6 and commonjs module semantics are totally different. - in es6. you export names. it just so happen one of the names is `default`. it is perfectly valid to do `import {default as module} from 'module';` - in commonjs. you export one and only one javascript object. it can be anything. the mapping the two different semantic system is entirely non-standardized and determine by the transcompiler. so saying whether one syntax is correct or incorrect in that context is fairly arbitrary.,positive
DefinitelyTyped/DefinitelyTyped,standard,2016-10-05T05:02:03Z,jprogrammer yes. please try again!  waiting on the edge of my chair to be able to use connect decorators in react.,positive
angular-ui/ui-mask,sauce,2016-02-18T08:49:28Z,lukepfeiffer10 i merged this pr but noticed that it breaks the tests locally. and seems to hangs in travis. i had a quick look and i got a bit confused. at first i thought that 9a4721ee901045db0bc9ee1dc43123cc002ad124 was the culript. because it was the first commit with failing tests (`expected 'qtbcbc12' to be 'qt12bc34'.`).but then i cleaned up my local install and started from scratch on head (`rm -rf * && git checkout 5e965c519e1f328ba2236caa8bdd62951ce558f3 . && npm install && bower install && gulp`) and now i can't even run the tests at all. i get `error: cannot find module 'sauce-connect-launcher'`. is there a missing dependency somewhere ?could you please have a look at it ? so that i can make a release knowing that it's still working ?,negative
