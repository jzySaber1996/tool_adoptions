stipsan/uikit-react,eslint,2016-08-07T12:53:11Z,stricter eslint rules,neutral
shouldjs/should.js,mocha,2014-11-30T12:40:20Z,also with latest mocha you can return promise instead of calling `done`,neutral
infernojs/inferno,eslint,2017-02-04T15:25:44Z,hey havunen. many thanks for the fast response. no. i'm not using `inferno-compat` for that exact reason - it's a shame to be forced into using it just  to use `inferno.proptypes` (or indeed `eslint` with `plugin:inferno/recommended` settings).my experience with inferno has been very positive (many thanks to all involved!) but this feels like an oversight. was there a specific motivation for omitting proptypes from the core library api then?,positive
infernojs/inferno,eslint,2017-02-07T06:23:30Z,i would do that. but first i don't know the reason why it's there and second i am not experienced enough with eslint rules  unfortunately i can't open issues at `eslint-plugin-inferno` because issues are disabled there.,negative
jprichardson/electron-mocha,mocha,2016-09-26T16:55:34Z,debugging no longer has access to to full dev tools. debugging is great in electron-mocha with `--debug-brk` flag. with the #82 fix though. you lose some of this functionality. you can still set break points and step through the code. but since the window isn't focusable. you lack the ability to interact with the running code via the console. which is very helpful at times.does it seem reasonable that. if you are running in debug mode. you'd want electron-mocha to steal focus? would it be amenable if we set the window properties conditionally on the flag? if so. i can make a pull request with the change.,negative
jprichardson/electron-mocha,mocha,2016-09-26T19:04:16Z,yes. i think that's fine... i mean. if you want to use the debugger. you want to focus the window obviously.,positive
jprichardson/electron-mocha,mocha,2016-09-30T04:38:34Z,debugging unit tests. please provide better documentation on how electron-mocha unit tests can be debugged. right now it is completely non-obvious.,positive
jprichardson/electron-mocha,mocha,2016-09-30T12:42:48Z,debugging main process. should the electron-mocha launch a debugger by default when debugging the main process?debugging the renderer process works fine. but when i try to debug the main process electron-mocha just seems to hang at the first breakpoint. how can i see/launch the debugger?,neutral
jprichardson/electron-mocha,mocha,2016-09-30T22:10:54Z,html files. like mocha-phantomjs?. phantomjs' entry point is an html file. unlike electron. so i can understand why there is either no support or no mention of support for using an html file as an entry point with this module. however. the nice thing about [mocha-phantomjs]( doing so is that we can also run those tests in real browsers.,positive
ramda/ramda,sauce,2014-11-08T23:31:29Z,i have no objection. so long as it meets buzzdecafe's expectations for sauce.,negative
ramda/ramda,sauce,2014-11-09T01:15:22Z,lint sauce files. i see no reason to treat these files as second-class citizens. :),positive
ramda/ramda,sauce,2014-11-09T01:19:39Z,lvgtm,neutral
ramda/ramda,sauce,2014-11-09T01:33:19Z,travis is happy. so i'll merge these changes now.,positive
ramda/ramda,sauce,2014-11-10T00:59:40Z,failing sauce tests. ie8. ie7 are timing out. android and ios tests are failing intermittently. not it!,negative
ramda/ramda,sauce,2014-11-10T01:34:17Z,i think this is the commit that has broken the sauce tests,neutral
ramda/ramda,sauce,2014-11-10T12:10:11Z,can't publish until sauce labs tests are passing again,neutral
ramda/ramda,sauce,2014-11-11T22:11:28Z,`this.r` is undef in ie < 9 in the require shim. i had worked around this with the `ramda` alias.,neutral
ramda/ramda,jshint,2015-05-12T17:31:53Z,thank you! in all my reading of the `contributing.md` i overlooked the lint/jscs stuff! :yum: will correct now.there _will_ be a problem with the `bookmarklet.tmpl.js` because of the handlebars token; i'll see if i can get around that with a jshint ignore comment.,negative
ramda/ramda,jshint,2015-05-14T15:30:01Z,this means it is up to us to detect when unused params/vars occur. it's nice to have the tool catch that. especially since it is not just the three of us contributing. let's follow the principle of least privilege. clearly. we all agree jshint is a pita in `arity`. i argue it should be bypassed there. and left in force everywhere else.,negative
ramda/ramda,jshint,2015-05-30T22:21:41Z,failing jshint. did you run `npm test`?,negative
request/request,standard,2017-04-14T23:13:42Z,jacksongl my concern is that updating it would make it incompatible with those other implementations. if they don't support other hashing standards then we're breaking compatibility with those servers.that said. we should add optional support for another hashing algorithm asap. at some point in the future we can consider a breaking change that would modify the default algorithm.,neutral
request/request,eslint,2014-12-02T09:14:02Z,it might be worth checking where eslint support is on their roadmap as well,neutral
request/request,eslint,2014-12-03T16:18:54Z,so. hound is probably not going to work for us unless they decide to implement other code style checkers.any thoughts on how difficult it would be to write a bit of custom code to leave comments on prs if eslint fails?,neutral
request/request,karma,2015-01-26T06:40:33Z,use karma-browserify for tests. add browser test coverage reporter.. hey.so i started writing some more browser tests. but before i did that. i wanted to make the test runner to compile browserify by itself. and also add some coverage checking (to make it easier to write tests).this pr does the following:- modifies the scripts in package.json to not compile with browserify directly.- modifies the clean script to delete the coverage folder (not sure if this is preferred over adding it to .*ignore)- add some new dependencies.- make sure karma does both coverage and browserify.- also added stderr from the child process that runs karma.i have some follow up questions about how we should structure the actual test suite. but let's do that in another issue.,neutral
request/request,karma,2015-01-27T17:35:55Z,done!,neutral
request/request,karma,2015-01-27T18:30:46Z,:+1: thanks!,positive
pixijs/pixi.js,eslint,2016-11-11T15:37:01Z,merging this. i'll manually revert the eslint change.,negative
pixijs/pixi.js,karma,2014-03-02T21:05:27Z,peci1 just comment out the test for now. the condition has to be configured in karma.config. but commenting it out is fine for now. just the `it()` call.,positive
actionhero/actionhero,mocha,2013-02-23T22:31:01Z,fix exception tests in mocha,neutral
aurelia/route-recognizer,karma,2016-02-25T03:08:58Z,pull request is updated. sorted out my mess. only thing is travis is failing due to a karma/socket issue that seems to be affecting the master branch too.,negative
jquery/esprima,karma,2015-08-20T01:43:37Z,jasonlaster seems that it's the natural/suitable place for `karma.conf.js`.,neutral
jquery/esprima,jshint,2015-07-20T10:47:10Z,for me is jshint.,neutral
reactjs/react-docgen,eslint,2016-08-02T16:59:27Z,add flow-bin. update jest and fix flow error. this makes travis to run flow. eslint and the tests.i hope it is okay that i added flow. if not i can als remove it again form this pr and just fix the flow error.```src/utils/getmethoddocumentation.js:48 48:       type = getflowtype(typepath);                  ^^^^^^^^^^^^^^^^^^^^^ function call 50:         type.alias = typepath.node.id.name;                  ^^^^^ property `alias`. property not found in 50:         type.alias = typepath.node.id.name;             ^^^^ object type```,positive
softlayer/sl-ember-test-helpers,eslint,2015-09-08T14:10:56Z,upgrade sl-eslint in master branch,neutral
angular-ui/ui-utils,karma,2013-05-08T05:37:06Z,update readme.md. fix karma conf path,neutral
Zarel/Pokemon-Showdown,mocha,2015-04-07T09:35:13Z,i think it would be better if this pr added mocha tests that create battles in which immunities are involved to see if the immunity results are those we expect.,neutral
justmoon/node-extend,eslint,2015-07-01T13:55:40Z,i see the build is failing because of the eslint rule no-extra-stricti would suggest. that we should remove the struct pramas from the inner functions. because the module-wide one should cover it.the rule itself is depricated btw.,negative
Automattic/node-canvas,standard,2016-07-16T20:05:09Z,it's not the last argument that's elided. the standard canvas api lets you skip the fourth argument. defaulting it to zero. that doesn't seem to work in this implementation.,neutral
ncb000gt/node-es,coveralls,2013-08-16T18:20:49Z,this sounds great to me! for the coveralls.io stuff. the quickest way to see impact would be to run the following commands:``` bashnpm run-script coverageopen reports/coverage.html```that will show you what coveralls.io will ultimately report in terms of test coverage. what i've noticed is that when running integration tests. the additional libraries being used tend to get pulled in for test evaluation as well and often that significantly reduces the coverage number. if this is the case after you introduce functional tests. we can modify the posttest script in package.json to only run coverage when performing units and then do the functional integrations after.,positive
serverless/serverless,mocha,2016-09-22T02:13:31Z,just as fyi for the next dev who comes along this. it appears there is work going to add a `--order random` option to mocha (mochajs/mocha#902). then you could just add that into your `npm test` command. (i was kind of surprised that wasn't already in there.),neutral
serverless/serverless,mocha,2016-09-23T22:07:07Z,fix very small bug with pluginmanager tests.. ## what did you implement:a super small bugfix. the 'test' code actually always runs. since describe blocks are always executed. so for example if you did `mocha test -g "..."` even if it does not match this test. the test still runs. mocha also doesn't treat it as a test failure but rather it interferes with the entire test run.## how did you implement it:i changed a single word.## how can we verify it:run `npm test`. still works :d## todos:- [x] write tests- [x] write documentation- [x] fix linting errors- [x] make sure code coverage hasn't dropped- [x] provide verification config/commands/resources- [x] leave a comment that this is ready for review once you've finished the implementation,positive
serverless/serverless,mocha,2016-09-25T19:03:25Z,this is ready for review.,neutral
serverless/serverless,mocha,2016-09-26T07:14:44Z,thanks!,positive
serverless/serverless,eslint,2016-05-20T14:45:25Z,ignore coverage and other folders for eslint,neutral
serverless/serverless,eslint,2016-06-10T06:25:17Z,run integration tests and eslint for job 1 only,neutral
amir20/phantomjs-node,eslint,2016-11-15T23:01:51Z,> i think it would be good to learn how pull requests work with tests.yes. it's a learning process.  :)i can't get npm test to work. but i think it's a windows thing.but doing  `eslint . && flow check` is now returning no errors.just done a new commit. but it's not appearing here but it's appearing on my fork.  not sure if it's because it's put on hold..  oh. just noticed i didn't do it to the noop_cpu_update branch.. ok. i got there in the end. but i don't think i did it the easy way.. in the end just uploaded the files using the git website.. :)   i think i'm going to have to watch some utube vids on git..,negative
amir20/phantomjs-node,eslint,2016-11-16T18:49:17Z,> that's an idea. only issue i see though is that you will end up creating 10 timers per second. instead of just doing a simple conditional check. so not sure how v8 handles the creation & destruction of timers. may end up making more work for the gc.what do you mean? if a `noop` is in progress then it would just clear the inveral and wait until the reponse is received. right? maybe i am missing something here. > i know your busy. but before you do. could you also check / test :). i'll check before merging. the only problem is all my scripts don't actually need noop either. i found it a long time ago while testing some edge case. i looked that phridge which did the same thing. the good news is that the code is tested 99% with coverage. so i'd feel it would work if all tests pass. if you can think of adding a test case then that would be awesome. but i haven't figured out how to test this. it would be really good practice to make sure all changes are tested. > btw. i've maybe not said it yet. but great work in starting this project in the first place. it has really helped my use of phantom.js. and this was before these modifications.hey. you are welcome! i have enjoyed it as well. i took over the project a couple years ago. it used to use `dnode` but that seemd to have break all the time. i kept ignoring it until i decided to rewrite everything. then i rewrote it again using websockets. it didn't work. then i did it again using sysin/sysout. then a few months ago i changed everything to jest and finally i was reading yarn's code base. i leared so much from that. i added eslint every where and added flow to do static checking. i learned a lot with that and had fun with it too. v3 is pretty awesome and i hope to release v4 which target node6 going forward.,positive
metarhia/metasync,eslint,2017-05-26T13:57:13Z,add coverage folder to .eslintignore,neutral
metarhia/metasync,eslint,2017-05-29T07:55:24Z,landed in 33d7902,neutral
xodio/xod,mocha,2017-12-14T13:40:22Z,replace spectron with puppeteer. spectron (webdriverio) fails often while ci with no obvious reason. also. it can’t simulate hotkeys. let’s move our functional tests to puppeteer.we can’t test desktop ide features with puppeteer. but among them. we only test fs interaction. let’s preserve these tests but move them from functional to integrational category and simply use `mocha-electron` for them without simulating full ide launch.### how to implement- move universal `func-test`’s from `xod-client-electron` to `xod-client`. rewrite them with puppeteer.- move fs-related `func-test`’s in `xod-client-electron` to `test`. rewrite them to `mocha-electron`,negative
janl/mustache.js,eslint,2015-06-17T19:04:16Z,it looks like the removal was so it would be compatible with eslint. this change thankfully doesn't cause any eslint errors and allows the code to be run in strict mode.the reason behind this pr is because we bundle mustache.js with a bunch of other libraries that we use on our sites and automatically add `"use strict"` to the top of the merged script so this was causing it all to fail.,negative
janl/mustache.js,eslint,2015-06-17T20:12:30Z,thanks for the commit reference bobthecow. made it easy for figuring out nagaozen's change was just for `eslint` compatibility.i confirm this change doesn't raise any `eslint` errors.yousefcisco. thanks for the pr! i merge and release right now. :shipit:,positive
Azure/autorest,standard,2016-08-22T17:35:13Z,keeping generated files out of repository. added ignore. the new standard will be to keep generated files out of the repository. so i'm excluding the generated go files and adding some ignores.,neutral
airbnb/javascript,eslint,2016-05-17T22:39:14Z,i started checking out eslint today. my bad for not checking the style guide i had closed the pr because i wasn't sure if i did something right,negative
airbnb/javascript,eslint,2016-05-25T02:21:42Z,ljharb what about circular dependencies among functions?,neutral
airbnb/javascript,eslint,2016-05-25T07:35:10Z,chirag04 luckily those are incredibly rare. typically i see a circular dependency as a code smell. between functions or between modules. however. there are definitely a few cases where it's necessary - and that's what inline eslint comments are good for.it's ok if. eyes open. your code deviates from a style guide. but the code should be profusely apologizing for it with comments. as opposed to the guide bending to allow for usually-bad patterns.,positive
airbnb/javascript,eslint,2016-05-25T16:18:41Z,jesucarr that solution won't actually work. because `undefined` would be passed in. not the later value of the function. the trivial solution is adding `// eslint disable-line no-use-before-define` on the `function resolveaorb` line.however. it's likely that your implementation and use of `type` could be redesigned such that this wasn't a problem. one example could be. `type` being a thunk. instead of a data property. i'm not really sure since i don't have all of your requirements and codebase in my head :-),negative
airbnb/javascript,eslint,2016-05-25T19:56:36Z,i personally agree that named imports are better. they can be statically analyzed by eslint to ensure that you're not using an actiontype that doesn't actually exist.,neutral
airbnb/javascript,eslint,2016-05-27T15:57:33Z,that's odd - it seems to be using your local npm-installed `eslint`. which is usually the concern. what does `npm ls` output?,neutral
airbnb/javascript,eslint,2016-05-30T20:24:19Z,icetbr you're correct - if you have a method that is designed to mutate (something this guide discourages). then you'll run afoul of some of our rules. in this case. you may want to simply disable the rule using an eslint override comment. alternatively. you could do `this.data = getnewtransformedcopyofdata(this.data)`.,neutral
airbnb/javascript,eslint,2016-06-02T21:02:24Z,wdhorton what command are you using to run that? any chance you're using `eslint` directly. meaning you're running your global one and not the local one via an npm run-script?,neutral
airbnb/javascript,eslint,2016-06-02T21:20:37Z,uninstalling the global eslint worked. thanks!,positive
airbnb/javascript,eslint,2016-06-05T00:17:54Z,kevingrandon the `eslintrc` file you're talking about is for the package _itself_. and isn't something that anyone should be using or even discovering. the rules the package exports already comply with the styleguide.,neutral
airbnb/javascript,eslint,2016-06-05T00:18:54Z,the solution is to configure `eslint-plugin-import` with your custom resolution rules."what webpack does" is irrelevant - if you deviate from how the standard node require works. you're going to have to/want to configure _every_ tool you use - webpack and eslint are just two of many.,neutral
airbnb/javascript,eslint,2016-06-08T20:38:27Z,what is `launcher`? any chance it's running a global `eslint` binary? if you do `npm uninstall -g eslint`. and then run the tests. what happens?,neutral
strongloop/strong-tools,codacy,2016-12-15T18:34:29Z,testing codacy,neutral
jashkenas/backbone,eslint,2016-01-17T17:31:44Z,i'd be happy to implement the eslint no-shadow rule in general if desired. unless captbaritone has this on his radar :),positive
jashkenas/backbone,eslint,2016-01-17T17:48:51Z,i was planning on getting to it. but don't have anything started. go for it!## jordan eldredgeplease excuse any typos or terseness; this email was sent from a mobile device. > on jan 17. 2016. at 9:31 am. craig martin notificationsgithub.com wrote:> > i'd be happy to implement the eslint no-shadow if desired. unless captbaritone has this on his radar :)> > —> reply to this email directly or view it on github.,positive
michaelbromley/ngx-pagination,karma,2016-07-05T19:56:22Z,i'm happy to make a pull request. but i'm not familiar with karma. so i'm not sure where to find test 36 and how to run a detailed stack trace for that error.,negative
jxnblk/rebass,standard,2016-04-21T19:23:58Z,focusing inputs / input refs. the standard way of focusing inputs doesn't work with rebass inputs. typically you pass a ref function. like `ref={(e) => e.focus()}` but the ref gets a null value on rebass not the input element.two possible solutions:- make the ref on an input component receive the input element. which might not be right since ref is supposed to be whatever the rendered element is. would be non-standard if it didn't include the label and container as well.- add a `focused` attribute to the input component that can be used to control if the element is focused or notlmk what you think,neutral
jxnblk/rebass,standard,2016-04-21T21:39:30Z,related to #68 - afaik the only good solution is to change form elements into class components or wait for react to support a solution for functional components. lmk if i'm missing something obvious though.,neutral
angular/angular-phonecat,karma,2014-06-10T16:30:26Z,oh yes. i didn't stopped another http server.thanks petebacondarwin :)regardless of that - a few tries before i've kill all hosting processes and still got that http-server error.so whoever encountered same problem (as me and op):npm install http-server -g(and/or npm install karma -g)should do the trick.,negative
liferay/clay,coveralls,2018-02-20T14:42:22Z,update coveralls badge | fixes #575,neutral
liferay/clay,coveralls,2018-02-20T14:53:21Z,merged. thx!,neutral
peterolson/BigInteger.js,jasmine,2015-02-05T19:23:53Z,make jasmine a devdependency instead of dependency in package.json. - also use local jasmine install instead of global for `npm test`,neutral
peterolson/BigInteger.js,jasmine,2015-02-05T19:28:46Z,thanks for that. i'm fairly new to working with jasmine,positive
jsoverson/preprocess,coveralls,2015-07-27T14:58:31Z,jsoverson i've never really worked with coveralls. so i am not sure why it is decreasing code coverage. probably because i added a test. and it is not expecting that output.besides that. this is ready to merge.,negative
velesin/jasmine-jquery,jasmine,2013-11-09T23:29:28Z,support jasmine v2,neutral
webrtc/samples,selenium,2015-09-03T16:52:03Z,oh.. both actually. even though leaving the receive box makes this testable from selenium... hm..!,neutral
videojs/video.js,sauce,2014-06-11T16:29:14Z,have you had a chance to ping sauce on this?,neutral
videojs/video.js,sauce,2014-06-11T16:43:45Z,yeah. `grunt saucelabs` works for me. i'm not sure i'm understanding the `grunt saucelabs:connect` relationship. i ran it an it just seemed to hang. not running any tests. but just running saucelabs alone worked for me.,negative
videojs/video.js,sauce,2014-06-11T17:55:13Z,ah. `grunt saucelabs` worked? cool.i added `grunt saucelabs:connect` to equivalent to what is happening on travis ci with the "sauce connect" plugin thing. but it's very possible we don't actually need it for running locally.,neutral
videojs/video.js,sauce,2014-06-11T17:55:39Z,i hadn't.,neutral
videojs/video.js,sauce,2014-06-13T22:59:07Z,gkatsev i don't know that we could just swap in the actual techs. i tried that in the past and flash became super glitchy. loading it and unloading it quickly. and it really had problems when it was in the hidden qunit fixture div. so we might have to use a test framework that's meant for integration tests and can use one swf load for a bunch of tests. it would be nice if it were that easy though so probably worth verifying since it was a few years ago when i tried it.floehopper there's no projects specifically for integration/acceptance tests yet. there's a few pull requests for sauce labs. but that's still around unit tests.,positive
videojs/video.js,sauce,2014-07-03T22:00:06Z,same question here. pull in now or wait?,neutral
videojs/video.js,sauce,2014-07-03T22:22:57Z,probably pull in now. probably a while before i get to the new stuff.,neutral
videojs/video.js,sauce,2014-07-03T22:23:31Z,ok. will do.,neutral
fergiemcdowall/search-index,selenium,2016-05-06T13:54:12Z,hmmm- its crashing selenium for some reasonyou can see if your changes work by doing `npm test` before deploying (or just `npm run test-browserify` to test the web stuff that seems to be breaking),neutral
fgnass/domino,mocha,2013-04-03T22:09:38Z,fwiw. that warning seems to come from mocha. not domino.,neutral
expressjs/express,mocha,2013-04-16T00:19:30Z,for those who don't have `make`. i wrote a simple batch file to run the tests:``` batchecho offsetlocalset mocha_opts=--check-leaksset reporter=dotset node_env=testcall node_modules\.bin\mocha --reporter %reporter% %mocha_opts%call node_modules\.bin\mocha --reporter %reporter% %mocha_opts% test/acceptanceendlocal```,negative
mongoosastic/mongoosastic,eslint,2015-11-03T15:00:38Z,guumaster build is green now. sorry i forgot to eslint. also i forgot to look at the contributing.md; i can make a branch if you want. its how we work here as well.,negative
mongoosastic/mongoosastic,coveralls,2015-11-03T20:54:40Z,updated yml config for travisci and coveralls,neutral
babel/babel-loader,mocha,2015-12-08T19:46:01Z,this is interesting: i've got some mocha tests running with babel but that _requires_ the `.babelrc` entry for presets. `mocha --compilers js:babel-register tests/`with that `.babelrc` file present (and like others. it's just the one entry for "es2015"). mocha runs its tests fine. but webpack fails. without the `.babelrc` file. webpack runs but mocha fails. facepalm.,negative
anvilresearch/connect,eslint,2015-11-03T18:38:46Z,eslint to ignore public vendor scripts.,neutral
anvilresearch/connect,coveralls,2015-11-17T18:21:19Z,this has been done via coveralls see pull request #293,neutral
0xfe/vexflow,eslint,2016-08-29T17:30:10Z,oh. right `const` doesn't make sense here. and our `eslint` rules won't let that code through anyway. huji do you know where this is coming from? i did a quick search in `src/` and didn't see that pattern anywhere.,negative
prettier/prettier,codecov,2017-09-01T09:40:55Z,looks good to me!could you add a test for `resolveconfigfile()` and `resolveconfigfile.sync()` to appease codecov?,neutral
prettier/prettier,codecov,2017-09-02T14:46:01Z,side note: anyone know how to get jest/istanbul collecting coverage from subprocesses (started via `runprettier`)? it's the reason codecov is saying `0% of diff hit`. i know `nyc` supports this.,neutral
prettier/prettier,codecov,2017-09-03T06:31:18Z,i’m not super familiar with codecov – will that start to show up as failing now in all prs? do we want to add some more integration tests before merging (looks like the target numbers are pretty close above?),positive
prettier/prettier,codecov,2017-09-03T06:58:03Z,> will that start to show up as failing now in all prsno. the `codecov/project` fails if the overall coverage reduces (which it is in this case because we are exposing existing code from `bin/prettier.js` that was previously excluded). this won't happen in future prs.the `codecov/patch` is based on the lines of code that were changed in a pr. so future changes to cli code may have low coverage. but that's expected and shouldn't be less than the 80% target.some test cases we could add:* an invalid configuration file* `.prettierignore` is a directory (i.e. `error.code !== "enoent"`)* file to be formatted doesn't exist* `prettier --write`,negative
prettier/prettier,eslint,2017-06-18T10:34:56Z,this decision doesn't make a lot of sense to me. if the goal is to be opinionated with no bike-shedding. why are there any options at all? seems like if there is even 1 option (ex. single vs double quotes) then other options should be up for discussion. most people were using standard to fix their code before prettier came along. though i don't care much which way we head (spaces or no spaces before parens). i'd like to see a consensus reached between the two projects. i think a nice separation would be to use prettier to format your code and standard to lint your code. right now they're conflicting with each other and therefore need either double parsing and fixing (e.g. prettier-standard) or custom eslint configuration for each project. both of which aren't ideal.,positive
prettier/prettier,eslint,2017-06-19T16:19:11Z,better docs for eslint. most people integrate prettier with eslint. we should put front and center how to plug in the config and plugin projects.help wanted.,positive
prettier/prettier,eslint,2017-06-19T19:03:35Z,> i know there are ways to to this by using eslint but it is a bit more complex then i would like.```js/* eslint-disable prettier/prettier */```i don't know how you get simpler than that.,negative
prettier/prettier,eslint,2017-06-21T08:57:57Z,vjeux cool. nice to hear you are aware and thinking about it. :)chadly yeah that is not bad if you allready have eslint set up. but i use prettier from my editor and many files are not in a project with eslint so that would need to be set up for all 70+ project i have on my work machine. which does not scale or make sense (for me at least). other files are not part of a project but standalone files where some of them should not be formatted. maybe there are other ways to set it up other than per project? do i need do stop using prettier through the editor?weird example: fiddler custom rules scripts file which is js but not quite (fiddlerscript). this language does not support the `"trailingcomma": "es5"` setting which i use everywhere else.jitendravyas ah. nice. i did not see that one. though my use case is a bit different it does make a case for some kind of ignore mechanism in prettier.obviously i would like a solution to contain some kind of comment support so i can ignore the files that create probles for me.,neutral
prettier/prettier,eslint,2017-06-21T18:06:20Z,our stance with prettier is that we do not change the ast. we just format it. this is best implement as an eslint rule with autofix if you do want it.,positive
prettier/prettier,eslint,2017-06-22T01:10:53Z,vjeux yes you are right. when i change it to specify the specific rule i want to ignore. it formats correctly:```type props = {    history: object. // eslint-disable-line react/no-unused-prop-types    muitheme: object}```thanks :),positive
prettier/prettier,eslint,2017-06-22T07:21:51Z,hopefully. this will avoid some confusion,negative
prettier/prettier,eslint,2017-06-24T03:18:21Z,there is a comment in typescript-eslint-parser:```js// typescript uses objectliteralexpression in destructuring assignment. too```this doesn't seem to be the case anymore. `objectbindingpattern` is used in destructuring assignments. maybe this behaviour is an artifact of this change.cc. jameshenry. soda0289,neutral
prettier/prettier,eslint,2017-06-26T14:12:46Z,`eslint-disable-next-line` (note the **next**) generally works fine for me. that might help you getting unblocked.,positive
prettier/prettier,eslint,2017-06-27T00:12:56Z,javascript imports can have side effects so it's not safe to do that unfortunately. also. we've taken the stance with prettier not to do those kind of transforms that change the ast.we recommend that those would be implemented as eslint rules with autofix.thanks for asking :),positive
prettier/prettier,eslint,2017-06-27T09:57:46Z,trying to override eslint (using prettier) to use single quotes not double. hi.i have passed command line arguments to prettier so it is formatting the way i want using single quotes.i setup eslint as per the instructions but i can't seem to override the quotes rule. it appears to still be coming from prettier/prettier. anyone know what i am doing wrong ?here is my eslintrc```{    "extends": "prettier".    "env": {        "browser": true.        "node": true    }.    "parseroptions": {        "ecmaversion": 6.        "sourcetype": "module"    }.    "plugins": [        "prettier"    ].    "rules": {        "prettier/prettier": "error".        "quotes": ["error". "single"]    }}```i thought i placed it correctly to be overridden i.e.         "quotes": ["error". "single"],negative
prettier/prettier,eslint,2017-06-27T11:08:51Z,`"prettier/prettier": ["error". { "singlequote": true }]`,positive
prettier/prettier,eslint,2017-06-27T11:51:19Z,thanks simenb,positive
prettier/prettier,eslint,2017-06-27T15:41:01Z,oh gosh this is embarrassing. i actually made that comparison table a week ago. and this section wasn't there when i first checked this readme then. my bad. do you think there's still any value in the table? there's some stuff about `prettier-eslint` that isn't covered in the screenshot you showed above. perhaps i can remove certain rows that are already mentioned. otherwise. feel free to close the pr.,negative
prettier/prettier,eslint,2017-06-27T16:37:59Z,thanks for helping out :)i don't think that eslint-prettier is a really good workflow. i'd rather have people disable rules that are in conflict with prettier rather than running eslint --fix afterwards. eslint autofix rules do not take into account 80 columns and we've had many people complain using this setup that the lines would go beyond 80 columns because of an autofix. also. eslint is an order of magnitude slower than prettier.i'll close this. but if you want to improve the wording of the existing section. that would be appreciated :),positive
prettier/prettier,eslint,2017-06-27T19:00:07Z,fix json files. awesome work with the json support. we've added it to prettier-eslint too now.it would be nice if we could get automatic fixing of json files too.auto fix of quotes and removing of trailing commas comes to mind.,positive
prettier/prettier,eslint,2017-06-28T07:49:24Z,+1 for some way to keep comments. our `.eslintrc`s are littered with them (yes. could use `.eslintrc.js`. but we don't. unfortunately).,negative
prettier/prettier,eslint,2017-06-28T14:30:34Z,multiple glob arguments have weird behavior. example (all files include nesting directories):```shellprettier --write '{**/*.*}.{js.jsx.json}'```but if i want to ignore some directories (example `vendor` - `composer` for `php`). i am use for `eslint`. `stylelint` and etc second glob argument:```shellprettier --write '{**/*.*}.{js.jsx.json}' '!vendor/**'```but it is not work with `prettier`. i can do pr if this accept.,negative
prettier/prettier,eslint,2017-06-28T14:38:47Z,could you show which files you expected to be touched. and which actually were touched?,neutral
prettier/prettier,eslint,2017-06-28T15:30:36Z,so you're saying that an exclude pattern makes no difference? if so. a pr fixing that would be great.,positive
prettier/prettier,eslint,2017-06-28T15:37:42Z,lydell yep. do pr in near future,neutral
prettier/prettier,eslint,2017-06-28T16:30:39Z,this is likely an issue with something else (maybe an eslint rule with autofix). i'm going to close this issue on prettier. thanks for reporting it!,positive
prettier/prettier,eslint,2017-06-28T16:32:17Z,as mentioned in the pr. i don't think that it's really prettier's job to do that. a lot of people are using normal js instead of strict json in their json files and we don't want to drop those extra pieces of information. i'd rather make it such that prettier throws when it's not valid than changing the code. thanks for the suggestion though :),positive
prettier/prettier,eslint,2017-06-28T21:17:10Z,the reason i reported is because prettier modifies the code to use double quotes. which results in an eslint error. is there any way this can be avoided?,negative
prettier/prettier,eslint,2017-06-29T07:57:29Z,i as a user of prettier actually expect some fixes to be done. like quotes and trailing commas. i get that stripping away comments and some other stuff like `infinity` and some ranges. if i understood the pr correctly. isn't the best way to go.however could we get some smaller fixes like quotes and trailing commas.,positive
prettier/prettier,eslint,2017-06-30T21:09:51Z,standard is a set of eslint rules. some of them with autofix. when you do not comply it's going to warn you.,neutral
prettier/prettier,eslint,2017-06-30T21:19:36Z,> standard is a set of eslint rules. some of them with autofixbut should not i use eslint then. as it has `--fix` option too?,neutral
prettier/prettier,eslint,2017-07-01T07:09:20Z,i am using atom-prettier - i do not have any other tools that i am aware of. although it is possible that the passing to eslint --fix is doing it?,neutral
prettier/prettier,eslint,2017-07-01T09:49:38Z,fyi `.eslintignore` works already with `eslint-plugin-prettier`.,neutral
prettier/prettier,eslint,2017-07-01T11:50:16Z,you should be able to use `eslint-plugin-prettier` and then use `eslint --fix` to get that style.,neutral
prettier/prettier,eslint,2017-07-01T12:41:40Z,ah of course. i had my wires crossed because my editor "format" binding runs `prettier-eslint`. not `eslint --fix`.,neutral
prettier/prettier,eslint,2017-07-01T13:15:14Z,azz i use prettier standalone without `eslint`,positive
prettier/prettier,eslint,2017-07-03T01:41:23Z,steida: at facebook we're doing it via an eslint plugin with autofix. i would recommend going that route instead of inside of prettier.,positive
prettier/prettier,eslint,2017-07-03T01:50:03Z,we show eslint warnings and autofix within nuclide and before you send the equivalent of a pr. so it's both.,neutral
prettier/prettier,eslint,2017-07-03T12:02:20Z,>  adjust webstorm code style options to be compatible with prettier default formatting style.i don't think that's a reasonable goal. especially if you're using `eslint-plugin-prettier`. which will error if a single character doesn't match the prettier output.and as good as a set of rules written in english can be. they will be. by definition. inadequate to describe the full "rule-set" of prettier itself. i think the better course of action would be to do what other editors have done and have a plugin that uses prettier to format your code.,positive
prettier/prettier,eslint,2017-07-06T15:20:42Z,hi. i have not actively been watching prettier issues for a while (sorry about that) but i intend to slowly start reading them again. first off. kachkaev i highly recommend simply turning off the max-len rule when using prettier. the fact is that the print width is just a recommendation to prettier. and it it can't break something anymore it won't be able to make sure all the code fits within the width. the beauty is that when it doesn't. you don't have to worry about adding a `eslint-ignore` comment on every single place this happens. just turn it off and know that 99% of your code will fit. (think of long strings. and stuff like that that can't be broken up).i think consistency is still a subjective argument. you can provide examples of how it's inconsistent. but frankly we could show examples of how a lot of styles are inconsistent. the important part is how it's used in real code. and the reason why many people like to drop parens on single args is because short inline functions like `x => x.id` are *so* common that it's really nice to drop the parens. the amount of times that i have to go back and add args are few enough that i personally find it a big win.it could be that if you write heavily functional style code. you are dealing with the above inline functions a lot. so this is a big win for that style of code. but if you aren't doing heavy functional stuff. you may not see this win enough. this is the hard part about formatting.i'm not sure we should change the behavior. if you agree with me please upvote this comment. there may be an equal number of people on the other side (although they might not see this comment as much as others see the original issue...). we can evaluate if we should add an option. we should really make sure that we can't decide on a single style though. as said above. the current popular style guides are a strong evidence of the current styles that we need to consider. the airbnb guide enforces no parens on single args. and i know many companies prefer this. this is not a cut-and-dry decision. and we should delay adding options as long as we can (have you tried this style for more than 5 minutes?).,negative
prettier/prettier,eslint,2017-07-06T16:39:10Z,eslint.autofixonsave is a great option to autofix your code,positive
prettier/prettier,eslint,2017-07-06T18:09:04Z,we have parenthesis in our team's common eslint preset (`'arrow-parens': ['error'. 'always']`).  the reasons are similar to what tkirda  rattrayalex and iamstuartwilson have recently mentioned.tastes differ and that's ok. the today's js community has some more or less established formatting standards (mostly influenced by airbnb). but some people may still prefer to change `--tab-width`. `--use-tabs`. `--single-quote` and other options just because they want to. if doing so is fine for prettier. i don't see why `--arrow-parens` needs to be hardcoded forever as something special. what's the philosophy behind this distinction. given so many +1s on this issue? who will suffer if `--arrow-parens` option is added. but remains as is by default?,negative
prettier/prettier,eslint,2017-07-06T18:52:01Z,rattrayalex to me airbnb's suggestions sounds even more strangely inconsistent than what we do now. why does it matter if the body is a block or not? they're probably trying to appease both styles but i think it muddles it even more. i guess it's something to be considered though.kachkaev everyone will suffer in a year after we've added "just one more option" a thousand times. the existing options exist because most of them truly affect 50-100% of code and we are forced to cater to existing styles somewhat for adoption (idealy. we wouldn't have any options). this only affects a small amount of code relative to the whole file and if we start adding options for things of that scale we'll have all of eslint's formatting options.i'm not saying we should close this issue but there's a reason we don't take adding options lightly. if there's a way to decide on a single style. everybody wins in the long run. it's possible that adding args if braces exist is a compromise we can do.,negative
prettier/prettier,eslint,2017-07-08T18:14:21Z,the merging thing was not that important i think. there are not that much options :-)may be worth exploring eslint's glob config. even if typescript and eslint work pretty badly together (at least last time i tried something with both),positive
prettier/prettier,eslint,2017-07-09T09:23:50Z,just pushed another change. makes the overrides api almost identical to that of eslint.```yaml# .prettierrcprintwidth: 80overrides:- files:  - "*.test.js"  - "**/__tests__/*.js"  options:    printwidth: 120    trailingcomma: es5```i don't know that such fine-grained control is really required for prettier. but maybe it is better to have something flexible than breaking people if we go for something too simple and need to change it.,negative
prettier/prettier,eslint,2017-07-09T10:00:54Z,is it possible to format .*rc files with prettier?. like `.stylelintrc` `.eslintrc` etc.,positive
prettier/prettier,eslint,2017-07-09T12:12:50Z,json is supported. yes. ```bashprettier --write --parser json .eslintrc```yaml format is not supported.,neutral
prettier/prettier,eslint,2017-07-09T23:50:12Z,i think the issue here isn't that people can't cope with the change. it's the incompatibility with airbnb eslint.  i've gotten over style changes really fast 4 spaces to 2. semi colons. etc.  we adopted airbnb eslint over night over a year ago at work and we all just said we'll get over it.  and we did and it was fine.  no more worrying about the little things in pull requests.  we love prettier but having to use prettier eslint for one thing is somewhat annoying. mostly because the speed is so much slower.  it's a minor annoyance but we'll probably switch to just prettier and disable the rule on eslint side(along with some jsx formatting differences).even though selfishly i would like prettier to support the airbnb method. i would rather prettier stay closer to gofmt and have very little options.  also side note: who the heck uses no bracket spacing. tabs and 4 spaces?  need some usage statistics here.,positive
prettier/prettier,eslint,2017-07-10T11:34:25Z,something like this?``` "lint-staged": {    ".*rc": [      "prettier --write --parser json".      "git add"    ]  }```,positive
prettier/prettier,eslint,2017-07-11T07:55:26Z,you should write **strict** json. the error you have is missing quotes `"`.`ignoreatrules` -> `"ignoreatrules"`you should also replace single-quotes in the array and quote strings.and remove trailing commas.if you have. remove javascript comments.,neutral
prettier/prettier,eslint,2017-07-11T08:25:28Z,you mean `tslint.json`?i don't think we'll be supporting this. as we don't do the same for `.eslintrc`.,neutral
prettier/prettier,eslint,2017-07-11T12:32:27Z,configuration file (`.prettierrc`) format was recently merged (#2434).prettier will look for configuration files starting at the file being formatted. and looking up the tree.should we be doing the same thing for `.prettierignore`? maybe we can even re-use the configuration file for ignoring files. too:```json// .prettierrc{  "ignore": [    "*.min.js"  ]}```i know eslint has two files (`.eslintrc` and `.eslintignore`). but eslint config files can be much more complex than a `.prettierrc`. thoughts?,neutral
prettier/prettier,eslint,2017-07-11T12:45:23Z,azz we should support `.prettierignore` (and allow customize this value). why? in many project i have `.gitignore` where put all files which i want to ignore. i use `--ignore-path .gitignore` for `eslint`. `stylelint` and other linters. if we don't support customize `--ignore-path`. i will have to duplicate all ignored files in the `.prettierrc` and `.gitignore`. it will be extremely inconvenient (sometimes it is many many files).,negative
prettier/prettier,eslint,2017-07-12T06:55:35Z,why there is no continuation here? do how to fix the warning in `eslint`?,neutral
ArkEcosystem/ark-js,mocha,2017-09-01T09:55:56Z,nice!  +5,positive
NodeRedis/node_redis,mocha,2015-10-08T16:10:10Z,fix intermitent failures in windows ci tests. we are observing intermittent failures in our windows ci tests. it's likely that this demonstrates actual race conditions in the node_redis client:``` sh 1) the node_redis client using options: detect_buffers: true;  using javascript and ipv4 unref exits subprocess as soon as final command is processed:     error: unref subprocess timed out      at error (native)      at null._ontimeout (c:\projects\node-redis\test\node_redis.spec.js:423:37)  2) the node_redis client using options: detect_buffers: true;  using javascript and ipv4 socket_nodelay true fires client.on('ready'):     uncaught assertionerror: null === 0      at childprocess.<anonymous> (c:\projects\node-redis\test\node_redis.spec.js:428:32)      at maybeclose (child_process.js:1015:16)      at process.childprocess._handle.onexit (child_process.js:1087:5)`````` sh  1) publish/subscribe using options:  using javascript and ipv4 subscribe handles sub_unsub_msg_sub:     typeerror: cannot read property '0' of undefined      at context.module.exports.serverversionatleast (c:\projects\node-redis\test\helper.js:99:24)      at context.<anonymous> (c:\projects\node-redis\test\pubsub.spec.js:139:59)      at callfnasync (c:\projects\node-redis\node_modules\mocha\lib\runnable.js:306:8)      at test.runnable.run (c:\projects\node-redis\node_modules\mocha\lib\runnable.js:261:7)      at runner.runtest (c:\projects\node-redis\node_modules\mocha\lib\runner.js:421:10)      at c:\projects\node-redis\node_modules\mocha\lib\runner.js:528:12      at next (c:\projects\node-redis\node_modules\mocha\lib\runner.js:341:14)      at c:\projects\node-redis\node_modules\mocha\lib\runner.js:351:7      at next (c:\projects\node-redis\node_modules\mocha\lib\runner.js:283:14)      at immediate._onimmediate (c:\projects\node-redis\node_modules\mocha\lib\runner.js:319:5)`````` sh  1) the node_redis client using options:  using javascript and ipv4 when connected when redis closes unexpectedly monitor monitors commands on all other redis clients:     error: redis connection gone from close event.      at redisclient.connection_gone (c:\projects\node-redis\index.js:9:25044)      at socket.<anonymous> (c:\projects\node-redis\index.js:9:5432)      at tcp.close (net.js:485:12)`````` sh1) the node_redis client using options: detect_buffers: true;  using javascript and ipv4 when connected when redis closes unexpectedly monitor monitors commands on all other redis clients:     error: redis connection gone from close event.      at redisclient.connection_gone (c:\projects\node-redis\index.js:9:25044)      at socket.<anonymous> (c:\projects\node-redis\index.js:9:5432)      at tcp._onclose (net.js:469:12)```we should put some time into squashing these bugs. since they are likely demonstrating real issues with the client that appear more easily in a windows environment.cc: brycebaril bridgear mranney erinspice blainsmith,negative
sequelize/sequelize,jasmine,2013-05-02T11:32:28Z,i removed an extra semi-colon that was added in my previous commit. i don't have postgres installed so i cannot run the jasmine-spec. however the test-buster-mysql is passing (and always did). hope it works now. :),positive
sequelize/sequelize,jasmine,2013-05-02T18:05:27Z,looks good. we'll have a further look at it latercould you add this line to package.json`"test-buster-mariadb": "dialect=mariadb buster-test".`and add mariadb as a dialect in each test file in spec-jasmine (not very dry. i know. sorry). that way the tests will actually be run for your new dialect :)_edit_ - you should also add the following to env in .travis.yml`- db=mysql dialect=mariadb`,positive
sequelize/sequelize,jasmine,2013-05-08T04:36:57Z,i'm trying to get rid of my travis build errors but seem to just be making more of a mess in my local copy and getting lots of errors when i try to test locally. can someone help me out with this?  i've been making changes both in spec and spec-jasmine.,negative
sequelize/sequelize,eslint,2017-05-15T14:41:35Z,add arrow-parens rule to eslint. this comes up a lot in prs. arrow functions with a single argument do not need to specify the parenthesis. so they shouldn't. example:```js[1. 2. 3].map(x => x * 2)// looks a lot cleaner than[1. 2. 3].map((x) => x * 2)```just like you wouldn't for example wrap every assignment expression in an extra set of parenthesis:```tsconst x = (y + 1);```you shouldn't do it for arrow functions if it's not needed.just added the rule and ran `eslint --fix`,positive
sequelize/sequelize,eslint,2017-05-16T06:43:24Z,:+1:,neutral
swagger-api/swagger-ui,jshint,2015-04-29T09:33:49Z,add jshint to gulp..lint and dist. fixes #1221 not much too it. there is already a .jshintignore file. i thought of adding a .jshinrc but the weight of those pedantic details got to me.at least no more missing semi-colons breaking the travis build :dps: using same styler as swagger-js,neutral
assisrafael/angular-input-masks,karma,2015-04-07T21:34:10Z,merged in 1138f05d9feb0a801c16c0a09bc199a113d9fe96,neutral
patriksimek/node-mssql,standard,2017-05-30T16:58:44Z,document request timeout suggested defaults; take request timeout from connection string. hi - i'm using a standard "connection string" method and it's taken me a literal age to dig through the code to find that you can a) pass config variables by simply adding them to the connection string and b) that **requesttimeout** needs to be specified as **request timeout=60000;**can i suggest that the connection readme is updated to explain thismany thanks.paul,neutral
ariatemplates/hashspace,karma,2014-02-28T14:01:22Z,b-laporte i'm fine either way. we can make it mandatory. but if so we should fail with an explicit error message. can prepare a different pr. opened this one since karma pre-processor / grunt task were not passing this arg and it started to fail with a "cryptic" message. i'm somewhow fine with making it mandatory.,negative
caolan/async,eslint,2016-07-20T22:01:57Z,lgtm.  even if it doesn't affect performance. at least we can get rid of that eslint loopfunc exception.,neutral
plugCubed/plugAPI,eslint,2016-09-01T17:22:59Z,tried to fix your eslint problem(didnt work),neutral
nightwatchjs/nightwatch,jshint,2014-04-25T16:06:51Z,ah looks like jshint. i'll fix it up.,positive
nightwatchjs/nightwatch,jshint,2014-05-05T19:06:21Z,refactor utils logger. this _pr_ includes the follwing changes:- fix for some jshint issues. - fix for a typo in function-name- refactoring to reduce the number of function calls to get a _timestamp_,neutral
nightwatchjs/nightwatch,mocha,2015-10-12T03:58:13Z,essentially yes. just in the reporting behavior. i'm thinking of how i run tests with mocha or rspec. and plan out new behavior with pending tests.,neutral
nightwatchjs/nightwatch,mocha,2015-10-16T03:16:22Z,because of the security regulations. i have made a sample test suite to reproduce this issue.just executing test with mocha test runner. you can see it.``` javascriptdescribe('test suite'. function() {  before(function(client. done) {    console.log("before!!");    client        .url("". function(){          done();        });  });  after(function(client. done) {    console.log("after!!");    client.end(function() {      done();    });  });  beforeeach(function(client. done) {    done();  });  aftereach(function(client. done) {    done();  });  describe('testa'. function() {    it('uses bdd to run the google simple test'. function(client) {      client.setvalue('input[type=text]'. ['nightwatch'. client.keys.enter])          .pause(1000);      client.expect.element("must failed...!").to.be.present;    });  });  describe("testb". function(){    it('uses bdd to run the google simple test'. function(client) {      client.setvalue('input[type=text]'. ['nightwatch'. client.keys.enter])          .pause(1000);      client.expect.element("must failed...!").to.be.present;    });  });});```i found some hints related with this issue last night.when the following expect failed with mocha. the after hook was not executed. ``` javascript      client.expect.element("must failed...!").to.be.present;```so a browser window was reopened and the failed test suite was resumed. but before hook method was not executed.these flows are differ from default test runner's.,negative
nightwatchjs/nightwatch,mocha,2015-10-16T07:06:28Z,no. test_worker has nothing to do with this issue.whether enabled it or disabled it. the same thing happened.i may have found why this happend.when i turn on bail of mocha options. this issue did not happen.``` -b. --bail                              bail after first test failure```it seems that mocha's retry policy is differ from nightwatch's when test case is failed.,negative
nightwatchjs/nightwatch,mocha,2015-10-23T12:32:24Z,i managed to get this working by just using`"test_runner":"mocha"`instead of`"test_runner": {"type": "mocha"}`,neutral
nightwatchjs/nightwatch,mocha,2015-10-27T13:53:43Z,i am having the same problem. but i would like to use another reporter but when i add this to the config:```"test_runner" : {  "type" : "mocha".  "options" : {    "ui" : "tdd".    "reporter" : "nyan"  }}```this setting is taken from the docs (except for 'nyan'). but it doesn't work. only with:```"test_runner" : "mocha"```,negative
Dash-Industry-Forum/dash.js,jasmine,2015-03-02T05:58:47Z,looks good. thanks! just one last thing - i see that some of jasmine tests fail. in dev branch all of them pass. could you please take a look at them? i am going to merge this pr as soon as all the tests pass.,positive
nodebox/opentype.js,mocha,2015-07-29T19:39:33Z,another good thing about restructure is that it's got lots of mocha tests (a total of 234).,neutral
formly-js/angular-formly,eslint,2015-10-18T22:29:05Z,build(eslint): use eol=lf so eslint passes,neutral
formly-js/angular-formly,eslint,2015-10-30T17:58:53Z,npm err! tell the author that this fails on your system:npm err!     npm run eslint:test -s && npm run eslint:src -s,neutral
formly-js/angular-formly,eslint,2015-10-30T22:43:00Z,hi! thanks for working on this. what you have is great. the reason the build is failing is because your code doesn't pass our linting rules. could you please run `npm run eslint` and fix all the issues mentioned. then please amend your commit with this changes and force push (so the pr has only one commit). let me know if you need help with this. thanks again!,positive
formly-js/angular-formly,coveralls,2015-06-03T02:31:41Z,closing this in favor of a single issue,neutral
formly-js/angular-formly,coveralls,2015-06-03T18:55:13Z,i'm going to close this. code coverage is now supported. still working on coveralls integration (travis is having trouble) but you'll be pleased to hear that we're actually pretty well covered.,positive
desktop/dugite,mocha,2017-10-30T01:32:15Z,update a bunch of packages. we no longer need `os-tmpdir`. and aside from `mocha` everything else is just minor updates.,neutral
angular-fullstack/generator-angular-fullstack,mocha,2014-08-22T04:15:09Z,let me get some clarity: are we talking about test coverage for the generator? or. for a newly _generated_ project? i misspoke earlier and i apologize. `generator-angular-fullstack` uses mocha for its own testing.,neutral
angular-fullstack/generator-angular-fullstack,mocha,2014-08-22T05:38:26Z,i would like to unify them. i prefer mocha and chai for both front and backend. but i think we should support jasmine as well.,neutral
angular-fullstack/generator-angular-fullstack,mocha,2014-08-25T11:53:53Z,daftmonk i've got a branch based on `canary` + #482 that uses mocha + chai + sinon for server and client side tests. i've included promise support in the server tests and reduced their code due to removing callbacks and such... also i switched to using chai should assertions since they don't need globals(jshint) or a `var expect = require('chai').expect` in every test. let me know if thats a problem. one thing that i see is the test included in `generator-ng-component` would need to be updated if we were to keep those changes. in implementing a prompt based testing framework selection. we would need to be able to maintain the choice with `.yo-rc.json` i'm guessing? then ng-component would need to be able to support jasmine or chai style assertions? sorry. i've not had much experience with the inner workings of the sub-generators.,negative
angular-fullstack/generator-angular-fullstack,mocha,2014-08-26T20:12:37Z,hmm jshint is not liking the expressions in the mocha tests for the user model.  i needed to update some of the tests to be async.going to add``` javascript/*jshint expr: true*/```to the top of the file.,positive
angular-fullstack/generator-angular-fullstack,mocha,2014-08-27T23:19:42Z,kingcody i've got more experience with jasmine tbh. but i can give it a shot; no promises. but in any case thanks for your work on it! just a thought. maybe there could be a choice to use jasmine on its own. or. mocha + sinon + chai? i'm contemplating having to rip out all your good work in future projects ...lol,positive
angular-fullstack/generator-angular-fullstack,mocha,2014-08-29T15:13:35Z,refactor(server-tests): use sinon-chai and `mocha.conf.js`. changes:- add `mocha.conf.js` and use it as a `require` in `mochatest` task- switch `should.js` for `mocha-chai`- change server-side test assertions to user chai assertionsbreaking changes:- should.js is no longer included. chai assertions should be used instead.,neutral
angular-fullstack/generator-angular-fullstack,mocha,2014-09-04T07:34:26Z,also pentateu your build is failing because canary no longer uses `should.js` and instead uses chai assertions. if you look in `mocha.conf.js` you should see where `chai.should()` is initialize as well as defining expect. assert. and sinon as globals for the tests.you should be able to simply remove `var should = require('should');` from the tests to correct the issue.,neutral
angular-fullstack/generator-angular-fullstack,sauce,2015-09-17T03:48:42Z,i'm sure sauce labs will fail initially with too many concurrent tests...,negative
angular-fullstack/generator-angular-fullstack,karma,2014-08-20T08:54:35Z,testing frameworks. i'm relatively new to unit testing. but i've been working with the specs that come with the generator; trying to learn more and see if i can help with the test coverage. i've found that jasmine is a little heavy when setting up asynchronous tests. perhaps i haven't given it enough of a chance. mocha on the other hand seems to be a good bit easier when it comes to async. i setup mocha + chai + sinon for the server tests i was working on and really enjoyed the combo. kinda got me thinking: why not use mocha with karma instead? i installed `karma-mocha` and everything seems to work great. so i'm wondering if anyone could outline jasmine's advantages? or would it possibly be more advantageous to use mocha for server and client testing?,negative
angular-fullstack/generator-angular-fullstack,karma,2014-08-21T05:27:13Z,jakxz thanks so much for your answer! i can totally see the advantage of using the same framework for both server and client. as for mocha + chai. the server test are actually using mocha + should.js atm. would a switch to mocha + chai be possible? in my (inexperienced) opinion; chai would seem a better candidate since it provide `expect. should. assert`.also. on the point of a unified testing framework; karma currently uses jasmine. while the server test are written in mocha. should we look at unifying them or perhaps use a prompt in the future to allow users to choose?btw; thanks for suggesting istanbul. i'll definitely check it out.,positive
angular-fullstack/generator-angular-fullstack,karma,2014-08-22T04:58:56Z,i was referring to a newly _generated_ project when i spoke earlier. the client side test. ran by karma. use jasmine. the server side use mocha + should.js. so my question was. should we look at unifying those tests? potentially using mocha + chai for both server and client test on a generated project. sorry for the confusion.,negative
angular-fullstack/generator-angular-fullstack,karma,2014-08-22T06:04:18Z,daftmonk. by support would you mean a prompt? or merely making the test in a way that would allow for jasmine to be easily switched out?,neutral
angular-fullstack/generator-angular-fullstack,karma,2014-08-22T07:15:19Z,i was thinking a prompt.,neutral
angular-fullstack/generator-angular-fullstack,karma,2014-08-22T08:24:05Z,jakxz thanks again for your input on this.,positive
angular-fullstack/generator-angular-fullstack,karma,2014-08-23T05:05:48Z,in `karma.conf.js`. change `loglevel: config.log_info` to `loglevel: config.log_debug`. see if that gives you any more info.,neutral
angular-fullstack/generator-angular-fullstack,karma,2014-08-23T18:03:50Z,kingcody: that led me to the fix! i apparently didn't have a test defined in main.controller.spec.js. and the karma section needs at least one test.thanks much!,neutral
angular-fullstack/generator-angular-fullstack,karma,2014-08-25T18:18:07Z,nice job kingcody! :+1:,positive
angular-fullstack/generator-angular-fullstack,karma,2014-08-27T23:09:00Z,jakxz just wondering. since you seem to have experience with testing. if you might have time to checkout the work i've done on the tests i mention above. if not. it's all good :),positive
angular-fullstack/generator-angular-fullstack,karma,2014-08-28T00:59:32Z,> in implementing a prompt based testing framework selection. we would need to be able to maintain the choice with .yo-rc.json i'm guessing? then ng-component would need to be able to support jasmine or chai style assertions?that's my plan :smile:,positive
angular-fullstack/generator-angular-fullstack,karma,2014-08-28T01:21:16Z,jakxz would you be interested in helping with the jasmine test coverage?,positive
angular-fullstack/generator-angular-fullstack,karma,2014-09-08T21:26:12Z,kingcody i would definitely be interested. and will _try_ to make time for it somehow... but if others in the community can start making prs then i'd encourage that :smile:,positive
angular-fullstack/generator-angular-fullstack,karma,2014-09-08T22:40:43Z,sounds great jakxz. here are some of the things that i see need to be implemented:- [ ] port current server-side tests to jasmine alternatives- [ ] port current client-side tests to mocha alternatives- [ ] unify/refactor grunt tasks for client and server tests using jasmine or mocha- [ ] server-side test coverage using istanbul and jasmine- [x] server-side test coverage using istanbul and mocha- [ ] client-side test coverage using istanbul and jasmine or mocha- [ ] generator prompt for test selection- [ ] extend `ng-component` to generate jasmine or mocha tests based on `.yo-rc.json`do you think that it would be a good idea to open an issue to invite pr's and track updates to the list of things needed?,neutral
nodeca/argparse,jshint,2013-02-22T11:23:17Z,ah. that's not your fault. new jshint better search errors. and found those in other files. will fix them myself.,neutral
serverless/serverless-graphql,eslint,2017-10-12T13:51:11Z,add prettier and eslint. hey. thanks for this great example it is really helpfull  this pr close #88 - move eslint config at the root folder. so now the client and backend folder are linted- add a prettier config compatible with eslint- fix the lint for the client and backend folder- add a git hook that prettier the files before commit,positive
serverless/serverless-graphql,eslint,2017-10-12T14:29:42Z,pradel this is awesome !! i'll do one round of testing and then merge this pr ;)  looking forward to more contributions :),positive
serverless/serverless-graphql,eslint,2017-10-13T19:47:45Z,pradel can you please do functional testing of this pr? i tried to test this pr by running it on local and see some errors (attached screenshot in the pr). please let me know if i am missing anything. thankssid,negative
serverless/serverless-graphql,eslint,2017-10-13T21:29:27Z,pradel i am going to merge this pr and fix the bug in another pr.,negative
serverless/serverless-graphql,eslint,2017-10-16T13:31:51Z,really nice changes pradel,positive
gilbarbara/react-joyride,uglify,2017-11-09T01:54:57Z,hey.yeah. i can refactor the build process to transpile the individual files to `/lib` without uglifying and remove the source-map.thanks! :),positive
cure53/DOMPurify,karma,2015-10-25T13:54:44Z,...not for now - at least i've never come across that error. i'll look into it later. maybe updating karma helps and i'd check other builds if the error previously occurred.,negative
Starcounter-Jack/JSON-Patch,jasmine,2017-01-02T17:53:03Z,add es6 proxy support with tests. i also enhanced the css of jasmine tests. and tweaked a little of the js responsible for benchmarking ui.,neutral
wagenaartje/neataptic,mocha,2017-05-03T10:26:56Z,thanks! it's not what i thought the problem might be and i'm not familiar with mocha. so not sure i'll be able to add anything. but i'll do some mocha reading and have a look. i found this project from synaptic and looks like you've got some great stuff going on here.,negative
Hacker0x01/react-datepicker,eslint,2017-12-25T14:39:30Z,prettier isn't really a replacement for eslint.i think it makes sense to use prettier for code formatting while continuing to use eslint for linting. there is a tiny bit of overlap (eg: semicolon enforcement). so they would need to be configured to not contradict each other.i also generally prefer keeping the actual change in a separate commit from the automated reformatting if possible. it makes it much easier to rebase any unmerged commits.,neutral
webpack/webpack,standard,2016-11-11T05:43:54Z,levino i think webpack is not a standard that every package provider should look at. they just need to follow the npm standards. the standard is that the file can be a js or a json. and any module loader that loads packages should honour both.,neutral
webpack/webpack,uglify,2018-03-01T16:48:38Z,in my opinion uglify shouldn't remove these comments by default. removing license comments isn't that good.,negative
webpack/webpack,uglify,2018-03-01T16:55:25Z,maybe `uglify-js` was keeping `/*!` and `uglify-es` is not. we could set `comments` to preserve the old behavior.,neutral
webpack/webpack,uglify,2018-03-19T15:10:48Z,estaub i think better set this option in uglify plugin. not webpack. it is allow don't change webpack code when issue will be resolve,neutral
webpack/webpack,uglify,2018-03-19T15:11:10Z,webpack-bot move webpack-contrib/uglifyjs-webpack-plugin,neutral
webpack/webpack,uglify,2018-03-21T10:21:34Z,please can the note about not using `-p` be added to the readme? bootstrap frameworks and webpack example projects all over the net appear to use `-p`. the fact that using it in conjunction with `uglifyjs-webpack-plugin` will always cause an error would warrant a more public note about it. imo.,neutral
webpack/webpack,uglify,2018-03-22T10:09:21Z,bump uglifyjsplugin to remove tapable warning. <!-- thanks for submitting a pull request! please provide enough information so that others can review your pull request. -->**what kind of change does this pr introduce?**bugfix**did you add tests for your changes?**no**if relevant. link to documentation update:**n/a**summary**when running unit tests there is a deprecation notice.this pr bumps uglify plugin to remove this warning.**does this pr introduce a breaking change?**no,positive
webpack/webpack,uglify,2018-03-23T11:34:00Z,evilebottnawi the error can be re-produced without using uglify plugin. but have tried set it up with `keep_fnames. keep_classname. mangle: { reserved: ['nerror']}` as well. but name still mangled,neutral
webpack/webpack,uglify,2018-03-24T10:53:51Z,i had the same problem. i tried configuring the uglifyjsplugin plug-in. but it didn't work,negative
koopjs/koop-provider-agol,standard,2015-09-10T17:23:39Z,all tests passing after i laid down one more commit to appease the `standard` gods.  should i merge as is or do you want me to rebase it first?,neutral
stealjs/steal,sauce,2017-01-30T15:50:29Z,we should do (2). we don't need to run testee in travis b/c saucelabs already runs it in every browser (including firefox. which is what testee previously did).yes. json was added to the main test file. that's how the others should do it as well.,neutral
stealjs/steal,sauce,2017-01-31T22:33:34Z,refactor tests. refactor tests and enable them all on `test.js` so that saucelab will run all test in different browsersthis pr also contains the changes of the cache-bust extension. because i didnt run the `build` grunt task on that prlets see if all going right.  all tests passwill close #1027,neutral
clappr/clappr,karma,2014-11-14T13:31:02Z,i started to update it but started to get some errors. i'm following this at nikku/karma-browserify/issues/50,negative
JustinTulloss/zeromq.node,mocha,2014-10-04T17:54:27Z,kkoopa ronkorving still looking good for testing but i am seeing timeouts still. the default timeout for mocha is 2000ms. can we change this to say 5000ms or maybe even 10s so when travis is overloaded we wont get failures?  "--timeout <ms>" / "-t <ms>" in the makefile where mocha is called.,negative
prebid/Prebid.js,standard,2018-01-05T19:19:10Z,yozaz . thank you very much for your quick reply.i will contact undertone to see why they suggested using a 0x0 slot. there might be some confusion with their implementation since i think this is the first test of their bidder adapter. it could also be that the key value targeting is incorrect. thanks. i have a lot of things to check for debugging this problem.,positive
prebid/Prebid.js,standard,2018-01-08T16:05:10Z,matthewlane do we need a standard key for media type now?,neutral
arose/ngl,standard,2017-07-26T08:53:47Z,right. standard output doesn't do it. writing would be different but not an issue in ngl - sry and thx!,neutral
asset-pipe/asset-pipe-sink-mem,eslint,2017-12-04T13:49:36Z,chore: add eslint check for missing deps. ## status**ready**## descriptionadds dep checking,negative
canjs/canjs,sauce,2016-11-07T15:40:13Z,phillipskevin how do we get the saucelabs image updated?,neutral
canjs/canjs,sauce,2016-11-07T18:40:30Z,looks like this was reverted. which is why ie 11 isn't showing up in the sauce labs badge.,negative
tjunnone/npm-check-updates,mocha,2015-09-09T23:38:33Z,i uninstalled all modules and installed them one by one to check what causes the problem.it seems to be related to generator-mocha and all yeoman generators using mocha and generator-mocha modules (in my case. generator-backbone). i can reproduce the problem by uninstall and installing that particular module.,neutral
babel/babylon,codecov,2016-08-17T16:10:00Z,correct codecoverage paths,neutral
babel/babylon,codecov,2016-08-17T16:15:29Z,.,neutral
babel/babylon,codecov,2016-08-30T21:29:16Z,change to export codecoverage as json,neutral
babel/babylon,eslint,2016-11-19T02:52:28Z,krainboltgreene bablyon doesn't support external plugins (so _plugin_ is a bit of a misnomer here). the `plugins` option takes an array of strings for _built-in_ parser plugins. this pr just makes it easier for tooling (like astexplorer or babel-eslint) to enable all parser options without having to maintain a separate list.,neutral
sasstools/sass-lint,mocha,2015-09-17T16:11:27Z,indentation test failing on windows (newline related?). i have the project checked out on windows using unix style line endings. running `npm test` on develop i see the following failure:```1 failing  1) indentation [size: 2]:      assertionerror: 8 == 0      + expected - actual      -8      +0      at c:\users\jclanton\documents\github\sass-lint\tests\rules\indentation.js:15:19      at object.module.exports.test (c:\users\jclanton\documents\github\sass-lint\tests\rules\_lint.js:33:3)      at context.<anonymous> (c:\users\jclanton\documents\github\sass-lint\tests\rules\indentation.js:12:10)      at callfnasync (c:\users\jclanton\documents\github\sass-lint\node_modules\mocha\lib\runnable.js:306:8)      at test.runnable.run (c:\users\jclanton\documents\github\sass-lint\node_modules\mocha\lib\runnable.js:261:7)      at runner.runtest (c:\users\jclanton\documents\github\sass-lint\node_modules\mocha\lib\runner.js:417:10)      at c:\users\jclanton\documents\github\sass-lint\node_modules\mocha\lib\runner.js:524:12      at next (c:\users\jclanton\documents\github\sass-lint\node_modules\mocha\lib\runner.js:338:14)      at c:\users\jclanton\documents\github\sass-lint\node_modules\mocha\lib\runner.js:348:7      at next (c:\users\jclanton\documents\github\sass-lint\node_modules\mocha\lib\runner.js:281:14)      at immediate._onimmediate (c:\users\jclanton\documents\github\sass-lint\node_modules\mocha\lib\runner.js:316:5)```this may be related to how `os.eol` is used in the indentation rule. but i have not yet had time to verify that.,negative
sasstools/sass-lint,eslint,2015-10-14T00:45:25Z,i think that everything should be disabled by default. with all these tools (scss-lint. jshint. jscs. eslint). i always explicitly set every option i want enabled because:- i don't want to deal with updates changing some defaults- a team member may mistake a lack of setting for an undecided convention- the configuration is now in two places instead of onei think an alternative would be to take eslint's lead and have an option that sets up a set of "recommended" lints.,negative
sasstools/sass-lint,coveralls,2015-12-21T11:22:51Z,damn you coveralls! :stuck_out_tongue: i'll add some non cli unit tests too later on to check the results.,neutral
rdf-ext/rdf-ext,mocha,2015-09-25T07:53:20Z,fernando-silva thanks for the patch! can you please give an example. that can be added to the mocha tests?,positive
Automattic/mongoose,mocha,2013-11-27T23:26:43Z,good catch. wonder why mocha isn't complaining about that.,negative
speakeasyjs/speakeasy,standard,2017-02-10T04:01:32Z,should we have a github pr check for standard linting?also. we're using semistandard (standard + semicolons). not sure if there's any interest in changing it.,neutral
vega/vega-lite,codecov,2016-12-02T00:32:12Z,rename scale's `bandsize` to `rangestep`. (very likely this will fail codecov test for diff coverage since it touches so many files),negative
vega/vega-lite,codecov,2016-12-02T00:33:50Z,upping your loc count. i see :-p,neutral
vega/vega-lite,codecov,2016-12-02T00:36:02Z,> upping your loc count. i see :-phard to beat adding / removing ts interface like you lol. honestly. this pr is a pretty boring task. if you had done it for me. i'd greatly appreciate. (too late!),positive
vega/vega-lite,codecov,2016-12-02T00:44:54Z,domoritz ok force pushed the fix for description,neutral
vega/vega-lite,codecov,2016-12-02T00:47:42Z,lgtm after the one comment fix.,neutral
pouchdb/pouchdb,eslint,2016-04-07T12:24:06Z,awesome thanks. :+1: its best to be as strict with eslint as we can be,positive
pouchdb/pouchdb,eslint,2016-04-07T21:24:19Z,heh sorry. caught by eslint,negative
pouchdb/pouchdb,selenium,2014-01-16T21:19:34Z,ok so as this currently is it's not doing anything differently except for correctly failing the tests instead of pretending to succeed.,positive
pouchdb/pouchdb,selenium,2014-01-17T00:57:17Z,so what's the relationship between this and #1230?,neutral
pouchdb/pouchdb,selenium,2014-01-17T01:55:49Z,ok the relation is that this was my first idea. but i was talking to daleharvey on irc and he felt strongly in webdriver so #1230 is my attempt to fix selenium/webdriver,neutral
pouchdb/pouchdb,selenium,2014-01-17T10:51:54Z,so am i right in thinking that the tests have never worked in browser on travis. and have just been reporting success the whole time? if so thats fairly embarrassing. apologies,negative
pouchdb/pouchdb,selenium,2014-01-17T11:22:27Z,but if that is so. then good for merging this. and disabling the browser tests on travis until they are passing. the swap to wd looks good. slightly confused about how the execute script thing is working but will look into it more. its working locally. if it could be cleaned up a bit with the console.logs etc would be goodworking on getting it passing today. thanks for all this,positive
pouchdb/pouchdb,selenium,2014-01-17T11:25:09Z,yes i can clean up the console logs. but i think we should leave in a log of tests run passed failed. a good sanity check,negative
pouchdb/pouchdb,selenium,2014-01-18T13:30:00Z,ok ping daleharvey nolanlawson this one has been de nitted,neutral
pouchdb/pouchdb,selenium,2014-01-18T13:31:50Z,closing this for now,neutral
pouchdb/pouchdb,selenium,2014-01-22T23:52:18Z,npm run test-browsers run in parallel. they shouldnt do that. bug with how we start selenium,neutral
pouchdb/pouchdb,selenium,2014-01-22T23:54:51Z,it would be nice if there was a better way to do this. but couldnt see  a particularly obvious one,neutral
pouchdb/pouchdb,selenium,2014-01-27T13:26:54Z,merged,neutral
pouchdb/pouchdb,selenium,2014-02-07T23:45:56Z,you wouldnt install level binaries. npm install would become npm rebuildthe problems are mostly due to selenium. so it could be a matter of installing that seperately (or replacing it),neutral
pouchdb/pouchdb,selenium,2014-02-07T23:54:18Z,unable to npm install due to selenium,neutral
pouchdb/pouchdb,selenium,2014-02-09T01:47:39Z,(#1311) - included selenium binary,neutral
pouchdb/pouchdb,selenium,2014-02-09T23:30:55Z,awesome thanks. can sort out the overall test discussion in the other thread,positive
pouchdb/pouchdb,jshint,2014-01-29T10:21:21Z,some of these places we might want to iterate inherited keys. now that `object.defineproperty` exists there is really no excuse for libraries to shit all over the global name space by adding enumerable properties to object.prototype. so i am skeptical of the need for this. if we do want this. then we need to make sure to add it to the jshint check,neutral
pouchdb/pouchdb,jshint,2014-01-29T15:06:48Z,like daleharvey said. just add it to .jshintrc and rm the extra one and we can merge it. we can clean up in a later one.,positive
pouchdb/pouchdb,jshint,2014-02-10T19:41:10Z,jshint bin/. and tests/. but maybe do that one seperately. probably a lot of work,neutral
pouchdb/pouchdb,jshint,2014-02-14T16:35:02Z,so theres a few nits. as calvin mention the test format needs changed and minor jshint errorshowever the change looks great. i took a look at the other places `isvalidid` is used. its only 2 other places and they both are sending errors straight back (there is some duplicated logic in one of the calls) so i think you should replace those calls and get id of `isvalidid` completely,neutral
pouchdb/pouchdb,sauce,2013-03-27T07:42:50Z,(#609) - upgrade saucelabs firefox,neutral
pouchdb/pouchdb,sauce,2013-03-27T08:54:40Z,switch npm test to just test in node. people using grunt test / npm test shouldnt be hooking up to saucelabs. just make a new```grunt saucelabs```target that hits saucelabs. and have |grunt test| run node tests,neutral
pouchdb/pouchdb,sauce,2013-03-28T18:35:45Z,nope. just the browser output (firefox) from saucelabs,neutral
pouchdb/pouchdb,istanbul,2015-10-08T11:02:50Z,nolanlawson what do you do to figure out what exact lines are not being covered? i would like to get this to 100% so its easier to not regress it. even if we add some ignores for where there is browser specific stuff we can remove it when we start testing the browser implementation (and i would prefer to add ignores than tests that only exist for coverage purposes),neutral
pouchdb/pouchdb,istanbul,2015-10-11T03:42:15Z,awesome work. really happy to see the coverage go up. whether it's through dead code removal or reasonable `istanbul ignore`s.,positive
pouchdb/pouchdb,istanbul,2015-10-11T10:01:23Z,100% coverage. some of this really should have coverage. the bulkget stuff for example. however bulk_get is going to be actively worked on. i think if we land this. we have 100% coverage and we can maintain it easier at 100% and remove istanbul clauses as we work on those areas of code (its hard to maintain < 100% because patches that remove tested code will make coverage worse despite making it better tested),negative
pouchdb/pouchdb,istanbul,2015-10-11T13:09:09Z,nice. let's do it. i agree that just requiring 100% code coverage is way easier to manage.,positive
pouchdb/pouchdb,istanbul,2015-10-11T13:09:20Z,this isn't really that transparent but i think the point about regressions and 100% is sound. :+1:,negative
pouchdb/pouchdb,istanbul,2015-10-13T23:01:47Z,rad+.  thanks guys.  istanbul ignore added.  additionally. jshint was barking about `atob` being redefined. which i suppressed.  rebase was being a little bully as  f70fc9b was a merge commit with a conflict resolution embedded.  i wasn't comfortable rebasing that one :/,negative
lodash/lodash,uglify,2013-03-27T08:17:40Z,i retried this morning. same problem.manually downloading uglifyjs with the provided command worked.,neutral
emailjs/emailjs-imap-client,standard,2018-02-05T07:25:36Z,somehow i missed this issue. emailjs are client libs as in they don't provide email mta or other server functionality. they do however connect to your server of choice. feel free to use them in your setting :),neutral
angular/protractor,jasmine,2016-04-21T06:49:09Z,how can we assign the result of asynchronous method result value to global scope in protractor . i have a use case where i need to get the value from the database and that value has to be used many times in a jasmine test .so . my question do we need to assign in global scope or use flow.execute() method .can i know which one should i use. describe('testing suite'. function() {    it('testing spec'. function() {        browser.get(browser.baseurl);        var number;        database.generatemobilenumber().then(function(mobilenumber) {            console.log(mobilenumber);            number = mobilenumber;            console.log(number);        });        console.log(number);    });});,neutral
angular/protractor,jasmine,2016-04-21T09:14:50Z,firstly thanks for your reply. i want to assing in jasmine test file scope. when i assign it is show as lib$es6$promise$promise$$promise {  _id: 9.  _state: undefined.  _result: undefined.  _subscribers: [] }but i need a value,positive
angular/protractor,jasmine,2016-04-21T09:16:35Z,i have to call for each jasmine suite file that function,neutral
angular/protractor,jasmine,2016-04-21T09:40:00Z,vivekbrahmadandi also you can try generate many numbers - 1000. 2000 and put them into global array in onpreparethen in your test - just .pop() number each time you need it.or you can try to play with browser.wait()``` javascriptlet prom = promise.defer();var phonenumber;database.generatemobilenumber().then(function(number) {phonenumber = number;prom.resolve(true);})browser.wait(prom. 10000)console.log(phonenumber)```something like this i think.,neutral
angular/protractor,jasmine,2016-05-05T18:45:28Z,in the meantime i found out that there is a possibility to set comments on tests ignored with `xit` and therefore even improved my workaround a little bit:```            // in my protractor onprepare code:            var _pending = pending;            pending = function(pendingmessage) {                return {                    it: function(description. itfunction) {                         var spec = xit(desription. itfunction);                         spec.pend(pendingmessage);                         return spec;                                            }.                    describe: function(description. describefunction) {                        return describe(description. function() {                            _pending(pendingmessage);                            return describefunction();                        });                    }.                    here: function() {                        return _pending(pendingmessage);                    }                };            };```usage:`pending('my pending comment').describe('my describe block'. function() { ... });`or`pending('my pending comment').it('my it block'. function() { ... });`or (just in case you still need the old pure jasmine pending implementation somewhere else. with all advantages and disadvantages)`pending('my pending comment').here();`,negative
angular/protractor,selenium,2015-04-20T21:50:46Z,it looks like maybe you don't have the test server running at all. have you run `npm start` to start the test server before running the suite?do you have a selenium server running at localhost:4444?,neutral
angular/protractor,selenium,2015-04-20T22:09:10Z,nop. i didn't and i haven't. hehe.i thought that npm test ran all the necessary things to test protracto.firma automática:mail enviado desde mi teléfono móvil. disculpe los errores y el formato.> el 20/4/2015. a las 18:50. julie ralph notificationsgithub.com escribió:> > it looks like maybe you don't have the test server running at all. have you run npm start to start the test server before running the suite?> > do you have a selenium server running at localhost:4444?> > —> reply to this email directly or view it on github.,neutral
angular/protractor,selenium,2015-04-24T11:51:15Z,cerdman did you fix the size of the screen for each test? sometimes that can happen because the ci servers have a different screen size and scrollto has a different result from what you can see on your local machine.,neutral
angular/protractor,selenium,2015-04-27T21:09:40Z,isn't it "seleniumserverjar" parameter?,neutral
angular/protractor,selenium,2015-05-04T13:30:24Z,onabort event. is there any way i can detect user exited protractor tests manually using os options. i think `oncomplete`. `oncleanup` does not work for for this case.it will be useful incase if user is adding few things on launch and want to clear them on exit. when user closes it. protractor or selenium closes all the open browser windows. at that context if onabort event is fired. it helps a lot to clean up thingsthanks,negative
angular/protractor,selenium,2015-05-05T06:04:18Z,`afterlaunch` is not called when it exited.,neutral
angular/protractor,selenium,2015-05-05T07:33:32Z,can you provide your set up? if you put a console.log in afterlaunch it doesn't print?,neutral
angular/protractor,selenium,2015-05-05T07:45:17Z,hankduan afterlaunch is working when protractor itself has closed after everything is completed. but when user explicitly closed using cmd + c or some other command or using close button. it is closing all browser windows but afterlaunch is not executed. i am afraid if this is a limitation.,negative
angular/protractor,selenium,2015-05-08T23:31:04Z,probably the best thing to do would be to include `selenium-webdriver` as a `devdependency` in your project and do something more like:``` jsremote = require('selenium-webdriver/remote');browser.driver.setfiledetector(new remote.filedetector());```unfortunately we can't integrate every feature in selenium directly into protractor.  is there some sort of documentation which would have been useful for you?,negative
angular/protractor,selenium,2015-05-13T13:05:17Z,expectedconditions.elementtobeclickable doesn't account for other elements covering the target. in the following:```var element = $('#div');browser.wait(protractor.expectedconditions.elementtobeclickable(element). 5000. 'element not clickable');element.click();```if `$('#div')` is covered by another element `element.click()` results in a selenium error:> unknown error: element is not clickable at point (10. 10). other element would receive the click: <div id="cover">...</div>even through `browser.wait(protractor.expectedconditions.elementtobeclickable(element). 5000. 'element not clickable')` does not result in an error.,negative
angular/protractor,selenium,2015-05-15T20:15:56Z,correct. right now `elementtobeclickable` just checks that it's visible and enabled.,neutral
angular/protractor,sauce,2014-02-28T16:11:01Z,if i understand correctly. currently there is no way to pass multicapabilities via cli ?,neutral
angular/protractor,sauce,2014-03-03T09:40:23Z,i tried this with the following configuration:multicapabilities: [{    'browsername': 'chrome'.    count: 3  }]i was expecting my test files to be split in 3 and executed in parallel to finish in a third of the time (i have 3 test files). instead all my tests are being executed in each of the 3 chrome browsers. is there a possibility to have protractor run how i first expected it. meaning splitting my tests across the three instances to speed up my testing suite?,negative
angular/protractor,sauce,2014-03-03T15:29:34Z,how would the split work frigoeu ? should protractor try splitting per file name? or per describe?given i have designed my spec files to be run independently. i have a bash (shell) script that run each spec file in parallel. having this in protractor would be awesome!!!:+1:,positive
angular/protractor,sauce,2014-03-03T16:11:25Z,either would be fine for me. i expect splitting per file to be easier to implement. but i have no idea how jasmine or protractor actually work on the inside. it would be a really nice feature since e2e tests (at least in the projects i worked in) tend to run relatively long.,positive
angular/protractor,sauce,2014-03-03T19:40:50Z,i started issue #569 on test sharding - that way it'll be easier to find the discussion. please continue there!,positive
uber/tchannel-node,standard,2015-11-24T19:29:10Z,do we have a standard way of introducing deprecation warnings into logs so end-users are nudged in the right direction?,neutral
patw0929/react-intl-tel-input,mocha,2016-04-25T17:20:51Z,that was fast  i'll take a look at the tests and see if i can find something. i never used `mocha-webpack` before. is it so the webpack require's work? i usually use `rewire` for that. but i'll take a look later and let you know. thanks!,positive
ripple/ripple-lib,eslint,2015-04-23T20:28:28Z,darkdarkdragon looks like it's failing the eslint tests. want me to take this over? up to you.,negative
ripple/ripple-lib,eslint,2015-05-05T16:57:48Z,travis fails on eslint,neutral
kennethlynne/generator-angular-xl,karma,2014-01-16T23:44:59Z,add support for traceur (grunt-traceur). - [ ] add preprocessor to karma- [ ] add to build steps_awesomeness ensues_,neutral
electron-userland/electron-prebuilt,standard,2015-12-21T17:31:26Z,allow specifying strictssl in the npm config file. the standard way of specifying whether you want strict-ssl or notis to add an entry into your npm config file for strict-ssl. usethat entry (which is passed to the install.js as an environmentvariable) to set the option for strictssl in electron-download.,neutral
electron-userland/electron-prebuilt,standard,2015-12-21T17:36:47Z,will be released with the next electron release,neutral
jquense/yup,eslint,2017-10-15T21:31:28Z,jquense docs state that message should be a string value. maybe we should change it to string or function?,neutral
balderdashy/sails,mocha,2013-08-01T12:39:25Z,disable logging. is there a way to disable logging? some of the error messages are breaking the mocha tap output of my  unit tests. its kinda annoying. so a option like "quite" for the logger?,negative
balderdashy/sails,mocha,2013-08-02T13:09:09Z,just realized the problem lies in sails-mysql which is logging errors directly with console.log... so this can be closed,negative
balderdashy/sails,mocha,2013-08-02T13:18:33Z,the console.log entries should be commented out or removed. the console.log entries are breaking my testing output with mocha. i cant use the tap output of mocha this way... also its no good style. pass the errors through callbacks and let another layer handle them.,neutral
balderdashy/sails,mocha,2013-08-02T13:55:19Z,fix for policy mapping of actions with capitals. plus general integration test fixes.. fixed: bug in policy mapping for actions with capital letters.added: new test to verify the above.fixed: httphelper not properly detecting super startup.fixed: two tests in integration/policies.test.js not properly verifying error responses.added: integration/policies.test.js line to mocha.opts to actually run its tests now that they work.general note: mocha.opts only runs waterline tests. partial fix here now that policies test properly.,positive
skulpt/skulpt,jshint,2014-09-27T22:54:59Z,so i built the latest v8 from the git repo.  it appears to support promises but you have to use the `--harmony` flag not the `--harmony_promises` flag.  strange.  i tried using just the `--harmony` flag with the supplied d8m but that didn't work. also. jshint gives a failure message on promise for me.,negative
lerna/lerna-changelog,eslint,2017-03-14T11:20:08Z,hzoo most of the stuff has been already done (eslint. travis. etc). should be fine then. if i think of something else i'll open an issue,positive
featurist/browser-monkey,karma,2016-05-10T13:42:51Z,enabled pluggable backends. this is the long awaited for virtual-dom featureall access to dom elements is now abstracted behind a jquery compatible interfacethis pull request also moves element testers into a property `_elementtesters` that can be extended at runtimeit also sports full compatability with firefox and chrome and improved checkbox handling which should solve #15 and #7 and of course you can run the whole suite using just `mocha` which will run all the tests against the virtual dom. `karma start` will run the tests against both virtual-dom and the real dom.,positive
meanjs/mean,uglify,2015-10-19T16:08:15Z,sylvainlap i'm closing this issue. feel free to reopen if it's sill an issue.,neutral
meanjs/mean,selenium,2015-09-28T22:38:36Z,jloveland i'm experiencing issues with running `grunt test:e2e` the tests are failing about 50% of the time for me. to reproduce. just run this grunt task. after it's completed run it again. and repeat the process. the selenium server is running each time. but the test complains about "element is not clickable.."i'm wondering if there's an issue with the webdriver process staying open. or something along those lines. can you test this on your end?,negative
KeitIG/museeks,eslint,2016-08-27T09:48:26Z,hmm. seems like new eslint recognized some new errors...,positive
KeitIG/museeks,eslint,2016-08-27T10:05:01Z,keitig here's what we can do:- i can go ahead and fix all the warnings in some reasonable way.- i can only leave eslint update. prefer const fixes. and some other tweaks. and leave these warnings as is. but when we'll be doing some changes. we'll fix these as we go (i'll be doing some components refactorings per todos i left). so that eventually we fix all of them and then we can make 100 chars a hard error.,negative
aurelia/history-browser,karma,2016-02-18T20:25:40Z,the build failure is unrelated to these changes. i think we just need to update karma.,negative
Tradeshift/tradeshift-ui,eslint,2017-04-28T17:18:50Z,so it seems. unless we switch to spaces. most of the multiline jsdoc comments will be messed up.we also need to fix up the tradeshift eslint rules. to make sure we're catching issues that are real.,neutral
likeastore/ngDialog,karma,2015-06-10T21:43:52Z,i am interested. my experience with angular / grunt / karma etc. should be enough.as the first shot we should try to resolve as much currently opened issues as possible.,positive
videojs/videojs-contrib-hls,standard,2016-04-06T18:11:01Z,fix linting issues. remove max-len around urls for vjsstandard update,neutral
videojs/videojs-contrib-hls,standard,2016-04-15T15:00:19Z,right now. we don't throw away any buffered content when you move to fullscreen. with our standard buffering settings. that means it can take up to 30 seconds for the player to adapt to the new dimensions.,neutral
videojs/videojs-contrib-hls,karma,2014-04-25T23:10:30Z,i want to make `grunt test` run either saucelabs karma or local karma depending on whether we are on travis or not. so that we don't need to have two grunt tasks.also. i want to make a grunt task that allows you to specify multiple browsers in the task. so you could do: `grunt karma:chrome.firefox` instead of `grunt karma:chrome karma:firefox`.but these shouldn't necessarily hold up this pr.,neutral
videojs/videojs-contrib-hls,karma,2014-04-28T19:26:28Z,updated karma to run in latest chrome and latest ipad/mobile safari on saucelabs.,neutral
videojs/videojs-contrib-hls,karma,2014-04-28T21:33:55Z,yes. right now you need to run it via `grunt test-local` or `grunt test-local karma:dev` or `grunt test-local karma:chrome`.i'm working on making it know when we are running in travis. so. `npm test` will work on both. we probably should've named it `test-saucelabs` and `test` in hindsight. though. i guess we can change the names.,negative
videojs/videojs-contrib-hls,selenium,2015-08-10T14:58:46Z,point back to grunt-protractor-runner. the option to automatically update the selenium drivers got merged into grunt-protractor-runner so i'm pointing back to the original repo.,neutral
melonproject/protocol,jasmine,2017-12-01T12:48:36Z,merge before audit work. ### added- governance proposal. approval and triggering of new version at deployment- jasmine tests for governance of new version (shutting down)- test asset registration does not error### changed- tr datafeed address- governance deployment parameters- allow anyone to shut down a fund deployed from a version which has shut down### deprecated### removed### fixed- bug destroying all blockchain data when starting devchain node- gnt address (golem token)- stopped mln from being registered twice### security,negative
jquery/jquery,karma,2018-01-04T15:55:14Z,for me commands `grunt karma:firefox` & `grunt karma:chrome` do not work. browsers open up but after that it holds.`grunt karma:main` works fine. i'm i doing something wrong? if those commands are not intended to work i think they should be removed...,negative
jquery/jquery,karma,2018-01-04T15:57:23Z,grunt commands `karma:chrome` & `karma:firefox` do not work. after executing commands mentioned in the header tests do not run./cc krinkle,neutral
jquery/jquery,karma,2018-01-04T16:18:23Z,you wish is my command – just updated the description of the #3922 ticket,neutral
jquery/jquery,karma,2018-01-04T17:13:27Z,> for me commands grunt karma:firefox & grunt karma:chrome do not work. browsers open up but after that it holds.same for me. krinkle. is that a leftover config?,neutral
rooseveltframework/roosevelt,mocha,2018-02-27T19:52:41Z,add ignorecliflags param. - this new param will allow the user to selectively disable the parsing of command line flags (`process.argv`). this is useful for testing environments like mocha.  - as a result. roosevelt will no longer selectively ignore cli flags under certain conditions. (closes #340)- flags are now parsed after params.,positive
rooseveltframework/roosevelt,coveralls,2018-02-20T20:08:17Z,jsbundler.js quest to 100% coveralls,neutral
twbs/bootstrap,sauce,2014-02-07T19:28:29Z,saucelabs google chrome. i noticed that bootstrap is missing the google chrome browser from the test cases and wanted to let you know that if you change `chrome` to `googlechrome` in `sauce_browsers.yml` it should start working and show up in the widget in `readme.md`.,neutral
twbs/bootstrap,sauce,2014-02-10T19:30:15Z,switching to `googlechrome` indeed makes chrome show up in the badges again.,neutral
nodemailer/nodemailer,eslint,2016-07-31T20:06:58Z,use `npm install --production` to skip installing development dependencies like eslint. this is not related to nodemailer but how different packages that you have installed depend on eslint.,neutral
keystonejs/keystone,eslint,2015-06-01T14:16:49Z,just proposal. imposing new eslint rule "object-curly-spacing".. though i'm not sure about the space on the last line in such snippets:``` jsobject.defineproperty(azurefile.prototype. 'azurefileconfig'. { get: function() {  return this.options.azurefileconfig || keystone.get('azurefile config');} });```should i re-write them as ?:``` jsobject.defineproperty(azurefile.prototype. 'azurefileconfig'. {  get: function() {    return this.options.azurefileconfig || keystone.get('azurefile config');  }});```,neutral
keystonejs/keystone,eslint,2015-06-03T13:41:58Z,alexkval i like it. thanks - have been looking forward to `"object-curly-spacing"` being released.i do think the second snippet is clearer. yes.,positive
keystonejs/keystone,eslint,2015-06-03T15:37:54Z,you could just say it and i then reformat and `git push -f` it :wink:,neutral
keystonejs/keystone,sauce,2016-03-17T04:26:55Z,the failing test is a saucelabs problem (too many users). so this is mergeable!,negative
phovea/phovea_core,sauce,2016-11-07T18:53:47Z,mccalluc: is this pr still current?,neutral
phovea/phovea_core,sauce,2016-11-08T00:17:33Z,i won't be merging it. but i should translate the tests from js to ts. i think the tests that just check the list of properties also served a role. but i'm less clear about them going forward.,neutral
brigand/babel-plugin-flow-react-proptypes,eslint,2016-10-25T19:14:27Z,cool. looks like this is resolved,positive
ljharb/qs,eslint,2016-03-11T16:46:53Z,i will be fine merging this if you remove `test`. and the eslint config files. from the `npmignore`.,positive
softlayer/sl-ember-behavior,eslint,2015-09-08T14:09:49Z,upgrade sl-eslint in master branch,neutral
mapnik/node-mapnik,standard,2014-09-09T21:54:10Z,> springmeyer curious. does json.parse(feature.tojson()) emit valid geojson?feature.tojson() will return geojson that - to mapnik's best ability - represents the original geometry passed in. if the original geometry was "valid" then the output should be "valid". if the original geometry was invalid - say self intersecting rings which are not valid by ogc standards - then mapnik will return self intersecting rings because it does no sanitation.,neutral
appnexus/lucid,eslint,2017-02-03T19:22:53Z,added eslint-config-appnexus. ## pr checklist-  ~~~manually tested across supported browsers~~~- ~~~unit tests written (`common` at minimum)~~~- [x] pr has one of the `semver-` labels- [x] two core team engineer approvals- ~~~one core team ux approval~~~,positive
nodegit/nodegit,mocha,2014-08-21T19:08:08Z,nevermind. i see there's an issue with the linter. skipping that and running `npm run mocha` for my purposes.,neutral
nodegit/nodegit,mocha,2014-08-22T02:18:16Z,yeah looks like rwaldron made it possible to at least tweak the jshint settings to allow it.  kciccarello were you able to get tests to pass after running mocha directly? also be aware that i changed some values in the tests that may not be right. so i'd double check that i didn't royally screw stuff up :-p,neutral
nodegit/nodegit,mocha,2014-08-22T12:55:22Z,makes sense. i was able to get the tests passing by running mocha directly. yes. will submit a pr once i get can get this done and verify it works. thanks,positive
kybishop/ember-attacher,eslint,2018-03-28T15:22:21Z,unnecessary `babel-eslint` dependency?. for some (to me) unknown reason `ember-attacher` seems to have a dependency on `babel-eslint`. i assume it is due to the use of `ember-decorators`. but it still should not be a prod- and instead a dev-dependency 🤔,negative
bitpay/bitcore,mocha,2014-06-12T21:12:41Z,ack. run test in mocha + chrome +ff.no related to this commit:it is very strange that test take 90sec in the browser and 4sec in node!,neutral
electrode-io/electrode,eslint,2017-03-20T23:32:40Z,update archetype component eslint. update archetype component eslinttested on walmartone grocery-search & spinner,neutral
electrode-io/electrode,eslint,2017-03-23T00:02:41Z,karlhorky when we first looked at electrode. my team and i had the same thought.  but you lose easy updates and turns out a number of the things are easy to extend.my team has gone down the route of just creating npm package wrappers for each of the configurations (eslint. babel. gulp).  we then use jest for testing instead of karma.  my team has access to a private npm repository (we are also using learna for our packages) so it is easy for use to register our wrapper packages.  our wrapper packages extend the electrode configurations where it makes sense and then add our own rules as overrides.  we actually use airbnb's eslint configuration as a base extension.  this is a really nice feature of babel and eslint that you can extend other configs.  then import your teams babel / eslint / gulp packages and put in extend files in your component / app repositories.  then you just use the regular app and component electrode archtypes.for webpack. electrode does a good job in the app repositories at auto extending the `webpack.config.js`. `webpack.config.dev.js`. and other environment ones that are in the root of the app repo.  so you can inject your own aliases and other things. but still getting electrode base webpack config (which has some really nice things). key note: there is no way to override the webpack config in the component archtype. but you dont need to because we are always using them in an app importing the lib files and running webpack there.  you will however need to make sure your babel config in your component packages copies everything you need which is sometimes more than just the js files.in terms of generators. we have created our own because the generators at this point do not have a great place to hook in and extend. also side note: yoeman does not like scoped generator packages. so you can to create your own name that is not scoped.  we started with the generated code for first round then after finding what we were changing we then created our own generator. we are still working through some of the bits and pieces. but we are able to get 90%+ of electrodes magic and still give it our personal touch.this is just what we have done. would love to hear if anyone else has come up with other ways?,neutral
benjamn/recast,mocha,2014-02-07T18:08:44Z,move mocha to devdependencies. save a smidge of install time for react module (where recast is a dep of envify).,neutral
netzpirat/haml-coffee,jasmine,2013-03-11T19:20:58Z,nami-doc great read. thanks for sharing.,positive
Polymer/polymer,eslint,2017-11-09T09:49:06Z,how to use visual studio and beautify to handle polymer file?. i want eslint my code and beautify my css . html. and js.but it does not work! codes like this:`:host{}<template></template>`,positive
Semantic-Org/Semantic-UI,karma,2013-12-10T01:01:09Z,add karma-coverage and coveralls grunt task. i hope you like it :)if you want me to change anything just tell me.## my turn- [x] get karma-coverage working- [x] hook up to coveralls- [x] add coverage badge## turn of semantic-org- [ ] register at [coveralls.io]()- [ ] change the badge url,positive
Semantic-Org/Semantic-UI,karma,2013-12-10T07:57:46Z,yeah... there's a lot of tests to be written. another thing to add to the list.,neutral
angular/angular-cli,jasmine,2016-10-17T14:25:19Z,fixed this by using ```typings install --global dt~jasmine```not sure if this is how it's meant to work?,neutral
angular/angular-cli,mocha,2016-08-18T22:20:19Z,another thing to be aware of with aliases is tests. just because webpack knows app as an ali's doesn't mean mocha or karma etc. will know how to resolve it,neutral
angular/angular-cli,mocha,2016-08-19T13:26:59Z,i have given up on this for now. using mocha reporter gives a similar view in the command line and is significantly faster.,neutral
angular/angular-cli,uglify,2017-10-20T01:01:35Z,fabien-chevalley did you find any solution ? i applied the sugestions above but seems like uglify-js is still used,neutral
angular/angular-cli,uglify,2017-11-07T01:48:23Z,the pr worked well. hope it will be merged soon,positive
openstf/stf,selenium,2015-10-08T00:33:41Z,stf grid. i have 2 linux machine and each has more than 10 devices. could i start one instance  on sft and have access to all devices? like selenium grid,positive
mostjs/core,mocha,2017-02-12T05:22:46Z,thanks for the comments. working on them now,positive
mostjs/core,mocha,2017-03-08T01:01:32Z,chore(package): remove buster dep. remove buster as it's no longer needed.  all tests ported to mocha.,negative
mostjs/core,eslint,2017-01-13T22:41:33Z,chore(meta): add basic configurations for northbrook. adds a simple northbrook configuration to use eslint and rollup plugins.affects: most/core,negative
mostjs/core,eslint,2017-01-14T18:40:44Z,.,neutral
mostjs/core,eslint,2017-01-16T22:10:05Z,updated and rebased :boom:,neutral
pghalliday/grunt-mocha-test,mocha,2013-06-19T14:20:44Z,i'm confused. are you running server side/node.js tests? this plugin is specifically for server side tests. also in the project you link to there is no `gruntfile`. this plugin is a grunt plugin.if you have a project that you are trying to integrate with grunt and grunt-mocha-test then i can take a look at that and see if i can get it to work.although i'm interested in requirejs. unfortunately i have very little experience with it,negative
pghalliday/grunt-mocha-test,mocha,2013-06-19T14:52:44Z,correct. the example is not using grunt but it was the only one i could find about running mocha tests with nodejs serverside and using requirejs. my project runs test with grunt-mocha using nodejs. i just hand my test index.html (which i use for client-side testing in a browser while developping) to grunt-mocha which then performs them automatically using nodejs. phantomjs on the server. however i have no idea about the magic it does in order to get it working... i "just" want to add a coverage system to the project and struggeling with the how ;),neutral
pghalliday/grunt-mocha-test,mocha,2013-06-19T15:35:49Z,i have restructured it to fit my development style a little. eg. i added a `vagrantfile` so i could use vagrant to do development in a vm with a known environment. also i moved some source files around to fit in with the coverage stuff so that i could more easily exclude the tests from being instrumented for coverage data (which i wouldn't want).i changed `readme.md` because i cut out all the browser related stuff which wouldn't work anyway.the important stuff i haven't changed - ie. the test files are the same and the source files are the same (just moved to `lib/src`)the old `node_runner.js` is no longer used so i removed it. instead i adjust the global object using `globals.js` and specify that with the mocha require option so that it gets run first.,negative
pghalliday/grunt-mocha-test,mocha,2013-06-20T08:26:58Z,the `baseurl` is important because the paths to the libraries change when they are dropped in `lib-cov` with coverage data. it may be possible to get rid of that and use paths relative to the root of the project if you instrument the source with blanket on the fly (as demonstrated in the `grunt-mocha-test` docs) but tbh i don't like doing that anymore as it can be tricky to set the pattern to match only your own source files. alternatively i think you can remove the `baseurl` and refer to libraries in the tests as `lib-cov/lib/src/main` etc as that is relative to the default `baseurl`. however the downside is that the tests could then only be run with coverage data and not from the original location.unfortunately the way blanket and the mocha coverage reporters work they don't really see files that are not touched at all. however if you ensure that all your source files are at least required at some point then that should ensure they are included in the report even if nothing in them is called as requiring a file evaluates it,neutral
pghalliday/grunt-mocha-test,mocha,2013-06-25T01:26:52Z,setting working directory. my tests need to be run from a different working directory than the one where my gruntfile resides. is there a way to run mocha through this plugin with a different working directory?,neutral
pghalliday/grunt-mocha-test,mocha,2013-06-25T10:35:59Z,not currently. if you have tests that depend on a particular path have you tried using an environment variable or something.i put things like this in `package.json` and run grunt using `npm test````...  "config": {    "home": "./mypath"  }.  "scripts": {    "test": "grunt"  }...```in my tests i can access the config using```var home = process.env.npm_package_config_home;```another option if you need your source to run in a different directory is to change the directory in the test before and after handlers using `process.chdir(directory)`worst case scenario you could use `spawn` or `exec` in your tests,neutral
pghalliday/grunt-mocha-test,mocha,2013-06-25T13:41:05Z,in my particular case process.chdir in my test setup file is a great solution. thanks!one thing i am stuck on now. though. is that when i do 'grunt mochatest' it does not return me to the command prompt after running through my tests. so. the tests run fine now but it seems like mochatest is just sitting there waiting for input. how can i get it to end the process once the tests are complete?,positive
pghalliday/grunt-mocha-test,mocha,2013-06-25T13:44:56Z,hmm. i haven't seen that before. is it possible that all the tests completed but there is still something running - like an http server still listening?,neutral
pghalliday/grunt-mocha-test,mocha,2013-06-25T18:08:10Z,actually my bad. i was mocking process.exit in one of my unit tests and never set it back to the original function. interesting that it worked when i ran mocha from the command line but not when i use grunt-mocha-test. regardless. an easy change on my side.thanks for the help once again!,negative
pghalliday/grunt-mocha-test,mocha,2013-06-25T18:24:19Z,hey man. yeah it works fine when running with mocha directly. i'll try to put together a some code and sent it your way!,positive
photonstorm/phaser,jshint,2014-06-09T21:47:19Z,the travis build fails on jshinting. but that's on another part of the code. my change lints perfectly :+1:,positive
strongloop/loopback-swagger,eslint,2017-06-07T13:18:31Z,update eslint config to the latest. fix #78,neutral
npm/npm,standard,2015-07-13T05:05:34Z,zkat i don't see how your proposal would help with the type of use cases most people need this feature for. how would anything be accomplished with a single shell command? something like `npm activate && standard` wouldn't work and is no improvement over the `npm-exec` ideas anyway.,positive
npm/npm,standard,2015-07-17T16:30:36Z,from a "newbie" perspective...i'm not a new developer. just new to nodejs.i have 4 projects i’m building on my dev server to help me learn nodejs.prior to starting these projects. i had preinstalled (via npm -g) all the module dependancies (because it just makes sense to me to centralize and standardize all my generic dependancies like express. jade bower...). these are not products that will be changed by me - ever - only updated from time to time).each project has only between 5 and 10 files and represent less than 1 mb per project. but because i need the node_modules in the project folders (even symlinks duplicate a lot). the projects each have their own sub-folder structure of node_modules.this makes the total number of files for all 4 projects to be 4.316 files and about 400mb.i think it's an issue when a few little projects take up hundreds of times more disk space than the actual project files - just to duplicate the same files over and over.,negative
mishoo/UglifyJS2,uglify,2013-06-27T08:16:32Z,i see what you did there.  in the first 5 iterations you're minifying only jquery.js. but in the rest you mix in jquery-ui too.  it behaves that way because uglifyjs tries to optimize the names it generates for local variables depending on number of occurrences for "unmangleable" characters.  for example. the word `function` appears quite often in js code. and we can't change this fact — therefore the letter `n` for instance is likely to appear more often than others. and if that's the case uglifyjs will prefer to use it for naming variables.  this of course is influenced by strings too. because they add unchangeable content.you can do a small test. edit `tools/node.js` (from the uglify-js source) and search for `compute_char_frequency()` — comment out that line. and re-run your test.currently there's no api to reset the char frequency counters. but i can easily add it.,negative
mishoo/UglifyJS2,uglify,2013-06-27T22:42:25Z,indeed - the frequency of letters in one file probably shouldn't matter when compressing another file... unless that's a feature for when you uglify separately and then concat and gzip.,neutral
mishoo/UglifyJS2,uglify,2013-07-03T13:07:36Z,is there any chance to fix this?,neutral
Netflix/falcor,coveralls,2015-09-26T18:10:24Z,sdesai this is the merge that is the precursor to rx becoming a devdependency.  if there is anything else that i need to do. let me know.  remember. if you look at the coveralls drop its around some sync functions which still need to be removed.,neutral
valor-software/ng2-dragula,karma,2016-11-11T23:36:47Z,i was able to get dragula to get rid of this error on the blank seed project but now i am getting the 'require is not defined' error while testing with karma.has anyone gotten the testing working with dragula on the angular 2 seed project with karma?,negative
testem/testem,mocha,2013-03-16T19:15:38Z,implemented with #182 :),neutral
testem/testem,istanbul,2016-06-28T14:02:14Z,you havent instrumented your code. unfortunatly instrumenting methods can very wildly so youll just have to do some googling.,neutral
mochajs/mocha,mocha,2013-03-17T23:57:19Z,include also files in `spec` folder by default?. mocha.js supports both tdd and bdd styles. in bdd documents are called specifications. not tests. putting "specifications" inside of folder called "test" looks a little strange. it would be nice if it would be possible to call that folder `spec` or `specs`. i.e. if mocha.js **by default** include not only files in `test` folder but also in `spec` folder.what do you think?,negative
mochajs/mocha,mocha,2013-03-19T07:51:28Z,this.timeout() inside describe() doesn't work for me. this below js snippet is from the mocha.js website docs. "suite specific timeouts":``` javascriptdescribe('a suite of tests'. function(){  this.timeout(500);  it('should take less than 500ms'. function(done){    settimeout(done. 300);  })  it('should take less than 500ms as well'. function(done){    settimeout(done. 200);  })})```this code example is a bit confusing. when i put the "this.timeout()" call like this i get:```c:\dev\github\alexlatchford\adfuser\src\test\api\v1\target_groups.js:274                this.timeout(0); // extend the timeout for this suite because we're insertin                     ^typeerror: object #<object> has no method 'timeout'    at c:\dev\github\alexlatchford\adfuser\src\test\api\v1\target_groups.js:274:8    at module.exports.suite.on.context.describe.context.context (c:\users\alatchford\appdata\roaming\npm\node_modules\mocha\lib\interfaces\bdd.js:72:7)    at c:\dev\github\alexlatchford\adfuser\src\test\api\v1\target_groups.js:272:2    at module.exports.suite.on.context.describe.context.context (c:\users\alatchford\appdata\roaming\npm\node_modules\mocha\lib\interfaces\bdd.js:72:7)    at object.<anonymous> (c:\dev\github\alexlatchford\adfuser\src\test\api\v1\target_groups.js:15:1)    at module._compile (module.js:449:26)    at object.module._extensions..js (module.js:467:10)    at module.load (module.js:356:32)    at function.module._load (module.js:312:12)    at module.require (module.js:362:17)    at require (module.js:378:17)    at mocha.loadfiles (c:\users\alatchford\appdata\roaming\npm\node_modules\mocha\lib\mocha.js:137:27)    at array.foreach (native)    at mocha.loadfiles (c:\users\alatchford\appdata\roaming\npm\node_modules\mocha\lib\mocha.js:134:14)    at mocha.run (c:\users\alatchford\appdata\roaming\npm\node_modules\mocha\lib\mocha.js:278:31)    at object.<anonymous> (c:\users\alatchford\appdata\roaming\npm\node_modules\mocha\bin\_mocha:324:7)    at module._compile (module.js:449:26)    at object.module._extensions..js (module.js:467:10)    at module.load (module.js:356:32)    at function.module._load (module.js:312:12)    at module.runmain (module.js:492:10)    at process.startup.processnexttick.process._tickcallback (node.js:245:9)```it works if i put it inside my before() for that group of tests. which incidentally was what i intended anyway. but i think either the docs need clarifying or the error message investigating :)cheers.alex,negative
mochajs/mocha,mocha,2013-03-19T13:33:42Z,web workers support. the environment in web workers is slightly different from the standard browser environment. `document` is not defined. the global object is `self` not `window`. and some extra apis are available. such as `filereadersync`. given these differences. it is desirable to be able to run test suites in a web worker environment.this change makes mocha work in web workers. most of it is changing `window` references in `support/tail.js`. i added a `postmessage` reporter that relays test results to the worker's "master" via `postmessage`. using the same format as the json reporter.i also added a test for web workers to the `browser/index.html` suite. unfortunately. this makes it fail when opened as a regular file in chrome. this can be worked around by opening it from a http server in chrome. or by running the browser tests in firefox.i hope that you will consider merging this pr. and i'll be happy to make any changes based on your feedback.,negative
mochajs/mocha,mocha,2013-03-20T20:29:56Z,--require expect.js doesn't work. hi. so when i include expect.js over the --require parameter. it doesn't work. i also tried putting this option on mocha.opts--require expect.jsbut i still getting "referenceerror: expect is not defined"does --require only work with should.js? or what do i missing?,neutral
mochajs/mocha,mocha,2013-03-22T20:35:50Z,likely something to do with your test/app code and not mocha itself (are you trapping sigint for anything?). not much i can do without a reproducible script but re-open if you can determine that it is mocha not your scripts,neutral
mochajs/mocha,mocha,2013-03-22T23:59:34Z,seems more like a node issue not mocha. all my test suites use supertest but they're fine. that .close() shouldn't really be hanging anyway. i can't see why it would be. that's unrelated though,positive
mochajs/mocha,mocha,2013-03-25T20:11:10Z,the `--require` option doesn't inject/define variable(s) for you. what the `--require` option does for you is (excuse the crude example):``` jsrequire('expect');[ your code here ]```not:``` jsvar expect = require('expect');[ your code here ]```,neutral
mochajs/mocha,mocha,2013-03-25T21:53:24Z,so. what would it be good for? except for including "should.js" on the tests,neutral
mochajs/mocha,mocha,2013-03-26T02:55:00Z,it's not good for much other than should really haha. i would remove it now if people weren't already using it,neutral
mochajs/mocha,mocha,2013-03-26T12:18:29Z,nice work. jaredwinick! it would be great to have closer parity between the runner interfaces.one thing you can do to help get this merged: move your change into the `lib/interfaces/tdd.js` source file (`mocha.js` is a built file--you invoke `make` to generate it).if you're busy. i'd be happy to open a new pull request with this change. but i thought you might want a chance to fix it.,positive
mochajs/mocha,mocha,2013-03-31T03:20:05Z,fix typo.. changed `mcoha` to `mocha`. github apparently added a newline to the end of the file automatically too.,neutral
mochajs/mocha,mocha,2013-04-02T23:50:40Z,converted this to a pull-request that gets mocha to ~2-3x slower than jasmine via low-hanging fruit. the slow part now is the dom manipulation in the html reporter.,negative
mochajs/mocha,mocha,2013-04-03T00:11:02Z,highlight something in red on failures. to make it more obvious without wasting eye-movement effort to look at the count haha. i prefer github.com/visionmedia/mocha-matrix for this reason but it's not a good fit as a default,negative
mochajs/mocha,mocha,2013-04-05T21:01:56Z,i'd like to see this merged in. ideally with a command line switch to enable/disable the behavior. alternatively. a "words" diff could be done and then. if that doesn't actually show any differences. a chars diff done. it's rather frustrating for mocha to report that the actual and expected were difference. but then not show any actual difference in the output.,neutral
mochajs/mocha,sauce,2016-07-01T05:06:35Z,expand ie matrix. saucelabs should test ie9. ie10. ie11,neutral
mochajs/mocha,eslint,2017-06-12T23:06:35Z,what exactly is this fixing? the current code is not having any problems with eslint that i can tell; the changes. at a glance. appear to be all semicolon removals. but our eslint configuration *requires* semicolons rather than the other way around.,negative
mochajs/mocha,karma,2016-06-29T04:22:17Z,upgrade karma. closes #2338,neutral
dfahlander/Dexie.js,karma,2016-05-10T23:26:07Z,zone.js and polyfill are being loaded through a script tag. dexie is being loaded through external modules via browserify.okay. so it appears that i currently can only reproduce this issue when i'm running it isolated in a karma/jasmine unit test.  i do not see the same issue when running my actual ng2 application.  i currently cannot even speculate as to why…,negative
bcoe/sandcastle,mocha,2014-06-11T08:52:23Z,bcoe i'm buzzy this week and will look into the readme example and the tests during the weekend. for another project i'm using  along with mocha to generate test coverage reports on the fly which is extremely helpful while writing the tests. i will add it to my fork and send you another pull request if i have enough time ;),positive
sitespeedio/sitespeed.io,selenium,2015-04-17T16:46:59Z,hey guys.i did try using the selenium standalone server apparently i still see the timeout issue. could you please provide your suggestion?-dennis,positive
bpmn-io/diagram-js,karma,2015-03-13T13:47:25Z,chore(dependencies): upgrade karma-browserify. this upgrade is necessary to run the tests on windows machines,negative
teerapap/grunt-protractor-runner,selenium,2015-02-13T00:31:16Z,i'm also experiencing this issue.  it only happens on windows and the only solution i've found is to set `keepalive` to true.  the downside with that solution is that it leaves the selenium process running.,neutral
ipfs/js-ipfs,uglify,2017-12-14T14:55:18Z,should we not aim to make the code easily optimized with existing tools like uglify and tree-shaking rather than spending efforts modularizing everything? even if we modularize everything. dead-code elimination would remove more code from the bundle than we could do when creating multiple modules.remember. we used to do this with libp2p bundles. but in the end put them together as they were not very heavily used separately. although. i agree that the http api/gateway should not be bundled by default. but rather a separate module that would include `js-ipfs`.,neutral
chentsulin/electron-react-boilerplate,standard,2017-05-31T17:53:13Z,amilajack thanks for your reply! well. it was basically that i had to remove all these type annotations. if you have to do this. cherry-picking the boilerplate is a bit more work than just copy-pasting the code. not a big deal. but i guess there's not that many flow users out there. i myself prefer to stick to stuff that's standardized and am quite reluctant with picking up frameworks that may vanish or become unmaintained quickly. so. for me es6 is the way to go. even if i clearly see the benefits of strong typing.regarding the complex examples: that would be awesome. and i already saw that you're planning to provide a redux sample. awesome! this whole ipc stuff makes things quite complicated.,positive
chentsulin/electron-react-boilerplate,uglify,2018-02-17T15:56:13Z,sorry to highjack this issue again. but why was babili removed in favour of uglifyjs?,negative
AnalyticalGraphicsInc/cesium,eslint,2018-01-03T15:54:18Z,there are a couple eslint errors.,neutral
AnalyticalGraphicsInc/cesium,eslint,2018-01-11T15:39:45Z,hpinkos updated. ci didn't run for some reason. but eslint and tests are passing.,neutral
pinterest/esprint,eslint,2017-08-08T16:11:27Z,basically the one provided by `lint-staged` docs. but with `esprint` instead of `eslint`:```{  "scripts": {    "precommit": "lint-staged"  }.  "lint-staged": {    "*.js": ["esprint check"]  }}```using `esprint` still lint all files in the folder. while using `eslint` lint only staged files.,neutral
pinterest/esprint,eslint,2017-08-15T15:16:59Z,merge esprint into eslint. esprint is the tool that eslint needed to be usable in a fast development workflow. it speeds up a lot the work.that why i think it would be an awesome addition to eslint itself. it would improve the life of many dev and would faster a lot it's daily usage.it could be available via a `--watch` option. like what is available for jest.,positive
redfin/react-server,mocha,2016-08-12T19:32:55Z,mocha is not installed in any `node_modules` folder. i checked the docs for lerna. and this seems to be by design. from their readme:> note that devdependencies providing "binary" executables that are used by npm scripts still need to be installed directly in each package where they're used.they recommend pulling up the dependency to the root repo.not sure why it works for you on linux. maybe you have mocha installed globally?,neutral
redfin/react-server,eslint,2016-07-19T18:14:55Z,slim down deps. - use eslint- ditch ava,neutral
redfin/react-server,eslint,2016-07-19T22:44:24Z,run eslint on components directory. too. missed this one.,neutral
redfin/react-server,eslint,2016-07-29T20:42:32Z,this is actually failing ci.  must be some change to eslint behavior.,negative
redfin/react-server,eslint,2016-08-03T18:16:24Z,lint the generator with eslint. use consistent rules with the rest of the repo.note that this required changing to babel's eslint parser to handle the asyncfunctions in the generator tests.,neutral
redfin/react-server,eslint,2016-08-03T20:28:50Z,doug-wade,neutral
redfin/react-server,eslint,2016-08-03T21:09:41Z,lgtm ⛵,neutral
redfin/react-server,eslint,2016-08-12T19:08:17Z,thanks doug-wade.  dropping the `enhancement` label here.  doesn't improve the functionality of the plugin.  does clean it up nicely. though!  do we need a `devdependency` on `eslint` here. since it's using the binary?,positive
redfin/react-server,eslint,2016-08-12T19:42:49Z,gigabo it uses the eslint at the monorepo root. which we prefer because it keeps bootstrap times and disk utilisation low,neutral
GoogleCloudPlatform/nodejs-docs-samples,jshint,2015-10-01T15:29:43Z,fix jshint ignore rules. add run script,neutral
calvinmetcalf/catiline,sauce,2013-07-17T18:21:50Z,opera tests. for some reason the opera tests are failing in strange ways. i think this might be an issue with opera and saucelabs and or mocha so will have to investigate.,negative
calvinmetcalf/catiline,sauce,2013-07-18T10:40:19Z,opera passes the tests if i manually go to,neutral
calvinmetcalf/catiline,sauce,2013-07-18T12:34:04Z,this effects manually viewing the page in saucelabs so we can rule out most of the test runners. but just for fun it doesn't happen when the developer tools are open.,positive
calvinmetcalf/catiline,sauce,2013-07-26T17:37:42Z,and opera now passes for some reason,neutral
avajs/ava,coveralls,2015-11-23T22:55:21Z,fix coverage. due to nyc defaults. we were missing coverage on lib/test.jsi also added `npm run coverage` as a build target. which is for useon developer machines. it launches a browser window with coveragefrom the last run.we no longer need nyc ~~or coveralls~~ as dev dependencies. `tap` handlesit all for us magically.`maintaining.md` updated to reflect all these changes.also - i dropped coverage from the windows tests. we don't need to make appveyor any slower.,neutral
avajs/ava,coveralls,2015-11-24T03:07:01Z,:+1:,neutral
yahoo/express-yui,jshint,2013-11-21T17:06:37Z,fix jshint npm script to work on windows. files in `node_modules\.bin` don´t work correctly in npm scripts on windows. also. jshint has trouble parsing paths containing `*.js`. but the good thing is that internally it checks the file extension.,negative
yahoo/express-yui,jshint,2013-11-21T18:12:40Z,+1,neutral
yandex-ui/noscript,karma,2014-06-09T08:29:04Z,сделай issue. я покопаюkarma тут не причем. это делает mocha или ассертер,neutral
Modernizr/Modernizr,sauce,2014-01-29T17:22:12Z,~~i would be a :-1: on this. since browserstack uses emulators for mobile. and saucelabs doesn't.~~_edit: i was wrong. thanks nakula!_,negative
Modernizr/Modernizr,sauce,2014-01-30T03:18:33Z,yeah i contacted the browserstack peeps over email after getting super frustrated with saucelabs failing randomly on a new browser everytime i ran the test suite. wanted to see if the same setup was possible with browserstack. didn't expect a pr so that's awesome.,positive
yui/shifter,jshint,2013-03-17T22:16:03Z,yeah. you're spot on dave. i switched lint to preferred. performed a "shifter" build in the respective directories. and those errors that were described with a "shifter --walk" in the parent directory. appeared.i have a .jshintrc lint configuration on the parent directory. how do i get a "shifter" build to pick up the configuration file?,negative
yui/shifter,jshint,2013-03-20T14:08:42Z,it should be `shifter --lint config` not `shifter --lint .jshintrc`. when you use `config` it will search up the dir tree looking for a .jshintrc file.,neutral
walmartlabs/eslint-config-defaults,eslint,2016-02-09T22:40:58Z,add babel-eslint to walmart config. closes #52,neutral
walmartlabs/eslint-config-defaults,eslint,2016-02-09T22:45:27Z,baer -- lgtm!,neutral
walmartlabs/eslint-config-defaults,eslint,2016-02-16T08:26:47Z,i do this inside a project folder:```c:\users\username\appdata\roaming\npm\eslint.cmd --config .eslintrc.json --format compact .```got the same issue with eslint-config-google. is there a workaroung for now? can't use eslint for my projects... use windows 10 64bit. if you need more info. let me know it. or whether i have to create the comment to another repo.,negative
walmartlabs/eslint-config-defaults,eslint,2016-02-16T10:56:56Z,chris2011 -- try a local install of `eslint` in your project:``` sh$ npm install eslint --save-dev```then add an `npm` `scripts` command like:``` js"lint": "eslint --config .eslintrc.json --format compact ."```then try:``` sh$ npm run lint```in your project and see if that works?,neutral
walmartlabs/eslint-config-defaults,eslint,2016-02-16T12:31:53Z,ok this works. after i changed my .eslintrc.json file. because my json file looked like:``` json{   "extends": "google"}```thx.,neutral
edwellbrook/node-tvdb,eslint,2017-02-27T23:15:35Z,added method to get series posters. tests & eslinted. i'm in need of this functionality now. and i can't really wait for thisispete to respond to #79 . so i completed the outstanding tasks (tests & eslint) myself. and cleaned up his code a bit.,positive
edwellbrook/node-tvdb,eslint,2017-02-27T23:26:44Z,fantastic! thanks for the amazingly fast response!,positive
react-boilerplate/react-boilerplate,eslint,2016-06-22T15:03:26Z,mxstbr i've just checked the repository and could not find any mention of `.eslintignore` file. can you point me to it?,neutral
react-boilerplate/react-boilerplate,eslint,2016-07-02T10:18:41Z,extract tool configs (eslint and others) from package.json. currently configs for eslint and stylelint are located in package.json.this approach helps to reduce amount of dotfiles. but it also hides configuration from some ides and editors.for example. idea family of editors (i use pycharm) support editorconfig. linters and other stuff. but it doesn't look into package.json for configuration.extracting tool configs from package.json will make this starter kit more flexible and portable.,neutral
react-boilerplate/react-boilerplate,eslint,2016-07-02T10:38:27Z,this was a conscious decision we made. we favor a clean root folder over exposing all of those configurations.if your editor does not support it. changing it back to the old dotfile layout is a few copy-and-pastes away!,positive
react-boilerplate/react-boilerplate,eslint,2016-07-02T10:45:33Z,mxstbr that's exactly what i've done. :)then. probably analize results should be put into some separate folder instead of root of the project..,neutral
react-boilerplate/react-boilerplate,eslint,2016-07-08T20:14:23Z,es6 class generator eslint disable. the generator for creating components with es6 classes could directly set the `// eslint-disable-line react/prefer-stateless-function` flag so there wouldn't be the need to do it it manually every time.,negative
react-boilerplate/react-boilerplate,eslint,2016-07-08T20:20:20Z,great idea :sparkles:would you consider submitting a pr?,positive
react-boilerplate/react-boilerplate,eslint,2016-07-08T20:25:13Z,es6 class eslint disabling. adding the flag for disabling eslint on es6 classes,neutral
react-boilerplate/react-boilerplate,eslint,2016-07-08T20:26:13Z,jap made pr #685 - had to change only for the components in the container generator it's already present.,neutral
react-boilerplate/react-boilerplate,eslint,2016-07-09T08:47:24Z,thank you braunreuthera!closes #684,neutral
react-boilerplate/react-boilerplate,eslint,2016-07-09T08:48:07Z,done in #685. thanks so much braunreuthera!,positive
react-boilerplate/react-boilerplate,karma,2016-07-11T10:52:39Z,feat(ci): add bitbucket pipelines support. create the yml file to configure bitbucket pipelines with a customdocker image for karma,neutral
react-boilerplate/react-boilerplate,karma,2016-07-13T08:16:13Z,this is great belgac!i don't want to add the file by default since not everybody will want to have it. but this is an amazing reference. would you mind submitting a pr that adds that to the documentation? (faq) thanks so much!,positive
assaf/zombie,mocha,2013-06-10T16:41:58Z,thanks assaf. is there a way to print out the dom to confirm this? i've not been able to do this. in my view. this is a critical feature for testing data-driven. single page web apps as dom updates based on ajax calls is common. your api design is good and it's a nice workflow to debug tests with mocha in my ide. unfortunately. this is pretty critical for the work i'm doing atm. thanks. peter,positive
FormidableLabs/webpack-dashboard,eslint,2017-10-10T03:40:20Z,add basic tests + various infrastructure.. * fixes #205 * add the most minimal skeleton tests to import most files and check for rudimentary breakage.* make `bin/webpack-dashboard.js` exportable in addition to being a script.* follow-on real test ticket at #207 * update eslintrc to use `arrow-parens: [error. as-needed]`/cc kenwheeler tptee carlospaelinck,negative
FormidableLabs/webpack-dashboard,eslint,2017-10-10T12:34:16Z,.,neutral
MithrilJS/mithril.js,eslint,2017-03-07T11:25:53Z,pygy that one's slightly stalled. and i'm handling any merge conflicts that come up. so any conflicts you run into with that. you can just ignore. it's not actually changing functionality of anything beyond the `.eslintignore` and a couple rules.,negative
MithrilJS/mithril.js,eslint,2017-03-11T10:10:37Z,workaround:```js  const possibilities = math.pow(colours. slots); // eslint-disable-line no-restricted-properties```,neutral
pouchdb/pouchdb-server,selenium,2014-07-10T00:33:34Z,(#55) - add firefox/phantom to allowed failures. something changed recently so selenium is not working in travis.  i have no idea what it is. but all the tests recently are failing with "unable to connect to selenium."  the node tests are good enough. especially since pouchdb tests everything else anyway. so i think this is fine.,negative
pouchdb/pouchdb-server,selenium,2014-07-10T01:01:30Z,ah crap. but now selenium is busted.,negative
pouchdb/pouchdb-server,selenium,2014-07-12T02:02:28Z,timebombed,neutral
TryGhost/Ignition,eslint,2017-08-08T13:01:41Z,used full paths for tools in npm scripts. no issue- this means i don't have to have mocha & eslint installed globally,neutral
TryGhost/Ignition,eslint,2017-08-08T13:11:56Z,it complained about no eslint & this is how we do this in every other project - hence i added it. might be that i hadn't run npm install tho 🤔,neutral
TryGhost/Ignition,eslint,2017-08-09T19:21:14Z,this didn't work in the past (> 1 year ago) but was added to npm  .,neutral
apache/cordova-ios,eslint,2017-08-08T22:55:59Z,eslint errors.,neutral
apache/cordova-ios,eslint,2017-08-11T00:28:26Z,please run `npm install && npm run eslint`. then fix the eslint issues and commit them.,neutral
techfort/LokiJS,karma,2015-04-28T10:04:59Z,gkuchan sorry for the long delay on this. the whole testing framework has been moved over to `karma`. which in the end is similar to what you were asking. it may even be that we move over to `mocha` soon. thanks for flagging this a long time ago.,negative
techfort/LokiJS,jshint,2015-05-30T19:22:50Z,ok. done. and passes jshint,neutral
fernando-mc/serverless-finch,mocha,2018-03-01T13:28:26Z,i would also add that linting would be a positive addition to automated testing. close to 100% of the prs are riddled with what would be pretty easily classifiable as style violations. currently these all involve manual call-outs. any of the dozens of popular linters can make this a one-line change.```"scripts": {  "pretest": "standard".  "test": "mocha test".}```,positive
fernando-mc/serverless-finch,mocha,2018-03-03T16:15:36Z,choosing a testing framework. the current setup is mocha. i'm fine with that. but does anyone feel strongly that we use something else?(split out of #29 per fernando-mc's suggestion),positive
fernando-mc/serverless-finch,mocha,2018-03-12T02:19:36Z,linusmarco mocha it is.,neutral
baconjs/bacon.js,jasmine,2013-03-03T10:56:45Z,i'd also suggest that all the external lib for testing e.g. `lib/jquery.js`. `browsertest/lib/jasmine.js` should be put in a unified folder,neutral
matrix-org/matrix-react-sdk,eslint,2017-02-02T10:54:31Z,reinstate max-len lint configs. apparenltly setting the ignorepattern on max-len (as per cf049f2) makes eslintforget the `ignorecomments` and `code` settings from js-sdk. so reinstatethese.,neutral
matrix-org/matrix-react-sdk,eslint,2017-02-16T11:20:25Z,fix eslint's no-invalid-this rule for class properties,neutral
matrix-org/matrix-react-sdk,eslint,2017-02-16T11:41:51Z,matrixbot test this please,positive
nathanboktae/mocha-phantomjs,mocha,2015-08-18T19:55:11Z,mocha.process.stdout not working properly?. except when using json as reporter. i believe the mocha.process.stdout isn't working properly. for example in the mocha-phantomjs.coffee. even if i comment out the following code:page.onconsolemessage = (msg) -> system.stdout.writeline(msg)i should still see the test results from the following right?    page.oncallback = (data) =>      if data?.hasownproperty 'mocha.process.stdout.write'        output.write data['mocha.process.stdout.write']but instead. all test results / client side console messages seem to be getting captured by the  browser console. if i comment out the first line. nothing gets output on my terminal. (except when using json. json outputs fine) i'm trying to do this since the application i'm testing has a lot of noise on the client side (events firing. etc.) and i want to be able to block them out in my tests. also i believe this is causing all the test output to have no color formatting (green / red colors). just wondering. where is the code exactly telling mocha to output to mocha.process.stdout? i tried looking in individual reporter files but they all have the regular process.stdout.,negative
nathanboktae/mocha-phantomjs,mocha,2015-08-19T01:56:20Z,see #114. #189. #161 . tl;dr is like you found that moat mocha reporters use `console.log` so its impractical to separate the noise out.,neutral
nathanboktae/mocha-phantomjs,mocha,2015-08-25T14:40:51Z,+1,neutral
ElemeFE/vue-amap,eslint,2017-09-26T07:16:31Z,eslintglobals: {'amap': true.'amapui': true},positive
socketio/engine.io,mocha,2013-04-19T23:32:03Z,the errors.out and non-server from common.js are now extracted.,neutral
typicode/husky,standard,2017-02-14T13:15:40Z,there is another issue with the current hook names. say you have an npm script called `commit`. then if you define a husky hook "precommit" and run `npm run commit` npm will also automatically execute `precommit` just because of the way npm-scripts work. is it possible to workaround this situation without renaming the `commit` script?,neutral
typicode/husky,standard,2017-02-14T15:31:41Z,wizardzloy there is no way to workaround it right now,neutral
marionettejs/backbone.marionette,coveralls,2014-07-16T03:50:53Z,some day,neutral
marionettejs/backbone.marionette,coveralls,2014-07-20T01:45:34Z,:metal:,neutral
kriskowal/q,mocha,2013-04-08T20:41:06Z,great! i am using q with mocha and phantomjs. and also in my application in parallel load synchronization.,positive
open-xml-templating/docxtemplater,jasmine,2014-04-21T14:39:04Z,doesn't install. hi! i have a problem again.module doesn't install.error depends on jasmine.if i try to install as my user ```npm err! error rolling back error: eacces. unlink '/usr/bin/jasmine-node'```if i try to install as root```npm err! error: attempt to unlock jasmine-node. which hasn't been locked```also. a co-worker of mine has tried install node.js and docxtemplater at the clean system. and docxtemplater didn't install. but other modules (for example express) has been installed successfully.any suggestions?,negative
open-xml-templating/docxtemplater,jasmine,2014-04-22T05:41:16Z,thank you!,positive
nteract/nteract,mocha,2016-03-04T19:07:07Z,it's a start.  we still need to get electron-mocha using electron-compile instead of babel.  once we do that i'll be able to check the contents of the spawned window for `.cell` !!  this should catch lots of bugs before they appear.,neutral
nteract/nteract,mocha,2016-03-12T19:41:41Z,aka electron-compile working on electron-mocha,neutral
nteract/nteract,eslint,2016-06-30T22:50:09Z,update eslint. bring back no-unresolved. electron imports are now correctly recognized. as a result of doing the lint fixups. i found a bug in the widgets/comms setup (wrong import path).,negative
nteract/nteract,codecov,2016-05-22T04:57:07Z,remove coveralls (since we're using codecov). nothing quite like spring cleaning.,neutral
nteract/nteract,codecov,2016-05-23T13:30:07Z,overall codecov increased. but pr content had 0 coverage.  i decided to merge anyways.,neutral
jira-node/node-jira-client,eslint,2016-02-16T15:11:41Z,going to wait on upstream eslint config repos to catch up.,neutral
less/less.js,jasmine,2014-04-02T21:05:21Z,no. i'm using a jasmine test runner that uses phantomjs behind the scenes.,neutral
wycats/handlebars.js,mocha,2013-03-15T22:29:21Z,oh wow. very nice! thank you so much for showing me that. i'd never have found it otherwise. the `readme` is definitely misleading in that regard. as it makes no mention of mocha-only testing. can you show me a gist or something that would give me a very basic overview of how to implement mocha testing so that i can go ahead and get to work on my pr?thank you!,positive
mantoni/mochify.js,mocha,2014-10-14T18:00:51Z,it's a "bring your own mocha" design ;-)just add mocha to your devdependencies and it works fine.,positive
mantoni/mochify.js,mocha,2014-10-14T18:06:23Z,bingo! add mocha to the `peerdependencies` in mochify's package.json?,neutral
mantoni/mochify.js,mocha,2014-10-15T09:43:06Z,register mocha as a dependency. fixes #31,neutral
mantoni/mochify.js,mocha,2014-10-15T10:05:05Z,:+1:,neutral
mantoni/mochify.js,mocha,2014-10-16T12:12:10Z,no. this is not the way forward. simply because it does not make a particularly nice api and also because not all the arguments make sense to be passed to mocha (e.g. `--debug` or `-w` since it need different handling in the mochify context). the same is true for browserify. i've started to work on this on a branch and already converted the arguments parsing to use `subargs`. but mainly to allow to pass arguments to custom transforms:```$ mochify --transform [ foo -x -y ]```in case of `--recursive` i'd prefer it to be passed down just like `-u` and `-r` are.,negative
mantoni/mochify.js,mocha,2014-11-06T03:00:37Z,using chai with mocha. not clear to me how would i use this assertion lib**update**i should blame myself for opening this ticketit was fairly easy to do so:```chai = require 'chai'chai.should()```,negative
mantoni/mochify.js,mocha,2014-11-06T03:25:02Z,how to require a helper function to run before each test?. not sure how can i include helper function for mochait seems like there is missing option that default mocha provides `--require` package,neutral
mantoni/mochify.js,mocha,2014-11-06T13:36:41Z,i think `--require` (and the `-r` shorthand) could be supported by mochify. fortunately. browserify has the same option and it has the same effect :)anybody up for adding this in?,neutral
cucumber/cucumber-js,standard,2018-02-28T13:31:25Z,oh `progress` is a dependency of `cucumber`. it wasn't written by me. it for one of the official reporter types. used by reporter `progress-bar`.however. you gave me a good idea. something i should have thought of before: i run protractor tests via gradle. which is notorious of its special way of handling standard i/o channels. so i will run some tests to confirm that is indeed just a problem of that.,negative
cucumber/cucumber-js,mocha,2017-01-31T16:53:17Z,i agree that it will mean you always accept `world` as argument. and that's an api change.i think that like mocha wich has `--ui exports` and `--ui tdd` and `--ui bdd` - the cucue can as well.it's basically a project variable that determines if steps are called/applied  on the world. or accept it as 1st argument.,negative
cloudchen/grunt-template-jasmine-requirejs,jasmine,2014-02-25T19:35:27Z,issue with matchdep. since the plugin is titled "grunt-template-jasmine-requirejs" any time that you are using matchdep to load your grunt tasks you get the following error: ">> local npm module "grunt-template-jasmine-requirejs" not found. is it installed?".the typical use case for loading grunt plugins with matchdep is:require('matchdep').filterdev('grunt-*').foreach(grunt.loadnpmtasks);to be clear grunt-template-jasmine-requirejs is a grunt plugin helper. not an actual grunt plugin. the naming convention conveys the message that this is a normal grunt plugin. this is causing some hacky work arounds when using matchdep. but could be resolved if the project name was changed to any of the following:grunttemplate-jasmine-requirejsjasmine-requirejs-shimjasmine-requirejs,neutral
cloudchen/grunt-template-jasmine-requirejs,jasmine,2014-02-25T20:37:49Z,to be clear. matchdep is used to get dependencies that match a pattern. using it to broadly include modules based off of wildcards is a bit hacky itself.i use it sometimes too. but i don't expect module maintainers to support changing the names of things to support that method of loading. the keyword 'gruntplugin' is what is used to denote grunt tasks. the grunt-\* naming convention is for things related to grunt. if you happened to include grunt-cli or grunt-lib-phantomjs you'd run into the same issue.```matchdep.filterdev('grunt-*')  .filter(function(module){return !module.match('grunt-template-.*')})```seems perfectly appropriate and in line with how it should be used.,neutral
diegomura/react-pdf,standard,2017-08-21T23:52:10Z,hi tuananhtd . `dom-bindings` examples are not currently working since we are not done yet with setting up `pdf-kit` to work on a node standard environment. jbovenschen do you know if there is any progress on this? this is starting to cause lots of trouble.,negative
appium/appium,selenium,2014-06-16T20:34:11Z,this is different from your original issue. so it might be more convenient to open a new issue.in the new issue. please post the appium server logs. as well as what system you are trying to use.just for reference. a lot of the gesture actions do not work on ios 7,positive
appium/appium,selenium,2014-06-18T20:51:39Z,i think robot framework probably needs to be updated so that it can work with the selenium 3 protocol. maybe someone can make an appium extension to robot framework.the only workaround i can suggest right now is patching the driver object you get with robot framework to include the context commands. you can take a look at the appium-client code to see how that's done.,neutral
appium/appium,selenium,2014-07-03T13:29:43Z,added selenium-webdriver bridge sample,neutral
appium/appium,selenium,2014-07-07T23:48:50Z,appium is not a grid hub. you need to run selenium grid as the hub.,neutral
appium/appium,sauce,2014-05-03T01:51:20Z,update sauce example,neutral
appium/appium,sauce,2014-05-10T23:22:21Z,first ci tests on sauce. just a couple of tests for now. rest will follow.,neutral
appium/appium,sauce,2014-05-15T20:57:01Z,it's detailed in the appium tutorial on saucelabs.com. fwiw,neutral
appium/appium,mocha,2014-07-02T18:42:14Z,you need to upgrade mocha.,neutral
appium/appium,jshint,2014-05-14T11:43:01Z,oh. oki thought jshint would still catch this case.,neutral
keycloak/keycloak-nodejs-connect,jshint,2016-05-03T20:59:38Z,test with jshint.,neutral
keycloak/keycloak-nodejs-connect,jshint,2016-05-05T20:21:03Z,helio-frota like we discussed. let's run/fix jshint issues before we add such constraints to the project.,positive
brunch/brunch,mocha,2013-03-23T00:19:39Z,as i have been sayin’. transition to `mocha-phantomjs` and removal of `brunch test` is planned soon. mocha-phantomjs is a lot simpler and gives more real-world results.,neutral
brunch/brunch,mocha,2013-03-24T22:22:01Z,plorent good stuff. need to try this one,positive
brunch/brunch,eslint,2016-01-29T19:39:06Z,make eslint happy,positive
yahoo/mojito,selenium,2013-02-14T22:51:21Z,changes for screwdriver:start browser on remote selenium host and reuse session,neutral
yahoo/mojito,selenium,2013-02-21T17:06:01Z,use different selenium as a workaround before the blocker is remoted,neutral
yahoo/mojito,selenium,2013-02-21T21:47:54Z,disable selenium tests for travis. enable travis for server unit tests. until we get the selenium thing resolved..,positive
yahoo/mojito,selenium,2013-02-22T21:36:14Z,switch to sd default selenium,neutral
alphagov/govuk_elements,standard,2016-09-12T10:25:00Z,could we change the scripts in package.json to look like``` json  "scripts":{    "test": "standard && grunt test".    "start": "grunt"  }.```(package.json can get the binary globals from the local node_modules so you don't need to hard code them)then remove start.js?,neutral
babel/babel,mocha,2015-10-30T16:17:03Z,`babel/register` is now `babel-core/register` so try `mocha --compilers js:babel-core/register` instead,neutral
babel/babel,mocha,2015-11-04T13:29:08Z,have the same issue when running unittests with mocha```// mocha.opts--compilers js:babel-core/register```i particularly have this issue when exporting class```class wow { }export default class hey extends wow { ...}``````'this' is not allowed before super() (this is an error on an internal node. probably an internal error)```but this works ```class wow { }class hey extends wow { ...}export default hey;```,positive
babel/babel,mocha,2015-11-06T23:15:48Z,introduce exec tests for plugin regressions. this makes it easier to catch regressions and to report plugin issues. ideally we'd have an input and expected files. but that would require changes to mocha-fixtures too. this is good enough for now.cc sebmck thejameskyle,negative
babel/babel,codecov,2017-02-01T21:28:49Z,danez does my explanation make sense? there are no tests for babel-register. so in order to pass the codecov checks i'll likely have to write tests for the entire package...which i don't really want to do unless this is something that would be accepted.,neutral
babel/babel,codecov,2017-02-10T02:08:09Z,hzoo changes has been completed. what can i do about codecov ❌'s?,neutral
angular/angular-seed,karma,2014-04-17T01:54:56Z,need to 'karma-junit-reporter’ in plugins for reporter to work. without this - if you try to use the junit reporter. it will fail due to missing module (even if installed outside).,neutral
angular/angular-seed,karma,2014-05-02T21:17:05Z,you also add it to the package.json file to make sure it also gets installed,neutral
angular/angular-seed,karma,2014-05-03T05:17:04Z,done - and i squashed commits down.,neutral
angular/angular-seed,karma,2014-05-03T17:58:51Z,this is outdated.  we can run karma and protractor using npm scripts. see the readme.,neutral
angular/angular-seed,karma,2014-05-04T03:15:02Z,hi petebacondarwin.i reviewed my pull request and your comments.  if i checkout the d38e34855b4bda3efaeed63a81844ef94331e3b2 commit (the one before your latest round of updates) and run npm install from the root directory. it was already creating my bower_components directory under the app folder.  the problem i had was all the references (index.html & karma tests) pointed to it being under the root folder.  i even cleared my npm cache before running it and get the same thing.i've been snooping around for an installer slipping into the app folder before bower gets run but after about 30 minutes of poking around. i can't find it.i am very interested to find out if you delete (because they are in the .gitignore file and would stick around) your /node_modules folder. any bower_components folder and any .bowerrc file you have and checkout the commit i listed above into it's own branch locally. then run npm install... and immediately run npm test. what you get.  1) where does it install the bower_components directory for you (is it under app?)2) do your karma tests pass.i get failures because just by default bower_components are getting installed into the app directory for me. yet the karma tests look for it in the root folder.i realize your commit daf71f2 fixes this issue regardless.  i am just trying to get a sanity check.  forget about the browser for now please.  i believe i was doing something wrong with it failing. but do the karma tests pass or fail for you?thank you!,negative
jshint/jshint,jshint,2013-02-18T02:21:26Z,this is indeed a pain. i'd love to see a jshint option to ignore empty files for all the reasons jedverity mention above.,negative
jshint/jshint,jshint,2013-02-20T05:53:31Z,why doesn't jshint check curlybrace style in function definition. ```$ cat test.jsvar a = function (){  return true;};```in jshint. this is result in no errors.but i want to force the style below like jslint```var a = function () {  return true;};```why doesn't jshint support that? otherwise is there a option about that?,negative
jshint/jshint,jshint,2013-02-21T23:24:49Z,it would be a great addition to jshint primarily for pre-commit hooks and other similar scripts.  +1,positive
jshint/jshint,jshint,2013-02-21T23:38:52Z,this sounds like a job for `white` but we don't update `white` anymore since its pretty much a legacy option from jslint at this point. we will do a more configurable styling checker at some point.,positive
jshint/jshint,jshint,2013-02-21T23:48:47Z,`/*jshint es5:true */` should fix it.,positive
jshint/jshint,jshint,2013-02-24T13:12:02Z,fix for trivial. referencing undefined object error. i caught "typeerror: cannot read property 'foobar' of undefined" on"immed" related sections of jshint code.when i applyed fixmyjs to minified js code by mistake.(got no error for other js files.),negative
jshint/jshint,jshint,2013-02-26T05:43:04Z,invalid warnings for a function invocation pattern. for the following javascript:``` javascript/*jshint asi:true */var a = []void function timed () {    settimeout(timed. 1000)}()```jshint gives the following output:```jshint-bug.js: line 4. col 1. expected an operator and instead saw 'void'.jshint-bug.js: line 6. col 2. function declarations are not invocable. wrap the whole function invocation in parens.jshint-bug.js: line 6. col 3. expected an assignment or function call and instead saw an expression.3 errors```while this should be perfectly fine. it's just a closure. interestingly enough. if you wrap the closure in parenthesis instead of the void pattern. jshint doesn't complain even though that would be an actual problem (asi hazard. causes the engine to try and run the array as a function with the value of the function timed as an argument).,negative
jshint/jshint,jshint,2013-02-26T17:23:30Z,one more example. which acts as expected and does not generate a warning about `err` being unused.``` javascript/*jshint unused:true */function hasunusedparam(err. cb) {    return cb;}```the problem with setting unused to true inline seems to only appear when set _inside_ a function. that is. setting unused to true at the top of a file works as expected. but setting it inside a function it does not.,negative
jshint/jshint,jshint,2013-02-27T22:30:46Z,agree with axkibe as well. antonkovlayov suggests commenting out the unused parameters but that does _not_ work if the unused parameter is in the middle of the list - you need the middle parameter to retain proper order.,neutral
jshint/jshint,jshint,2013-02-28T02:01:00Z,thank you!,positive
jshint/jshint,jshint,2013-02-28T02:15:50Z,what was use case for this? it'd be nice to have a test case to prevent possible future regressions.,negative
jshint/jshint,jshint,2013-02-28T05:43:49Z,absolutely agree with axkibe and jsoverson. this would be one of the single most useful enhancements for jshint.,positive
jshint/jshint,jshint,2013-02-28T20:00:44Z,you can use `/* jshint -w001 */`,neutral
jshint/jshint,jshint,2013-02-28T22:01:04Z,complete sample .jshintrc. this branch/pr replaces `example/.jshintrc` with a complete configuration file that can be dropped into place in any project without affecting the default jshint options. i've also included comments with each option that should clearly indicate what the possible values will mean practically.if this is accepted. the next step i would think is a feature in the cli that copies this sample file to cwd.,neutral
jshint/jshint,jshint,2013-03-01T23:44:14Z,looks great. thanks!,positive
jshint/jshint,jshint,2013-03-03T00:01:23Z,i see. this is not scoped suppression. right? also is there a way to turn warning back after /\* jshint -w001 */?thank you.,negative
jshint/jshint,jshint,2013-03-04T10:54:51Z,(node) warning: possible eventemitter memory leak detected. 11 listeners added. use emitter.setmaxlisteners() to increase limit.. i get this error in chrome if i press the lint button 3x.,negative
jshint/jshint,jshint,2013-03-05T18:18:29Z,perhaps the config is determined by a sort of "inheritance" pattern? maybe the directory of the file is checked first. and then the script traverses up the directory tree and gathers all the available configs in the hierarchy together. then it can either go top-to-bottom (closer to root takes precedence) or bottom-to-top. (closer to target file takes precedence)with the "bottom-to-top" approach. you could easily set "global" config rules for a project. and allow specific directories to override only as-needed. certainly makes pinning down exactly what rules are applied where a bit trickier. but that complexity is only introduced by conscious effort on the part of a project.,neutral
jshint/jshint,jshint,2013-03-05T19:11:56Z,yes i was imagining something like that. i think you'd want the configs closer to the target file to take precidence really.the "pinning down errors" issue is also offset by the flexibility. and the fact that the rules for determining the config are relatively easy to understand/explain,positive
jshint/jshint,jshint,2013-03-05T19:18:00Z,i'm actively working on a pull request that should handle this. the goal is to work exactly like the current implementation. expect instead of searching for .jshintrc relative to the current directory. it searches relative to the parent directory of the file being checked. hopefully i'll have something ready within the next week.,neutral
jshint/jshint,jshint,2013-03-06T10:07:51Z,i also get this warning. when checking a bigger js file.can you provide a way (e.g. a directive) to increase the limit per file and/or global?,neutral
jshint/jshint,jshint,2013-03-06T15:00:18Z,is there any progress on this?even if it only checks for the exact pattern `if (!obj.hasownproperty(key)) continue;`. it would still be very useful.  (breaking. returning. or throwing from such an `if` would be very strange),positive
jshint/jshint,jshint,2013-03-06T19:47:51Z,uhm. i just need to fix that.,neutral
jshint/jshint,jshint,2013-03-06T21:43:10Z,just out of curiosity. why would empty lines with just tabs throw an error?i personally like to tab out on empty lines to match the indent for that level. i understand that not all folks like to do this (see #182). but why would empty tab lines be considered an error to the parser? it's not bad code ... is it really such a bad coding style that jshint wouldn't allow for such a style (when `trailing` is set to `true`).would it be silly to allow for empty lines when `trailing` is turned on? iirc. some of the options allow for varying levels of enforcement ... couldn't this option allow for different "levels" of checking? this would make make both groups of people happy (i.e. those who don't indent on empty lines and those that do).sorry to beat a dead horse ... i know some of this treads on flame war territory. i just would not respect myself later if i did not try to convince you to add an option to allow for empty line indentations. :dancers:,negative
jshint/jshint,jshint,2013-03-07T13:44:22Z,search for .jshintrc relative to the file being linted.. this patch updates the logic that looks for a .jshintrc file touse to search relative to the file being linted rather than thecurrent working directory. if no file is found. config stillfalls back to ~/.jshintrc.this behavior should better reflect user intent when lintingfiles. regardless of where jshint (or the editor leveragingit for checks) is run from. since config lookup is now per-fileinstead of per-run. the internal findfile method has beenmemoized to avoid redundant searching.references:  fixes gh-833,neutral
jshint/jshint,jshint,2013-03-08T08:34:57Z,option for unused local vars but not parameters. it would be great to have an option that would produce warnings only for unused local variables. and not for unused function parameters. take a look at the following case:``` javascriptfunction sum(){    var sum = 0    array.prototype.slice.apply(arguments).foreach(function(a){       sum += a    })    return sum}function addtwonumbers(a. b){    return sum.apply(this. arguments)}```in this case. for the function addtwonumbers. i really want to keep the declared arguments **a** and **b**. since this makes it clear to readers as to what parameters the function expects. yet. i would like jshint not to warn on these as unused variables. but only notify me of unused local vars. explicitly declared in the function body,negative
jshint/jshint,jshint,2013-03-08T20:26:31Z,yes. i can disable it but i actually want this feature where it makes sense.i ended up grabbing the old jshint.js files from my sublimelinter package backup but i'd prefer to stay up to date if possible.,negative
jshint/jshint,jshint,2013-03-09T23:12:40Z,+1would you be able to update `examples/.jshintrc` with this new option?,neutral
jshint/jshint,jshint,2013-03-12T16:30:36Z,since this issue is closed. i think it makes sense to continue discussion about skipping a specific line on #870,neutral
jshint/jshint,jshint,2013-03-12T22:37:37Z,rejects it(jorge)();,neutral
jshint/jshint,jshint,2013-03-13T01:22:16Z,braces around case block causes spurious "expected a 'break' statement before 'case'.". to reproduce. enter the following code into jshint.com:window.foo = function() {    "use strict";    var x = 1;    switch (x) {    case 0: { break; }    case 1: break;    case 2: break;    default: break;    }};line 5: case 0: { return; }expected a 'break' statement before 'case'.i would expect the above code to jshint cleanly.,positive
jshint/jshint,jshint,2013-03-13T09:54:49Z,:+1:,neutral
jshint/jshint,jshint,2013-03-14T05:40:58Z,that's a good point too. it would be generally useful to have all of the linting of use strict without having to type it for every environment since in general more people use jshint than use use strict.,positive
angular/angular.js,karma,2013-06-05T18:44:26Z,feat(ngdocs): setup karma-docs testing suite to test docs components,neutral
angular/angular.js,karma,2013-06-10T22:17:44Z,fix(angularfiles): ensure only karma-docs.js tests the component-spec files,neutral
angular/angular.js,karma,2013-06-10T22:24:32Z,chore(ngdocs): add angular-route.js to karma docs suite,negative
summernote/summernote,sauce,2015-08-18T12:07:36Z,mstred we skip saucelabs for build on pr. you can pass the build if you rebase your pr against develop branch.,neutral
istanbuljs/istanbuljs,istanbul,2017-04-17T17:23:01Z,stupidism i've tested jakxz's branch of your repo; if you switch the order of rewire and istanbul things should start working for you.,neutral
istanbuljs/istanbuljs,istanbul,2017-04-26T21:03:59Z,istanbuljs/istanbuljs#42 - add failing test for cobertura reporter branchmap structure. #42 this branchmap structure is used by both the cobertura and  the clover reporters. a fix would add accurate conditional coverage to both.,negative
istanbuljs/istanbuljs,istanbul,2017-04-28T23:51:29Z,chore: switch website url to the new istanbul.js.org url,neutral
istanbuljs/istanbuljs,istanbul,2017-04-29T06:49:59Z,jakxz i'm pretty sure that in normal circumstances. getting a `null` statement should be impossible;samnelson are you able to share the codebase that you were bumping into issues on? i think if we switch the order of `istanbul` and `rewire` things might start working for you -- and we won't need this fix.,neutral
istanbuljs/istanbuljs,istanbul,2017-04-29T07:21:38Z,jakxz the problem is it would result in misreporting test coverage information -- except in bizarre situations. like the interaction we're seeing between `babel-plugin-rewire` and `babel-plugin-istanbul`. it should be impossible to have a `null` in a coverage map. if we'd been hiding this edge-case. we never would have found the bad interaction between these two libraries that was dropping coverage information on the ground.,negative
istanbuljs/istanbuljs,istanbul,2017-05-01T13:56:23Z,bcoe reversing the order resolves the problem. as far as documentation goes. maybe something in the readme for babel-plugin-istanbul would be a good place to document this this fix.,positive
istanbuljs/istanbuljs,istanbul,2017-05-05T14:53:08Z,q: how to manually add coverage during a nyc instrumented test-run. hi.i've got a fun little setup.i'm running `mocha` instrumented with `nyc`. like `nyc -n src -i babel-core/register mocha`. in itself. this part works.most of the tests are unit-tests running directly in the nodejs instance. other tests are end-to-end tests which start a webdriver-controlled browser. bundle sourcefiles with webpack using babel and `istanbul-instrumenter-loader`. then do some browser tests and send `window.__coverage__` back to the test-runner via the webdriver connection. the test runner then writes out the source-mapped coverage data to `.nyc_output` (with a little help from `istanbul-api`) where it gets picked up by nyc and reported. this works too.however. if i run both the normal testsuite and the end-to-end tests in the same mocha run. the manually written coverage overrides coverage data from nyc. that is. if i have 100% coverage on `src/thing.js` in the regular tests. but only 70% in the end-to-end tests. nyc reports only 70%.is there something i can do to somehow funnel the browser's coverage data into the running nyc instance?,negative
istanbuljs/istanbuljs,istanbul,2017-05-05T20:26:52Z,after a while i figured i could just mutate the global `__coverage__` object. at that point. merging the source-mapped data into it was straightforward. sometimes you just have to write things down (into an issue) to figure out how to solve the problem :)thanks anyway!,positive
istanbuljs/istanbuljs,istanbul,2017-05-05T20:41:31Z,jpommerening i'm glad you figured out an approach  please let me know if there's anywhere we could document this better.,positive
istanbuljs/istanbuljs,istanbul,2017-05-08T17:34:17Z,samnelson please feel free to reopen this discussion if you're still bumping into issues  we've rolled out a few changes to nyc/istanbul-lib-instrument that i think should solve your problem.,positive
istanbuljs/istanbuljs,istanbul,2017-05-08T18:11:22Z,popomore there might definitely be some wins on both the istanbuljs and babel side -- it's always fun to crack out a profiler,neutral
