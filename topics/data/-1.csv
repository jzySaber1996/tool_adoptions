webtorrent/webtorrent,standard,2015-01-12T08:23:00Z,we could also try the other way around: create a desktop and mobile app with node.js/meteor. like atom.io did. it's not very difficult.being desktop based. i could create a bridge between the standard torrent protocol and webtorrent. using unix pipes on linux.,neutral
alexei/sprintf.js,eslint,2017-05-06T16:28:26Z,feature eslint. this is pr #127. rebased and addressing comments in the pr.closes #127,neutral
alexei/sprintf.js,eslint,2017-05-06T16:44:35Z,thank you!let's wait a couple of days for meriemkhelifi to have the chance to update his pr.btw. removing the quotes flag also means not fixing the quotes in the source files. there are a couple of places (in the tests) where i've been inconsistent. but i can fix those myself.,negative
alexei/sprintf.js,eslint,2017-05-08T01:08:17Z,`eslint:recommended` is a pragmatic set of "best practices" that it applies automatically. all of the recommended rules are conventions adopted by the community. based on your comments in #127. i think it's something you'd could support with very little arm twisting. thats compared to standard. which is much more opinionated. and has opinions you disagree with.if you'll go to travis-ci.org and enable it for your repo. someone else might create a pr that makes the changes necessary in this repo. hint. hint.,positive
alexei/sprintf.js,eslint,2017-05-08T18:35:42Z,yeap. maybe you're right. i just wanted to ensure that my comment in other related pr wasn't lost.,neutral
alexei/sprintf.js,eslint,2017-05-10T04:16:51Z,it's been a couple days. if this pr were merged. and some indication that the repo owner had enabled travis for this repo. then another pr that enables automatic running of continuous integration tests. complete with lint and style testing. might appear.,neutral
alexei/sprintf.js,eslint,2017-05-10T16:47:31Z,yes. i enabled travis on sunday just after you've mentioned it,neutral
ashiina/lambda-local,mocha,2016-08-12T18:50:08Z,improve testing situation. moving `mocha` into `devdependencies` allows people to install this in their own projects without having to download `mocha`. since `mocha` is only needed to develop and test this module itself.i also tried to run `npm test` out of habit and noticed the script wasn't defined. it looked like you needed to `cd` into the `test` folder before running mocha. so now. with help from `path`. you can run the tests regardless of your current working directory.thanks for this project! it looks great,positive
ashiina/lambda-local,mocha,2016-08-16T01:50:34Z,thanks for this. it's much cleaner. merging!,positive
shouldjs/should.js,mocha,2014-10-24T12:04:44Z,on wiki page you pointed the first item said that `http` and `jq` assertions had moved to separate  repositories (so it is documented. maybe need to add which exact methods was moved?).`.header` now in `should-http`. you can use it with mocha to require itself or just `require('should-http')` somewhere (one time will be enough).,neutral
jprichardson/electron-mocha,mocha,2016-08-02T16:22:09Z,the issue is resolved in the current build! not sure exactly what has resolved the issue. but this is safe to close now.,positive
ramda/ramda,sauce,2014-09-04T23:33:36Z,sauce initial setup,neutral
ramda/ramda,sauce,2014-09-05T00:00:33Z,how could you test it without ramda sauce credentials?,neutral
ramda/ramda,sauce,2014-09-05T00:24:27Z,i just read the travis logs,neutral
ramda/ramda,sauce,2014-09-05T00:31:02Z,travis is not configured to run sauce yet... the build failure is some git weirdness.nonetheless a branch may be a good idea,negative
ramda/ramda,sauce,2014-09-05T20:18:45Z,to your other points:- `keys`: wow. that is a creative solution to a crazy problem. since we're dispatching to native `object.keys` where possible anyway. i see no reason not to crib that here.- `slice.from` do you still have a fix for this? pr welcome--prolly against `sauce` branch to start?- `strindexof` etc.: yes. let's get back to getting nucleotides in (ext?). and pulling `invoker` from the core lib.,negative
ramda/ramda,sauce,2014-09-07T16:50:58Z,before i merge `sauce` branch. can someone please review the code for me. thanks,positive
ramda/ramda,sauce,2014-09-07T22:40:04Z,re: keys: i might even prefer to only return a function with that check in there when you're in that ie < 9 scenario. but i don't think the way it is will cost us much.as to `invoker`. i don't know why those two failed and the others were fine. ie works in mysterious ways.i'll merge the `sauce` branch real soon now. marking this old defect closed.,negative
ramda/ramda,sauce,2014-09-09T14:28:53Z,looks like sauce is causing travis to report an error (even though its on a post-success hook). let me remove the sauce config and rerun the build. then i will pull this. assuming everything is ok,negative
ramda/ramda,sauce,2014-09-09T15:32:12Z,it's travis not getting credentials for sauce on prs. i will fix that tonightmeantime. take latest .travis.yml with sauce task commented out,neutral
ramda/ramda,eslint,2015-12-12T19:05:09Z,fix linting errors in lenspath test. this fixes linting errors in lenspath introduced through the new eslint rules.,negative
ramda/ramda,jshint,2015-03-19T22:04:27Z,hmmm```running "jshint:files" (jshint) taskwarning: path must be a string. received null use --force to continue.```,neutral
ramda/ramda,jshint,2015-04-06T17:38:54Z,the really odd thing is that as far as i can tell. this should be making us run `jshint`. `jscs`. and `browserify` each twice. but that doesn't seem to be happening...  i wish i understood magic.,negative
request/request,standard,2017-03-04T22:07:46Z,move to standardjs code style. look. it was cute to have my own code style for the first 6 years but this is just making it weird to contribute to now. i'm +1 for moving to standardjs. i'm -1 for moving to anything else. cause i just don't wanna have an argument about it :),negative
request/request,standard,2017-03-04T22:52:44Z,standardjs is pretty close to what we have anyway. :+1: from me,positive
request/request,standard,2017-03-05T01:06:45Z,thanks to "insomnia driven development ™" ;),positive
request/request,eslint,2014-10-02T11:20:39Z,i'd suggest to use `--reset` flag in eslint and just enumerate all rules you have. otherwise eslint could add rules that's on by default. and you will constantly have to disable them every time eslint is released.the most useful rules are `no-console`. `no-debugger`. `no-undef`. `no-shadow`. `no-sync`.ps: you can also use yaml format for an eslint config file - it's easier to manage it by hand than json,negative
request/request,eslint,2014-10-13T23:59:59Z,+1 looks good to me. can you turn this rule into an error in the .eslintrc file? (and while you're at it. turn the curly rule into an error as well?),positive
request/request,eslint,2014-10-14T01:02:33Z,update eslintrc file to no longer allow past errors. emkay nylen mikeal does this new rule list work? i'm not sure where we ended up re: #1156 and one-line if-statements. but it sounds like it's not possible to allow only those,negative
request/request,eslint,2014-10-14T02:23:16Z,:+1: looks good to me.  created #1163 for travis failure.i'll merge this tomorrow if no one objects or beats me to it.,positive
request/request,eslint,2014-10-14T02:56:23Z,:+1:,neutral
request/request,codecov,2015-05-26T17:04:00Z,add codecov. fixes #1577 (hopefully) from what i'm reading coveralls no longer works with the public token for some reason. codeclimate. codeship and now coveralls requires full read/write access to all of your public/private repos + the org ones = which is insane imo.codecov on the other hand requires minimal set of permissions for public projects + it seems that they support reporting via the github status api.,positive
request/request,codecov,2015-06-08T15:04:13Z,> thanks for the pr. i'll be working on codecov/support#12 today. i look forward to this merge!i've deployed this fix. thank you!,positive
request/request,codecov,2015-06-08T16:36:27Z,thanks. stevepeak the github's status api seems to be working :+1:,positive
request/request,coveralls,2014-11-19T10:04:32Z,the error in this build is due to `coveralls.js` script returning an error.,negative
request/request,coveralls,2014-11-20T16:04:43Z,you need to login to coveralls.io with your github account. then find the request project in the list of request org projects. and click on the button to enable it. you need to be an owner of that org.coveralls token requests only read access to your email. so it can't modify anything on your behalf on github like travis-ci do.once you enable the request project on coveralls.io the script from the travis.yml will send the lcov data from our tests successfully (or at least it works that way for me on my personal projects)currently the test coverage is around 80% for the entire request.js file.,positive
request/request,coveralls,2014-11-22T12:47:00Z,> changes unknown when pulling 37e2268 on simov:test-coverage into *\* on request:master**.will this message be displayed for every change. even if you insert missing comma in readme? 'cause as i've seen in other projects. coveralls can be extremely annoying.,negative
request/request,coveralls,2014-12-07T09:38:41Z,nylen i think this is good to be merged in. it contains a few bugfixes for the tests. and probably coveralls notifications can be set to write to gitter for example (in case github comment are too annoying),neutral
request/request,coveralls,2014-12-08T17:12:17Z,eiriksm the travis build is failing. ~~on a side note: i'm wondering why coveralls decreases the test coverage in case no new code is being added.~~ it shows some red numbers. but not the actual lines of code.edit: that's probably due to code added between the last coveralls build,negative
node-inspector/node-inspector,jshint,2014-03-14T06:50:28Z,landed.> i planned that this will be my last commit before updating information on the 'console implementation' pr. but i think that jshint is important. on next week you can wait first update for 'console implementation' and also for 'jshint'.i'll add the jshint today. don't worry about that.,neutral
node-inspector/node-inspector,jshint,2014-03-14T10:19:22Z,> i am novice in test frameworks. for me doesn't matter what will be used.fair enough. let's stick to chai for now.> how about `quotemark: true` ?that would allow people to use double quotes. which i'd like to avoid. the algorithm used by jshint to detect "consistency" is unfortunately not good enough yet.,negative
sudodoki/copy-to-clipboard,sauce,2016-06-05T18:46:50Z,setup travis. - add .travis.yml- modifies nightwatch.json to add saucelabs env (simplest one w/ firefox),neutral
sudodoki/copy-to-clipboard,sauce,2016-06-05T18:51:53Z,this should cover #30,neutral
pixijs/pixi.js,jshint,2016-08-05T00:49:13Z,converts to npm scripts. removes gulp. ## overviewthis change refactors the build process to remove gulp and gulp-related plugins. this simplifies the build process mostly through the **package.json** and a few helper scripts. it has the same feature parity as the gulp tasking (e.g.. custom builds by ignore modules). but with less devdependencies overhead and without requiring the global `gulp` install. ### changes- `gulp build` is now `npm run build`- `gulp watch` is now `npm start`- `gulp jshint` is now `npm run lint`- `gulp clean` is now `npm run clean`- excluding changed from `gulp build -e filters` to `npm run build -- -e filters`- `gulp docs` is removed. `npm run docs` still works### fixed- license header is re-added to both the debug and release builds.,negative
pixijs/pixi.js,jshint,2016-08-05T00:49:53Z,englercj i welcome your feedback here.,positive
pixijs/pixi.js,jshint,2016-08-05T01:54:10Z,:+1: good luck!,positive
pixijs/pixi.js,jshint,2016-08-05T13:47:12Z,oh my god! shall i remove gulp from pixi-spine and other plugins?,neutral
pixijs/pixi.js,jshint,2016-08-05T13:49:21Z,okay englercj have another crack at it. completely uses the browserify api this time without a hacky post process.,neutral
pixijs/pixi.js,jshint,2016-08-05T13:51:18Z,i couldn't find something that _exactly_ did the license header insert in the way i wanted with browserify. so i created it as a plugin.,negative
pixijs/pixi.js,jshint,2016-08-05T14:17:57Z,this is counter-revolution! npm strikes back!,neutral
pixijs/pixi.js,jshint,2016-08-05T15:43:22Z,neat. looks good to me,positive
pixijs/pixi.js,jshint,2016-08-05T16:22:53Z,hey goodboydigital. care to weight in?,positive
pixijs/pixi.js,jshint,2016-08-05T16:23:18Z,also. would like to sanity check if someone could try to build this branch on windows.,neutral
pixijs/pixi.js,jshint,2016-08-05T16:50:05Z,ivanpopelyshev what if you change the `"build"` script in **package.json** to be `"node scripts/bundle.js"` instead of just `"scripts/bundle.js"`,neutral
pixijs/pixi.js,jshint,2016-08-05T17:23:02Z,ivanpopelyshev what about escaping double quotes: `"parallelshell \"npm run watch:debug\" \"npm run watch:release\""`,neutral
pixijs/pixi.js,jshint,2016-08-05T17:25:41Z,wow! it works! awesome!,positive
pixijs/pixi.js,jshint,2016-08-05T17:48:36Z,it removes gulp client. right?,neutral
pixijs/pixi.js,jshint,2016-08-05T17:49:55Z,is it ok ?``` jsvar uglify = require('gulp-uglify');```at the same time. you added uglify-js into dependenciesupd. ok. so gulp-uglify. gulp-sourcemaps and gulp-empty are still there,neutral
pixijs/pixi.js,jshint,2016-08-05T19:29:01Z,ivanpopelyshev yup. i removed uglify-js. good catch.gulp-uglify. gulp-sourcemaps and gulp-empty should be in the **package.json**. these are plugins for piping streams and not just for gulp. for instance they work with browserify's piping.,positive
pixijs/pixi.js,jshint,2016-08-06T12:49:13Z,looking good bigtimebuddy,positive
pixijs/pixi.js,jshint,2016-08-06T21:09:31Z,nice work dude,positive
pixijs/pixi.js,eslint,2016-09-18T08:16:17Z,removed old jshint comments; replaced jshint in contributing.md with …. …eslint,neutral
pixijs/pixi.js,eslint,2016-09-18T12:16:45Z,thanks for the cleanup!,positive
pixijs/pixi.js,eslint,2016-09-22T23:08:13Z,prefer const. - added eslint rule prefer-const- used eslint --fix to fix most warnings. changed the others manually,neutral
pixijs/pixi.js,eslint,2016-09-23T02:03:49Z,nice :+1:,positive
pixijs/pixi.js,eslint,2016-09-23T12:54:19Z,oh ya. will check if theres also a eslint rule for the curly braces.think the for ... const comes from eslint autofix. at least i hope i didn't do that :) will check later. only got my phone at the moment.,positive
pixijs/pixi.js,eslint,2016-09-23T12:56:39Z,btw. what do you think about a lint-fix npm script?,neutral
pixijs/pixi.js,eslint,2016-09-23T15:06:28Z,+1 for the eslintrc englercj (no github reactions in the phn...) but without the comments maybe bc it's not valid json.,neutral
pixijs/pixi.js,eslint,2016-09-23T15:09:54Z,might also be worth thinking about a seperated eslint package that all plugins should include also.,neutral
pixijs/pixi.js,eslint,2016-09-23T15:12:26Z,> but without the comments maybe bc it's not valid json.eslintrc.json files allow comments. its fine i promise :)> might also be worth thinking about a seperated eslint package that all plugins should include also.we don't want to enforce plugin authors to use any style. 1st-party plugins will be in our repo. and 3rd-party plugins can look however their authors want.,positive
pixijs/pixi.js,eslint,2016-09-24T15:20:24Z,initiating operation merge conflicts. go go go,neutral
pixijs/pixi.js,eslint,2016-09-25T19:22:46Z,eslint cleanup. added a more specific and restrictive eslint file. and ran `--fix` on source and tests.includes some good stuff like:- consistent spacing- removing trailing newlines- enforcing a newline at end of file- use template strings instead of concatenation- enforcing consistent comment formats- validates jsdoc- ensures there is always a trailing comma for multi-line objects/arrays (helps cleanup diffs)still more to do until there are no errors. but this is a start. i would like to fix as much of this as is possible _before_ i branch the `next` branch to minimize conflicts.when i left off. here are the sections i had left to do:- [x] core- [x] extract- [x] extras- [x] filters- [x] interaction- [x] loaders- [x] mesh- [x] particles,positive
pixijs/pixi.js,eslint,2016-09-26T00:51:40Z,englercj you're insane for attempting this! but i'm totally behind it. let me know if you want any help.,negative
pixijs/pixi.js,eslint,2016-09-26T02:42:18Z,thats a lot :) same here. would also contribute sth. but not sure how to contribute to a pr.,positive
pixijs/pixi.js,eslint,2016-09-26T14:40:06Z,fix linting issues. ### fixed- minor eslint errors,negative
pixijs/pixi.js,eslint,2016-09-26T14:43:42Z,oops. we were editing tags at the same time,neutral
pixijs/pixi.js,eslint,2016-09-26T14:50:33Z,rebased. i hope this fixes the eslint failures,positive
pixijs/pixi.js,eslint,2016-09-26T23:12:38Z,ok. linting passes. tests pass. and i squashed into a single commit. phew!,neutral
pixijs/pixi.js,eslint,2016-09-27T00:46:06Z,englercj epic pr! overall. great work and brings a lot of sanity to the code style and conforms everything. love that it's eslint enforced. reworking of the imports and exports is nice. especially when importing consts. i didn't get to go through all of it. but left a few comments/questions.,positive
pixijs/pixi.js,eslint,2016-09-27T09:36:13Z,.,neutral
pixijs/pixi.js,eslint,2016-09-27T15:01:07Z,rebased to include the changes in dev.,neutral
pixijs/pixi.js,eslint,2016-10-01T08:06:13Z,adding npm command 'lintfix'. i find it extremely useful to have an easy to access npm command to do the automatic eslint fixes,positive
pixijs/pixi.js,eslint,2016-10-01T15:53:08Z,do we need this at all. or can we just use `npm run lint -- --fix`?,neutral
pixijs/pixi.js,eslint,2016-10-02T09:08:54Z,you don't _need_ it. but you could argue the visibility to devs is good that it's possible. and. in my ultimate laziness. this ensures it shows up in webstorm as an npm command i can just double click :p,negative
pixijs/pixi.js,eslint,2016-10-05T13:41:48Z,weird not sure what this eslint error means?  351:48  error  missing function expression name  func-names,negative
pixijs/pixi.js,karma,2013-12-13T03:21:01Z,drkibitz do all the tests pass for you on the `jshint` branch? i'm getting errors when i load the images. and after some debugging in chrome it looks like whatever karma is serving at the iamge urls is just broken.the url is there. and data is served. but the image is corrupt. so those tests fail due to a timeout of waiting for a successful image load event.have you experienced this at all. or have any ideas? is this just me? this is the last blocker before i merge this into develop so i want to fix it up soon.,negative
pixijs/pixi.js,karma,2013-12-13T07:24:43Z,englercj sorry i haven't had the the chance to test this. and i probably won't be able to until next week. i would like to know what images you mean. any images? or particular images. i do know the functional tests were broken last i tried and i just disabled them. but the last i ran karma. the until tests were passing. even the ones that loaded images. but that was a while ago in npm module standards ;),negative
pixijs/pixi.js,karma,2013-12-13T15:38:42Z,yeah any images that the karma webserver has to serve are corrupted. so those unit tests fail (because the image never has a load event fired). i've been trying to figure out why and i am stuck,negative
pixijs/pixi.js,karma,2013-12-20T04:23:24Z,englercj just letting you know this is on my radar. just been really busy before the holidays and everything. i will check it out. i also saw your issue on the karma repo.,neutral
dresende/node-orm2,mocha,2014-07-14T19:11:00Z,orm is leaking a global: lodash "_". this error occurs every time i start running the `mocha` tests from scratch: `error: global leak detected: _`the test to reproduce:```describe('orm'. function() {    it('will leak'. function() {        var orm = require('orm');    });});```i went one step further to see if `lodash` was the problem.```describe('lodash'. function() {    it('will not leak'. function() {        var _ = require('lodash');    });});```only the `require('orm')` produced the leak.,negative
dresende/node-orm2,mocha,2014-07-14T19:19:23Z,found the source of the leak in utilities.js.  putting together a pr.,neutral
dresende/node-orm2,mocha,2014-07-14T19:24:44Z,i see this was resolved a few weeks ago... it's just not available via `npm install orm` yet.,neutral
actionhero/actionhero,standard,2016-11-22T21:48:54Z,javascript standard style guide. remove eslint in favor of the more opinionated  the lint is now part of the test suite (and therefore pull requests)---api changes to match proper capital case constructors:- `api.connecton()`- `api.genericserver()`- `api.actionprocessor()`also. it is now `require("actionhero")` not `require("actionhero").actionheroprototype;`,negative
mlaursen/react-md,eslint,2016-05-02T17:04:49Z,enhancement/ci. this adds travis-ci as the continuous integration tool. also fixes some eslint issues of no-unused-vars from object deconstruction.,neutral
pubkey/rxdb,uglify,2017-05-16T14:17:03Z,hi lyquocnam.this error is produced by uglifyjs whenever it tries to 'uglify' a function that has been designated as an asynchronous function.depending on how the webpack setup is defined for the `quasar-cli`. you will need to run this bundle through a transpiler such as `babel` first. it looks like that function is being required in wholesale from rxjs somewhere.note: offending function in your prod bundle;````javascriptasync function assertthrowsasync(test. error = error. contains = '') { ... }````,negative
pubkey/rxdb,uglify,2017-05-16T15:42:13Z,ok i think i have figured it out. webpack is using the `module` source from `rxdb` when being built. this results in webpack just using the source files rather than the dist files.this means the async/await stuff just gets put into the resulting bundle. and then uglify-js gets confused when it sees them when attempting to uglify the source.also. if babel (or similar) is running within the `quasar build` step. then it will be ignoring `node_modules` (presumably. i haven't checked) and voila. there's the issue.,negative
jquery/esprima,karma,2015-06-26T07:16:13Z,i made some minor tweak and then ran `npm install karma-es6-module-preprocessor` without any problem.,neutral
elastic/kibana,selenium,2015-10-14T20:04:42Z,functional config. - move the urls needed for the functional test runner into a config- add a utility method for creating a url- cache the selenium download on travis,neutral
Automattic/node-canvas,standard,2016-05-12T18:17:36Z,png files written with wrong resolution in header. currently. a png encoded by node-canvas doesn't contain the correct physical size information in the header. in `canvas_write_png()` in `png.h` you never call `png_set_phys()` to set the physical units in the png header. so it defaults to 72 ppi. most screens are 96 ppi.generally it would be awesome to have a way to set the physical size of the canvas from javascript. i personally would like to use this for print. where the dpi in the header changes the way the document is printed. right now i am running an imagemagick command after the png is written to a file. but this is inefficient.i could offer a patch. but of course it would be another non-standard function. i'd like to hear the thoughts of the project leaders on whether this would be something of general interest or not before i write anything.this is potentially related to issue #716. in that scaling the canvas may indicate that the user is looking to produce a png for higher ppi screens. and the png/svg/pdf should probably reflect the true physical dimensions of the display device.,negative
Automattic/node-canvas,standard,2016-05-12T20:00:32Z,hmm. very interesting indeed.have you tried exporting pngs from different web browser and see what they set as the ppi?,neutral
serverless/serverless,mocha,2016-08-05T12:34:59Z,should be resolve imho. right now the console.logs are extremely distracting and the test output is impossible to read (just the result). there's already a mocha pr which tries to solve this.,positive
serverless/serverless,eslint,2016-04-04T20:20:57Z,updates readme.md. i created a similar plugin to jshint but it uses eslint plugin for linting the jscode.thanks,neutral
serverless/serverless,istanbul,2016-07-27T16:36:18Z,bennybauer sorry for the delay:regarding istanbul: you have to add the tests to all.js. they are currently not picked up automatically.> (a) resources should be written to outputs. maybe with a predefined prefix.imho thats the best solution. this way we can selectively export resources and they can be shown> events - should we display them too? if so then what info should be displayedimho thats not as important. as those are visible in the serverless.yml file anyway. the info plugin should imho really focus on information from the deployed system that is kind of hard to get at the moment.> cost estimation - the "bonus" according to austen :)if we get around to it that could be interesting. can we do this automatically? the biggest question there for me is how to capture all the unknown facts like how many servers will be there. looks like aws itself basically redirects to their online calculator and you can then play around with it.imho too many open questions for now to really put something in there. but we can put it in later on.,positive
amir20/phantomjs-node,codecov,2017-04-04T17:14:15Z,adds codecov. ### proposed changes in this pull requestadds code coverage#### checklist* [x] new tests have been added* [x] `npm test` passes successfully* [x] documentation has been updatedamir20 to review,positive
taskcluster/taskcluster-client,eslint,2017-10-20T14:49:36Z,many thanks for doing this!i noticed that there are now a few entries in `dependencies` that are more build-time dependencies and so perhaps belong in `devdependencies`? (for example `babel-compile`. `eslint`. ...),neutral
taskcluster/taskcluster-client,eslint,2017-10-20T15:03:23Z,if it helps as a starting point. my simplistic grepping just now found the following `dependencies` to be only used during test/build. so can be moved to `devdependencies`:```babel-compilebabel-eslintbabel-preset-taskclustereslint-config-taskclustereslint-plugin-taskclustermocha-eslintpulse-publishersource-map-supporttaskcluster-lib-apitaskcluster-lib-apptaskcluster-lib-monitortaskcluster-lib-testingtaskcluster-lib-validate```and the following don't appear to be used at all:```url-joinsuperagent-hawk```...though of course i guess there could be auto-importing magic going on (or things needed to satisfy `peerdependencies`).,negative
janl/mustache.js,eslint,2015-05-12T22:36:34Z,hi nagaozen. thanks for the pr!unfortunately. it's breaking the travis build: the linter quits. can you fix it? cheers!```> eslint mustache.jsmustache.js  14:12  error  "mustache" is not defined  no-undef```,positive
janl/mustache.js,jshint,2015-01-06T22:40:11Z,i'm guessing you think of this is a replacement for jshint as the project uses atm. correct? which benefits does it provide to the project?,neutral
janl/mustache.js,sauce,2015-05-09T18:14:40Z,> browser tests are not included in `npm test` as they run for too long. although they are runned automatically on travis upon commit.> > [...]> > atm these tests fail on travis as travis doesnt set encrypted $envs from pull requests for security reasons. those variables are required by saucelabs to run tests.so this will currently break the travis build?,negative
janl/mustache.js,sauce,2015-05-09T21:43:27Z,> so this will currently break the travis build?nope. as soon as this code is part of the `janl/mustache.js` repo. the encrypted $envs will be set correctly and tests runned on saucelabs. i just realized i should have created this feature branch in `janl/mustache.js` so that these encrypted $envs would have been set all along .. lesson learned.,negative
paulmillr/chokidar,coveralls,2015-01-14T14:44:38Z,add travis. and maybe coveralls alsopaulmillr i'm pretty sure you're the only one who can flip the switch on the 3rd-party ci services,neutral
paulmillr/chokidar,coveralls,2015-01-14T14:49:37Z,unfortunately it won't be able to test the fsevents side of things at all. but still... won't hurt to have it.,negative
paulmillr/chokidar,coveralls,2015-01-14T19:53:34Z,also add travis yml,neutral
paulmillr/chokidar,coveralls,2015-01-14T20:43:03Z,not going to do coveralls for now since it won't be meaningful without being able to include an os x test environment.e-mailed travis support about enabling multi-os. but they said they can't due to travis-ci/travis-ci#2311,neutral
valor-software/ngx-bootstrap,eslint,2016-02-23T16:06:00Z,build: update config to use eslint 2,neutral
valor-software/ngx-bootstrap,eslint,2016-03-09T10:02:39Z,use eslint config,neutral
valor-software/ngx-bootstrap,karma,2016-01-31T16:48:23Z,chore(tests): add test runner and travis build step. add testing:- karma tests- travis ci runner,negative
pattern-lab/patternlab-node,eslint,2016-12-01T14:59:10Z,> in the meantime. if you could attempt to fix the eslint errors that'd help a ton. npm test reports them locally too.sure.,negative
airbnb/javascript,eslint,2016-04-01T14:28:11Z,option to remove eslint react plugin. we enjoy the airbnb eslint config/rules for our es6 js code. but we don't use react. is there a way an option to remove the dependency on the react plugin?,positive
airbnb/javascript,eslint,2016-04-03T16:44:26Z,fixed missing eslint heading,neutral
airbnb/javascript,eslint,2016-04-03T18:37:03Z,i believe this has been rebased,neutral
airbnb/javascript,eslint,2016-04-03T18:42:43Z,softwarespot it's not on top of the latest master - 6671a55556e09b9f70924e9fd63e76c9e079fa5e,neutral
airbnb/javascript,eslint,2016-04-05T04:14:44Z,you're installing eslint globally - you want to install it locally instead. and run it via `npm run-script`. global installs can't access other global installs.,neutral
airbnb/javascript,eslint,2016-04-06T21:39:20Z,add some accessibility rules to the react style guide. i think there is a good opportunity to improve accessibility guidelines in this style guide. this pr takes the first steps in that direction by enabling a handful of rules from eslint-plugin-jsx-a11y and adding some text about these rules.there are more rules from this plugin that i would like to enable. but i'm going to leave that for another time.while i was at it. i switched the syntax highlighting on the codeblocks in the react style guide to highlight jsx better.,neutral
airbnb/javascript,eslint,2016-04-06T21:50:50Z,awesome. other than my nonblocker comment. this lgtm. we've already queued up a few breaking changes since the last release. so this one can be bundled along with them.,positive
airbnb/javascript,eslint,2016-04-06T21:52:25Z,cc evcohen,neutral
airbnb/javascript,eslint,2016-04-06T22:24:29Z,lencioni thanks for all of your help so far and let me know what other rules we can prioritize building out next.,positive
airbnb/javascript,eslint,2016-04-09T05:43:30Z,seb0zz then indentation might start to matter as well. either way. this repository is a tool and then there are other tools out there. as time goes on. these tools tend to get better. in recent years. they've been getting really good really fast.historically. there were no linters. then they came. but i couldn't configure them. afterwards. i could start configuring them. but then there was a problem with imposing certain things because the syntax would allow us all to introduce inconsistencies. today i'm using `babel-eslint` and when i lint. a small :palm_tree: is inflated and i look at it and i unleash the lint :dragon:. by 2020. my editor is probably going to be writing code straight into a linter. by 2030 linters will be writing most of our code and i can start doing something else in my life. i'd like to grow :tomato:.,negative
airbnb/javascript,eslint,2016-04-12T04:47:00Z,added eslint-plugin-jsx-a11y to install script,neutral
airbnb/javascript,eslint,2016-04-12T05:41:35Z,thank you!,positive
airbnb/javascript,eslint,2016-04-13T21:25:39Z,link to eslint.org instead of github where possible. in most cases we link to documentation on the eslint.org site instead ofon github. i found a couple of stragglers and decided to make things alittle more consistent.,neutral
airbnb/javascript,eslint,2016-04-13T21:26:28Z,this is great for the sake of consistency. i wonder tho if it would be better to link to specific shas on github? the docs could get out of sync with the rules.,positive
airbnb/javascript,eslint,2016-04-13T21:28:57Z,i don't think i quite follow your comment about linking to specific shas. wouldn't that get out of sync as the rules are updated?,neutral
airbnb/javascript,eslint,2016-04-13T21:30:57Z,yeah. that's true - it would definitely get out of sync as eslint was updated _in the package_. but the key is that it wouldn't get out of sync as eslint _itself_ is updated.,neutral
airbnb/javascript,eslint,2016-04-13T22:32:29Z,thanks a lot,positive
airbnb/javascript,eslint,2016-04-14T16:07:51Z,update config package readme. i missed a couple of things here when i added some eslint-plugin-import rules. i threw in a capitalization correction for free.,negative
paulmillr/es6-shim,sauce,2014-09-04T15:16:06Z,fwiw. mocha is working. and it is working in saucelabs.  i don't see any reason for changing now for the sake of it.on the other hand. shifting to test262 is a good idea.  but it seems like we already have a test262-to-mocha bridge via smikes work.,positive
paulmillr/es6-shim,sauce,2014-09-05T16:53:08Z,thanks. i logged in to my subaccount. but it doesn't appear to give me access to the previous test runs - it looks like it's just my own sandbox. using the parent account's minutes. we can play with that over time; ideally just like in travis. we can all view the same set of sauce results.overall this looks good - it's unfortunate how much config is required; testling is much simpler - but we definitely need automated browser testing. and this seems to be working well :-) thanks!,positive
paulmillr/es6-shim,jshint,2014-02-08T19:45:18Z,lgtm! if we're able to run jshint now. can we add that to `npm test`. so it can be used to help gate prs?,neutral
paulmillr/es6-shim,jshint,2014-02-09T21:05:25Z,more cleanups and fixes.. this is based on pull request #209 (promises).  that should be merged first.this pr factors out a bunch of new es.<foo> helpers to make us comply more closely to the es6 spec (see #208).it also adds `number.isinteger` from the spec and fixes bugs in `string.raw`. `array#find` and `array#findindex`.the last patch in the series makes our code jshint-clean. and adds jshint to `npm test` to keep it that way (as suggested by ljharb in #207).let me know if you'd rather see this as a series of 1-commit-each pull requests.,neutral
paulmillr/es6-shim,jshint,2014-02-09T21:17:34Z,this pr includes all of the promise stuff - can you rebase `cleanups` on top of `master`?,neutral
paulmillr/es6-shim,jshint,2014-02-09T21:19:53Z,no. because the es.\* helper refactor includes/affects the promises code.  let try to get promises merged first?,positive
paulmillr/es6-shim,jshint,2014-02-09T21:29:24Z,sounds good. i missed that in your initial description,positive
paulmillr/es6-shim,jshint,2014-02-12T20:48:45Z,this patch series is getting unwieldy!  and #211 seems to have broken it slightly.  oh. well.  i'll rebase after #209 is merged (and hopefully before ljharb sharpens his style stick).  it might also be worth splitting the pr into 2 or 3 parts to make them more manageable to review.,neutral
paulmillr/es6-shim,jshint,2014-02-12T21:16:42Z,i'll definitely wait on a style pr until after all related functionality is merged in. no need to increase churn for that. +1 for splitting it into multiple parts tho :-),neutral
paulmillr/es6-shim,jshint,2014-02-12T21:36:41Z,ok. rebased.  i'm going to keep this one open for now to track the big picture. but i've opened #212 with the first set of patches from this series.  once that's reviewed i'll peel off another chunk.,negative
paulmillr/es6-shim,jshint,2014-02-13T09:59:45Z,ok. merged #212. opened #213 and #214 with a pair of easy patches.,neutral
dowjones/fiveby,selenium,2015-02-16T16:35:29Z,rfc: including selenium jar? . i want it to be easy to start fiveby (and not have to spin up a selenium server separately) but that comes at the cost of having to download the fairly large selenium jar.. maybe we should include a command that will install the jar. check for java. etc.. then in code we can just check for the file as well. and of course none if this is an issue when the dev provides a url.,neutral
dowjones/fiveby,selenium,2015-02-16T20:45:31Z,+1,neutral
dowjones/fiveby,selenium,2015-03-01T04:13:58Z,add keywords. automation. selenium. test. testing. webdriver. webdriverjs. mocha. should. bdd. environment. e2e. end-to-end. gulp. har. promise ...?,positive
dowjones/fiveby,selenium,2015-03-01T04:19:55Z,npm post install script should be enough,neutral
dowjones/fiveby,selenium,2015-03-05T20:58:20Z,more detail on rejection of nightwatch. i'm curious about the specific issues that kept you from considering nightwatch in favor of building your own library? i also built a selenium abstraction and get asked a lot about this. for me. the main thing that steered me away from nightwatch was it proscribed a test runner and assertion library. i wanted to have the freedom to choose between mocha. jasmine. or cucumber (just to name some). also. based on my company's requirements. the parallelization mechanism wasn't flexible enough.still. nightwatch is attractive to managers and others who see the nice website. extensive api. and large team of contributors... curious about your opinion. thanks!,positive
dowjones/fiveby,selenium,2015-03-05T22:14:50Z,and as always. thanks for your time!,positive
dowjones/fiveby,selenium,2015-03-06T02:33:34Z,removing packaged jar in favor of run time download. added selenium download manageradded tests for manageradded java check and error + testsstill in progress but will reduce package size significantly (with a filter-branch) and address #13,neutral
dowjones/fiveby,selenium,2015-03-06T02:43:10Z,reminder: add logmanager and selenium to coverage,neutral
digitalbazaar/forge,mocha,2013-07-26T00:35:39Z,forge was initially written before typedarrays were prevalent. we definitely want to switch to them (and to buffers in node as juliangruber suggested). i just haven't had the time to implement a plan to switch over. the plan is to include switching over as part (perhaps in steps) of implementing the webcrypto api so that forge can be used as a polyfill. we want to clean up and consolidate the test suite (and use mocha) before this work happens though. to ensure everything keeps running properly.,neutral
digitalbazaar/forge,sauce,2017-01-11T16:38:48Z,mattcollier could you look into adding saucelabs support (or whatever) now that #456 has been merged?,neutral
digitalbazaar/forge,sauce,2017-01-11T20:32:04Z,nope i do not think so. you will run the coverage still on travis and just push the data on coveralls.,neutral
digitalbazaar/forge,sauce,2017-01-11T21:41:57Z,as a data point. coverage testing on a 4ghz i7-4790k takes 20m35s and has some test timeouts.,neutral
angular/angular-phonecat,karma,2014-03-26T14:49:44Z,fix test.cmd to work on windows with local karma. previous code was not working. no karma command (karma.cmd) is created on windows for global karma package. however there is one created in node_modules.bin\ for local karma module. which could be reasonable to reference in this test.bat.,neutral
angular/angular-phonecat,karma,2014-03-31T13:46:17Z,you can now use `npm test` to test on all os.,neutral
angular/angular-phonecat,karma,2014-03-31T13:46:41Z,now use `npm test` to run the unit tests.,neutral
jdan/cleaver,jshint,2013-12-05T17:27:02Z,i'm not maintainer. but i love your fixes.if you provided jshint error corrections. can i ask you to add `.jshintrc` file and configured grunt task to prevent these errors in future?,negative
jdan/cleaver,jshint,2013-12-06T06:06:17Z,no need for a grunt task. just have an npm command to run jshint :),neutral
cloudant/nodejs-cloudant,eslint,2017-07-05T14:32:22Z,add eslint. add eslint.,neutral
cloudant/nodejs-cloudant,eslint,2017-07-05T14:52:34Z,.,neutral
cloudant/nodejs-cloudant,eslint,2017-07-07T14:25:44Z,fix jenkins tests. some quick and dirty fixes to get the jenkins tests passing.i hope to pretty this up a bit with the forthcoming multiple plugin & iam auth work.## what's changed?- use a different test database name for each `describe` block in `api.js`.- add `before` & `after` hooks in `plugin.js` to correctly setup test environment.- skip mock-only tests.- apply `eslint --fix`.,negative
velesin/jasmine-jquery,jasmine,2013-08-21T06:00:09Z,added syntatic sugar to satisfy the least extreme jslint flags. these changes allow jasmine-jquery to be used in testing environments (like mine) that use jslint as a component of testing. while it's likely that jasmine-jquery was in no danger of automatic semicolon insertion foibles. it's probably better to do our own semicolon insertion. with the ever increasing number of things that speak/parse/transmorgify javascript. it's only a matter of time before one of 'em gets funny with its own flavor of asi.,neutral
velesin/jasmine-jquery,jasmine,2013-09-01T03:34:54Z,djforth is this still an issue?,neutral
velesin/jasmine-jquery,jasmine,2013-09-02T01:36:48Z,support zepto. :warning: not ready to merge. see failing tests by running `grunt jasmine:zepto`,negative
velesin/jasmine-jquery,jasmine,2013-09-02T02:10:18Z,this should be added in jasmine not this lib,neutral
velesin/jasmine-jquery,jasmine,2013-09-02T21:31:56Z,support zepto. :warning: not ready to merge. see the failing tests by running `grunt jasmine:zepto`,negative
velesin/jasmine-jquery,jasmine,2013-09-02T21:36:22Z,support zepto. :warning: not ready to merge. see the failing tests by running `grunt jasmine:zepto`.,negative
velesin/jasmine-jquery,jasmine,2013-09-03T13:27:10Z,ok. i'll post it in the jasmine library. thanks for looking at it.,positive
brantwills/Angular-Paging,karma,2015-08-10T12:55:40Z,how do you launch the tests?. hi.i tryed to launch karma tests with `karma start test/karma.conf.js`. is this the good way to do it?,neutral
brantwills/Angular-Paging,karma,2015-08-10T15:28:43Z,well. if you don't mind. i can add a `package.json` file that can embed all required dependencies for tests. test could also be run with npm with `npm test` command. i can add `karma-jasmine-html-reporter` for a better reading.,neutral
brantwills/Angular-Paging,karma,2015-08-10T16:21:56Z,with some `npm` stuff and `grunt tasks` we can try to do something similar. but i'm not an expert too.about tests. i'll make some changes on a forked branch to let you see how i've made it running here. up to you to merge the pull request ;),neutral
tomdale/ember-cli-addon-tests,mocha,2016-12-20T09:48:00Z,hi san650. some time ago i added the support for the addon's default blueprint. maybe i missed something there. will have a look! in the meantime you may want to run your tests with setting the debug environment var to "ember-cli-addon-tests" like this:    debug=ember-cli-addon-tests mocha --recursive test/ this will give you some detailed debug messages about what is happening...,positive
gionkunz/chartist-js,jasmine,2015-01-15T00:39:01Z,only remove chartist svg on createsvg. this is a slightly different take on #142gionkunz i tried the approach you mentioned with `container.__chartist__.svg` but couldn't get it to work. when i was running tests for `chartist.createsvg`. `container.__chartist__` was undefined.what this does is append the classname that is passed to `createsvg` to the `queryselector` for locating the svg element. that way the container may contain other `svg` elements as direct child or children of other nodes.i added a test for this which required i create a new spec; `spec-core`. i added jquery to the jasmine config to make creating and finding dom elements easier in the specs.i noticed that `jasmine-fixture` is included in the dependencies. but i could not figure out how to include it in the test runner.,negative
gionkunz/chartist-js,jasmine,2015-01-15T08:34:56Z,tylergaw . thanks for your contribution! this is awesome! specially that you've included specs :+1: i'm still not 100% sure about this as it seems like a hack to use the css class of the svg in the query selector. consider that the current function call should remove the svg of a previous call. that could theoretically be called with a different class name.i'll pull your fork into a branch in my repo and we can work together from there to test this further.,positive
raszi/node-tmp,istanbul,2017-12-07T19:50:36Z,i have prepared an additional commit for you to review and which still requires some more work. this will include all coverage data collected from the child processes that we spawn during the testing process.we need to add a few // istanbul ignore else comments to the code. but otherwise this is looking good and test coverage is also rather good.for now. i set .istanbul.yml checks/global to 100% and did not let the build fail in case that it these goals have not been reached.additionally. there are still some tests missing. if you look into the generated html report.,negative
raszi/node-tmp,istanbul,2017-12-09T15:46:26Z,the coverage will now be gathered from child processes. too. this also works on windows. changes had to be made to test/child-process.js that now detects whether it is run under istanbul.the npm test script still needs some work. though.,neutral
videojs/video.js,standard,2016-07-19T20:11:52Z,question: how to bring a player back to `live` moment after pause?. hello.i'm working on non-standard feature for hls live playback.when a user clicks `pause` - a player stops buffering new data.but i need to bring user back to `live` moment (obviously `live` in terms of player. not clock time) by offering special custom button.i tried to approach this with `player.bufferedend()` and simply call `player.currenttime(player.bufferedend());`.unfortunately this approach resets player to 00:00 by unknown reason. also it does not really work. because as i mentioned above. after pause a player stops buffering and i don't know `the latest available time point` anymore in order to seek into live as close as possible.so my questions:- why player resets to 00:00 if i try to seek it into `bufferedend` point?- how to get `the latest time point`. which is the closest to live. so i can bring user back upon request after pause?thank you.,negative
videojs/video.js,standard,2016-07-25T18:23:36Z,i've definitely seen `play` and `timeupdate` and all the standard events working just fine. also. contrib-hls is basically a no-op on ios right now because we let the native hls implementation take over.if you provide a reduced test case we could take a look. going to close this issue in the meanwhile.,positive
videojs/video.js,standard,2016-07-28T19:36:30Z,i merged all the disparate `vjsstandard-*` branches into this one.,neutral
videojs/video.js,standard,2016-08-01T16:03:22Z,we are treating this as the "master" branch for standardization efforts.,neutral
videojs/video.js,standard,2016-08-03T19:37:30Z,the standard dom methods should work fine. for example. `player.el().appendchild(test)` would make `test` the last element inside the player.,neutral
videojs/video.js,standard,2016-08-08T15:56:54Z,i think this needs to be brought up to date with `master` because automated linting via videojs-standard has been added there.,neutral
videojs/video.js,standard,2016-08-08T22:25:23Z,gkatsev i temporarily removed `vjsstandard` and rebased master.,negative
videojs/video.js,sauce,2014-04-15T18:17:27Z,hopefully we can get the sauce_connect issues i've been seeing ironed out in the hls repo and then we can run the unit tests against sauce labs in real browsers which will be a good step towards this since right now the unit tests just run in phantom with a "fake media tech".,positive
videojs/video.js,sauce,2014-05-05T17:42:53Z,is there a way the sauce labs tests could be run from local?,neutral
videojs/video.js,sauce,2014-05-05T17:47:23Z,if you export the username and access key as env vars `sauce_username`. and `sauce_access_key` and run `sauce_connect_setup` script. you could connect to saucelabs from local.if you want. i could try and see how to make this easier. like adding a `test:localsauce` task.,neutral
videojs/video.js,karma,2013-08-30T13:43:12Z,changes for karma integration. files and config for integration with karma for in-browser testing,neutral
videojs/video.js,karma,2013-08-30T13:45:08Z,closing this pull request.  something went wrong. and there are way too many files in it.  will re-submit after i clean it up.,negative
fergiemcdowall/search-index,standard,2016-10-09T18:53:14Z,invalid non-string/buffer chunk. in the documentation. to add documents via native javascript. you have the following:``` javascriptconst readable = require('stream').readableconst s = new readable()s.push({  id: '3'.  body: 'this doc has a great body'})```which throws a `typeerror: invalid non-string/buffer chunk`. upon reading the node stream documentation. it states that a readable stream can only accept a string or buffer. so this example makes no sense at all.so how can i add standard js objects to the index?what was the motive behind moving to a streamable api? it adds so much more complexity considering you can no longer use promises on any of the search-index methods.,negative
fergiemcdowall/search-index,mocha,2015-06-15T10:23:40Z,move test framework to mocha. the jasmine tests are begining to creak a bit. and are running into a lot of basic problems that dont seem to be easily resolvablepersonally i prefer mocha for testing npm modules. so i vote for moving the whole test suite over to mocha,negative
fergiemcdowall/search-index,uglify,2016-03-22T09:12:27Z,fergiemcdowall 1) it is alreasy minified by `uglifyify`. i don't believe that `minifyify` will do better.2) yes. i need only searching. i'll try to follow your advice and write here about my progress.,neutral
fergiemcdowall/search-index,uglify,2016-03-22T09:14:39Z,yes. i see now that `uglifyify`also minifies: "a browserify transform which minifies your code using uglifyjs2".,neutral
fergiemcdowall/search-index,uglify,2016-04-06T09:27:09Z,still lots of ways to make it smaller. like for example `object.assign` instead of `_.defaults`. and browserify transform magic with uglifyify,neutral
opentable/hobknob,sauce,2014-11-04T09:47:42Z,couple of changes to get sauce labs working,neutral
Medium/pbnj,eslint,2015-10-08T16:47:54Z,add eslint to pbnj and other small cleanups. hello nicks. please review the following commits i made in branch 'nick-cleanup'.c6610ff88437aa42522c2fc14a1f077fa9f3eaf6 (2015-10-08 09:47:35 -0700)add eslint to pbnj and other small cleanupsr=nicksmanual testing=not manually tested,neutral
danigb/soundfont-player,uglify,2016-04-23T05:48:40Z,adds mocha. browserify. and uglify as dev deps in the package.json. mocha. browserify. and uglify seem to all be used for development. this change just adds these packages to the `package.json` as dev dependencies instead of assuming they are globally installed.,neutral
jerairrest/react-chartjs-2,mocha,2016-12-07T01:44:40Z,can you pull latest master into this? is it just the fact travisci is failing that this is still pending?,negative
jerairrest/react-chartjs-2,mocha,2016-12-07T13:01:19Z,hey jerairrest .yeh i'll rebase master asap. tests are failing due to some sort of misconfiguration on ci.however those are working quite nice locally...need to figure out why the heck it's not working as it's supposed to.i hope to get onto this over weekend.cheers.,positive
jerairrest/react-chartjs-2,mocha,2016-12-07T23:14:43Z,hey jerairrest .if you have time these days i would appreciate if you could try this branch out a bit.i have rebased master.cheers.goran,positive
jerairrest/react-chartjs-2,mocha,2016-12-08T02:25:17Z,will do!,neutral
jerairrest/react-chartjs-2,mocha,2016-12-08T04:06:03Z,everything is looking good to me. i'm going to do a little bit more testing but for now,negative
jerairrest/react-chartjs-2,mocha,2016-12-08T21:26:31Z,i'm going to merge this in jerairrest,neutral
0xfe/vexflow,eslint,2016-06-18T14:33:58Z,my ideal `.eslintrc.json` would look something like this:``` json{  "extends": "airbnb".  "rules": {    "func-names": [0].    "max-len": [2. 80].    "new-cap": [0].    "no-case-declarations": [2].    "no-confusing-arrow": [0].    "no-else-return": [0].    "no-multi-spaces": [0].    "no-param-reassign": [0].    "no-shadow": [0].    "no-use-before-define": [0].    "prefer-template": [0].    "space-before-function-paren": [2. "never"].    "strict": [2. "global"]  }}```,neutral
0xfe/vexflow,eslint,2016-06-19T12:28:57Z,thanks aaron. let's leave `category` static and use a static getter to reach it. they're used by other static methods within modifiers and it would get messy turning them into instance variables.looks like there are two parts to this: first is getting the new syntax in. then getting cyril's eslint stuff. here's how i propose we do this:pr1: aaron sends in new build rules and syntax for four files: accidental. stavenote. formatter. modifiercontext. let's try to get consensus for that subset and merge.pr2: cyril sends in eslint rules applied to the same files. and we'll try to work through that.after we agree on everything. lets migrate the rest of the files.thoughts?,neutral
0xfe/vexflow,eslint,2016-06-21T20:20:03Z,use eslint: accidental. formatter. stavenote. and modifiercontext. this is a wip. but i figured i'd open a pr if anyone wants to comment as i go.- [x] accidental.js- [x] modifiercontext.js- [x] stavenote.js- [x] formatter.js- [x] add eslint grunt task,positive
0xfe/vexflow,eslint,2016-06-21T21:27:23Z,a lot of this looks really good. can't tell how much of this is machine translated. and how much you're doing by hand.,neutral
0xfe/vexflow,eslint,2016-06-21T21:30:08Z,everything after and including `ab4a032` is done by hand.,neutral
0xfe/vexflow,eslint,2016-06-22T23:21:15Z,ok well. getting these files into a decent state is taking longer than i thought. i would suggest. when these 4 files are complete and agreed upon. that we run `lebab` (for arrow functions. let/const. shorthand properties) and `eslint --fix` on the entire codebase. that should be pretty safe. but the code will require a lot of manual edits and minor refactorings to get into as good of shape (relatively speaking) as the one's i'll be doing in this pr.,positive
0xfe/vexflow,eslint,2016-06-22T23:27:20Z,any ideas on how we would migrate? one option would be to use both jshint and eslint. keeping a list of files that can be used with eslint and the remaining files use jshint. or we could disable lint errors from failing the build until we've run through the entire codebase.,neutral
0xfe/vexflow,eslint,2016-06-22T23:42:04Z,maybe start a wiki on instructions on running `lebab` and `eslint` and maybe some common gotchas or other hints to help migrate. and we can split the work. also. we don't have to go to the level of detail that you're going into right now (which is great. btw). we can improve it incrementally.so. send a pr with what you have now (with passing build and tests). and we'll hand maintain a list of files for eslint. between you. aaronmars (if he's interested). and me. even if we do 1-2 files a day each. we could have it all done in a week probably and get rid of jshint.,positive
0xfe/vexflow,eslint,2016-06-22T23:57:31Z,great. thanks aaron. also paging mscuthbert and gristow incase they're interested :-),positive
0xfe/vexflow,eslint,2016-06-23T14:34:19Z,oh. i'm interested :-)  my experience from switching lint systems on a large project about two years ago would be to just make a big leap and switch the lint to eslint immediately. and get that in as a pr with an extremely minimal config setting that maybe just flags one thing. so we know it's working.  and get the documentation up to date to match the reality of how things are going.  then make successive pull requests that each enable one or two new settings and fix all the errors that come with them.the drawback is that there'll be a short-term period where our lint situation is worse than before. since we're not running tests that are even as stringent as what we had before.  if this repository were github.com/nasa/mars-rover or jarvis/artificial-heart. then that'd be a problem. but given that the stakes of the possibility of a global variable leaking or a line being too long are...not that high. it think the risk is worth saving the time.,negative
0xfe/vexflow,eslint,2016-06-23T14:59:58Z,oh yes;  happy to do anything to deprecate raphael.  :-),positive
0xfe/vexflow,eslint,2016-06-24T18:21:33Z,wow. lots going on here. thanks. let me go through everything today.,positive
0xfe/vexflow,eslint,2016-06-27T15:09:41Z,ok i'll take a look at that.,neutral
0xfe/vexflow,eslint,2016-06-27T15:57:51Z,good to go!,positive
0xfe/vexflow,eslint,2016-06-29T21:04:05Z,wait. i think i may have screwed up here. brb.,neutral
0xfe/vexflow,eslint,2016-06-29T21:08:07Z,yep. silly me just assumed that the regression tests would kick of a rebuild before running. everything looks great. merging!,positive
0xfe/vexflow,eslint,2016-06-29T21:40:28Z,run automatic transforms on entire codebase. results of running `lebab` safe transforms and `eslint --fix`the basic summary of the transforms:- var -> const/let- anonymous functions -> arrow functions- shorthand object properties- minor spacing tweaks- some indentation fixes- double quotes -> single quotes- trailing commas,neutral
0xfe/vexflow,eslint,2016-06-29T22:00:03Z,provided the build passes and the regression tests pass without any changes. i think we can confidently merge this set of automatic changes at once.,positive
0xfe/vexflow,eslint,2016-06-29T22:05:34Z,thanks. all tests pass. and code looks way more consistent. merging.,positive
0xfe/vexflow,eslint,2016-06-29T22:12:43Z,edit: ok.  looks like we can do it with master then!so. am i reading this right that i can do this?- claim a few files- checkout from silverwolf's `eslint-all` branch- fix eslint errors- send a pr to the branch above,negative
0xfe/vexflow,eslint,2016-06-29T22:44:28Z,lint: annotation. articulation. barnote. beam. bend. fix eslint errors for files listed in title.,negative
0xfe/vexflow,eslint,2016-06-30T16:51:06Z,looks good! thanks! merging.,positive
0xfe/vexflow,eslint,2016-07-05T14:35:48Z,which command and which package is? which software?,neutral
0xfe/vexflow,eslint,2016-07-06T20:36:18Z,why don't use gulp?,neutral
0xfe/vexflow,eslint,2016-07-06T23:24:32Z,how is gulp useful? gulp is a build tool. not an ast transformer.,positive
0xfe/vexflow,eslint,2016-07-08T18:32:02Z,gulp instead grunt.,neutral
0xfe/vexflow,eslint,2016-07-09T08:18:31Z,given that vexflow's build steps are very simple and common. i don't see how using gulp would provide any advantage.,neutral
0xfe/vexflow,eslint,2016-07-09T15:54:55Z,finish fixing eslint problems. mainly just checking to see if the regression tests pass. since this is so large. i'll try chunking it up into multiple prs if it passes.,negative
0xfe/vexflow,eslint,2016-07-09T17:29:03Z,hmmm for some reason the build isn't even starting.,neutral
0xfe/vexflow,eslint,2016-07-10T10:31:39Z,ah. success!,positive
prettier/prettier,codecov,2017-07-16T09:46:13Z,yeahhh.... this is using codecov which spams like crazy. i don't think that it's worth it.,negative
prettier/prettier,eslint,2017-04-19T06:13:54Z,aaronjensen yeah. i'm using neoformat with prettier_d to speed things up a bit.now that i think about it. prettier_d might easily be replaced in this context by a combination of eslint_d. eslint-plugin-prettier. and eslint-config-prettier.,neutral
prettier/prettier,eslint,2017-04-23T12:07:59Z,same here.  the biggest hold up for us is this rule `arrow-parens`.  quite a few people use airbnb styleguide and lining up most stuff with that project would be awesome.  i've tried prettier-eslint but the performance of eslint --fix is not that good.,positive
prettier/prettier,eslint,2017-04-26T11:51:10Z,thank you azz for all of your work on this! i am getting back to full strength and will be able to help out with this effort once again (hopefully from next week).thank you for summarising the ast issues you encountered as part of this. i will make sure we come up with solutions for them in `typescript-eslint-parser`.,positive
prettier/prettier,eslint,2017-04-28T01:52:29Z,only add parenthesis on ternaries inside of arrow functions if doesn't break. this was added in order to follow some eslint rule but it's only confusing when it doesn't break. when it breaks the indentation makes it clear what is happening and you don't need parenthesis.fixes #1379,negative
prettier/prettier,eslint,2017-04-28T17:14:49Z,outside of the eslint rule. looks like the output is not ideal. we should figure out a way to make it better.,neutral
prettier/prettier,eslint,2017-04-30T13:05:21Z,add supertype tests and add tsabstractclassproperty. thanks for the fix on the parser side. soda0289 (eslint/typescript-eslint-parser#234)* super type fix: eslint/typescript-eslint-parser#242#1306. #1422,positive
prettier/prettier,eslint,2017-05-01T00:41:45Z,yay. thanks!do you have a sense of how close we are to being complete enough so that most typescript programs are able to be printed?,neutral
prettier/prettier,eslint,2017-05-01T01:12:37Z,vjeux interfaces. modules. and enums are still missing i think. once those are done we should be printing _most_ of the syntax. then we can copy across the entire test suite from the typescript repo. see if any parse errors occur. there will likely be a number of bugs due to the (frankly _insane_) amount of syntax that typescript has. on top of an already syntax-heavy language.,neutral
prettier/prettier,eslint,2017-05-01T01:18:24Z,thanks. sounds like a plan :)and yeah. the amount of syntax of js + es6 + flow + jsx + typescript is crazy :p,positive
prettier/prettier,eslint,2017-05-01T11:50:53Z,yeah. i keep stumbling into things as well `declare keyword`. `module block`. `enum member`...list goes on :smile:,positive
prettier/prettier,eslint,2017-05-01T12:51:52Z,jameshenry > please could you clarify what you mean by:>> i have a problem parsing things in a module declarationsure. i was expecting the `classdeclaration` to either have a `modifiers` array containing keywords like the `tsmoduledeclaration` has or (since `classdeclaration` is an estree node so changing it is out of question) that the `tsnamespaceexportdeclaration` is just called `tsexportdeclaration` since it contains a class not a namespace (although the differences between `module`. `namespace` and `class` are arguably subtle).i wasn't trying to propose changing `typescript-eslint-parser` to conform to the typescript ast. sorry if that came across this way.maybe a class creates a `namespace` and thus the naming. it just confused me a little and i wanted to get the input of someone having a little bit more knowledge about the estree and typescript ast.,negative
prettier/prettier,eslint,2017-05-01T13:36:43Z,> vjeux interfaces. modules. and enums are still missing i think. all in #1459 now. there gonna be a lot of warts since i skipped over pretty much all `modifiers` etc. but it should print. i'll try rerunning this over the typescript test suite.,positive
prettier/prettier,eslint,2017-05-01T19:36:23Z,i hate the idea of options in the formatter but i wish this lined up more with airbnb styleguide.  again eslint --fix does solve this but the performance is really bad.,negative
prettier/prettier,eslint,2017-05-03T00:26:14Z,there are two important considerations that aren't being discussed that i want to ensure get considered as part of this proposal:- not all javascript projects use a `package.json`- if you want to share configurations. it is much easier to do so if you're passing around a prettier-specific file (ie. `.prettierrc`) than sharing a `package.json` that might have other project-specific stuff in it.for those reasons (plus the ones already mentioned) i'd petition to have configuration in a dedicated file rather than inside the `package.json`.i believe the problem of finding and caching the appropriate config is a problem that's already been solved by projects like `eslint` and `stylelint` and should be easily transferrable to `prettier`.,negative
prettier/prettier,eslint,2017-05-04T17:57:43Z,working on `value undefined is not a valid document` now. `typescript-eslint-parser` does not add the `instanceof` as an operator to `logicalexpression`.,negative
prettier/prettier,eslint,2017-05-04T18:05:40Z,> typescript-eslint-parser does not add the instanceof as an operator to logicalexpressionsounds like a bug you should file (or pr) over there.,neutral
prettier/prettier,eslint,2017-05-05T14:56:30Z,sorry. i'm using prettier-eslint and an eslint rule was doing this.,negative
prettier/prettier,eslint,2017-05-05T14:58:03Z,kirkstrobeck i made an update where```jsa => (a ? 'foo' : 'bar')```keeps its parenthesis but when it is expanded```jsa =>  a    ?  'foo'    : 'bar'```doesn't have them. the indentation makes it clear that it is an arrow function and not a comparison. but the eslint rule triggers anyway. erroneously in my opinion.,negative
prettier/prettier,eslint,2017-05-05T15:02:41Z,good to know. unfortunately. i’m just a state-appointed mediator and would like to get you and `eslint` to the table to hash things out,neutral
prettier/prettier,eslint,2017-05-06T16:25:33Z,update on `error: comment "*type" was not printed. please report this error!`this happens because comment cannot be attached to `typeparameter` node as a leading comment. because `typescript-eslint-parser` incorrectly calculates location of such nodes by including leading space. including comments. so that such comments are found to be enclosed by typeparameter node.issue filed eslint/typescript-eslint-parser#260pr created eslint/typescript-eslint-parser#259,negative
prettier/prettier,eslint,2017-05-08T20:02:51Z,i started integrating `eslint-parser-typescript`'s master branch and fixing what it breaks. just so you know.,neutral
prettier/prettier,eslint,2017-05-09T03:53:32Z,should we raise a bug on typescript-eslint-parser?,neutral
prettier/prettier,eslint,2017-05-09T07:07:40Z,josephfrazier very nice! i think it'll alleviate some pains around vim.still. to update on my set up: there's still no polite way to use prettier on vim (without thrashing cpu and lagging formats). looks like i can't use eslint for linting such as unused variables. etc.. and have prettier format code at the same time. so if i use `standard` rules for the former and prettier for the latter. it wouldn't work for some reason. i've tried all this with `prettier_d` and at some stage with `eslint_d`. i'll try again with your update. josephfrazier.,positive
prettier/prettier,eslint,2017-05-09T21:02:48Z,yeah... i briefly looked into getting `typescript-eslint-parser` to output directive information. but it seems like more trouble than it's worth at the moment. especially since ts support is a work-in-progress currently. maybe i'll open an issue for it. at least to have it on the record.,negative
prettier/prettier,eslint,2017-05-13T05:47:43Z,despairblue what's the status of the `typescript-eslint-parser` upgrade? noticed you merged a few prs. looks like most of the work is in #1601?i should be able to jump in over the next couple of days.,neutral
prettier/prettier,eslint,2017-05-15T10:01:56Z,i guess my real question is why prettier is 'fixing' code which is correct according to my eslint config. it seems (imho) there should at least be a way of disabling such 'fixes'...the code in this particular case is. one of many. relatively common conventions for js (used. for example. in large-scale projects like jquery. to name just one):```var assert = require('assert').  lookup = require('../lookup'); ```,positive
prettier/prettier,eslint,2017-05-15T10:42:08Z,the only thing that `prettier-eslint` does is to pipe the file after prettier through `eslint --fix`. it's not that prettier uses your eslint config. it seems that eslint can't autofix the variable declarations.,positive
prettier/prettier,eslint,2017-05-15T10:46:39Z,so is that note in the interface: 'that prettier-eslint uses the eslint-config to set your prettier settings' incorrect? or is this particular fix just one of the things from the eslint-config which does not apply to the prettier settings?,positive
docpad/docpad,standard,2014-05-07T17:42:20Z,use colors in `inspect`. - in `src/lib/util` (typically required as “`docpadutil`”): added a simple wrapper around the standard `util.inspect` function (with `{colors:true}` set by default)- changed calls to `util.inspect` to `docpadutil.inspect`now. when the user types `docpad info`. their config info is much more readable! ☺,negative
probot/stale,mocha,2018-01-05T02:51:50Z,get travis running & tests passing. noticed while helping tcbyrd out with #84 that `mocha` is the dependency in the tests. but `jest` was being used to run the tests.we can migrate to jest in a separate pr. but this should get the tests running on travis.,neutral
NodeRedis/node_redis,mocha,2015-07-24T13:45:37Z,this looks good to me! we'll have to reimplement it in the new mocha test suite that we're working on. but i don't see any reason why this shouldn't be merged in the interim.,neutral
NodeRedis/node_redis,mocha,2015-07-24T14:02:04Z,thats great erinspice! i'll be happy to help out with implementing this into the new test suite. as you can see it was not very many changes. the new test suite is in the `mocha-test-suite-no-grunt` branch right?i reverted the skip socket test as i found a reliable way to share the redis unix socket between two containers. so this change should be good to merge.,positive
NodeRedis/node_redis,mocha,2015-08-14T02:47:42Z,nice work with the mocha tests and removing grunt. one less thing to deal with. i've been a big fan of using npm as a build tool.,positive
sequelize/sequelize,jasmine,2013-03-05T17:06:29Z,i know i said that you should but the tests in spec. but i just relalized that there are no querygeneretor tests for buster. only jasmine - so just put your tests in spec-jasmine/{mysql.postgres}/query-generator.spec.js as you originally suggested. then i will look at migrating all the tests :),positive
sequelize/sequelize,mocha,2013-07-29T15:16:00Z,bengotow no problem man. just a little caution though we're making some internal improvements on a branch called "mocha" (as well as switching over to mocha+chai testing). we're pretty much 99% there actually. just need sdepold 's final say/check and we should be able to switch over to  travis with it.. anyway. it _may_ cause with that pr but i do plan on rebasing and updating that pr asap after the switch over :),positive
sequelize/sequelize,mocha,2013-08-12T14:24:05Z,tests run as currently user rather than postgres. trying to run the new mocha tests and it seems to insist on running as my current user. rather than as postgres with a local connection.,neutral
sequelize/sequelize,mocha,2013-08-12T14:26:29Z,will look into why that is. for the time being you can do `seq_user=postgres make pgsql` if it really makes a difference,neutral
sequelize/sequelize,mocha,2013-08-12T14:31:56Z,default for me works just fine as : `user postgres undefined sequelize_test`i just run "make pgsql". are you sure that you're not running as postgres by default?,negative
sequelize/sequelize,mocha,2013-08-12T14:37:13Z,seth-admittedly do you by any chance have a user environment variable set?,neutral
sequelize/sequelize,mocha,2013-08-12T14:41:50Z,yeah. unfortunately this is because brianc from node-postgres made the user environment take into affect (we technically speaking. can't go to a lower level than node-postgres obviously :p) i'll try to make a workaround.,positive
sequelize/sequelize,mocha,2013-08-12T15:01:41Z,alright dude. you should be good to go! :) just pull in the #master :),positive
sequelize/sequelize,eslint,2017-04-06T18:47:57Z,yeah. sorry. there were too many manual fixes required and i was bankrupt on time. it would still be nice if you could do it through a pr just for ci checks.,positive
sequelize/sequelize,eslint,2017-04-06T18:55:35Z,alright. ninja pr coming up.it's not going to "fit" into a single pr so we will have to live without lint for a day or two ;),neutral
sequelize/sequelize,eslint,2017-04-06T18:57:00Z,remove jshint + eslint --fix,neutral
sequelize/sequelize,codecov,2016-09-05T08:30:29Z,chore(ci): switch from coveralls to codecov,neutral
sequelize/sequelize,codecov,2016-09-05T08:35:36Z,you forgot the readme badge ;),neutral
sequelize/sequelize,codecov,2016-09-05T19:31:39Z,sweet mother of jebus. it works! thanks for the powershell help felixfbecker !,positive
sequelize/sequelize,codecov,2016-09-12T08:25:36Z,what about coverage? we should switch to codecov for v3 too,neutral
sequelize/sequelize,jshint,2016-01-17T11:06:43Z,that's some lazy evaluation by jshint since all those cases are inside function calls :p,neutral
sequelize/sequelize,jshint,2016-01-19T12:07:28Z,fix jshint errors,neutral
sequelize/sequelize,jshint,2016-01-21T08:28:32Z,i reran travis - there is jshint error,negative
sequelize/sequelize,jshint,2016-02-01T11:56:44Z,gintsgints is there a better way to discuss with you? your fork of sequelize needs some commits from the main repo for `jshint` issues.,neutral
james-proxy/james-browser-launcher,eslint,2016-08-07T08:43:40Z,add eslint. remove jshint/jscs. fix warnings,neutral
TryGhost/Ghost,sauce,2016-04-14T20:16:22Z,add browser testing via saucelabs. this enables saucelabs testing so that travis doesn't have to do browser testing.it allows us to run on ubuntu precise still. and enables a wider range of browser testing.,neutral
josephfrazier/prettier_d,eslint,2017-06-20T06:12:17Z,try add prettier-eslint support for prettier_d. use --useprettiereslint will try to use prettier-eslint lib to format instead of prettier.,positive
josephfrazier/prettier_d,eslint,2017-06-20T07:39:28Z,close for some issue,neutral
josephfrazier/prettier_d,eslint,2017-06-20T08:06:12Z,try to add support for `prettier-eslint` . see #3,neutral
josephfrazier/prettier_d,eslint,2017-06-22T01:47:09Z,him that way seems good. i will have a try.,positive
andreruffert/rangeslider.js,jshint,2014-09-24T11:22:37Z,no need for this anymore. #89 is another approach.,neutral
Leaflet/Leaflet.draw,karma,2016-03-06T23:35:17Z,this can be summarized to:```npm instalnpm install -g jakejake```npm install will install dev (jake. jshint. etc) `-g jake` will install jake globally. and jake defaults to use karma.documentation can be improved though.,neutral
ariatemplates/hashspace,sauce,2014-01-03T16:39:39Z,tested some more on sauce and there are other tests failing on ie8 as well...,negative
ariatemplates/hashspace,karma,2014-01-14T13:29:18Z,this finally landed as 9c1672706611c484421a0328385b3270ee30e02f!i've also added ability to run saucelabs tests from the local machine. just type: `grunt karma:sauce`,neutral
JedWatson/react-select,mocha,2015-06-10T01:35:15Z,it's amazing the things that end up in production! jokes aside. i'm in total agreement here. i can't speak for jedwatson or dcousens. but i would love to see a pr for this (especially before #227). i don't have any experience with jest. only karma+mocha+chai. tests are tests though – jedwatson / dcousens how do you want to proceed here?,positive
JedWatson/react-select,mocha,2015-06-11T13:34:29Z,thanks craigdallimore. this is brilliant. i really appreciate the work you put into providing example of both jest and mocha.my personal preference is leaning towards the jest pr. it is simple to follow and quite explicit. not that the mocha one is much less so... does anybody else have a specific preference or input before i merge one of them?,positive
JedWatson/react-select,coveralls,2015-08-13T06:42:25Z,you don't need to do `npm run coveralls` and `npm run unit`. `coveralls` runs the tests. and fails if the tests fail.,negative
JedWatson/react-select,coveralls,2015-08-13T06:46:07Z,bruderstein perhaps then `coveralls` is doing too much?i'd expect that target to run all the way even if the tests fail?no?if a test fails. that doesn't equate 0% or _failed_ coverage.,negative
nightwatchjs/nightwatch,jshint,2014-02-23T17:42:22Z,_*poke_any change this is being merged ? i'd really like to contribute here and there but all the _jshint-noise_ makes it pretty difficult to spot _real_ errors during development.regards~david,negative
nightwatchjs/nightwatch,jshint,2014-02-23T18:12:22Z,yes. just need some more time to fix all the jshint errors/warnings. i've already started the process.,neutral
nightwatchjs/nightwatch,jshint,2014-02-24T13:38:19Z,integrate jshint linting into travis build. this commit attempts to integrate linting via "jshint" into the "travis-ci" build process and introduces the following changes:- add a "jshint" entry to the "scripts" section of the "package.json"- update the ".travis.yml" to call "npm run-script jshint" before testsmaybe you want to give it a try.. regards~david,neutral
nightwatchjs/nightwatch,jshint,2014-02-24T13:45:16Z,ok cool. but first i'll have to fix the errors :).,positive
nightwatchjs/nightwatch,jshint,2014-02-24T19:59:20Z,> ok cool. but first i'll have to fix the errors :).i could also send a pr from davidlinse/nightwatch08d49ecde7feba367500312eda9f86f2fd0230c2 branch if it would help you in progress.. ?let me know.. ~david,positive
nightwatchjs/nightwatch,jshint,2014-02-24T20:58:01Z,yeah sure. btw i've already started to refactor the logger (made an external lib) and most of the commands.js. just so you know not to work on those.,neutral
nightwatchjs/nightwatch,jshint,2014-02-25T10:53:14Z,i've checked my branch and in fact updated `lib/logger.js` and `commands/waitforelementvisible.js` .. so does a pr still makes sense ?what about creating a separate branch one can contribute to ?~david,neutral
nightwatchjs/nightwatch,jshint,2014-02-28T16:15:07Z,sound good. i'll try to have a look this weekend.~david,neutral
nightwatchjs/nightwatch,mocha,2015-08-05T19:07:25Z,+1 to running nightwatch from mocha,neutral
nightwatchjs/nightwatch,mocha,2015-08-17T19:52:57Z,i am interested in this integration as well. we use mocha for all of our tests. even ones where we utilize gherkin (interpreted by yadda) to describe and drive behaviors. it would be fantastic to be able to interact with the nightwatch api from our extensive. existing test code rather than having to expand our tool chain for this one class of tests. also. mocha integrates very well with our local development environments as well as our ci set up. it would be far easier to leverage that than have to also beef up our ci setup and train developers on a new tool for a subset of tests.,positive
nightwatchjs/nightwatch,coveralls,2014-05-21T14:41:41Z,fix `npm run-script coveralls`. the coveralls script was throwing an error. due to **jscoverage** being unable to process non-javascript files contained within the nightwatch `lib` directory.the fix was to simply add the `--exclude *.ejs.*.json` flag to the invocation of **jscoverage**.,negative
nightwatchjs/nightwatch,coveralls,2014-05-21T14:55:39Z,that's interesting. i never had any issues with running jscoverage. if your trying to run the coveralls script it will fail. since you need to have a repo token present in your .coveralls.yml. i was planning to add it from travis but didn't get around to do it yet.,negative
nightwatchjs/nightwatch,coveralls,2014-05-21T16:28:02Z,yeah. but the repo token must be also passed somehow. doesn't it? that alone will fail without it.,negative
nightwatchjs/nightwatch,coveralls,2014-05-21T17:24:34Z,gotcha. i'm not super familiar with coveralls.io. but i will take a look later today. unless someone beats me to it :),positive
mashpie/i18n-node,mocha,2013-01-27T23:08:43Z,vows.js won't make it to release. but it's out now (will stick to expresso until rewritten tests for mocha.js),neutral
crypto-browserify/sha.js,standard,2015-05-21T06:28:51Z,use standard for formatting,neutral
crypto-browserify/sha.js,standard,2015-05-21T07:34:49Z,sure,neutral
buildo/react-components,eslint,2016-01-15T14:12:24Z,use buildo/eslint-config. ## requirementscurrent config of `eslint` is missing many useful rules (like `no-undef`...)## specslet's use `buildo/eslint-config` even if it's not complete yet,neutral
buildo/react-components,eslint,2016-01-15T14:59:56Z,#171: use buildo/eslint-config (closes #171). issue #171,neutral
buildo/react-components,eslint,2016-01-15T15:03:34Z,giogonzo i removed `/src/revenge` (i forgot to delete it in the past...) i checked on labonline and it's not depending on that folder so it's safe to remove it,positive
buildo/react-components,eslint,2016-01-21T13:37:34Z,standardize code. ## requirementscode on this repo should follow stricter rule so to avoid differences between components (ex: new frontends are not used to `react.createclass({})`)## sub-issues- [x] use es6 classes #207 - [x] use tcomb + tcomb-react for prop evaluation- [x] update buildo/eslint-config #205 - [x] import b-r-c components directly #213- [x] every folder should be in `kebab-case` #188 **[francescocioria]**## without issue- [ ] ~~add docs to every component~~- [ ] ~~each component should export its `props`~~- [ ] ~~sass files should follow our naming convention~~- [ ] ~~`style`. `classname`. `id` to every component~~,neutral
buildo/react-components,eslint,2016-01-21T13:39:46Z,update buildo/eslint-config. refer to #204,neutral
buildo/react-components,eslint,2016-01-21T14:00:28Z,#205: update buildo/eslint-config (closes #205). issue #205,neutral
buildo/react-components,eslint,2016-01-21T14:29:24Z,:fuelpump:,neutral
Dash-Industry-Forum/dash.js,jasmine,2014-12-18T09:49:41Z,correct mpdhelper.js name in gruntfile.js. the wrong name will result in task "jasmine:tests" failed:typeerror: 'undefined' is not an object (evaluating 'mpdhelper.getadaptationwithsegmenttemplate',neutral
Dash-Industry-Forum/dash.js,jasmine,2014-12-18T09:52:46Z,ping kozhinm .  please take a look.,neutral
Dash-Industry-Forum/dash.js,jasmine,2014-12-19T11:07:06Z,great! since your company is a member. you don't need to sign cla.,positive
FezVrasta/popper.js,karma,2017-01-07T19:29:10Z,make karma (and rollup) ignore the tooltip dist files. most likely we'll want to change the files structure or move tooltip.js to its own repository in the future.,neutral
reactjs/react-autocomplete,eslint,2016-07-19T14:06:17Z,cmtegner sprjr colleagues. i don't think that enormous dependencies from `rackt-cli` is good choice. `karma. webpack etc` are overhead for this tiny component imho.so i propose make build system using browserify```"lint": "eslint **.js"."build": "browserify entry.js"."test": "jest"."prepublish": "npm run build".    "prebuild": "npm run test"."pretest": "npm run lint"```looks so easy and understandable for contributor. we won't have problems with updating webpack to v2 etc and no enormous dependencies.,negative
linkedin/dustjs,sauce,2015-05-07T23:05:03Z,add saucelabs integration. closes #544,neutral
jupyter-widgets/ipywidgets,karma,2015-12-13T06:09:21Z,so one of the downsides to the new karma based tests as-is. is that i haven't written support for round trip tests.  i think once i do. it will be really important to write tests for these kinds of things. because they are small behaviors that are really easy to get wrong!  thanks for fixing this!,positive
ractivejs/ractive-adaptors-backbone,mocha,2014-10-03T06:52:03Z,now that we're using mocha. we can do async tests:``` jsit("should work". function (done) {  model.on('change:message'. function (value) {    expect(value).to.eql('hi');    done();  });  model.set('message'. 'hi');});```can you see if you can update the tests where it fails?also. would you get the same benefit if you set `debounceinterval` to 0? hypothetically. if all the changes are done within the same process tick. deferring the processing to the next tick should be enough.,neutral
ractivejs/ractive-adaptors-backbone,mocha,2014-10-03T07:00:19Z,yes. i've googled for mocha async. we have to `ractive.observe` for test and `done()`. lots of rewriting.`debounceinterval=0` — great idea. looks promising. i'll check.,positive
ractivejs/ractive-adaptors-backbone,mocha,2014-10-03T07:35:43Z,oh no. i've said about `defer` as idea to replace your `wait` in test. `_.defer` more predictable. i thought it is some `mocha`s feature until i've seen definition in the end of file.maybe just rename it to `nexttick` and forget about `defer`)but inside main code they have huge difference. `defer` just runs all this 1500 handlers later. and `debounce` merges several sequential calls into one. this is the goal of this pr,negative
ractivejs/ractive-adaptors-backbone,uglify,2014-10-03T01:58:14Z,ditch grunt. grunt for a 180-line library may be overkill. since moving from qunit to mocha. the only functions grunt fulfills today is (1) jshint. and (2) uglifyjs compression.my suggestions:- include jshint testing as part of the test suite. i think this is great because any open prs will be tested against the test suite via travis. hence checking pr's against jshint as well. this can be done via `scripts: { test: "jshint ractive-adaptors-backbone.js && mocha" }` or mocha-jshint.- use `npm run prepublish` to minify the js file. the prepublish hook is the npm standard for invoking build steps. this is done by adding `{ scripts: { prepublish: "uglifyjs -m < index.js > index.out.js" } }` to package.json.- finally. remove dependency on grunt.,negative
pburtchaell/react-notification,eslint,2016-09-19T17:26:19Z,update es lint and editor config. - updated eslint config - added editorconfig for consistency across contributions and updated formatting on source files- added lint script to package.json- fixed linter issues with source files,neutral
pburtchaell/react-notification,eslint,2016-09-20T02:37:36Z,joeyfigaro thanks for the pr! i left some comments in my review.,positive
pburtchaell/react-notification,eslint,2016-09-20T13:46:26Z,pburtchaell thanks man - i'll have these changes taken care of today.,positive
pburtchaell/react-notification,eslint,2016-09-21T16:57:54Z,pburtchaell changes up for ya! check out the tests. i ended up disabling eslint on a couple lines due to its complaints.,neutral
pburtchaell/react-notification,eslint,2016-09-21T20:20:38Z,thanks. joeyfigaro. i'll check this out when i have some time this week.,positive
pburtchaell/react-notification,eslint,2016-09-26T14:11:48Z,berkeleytrue pburtchaell changes up for ya'll.,neutral
pburtchaell/react-notification,eslint,2016-09-27T13:34:05Z,berkeleytrue how's she lookin'?,neutral
pburtchaell/react-notification,eslint,2016-09-27T16:52:56Z,berkeleytrue thanks! more updates,positive
tejacques/crosstab,sauce,2015-03-08T02:44:06Z,investigate cross-platform testing. looking into ci.testling.com and saucelabs.com.,neutral
autoNumeric/autoNumeric,coveralls,2017-01-15T07:52:27Z,setup automated coverage tests. having a 100% code coverage is our goal.in order to manage that. we should setup an automated coverage test process.i'm looking at [coveralls]( right now.,negative
autoNumeric/autoNumeric,coveralls,2017-01-15T08:11:04Z,integration done.,neutral
angular/zone.js,jasmine,2016-11-23T19:22:04Z,oh yeah. i wasn't running inside jasmine. that could be it.,neutral
angular/zone.js,selenium,2017-03-24T01:26:06Z,mgiambalvo . thank you for the information. i will try to research more. but i am still stuck at the environment. my selenium can't work with firefox 50+.,positive
angular-fullstack/generator-angular-fullstack,karma,2014-07-02T22:14:51Z,that $injector error you're getting is because you need to remove ui.bootstrap from the dependencies in your `client/app/app.js`you also need to remove ui bootstrap from your karma.conf.js,neutral
angular-fullstack/generator-angular-fullstack,karma,2014-07-02T23:41:48Z,thanks for the quick responses everyone got it working now. incase anyone else has this problem the steps i took are below.bower uninstall angular-bootstrapbower uninstall bootstrapremove reference to bootstrap in bower.json. karma.conf.js and app.jsthis is a great project and am really excited to see how fast it is growing especially excited to see ui-router support. for some context about the original question. i think bootstrap is a great tool but not always the answer from a ui perspective. thats why i thought it was great as an option in previous builds. the first project i built with this stack i already had a scaffolding built for my app ui not using bootstrap so it was a lot easer to apply that ui to this "boilerplate". i think having it as an option would be great but it is easy enough to remove manually so no big deal just would be a nice to have. keep up the great work!!!!!,positive
angular-fullstack/generator-angular-fullstack,karma,2014-07-10T00:03:24Z,i did js. html. less. and ngrouter. i figured out why the test were failing. i had not included everything in the karma.conf file. and it was missing dependencies.now i get a different problem. "running "bowerinstall:target" (bowerinstall) taskwarning: cannot read property 'main' of undefined use --force to continue."any ideas?,negative
alexa-js/alexa-app,mocha,2016-04-22T20:37:14Z,hi mreinstein. thanks for the pull request. alexa-app is running with mocha and chai as the test stack. which means tap tests won't be supported. i agree adding comprehensive test coverage is a great idea and any contributions on improving coverage using mocha and chai would be a great addition. we will also be getting a travis integration set up soon. marking this as closed.,positive
cure53/DOMPurify,karma,2015-09-15T09:29:42Z,i have experience in karma testing via browserstack's selenium grid. they usually give away free slots for open source. any objections against travisci and browserstack? otherwise i'd just work on it in a fork and give you folks the chance to merge it back in.,negative
ilyabirman/Likely,eslint,2016-05-03T15:03:39Z,code style checker. seems it's time to add eslint to avoid comments about code style. let's try to add some rules based on the current code.,neutral
ilyabirman/Likely,eslint,2016-05-03T16:05:52Z,additionally. it’d be great to have an `.editorconfig` file to make ides follow our code style. feel free to add it if you want and have time to do :-),positive
ilyabirman/Likely,eslint,2016-05-03T16:10:42Z,yep. you can set me as assignee.,neutral
ilyabirman/Likely,eslint,2016-05-03T16:22:07Z,looks like i can assign only collaborators of the project. so no way :(,neutral
ilyabirman/Likely,eslint,2016-05-03T18:52:09Z,iamakulov check this out. if the codestyles suits i'll fix errors which eslint illuminated.,negative
gulpjs/undertaker,eslint,2015-10-23T17:54:43Z,explicit eslint usage. to bring inline with gulp repos.  use eslint-config-gulp and update code style,neutral
heroku/heroku-kafka-jsplugin,coveralls,2016-09-01T00:53:01Z,add code coverage via coveralls,neutral
heroku/heroku-kafka-jsplugin,coveralls,2016-09-01T01:53:15Z,my coveralls config does not seem to be complete (i did turn it on for this repo. but apparently not fully) and now i keep getting 500s from  . any idea what might be up dickeyxxx ?,neutral
heroku/heroku-kafka-jsplugin,coveralls,2016-09-01T15:37:35Z,woo it's workin'.,neutral
heroku/heroku-kafka-jsplugin,coveralls,2016-09-09T16:20:46Z,nifty,neutral
patternfly/patternfly,karma,2016-07-08T03:23:13Z,adds karma and jasmine travis ci testing. *introduces automated karma/jasmine testing for our compiled test pages*adds travis testing (for all branches/prs)*adds travis badge to readme*cherry-picks bleathem js src change #341,neutral
patternfly/patternfly,karma,2016-07-08T05:32:55Z,this looks great. i want to look through it more closely. but some initial feedback is that i feel the test src should be in a top level test folder. rather than in the src folder. this involves moving the contents of the current test folder into the dist folder.,positive
patternfly/patternfly,karma,2016-07-08T13:33:33Z,the code looks good. but wondering about the actual tests? this shows potential. but testing the chart for a legend of length 4 isn't valuable. imo. can the initial tests be enhanced before we decide to introduce all this infrastructure? i'm not sure we decided we wanted this?,positive
patternfly/patternfly,karma,2016-07-08T13:40:18Z,dlabrecq i can certainly add more tests (as we have several fixtures). wanted to kick start the conversation first ;),neutral
patternfly/patternfly,karma,2016-07-08T13:45:31Z,just wanted to see the tests you created be more useful. if we're not able to test anything valuable. then perhaps we don't need to introduce it?btw. can the directory structure stuff be done separate from this? i would be willing to merge brian's pr. but let's not do those mods here.,neutral
patternfly/patternfly,karma,2016-07-08T14:36:52Z,test infrastructure / useful tests is a chicken / egg problem.  it's importatn to get the test infrastructure in place. so then we can contribute tests. and solicit test contributions from the community.priley86 the folder structure you proposed in your comment looks great.i propose we keep this pr as-simple-as-possible as follows:- [x]  merge the pr moving the patternfly.js into the src dir- [ ] introduce a new pr to move the generated html test files into the dist folder- [ ] keep this pr focused to test infrastructure and basic tests. leaving additional test creation to subsequent prs,positive
patternfly/patternfly,karma,2016-07-08T15:00:28Z,bleathem sounds good to me,positive
patternfly/patternfly,karma,2016-07-08T15:17:16Z,bleathem sounds good to me. and this pr lgtm as well.,positive
patternfly/patternfly,karma,2016-07-08T15:32:37Z,i see that brian's changes were merged separately -- that's what i was looking for.,neutral
patternfly/patternfly,karma,2016-07-14T12:57:03Z,patternfly smoke tests. - introduce patternfly js libraries to karma- provide smoke test examples for running unit tests on patternfly test fixtures- removes any inline scripts from fixtures during karma testing. and sources karma scripts instead- adds grunt-karma- adds automated test examples for the following components:  - about modal  - accordion  - alerts  - area charts  - badges  - bar charts  - bootstrap combobox  - bootstrap datepicker  - bootstrap select  - bootstrap switch  - bootstrap treeview  - datatables,neutral
patternfly/patternfly,karma,2016-07-14T14:04:59Z,bleathem dtaylor113 dlabrecq jeff-phillips-18  would love any feedback,positive
Hacker0x01/react-datepicker,codecov,2016-01-09T15:04:53Z,looks like  can help us here. will see if i can set this up!,positive
Hacker0x01/react-datepicker,codecov,2016-01-11T09:16:19Z,add codecov reporting. this fixes #297,neutral
optimizely/nuclear-js,sauce,2015-05-15T21:50:33Z,fix sauce connect for travis builds,neutral
optimizely/nuclear-js,karma,2015-05-10T23:46:38Z,add saucelabs browser tests to travis-ci. enable automated browser testing on travis-ci- [ ] setup `karma-sauce-launcher`- [ ] add sauce tokens to the travis-ci environment- [x] add saucelabs testing badge to readme,neutral
optimizely/nuclear-js,coveralls,2015-05-10T21:15:30Z,add code coverage via istanbul and report on coveralls.io. - [x] refactor how registerstores work - get rid of silent option which was causing strange observation behavior when passed in as `true`- [x] add back `registerstore` method which was deprecated and put a `console.warn` with deprecation notice- [x] get test coverage to 100%- [x] add grunt script to run on ci to do coverage and send results to coveralls- [x] add coveralls coverage badge to readmebhamodi,positive
webpack/webpack,codacy,2017-02-23T20:57:56Z,feat(coverage): add codacy generation to scripts for travis. <!-- thanks for submitting a pull request! please provide enough information so that others can review your pull request. -->**what kind of change does this pr introduce?**build related analytics change<!-- e.g. a bugfix. feature. refactoring. build related change. etc… -->**did you add tests for your changes?**none needed<!-- note that we won't merge your changes if you don't add tests -->**if relevant. link to documentation update:**n/a<!-- link pr from webpack/webpack.js.org here. or n/a -->**summary**this adds codacy code coverage support. should just need to append and pipe coverage (have already added env var and token via travis)<!-- explain the **motivation** for making this change. what existing problem does the pull request solve? --><!-- try to link to an open issue for more information. -->**does this pr introduce a breaking change?**<!-- if this pr introduces a breaking change. please describe the impact and a migration path for existing applications. -->**other information**,positive
webpack/webpack,standard,2016-08-28T12:47:37Z,ah. i see now. the problem was that webpack doesn't know what to do with `require.tourl` given that's not standard. there's not much we can do about it here.you can try to get more ideas at stack overflow.,neutral
webpack/webpack,standard,2016-09-05T15:06:46Z,i assume it only affects the build configuration. this is currently not supported. but you can use standard tools to restart the process when files changed.,neutral
webpack/webpack,standard,2016-09-08T14:38:09Z,> bebraw you don't need to cover the entire configuration. covering just standard options would be a good start.the problem is also typos which misspell standard options like `modules:` vs `module:` — seen this. some way to report that would be great: `you don't have "module:" defined but there's "modules:". that might be it`.,negative
webpack/webpack,standard,2016-09-15T04:59:14Z,or maybe instead to empower better plugins for this. i have always been interested in the investigation into creating a new [tapable](github.com/webpack/tapable) instance for webpacks output system. this could allow features like this to be created through plugins. in addition could solidify and standardize across the board how plugins. maybe loaders hook up into a standard console output "template" or "instance".,positive
webpack/webpack,mocha,2013-01-30T10:19:31Z,cool! :icecream: i'll test it. our use-case was unit testing. in this case you usually don't have one single entry module. but a whole directory of tests. a test runner like mocha then just executes all modules within test.,positive
webpack/webpack,uglify,2018-01-03T18:58:16Z,> the problem caused by uglifycan you elaborate?,neutral
webpack/webpack,uglify,2018-01-17T15:58:22Z,that's exactly my problem. my full project (using the same webpack config) fails but without all the source code it works normally. i don't know how to figure out what about the project source code causes uglify to fail in production.,negative
webpack/webpack,uglify,2018-01-20T14:32:38Z,for me everything also works correctly with this plugin. i have defined env vars in a separate `env` variable and then have the node_env accordingly and its value is production as intended ```new webpack.defineplugin({      env: envvars.      'process.env.node_env': json.stringify('production')    })```and ```new uglifyjsplugin({      uglifyoptions: {        ie8: false      }.      parallel: true    })```,neutral
webpack/webpack,uglify,2018-01-23T22:19:35Z,outdated uglify plugin or stuck test?,neutral
webpack/webpack,uglify,2018-01-26T18:01:04Z,tschaub `serialize-javascript` uses uglify and compression plugin for cache ident. can you raise the minimum allocated memory? or you have many modules or memory leak,neutral
webpack/webpack,uglify,2018-01-26T20:54:27Z,tschaub also can you disable `uglify` plugin to ensure problem in plugin?,neutral
webpack/webpack,uglify,2018-01-26T21:01:12Z,evilebottnawi - i think disabling `uglify` will fix things.  before seeing your messages above. i modified `webpackoptionsdefaulter.js` with `cache: false` for uglify.  and the build succeeded (in 414090ms).  this is promising.i can reenable the cache and dump the `task.cachekey` in a bit (off to a meeting now...),negative
webpack/webpack,uglify,2018-01-26T21:17:21Z,i'd like to do the same. as the tree shaking cleanup is only done by the uglify-webpack-plugin. is there a way to let the build in dev mode. manually add the ugluify plugin and configure it to only do dead code cleanup (no mangling. no compress) ?i search how uglify is configured in prod mode (or at least with the --optimize-minify option) and it seams to be all the default options only source-map is updated.,neutral
frontpressorg/frontpress,codacy,2016-11-29T00:30:01Z,insere badge de coverage no readme. hey jota teles.criei uma organização no codacy pro frontpress e configurei o travis pra mandar o relatório pra lá. agora coloquei o badge de cobertura no readme. pra nos envergonhar =(,positive
stealjs/steal,sauce,2016-12-06T23:27:11Z,set up saucelabs. this sets up saucelabs with our testing matrix. ie9. which works in a vm. is currently excluded until i investigate why it doesn't work in theirs.,neutral
stealjs/steal,sauce,2016-12-08T18:48:59Z,add microsoft edge to saucelabs testing,neutral
brianc/node-sql,jshint,2016-01-05T10:03:10Z,brianc. i noticed you use jshint for this project. this is a set of commits for issues which jshint is configured to respond to.i suppose this pr is optional and a bit nitpicky. if you don't want to merge i understand. =),neutral
acuminous/yadda,mocha,2015-06-15T17:58:02Z,probably worth a better explanation...the simplest way to invoke yadda is with an array of strings. each string is a 'step' and the array is a 'scenario. after the scenario has executed yadda will return if the step/scenario is sync. or callback if it's async. scenario and step events will be emitted. so you can listen for lifecycle events as the scenario executes.what you do to get the array of strings is up to you. you can parse them from files. or html. from a rest response. etc. etc. etcyadda doesn't offer any output - that's also up to you. typically is left to the test runner. e.g. when using mocha if 'done' is called with no errors then the test is successful and mocha handles the output,positive
acuminous/yadda,mocha,2015-06-16T11:38:32Z,would you in general recommend wrapping yadda inside something like qunit or mocha? or is "raw yadda"  an equally valid approach?,neutral
acuminous/yadda,mocha,2015-06-28T06:08:17Z,i added an example for creating reusable fragments. it could be made nicer by using a template loaded from the file system. rather than creating the scenario in code.also because the fragment isn't run directly from mocha. you only get one line of output for the entire scenario rather than the individual steps. i.e.```  reusable scenario example    100 green bottles      ✓ sing 100 green bottles are standing on the wall     100 blue bottles      ✓ sing 100 blue bottles are standing on the wall ```,neutral
acuminous/yadda,karma,2016-03-11T02:25:46Z,hmm. the code is not perfect. is there a way to modify it?the `fs.workingdirectory` and the `process.cwd()` is currently `"."` instead of `"/"`. otherwise it works with browserify.i don't know whether it works with webpack. it requires a `path` module and creates an `fs` shim. browserify has a built-in emulated `path` module. i don't know whether webpack supports `path` by default. we need some webpack users to do that part.the `npm install phantomjs` added `phantomjs` and `phantomjs-prebuilt` as dependency. i guess we don't need both of them.the `filesystemtests` contains `/* jslint node: false */`. i don't use jslint. actually the fs test can run by node as well only the `karma-*` files are not for node usage.,negative
prebid/Prebid.js,standard,2017-11-08T21:40:04Z,ok i'll break them up,neutral
prebid/Prebid.js,standard,2017-11-09T16:55:48Z,dbemiller this is for a new *server to server* adapter. not a regular bid adapter.how does it not conform to the new standards? as far as i can tell there is only one other server to server adapter. and that is for prebid. this adapter is compatible with the same style of input.,neutral
prebid/Prebid.js,standard,2017-11-09T17:00:56Z,the last pr was closed because i do not think it was realized that this is a server to server adapter not a standard bid adapter.,neutral
prebid/Prebid.js,standard,2017-11-09T17:06:07Z,jcswart yes... the prebid-server one is out of compliance too. snapwich is working on updating it right now.i definitely didn't realize that this was an s2s adapter. i'm not sure whether that changes anything. with regards to the standards... but will run it by the team/leadership.,negative
melonjs/melonJS,jasmine,2014-03-24T13:25:58Z,okay. that works manually . i guess we need a more automated way. i will try to make the grunt-contrib-jasmine work.,neutral
melonjs/melonJS,jasmine,2014-03-25T03:20:38Z,we should probably change back the test in the corresponding jasmine test unit .btw. as part of ticket #430. was the john resig inheritance test unit also updated with jay inheritance ? :):):),positive
melonjs/melonJS,jasmine,2014-03-25T06:53:44Z,i also want to add a `jshint:test` task to run lint over the test spec files. just to ensure the test environment is sane. ;) the `test` registered task would then include `jshint:test` before `jasmine`. et voilà!,neutral
melonjs/melonJS,jasmine,2014-03-27T02:43:41Z,travis executes the `npm test` command by default. which calls the `grunt test` task. which calls `grunt lint` and `grunt jasmine` hehe,negative
CenterForOpenScience/ember-osf,coveralls,2017-02-06T14:46:24Z,activated on coveralls.io!i've  been noticing some weirdness on my personal repo (demo-ember-osf). so we'll monitor this in case further tweaks are needed.,negative
CenterForOpenScience/ember-osf,coveralls,2017-02-06T15:19:55Z,merge conflicts addressed.oh. and coveralls is reporting!,neutral
1602/compound,mocha,2013-03-17T15:55:57Z,rewrote helpers tests for mocha,neutral
1602/compound,mocha,2013-03-17T16:01:23Z,rewrote utils tests for mocha,neutral
1602/compound,mocha,2013-03-21T09:22:43Z,saschagehlich moved tests to mocha. should work well now.,neutral
azmenak/react-stripe-checkout,mocha,2016-08-06T01:28:45Z,add testing. test: add minimum viable testing framework - include mocha and enzyme for unit tests- add nyc for code coverage- add tests to ensure token and key are passed to stripe,neutral
sasstools/sass-lint,eslint,2015-09-06T12:53:46Z,eslint. currently `eslint` is run as part of mocha using the `test/lint.js`. this is very counter intuitive. why not run `eslint` on all files and avoid maintaining a `test/lint.js` file?,negative
ipfs/js-ipfs-api,mocha,2015-05-09T01:31:23Z,as for testing frameworks. i beleive travisperson prefers mocha,neutral
san650/ember-cli-page-object,mocha,2016-12-14T20:25:43Z,i really like this idea. i would like to go in this direction. can we do it for qunit first? we could experiment by doing everything for qunit first. we could support mocha in the future.please. start working on this and let us know if you have any question. you can open a workinprogress pull request if you want early feedback.,positive
san650/ember-cli-page-object,mocha,2016-12-15T08:33:10Z,great. will try to put something (at least a quick spike) together before xmas if time allows! :)as a mocha user myself. will try to bring this also to the mocha world asap! ;),positive
jquense/teaspoon,karma,2015-12-18T12:58:57Z,hi there. i'd like to keep the environment flexible and not force someone to to use jsdom or whatever. in my own case i generally use jsdom with karma which is mostly the same as what you've figured out above. i do need to improve the docs with some testing env stuff and this is a great addition to that. if you don;t mind me using this :),positive
cargomedia/pulsar-rest-api,mocha,2014-08-07T15:42:39Z,because nodeunit doesn't provide test timeout and or ability to finish test immediately on crash i suggest to migrate test to mocha library.,neutral
pouchdb/pouchdb,eslint,2016-02-09T00:05:04Z,i do think it would be preferable to have a single tool to handle this. `semistandard` may be ok although we could never use `standard` and worried about `semistandard` being similiarly obnoxious. using `eslint` directly also seems like a possibility.,negative
pouchdb/pouchdb,eslint,2016-02-11T14:48:24Z,:+1: for eslint (for what it's worth semistandard is just an opinionated eslint setup),negative
pouchdb/pouchdb,mocha,2014-02-04T22:55:53Z,extremely confusing. this is failing in node for me locally. but travis passes+1000 on the mocha change. qunit is being crap again,negative
pouchdb/pouchdb,mocha,2014-02-05T13:12:22Z,this actually works now. it has mocha in node and qunit on the browser. going to see if we can't get mocha in the browser too.  also noticed i have it set on nyan reporter. we probably want to change that to dot before we merge. or do we?,neutral
pouchdb/pouchdb,mocha,2014-02-08T14:47:54Z,so i'd merge in the mocha tests first before trying to fix this,neutral
pouchdb/pouchdb,mocha,2014-02-08T19:09:23Z,(#1321) - increased timeout limit on mocha tests from 2s to 5s. a small number of tests still time out after 5s (at least on my machine). perhaps those tests should have their timeouts individually set.,neutral
pouchdb/pouchdb,mocha,2014-02-08T19:13:36Z,(#1321) - increased global test time limit. increased global limit for mocha testing (they didn't pass on my computer earlier),neutral
pouchdb/pouchdb,mocha,2014-02-08T20:25:09Z,this is niiiiiiice!,neutral
pouchdb/pouchdb,mocha,2014-02-08T21:31:55Z,the node tests succeed and the new nyan cat is definitely a :thumbsup: . but `npm run dev-server` is broken now for me.  all the mocha tests fail in the browser on every browser i try; apparently the global pouchdb object is not present.  not sure what i'm doing wrong.,negative
pouchdb/pouchdb,mocha,2014-02-08T22:00:16Z,you probably want to do `git pull --rebase origin master` the main one got merged already but the test specific ones are still needed,neutral
pouchdb/pouchdb,mocha,2014-02-08T23:13:07Z,nick-thompson see #1261 which was waiting on the mocha stuff so i could debug. that is honestly step 1 for  #1250 as it should hopefully remove all the fs stuff in leveldb,neutral
pouchdb/pouchdb,mocha,2014-02-09T14:03:04Z,i've found that switching to mocha style `done` is helpful (given as a can argument to the wrapper function) as it can be called with an error if you need to fail the test.,negative
pouchdb/pouchdb,mocha,2014-02-09T15:57:10Z,if we switch to starting the tests with something like mocha --ui qunit-whatever --exclude those.tests tests/tests.*.js that might help,positive
pouchdb/pouchdb,mocha,2014-02-09T18:37:52Z,travis only tests node. not the browser. you are only testing the browser. also you should use done syntax now that were using mocha. basically change start() to done() and pass done as an argument to the function that wraps the test,neutral
pouchdb/pouchdb,mocha,2014-02-09T19:02:52Z,have we looked into testling? pretty solid browser support ( and now that we have mocha it's super easy to provide tap output..,positive
pouchdb/pouchdb,mocha,2014-02-09T23:52:53Z,yeh firefox is currently disabled as there was an intermittent / getting regular failure. its passing herebut yup. we are switching to mocha style tests so best not to add new tests in the old style. thank,negative
pouchdb/pouchdb,mocha,2014-02-10T02:40:43Z,(#1354) - add flags for mocha reporter and grep,neutral
pouchdb/pouchdb,mocha,2014-02-10T02:41:47Z,switched the default reported to spec as well. i find it easiest to work with and given tests can crash / stall i think its the most sensible default,negative
pouchdb/pouchdb,mocha,2014-02-10T07:45:51Z,could you modify the contributors.md at the same time?  lots of changes going on recently (ch-ch-ch-changes). and i'm having trouble keeping up with the new unit test options.,negative
pouchdb/pouchdb,mocha,2014-02-10T10:49:07Z,once #1342 gets done we can call mocha directly. though this is good for now (about to test),positive
pouchdb/pouchdb,mocha,2014-02-10T12:09:46Z,also grep browser tests. since i read in #1354 that you use `grep` for filtering node tests. why not also add it to the browser tests (now that we use mocha).,neutral
pouchdb/pouchdb,mocha,2014-02-10T14:03:18Z,yes that's true. but this is meant mainly for automation because you cannot change the location during the automated browser test (it exits with something like 'page reload not supported with async tests').,neutral
pouchdb/pouchdb,mocha,2014-02-10T15:01:27Z,mocha ui. work in progress migrating the files over to default mocha ui and chai. covers #1342 and #1341,neutral
pouchdb/pouchdb,mocha,2014-02-10T20:03:30Z,ping daleharvey,neutral
pouchdb/pouchdb,mocha,2014-02-10T20:34:17Z,i think we will still want to have the mocha target call ./bin/test-mocha so we can pass arguments to it. but i think we can discuss after landing. its awesome to have cleaner tests and get rid of a bunch of scafollding. however its a very disruptive commit with a bunch of new contributors so lets land asap. the pouch.shim rename not majorly fussed about. think removeing bluebird_debug is needed. once theres a green travis i am :+1: on mergingthis is a massive amount of work. great job,positive
pouchdb/pouchdb,mocha,2014-02-10T20:35:36Z,so for changes. get. and replication i just put in shims for the qunit tests instead of fully chaifying it. as i wanted to finish this today so it could get merged,neutral
pouchdb/pouchdb,mocha,2014-02-10T20:37:48Z,my idea was that if you want to do custom stuff. you can just call mocha yourself,neutral
pouchdb/pouchdb,mocha,2014-02-10T20:59:41Z,green so merged 4307d35e94674eaf1bd9eb7c70ab58930098a009,neutral
pouchdb/pouchdb,mocha,2014-02-10T21:57:14Z,changed test to mocha.,neutral
pouchdb/pouchdb,mocha,2014-02-10T22:48:54Z,of course. dale. i wouldn't forget to do anything as dumb as that.  :frowning: :palm_tree:,negative
pouchdb/pouchdb,mocha,2014-02-11T02:19:12Z,so this isn't a hang its a timeout. mocha tests only end when done is called or the timeout happens not an error. closing this as its more an annoyance then a bug.,negative
pouchdb/pouchdb,mocha,2014-02-11T09:49:24Z,i've been noticing that any exceptions seems to cause a timeout. even the desired exceptions (when should.js throws them). this hasn't been a problem for me in other projects using a lot of nested async tests before. mocha usually fails when an exception is thrown. similar to calling `done(err);`. the way i've worked around it for now. so the tests at least can give some better feedback than 'timed out'. is wrapping the tests in a try/catch like this:```it('foo'.function(done){  try {    bar.should.equal(baz);  } catch(e){ return done(e); }});```this was the correct error is propagated up and reported properly and it's faster as it won't wait for a timeout. but as i mentioned. this isn't the expected behavior of mocha as far as i know and shouldn't be necessary. so it might be something in the test utils or somewhere in pouch which causes this?,negative
pouchdb/pouchdb,mocha,2014-02-11T17:08:16Z,+1000 for that. i'd rather not have to rewrite all the unit tests. even the ugly pyramid-of-doom ones.you're right that this is just an annoyance. but it's a huge one for me. i spend most of my time with pouch fixing failed tests in exotic browsers. and it kills my workflow if i can't even see which tests failed. qunit at least did that. so mocha sorta feels like a step down.reopening to remind myself to monkey-patch a fix onto this until we replace mocha with chai as promised. a simple `console.log` will suffice.,negative
pouchdb/pouchdb,coveralls,2015-07-27T14:26:07Z,could try out something like  which gives those kinds of stats.,neutral
pouchdb/pouchdb,coveralls,2015-08-04T07:53:05Z,nolanlawson if you add the `gh_repo` and coveralls key to travis. it should check the repo by default with every pr you get in. independent from the ownership / rights. (if you invite me to coveralls and travis. i can take a look).running coveralls in `after_success` helps us the build won't fail. because it doesn't have any influence on the build. so this is what you'd need :),negative
pouchdb/pouchdb,coveralls,2015-08-12T15:13:19Z,yup would love this. its non trivial but would be super useful. we can have it send status to github pr's the same way coveralls doeswe also have like 3000 performance test results   while the results are possibly not hugely useful. it would likely be a good exercise to get them visualised in a way that did highlight any regressions,positive
pouchdb/pouchdb,selenium,2013-11-26T16:54:39Z,(#1025) - remove unused travis config file. as part of #1025 we removed the rest of the saucelabs integration stuff. will soon be replace with a local selenium suite (currently replace by me manually testing),neutral
pouchdb/pouchdb,selenium,2013-11-26T16:59:50Z,hi dale.so you're moving from public travis to a private jenkins ci server?,neutral
pouchdb/pouchdb,selenium,2013-12-03T09:34:44Z,remove dependency on standalone-server setup. `/bin/test-browser` requires on selenium standalone and chrome driver to be installed. bit of a hassle. they dont need to at all. the client driver should be able to boot browsers with no deps,neutral
pouchdb/pouchdb,selenium,2013-12-05T14:31:59Z,what about just using phantomjs ?,neutral
pouchdb/pouchdb,selenium,2013-12-05T14:34:13Z,phantomjs doesnt represent anywhere close to what a running browser looks like (also doesnt support indeeddb),neutral
pouchdb/pouchdb,selenium,2013-12-15T16:29:40Z,yeh i noticed that but theres quite a few problems with it. we already support websql natively so the indexeddbshim shouldnt be used. and then its still testing websql and not indexeddbb.,positive
pouchdb/pouchdb,selenium,2013-12-15T16:31:31Z,(#1086) - add selenium standalone as a dep,neutral
pouchdb/pouchdb,selenium,2013-12-15T18:07:44Z,not able to test but it looks good. i'm not worried about big dev dependencies.,negative
pouchdb/pouchdb,jshint,2013-11-25T23:48:55Z,(#1025) - add jshint to npm scripts,neutral
pouchdb/pouchdb,jshint,2013-11-26T00:26:24Z,js hint white option. we should enable the jshint white option which enforces more white space around functions and brackets. we are already like 3/4 if the way there and it's more enforcable then the current style.,positive
pouchdb/pouchdb,jshint,2013-11-26T02:13:38Z,yeh looks like its just the spaces after functions that are mostly missing. it is more enforeable so i am down,neutral
pouchdb/pouchdb,jshint,2013-11-27T23:47:48Z,remove unneeded jshint directives. now that we are depending on less globals. should need very little jshint things,neutral
pouchdb/pouchdb,jshint,2013-11-28T14:25:24Z,(#1046) - remove unneeded jshint directives. some minor cleanups along the way,neutral
pouchdb/pouchdb,jshint,2013-12-07T20:29:05Z,awesome. though next time try to make sure it passes jshint on your end. i had to fix a couple nits,positive
pouchdb/pouchdb,sauce,2013-01-15T06:06:18Z,thanks i am traveling now. but will fix the nits in a day or two when i get home (save a comment or two now).re: winningrev - my logic was that. since the existing code was already doing a join based on the seq stored in the doc_store table. this change didn't really alter that mechanic. it just modified the semantics of the table a bit (winningseq -> the old seq column. seq -> the most recent seq that updated any revision of the document).  i believe this is consistent as websql[sqlite] operates by default in the 'serializable' transaction model. but interested to hear your thoughts.,negative
pouchdb/pouchdb,sauce,2013-01-17T02:00:27Z,yup the winningrev logic is good. i am just generally wary of storing values that are generatable. but in this case it makes sense.merging now. thanks a lot for this. great pr,positive
pouchdb/pouchdb,sauce,2013-01-27T07:31:29Z,axemclion yo. i noticed you mentioned doing some tests work on twitter :)what do i need to do to get the tests to run in parallel in saucelabs? the documentation seems to suggests its automatic and i have attempted adding the concurrency option during setup,neutral
pouchdb/pouchdb,sauce,2013-02-06T03:44:46Z,ok. with the fixes to get the node tests up and running. it looks like the improvements to the saucelabs-qunit drivers are quite large improvements. we have a ton of browser failures because we arent sending an origin header. not entirely sure how thats possible but i asked the corsproxy maintainer to update that as he has a patch to ignore the origin thingit would be really nice if we didnt need to do any of the above work. but then again its all the http tests that are failing and those are the ones that have been problematic,negative
pouchdb/pouchdb,sauce,2013-02-08T02:46:07Z,looks like everything did not pass. if you notice towards the end. looks like windows/opera failed. i think it would be a good idea if we can also append a link to the saucelabs test run video here. to see what exactly happened. if not in travis. atleast in the published results.,positive
pouchdb/pouchdb,sauce,2013-02-11T01:20:50Z,daleharvey can you add me as a user to the saucelabs account ? i can take a look at the test cases and the browser runs. looks like something there was missing. can you add me and send me an email ?,negative
pouchdb/pouchdb,sauce,2013-02-12T23:24:07Z,looks like my saucelabs is not able to read opera status and save it. i will look at this.,negative
pouchdb/pouchdb,istanbul,2015-07-25T19:07:10Z,improve code coverage. now that mapreduce is folded into pouchdb core. one of the things i really miss is the confidence that code coverage is at 100%.i think we can get there. but it will take some discipline to go through the codebase. add `istanbul ignore` where it makes sense. extract out browser-only code (since we can't test coverage in the browser using istanbul). and of course add tests as well.i'm willing to do the work to try to get us up to 100%. or at least as close as possible.,negative
pouchdb/pouchdb,istanbul,2015-07-26T17:47:56Z,btw daleharvey where is code coverage reported to? can't seem to find it.,neutral
pouchdb/pouchdb,istanbul,2015-07-27T13:55:27Z,hm. it doesn't seem to be storing the actual coverage number anywhere. i wish there was some way we could make travis surface that information for every pull request.,neutral
pouchdb/pouchdb,istanbul,2015-08-10T14:28:42Z,yeah. it is a bug in coveralls as far as i can tell (not istanbul). maybe best to just ignore it and wait for a fix from coveralls,positive
angular/protractor,jasmine,2016-02-18T15:29:48Z,sallojusuresh . sometime it gives timeout error and sometime it does not give any error while protractor test running.even though i have increased the default timeout in config file.error: timeout - async callback was not invoked within timeout specified by jasmine.default_timeout_intervalcan you help me out??,negative
angular/protractor,jasmine,2016-02-18T15:48:31Z,you are welcome saurabh. increase jasmine_default_timeout_interval as well in conf.js file. below code snippet will solve your problem:(add below code if you did not mentioned in the conf.js file)jasminenodeopts: {        defaulttimeoutinterval: 2500000    }.,positive
angular/protractor,jasmine,2016-02-22T20:39:13Z,just trying the obvious simple things first. i made sure all my timeout values were the same and made sure that the process running grunt had a timeout greater than the protractor / jasmine timeouts. try it,positive
angular/protractor,jasmine,2016-02-23T16:35:45Z,i am quite surprised that not more people are looking. i would tought its something everyone would want. but from responses here i see the developers still don't see a valid use case behind it. so i guess there must be another way of doing this ?my current scenario:- i run the tests. lets say one test failed- the browser would close ... i need to inpect the console to see what went wrong- i can see the assertion that failed as well as full stack trace which should give me a good idea about whats wrong- but then ... to actually solve it ... i open up my test that failed. and then i open up a new chrome window and i try to get my application in that exact same state (so this might involve quite a lot of clicking ... )- i use web inspector to find out whats wrong with my selectorsso the last two steps would be much easier. if i could do what scriby suggested. but i guess i am doing this wrong. becouse if everyone would be doing it that way i guess we would already have a solution for it.so my actual question is ... what would be the correct way to go about this ?and while i am already asking ... is there any chrome/firefox plugin to make writting the tests easier ?( like recording what i am clicking and typing in ... and helping me with choosing the best selector ) ?and ... what is the best way to view the status of tests ? currently i am using protractor-jasmine2-screenshot-reporter ... but i am wondering if anything better exists ?(sorry for putting two unrelated questions here),negative
angular/protractor,jasmine,2016-02-23T21:13:31Z,error: timeout - async callback was not invoked within timeout specified by jasmine.default_timeout_interval . ``` jsdescribe('h2ome title bar text description'.function(){  it('test2'.function(){ browser.get('   expect(browser.gettitle()).tobe('test screen'); });});```i have a non-angular login screen before this page. i am able to login with browser.driver. after logging in. the page is redirected to angular 2 app. conf.js``` jsspec:['logintest.js'.'hometitlebar.js']```after executing logintest.js. i am getting the error  error: timeout - async callback was not invoked within timeout specified by jasmine.default_timeout_interval  in spite of setting the timeout to 120sec.,negative
angular/protractor,jasmine,2016-02-23T21:32:05Z,protractor will by default wait until angular is loaded. did you set:```beforeeach(() => {        browser.ignoresynchronization = true;});```to not wait for angular to load?,neutral
angular/protractor,jasmine,2016-02-24T10:20:58Z,but can you tell me how to resolve that issue or any alternative for that.??even though i have reinstalled protractor-jasmine2-html reporter module from npm but still it is giving same errori want a html reports using jasmine2 after test completiton,positive
angular/protractor,jasmine,2016-03-07T10:08:26Z,how to by pass model dialog in protractor with jasmine. i'm working with protractor with jasmine for a non-angular js application in ie.my scenario is to get the text present in the alert and accept/dismiss the alert.alert gettext() and accept()/dismiss() are working fine if i write both setps in a single it(). however. if i move the accept()/dismiss() function to another it(). then my script fails with following error:**unexpectedalerterror: modal dialog present**. is there any way that i can skip the alert verification by jasmine with a flagthanksjag,negative
angular/protractor,selenium,2015-02-18T13:51:39Z,"data:." in address bar and tests don´t run - chrome. i just started trying protractor and can't get it running.i followed the tutorial on protractortest.orgfirst i launched the selenium server with: webdriver-manager start.then i used "protractor protractor.conf.js". which results in a new chrome being opened with "data:." in the address bar. nothing else happens after that.in the selenium terminal window i see stuff like:java.util.concurrent.executionexception: org.openqa.selenium.webdriverexception: java.lang.reflect.invocationtargetexceptionall help appreciated.,positive
angular/protractor,selenium,2015-02-20T18:54:41Z,you can pass the port to it like '--seleniumaddress :4444',neutral
angular/protractor,selenium,2015-02-26T17:19:54Z,webdriver-manager status always returns not present?. i'm not sure if this is an issue or something wrong with my local setup. but when i try running webdriver-manager status. all three dependencies are listed as not present; however. running webdriver-manager start. starts the selenium process just fine.,negative
angular/protractor,selenium,2015-02-26T17:24:17Z,updating to the latest solved the issue.,neutral
angular/protractor,selenium,2015-03-02T23:12:41Z,juliemr that's it. i unified the option into a single one named `alternate_cdn`.the options to appear as the following:```usage: webdriver-manager <command>commands:  update: install or update selected binaries  start: start up the selenium server  status: list the current available driversoptions:  --out_dir        location to output/expect                         [default: "e:\\projects\\protractor\\selenium"]  --seleniumport   optional port for the selenium standalone server  --ignore_ssl     ignore ssl certificates                           [default: false]  --proxy          proxy to use for the install or update command  --alternate_cdn  alternate cdn to the binaries  --standalone     install or update selenium standalone             [default: true]  --chrome         install or update chromedriver                    [default: true]  --ie             install or update iedriver                        [default: false]please specify one command```,neutral
angular/protractor,sauce,2014-01-07T18:51:29Z,how to specify desired browser/os for saucelabs run?,neutral
angular/protractor,jshint,2015-08-17T22:07:20Z,chore(travis): lint project files in ci. this lints test in ci. which will hopefully prevent issues like #2429 and #2155  from creeping into the codebase. at the moment i'm only aware of the need for jshint. but let me know if there are additional scripts that need to be run.**note**: this pr is going to fail in ci until the fixes in #2429 are merged in.,negative
angular/protractor,jshint,2015-08-25T22:18:20Z,thanks for the contribution. merged at 8d936df7468f95475a2e4087edcb3cfe614b745c,positive
angular/protractor,jshint,2015-08-25T22:20:24Z,thanks! merged at 94859efc0c89174d20ad9c06283146f1f7e1bd63,positive
angular/protractor,karma,2016-01-07T22:01:24Z,there should be no difference between karma and jasmine here. so this is very odd.normally you should ask support questions of stack overflow or glitter. but i'll do a bit of investigation here later today.,positive
uber/tchannel-node,eslint,2015-11-05T19:46:29Z,eslint trace/ folder. r raynos,neutral
uber/tchannel-node,eslint,2015-11-05T21:02:06Z,lgtm.,neutral
patw0929/react-intl-tel-input,mocha,2016-03-09T09:36:43Z,i suggest to replace jest with mocha or jasmine. because we don't really use jest automocking feature.,neutral
ripple/ripple-lib,eslint,2015-03-06T18:40:36Z,shorten your commit message to something like "don't lint deleted files and update eslintrc",neutral
ripple/ripple-lib,eslint,2015-03-06T18:42:32Z,nevermind. maybe "don't lint deleted files and pull eslintrc from github",neutral
ripple/ripple-lib,eslint,2015-03-06T19:25:30Z,even for test files. we still want to keep a consistent way of writing javascript. disabling all eslint rules doesn't really help there. i'd rather be more strict and only disable things that make sense.,negative
ripple/ripple-lib,eslint,2015-03-06T19:26:57Z,other than the eslint comments. lgtm,neutral
erming/shout,eslint,2015-10-02T10:32:52Z,williamboman. thanks for giving your objective opinion. i will give a read to eslint to take an informed decision. what i can see so far is that my jscs configuration files seem much more rigorous in terms of style choices than your eslint file. at first glance. i'd say that jscs can better avoid confusion and set consistent style. but again. that might be because i don't know about it (in particular. the `"extends": "eslint:recommended"` sounds promising and maybe answers my concern). again. i'll read and get back to you.for strict mode (and other things). i fully agree with you. but let's set the minimal coding style rules as part of this pr to have the project comply with them. and then we can make the entire project stricter by adding relevant rules (including `strict`ing everything). makes sense?,negative
visionmedia/superagent,sauce,2014-12-09T21:21:18Z,gjohnson zuul is ready to go once you add the saucelabs credentials to the travis config.,neutral
jquery/jquery-mobile,coveralls,2014-01-04T23:59:52Z,tests: code coverage via istanbul and report to coveralls.io,neutral
jquery/jquery-mobile,coveralls,2014-01-05T03:02:48Z,how was istanbul chosen? have you looked at blanket.js or any other code coverage tools?,neutral
jquery/jquery-mobile,coveralls,2014-01-06T15:10:03Z,scottgonzalez doesn't blanket use istanbul internally. too?,neutral
jquery/jquery-mobile,coveralls,2014-01-06T15:13:38Z,i don't know. i've only very briefly looked at js code coverage. and it was quite a while ago. i just wanted to make sure there was some actual discussion within the team since this is something that has been a cross-project goal for a while and i haven't heard any of the discussions about choosing a tool and setting up infrastructure.,negative
jquery/jquery-mobile,coveralls,2014-01-06T15:15:16Z,i think this would be a good topic for the next bi-weekly dev leads meeting,positive
jquery/jquery-mobile,coveralls,2014-01-06T15:23:32Z,during last week's mobile meeting i suggested gseguin to post in the jquery-dev-team google group. i think it's still a good idea to do that. next to that we can discuss it during the dev leads meeting.,positive
jquery/jquery-mobile,coveralls,2014-01-06T21:12:45Z,ugomobi at that time i was still exploring the karma way which turned out to require way too many changes. if it gets brought up during the dev leads meeting. i'd be happy to get other people's input. i understand that we prefer a project-wide solution and i'm completely open to switching. while we wait for a project-wide solution we can use this as it's not intrusive at all in our codebase and start benefiting from the coverage report today.,negative
jquery/jquery-mobile,coveralls,2014-01-08T18:33:01Z,the decision on today's dev leads call was to go ahead with this.cc krinkle jamesmgreene in case you have any further input.,neutral
jquery/jquery-mobile,coveralls,2014-01-08T18:54:12Z,this looks good to go if you fix the one new line and squash the commits  :+1:,positive
jquery/jquery-mobile,coveralls,2014-01-08T19:29:31Z,i use istanbul for my needs and i feel it works very well. it provides more granular and accurate coverage than over tools i've tried.blanket doesn't use istanbul internally (particularly since blanket can run in the browser) but they do both use esprima to parse files into abstract syntax trees.,neutral
jquery/jquery-mobile,istanbul,2014-01-08T19:29:13Z,coverage badge is pointing to istanbul branch,neutral
tapjs/node-tap,mocha,2017-06-07T21:54:41Z,isaacs i wonder if it would be possible to run `tap` in a dedicated only mode. in which it would only execute tests with a `{only: true}` to it. basically the opposite of `{skip: true}`. by default. `{only: true}` would be ignored. but running with `tap --only` or something similar would be as if i added `{skip: true}` to all over tests. would something like that be possible?,negative
tapjs/node-tap,mocha,2017-06-07T22:18:59Z,huh.  gr2m that's a pretty good idea.while we're at it. maybe we could add a way to say "run the skipped tests. too". so you could mark things as skipped in general. but run them while you're developing?  or skip really slow tests. but still run them on ci?,positive
tapjs/node-tap,mocha,2017-06-07T22:19:41Z,i guess you can already do stuff like `{ skip: process.env.ci ? 'skip in ci' : false }`. so maybe "ignore skip" isn't such a valuable addition.,positive
tapjs/node-tap,mocha,2017-06-08T09:52:20Z,i’d be happy to try send a pull request for the `--only` cli option if you like? i could use some pointers on where the code would need to be touched. how test and where to update documentation. just a bit to get started. we can then discuss details in the pull request itself. this would be tremendously helpful to have in `tap` :) i also like that it would allow to run multiple tests with `only` option but without the risk to accidentally push a `test.only` change which would run the single test in ci. this bit me lots of time in the past. i think the `{only: true}` option with `--only` has less potential for developers to shoot themselves in the foot,negative
tapjs/node-tap,mocha,2017-06-09T08:03:28Z,> add a t.only(...) commandare you sure you want to add the method? there is no `t.skip` is there? i’d suggest we add the `{only: true}` option first and leave adding a `t.only` and maybe a `t.skip` method to a follow up issue?,neutral
tapjs/node-tap,mocha,2017-06-09T21:11:54Z,i was thinking it'd be nice to maybe implement this as a filter function on the root tap object.then it can also be leveraged to do `tap --filter="some pattern"` to filter tests based on their name.,positive
gulpjs/gulp-util,jshint,2013-12-28T22:03:59Z,sindresorhus for gulp-jshint i support them passing in an object for settings. them require()ing their conf file and passing it in (handled same as the first way). or them passing a full path string and the plugin requires it in,neutral
balderdashy/sails,mocha,2013-05-20T02:57:28Z,also that sails-mysql thing.. could that be obscuring the assets error for me? i haven't done any testing in node and mocha before so this is definitely new for me.my intuition was that the mysql issue is unrelated to the assets issue. i figure i'm probably missing a dependency somewhere. have you seen this before?,negative
balderdashy/sails,mocha,2013-06-15T01:39:57Z,+1 for generating unit test whenever something is scaffolded out. test coverage matters right? right? also: if tests are going to be _a thing_ i would vote for the karma/mocha/chai combo. from my perspective it's theoretical awesomeness. everybody likes easy cross platform testing. no?,positive
mapbox/spritezero,eslint,2016-08-27T02:04:04Z,add eslint. eslint catches trivial bugs. so we should add it.,negative
meanjs/mean,uglify,2015-08-19T08:09:02Z,sylvainlap we're you able to figure this out?,neutral
meanjs/mean,uglify,2015-09-09T00:07:58Z,ilanbiala i meant i agree with you. i don't like iifes at all. i dislike how your code starts indented vefore you even write your first line. as long as you concat before you minify and uglify. it doesn't make a difference.,negative
meanjs/mean,snyk,2016-09-18T17:11:11Z,snyk support in ci/cd. adding snyk support to test our dependencies for insecure vulnerabilities as part of our build process,negative
meanjs/mean,snyk,2016-10-03T19:44:20Z,pretty cool idea!,positive
meanjs/mean,snyk,2016-10-03T20:48:21Z,snyk is nice.this one is crusial. in their september email:> **changes to how snyk runs tests on pull requests**> > we are rolling out improvements to our github integration. as a first step. we have added settings for how snyk runs tests on pull requests (for repos that you are watching with snyk).> > what we have changed> > currently. snyk test on a pr fails if the repo has any vulnerabilities. > > we are changing this:> - by default. snyk test will only fail if the pr is introducing vulnerabilities. > - you can configure snyk test to fail if the repo has any vulnerabilities. > - you can now choose to only fail tests for high severity vulnerabilities.before it used to fail everything all the time if there was an old vulnerability.,negative
meanjs/mean,snyk,2016-10-06T15:50:07Z,yep. let's stabalize the branch first with the old dependencies we have and then integrate it fully.,neutral
meanjs/mean,eslint,2017-10-04T15:36:35Z,disable lint.eslint.csslint for a particular folder/file extension/file.. can anyone please help to disable eslint ? i can t disable it using .eslintignore or .gitignore. can we disable eslint completely for a project if there is any config setting or switch ?,negative
meanjs/mean,eslint,2017-10-04T20:54:09Z,vaucouleur thanks for taking this!abinashgupta feel free to re-open if you still have questions around this.,positive
meanjs/mean,coveralls,2016-08-30T16:56:13Z,true. that will kick off the coveralls so we can see some results. and also maybe we should update the readme/npm scripts in `package.json` for a coverage command.,positive
meanjs/mean,coveralls,2016-08-30T17:23:20Z,lirantal i wasn't quite sure how to integrate coveralls at the time. but i found a package `gulp-coveralls` so i'll have a go at implementing that with my next commit.simison yes i'll edit that with my next commit here. good catch.,negative
meanjs/mean,coveralls,2016-08-31T23:10:05Z,okay. i think i cracked it. there was a bug with the previous grunt coverage tasks never submitting client-side tests to coveralls. this new gulp coverage task fixes that by merging the client and server side test reports and submitting them together. thus the number of files being recorded for coverage has increased.should be ready now i believe.,neutral
meanjs/mean,coveralls,2016-09-04T12:23:52Z,that's a real mystery. they all link back to the same page and were sent simultaneously. my first thought was that they were for different builds. but there are 12 builds and 9 notifications  so that doesn't quite add up. googling doesn't find any history on this issue whatsoever.perhaps lirantal could disable coveralls notifications until we're at the bottom of it and we've also found a way to get client-side coverage reports going?,neutral
meanjs/mean,coveralls,2016-09-05T17:29:28Z,boom! looks like it's covering both client and server side tests. now so long as it doesn't send out 9 more coveralls notifications...,positive
meanjs/mean,coveralls,2016-09-10T17:38:15Z,hyperreality can you think of a test to write for this new directive? the coverage decreased. so that may be why the coveralls build failed. i think we have a threshold of coverage decreasing.lirantal i couldn't find the settings on coveralls. do you know what this setting is. and where i can see it?,neutral
meanjs/mean,coveralls,2016-09-10T18:07:04Z,mleanos i'll play around with sending keypresses on protractor.the coveralls settings are a tiny button on the top left.,neutral
fb55/css-select,eslint,2016-06-12T05:37:12Z,i've created a `eslint` branch to get things started with regards to formatting. there are currently loads of style violations. but that's of interest as soon as this is merged.,negative
fb55/css-select,eslint,2016-06-12T07:25:48Z,> regarding whitespace: i've used smart tabs for most of my personal projects. this often leads to formatting mistakes in prs. and i wanted to add a eslint file to my projects for a while now to enforce some consistency.i did not know this approach. for now. i just reverted my commits and i tried to fix some wrong (from what i understood) mixed indentation.> what i'm not 100% clear on: why did you opt for a different approach. when the approach from #38 would also do the job?i do not see how simply adding a custom token could solve the issue. from what i understand. css-select works this way:- parse a selector string and create a list of tokens- convert this list of tokens to a query function- apply the function to each element (and their children) passed as the context- return a list with the positively checked elementsif my context is `$p = cssselect("p")` and my query is `cssselect("+ p". $p)`. then the module will look for a `p` element which is adjacent to the `:scope`. it will create the query function and apply it to the `p` context (which of course is not adjacent to itself). and that's it. the `elem` array do not include the searched sibling element. so it is never tested and cannot be returned.this is why. i think. we need somehow to add this element to the array. so it can be checked and perhaps returned. moreover. we need to do this from outside of the compile module. according to how `getselectorfunc` and `select` functions work.i may have missed something. do you see a better way to implement this?,negative
remy/nodemon,mocha,2013-04-16T06:11:02Z,this works though:```    node_path='' nodemon \      -e 'coffee|pegjs' \      --watch test \      --watch . \      node_modules/.bin/mocha \    $(arg)```,neutral
remy/nodemon,mocha,2013-04-16T06:19:11Z,this doesn't work (from docs `-e coffee. pegjs`)```    node_path='' nodemon \      -e 'coffee. pegjs' \      --watch test \      --watch . \      node_modules/.bin/mocha \    $(arg)```,neutral
apache/cordova-windows,jshint,2015-08-04T16:40:58Z,alsorokin looks like there are jshint failures,negative
apache/cordova-windows,codecov,2016-03-16T14:29:55Z,cb-10888 enable coverage reports collection via codecov,neutral
mozilla/nunjucks,mocha,2015-02-02T17:16:52Z,how to default to filesystemloader even when window is present?. we're testing our components with `mocha-phantomjs` and are pointing it to an html file.due to this setup. `window` is present. which forces nunjucks to use `webloader`.the html file we are loading is however _not on a server_. but merely in a filesystem. webloader renders its template via `ajax`. and _this_ leads to issues. ajax calls return a `network_error: xmlhttprequest exception 101` error. as ajax calls are not allowed to local files.to address this we'd need to default to the filesystemloader. how would we achieve this?thank you in advance.,negative
mapbox/node-sqlite3,mocha,2013-06-13T03:00:54Z,i'm not seeing these. i presume the move to `mocha` either solved them or worked around them. please re-open if they pop back up however.,positive
mapbox/node-sqlite3,mocha,2013-06-13T03:29:51Z,we've moved to mocha now. closing.,neutral
mapbox/node-sqlite3,eslint,2016-09-23T15:48:29Z,add basic eslint configuration,neutral
mapbox/node-sqlite3,eslint,2016-09-23T16:53:10Z,fails because of new eslint not working with old node.,neutral
ariatemplates/ariatemplates,mocha,2013-04-03T10:00:59Z,fix npm start command again. since the new build changed some path. this commit is needed to fix `npm start`.finally it introduces a test case in node+mocha to make sure that the command keeps working.it removes the `watch` feature as it was hogging the cpu.,neutral
Tradeshift/tradeshift-ui,eslint,2017-02-14T15:35:33Z,dsp: we have another annoying dysfunction: eslint will fix around 10 `xhtml` files plus the generated `html` files every time `grunt dist` is run. next time you run. eslint will see these fixes as an error and fix them right back to how they were. forever and ever. it appears that `.eslintignore` is ingored. at least it's not possible to exclude the `xhtml` and `html` files :confounded:,negative
likeastore/ngDialog,karma,2015-04-22T17:29:43Z,ok pull request is ready to be merged.,neutral
videojs/videojs-contrib-hls,sauce,2014-03-28T19:00:28Z,does this use the video.js sauce labs account or a new one? we're not exposing any sensitive info right?,neutral
videojs/videojs-contrib-hls,sauce,2014-03-28T19:02:02Z,not anymore. however. i think the access-token for the videojs saucelabs was commited at one point unencrypted. so. we might want to generate a new access-token and put the newly encrypted value in here instead.,positive
videojs/videojs-contrib-hls,karma,2014-02-20T20:02:31Z,karma working with videojs-contrib-hls,neutral
videojs/videojs-contrib-hls,karma,2014-03-10T19:00:34Z,using travis build + saucelabs browsers. -using saucelabs browsers: desktops and mobile with karma plugin-builds in travis-posts to hipchat and irc,neutral
melonproject/protocol,jasmine,2017-10-09T16:40:13Z,using dapp for tests and deployment. - remove truffle components- add more jasmine tests for main protocol functions,neutral
pouchdb/express-pouchdb,mocha,2014-11-22T00:33:08Z,marten-de-vries: this isn't a burning issue for me. i did the work because it was insanely useful in debugging a perf issue i was having with pouchdb replication on node.js. so i'd rather see us do this 'right'. however one way or another we have to at least have a line of code in express-pouchdb that says "if req has proxy then set something on opts".as for pouchdb... that's harder. the issue is that so far as i'm aware there is no way to programmatically set a proxy location in the browser. so a 'proxy' option at the pouchdb layer would have to detect that we are in the browser and complain. the way pouchdb deals with this today is by side stepping the issue. they just say "whatever you stick in ajax we send down the stack. no validation". which is why they wouldn't have a test.the real test i want to have is that we are correctly parsing the request and passing it to pouchdb correctly. i wouldn't even care if we tested that the functionality was working. this really screams for a mock. and honestly. shouldn't we have mocks for all the express-pouchdb requests? i realize that is a ton of work but at least we could create a mocha framework and start with one test.i have very little experience with mocha or mocks. so it would be educational for me to actually set up mocha and write a mock for this test. if you're o.k. with it i'm happy to submit a test framework for express-pouchdb with one test. :)what do you think?,negative
pouchdb/express-pouchdb,selenium,2014-07-10T01:03:18Z,well. it's green. and at least the node test is genuine. not sure why selenium suddenly stopped working. but it's better than nothing.,neutral
mojotech/jeet,mocha,2014-03-04T15:39:07Z,dfasdjfdskajf;ladsfjklsdfj mocha!!!! >: [,neutral
ModuleLoader/es-module-loader,mocha,2014-12-29T13:29:38Z,douglasduteil sure definitely. this would be amazing.,positive
cerebral/cerebral,standard,2015-12-29T03:35:24Z,abalmos: is the suggestion above to have the cart expose a service that will in turn call the signal to run the chain of actions associated with `cart.toggleitem`?  that doesn't seem to be any different (beyond being more confusing to follow) than just calling the signal from the action directly.  or is the suggestion to not allow `cart.toggleitem` to be a chain of actions at all. but rather it's own function that modifies the state. and expose that function as a service?  in that case. i'd rather keep all my actual state-changing confined to actions if i can help it. and definitely not have to repeat state-changing code once in actions and once as a service.christianalfoni: i don't think it needs to be a requirement that the signal has to exist at the time of registration.  it could either always evaluate the string at call time (as my current implementation clearly does by explicitly calling the signal). or populate it lazily: i.e. if it exists when registered. fine.  if not. keep the string and try to evaluate it again at some later time. either on the first call to the outer signal. or during the registration of any subsequent signals.  in the latter case. you'd still get to analyze all the signals at registration time. it's just that a signal containing strings in it's action chain may not be considered invalid until it's called and it's discovered that nobody ever registered that one.  it will still be quite an obvious error at that point: used a signal string that didn't exist in a particular action chain.  i believe this is currently how cerebral handles things when one calls an unknown signal. so nothing different there.as for being harder to find the file containing the signal. i don't think `grep -r 'cart.toggleitem' *` (or `ag cart.toggleitem`) is too bad :).  part of the point is that the standard method of explicitly requiring paths makes it much less modular and reusable. so definitionally anything that replaces the explicit path with a more dependency-injection-like pattern will have that issue.  you could claim the same thing about signals themselves: why have the strings at all?  why not just require the action chains directly wherever you need to use them?  i see the real power of the string name being modularity: the caller of the signal doesn't have to know anything about who registered it.,neutral
cerebral/cerebral,codecov,2016-07-02T17:13:27Z,add coverage through codecov,neutral
rooseveltframework/roosevelt,mocha,2018-01-08T16:03:54Z,add the first ever mocha tests!. with this pr mocha is now officially a devdep of roosevelt. and that can only mean one thing... tests!starting us off is some simple tests to ensure that params are set properly. this comes in 3 flavors:- constructor: test that params sent to the constructor are instantiated in a new app. tossing a package.json into the mix also ensures that they take priority.- package: test that params in rooseveltconfig of a local package.json are set properly.- defaults: test that default params are set when they are not set via the constructor or the package.some things to note:- there are some exceptions which break the conventions of these test cases which will either directly or indirectly be tested in the future:  - setting suppresslogs in every test case defies the default test.  - implicit `generatefolderstructure: false` in default tests as a result of no package.json.- to mitigate the possibility of race conditions polluting the isolation of app environments between tests each `appdir` is a different directory specific to that test suite.,negative
rooseveltframework/roosevelt,mocha,2018-01-10T14:49:30Z,folder structure mocha test,neutral
rooseveltframework/roosevelt,mocha,2018-01-10T15:05:54Z,we should add another test to ensure that no extra unexpected directories are generated in the appdir.,neutral
rooseveltframework/roosevelt,coveralls,2018-01-09T18:58:45Z,add nyc and coveralls,neutral
brave/browser-laptop,uglify,2017-12-04T06:45:28Z,closing as the pr fixing this was closed. i don't think there's a big driver to fix this since it's not affecting the packaged build,neutral
twbs/bootstrap,sauce,2013-11-19T14:47:21Z,:+1: awesome sauce.,positive
nodemailer/nodemailer,mocha,2016-05-25T23:56:37Z,okay. it was an issue with mocha haha. my apologies. mocha was moving onto the next test case before the event listener could finish processing.,positive
nodemailer/nodemailer,mocha,2016-06-07T08:23:15Z,i know time has passed since this thread was active but i would like to supplement sabov answer for the benefits of future reader.in addition to call `done()` callback but also increase timeout on your mocha test to allow test to wait for nodemailer to connect and send email. in my case i set timeout equal to 10000 and it has worked like a charm.,neutral
datastax/nodejs-driver,eslint,2016-12-23T16:49:20Z,linting. - add eslint config file- lint lib source files- run eslint as part of the travis buildexclude `integer.js` from linting as we are not the authors.- [x]  used #197 as base branch to avoid conflicts on `lib/request-handler.js`. i will rebase once merged.,negative
datastax/nodejs-driver,eslint,2016-12-28T14:27:54Z,great idea. i think we should either merge this first and then rebase/update all the other branches. or merge all the other branches first and then rebase and apply this.  wdyt?,positive
datastax/nodejs-driver,eslint,2017-01-09T09:37:56Z,we can rebase it after #197 is merged.,neutral
datastax/nodejs-driver,eslint,2017-01-11T00:16:11Z,linting for tests. - add test specific globals to eslintrc- define 'eslint' script target for npm and have travis use it- add test directory to linting,neutral
datastax/nodejs-driver,eslint,2017-01-11T09:01:14Z,wow! this is great!i only found the issue that i mention above on `unit/client-test.js` around strict mode. that i've made in the past so i'm going to send a fix for it and merge it.,positive
mde/ejs,mocha,2015-01-10T04:22:34Z,move mocha opts to test/mocha.opts. less cluttered package.json. this has the additional benefit of being able to directly run `mocha` without `npm test`.,neutral
mde/ejs,mocha,2015-01-10T05:24:20Z,thanks!,positive
swagger-api/swagger-js,mocha,2014-12-31T02:14:39Z,added mocha tests. started test structure.  whitlockjc see what you think of the following structure for testing.  i haven't replaced the build system yet. but we can kick it off with `cake bake && npm test`,neutral
swagger-api/swagger-js,mocha,2014-12-31T02:15:13Z,intended to address #180,neutral
swagger-api/swagger-js,mocha,2014-12-31T19:16:58Z,everything looks fine.,positive
arose/nglview,eslint,2017-02-02T17:03:10Z,add eslintrc. copied from ngl.,neutral
keystonejs/keystone,sauce,2016-02-12T23:14:03Z,add support for sauce labs. add support for sauce labs as the prefer method to do nightwatch ui/functional testing in the travis ci environment.  this initial attempt may or may not work as there's quite a bit of setup that had to happen to make this work.,neutral
keystonejs/keystone,sauce,2016-02-13T18:00:57Z,morenoh149 i know that's a goal.  however. when you are dealing with a remote environment that behaves different than the local it takes some trial and error to get things right.,negative
keystonejs/keystone,mocha,2014-04-28T21:05:50Z,i opened a pull request for initial field  #306 ;),neutral
keystonejs/keystone,mocha,2014-05-05T00:49:26Z,turn fields test into mocha unit test. no idea if this is desired or not at this stage. but i wanted to get more familiar with the way the project is tested and this was a way to do it.,neutral
keystonejs/keystone,mocha,2014-05-05T00:59:24Z,good call. this field test file was written before we'd integrated grunt / mocha / must. thanks for cleaning it up.,positive
keystonejs/keystone,mocha,2014-05-14T13:25:24Z,improve automated tests for keystone. we need to have a look at how to easily and automatically test keystone so that changes and releases can be made with confidence across a wide number of use cases and configurations.some of the functionality can be covered by expanding the automated test coverage now that we have gulp and mocha / must integrated. and this will help considerably.it might also. i think. be a good idea to set up a sample project (or two?) based on the yeoman generator that cover a wide range of route and model configurations. with test processes that will catch things that may be more difficult to cover using the automated keystone code tests. including the ui.any feedback or help getting this right would be welcome. it will be a really valuable addition to the project.,positive
Azure/azure-xplat-cli,jshint,2013-04-24T19:26:51Z,why are there so many jshint fixes all over the codebase still? it's making it really hard to see the actual change here. can we just do a single massive sweep and fix them all. and then if we turn up the jshint levels fix that as a separate pr so they don't keep mixing together?,neutral
lbdremy/solr-node-client,mocha,2014-07-16T21:19:48Z,lbdremy just did a simple test with figc outside this project. works like a charm.even does overwriting of nested properties in the config (which we would need)however: $ npm test --over.write=me will not pass them down. so figc will not do it's magicon the plus side. mocha does. so this works fine:$ mocha test/mytest.json --over.writeso it's not 100% but it still seems useful enough to throw figc in for this. right?,positive
lbdremy/solr-node-client,mocha,2014-07-17T20:23:15Z,/me (being sorry for pushing the wrong button),negative
lbdremy/solr-node-client,mocha,2014-07-18T10:34:53Z,my mistake:  for some reason the group-query-test fails in this branch: also when ran individually.hadn't ran it individually before.group-query-test was new and merged in from the previous pullreq #46 that file just didn't give a conflict so i forgot about it. so sorry for all this noise.will adapt our expectations to this test as well.,negative
lbdremy/solr-node-client,mocha,2014-07-31T17:02:04Z,yep that's a great idea. i can create the issues tonight. i will add the label `test` to them.,positive
binary-com/binary-live-api,istanbul,2016-04-04T03:29:03Z,add istanbul coverall support. hi.attached contained few changes that should add coveral support for our project for your perusal. should there be any issue with this pr . do not hesitate to let me know. i would be glad to address it.,positive
phovea/phovea_core,karma,2016-11-08T16:54:56Z,> because of the compilation + webpack + tslint time.why does `npm run test:watch` not work?> i need to figure out how to get debugging to work.there is a debug button in the chrome window top right> karma is a test runner... i think i could still be using qunit syntax (npm install -g karma-qunit): is this something folks have strong opinions about?why adding another syntax.  provides everything you need?,negative
percy/react-percy,eslint,2017-07-29T18:35:24Z,prettier. summary--set up [prettier]( on this repo and adjusted the eslint configuration accordingly. prettier takes care of all the formatting of js files for us so we don't have to think about it. the diff here is just from running `eslint --fix` on the repo after setting up prettier.,positive
percy/react-percy,eslint,2017-07-29T19:11:11Z,overall i'm     on this change.  most of the changes are indeed making things prettier. and i really like that this is automated.  i'm okay with having it merged as is after fotinakis has checked in on it.if we set the line length to 100. and redid the code changes it made. then some of the changes made here wouldn't occur.i'd also consider having the prettier rules match what i'm proposing in our ember repo:```  plugins: ['prettier'].  extends: ['prettier'. 'eslint:recommended'].  rules: {    'prettier/prettier': [      'error'.      {        singlequote: true.        trailingcomma: 'all'.        bracketspacing: false.        printwidth: 100.      }.    ].    'max-len': ['error'. 100].```,positive
percy/react-percy,eslint,2017-07-29T19:13:39Z,which thomashuston just did as i wrote that last comment. :),neutral
dadi/api,standard,2016-09-04T02:04:52Z,standardjs formatting. this pr brings the api codebase into line with web by making it conform to the style guide at standardjs.com,neutral
dadi/api,standard,2016-09-13T02:50:12Z,replace built-in log module with standard dadi/logger. close #122,neutral
rwjblue/ember-template-lint,eslint,2017-10-18T19:41:22Z,autofix option. great addon! i'm having a tough time finding if there is a --fix option like in eslint (eslint . --fix) where it will automatically fix files that fail the lint rules. is there an option for this or is it missing?,positive
rwjblue/ember-template-lint,eslint,2017-10-19T14:41:59Z,sadly no. but it is definitely something that we want to make happen at some point.,neutral
mapnik/node-mapnik,jshint,2015-02-06T20:30:35Z,jshint specific files. jshint doesn't do its own globbing. so when you run it on windows you have to specify folders. or else specific files.,neutral
mapnik/node-mapnik,jshint,2015-02-06T20:35:22Z,fixes #369,neutral
mapnik/node-mapnik,coveralls,2015-03-02T21:49:18Z,created a `.coveralls.yml` locally with the `repo_token` and was able to upload with `coveralls -i src/ --gcov-options '\-lp'` but i don't think that command is correct (no coverage is reported yet). pausing on this   now to focus on other things.,neutral
appnexus/lucid,eslint,2016-11-21T17:30:51Z,upgraded eslint. added lint fix. and removed gulp-eslint. ## pr checklist- ~~manually tested across supported browsers~~- ~~unit tests written (`common` at minimum)~~- [x] pr has one of the `semver-` labels- [x] two core team engineer approvals- ~~one core team ux approval~~,positive
appnexus/lucid,eslint,2016-11-21T17:33:31Z,i don't seem to have the permission to add labels.,neutral
appnexus/lucid,eslint,2016-12-02T00:15:03Z,for the files where you added `/* eslint-disable comma-spacing */`. was it just not autofixable?,neutral
appnexus/lucid,karma,2016-08-16T16:10:28Z,don't worry about the failed build. we just merged acceptance testing and karma integration that is being flaky for us. i'm working on stabilizing it but for now i'll just keep re-running travis until it succeeds.,positive
appnexus/lucid,codecov,2016-11-29T16:52:43Z,i'm looking into the `codecov` failure here.,negative
composite-scopes/composite-scopes-all,karma,2016-07-04T14:36:22Z,cleanup test configurations. refactor files such as _karma.conf.js_. _package.json_ and _test-loader.js_.,neutral
websockets/ws,coveralls,2016-11-17T21:10:16Z,it's coveralls which is drunk. tests pass :),neutral
koola/pix-diff,sauce,2016-12-12T01:10:01Z,thanks swayf. for some reason. travis is missing the sauce connect and that's why it's failing.,negative
u-wave/web,eslint,2016-08-26T20:49:55Z,eslint: enable prefer-stateless-function rule everywhere(ish). churny. but ok. that's what we get for following airbnb style guides :eyes:,neutral
u-wave/web,eslint,2016-08-28T17:19:45Z,build: replace gulp-eslint with eslint cli. eslint doesn't fit in particularly well with gulp. so the integration was a bit clumsy. this instead calls the cli from a gulp task without using gulp's streaming fancy stuff.also adding the `--cache` parameter so linting becomes much faster after the first run (nice for watching etc).,negative
jquery/jquery-migrate,coveralls,2016-02-10T12:14:48Z,might be good idea to add integration with coveralls too,neutral
jquery/jquery-migrate,coveralls,2016-02-12T21:59:20Z,> since coveralls bot will tell you about it.i meant hook there,neutral
jquery/jquery-migrate,coveralls,2016-02-12T22:04:55Z,> i like doing it explicitly so i know what i've loaded.ok-ok. totally reasonablewhat about coveralls? i can provide a pull for that this weekend. if that too big task to dig.,positive
bitpay/bitcore,mocha,2014-04-09T15:39:38Z,fix testling config. testling needed a special html file to be able to setup mocha with the tap reporter (required by testling),neutral
bitpay/bitcore,karma,2014-11-26T19:50:09Z,tests: add karma config and dependencies,neutral
bitpay/bitcore,karma,2014-11-26T19:51:58Z,reviewing,neutral
bitpay/bitcore,karma,2014-11-27T13:45:26Z,ack. tests are running in travis now :d,neutral
bitpay/bitcore,coveralls,2014-06-05T19:44:43Z,add coveralls,neutral
smclab/titaniumifier,mocha,2014-11-30T00:35:09Z,use ti-mocha and grunt-titanium to launch tests on simulators,neutral
tommikaikkonen/redux-orm,codecov,2017-05-16T09:35:07Z,well. it's not wip (at least looks like everything is done). but need to integrate (by repo owner) at travis and codecov,neutral
tommikaikkonen/redux-orm,codecov,2017-05-16T09:38:43Z,feature/jest. adapted tests for jestremoved useless dev depsadded more badges to readmeadded integration for travis/codecov (still need integration from repo owner)tommikaikkonen nathanbwaters,negative
tommikaikkonen/redux-orm,codecov,2017-05-17T06:17:37Z,travis was activated for this repo.,neutral
tommikaikkonen/redux-orm,codecov,2017-05-17T17:54:29Z,yeah  great work plandem,positive
tommikaikkonen/redux-orm,codecov,2017-05-17T19:24:10Z,tiii now i'm not sure about master branch and **release** in terms of git flow. e.g. i would like to merge current develop into the master. but it's not a git flow way.,neutral
tommikaikkonen/redux-orm,codecov,2017-05-18T09:35:14Z,hmmm...sounds like still almost git flow :) in git flow release is not instant action. but a process with start/finish with tagging releases - almost like we have right now. anyway i would like to hear other people. we need to clarify process.p.s.: as i understand git-flow was used previously by tommikaikkonen.,positive
tommikaikkonen/redux-orm,codecov,2017-05-18T12:02:13Z,yeah sorry. it is almost git-flow was what i meant to say ;),negative
tommikaikkonen/redux-orm,codecov,2017-05-18T20:10:54Z,great work plandem!my team uses git-flow at work. so i used a similar but less strict branching model. no release branches. just merged `develop` to `master` when it was ready for a release. then release to npm from `master`. i don't feel it's necessary to keep a strict git-flow branching model. you guys can decide what to do with that moving forward :),negative
tommikaikkonen/redux-orm,codecov,2017-06-01T10:08:26Z,codeconv requires token. but in case of github it doesn't. so locally it will fail to upload. have no idea how to fix it without token - create another command at package.json for local testing? e.g.: **test-ci** (like now). **test** (run tests without codecov),positive
tommikaikkonen/redux-orm,codecov,2017-06-01T10:13:34Z,wouldn't it be enough to add ``&& codecov`` to the test section in .travis.yml?,neutral
tommikaikkonen/redux-orm,codecov,2017-06-02T21:20:44Z,off-topic: does codecov not add a pr check?,neutral
tommikaikkonen/redux-orm,codecov,2017-06-05T15:06:39Z,tiii i make codecov to check only **master**. see .codecov.yml,neutral
tommikaikkonen/redux-orm,codecov,2017-06-08T14:01:02Z,tiii are we talking about codecoverage or tests? tests run for any branch/pr. and after that codecoverage. but only for master. so in that case codecoverage statistic is not accurate. because of differences between master and branch. is it critical?,negative
electrode-io/electrode,eslint,2017-01-25T22:00:01Z,i'm not sure this fixes the issue; there's still no eslintrc in any directory.,neutral
qunitjs/qunit,eslint,2016-08-19T02:29:27Z,leobalter i could use some help configuring travis as you suggested. also. can you confirm that appveyor intentionally only runs on latest node and so no reconfiguration there will be necessary? thanks!,positive
qunitjs/qunit,eslint,2016-09-05T05:17:59Z,> i should create a "lint" script which would only run eslint on node 6. that way we don't run more ci jobs than we need to. that's the first thing i noticed. also the current way repeats the other tasks on ci-include-lint.this is looking good. almost ready to go! ++,neutral
qunitjs/qunit,eslint,2016-09-05T12:10:03Z,leobalter not sure i fully understood your reply. do you want me to avoid creating an extra build node altogether? or can i create that node (as i am currently doing). as long as it only lints rather than running the ci scripts as well?i was proposing the latter. but if you would prefer i find another way. please tell me what you have in mind.,negative
qunitjs/qunit,eslint,2016-09-05T12:15:22Z,platinumazure currently you're invoking both `ci` and `ci-include-lint` on node 6 which duplicates most stuff. since node 6 already runs the `ci-include-lint` task it shouldn't run the `ci` one. that's. i think. what leobalter says.,neutral
qunitjs/qunit,eslint,2016-09-06T01:39:39Z,okay. i _think_ all open questions have been addressed at this point. let me know if i should squash. thanks!,positive
qunitjs/qunit,eslint,2016-09-06T13:00:59Z,leobalter left a response to your comment on eslint-disable-line.also. regarding indentation: i can try to find remaining indentation issues by using the eslint "indent" rule. it's not enabled in eslint-config-jquery because the rule does not elegantly handle the top-level iife requirement in the jquery style guide. but i can at least go through and try to fix any real errors. sound okay?,neutral
qunitjs/qunit,eslint,2016-09-06T13:22:53Z,on the indentation. i'm ok with that but the current issues are not many so we can merge this pr before and open a follow up. as you prefer.,neutral
qunitjs/qunit,eslint,2016-09-08T03:03:58Z,leobalter i've pushed a commit replacing `eslint-disable-line` with `eslint-disable-next-line`.regarding the indentation issues: i've been looking and i see a number of indentation problems throughout the repository (about 200 or so violations). many in files i didn't touch. so i guess i'd like to treat those as a separate issue. i am happy to fix any indentation problems i've introduced in this pr. if you can help me find them. otherwise. can we merge? (assuming there aren't other issues. of course.)let me know if you need me to rebase and/or squash.,negative
qunitjs/qunit,coveralls,2014-01-23T13:54:25Z,we recently added istanbul to jquery mobile and we're using coveralls.io to store the data. we should probably be consistent. especially since developers won't really be enticed to compare coverage to previous runs with this setup.,neutral
qunitjs/qunit,coveralls,2014-01-29T15:45:32Z,i noticed that grunt-coveralls doesn't work locally. but i used this for keep consistency with jq.mobile  probably the best way to solve the ci problem is checking the grunt-coveralls repo if they have an option to throw an error if coveralls service is down. doing this we can keep relying on travis builds without relying on coveralls as a external and secondary service.i'll check this on grunt-coveralls today later.,negative
qunitjs/qunit,coveralls,2014-01-30T07:18:14Z,if they accept my pr at pimterry/grunt-coveralls#5. we will be able to add an option to just print a warning rather than an error when trying to send data to coveralls.btw. this pr is already updated with the last changes on branch master.,neutral
benjamn/recast,mocha,2013-12-09T19:21:36Z,fix line-endings-dependent tests for non-*nix systems. ```......................................................52 passing (8s)2 failing1) lines eachpos:   assertionerror: 388 === 393    at testeachposhelper (d:\docs\projects\web\recast\test\lines.js:73:12)    at exports.testeachpos (d:\docs\projects\web\recast\test\lines.js:89:5)    at context.<anonymous> (d:\docs\projects\web\recast\test\run.js:14:21)    at test.runnable.run (d:\docs\projects\web\recast\node_modules\mocha\lib\runnable.js:194:15)    at runner.runtest (d:\docs\projects\web\recast\node_modules\mocha\lib\runner.js:372:10)    at d:\docs\projects\web\recast\node_modules\mocha\lib\runner.js:448:12    at next (d:\docs\projects\web\recast\node_modules\mocha\lib\runner.js:297:14)    at d:\docs\projects\web\recast\node_modules\mocha\lib\runner.js:307:7    at next (d:\docs\projects\web\recast\node_modules\mocha\lib\runner.js:245:23)    at object._onimmediate (d:\docs\projects\web\recast\node_modules\mocha\lib\runner.js:274:5)    at processimmediate [as _immediatecallback] (timers.js:330:15)2) lines charat:    + expected - actual    +<cr>    -    at lines.compare (d:\docs\projects\web\recast\test\lines.js:108:16)    at lines.lp.eachpos (d:\docs\projects\web\recast\lib\lines.js:497:17)    at exports.testcharat (d:\docs\projects\web\recast\test\lines.js:113:11)    at context.<anonymous> (d:\docs\projects\web\recast\test\run.js:14:21)    at test.runnable.run (d:\docs\projects\web\recast\node_modules\mocha\lib\runnable.js:194:15)    at runner.runtest (d:\docs\projects\web\recast\node_modules\mocha\lib\runner.js:372:10)    at d:\docs\projects\web\recast\node_modules\mocha\lib\runner.js:448:12    at next (d:\docs\projects\web\recast\node_modules\mocha\lib\runner.js:297:14)    at d:\docs\projects\web\recast\node_modules\mocha\lib\runner.js:307:7    at next (d:\docs\projects\web\recast\node_modules\mocha\lib\runner.js:245:23)    at object._onimmediate (d:\docs\projects\web\recast\node_modules\mocha\lib\runner.js:274:5)    at processimmediate [as _immediatecallback] (timers.js:330:15)```,negative
benjamn/recast,mocha,2013-12-09T19:23:34Z,this seems like a real problem outside of the tests. too.,positive
benjamn/recast,mocha,2013-12-09T19:45:23Z,allow tests to be run individually by mocha. ideally `mocha test/lines.js` would produce output similar to the "lines" section of the `npm test` output. this used to work with `whiskey`. and would be nice if it worked again.to be clear. i have no problem with sacrificing features like this temporarily to make progress quickly. switching to `mocha` was clearly a good move.,positive
benjamn/recast,mocha,2013-12-11T22:00:54Z,also. since we haven't changed the syntax of the `test/*.js` files. `whiskey` still works fine! definitely would prefer to use `mocha` for everything. though.,positive
benjamn/recast,mocha,2013-12-11T23:06:54Z,yep. also. if you don't like `--grep` syntax. it can be still possible to check `argv` for extra argument and call `submodule` only for this string. not for entire list. so it would become possible to run test suite by name.,negative
paritytech/parity,eslint,2016-09-23T19:02:22Z,add pre-push hook that runs eslint & tests. ... it is fast enough. no reason not to. js/scripts/pre-push.sh,neutral
paritytech/parity,eslint,2016-09-24T06:44:15Z,good point. i'm not opposed to move package.json (only) to root like we have cargo.toml there. however you have just got me thinking - this needs to be conditional to js changes. don't need the rest of the core devs to run this. (they may not even have the tools to do so),neutral
admc/wd,sauce,2013-01-17T17:45:20Z,saucelabs jobs issues . most jobs are not marked as passed. one job is unnamed.for basic test. we notify the saucelabs server 3 times. but 2 messages seems to have no effect. could someone check the saucelabs server log. we must be doing something wrong.for browser-init it is also implemented. but messages disapear.i'll track down the unnamed job later. it's probably in the browser-init test file.i've disabled all tests but saucelabs on travis so that we track this down more easily.,negative
admc/wd,sauce,2013-01-23T05:33:03Z,i got to the bottom of this. i got this error for firefox and explorer:`unauthorized; invalid csrf token`i suppose csrf check should be disabled in this case.,negative
admc/wd,sauce,2013-01-29T04:45:58Z,this seems to fix it. still getting occasional `failed uploading some assets` messages.,negative
admc/wd,sauce,2013-01-30T10:29:38Z,closing this one and opening new issue for `failed uploading some assets`,negative
admc/wd,sauce,2013-01-30T10:34:28Z,occasional `failed uploading some assets` message in saucelabs interface.. i suspect some http properties need to be set to avoid that. this happens for job for which there is actually no asset to upload.,negative
admc/wd,sauce,2013-01-30T10:39:06Z,the only reason that would happen is if there were problems with s3 uploading the video of the session. we could probably even speed up the test run by disabling the vnc video recording in desired capabilities:"record-video": false,neutral
admc/wd,sauce,2013-02-01T02:34:23Z,parameter was added. i've tried to replicate the issue and it seem to happen when i run the test suite then try to watch the test live. could be that my location is too far from the s3 server.now waiting for travis test to pass to close the issue.,neutral
admc/wd,sauce,2013-02-01T02:36:53Z,thanks sebv! bernii is going to look into why the passed/fail rest calls aren't working.,positive
admc/wd,sauce,2013-02-01T10:58:03Z,integrate local tests with sauce connect.. firefoxdriver and chromedriver are instable in the travis environment so it'll be better to run the local tests this way.,neutral
admc/wd,jshint,2014-06-13T22:28:40Z,it looks like this failed jshint.,negative
admc/wd,jshint,2014-06-13T22:43:45Z,fixd the jshint,neutral
admc/wd,mocha,2013-10-23T12:02:53Z,added mocha example and doc,neutral
angular-ui/bootstrap,karma,2013-03-25T02:03:51Z,well after some more experimentation i've discovered how to get testacular running properly in windows. the reason grunt didn't work but running testacular.cmd did was because i wasn't passing the --single-run option. this caused the testacular server to stick around and all the browsers that it didn't detect or wait for were then able to connect. next i found that setting the <browser>_bin env variables actually causes the browser detection to work. why this is different from setting a custom browser via the browsers array in the conf is beyond me but it is. setting the env for chrome and using browsers = ['chrome'. 'ie'] works perfectly. grunt now works it runs through the test and then stops because of the ie failures. running it while only testing chrome makes its way through the entire build.thanks. and sorry for turning this into a "get testacular working in windows" thread. i've been searching all over and haven't been able to find this information anywhere. also doesn't help that testacular has been renamed to karma and the google group moved so none of the links pointing to google groups discussions work anymore.,negative
angular-ui/bootstrap,karma,2013-04-06T16:51:47Z,chore(build): rename testacular to karma. close #264,negative
angular-ui/bootstrap,karma,2013-04-06T18:11:30Z,l42y great stuff. i would like to merge it asap (unless ajoslin wants to merge its grunt file cleanup first) but the commit is not rebased on the current master. would you mind rebasing it?,neutral
angular-ui/bootstrap,karma,2013-04-06T18:44:10Z,pkozlowski-opensource no problem. rebased.,neutral
angular-ui/bootstrap,karma,2013-04-06T21:31:23Z,i'll merge it then add my stuff in! thanks l42y!,positive
angular-ui/bootstrap,karma,2013-04-06T21:32:45Z,landed in 38d8c383f3d7adbf9dfd84891b820e961be4bc9d,neutral
yang-wei/rd3,eslint,2016-03-30T14:06:13Z,some works need to be done. - [x] update dependencies (hope to remove both react and d3 from dependencies)- [x] demo page (is now difficult to maintain)- [x] documentation (keep using wiki or show more in demo page)- [x] eslint- [x] update the original repository about `rd3`- [x] babel 6 for smaller bytes,positive
yang-wei/rd3,eslint,2016-04-10T08:44:29Z,yang-wei i prefer airbnb config as well. i'll configure running eslint as an npm script and open a pr.,positive
yang-wei/rd3,eslint,2016-04-10T09:03:44Z,add eslint airbnb config. - 'npm run lint' to run the linter- 'npm run lint:fix' to run the linter and fix errors & warnings that can be automatically fixable- resolve automatically fixable lint errors & warnings,positive
yang-wei/rd3,eslint,2016-04-10T09:04:31Z,yang-wei this pr does not resolve all errors/warnings. do you want these resolved in this initial pr as well?,neutral
yang-wei/rd3,eslint,2016-04-10T14:26:49Z,everything looks good to me.>  do you want these resolved in this initial pr as well?this will be cool and i will merge this once its done.i will be offline for 3 days from tomorrow but i will merge it asap once it's done =),positive
yang-wei/rd3,eslint,2016-04-13T03:44:03Z,jonase hey thanks for it. i tried it on local and realise we need to resolve a lot of lint error manually. do you plan to solve it or i can take care of them?,positive
yang-wei/rd3,eslint,2016-04-13T03:50:06Z,yang-wei i've been planning to resolve the last of them. hopefully i don't break anything and the tests still pass. i would also need to test at least the examples before we merge.,neutral
mout/mout,jshint,2013-09-03T22:21:58Z,fix jshint errors and add jshint to travis.yml. make sure we run jshint on the ci process. will reduce amount of dumb errors (we only break rules when it makes sense) and should also help to keep commit history cleaner (so blames/diffs works better).closes #42,neutral
pypyjs/pypyjs,selenium,2015-05-16T09:40:47Z,what's about using selenium for unitests?,neutral
pypyjs/pypyjs,selenium,2015-05-16T10:09:07Z,i worked on basic selenium tests and create a pull. if ready ;),neutral
Polymer/polymer,eslint,2017-08-18T02:01:18Z,hi azakus. which branch should i base to?,neutral
Polymer/polymer,eslint,2017-08-20T12:51:46Z,duykhoa i like this pr. but can you commits into`master` branch,neutral
Polymer/polymer,eslint,2017-08-21T01:42:44Z,baocang can. i will make another pr.,neutral
angular/angular-cli,jasmine,2016-08-17T18:39:52Z,try installing types/hammerjs : npm i --save-dev types/hammerjsthen edit tsconfig.json file and add hammerjs to the types section."types": [      "jasmine". "hammerjs"    ],neutral
angular/angular-cli,uglify,2017-08-23T08:18:49Z,a use angular cli but i have no ` "uglify-js"` in my `package.json` to replace. do you know how to deal with that situation ?,neutral
angular/angular-cli,uglify,2017-08-24T09:28:55Z,you should be able to just remove `node_modules/uglify-js` and then `npm install`.,neutral
angular/angular-cli,uglify,2017-09-06T14:13:16Z,feat(angular/cli): support es2015 target. the cli will now prefer es2015 modules and use `uglify-es` for an app when the typescript configuration uses `"target": "es2015"` or greater.you can change `"target": "es2015"` in the root `tsconfig.json` and it will be picked up by the other tsconfigs.fix #2907fix #7532,neutral
angular/angular-cli,uglify,2017-09-13T11:10:37Z,thanks for this? is there a plan for merging this soon ?,positive
angular/angular-cli,uglify,2017-09-13T19:32:16Z,i bow!,neutral
angular/angular-cli,uglify,2017-09-13T19:34:09Z,i think a lot of issues on angular repo should be closed by this. and even more on s.o.,neutral
yui/yuidoc,istanbul,2013-01-17T19:41:54Z,invert coverage by running ytestrunner under istanbul. unfortunately you need to use the undocumented `--yui` flag for this (so it hooks the yui loader as well). and i plan to take it out and replace it with something else later.as long as you are willing to make minor changes to the command line when i fix this. you can accept my pull request.otherwise what you are doing seems to be the best option for now.,positive
yui/yuidoc,istanbul,2013-01-17T20:11:09Z,thanks!,positive
bbc/bbc-a11y,standard,2017-03-10T12:47:44Z,warnings. warnings instead of errors for some standards checks.they are considered separate from errors. print out differently in the pretty formatter. and don't cause your build to fail.,negative
bbc/bbc-a11y,standard,2017-03-17T11:16:39Z,simplify reporter api. simplifies the reporter api by moving logic into objects that capture validation failures.improves the json reporter and fixes a bug with counting skipped standards,neutral
bbc/bbc-a11y,standard,2017-03-31T18:33:26Z,this now submits the html to the w3c validation web service. which is considerably slower than all other standards checks. before i fix all the other scenarios. do we like this change? we could support it but disable it unless you opt in to it...jamieknightbbc emmajp what do you think?,positive
bbc/bbc-a11y,standard,2017-03-31T18:34:24Z,(on a positive note. this has forced me to make the standards checks asynchronous. which may be useful in other future scenarios),positive
appfeel/node-pushnotifications,coveralls,2017-02-08T22:05:22Z,alex-friedl there is a branch from your pull request that is not covered with tests. i would like to publish this new feature to npm. could you provide a test for the remaining branch?i've integrated with coveralls. so now you can run `npm run test-cover` and will see report of uncovered branch.thanks again for your effort! :),positive
peterramsing/lost,codecov,2017-06-15T03:22:02Z,barrythepenguin. as always you're awesome! i'm gonna tackle some of the other mr's first and then get back to this one as this one is more of a chore.,positive
chiefy/vaulted,istanbul,2015-11-25T04:54:06Z,chore(project): add support for code coverage reports. add istanbul to support looking at code coverage for the project.,negative
mostjs/core,standard,2017-08-28T02:40:26Z,chore(core): switch to prettier-standard. **wip**  i think is a good place to have a discussion let me know what you guys think,negative
mostjs/core,standard,2017-08-28T11:55:25Z,yes it seems you are correct it's not that obvious since to me if you are using prettier and standard i would expect both linting and formatting not only one that's a shame,positive
mostjs/core,standard,2017-08-28T12:00:26Z,separation of concerns. my dear friends.,positive
mostjs/core,standard,2017-08-28T12:26:13Z,i will try out a few things it would be nice to have a simple instal package that brings both without config hassles it shouldn't be this messy,positive
mostjs/core,standard,2017-09-01T11:31:49Z,standard && prettier,positive
mostjs/core,standard,2017-09-01T11:32:08Z,closing in favor of #121,neutral
mostjs/core,standard,2017-09-01T23:54:08Z,chore(linting): only add standard for now. third time the charm,positive
mostjs/core,standard,2017-09-01T23:54:27Z,closing in favor of #122,neutral
mostjs/core,standard,2017-09-02T00:06:07Z,this is awesome. davidchase. thanks for trying out several alternatives!,positive
marko-js/marko,istanbul,2016-06-03T01:21:14Z,coverage. adds coverage reporting through istanbul and coveralls.  we'll need to set up marko on [coveralls]( but it's a pretty painless process.,positive
marko-js/marko,istanbul,2016-06-03T01:47:06Z,nice pr mlrawlings! did you consider using `--include-all-sources` in the istanbul command for  coverage against the whole codebase?,positive
marko-js/marko,istanbul,2016-06-03T03:16:40Z,awesome! thank you for taking the time to do that. i have finished setting up coveralls and now we have a working badge. thanks again!> did you consider using `--include-all-sources` in the istanbul command for coverage against the whole codebase?yomed: would you be interested in trying that out to see if it makes the coverage more accurate?,positive
marko-js/marko,istanbul,2016-06-03T03:42:52Z,improve npm test script. added `--include-all-sources` option to istanbul command. this reduces coverage from around 87% to 83%. but it should be more accurate because it includes untested files - for example `bin/markoc.js`. also  changed the script to reuse `npm run jshint` from below for linting.,neutral
US-CBP/cbp-theme,standard,2017-09-22T14:14:17Z,this is further complicated in angular as the `#` used by the links causes the angular routing to change.  would be nice to be able to use standard buttons vs dummy links.,positive
pghalliday/grunt-mocha-test,mocha,2013-04-18T13:52:05Z,what command did you actually run?`npm install grunt-mocha-test`works fine for me,positive
pghalliday/grunt-mocha-test,coveralls,2014-02-09T11:47:49Z,still getting to grips with coveralls :),neutral
photonstorm/phaser,jshint,2014-03-21T11:27:34Z,awesomeness :) i've had to tidy your code a bit to get it to pass jshint. but otherwise this is great. thank you!,positive
photonstorm/phaser,jshint,2014-03-25T21:58:40Z,run jshint as part of build process and fix jshint errors,neutral
photonstorm/phaser,jshint,2014-03-26T15:46:29Z,it took me ages to check over every single file you updated :) but thankfully i can merge this into dev now. thank you.,positive
photonstorm/phaser,jshint,2014-04-10T23:18:51Z,sweet - i can see i'll have some work to do tidying this up for jshint. but thanks :),positive
photonstorm/phaser,jshint,2014-04-10T23:24:04Z,ah sorry rich. i will run the jshint task and fix problems in my next pr. i postponed to get comfort with jshint long enough :) i hope it's okay with this last one.,positive
npm/npm,standard,2015-05-17T10:15:23Z,i've never seen `"closed"` before but i have see a lot of `"license": "private"`. afaik `"private"` is the defacto standard for this thing.,neutral
npm/npm,standard,2015-05-17T10:51:08Z,timoxley i'd gladly change to private. is that an acceptable name by spdx standards? we should probably document that somewhere.,neutral
npm/npm,standard,2015-05-18T20:15:18Z,kemitchell is the person with the most domain knowledge for best practices. but i believe the commonly accepted practice is to include `licenseref-license`. and then have the text of your license in `license` or `license.md`. because proprietary licenses vary from project to project. it's not really possible to boil them down to a standard like spdx does. and as a consumer. you're going to have to review the text of proprietary licenses anyway to use them responsibly and legally. does this address your concern. kesla?,negative
npm/npm,standard,2015-05-21T21:22:39Z,indeed you can't. which is rather unfortunate. especially since there exists infrastructure and standards for how to deal with separating config and non-config data.,negative
mishoo/UglifyJS2,uglify,2013-04-09T21:54:13Z,agreed. but that wasn't the point. i was trying to test whether there exists a scenario in which tokenization yields a size improvement. or if gzip _always_ handles string minification better than uglify could. the tests revealed that in fact. tokenization is always more effective than gzip. for a next step i'll try to prototype a string minifier and see how it performs for something like jquery.,positive
mishoo/UglifyJS2,uglify,2013-04-15T14:11:38Z,hmmm. you're right. i thought it was a bug in uglify because the chrome console's strange behaviour on a breakpoint here tricked me:> a = (e = session.get("step"). e)>   null> e>   undefinedbut now i see that such strange behavior is a bug in chrome:> e = 123>   123> e>   undefinedso who knows what's going on here. but i can fix it by checking against null as well as undefined. and it's not uglify's fault.,negative
1602/jugglingdb,mocha,2013-03-25T19:58:30Z,as you can see all tests except common tests rewritten in mocha. and only common tests still in nodeunit. and this is the next candidate for removing. because after years this file becomes huge and unusable. i want to split this file into several test: for relations/scopes. include. queries. adapter as currently done for validations. hooks and defaults.then adapters will be able to choose which tests to import from the main package.,neutral
1602/jugglingdb,mocha,2013-03-25T20:00:25Z,could you please add some test which will fail without this fix. i'm in middle of rewriting this module. so i need it to prevent regression. create separate file and use mocha (take a look at test/defaults.test.js as example).thanks!,positive
Netflix/falcor,coveralls,2015-07-22T21:28:20Z,michaelbpaulson sdesai it appears that our coveralls is not running for checkins.,neutral
Netflix/falcor,coveralls,2015-07-23T18:43:54Z,hmm. coveralls is still froze.,neutral
socraticorg/mathsteps,mocha,2017-01-24T22:03:38Z,note that i had to add `"test": "mocha --recursive"` to explicitly define the test suite runner script. since having a `scripts` property in `package.json` overrides the defaults.,neutral
testem/testem,istanbul,2016-05-02T05:29:10Z,+10,neutral
mochajs/mocha,mocha,2013-01-08T00:30:46Z,what's the plan on this? this is making travis + mocha-phantomjs completely useless for me as failing tests just hang until travis kills the task (meaning i get a 'broken' notification 30 minutes later),negative
mochajs/mocha,mocha,2013-01-08T01:19:15Z,low priority but yeah i'd agree with that,negative
mochajs/mocha,mocha,2013-01-08T11:32:18Z,incomplete test summary in cygwin. when tests are running in an cygwin environment the test summary is incomplete.sampletest:``` javascriptvar expect = require('chai').expect;describe('testsuite'. function () {    describe('thing'. function () {        it('should be true'. function () {            expect(true).to.be.false;        });    });});```when running `mocha mytest.js --reporter spec` in the normal windows console this is what i get:(everythings fine. just imagine the color)```d:\dev\mochateststuff>mocha mytest.js --reporter spec  testsuite    thing      1) should be true  ? 1 of 1 test failed:  1) testsuite thing should be true:     expected true to be false```running in cygwin:(the summary is missing. also no colors)```meralanis /cygdrive/d/mochateststuff$ mocha mytest.js --reporter spec  testsuite    thing  ✖ 1 of 1 test failed:```i did a little digging through the code and it appears that the `end` event of the runner isnt fired.from the spec runner:```runner.on('end'. self.epilogue.bind(self));```,negative
mochajs/mocha,mocha,2013-01-08T13:38:50Z,we're making use of the fix implemented in this pull request. and it fixes our problems with running through mocha-phantomjs as well as showing no negative effects with the standard in-browser html reporter. i think this could ideally be merged. and then work could be done to display the diffs in the html reporter as well going forward...,neutral
mochajs/mocha,mocha,2013-01-08T15:51:10Z,qunit interface: adds support for built-in assertions. including expect(). this patch modifies the qunit mocha interface to support all of qunit's built-in assertion methods. including expect (the method that allows you to declare how many assertions are in a given test case).i realize this is somewhat against the design philosophy of mocha in that it ties assertion handling into the test runner. but in doing so it gains the ability to use the expect() method of qunit. which requires some minor integration with the test runner to be able to work.i've added tests. but since some of them are negative tests that are expected to fail. i haven't tied them into the build system though the makefile. as don't know if there's an existing paradigm for those conditions.feedback welcome of course!,negative
mochajs/mocha,mocha,2013-01-08T16:19:13Z,we weren't necessarily going for feature parity with qunit. i definitely don't see us ever coupling with an assertion lib,neutral
mochajs/mocha,mocha,2013-01-08T16:28:56Z,it could be an interface that we add to the mocha wiki page as third-party. basically just duplicate the qunit interface instead of extending it,neutral
mochajs/mocha,mocha,2013-01-08T16:42:32Z,yeah. i'm fine with that approach.  so i would need to programmatically create a mocha instance and then overwrite the mocha.interfaces.qunit object with my own. right?,positive
mochajs/mocha,mocha,2013-01-08T19:13:33Z,it does work to override the mocha.interfaces.qunit setting.  it would maybe be nicer if there was some way to do that from the mocha command line. but this works.   i'm closing this pull request and i'll create another repo with just this overridden interface and write up an article for the wiki on how to use it.,neutral
mochajs/mocha,mocha,2013-01-08T20:59:22Z,ideally we handle it like the reporters where you can just do `--reporter npm-module-name` but `--ui my-qunit-stuff`. i dont remember us adding that yet though,neutral
mochajs/mocha,mocha,2013-01-08T21:48:19Z,yeah there's been some discussion about this. it's a bit of a tough call. i dont want to bloat mocha with a bunch more options. i think we should just come to a conclusion on what's expected. i'm a bit torn between the two personally. we could also clutter the output a bunch more and add both but that's pretty ugly,negative
mochajs/mocha,mocha,2013-01-08T21:50:30Z,:d i really need to work in mocha using components,neutral
mochajs/mocha,mocha,2013-01-08T21:51:07Z,yeah. having it work like the reporters would be great.,positive
mochajs/mocha,mocha,2013-01-08T21:51:25Z,im no help with windows unfortunately :( if you discover anything that looks suspicious let me know,negative
mochajs/mocha,mocha,2013-01-09T06:59:52Z,i checked which events get _actually_ fired when the reporter runs:``` javascript    var _emit = runner.emit;    runner.emit = function() {        fs.appendfilesync(path.join(process.cwd(). 'dbg'). arguments[0] + '\n'. 'utf8');        _emit.apply(runner. arguments);    };```as it turns out either way the events get fired correctly:```newlistenernewlistenernewlistenernewlistenernewlistenernewlistenernewlistenernewlistenernewlistenernewlistenernewlistenernewlistenernewlistenerstartsuitesuitesuitetestfailtest endsuite endsuite endsuite endend```it looks like it is an issue with the cursor moving thing that is done (like `cursor.cr();`) and that the cygwin console doesnt get along with it.thus this might be some cygwin configuration issue that turns up in any application that uses these console directives and is not mocha specific.,negative
mochajs/mocha,mocha,2013-01-11T15:40:32Z,+1  if not included in test timing. just a separate timing log for the before/after functions.,neutral
mochajs/mocha,mocha,2013-01-11T16:55:49Z,in #700 this was brought up again. i think for now maybe aggregating them would be safest. this gets a little tricky since multiple beforeach's can be used even at the same level so describing them in the output would be very verbose unless it's opt-in,positive
mochajs/mocha,mocha,2013-01-15T09:59:25Z,http client test. considering the following code:``` javascriptvar http = require('http');var options = {  hostname: 'localhost'.  port    : 3000.  path    : '/api'.  method  : 'post'};function post(text. cb) {  var req = http.request(options. cb);  req.write(text);  req.end();}```and a mocha test. like this one:``` javascriptdescribe('http client test'. function() {  it('will make the request (first)'. function(done) {    post('foo'. function(res) {      throw new error('bar');    });  });  it('will make the request (second)'. function (done) {    post('foo'. function (res) {      throw new error('bar');    });  });  it('will make the request (third)'. function (done) {    post('foo'. function (res) {      throw new error('bar');    });  });  it('will make the request (fourth)'. function (done) {    post('foo'. function (res) {      throw new error('bar');    });  });  it('will make the request (fifth)'. function (done) {    post('foo'. function (res) {      throw new error('bar');    });  });  it('will not make the request (sixth)'. function (done) {    post('foo'. function (res) {      throw new error('bar');    });  });  it('neither will this one (seventh)'. function (done) {    post('foo'. function (res) {      throw new error('bar');    });  });});```the result is:```http client test  1) will make the request (first)  2) will make the request (second)  3) will make the request (third)  4) will make the request (fourth)  5) will make the request (fifth)  6) will not make the request (sixth)  7) neither will this one (seventh)× 7 of 7 tests failed:1) http client test will make the request (first):   error: bar2) http client test will make the request (second):   error: bar3) http client test will make the request (third):   error: bar4) http client test will make the request (fourth):   error: bar5) http client test will make the request (fifth):   error: bar6) http client test will not make the request (sixth):   error: timeout of 2000ms exceeded7) http client test neither will this one (seventh):   error: timeout of 2000ms exceeded```as you can see. after the fifth failed test (the first five). every subsequent test fails because of a timeout. they do not fail because of the throwed error. they fail with a timeout.generally speaking. after 5 test error involving an http request. every other test that also depends on an http request (in a async fashion. of course). will fail with a timeout. their requests will not even hit the server.any idea what's going on?,neutral
mochajs/mocha,mocha,2013-01-16T19:05:36Z,never worked. mocha explicitly exit()s at the end so you don't have to gc all of node's junk (open sockets. intervals. etc). going to close just because this wont be feasible in the near future. however some people are convinced they _need_ this feature. even though i strongly disagree. we may add some sort of method that stops mocha from running in the first tick (we have a few issues for this open i believe),neutral
mochajs/mocha,mocha,2013-01-22T01:56:09Z,argh. i didn't realize this was mocha's issue box. google took me here and i got disoriented. it's your project. so it's all good. i wouldn't have meant to press my opinion so hard.i'm also considering a flatter style with a hierarchal naming convention. to reduce jumping around the file.,negative
mochajs/mocha,mocha,2013-01-22T19:00:43Z,add option for passing a writeablestream to mocha on init for logging purposes. i'm interested in running a mocha instance and capturing output in a writeablestream. right now mocha uses `console.log` to echo all its messages. to accomplish this. i have to listen to stdout and do some extra work. this could be made easier with an optional stream that the user passes in and simply default to `console.log`. for example:``` coffeescriptmystream = fs.createwritestream("path/to/my/file")mocha = new mocha  ui: 'bdd'  reporter: 'spec'  stream: mystream  # defaults to console.log```,negative
mochajs/mocha,mocha,2013-01-23T21:21:44Z,is there any objection to mocha printing both the error message and the diff? diffs are helpful. but imho the message is essential.,negative
mochajs/mocha,mocha,2013-01-24T13:26:09Z,i believe this is because i am using the grunt task simple-mocha. if i run using mocha from the command line. this works as expected.,neutral
mochajs/mocha,mocha,2013-01-25T20:20:31Z,the problem is that `mocha.run` is synchronous in ie and asynchronous in all other (good) browsers. you can use the following code to have the same behavior everywhere.``` jsif (window.activexobject || !window.postmessage) {    (function() {        var timeouts = [];        process.nexttick = function(fn) {            timeouts.push(fn);            settimeout(function() {                if (timeouts.length) timeouts.shift()();            }. 0);        }    })();}watch(mocha.run());```this will also fix #502 at the same time. isn't life beautiful?of course it would be perfect if tj could commit the fix directly in mocha.,neutral
mochajs/mocha,mocha,2013-01-27T20:16:07Z,it never should have worked haha. mocha was never designed to nest test-cases. they're supposed to be nested within "suites" with the describe() calls etc,neutral
mochajs/mocha,mocha,2013-01-31T01:09:47Z,i think it would still be useful to provide the file name parameter that's in this pull request because some node modules also emit their own messages to stdout (and don't provide a method to disable them). this is the hack i settled on to get my coverage json:```mocha -r json-cov $file | perl -0777 -pe "s/(?s).*?{\n/{\n/" > $file-coverage.json```,negative
mochajs/mocha,mocha,2013-02-05T13:34:03Z,using latest mocha for browser. i can access: mocha.reporters.base,neutral
mochajs/mocha,sauce,2016-04-22T06:36:10Z,also. what's the relationship between this issue and #1732?,neutral
mochajs/mocha,istanbul,2017-01-11T23:49:09Z,if there's any other way to get `--harmony_async_await` working. i'm for it. i'm using `_mocha` with `istanbul`.,neutral
mochajs/mocha,eslint,2017-05-09T20:35:24Z,this is problematic.  :( it's fine for command-line users. but it can impact integration with ides.we also seem to have lost some rules.  there are no more complaints about a lack of `'use strict'` where there should be.,negative
mochajs/mocha,eslint,2017-05-09T20:42:25Z,`test/integration/fixtures/simple-reporter.js` fails a lint check that wouldn't have failed before this change,negative
mochajs/mocha,eslint,2017-05-10T00:19:47Z,personally i don't use editor integration for linting. i think this issue depends on people and the team who use it. if you evaluate the negative impact is bigger than the benefits here. i think it makes sense to switch back to eslint cli.,neutral
mochajs/mocha,eslint,2017-05-12T04:54:27Z,> for this particular pr. i'd say adding a .eslintignore file would be needed.we have an `.eslintignore` file already. which was not removed.  this should be gtg.,neutral
dfahlander/Dexie.js,eslint,2016-04-05T15:04:24Z,develop. - bug in bulkput() when using crud hook and mixing updates and creation ed19e64- don't care about order in crud hooks expected oplog 2915cbb- revert "don't care about order in crud hooks expected oplog"  …         c365bab- don't use "let". babel translates it to creating a closure even when …  …         9205691- eslint corrections + moved 'stack' method between modules.            2d42749- throw if not using dexie.promise from transaction scopes.  …            1214974,neutral
dfahlander/Dexie.js,eslint,2016-04-06T13:35:27Z,run eslint on release.,neutral
dfahlander/Dexie.js,eslint,2016-04-06T23:49:57Z,empty eslint file for build tools.,neutral
dfahlander/Dexie.js,karma,2016-04-06T23:28:15Z,travis. setup for travis continous integration tests with karma / firefox.,neutral
node-schedule/node-schedule,eslint,2015-03-04T19:16:43Z,add code linting. this would make it a lot easier to enforce code standards and could be integrated into travis so that it lints and tests all pull requests. i'll submit a pull request using eslint. which is highly configurable and seems to be what everyone is moving towards these days.,negative
node-schedule/node-schedule,eslint,2015-03-05T19:49:52Z,move eslint to devdependencies. so that it doesn't install eslint everytime the package is installed,neutral
NaturalNode/natural,jasmine,2014-02-24T21:51:29Z,so there we go. i did the tokenizer. since i'm here. i don't think the spanish one is working. it suffers from the same problem i mentioned here with diacritic chars...i'm also doing a new pull request shortly to add jasmine-node as dev dependecy,negative
sitespeedio/sitespeed.io,selenium,2015-03-05T06:58:21Z,hi badrinathvm .so we are trying out support for ie & safari. right now you need to start the selenium jar yourself. but in latest nodejs selenium it is possible to start them easier. meaning maybe we can add support later. however safari need safari 8 to work (only mac right) and ie needs windows.bestpeter,positive
karma-runner/karma-sauce-launcher,sauce,2014-03-03T12:46:30Z,it may not be as simple as this. for some reason it hangs when trying to close sauce-connect. i'm clearly missing something ;),neutral
karma-runner/karma-sauce-launcher,karma,2014-03-06T22:21:51Z,+1 to slow shutdown. i see the `heartbeat` method is being run repeatedly. just an observation.what's the state of this?,neutral
karma-runner/karma-sauce-launcher,karma,2014-03-09T13:30:41Z,#8,neutral
felixrieseberg/ember-electron,mocha,2017-02-23T20:20:38Z,this is rebased. and i *think* it works because when i fix all the absolute `require('ember-electron/...')` paths to be relative i can run `ember electron:test` and it passes. but since a whole bunch of mocha tests are failing in master. i can't tell if this pr breaks any functionality that they are supposed to be testing.,negative
felixrieseberg/ember-electron,mocha,2017-03-15T09:48:31Z,reload.js expects testing environment to be qunit. add support for other testing libs. in its current iteration reload.js seems to check for env by looking for qunit. we should try to read the env in a different way to support other testing environments like mocha.,neutral
felixrieseberg/ember-electron,mocha,2017-03-16T00:45:56Z,yaaaaaaaas. i remember chatting about this with felixrieseberg yonks ago.also. looks like this may be solved by #188? i was able to get rid of that check using `nodeprocess.cwd()`,negative
elm-community/elm-webpack-loader,mocha,2015-12-08T17:06:30Z,i think i'll open a pr to migrate the tests to `mocha` and `chai` and follow the same patterns you used for `node-elm-compiler`. using different frameworks is going to make it unnecessarily difficult to transfer learnings between the two projects.,neutral
google/closure-library,sauce,2015-09-03T00:42:13Z,using sauce labs works around this,neutral
matrix-io/matrix-cli,mocha,2017-02-20T18:50:16Z,doesn't enforce our space standard. please see `.jshintrc````{  "node": true.  "browser": true.  "esnext": true.  "bitwise": true.  "camelcase": false.  "curly": false.  "eqeqeq": true.  "immed": true.  "indent": 2.  "latedef": true.  "newcap": true.  "maxdepth": 8.  "maxparams": 4.  "asi": true.  "noarg": true.  "quotmark": "single".  "regexp": true.  "undef": true.  "unused": true.  "strict": false.  "trailing": true.  "smarttabs": true.  "laxcomma": true.  "mocha": true.  "node": true.  "globals": {    "matrix": true.    "debuglog": true.    "app" : true.    "$": true.    "_": true.    "t": true  }}```,positive
hpcc-systems/Visualization,mocha,2015-08-09T06:57:20Z,can you change commit message to something like:```gh-665 add unit testsadd unittesting using mocha. chai and phantomjs.fixes gh-665```,neutral
hpcc-systems/Visualization,mocha,2015-08-09T07:37:59Z,mlzummo. jbrundage. dtsnell4. buunguyen - welcome to unit testing.anmoljagetia has just added a base unit testing framework (mocha. chai. phantomjs) which "we" will be augmenting as time goes on.  this is my first test case and it caught 1 missing class name...please review.,positive
hpcc-systems/Visualization,mocha,2015-08-12T20:13:49Z,gordonsmith i cant get amchart pie to pass phantomjs mocha. even on preivous branches now that have already passed in the past (locally as well),neutral
hpcc-systems/Visualization,karma,2017-05-28T09:51:44Z,move to lerna package style. reintegrate hpcc-js-comms back into visualizationadd karma testssigned-off-by: gordon smith <gordonjsmithgmail.com>,neutral
danvk/dygraphs,karma,2015-03-06T17:19:38Z,apologies for the long radio silence. i'm looking at this now.,neutral
danvk/dygraphs,karma,2015-03-06T17:43:56Z,no worries. i understand things get in the way.,positive
danvk/dygraphs,karma,2015-03-06T22:27:52Z,oh. and gulp vs grunt. i prefer gulp for its pipeline management versus config management that grunt does. basically in gulp you setup a bunch of pipelines and manage input/output. grunt you configure a bunch of plugins ahead of time and then run a bunch of tasks individually.,neutral
danvk/dygraphs,karma,2015-03-08T18:52:05Z,(also. let me know if you'd prefer me to take it over from here—i'm happy to do so.),positive
chentsulin/electron-react-boilerplate,eslint,2015-12-02T01:01:39Z,fix eslint and coding styles,neutral
chentsulin/electron-react-boilerplate,eslint,2015-12-08T15:20:19Z,add local eslint to package.json. every time i start a new project with this boilerplate i am getting the error in atom. that i have no local `eslint` installed.how about adding this as local dependency?,negative
chentsulin/electron-react-boilerplate,eslint,2015-12-08T17:30:59Z,sorry. my fault. i just had not installed the dependencies from `package.json`. now it works.,negative
AnalyticalGraphicsInc/cesium,jasmine,2017-10-23T17:31:35Z,so i just found a larger issue where we never properly merged the "old jasmine" (browser) and "new jasmine" (node). so the "release" variable isn't being detected when you run manually.  i pushed a fix but want to do some more testing (at which point i'll reset this branch and it will hopefully be ready).,neutral
AnalyticalGraphicsInc/cesium,eslint,2017-11-13T22:56:40Z,i have already sent a cla. i failed eslint. but corrected the errors.,negative
pinterest/esprint,eslint,2017-06-09T03:21:32Z,clean up code and consolidate usage of cliengine where possible. mostly a diff to clean up `cli.js` and break up things a little bit more. there's still some pretty big refactoring to be done with how we spin up the eslint instance between worker threads. but i want to try to tackle that in a separate diff.,neutral
pinterest/esprint,eslint,2017-06-27T20:38:50Z,the readme says: > if the port key is not specified in the .eslintrc file. then esprint will run parallelized eslint without standing up a background server.doesn't this conflict?,negative
redfin/react-server,eslint,2016-05-25T17:37:58Z,build hygenie; try to log more information about the failure. working on #216 i'm getting a bunch of weird. inconsistent build failures that manifest as `exit status 1`; i'm trying to get them to log more information.  while i'm at it. i'm also cleaning up some stray comments (copy-pasted from the eslint docs) and standardizing our build scripts on tabs. rather than a mix of tabs and spaces.,negative
Sharlaan/material-ui-superselectfield,codecov,2017-11-13T22:04:51Z,useless codecov comment. anybody knows how to turn off commenting on pull requests?,negative
phoenixframework/phoenix,mocha,2016-11-19T20:02:19Z,chrismccord i've now completed a first pass at unit tests for the `socket` class. i'm pretty sure this gives us coverage for all the socket functions. either explicitly or implicitly. there may be a few pathways missing (like testing against a mock `activexobject` object). but this may be good enough as a start. i opted for duplication in areas like setup and teardown of tests in the interest of local readability and perhaps to help highlight dependencies and coupling for future refactoring. i'm interested in tackling tests other exported classes in `phoenix.js` perhaps in separate prs.looking forward to your feedback!,positive
phoenixframework/phoenix,mocha,2016-12-07T06:48:27Z,you are my hero! thank you so much for paying down my lack of js test debt. this will make future iterations must nicer. looks great and i'm sure now we've improved the bus factor on the js client :) welcome to the club!,positive
phoenixframework/phoenix,mocha,2016-12-07T13:40:17Z,w00t! thanks!i'd be interested in working on some js tests for `channel` next if you think that would be helpful.,positive
phoenixframework/phoenix,mocha,2016-12-07T16:02:33Z,yes. please do! that would be extremely helpful. we particularly could use tests on the push join/receive/timeout chains.,positive
vatesfr/xen-orchestra,standard,2015-09-01T18:25:25Z,comply to coding standards. no more warning from standard.js,neutral
webpack-contrib/grunt-webpack,codecov,2016-11-09T14:18:54Z,add codecoverage and cleanup. | q                 | a| ----------------- | ---| bug fix?          | no| breaking change?  | no| new feature?      | no| deprecations?     | no| spec compliancy?  | no| tests added?      | no| docs updated?     | no| fixed tickets     | no| license           | mit,neutral
baudehlo/node-phantom-simple,mocha,2015-07-07T22:13:20Z,improve testing & fix broken tests. - [x] `mocha` is a bit more comfortable for management. use it instead of custom script.- [x] 1 test (testunexpectedexit) hangs after last commit with slimerjs support (shame on me).- [x] 3 other tests broken (did not digged yet).- [x] add pass with slimerjs testing.- [x] no global dependencies. add phantomjs & slimerjs to devdeps.- [x] automate with travis-ci,positive
baudehlo/node-phantom-simple,mocha,2015-07-09T11:37:27Z,complete!,neutral
moment/moment,sauce,2013-12-25T20:28:07Z,testing/sauce labs integration. this is a continuation of #1301alexstrat any comments? i already used this setup to test the latest release. so in terms of usability -- it works (haven't tested the travis build hooks though).a few tests fail right now (ie8 and safari). these are being worked on. so ignore them :),negative
moment/moment,sauce,2013-12-25T21:59:44Z,todo:- [ ] fix the broken tests. or somehow make the build succeed with broken tests (don't think it is a good idea)- [ ] the sauce launcher is broken. it thinks it prints to a terminal. and if the terminal is too narrow (or there is no terminal) it prints status of each browser a few times per second. which floods the logs like crazy -- travis is complaining,positive
moment/moment,sauce,2013-12-27T09:55:38Z,looks good!concerning the terminal issue. you should probably change the reporter to something more travis friendly like the `dot` reporter.,neutral
moment/moment,sauce,2013-12-28T02:23:46Z,this is so awesome. is this ready to merge?,positive
moment/moment,sauce,2013-12-28T20:25:07Z,ok. i'm happy with this. good work!,positive
moment/moment,sauce,2013-12-29T09:48:17Z,we have a bug with weekyear/week/weekday setters. lets fight it in another issue/pr.,negative
moment/moment,sauce,2013-12-31T20:53:05Z,fix prs failing in travis. prs now pass travis build. because they don't execute sauce tests,negative
bustle/mobiledoc-kit,sauce,2016-02-23T22:52:30Z,yoranbrondsema thank you! can we travis-encrypt the sauce account/username for ci? i'll review this locally soon. hopefully tonight.,positive
bustle/mobiledoc-kit,sauce,2016-02-23T22:53:56Z,> can we travis-encrypt the sauce account/username for ciif that's viable. i will encrypt and add the official mobiledoc-kit sauce labs credentials into the .travis.yml,neutral
calvinmetcalf/catiline,sauce,2013-06-07T01:17:18Z,soucelab. gets sauce lab integration working. all working except firefox. which passes manually though.,neutral
calvinmetcalf/catiline,sauce,2013-06-08T14:23:49Z,firefox in saucelabs. firefox fails in sauce lab tests but not when done manually. looks to be some sort of global leak.,neutral
Modernizr/Modernizr,sauce,2013-11-28T09:23:28Z,add saucelab unit testing support. - added encrypted details to travis config- created json file with list of browsers to test in- added relevant gruntfile updates- i only run the basic tests no caniuse matching as it was difficult to get any browser passing for some reason.## known issues- ie6 and firefox won't run correctly i have open issues on saucelabs forums for these- ie7. 8 & 9 have one test failing,negative
Modernizr/Modernizr,sauce,2013-11-28T11:35:47Z,travis says: `invalid api_key provided`…,neutral
Modernizr/Modernizr,sauce,2013-11-28T23:12:29Z,not sure if this is because it's trying to pull from my fork but this definitely works when running on my local using the same encrypted api key. sauce labs makes you specify the repo to which the account is connected too.,neutral
Modernizr/Modernizr,sauce,2013-11-28T23:15:51Z,ryanseddon can you retarget the pull request to modernizr:saucelab rather than modernizr:master? that way we can merge it in and not worry about issues.,neutral
Modernizr/Modernizr,sauce,2013-11-28T23:17:22Z,haha what a noob i'll branch now.,positive
Modernizr/Modernizr,sauce,2013-11-29T00:25:29Z,how do i do that without having a branch?,neutral
Modernizr/Modernizr,sauce,2013-11-29T00:47:59Z,see #1125,neutral
Modernizr/Modernizr,sauce,2013-11-29T00:55:17Z,could you either update the saucelabs keys to work for the modernizr repo. or target a non master branch on the modernizr repo so we can merge it without worrying about breaking the tests,neutral
Modernizr/Modernizr,sauce,2013-11-29T09:27:07Z,any plans to add up a browserstack setup too (presumably via your very own bunyip)? they have old android…,neutral
Modernizr/Modernizr,sauce,2013-12-03T05:03:36Z,aha so this doesn't work because environment variables are disabled on prs. so we can just merge it and see? it won't break anything other than failing the build which i can fix pretty quickly.> we remove encrypted environment variables for pull requests for security reasons.> &mdash; henrikhodne on irconce this is in then all prs will run through saucelabs test suite as the env vars are now in master in our `.travis.yml` file,negative
Modernizr/Modernizr,sauce,2013-12-03T05:04:32Z,ah. that makes sense. otherwise i could just `post` the keys somewhere in a pull request.,neutral
Modernizr/Modernizr,sauce,2013-12-03T05:19:25Z,ryanseddon it works! but it failing the actual tests on those browsers. are you going to be able to fix those tonight and/or remove those test environments until we can?,neutral
Modernizr/Modernizr,sauce,2013-12-03T09:36:40Z,fix sauce lab issues. this fixes the broken test in most browsers and i removed ie6 and firefox until i can get some advice as to why they aren't working on saucelabs.,negative
Modernizr/Modernizr,sauce,2013-12-04T23:12:23Z,i will take a look tonight and get a fix in.,neutral
praekelt/vumi-jssandbox-toolkit,mocha,2014-01-30T15:25:39Z,so the idea for tests would be that the test writer would add .before (and possible .after) tasks that do there setup? that matches mocha nicely so i'm +1 on that.,positive
mhkeller/indian-ocean,standard,2015-07-01T03:52:45Z,use standard to enforce style. here's what it would look like. thoughts? i like that it forces things like `===` for comparison and not aligning values in objects. but i'm open.,positive
mhkeller/indian-ocean,standard,2015-07-01T04:31:45Z,it's sad to see `callmemaybe` go but i guess it was never really doing anything since the callback was always the last parameter. thanks for making the changes!,negative
mhkeller/indian-ocean,standard,2015-07-01T15:40:39Z,i know. i was sad to remove it! one nice thing about `standard` is that it made it more clear that that function wasn't doing anything.,negative
mhkeller/indian-ocean,mocha,2015-07-01T04:35:16Z,tests. we need some tests for this library. what are your thoughts ebrelsford?,neutral
mhkeller/indian-ocean,mocha,2015-07-01T15:39:44Z,yeah. i was just thinking this too. mocha would be great. and i'll probably have time to get going on this in a bit.,positive
svgdotjs/svg.js,sauce,2017-03-20T12:29:11Z,fuzzyma i should also clean up the test code a bit. since ms edge will never work on appveyor.we could also migrate all our tests to [saucelabs.com]( and run our tests on 800 browsers. but i imagine the rounding differences will grow enormously.,neutral
yui/shifter,jshint,2013-01-22T18:42:27Z,i wonder if parsing `.jshintignore` files like jshint's cli does would be worthwhile? there is a sort-of precedent in shifter's `fetchjshintconfig` internal method. although. it would get rather bothersome to copy ignore files all over the place...,negative
walmartlabs/eslint-config-defaults,eslint,2015-12-16T13:45:40Z,add eslint-config-rackt config. see `eslint-config-rackt`,neutral
walmartlabs/eslint-config-defaults,eslint,2015-12-23T20:15:38Z,as a workaround you can pull this in as a proper dependency and use their config as is so long as the `eslint-plugin-react` is in your `package.json`. it would be an extraneous dependency but it won't hurt anything and your project should lint properly react or not.,negative
walmartlabs/eslint-config-defaults,eslint,2015-12-23T20:50:12Z,add "limitations" section to the readme to properly address eslint bug. explain #43 right in the readme.exogen ryan-roemer,neutral
react-boilerplate/react-boilerplate,eslint,2016-04-28T14:58:23Z,added `eslint-plugin-jsx-a11y` as recommended in #290. and it's awesome! will merge when ci passes. as now the whole linting is setup is tight too!,positive
react-boilerplate/react-boilerplate,eslint,2016-04-28T15:13:08Z,added `eslint-plugin-jsx-a11y` in #271!,neutral
react-boilerplate/react-boilerplate,coveralls,2016-02-13T23:08:16Z,> i looked into it but couldn't figure out how to integrate coveralls.io into the ci process - could you look into that?edit: see #168,neutral
react-boilerplate/react-boilerplate,coveralls,2016-02-13T23:10:15Z,it's pretty straightforward. but it requires you (project owner) to do some travis stuff. i can pr the rest.- [x] sign up for coveralls.io account. acquire token- [x] add coveralls token to your travis environment variables## - [x] install `coveralls` npm package - [x] add an npm script to submit coverage data to coveralls - [x] add a post-deploy hook to travis.yml to run that npm script- [x] add a badge in readme,positive
react-boilerplate/react-boilerplate,coveralls,2016-02-13T23:10:22Z,alright. let me check out and merge this pr and then lets get to coveralls.io. see #168!,neutral
react-boilerplate/react-boilerplate,coveralls,2016-02-13T23:27:06Z,implement coveralls task & badge.. - [x] install `coveralls` npm package- [x] add an npm script to submit coverage data to coveralls- [x] add a post-deploy hook to travis.yml to run that npm script- [x] add a badge in readme,neutral
react-boilerplate/react-boilerplate,coveralls,2016-02-13T23:32:26Z,i'm pretty sure that's because it's your `jbinto/react-boilerplate` repo. which isn't enabled. let me try and merge it. and we'll see what happens!,positive
react-boilerplate/react-boilerplate,coveralls,2016-02-13T23:35:58Z,i got the badge now. i think it's because we're not on the default branch. which is `master`.,negative
react-boilerplate/react-boilerplate,coveralls,2016-02-13T23:51:34Z,it's working since your last commit if you go directly to the .svg url.the actual badge on the repo still says "coverage unknown". but github proxies the image through `camo.githubuserconent.com` so it's probably a stale cache.,neutral
react-boilerplate/react-boilerplate,coveralls,2016-02-13T23:51:56Z,it's there now!,neutral
react-boilerplate/react-boilerplate,coveralls,2016-02-13T23:54:05Z,awesome! now we just need to get the number higher.,positive
apache/zeppelin,selenium,2016-02-09T09:07:34Z,create seperate matrix for selenium test case. ### what is this pr for?a lot of time travis ci breaks because of selenium test case. and at that point it becomes trivial to know the exact reason. hence. in this pr creating a separate matrix for testing selenium test cases.### what type of pr is it?improvement### is there a relevant jira issue?n/a### how should this be tested?check travis ui. it should have a new matrix added.,negative
apache/zeppelin,selenium,2016-02-10T08:13:22Z,could you check out #708 ? we should avoid rerunning all tests for test_selenium,neutral
apache/zeppelin,selenium,2016-02-11T04:20:49Z,actually. i think they are addressing different parts of it. it might still make sense to have a separate matrix for just ui tests - to clarify. i was saying you might want to restrict the project list and test scope to avoid running duplicates. reopen?,neutral
apache/zeppelin,selenium,2016-02-12T14:55:27Z,felixcheung the error about the cassandrainterpretertest is because for unit test. i start an embedded cassandra server and sends cql queries to test the interpreter.the exception stack just says that the interpreter cannot connect to the server. it means that the embedded server failed to start for some reason. can you give me the full stack trace or give me a link to the logs ?,negative
yeoman/generator,coveralls,2013-10-03T17:32:35Z,add test coverage. istanbul test coverage and coveralls integration.test is failing because coveralls is not activated on yeoman. you can see though the coverage report at the end of the build.now that i'm a yeoman team member. can i get access to the organization and write-access? i could setup coveralls reports and make this pr pass.,negative
yeoman/generator,coveralls,2013-10-04T15:18:06Z,> now that i'm a yeoman team member. can i get access to the organization and write-access? i could setup coveralls reports and make this pr pass.done ;),neutral
yeoman/generator,coveralls,2013-10-04T15:45:33Z,:+1:,neutral
yeoman/generator,coveralls,2013-10-04T16:08:30Z,oooooh.,neutral
yeoman/generator,coveralls,2013-10-05T13:52:23Z,yay!,positive
mapbox/cardboard,jshint,2015-06-11T02:38:19Z,jshint and jscs. style consistency checks,neutral
Esri/angular-esri-map,karma,2015-11-12T00:31:04Z,started work on this in the "karma" branch,neutral
Esri/angular-esri-map,karma,2015-11-12T06:05:19Z,fyi - core/esrilayerutils is in the karma branch b/c i had to make some changes to that file while working on the unit tests (unit tests caught some bugs!).,neutral
Esri/angular-esri-map,karma,2015-11-12T15:22:10Z,jwasil please take the tests for a spin and let me know if you have any suggestions.```npm installgulp karma-once #runs unit tests in phantomjs one timegulp karma #runs unit tests in chrome when .js files change via karma's watchgulp serve #runs unit tests in phantomjs when .js files change via gulp's watch while serving the sitegulp test #runs unit tests in phantomjs one time before running protractor tests```,positive
tildeio/htmlbars,sauce,2014-12-13T16:57:27Z,johanneswuerbach this is amazing. you make it look so easy.we absolutely would want to test prs. rwjblue do we have an official sauce lab account?johanneswuerbach maybe this should be using travis's encrypt-file or env variable options to avoid committing the sauce access tokens into the repo.browser support should be ie8. 9. 10. 11 and the last two of chrome. ff. safari. is that insane run-time wise? we test the old ies before an ember release anyway.,positive
techfort/LokiJS,jshint,2015-04-10T11:53:34Z,fixed last jshint warnings and enabled jshint as mandatory precondition to npm test. was less hassle than i initially thought ;-),negative
techfort/LokiJS,jshint,2015-04-10T13:05:38Z,i'll run it with an empty tankard. i'd better see that beer filling it!,neutral
techfort/LokiJS,jshint,2015-04-10T14:09:46Z,just make sure you watch the console carefully when you run 'npm run publish' ;-),neutral
BarkleyREI/generator-brei-app,mocha,2015-02-24T17:40:24Z,travis ci integration. it'd be a fun practice to get travis ci working so that we know the latest build always works.this might go hand in hand with writing some additional mocha tests for the generator.,positive
PeculiarVentures/node-webcrypto-ossl,coveralls,2016-08-27T05:18:51Z,add coveralls .,neutral
PeculiarVentures/node-webcrypto-ossl,coveralls,2016-08-31T07:11:12Z,hildjj this sounds good to me. we appreciate the help. sometimes i feel like were boiling the ocean ;)microshine this sounds good to me. what do you think? we could take the work that hildjj does here and use it with node-webcrypto-p11 and the browser-webcrypto-liner project. any concerns?,positive
PeculiarVentures/node-webcrypto-ossl,coveralls,2016-08-31T07:16:22Z,i like the idea to make project more usable and understandable,neutral
PeculiarVentures/node-webcrypto-ossl,coveralls,2016-08-31T07:16:44Z,hildjj let us know what you need from us. thanks for the help.,positive
PeculiarVentures/node-webcrypto-ossl,coveralls,2016-08-31T07:32:16Z,i think all i need from you is for you to create an account at  if you don't have one already. and enable this project.  travis and coveralls are now automatically integrated.  tests running for the pr now.,neutral
PeculiarVentures/node-webcrypto-ossl,coveralls,2016-09-01T21:06:11Z,i'll take a look at it.,neutral
stripe/stripe-node,mocha,2013-10-19T18:52:13Z,the basic mocha tests fail too.```....× 2 of 82 tests failed:1) flows allows me to retrieve default_currency:   error: parse error    at cleartextstream.socketondata (http.js:1584:20)    at cleartextstream.read [as _read] (tls.js:509:12)    at cleartextstream.readable.read (_stream_readable.js:320:10)    at encryptedstream.write [as _write] (tls.js:366:25)    at dowrite (_stream_writable.js:221:10)    at writeorbuffer (_stream_writable.js:211:5)    at encryptedstream.writable.write (_stream_writable.js:180:11)    at write (_stream_readable.js:583:24)    at flow (_stream_readable.js:592:7)    at socket.pipeonreadable (_stream_readable.js:624:5)    at socket.eventemitter.emit (events.js:92:17)    at emitreadable_ (_stream_readable.js:408:10)    at emitreadable (_stream_readable.js:404:5)    at readableaddchunk (_stream_readable.js:165:9)    at socket.readable.push (_stream_readable.js:127:10)    at tcp.onread (net.js:526:21)2) flows "after each" hook:   error: socket hang up    at createhanguperror (http.js:1473:15)    at cleartextstream.socketcloselistener (http.js:1523:23)    at cleartextstream.eventemitter.emit (events.js:117:20)    at tls.js:688:10    at process._tickcallback (node.js:415:13)```,neutral
stripe/stripe-node,eslint,2017-09-19T23:02:40Z,slexaxton i think in this case it would be a matter of splitting stripe/eslint-config-stripe into a not-react-y repo and a react-y repo. and then having `stripe-node` make use of the not-react-y one; i briefly looked at pulling it in. but ... there were _so many dependencies_ it scared me off.is that what you meant?  i.e.. 'yes' to splitting `stripe/eslint-config-stripe`?,negative
stripe/stripe-node,eslint,2017-10-16T13:00:52Z,brandur-stripe jlomas-stripe okay. i think we should go ahead and merge this pr. it keeps us more or less in the same place as before but upgrades the toolchain to use eslint.using the `eslint-config-stripe` config will require a bigger effort as jlomas-stripe mentioned (i.e. we'd need to split the config to remove all the frontend/react stuff before we could use it here). but we can tackle that later.,neutral
webpack-contrib/less-loader,codecov,2017-03-08T03:22:38Z,use codecov badge,neutral
mcollina/ascoltatori,mocha,2013-10-21T07:05:38Z,seems it must be this change as your repo is coveraging fine. strange thing is the the tests don't even start - i see no mocha output.,positive
mcollina/ascoltatori,istanbul,2013-10-21T07:14:25Z,so coverage runs fine if i check out my master separately but as soon as i link in node_modules to the new mosca then it fails.i think istanbul is getting confused by the links or something like that.,positive
koalyptus/TableFilter,codecov,2016-12-07T22:16:40Z,implementing coverage with:- `grunt-qunit-istanbul`- `isparta`- `codecov`,neutral
tapio/live-server,eslint,2016-03-13T20:50:13Z,this is good catch. but i'm curious why do have both?> npm i --save-dev eslint jshintand why it is has to be part of this mr? i mean it is different objective. and probably it worth to rise another mr.i had same issue with `package.json` and ended up with manual manipulation. again. same reason it is good enough to be separate mr.other than that +1,negative
tapio/live-server,eslint,2016-03-14T22:06:30Z,dmi3y without eslint and jshint. the test case won't run. i don't want to submit a pr without passing the tests. you're right that this pr solves two distinct issues but there is no rule that each pr has to tackle a distinct issue.,neutral
tapio/live-server,eslint,2016-03-16T17:00:18Z,that's true... i solved it on my end by installing jslint globally. though i'm working on local machine.anyways. my point is that it sounds bit of overkill to have both. i'm guessing now that `npm run lint`:> jshint *.js; eslint *.jsis sort of a relaxing command for users who have either of one installed globally... which means if for example  code was linted through the jshint. the eslint will be superfluous and vice versa.,negative
nathanboktae/mocha-phantomjs,mocha,2015-06-15T10:54:30Z,getting the basic mocha html report from mocha-phantomjs. rather than using the docs report or other reporters. i'd like to get mocha's basic html report (the one that uses the nice css) from the output of mocha-phantomjs. the reason i cannot use mocha for my tests is that several of them require a headless browser to be successful.is there anyway to get the nice looking html out of mocha-phantomjs?,positive
nathanboktae/mocha-phantomjs,mocha,2015-06-15T18:17:14Z,> i'd like to get mocha's basic html report (the one that uses the nice css) from the output of mocha-phantomjsthis doesn't make any sense. the html reporter interacts with the dom; all other reporters output to a console. `mocha-phantomjs` outputs to a console.the default `spec` reporter is very nice looking.,negative
nathanboktae/mocha-phantomjs,mocha,2015-07-04T14:49:28Z,hmmm doh i put up v4 as an early beta but i thought it should be hidden and not the default... i'll look into that. it's faling as `phantomjs2` doesn't have built linux binaries.`npm install mocha-phantomjs<4` for now.,negative
nathanboktae/mocha-phantomjs,mocha,2015-07-05T19:14:25Z,the cli. `mocha-phantomjs-core` is just phantomjs code. in fact i could make python and ruby packages out of it for those developers. as there is no node.js code there.,neutral
workshopper/levelmeup,standard,2016-12-07T06:05:24Z,ixkaito reviewed it and i merged a pr. merging this workshopper with master since there has been no further review.,neutral
rtfeldman/node-test-runner,mocha,2017-05-09T19:46:40Z,nope. running `elm-test` on the `upgrade-elm-test` branch is green for me on linux (using elm-test from master). i can an error on the `mocha *.js` part. but that's something different than what i'm seeing on travis.i heard eeue56 had some "luck" reproducing this on linux? did you have to take any special actions to get that far?,negative
stormpath/express-stormpath,eslint,2015-10-09T04:40:39Z,eslint. 'sup ya'll! rdegges timothyej typerandom this adds the `.eslintrc` file to the repo. and ports all the js hint settings that i've been using across all of our js projects.  this is a good. sane place to start imo.  the library code has been patched to meet the linter rules.please pull this branch and try running the tests. as they are now configured to run eslint first.,positive
stormpath/express-stormpath,eslint,2015-10-12T07:36:22Z,awesome. going to review this today. :beers:,positive
stormpath/express-stormpath,eslint,2015-10-13T13:26:40Z,works awesome. i added a npm script command so that in order to just do lint one can execute `$ npm run lint`. also added some more rules to the mix (in line with discussions we've had before). so there are some linting errors that needs to be handled now. but i'll fix these one i get some more time for it.,positive
stormpath/express-stormpath,eslint,2015-10-13T13:54:06Z,timothyej nice. didn't know about the `run-script` alias :) also. updated your comments. the things you commented on are basically things not yet enforced.,positive
socketio/engine.io,mocha,2013-02-12T23:46:57Z,test fail: "engine attach() should destroy upgrades not handled by engine". fails from time to time:```...........× 2 of 65 tests failed:1) engine attach() should destroy upgrades not handled by engine:   error: done() called multiple times    at multiple (.\node_modules\mocha\lib\runnable.js:177:31)    at done (.\node_modules\mocha\lib\runnable.js:183:26)    at runnable.run.duration (.\node_modules\mocha\lib\runnable.js:199:9)    at socket.eio.attach.destroyupgrade (.\test\engine.io.js:141:11)    at socket.eventemitter.emit (events.js:93:17)    at tcp.onread (net.js:418:51)2) engine attach() should destroy upgrades not handled by engine:   error: done() called multiple times    at multiple (.\node_modules\mocha\lib\runnable.js:177:31)    at done (.\node_modules\mocha\lib\runnable.js:183:26)    at runnable.run.duration (.\node_modules\mocha\lib\runnable.js:199:9)    at socket.eio.attach.destroyupgrade (.\test\engine.io.js:141:11)    at socket.eventemitter.emit (events.js:93:17)    at tcp.onread (net.js:418:51)```,negative
rooseveltframework/teddy,karma,2017-04-22T21:06:30Z,we should suppress these in the karma logs:```warn: '<include> element found with no src attribute. ignoring element.'warn: '<include> element found which references a nonexistent template ("noexist.html"). ignoring element.'warn: '<arg> element found with no attribute. ignoring parent <include> element. (<include src="misc/variable.html">)'error: 'render aborted due to max number of passes (100) exceeded; there is a possible infinite loop in your template logic.'warn: 'teddy.render attempted to render a template which doesn't exist: .html'warn: 'teddy.render attempted to render a template which doesn't exist: .html'warn: 'teddy.render attempted to render a template which doesn't exist: .html'warn: 'loop element found with no "val" attribute. ignoring element.'warn: 'loop element found with no "through" attribute. ignoring element.'warn: 'loop element found with no "val" attribute. ignoring element.```,negative
marionettejs/backbone.marionette,mocha,2014-05-23T21:21:38Z,update mocha and use setup global beforeeach/aftereach. some simple fixes that should've been in #1373**changes:**- specify our own mocha so it's up to date- add helpers file  - global beforeeach setup and aftereach teardown  - fixtures- clean up setup/node.js - fixed a broken test (from old `this` behavior),neutral
marionettejs/backbone.marionette,mocha,2014-05-25T02:01:33Z,:+1:,neutral
marionettejs/backbone.marionette,mocha,2014-05-25T16:07:49Z,:+1: will let you guys merge this one,neutral
marionettejs/backbone.marionette,mocha,2014-05-26T18:59:43Z,fix mocha watch config. the watch task for mocha broke in #1377jmeas any idea how we can simplify this code?,neutral
marionettejs/backbone.marionette,mocha,2014-05-27T03:03:01Z,thejameskyle can you explain how the watch is broken? it seems to be working fine without this fix for me atm.,positive
marionettejs/backbone.marionette,mocha,2014-05-27T12:53:46Z,samccone try saving a spec file and it will fail because they all depend on the `setup/helpers.js` file to run first.,negative
marionettejs/backbone.marionette,mocha,2014-06-03T13:15:45Z,ahumphreys87 does this remove `grunt-mocha-test` running with jsdom?,neutral
marionettejs/backbone.marionette,mocha,2014-06-04T21:04:13Z,thejameskyle to answer your question in the previous pr. yes this does remove `grunt-mocha-test` but it still uses jsdom. i have changed any of that. just the method we use to run the tests,neutral
marionettejs/backbone.marionette,coveralls,2014-05-21T14:16:14Z,add coveralls for code coverage stats.. so i think code coverage is pretty much rubbish as a flat number. however it will help us identify untested codepaths which i think is super valuable. +1 for adding this.,positive
marionettejs/backbone.marionette,coveralls,2014-05-21T14:35:17Z,i wasn't able to figure out a grunt build that reported stats to coveralls in previous set ups :(,neutral
marionettejs/backbone.marionette,coveralls,2014-05-21T15:11:04Z,i can do this,neutral
marionettejs/backbone.marionette,coveralls,2014-06-03T13:10:15Z,add coveralls and then :ship:,neutral
marionettejs/backbone.marionette,coveralls,2014-06-10T21:10:56Z,add coverage and coveralls. opening in favour of #1430,neutral
marionettejs/backbone.marionette,coveralls,2014-06-11T14:52:11Z,:+1: from me on this,neutral
marionettejs/backbone.marionette,coveralls,2014-06-13T22:58:46Z,im sorry ahumphreys87 mind cherry picking.. but still :+1: from memarionettejs/marionette-core ping someone,negative
CSSLint/parser-lib,jshint,2016-02-02T21:28:02Z,cscott: all right then. please fetch and rebase and while at it. run the new jshint `uglifyjs --compress --mangle`. i wonder. why is jshint even included. but i guess with grunt we won't have to worry anymore. we could also use it via node_modules locally in the meantime.,negative
CSSLint/parser-lib,jshint,2016-02-02T21:32:37Z,xhmikosr could you look at #157. #180. and #186?  in particular. #180 is included as part of this stack; it would be nicer to merge that separately and then rebase; and #157 conflicts in a trivial way with this patch stack. so it would be better to merge that first and then rebase this on top to resolve the conflict.  #186 is just gravy.and i'm assuming the `uglifyjs --compress --mangle` request is regarding `lib/jshint.js` (aka 0b774bf54cb4e5c632a0f7f4b206eef9e488fe31)?,neutral
CSSLint/parser-lib,jshint,2016-02-02T21:38:48Z,cscott: i merged what i could review; the rest will probably have to wait for someone else.and. yeah. i was talking about jshint.js.,neutral
CSSLint/parser-lib,jshint,2016-02-02T22:31:26Z,xhmikosr ok. i'm going to hang tight and see if we can get #157 and #180 merged. then. before i rebase.  if things seem to stall. i can factor out #180 from this patch (adding an explicit `/* jshint evil:true */`). but that would require making a new pr for #157 and rebasing #180. so i'd like to avoid that if i can.,negative
CSSLint/parser-lib,jshint,2016-02-03T19:42:02Z,i still believe you should minify jshint.js. it's so many bloat for the repo.,neutral
CSSLint/parser-lib,jshint,2016-02-03T21:44:36Z,xhmikosr i've minified jshint.js and updated this pr.,neutral
jquery/sizzle,karma,2014-04-07T20:19:10Z,> i hope i can do that. it looks like karma config could became more simplethat would be a good first step. there's still a lot going on here.> but more over. it would be nice to have some addtional features in qunitextending `qunit.begin` needs no discussion. i've commented on the other ticket.> to locally test things. that is something that browserstack runner is lack of. at least was. last time i checked.correct. browserstack-runner doesn't do that and very likely never will. i've never missed this ability. unlikely the feature that it does provide. i'm not sure how important that is.,negative
phillro/node-elasticsearch-client,mocha,2012-12-25T20:09:30Z,added timeout to delete tests. also removed hashlib from requires.tests were failing because while data was being retrieved. the delete tests got executed. added timeout to pass them. ever considered using a testing library like mocha to get rid of such issues?,negative
phillro/node-elasticsearch-client,mocha,2012-12-26T22:17:04Z,see #33 instead,neutral
nteract/nteract,mocha,2016-01-06T19:29:10Z,testing harness. this sets up a testing harness that runs `mocha` tests inside of electron. headless. yay for that.,positive
nteract/nteract,mocha,2016-01-06T19:51:26Z,don't use electron compile within mocha tests.. take out the usage of electron-compile in the mocha tests.,neutral
jira-node/node-jira-client,eslint,2016-01-13T00:25:01Z,upgrade eslint-config-exchange-solutions,neutral
oesmith/ralio,mocha,2013-02-10T03:10:00Z,hey i added a lot of new tests. now i think it's awesome! :)it was my first time using mocha! smooooooooth! :),positive
flosse/sloc,mocha,2014-01-10T00:17:11Z,could you post the errors?also checkout  to be sure ist's not a registry problem.btw: we could change from buster to mocha + chai if you like,neutral
bigcommerce/stencil-cli,eslint,2017-04-29T00:12:05Z,eslint.  - add eslint to travis and appveyor - fix all eslint errorbigcommerce/stencil-team,neutral
js-cookie/js-cookie,sauce,2015-04-08T02:26:37Z,travis: don't run grunt-saucelabs for pull requests,neutral
js-cookie/js-cookie,sauce,2015-04-09T10:06:21Z,fixing condition for when to run the suite with sauce and when not,neutral
cucumber/cucumber-js,standard,2017-12-31T07:52:56Z,different way to specify configuration settings. currently. the only way to reuse configuration options is by exporting an object from a `cucumber.js` file. are there any plans to follow a more 'standard' way of defining configuration. for example with a key in `package.json` or a seperate `.cucumber.yml` or something?this would be similar to what how a lot of other packages work (nyc. tsc. etc.)related to #992,neutral
cucumber/cucumber-js,standard,2017-12-31T18:57:35Z,i think a yml file would be best as i think its easier to read and write than json. see #751 for a somewhat related discussion. related to #992 we could update it so the profiles are nested under a `profiles` key which would open it up so we can add other data in there as well.,neutral
cucumber/cucumber-js,standard,2018-01-04T01:59:19Z,closing in favor of #751. commented the important new ideas there,neutral
cucumber/cucumber-js,mocha,2016-11-27T19:13:45Z,if we are moving to globals i would rather just expose the functions as globals so they don't need to be imported (similar to what mocha does with describe / it).the other idea i've thought about was that the exported function name needs to match something or have some other property to differentiate it. haven't come up with something i like around this though,negative
cucumber/cucumber-js,mocha,2016-11-29T08:07:25Z,well. technically. i'm not suggesting anything global per se. what i'm talking about is a singleton that holds the state related to step definitions and hooks. and that singleton could be a "default instance". we could expose a proper instance-based api like so:```javascriptimport { definesupportcode. before. given } from 'cucumber'const supportcode = definesupportcode(() => {  before(...  given(...  // definesupportcode could even expose the usual helpers to avoid explicit imports. similar to the current api:  this.when(...})```and calling the helpers directly as suggested previously would in fact call `definesupportcode` behind the scenes and keep a reference to that single instance that would be used by default by cucumber.this would give us the advantages of both approaches: * no more constructor automatically called* no need to call `this.xxx` all over the place* still able to programmatically pass isolated support code to cucumber (useful in an environment that do multiple runs. like a browser)* no globalsi'm against introducing mocha-like global helpers. in mocha. it's (kinda) ok because those tests are meant to be quite isolated. focussing on small(er) units. cucumber. on the other hand. is used for acceptance testing. that often means loading a lot of things and polluting the global scope is more dangerous in that context. adding `import { given. when. then } from 'cucumber'` at the top of your files to keep things clean and safe is really worth it. imho.,negative
cucumber/cucumber-js,mocha,2016-12-11T10:46:06Z,thanks charlie. this is great!usually. you don't have many files that require cucumber helpers. for example. in cucumber pro. we have 5 stepdef files and 1 hook file. that's quite different from our mocha test suite that currently contains 85 files. as i said previously. mocha tests are supposedly more isolated. much more numerous and it's an arguably a nice convenience to have global mocha helpers.another nice benefit of the explicit `import`/`require` is that there are no assumptions about the location of support code files. it can be intermixed with other things without any risks.another one is linting: global helpers need special linting rules or disabling the linter in some places; that's annoying.so. i'd really like to be good citizens and not pollute the global scope :),positive
cucumber/cucumber-js,jshint,2015-02-06T11:01:29Z,merged in as 4d199b598697a661f597764fdaa72a9e43fb7738the following commit fixes all errors in lib/ and adds jshint to the build chain. thanks the-simian!,positive
cucumber/cucumber-js,jshint,2015-02-06T16:45:30Z,thanks!,positive
vector-im/riot-web,standard,2016-08-01T09:40:52Z,lgtm. i vaguely remember that safari's `-webkit-flex: 1` uses different defaults from the standard `flex: 1` so may have to be spelt out as `-webkit-flex: 1 1 auto` or similar... however. i suggest only adding this if it's seen as a bug.,negative
appium/appium,selenium,2014-04-18T06:15:10Z,it is impossible to login to facebook from web view in native app. hi.i just try to create test for login to facebook from my native android app.i'm using selenium web driver with appium.is it possible to find some workaround to login to facebook usin web view?best.arto,neutral
appium/appium,selenium,2014-04-18T14:08:48Z,i'm logging into facebook on a native android and ios app. on android. you'll need api 19+. for old android. selendroid must be used.,neutral
appium/appium,selenium,2014-04-21T18:35:28Z,what is your code and log output when using the selenium alert methods?,neutral
appium/appium,selenium,2014-04-23T19:00:43Z,jlipps  works:``` rubyexecute_script('au.mainapp().getnamecontains("button")')```fails:``` rubyfind_element(:uiautomation. 'getnamecontains("button")')```> find_element(:uiautomation. 'getnamecontains("button")')> post /element> {>     :using => "-ios uiautomation".>     :value => "getnamecontains(\"button\")"> }> selenium::webdriver::error::javascripterror: 'undefined' is not a function (evaluating 'el.name()')is this a bug or a feature?,negative
appium/appium,selenium,2014-04-23T19:03:06Z,i'm not sure. jonahss any ideas?,neutral
appium/appium,selenium,2014-04-23T19:33:16Z,i'm saying you need to use the appium java client instead of the selenium java client.,neutral
appium/appium,selenium,2014-05-05T23:40:09Z,the context switching methods are not working and i noticed the exception(org.openqa.selenium.unsupportedcommandexception: unknown command: session/6ddca95584b0408ef5c7c6960b62b6ec/context) as described above. any suggestions will be helpful to continue test.,neutral
appium/appium,selenium,2014-05-08T14:50:37Z,selenium waits should work just fine with appium.,positive
appium/appium,selenium,2014-05-09T02:27:05Z,anyone tried this parallel execution? is that selenium grid helps in this ?,neutral
appium/appium,selenium,2014-05-09T12:23:12Z,could not launch appium inspector. hey im new user of appium.im getting this error:"could not get list of sessions from appium serverbe sure the appium server is running with an application opened by using the "app path" parameter in appium.app (along with package and activity for android) or by connecting with selenium client and supplying this in the desired capabilities object."can you hep please :)regards.omer obaid,neutral
appium/appium,selenium,2014-05-09T15:05:11Z,hi.i'll prefer . they are more systematic and organised imhothanks.vikram,neutral
appium/appium,mocha,2014-05-13T16:16:48Z,try toggle discard again. ```$ device=android mocha -t 60000 -r spec find-element-specs.js   apidemo - find elements -    mobile find      ✓ should scroll to an element by text or content desc (1900ms)      ✓ should find a single element by content-description (932ms)      ✓ should find a single element by text (1060ms)    find element(s) methods      ✓ should find a single element by content-description (4026ms)      ✓ should find an element by class name (992ms)      ✓ should find multiple elements by class name (1532ms)      ✓ should not find an element that doesnt exist (5209ms)      ✓ should not find multiple elements that doesnt exist (5161ms)      ✓ should fail on empty locator (1400ms)      ✓ should find a single element by id (5584ms)      ✓ should find a single element by string id (1576ms)      ✓ should find a single element by resource-id (1611ms)      ✓ should find multiple elements by resource-id (2742ms)      ✓ should find multiple elements by resource-id even when theres just one (926ms)    find element(s) from element      ✓ should find a single element by tag name (1273ms)      ✓ should find multiple elements by tag name (1511ms)      ✓ should not find an element that doesnt exist (5798ms)      ✓ should not find multiple elements that dont exist (6201ms)    xpath      ✓ should find element by type (923ms)      ✓ should find element by text (1035ms)      ✓ should find element by partial text (381ms)      ✓ should find the last element (1310ms)      ✓ should find element by xpath index and child (803ms)      ✓ should find element by index and embedded desc (5384ms)    find elements using accessibility id locator strategy      ✓ should find an element by name (693ms)      ✓ should return an array of one element if the plural "elements" is used (957ms)    find elements by -android uiautomator locator strategy      ✓ should find elements with a boolean argument (5611ms)      ✓ should find elements without prepending "new uiselector()" (1851ms)      ✓ should find elements without prepending "new uiselector()." (278ms)      ✓ should find elements without prepending "new " (1432ms)      ✓ should find an element with an int argument (1243ms)      ✓ should find an element with a string argument (403ms)      ✓ should find an element with an overloaded method argument (1484ms)      ✓ should find an element with a class<t> method argument (1470ms)      ✓ should find an element with a long chain of methods (1430ms)      ✓ should find an element with recursive uiselectors (1454ms)      ✓ should not find an element with bad syntax (5157ms)      ✓ should not find an element with a made up method (5095ms)      ✓ should not find an element which does not exist (5187ms)    invalid locator strategy      ✓ should not accept -ios uiautomation locator strategy (80ms)  40 passing (2m)```/cc paymand,neutral
appium/appium,mocha,2014-05-13T16:43:57Z,looks promising. let me get back to you with the results of my smoke/unit tests tomorrow if there is no rush.,positive
appium/appium,mocha,2014-05-13T16:44:41Z,ok. i'll look forward to your results. the master branch has failing tests so i will be merging this for now.,negative
appium/appium,mocha,2014-05-14T08:17:46Z,my smoke/unit tests pass. thanks for the fix! :+1:,positive
appium/appium,mocha,2014-05-14T13:33:47Z,awesome! thanks for helping with this fix.,positive
appium/appium,jshint,2014-02-27T21:19:47Z,fixed lint issues.```$ grunt lintrunning "jshint:files" (jshint) task>> 52 files lint free.running "jshint:test" (jshint) task>> 71 files lint free.running "jshint:uiauto" (jshint) task>> 11 files lint free.done. without errors.```,neutral
appium/appium,jshint,2014-03-12T14:15:53Z,travis is having issues cloning the submodule. it's not related to this pull request.```$ grunt lintrunning "jshint:files" (jshint) task>> 52 files lint free.running "jshint:test" (jshint) task>> 74 files lint free.done. without errors.```,neutral
jhipster/generator-jhipster,mocha,2014-05-11T08:20:48Z,fixed and extended mocha generator tests. the original tests were not working.furthermore. i added .travis.yml to enable travis ci,neutral
jhipster/generator-jhipster,mocha,2014-05-11T13:15:45Z,further mocha tests. although there are not many tests i think travis ci should be enabled to get at least some feedback,neutral
jhipster/generator-jhipster,eslint,2016-03-22T10:41:17Z,replacing json.parse by angular.fromjson in tracker service. was throwing an eslint error and causing a bug when i tried to login with oauth2 (undefined token o error).,negative
jhipster/generator-jhipster,eslint,2016-03-30T15:43:11Z,oh ok you just want to run eslint on generator files and not generated files. sorry i misunderstood !,neutral
jhipster/generator-jhipster,eslint,2016-04-01T12:31:13Z,forgot to say : run `npm run lint` to execute eslint.,neutral
jhipster/generator-jhipster,eslint,2016-04-12T14:52:55Z,eslint polish. ran eslint in the generator and in a monolithic app. found some little errors.,negative
jhipster/generator-jhipster,eslint,2016-04-15T19:31:00Z,it was the end of the week. sorry for the mistakes. i will run eslint next time..,negative
jhipster/generator-jhipster,karma,2016-12-27T15:18:05Z,ng2 karma,neutral
jhipster/generator-jhipster,karma,2016-12-28T11:15:01Z,jdubois it works with karma. it fails when i choose protractor in my generated application.,negative
jhipster/generator-jhipster,karma,2016-12-31T18:22:45Z,sendilkumarn mohamed2a mraible guys the karma tests are failing in master branch. i havent tested them before but if it was working before then this might have something to do with moving some stuff to the new ng-jhipster lib,negative
jhipster/generator-jhipster,karma,2017-01-01T19:02:44Z,fix health karma test. by applying this changes. you can run karma tests.,neutral
jhipster/generator-jhipster,karma,2017-01-06T16:49:16Z,jhipster/developers guys is anybody working on finishing the remaining karma tests?,neutral
jhipster/generator-jhipster,karma,2017-01-06T18:56:27Z,deepu105 i will work on fixing the karma test during the next week,neutral
jhipster/generator-jhipster,karma,2017-01-08T18:48:55Z,ramzimaalej would appreciate help to migrate and fix remaining app karma tests and the karma tests for entity on the ng2 branch take a look at #4302 or you could also help with #4407 or #4301,neutral
jhipster/generator-jhipster,karma,2017-01-14T00:02:53Z,fix health karma test. i override the template of `healthcheckcontroller` to test health component and service,neutral
jhipster/generator-jhipster,karma,2017-01-14T00:03:22Z,related to #4302,neutral
jhipster/generator-jhipster,karma,2017-01-14T12:39:40Z,and when you run maven:- by default you have the dev profile. which runs the default  webpack task (build + dev) - probably there needs to be a forked process for dev- in "prod" mode. it does build + lint + karma tests,neutral
jhipster/generator-jhipster,karma,2017-01-15T14:08:22Z,fully agree also.> there should be an option to run webpack with only the "main" buildyes. it could be named "webpack:dev:main" or "webpack:dev:app".btw. when you execute `yarn run` without arguments. it lets choose amongst all the available targets.angular-cli has 2 tests scripts. "test:watch" is really useful for tdd sessions.~~~json    "test": "karma start src/test/javascript/karma.conf.js".    "test:watch": "karma start --watch".~~~,positive
niklasvh/html2canvas,karma,2017-08-13T06:41:07Z,travis karma tests,neutral
jashkenas/underscore,eslint,2014-04-24T22:31:15Z,we should really integrate eslint or something into the test suite.,neutral
jashkenas/underscore,eslint,2014-04-25T08:24:42Z,integrate eslint into testing process. this should help us catch simple errors (like #1604) and enforce a consistent style.,positive
jashkenas/underscore,eslint,2014-04-25T15:18:42Z,as i said in my message. there are plenty of other simple errors it will catch. and we can finally enforce a coding style rather than going back and fixing it periodically as we do now.,negative
jashkenas/underscore,eslint,2014-04-25T15:23:21Z,i'm not opposed. but in my experience linters have been more trouble than they're worth (they're not actually that great at enforcing coding style. but are fantastic at throwing aggravating errors). in any case. would be nice to get travis hooked into pull requests so if we did add linting it would show up with any failed tests on the pr itself.,negative
jashkenas/underscore,eslint,2014-04-25T16:09:45Z,+1,neutral
jashkenas/underscore,eslint,2014-04-28T16:14:40Z,having an automated linter as part of the test suite would be lovely.,positive
jashkenas/underscore,eslint,2014-04-30T06:41:56Z,jdalton: i don't see how having comments for exceptions is bad. there will be 7 in total. and they make sense. we have one use of the `function` constructor. and we're okay with that. but we'd want any other uses to trigger test failure. and i chose eslint over jscs because its rules are much more powerful. checking for potential errors as well as enforcing style.braddunbar and davidchambers: i addressed your comments. thanks for the review.,negative
jashkenas/underscore,coveralls,2015-05-25T17:57:06Z,jdalton as you point out. nyc is just a thin wrapper for istanbul. i see two main benefits:isaacs and i have put a lot of work into making sure that nyc works great with subprocesses. while this allows it to instrument a larger variety of testing frameworks. e.g.. `node-tap`. it has the added benefit that instrumentation becomes consistent and simple across testing frameworks. to instrument underscore with istanbul. you'd do something like this:`istanbul cover qunit-cli test/*.js`. this instrumentation invocation varies widely depending on chosen framework.because of our handling of shebang. instrumentation simply becomes:`nyc npm run test-node`the other main advantage i see is that nyc makes it easier to spit out a text-lcov report which can be pushed directly to coveralls.io:`nyc report --reporter=text-lcov`this is slightly more of a hassle with `istanbul cover` (this would be a great candidate for a patch to istanbul itself. now that the text-lcov report exists).,negative
jashkenas/underscore,coveralls,2015-06-06T14:38:03Z,megawac can you make the coveralls less chatty (there's an option in its config on the coveralls site).benjycui i don't think it's time to support new forms of iteration just yet. for example ie 11 doesn't support `new set([1. 2. 3])` for assigning values to a `set`. i'm also not a fan of duck typing for iteration or adding more overloaded functionality to methods.the easiest way to deal with this in your es6 code is to convert your sets/maps to an array with `array.from` or something like:``` js_.each([...set]. function() {});```,neutral
pimatic/pimatic,mocha,2014-12-02T08:04:23Z,punchlinegroup or sweetpi please close this issue; resolved via petski/pimatic-mochad#3,positive
pbastowski/angular2-now,karma,2015-12-23T14:39:52Z,pbastowski i'm going to look it up.i'm currently setting up karma. beside tests. you'll have code covarage also :)i've used webpack to simplify babel compiling process. i also left space for other configurations so if in the near future you would want to add some build process (minification etc) it will be a lot easier :)you can find me on gitter ([kamilkisiela]( if you don't want to keep posting new messages in this pull request.,neutral
brunch/brunch,mocha,2013-01-16T00:05:08Z,good idea. although i'd prefer testacular or some other multi-browser-test-framework instead of lock-in to support only the webkit engine (phantomjs) for testing,neutral
brunch/brunch,mocha,2013-01-25T11:27:52Z,can i run a brunch app on travis-ci?. is it possible to run `brunch test` on travis-ci? is there a native `mocha` command that i can run?,neutral
brunch/brunch,mocha,2013-02-01T13:38:06Z,what needs done to make this happen?  i'm happy to attempt to implement. but would need a little direction,neutral
brunch/brunch,mocha,2013-02-01T13:54:35Z,chrismcv nothing. just keep in mind that the result should be simple.,neutral
brunch/brunch,mocha,2013-02-02T22:34:27Z,see console.log output from brunch test command. when i run mocha in the browser then i can see `console.log` output from the code under test. but when running the `brunch test` command it doesn't. it will only show output from the test files. is there anyway to see the output when running from the command line?,neutral
brunch/brunch,mocha,2013-02-03T07:13:19Z,`alert` maybe,neutral
brunch/brunch,mocha,2013-02-03T20:38:31Z,i plan to get rid of jsdom and use mocha-phantomjs which supports `console.log` and stuff nicely soon.see gh-463,positive
angular-ui/ui-sortable,coveralls,2014-05-20T19:57:58Z,chore(grunt): add coveralls code coverage report,negative
angular-ui/ui-sortable,coveralls,2014-05-20T20:14:21Z,chore(coveralls): enable debug flag,negative
deepstreamIO/deepstream.io-client-js,istanbul,2016-05-06T10:13:35Z,adding istanbul and coveralls,neutral
segmentio/analytics.js,sauce,2013-12-26T21:17:47Z,add saucelabs,neutral
yahoo/mojito,selenium,2013-01-10T00:19:44Z,.travis.yml debug. misc. - show selenium stderr- no sleep (jslint and unit tests run first)- use default `npm test` instead of script config,neutral
yahoo/mojito,selenium,2013-01-10T17:22:18Z,+1,neutral
agda/agda-stdlib,standard,2017-11-23T10:28:53Z,update for new builtin word64 type. this pr does minimal work to make the standard library work with `word64`. it doesn't define word arithmetic.,neutral
agda/agda-stdlib,standard,2017-11-23T10:48:21Z,it doesn't minimal work? then i don't think it's quite ready yet.. ;),neutral
agda/agda-stdlib,standard,2017-11-23T22:29:53Z,ulfnorell. why in agda stable branch. the std-lib directory isn't pointing to the master branch of the standard library. but the  word branch? that is. the commit in the top is the commit in this pr:```agda-stable $ cd std-libagda-stable $ git logcommit aaa04c9a6b7ab787eb30ccc0cd5e1604470a6eb6 (head. origin/word)author: ulf norell <ulf.norellgmail.com>date:   wed nov 22 11:34:26 2017 +0100    update for new builtin word64 type```,negative
agda/agda-stdlib,standard,2017-11-24T05:57:08Z,because this pr hasn't been merged yet. the master branch of std-lib doesn't work with agda stable--that's exactly what this pr addresses. i don't want the agda test suite to be red simply because the std-lib is lagging behind.,negative
agda/agda-stdlib,standard,2017-12-01T17:45:09Z,thank you once again for your pull request. as a direct result. we now have `data.list.relation.pointwise` which should fulfil your needs and will be available in the next standard library release.,positive
agda/agda-stdlib,standard,2017-12-08T15:48:45Z,deprecate non-standard property names in `data.fin.properties`,neutral
agda/agda-stdlib,standard,2017-12-09T00:00:30Z,closed with 3dfaac6,neutral
jprichardson/string.js,sauce,2015-05-29T18:44:29Z,this will wave to wait. currently there is no way to send the pass/fail status to saucelabs from mochify,neutral
babel/babel,mocha,2015-08-24T09:26:51Z,using babel to compile and run mocha tests when certain es7 features such as class properties have been enabled. i would like to use babel to compile mocha tests when es7 class properties as well as other es7 features have been enabled. how do i do this? how can i turn on additional options when doing...``` js{  "scripts": {    "test": "mocha --compilers js:babel/register"  }}```,negative
babel/babel,mocha,2015-08-27T23:18:30Z,similarly. i'd be interested in a way to not include the polyfill when `require('babel/register')` is used.i've made a few javascript libraries which are transpiled with babel's runtime flag before being published to npm. it's assumed that the global babel polyfill is not necessarily in use when people use the library. there are unit tests which operate directly on the es6 source by telling mocha to require babel/register. however that causes the polyfill to be used for the tests. this means my tests won't let me know if i accidentally make my code rely on things which are supported by the polyfill but not the runtime transform.,negative
babel/babel,mocha,2015-08-30T15:49:53Z,sebmck i get this error when running mocha tests - even if i agree that it would be best to avoid this kind of thing. a hard error prevents some valid use cases to run :(even if working. commenting the `throw` statement in lib/polyfill.js is hardly a good workaround.,negative
styled-components/css-to-react-native,eslint,2018-01-26T02:56:39Z,add `yarn.lock` to `.npmignore`.. might wanna add `.eslintrc.js` and `.travis.yml` there. too.  alternatively. you could use the `files` field in `package.json`.,neutral
styled-components/css-to-react-native,eslint,2018-01-26T07:37:02Z,thanks for the pr! what issue does not publishing the yarn lockfile fix?,neutral
styled-components/css-to-react-native,eslint,2018-01-26T10:53:38Z,not counting dependencies. the size of `css-to-react-native` is 186 kb.  114 kb of this is the `yarn.lock`.,neutral
styled-components/css-to-react-native,eslint,2018-01-26T11:30:42Z,maybe we should go with the `files` in package.json to be consistent with styled-components.,neutral
webdriverio/wdio-allure-reporter,mocha,2016-05-12T08:16:52Z,thanks. looks good for me. great work. gronke !,positive
webdriverio/wdio-allure-reporter,mocha,2016-05-12T08:19:49Z,i am still asking for adding `.travis.yml` file. because i want to see the build before merge,neutral
webdriverio/wdio-allure-reporter,mocha,2016-05-12T08:35:15Z,> i am still asking for adding `.travis.yml` filedid i really commit an empty `.travis.yml` file  ... file content added now,negative
webdriverio/wdio-allure-reporter,mocha,2016-05-12T09:21:05Z,only christian-bromann can do this.,neutral
webdriverio/wdio-allure-reporter,mocha,2016-05-15T19:05:08Z,i think it's time for another breakpoint. feedback on the created test cases (in `./test/specs/`) is much appreciated to align our expectations on this reporter.,positive
webdriverio/wdio-allure-reporter,mocha,2016-05-16T17:38:10Z,tests look good to me!,positive
webdriverio/wdio-allure-reporter,mocha,2016-05-20T21:50:42Z,christian-bromann cool! what needs to be done to get this merged? or would you prefer me to rebase #8 against this branch and we continue there?,positive
webdriverio/wdio-allure-reporter,mocha,2016-05-22T22:13:22Z,gronke nothing. please go ahead and merge. just gave you all the access rights.,positive
webdriverio/wdio-allure-reporter,mocha,2016-05-22T22:17:25Z,christian-bromann awesome. some more tests will come with the pull-request #8 (_work in progress_),positive
webdriverio/wdio-allure-reporter,mocha,2016-05-25T18:46:55Z,christian-bromann  i am using mocha,neutral
angular/angular-seed,karma,2014-02-21T17:45:09Z,i have the same problem and have been using the same solution. i have karma installed globally but it doesn't seem like its being referenced correctly for some reason.,negative
angular/angular-seed,karma,2014-03-03T04:33:55Z,i disagree with the change – it's still useful to have karma installed globally for invoking it yourself (as appears in the official tutorials).,positive
angular/angular-seed,karma,2014-03-06T14:35:55Z,suggest using npm install to install karma into local node_modules.. this is a readme.md change. this seems more standard. and is what scripts/test.sh expects.,neutral
jshint/jshint,jshint,2012-12-17T20:06:04Z,technical details aside. i'm open to the idea in general.,neutral
jshint/jshint,jshint,2012-12-20T17:23:08Z,dpashkevich i'm pretty sure (when the issues got disabled in that repo) they were deleted. although i found an email thread about the issue in my email archives. and there is not much to it now that i found it. though. lol.. i must of included the original issue it spawned from in my recollection. as well (which was similarly about where to put "globals" in the .jshintrc). :-) here is the thread (below). regardless.---``` text[node-jshint] include ignores in `.jshintrc` (#122)nicolas gallagher:     keeping all the relative configuration in a single file would be useful. it should also make it easier for other tools. like grunt. to more easily hook into the pre-existing ignores in a `.jshintrc`.related: (issue #) 104sindre sorhus:i agree. i have like .gitignore. gitattributes. .editorconfig. jshintrc. npmignore. etc. there's just too many dotfiles.anton kovalyov:this project is being merged into our main repository (jshint/jshint) and we're moving all issues there. this issue has been moved as jshint/jshint#693```,negative
jshint/jshint,jshint,2012-12-21T16:18:43Z,is `predef` what you're looking for?in your `.jshintrc```` javascript{   "predef": [        "window".        "jquery"   ]}```,neutral
jshint/jshint,jshint,2012-12-21T18:08:28Z,the issue at hand is jshint has no idea which are intentional global variables and which you just forgot to declare.  predef in your .jshintrc (per project) or /*global ... */ (per file) allow you to explain to jshint which global vars you intentionally used.  thus. by process of elimination. the rest are accidental and cause the warning.  there are some bigger constructs that give you many global variables such as "assume node" or "assume browser". which can cut your list of globals down significantly.,negative
jshint/jshint,jshint,2012-12-26T23:20:10Z,add 'proxy' keyword support for 'esnext'. harmony-proxies are supported by v8. but jshint aborts with `'proxy' is not defined`,neutral
jshint/jshint,jshint,2012-12-31T19:34:17Z,figure out the way to run bin/jshint.js on windows. npm uses auto-generated .cmd file. maybe we can use that?,neutral
jshint/jshint,jshint,2012-12-31T19:38:00Z,make.js: mkdir 'dist' if it doesn't exist. here's another dumb one: i went to build jshint. and it failed because `dist/` didn't exist. i figured the build process could just create it if needed.,negative
jshint/jshint,jshint,2012-12-31T19:40:03Z,hah. thanks. i've just created #788 for that. :-),positive
jshint/jshint,jshint,2012-12-31T20:26:46Z,failing test: an array of regexes does not pass lint.. this code passes on jshint.com on 12/31/12. and it looks ok to me.,negative
jshint/jshint,jshint,2012-12-31T20:35:45Z,also that travis build should have failed. i think the `make.js` script needs to return non-zero when tests fail.,negative
jshint/jshint,jshint,2012-12-31T20:59:29Z,this is a good way. although i'd just create a ticket with a test in it—since i won't be able to merge this pull request without me fixing the issue first.thanks!,positive
jshint/jshint,jshint,2012-12-31T21:08:51Z,by the way. all of kickstarter passes (as it does in jshint r12) except for mailcheck.js:  which has 23 errors.right now i'm assuming it's all fallout from that array of regexes...,neutral
jshint/jshint,jshint,2012-12-31T21:14:06Z,i just ran your gist locally and it passes without any errors.,neutral
jshint/jshint,jshint,2012-12-31T21:23:01Z,all good. npm does all the work for us.,positive
jshint/jshint,jshint,2013-01-02T06:16:04Z,giving `*.js` to the cli only works when your shell expands globs into the files. `cmd.exd` does not do this for `*.js` which is why it doesn't work. `jshint` will scan a directory given as an argument. so you can probably just run `jshint .\` and get the same results.,negative
jshint/jshint,jshint,2013-01-02T20:27:18Z,create distribution folder for each tagged release. it would really help if the released distribution of jshint would be available out of the box. sample use-case: webjar ( creation which includes the distribution directly from the source. thanks.alex,neutral
jshint/jshint,jshint,2013-01-08T05:51:16Z,why does jshint think a tab is 4 columns wide?. in a file. type a tab (a true tab not spaces) and then type a character 'a'. use jshint on this file:```k.js: line 1. col 5. expected an assignment or function call and instead saw an expression.k.js: line 1. col 6. missing semicolon.2 errors```this is rather weird. most editors think a tab is 8 columns wide.,negative
jshint/jshint,jshint,2013-01-08T05:52:08Z,that's the default value. you can change it by using `indent` option.,neutral
jshint/jshint,jshint,2013-01-08T13:07:06Z,short options for jshint executable. how about some short options other than -h and -v?in particular. -c for --config would be nice.(although if #807 is implemented. two short options would be needed and perhaps -c should refer to the inline configuration.),neutral
jshint/jshint,jshint,2013-01-08T17:39:29Z,p though jshint still needs to stat all files to determine if they are a directory in order to recurse directories.,neutral
jshint/jshint,jshint,2013-01-08T21:09:34Z,<pre>piereactor t % mkdir dirpiereactor t % ln -s dir symlink-to-dirpiereactor t % ln -s nonexistent symlink-to-nonexistentpiereactor t % test -d symlink-to-dir; echo $?0piereactor t % test -d symlink-to-nonexistent; echo $?1piereactor t % test -e symlink-to-dir; echo $?       0piereactor t % test -e symlink-to-nonexistent; echo $?1</pre>jshint is calling test -e on each directory entry and aborting if it does not exist. then it checks if the directory entry is itself a directory via test -d.instead it can first call test -d. if that returns true (which it will for directories and symlinks to directories) then recurse. otherwise call test -e and if that returns true (which it will now for files and symlinks to files) collect the file. broken symlinks will return false in both tests and will be silently skipped.the question then becomes whether it is jshint's job to report broken symlinks or to validate files that are accessible in the tree being given to it.<pre>piereactor t % test -f symlink-to-nonexistent; echo $?1</pre>a broken symlink is not a file either. giving rise to the following alternate solution for the submitter:<pre>find . -type f -name '*.js' -exec jshint {} \;</pre>,negative
jshint/jshint,jshint,2013-01-13T21:23:11Z,sorry. we're not going to do this.,negative
jshint/jshint,jshint,2013-01-14T06:05:54Z,could you at least provide the reason? thanks.,neutral
jshint/jshint,istanbul,2014-11-27T00:14:01Z,caitp it looks like the only signifcant difference between the two approaches is the coverage module in use--yours uses "jscoverage" and this uses "istanbul". is there something else i'm missing. or are you saying that you'd rather use jscoverage?,neutral
jshint/jshint,coveralls,2014-11-27T00:03:21Z,implement automated code coverage reporting. i'm interested in refactoring the unit tests. a code coverage report will give other reviewers confidence that those changes haven't introduced bugs in the tests themselves.mikesherov caitp does this sound good to you?rwaldron pending their approval but prior to merging. i'll need you to log in to  with your github credentials and enable coveralls for this repository.> - collect unit test coverage using the istanbul module.> - update the ci scripts to report this data to the coveralls service so>   it can be automatically incorporated into pull requests.> - remove legacy code coverage file.,positive
jshint/jshint,coveralls,2014-11-27T00:22:57Z,my vote is to use the smaller one. whichever it is.,neutral
jshint/jshint,coveralls,2014-11-27T00:56:20Z,i kinda feel like coveralls.io precludes the html report generation issue --- but i don't have a strong opinion one way or the other. i would just rather use the one that increases ci build times less than the other,negative
jshint/jshint,coveralls,2014-11-27T01:12:08Z,alright --- then whatever you want to go with i guess. it's all good!,positive
riot/riot,sauce,2015-04-27T07:20:58Z,gianlucaguarini tried to find how to add a webhook from sauce labs profile but i found it impossible. their ui is totally unclear at least for me.,negative
riot/riot,sauce,2015-04-27T07:35:59Z,we need to register the riotjs on saucelabs project using a mail  (use the free plan). once you have done you can send me the access via mail gianluca.guarinigmail.com thank you,neutral
riot/riot,sauce,2015-04-27T07:39:30Z,i cannot get riotjs listed on saucelabs admin panel. i can only login as "moot" or "tipiirai". but not as "muut" since that is an organization. not sure what to do.,neutral
riot/riot,karma,2015-02-14T16:53:12Z,test suite with mocha. travis. karma & saucelabs. i would like to make a unit test with mocha to check that the code pushed on any pull request does not break. another advantage could be to check the crossbrowser compatibility on any release automatically.we need to create an account on saucelabs ( email + psw ) and tipiirai you should create also the travis hook,neutral
riot/riot,karma,2015-02-16T08:02:58Z,what's the difference between karma and saucelabs?,neutral
riot/riot,karma,2015-02-16T12:24:06Z,on that case saucelabs sounds more suitable. baer want your thoughts here as well. thanks!,positive
riot/riot,karma,2015-02-16T22:09:11Z,it sounds like aside from the runner were totally on the same page. i don't mind giving you access to my fork if you want to work off of the same branch. first step is pulling in mocha + sinon + chai and porting those tests. i might use karma for dev though even if it gets removed i the end in favor of the mocha api and npm test. also. tipiirai mentioned in the other issue that they prefer the tdd assert style.,positive
riot/riot,karma,2015-02-17T04:57:37Z,great discussion here! it is definitely useful to launch tests locally. i suppose it's about ease of installation (saucelabs) vs performance (karma. because it's local)? and both can be triggered locally?,positive
riot/riot,karma,2015-02-17T05:03:04Z,looks like we all agree that the first step is to wire up those tests with mocha and chai.i prefer tdd but if you guys really want to use bdd. i don't want to be on your way.,neutral
riot/riot,karma,2015-02-17T07:16:07Z,tipiirai could please create a new branch? something like `tests/mocha`,positive
riot/riot,karma,2015-02-17T11:07:08Z,i just created a `tests` branch.,neutral
riot/riot,karma,2015-02-17T11:21:58Z,:+1:,neutral
riot/riot,karma,2015-02-17T19:44:28Z,tipiirai ok thanks i will start working on that branch setting up the mocha tests,positive
riot/riot,karma,2015-02-19T07:15:51Z,tipiirai i think we could merge the `tests` branch into the `dev`. it's ready,neutral
riot/riot,karma,2015-02-19T08:23:17Z,you can do that yourself too. or if you want me to review it first. please make a pull request which gives me a nice diff- view.,positive
riot/riot,karma,2015-02-22T08:17:31Z,gianlucaguarini currently runner.js fails one test (observable / multi off) but runner.html passes all tests. any idea why?,negative
riot/riot,karma,2015-02-22T09:35:45Z,tipiirai  i'll have a look thanks. could you please open a new issue?,positive
riot/riot,karma,2015-02-22T12:46:05Z,tipiirai my patch should solve the problem,neutral
riot/riot,karma,2015-02-23T09:05:50Z,just want to say thank you guys for taking care of this. had a quick look and tried running our test suite for the first time. it's such a bliss compared to what we had before!,positive
riot/riot,karma,2015-02-23T09:33:34Z,aurri u r welcome :heart:,neutral
riot/riot,karma,2015-02-23T11:48:12Z,totally agree. we only want runner.html there. i try to become a better writer for tests :),neutral
riot/riot,karma,2015-02-23T12:43:32Z,i removed a few files there. i'm still using tags.html for manual tests on different browsers (chrome and ie8 mostly),neutral
riot/riot,karma,2015-02-23T12:48:40Z,i also had it. someone probably has broken the compiler.js a guess,negative
riot/riot,karma,2015-02-23T12:50:25Z,set up please the travis-ci as soon as possible to avoid this kind of issues,positive
riot/riot,karma,2015-02-23T12:53:04Z,done,neutral
riot/riot,karma,2015-02-24T06:12:58Z,baer of course i did not merge dev into the master. i've just helped tipiirai setting up the travis tests and he did it on the master so i made just two small commits that do not change any riot line of code. we can close this issue,negative
riot/riot,karma,2015-02-24T07:24:43Z,tipiirai btw we should now bring the travis file also on the dev branch,neutral
riot/riot,karma,2015-02-24T07:31:12Z,now there. thanks,positive
riot/riot,karma,2015-02-24T07:46:42Z,cool. just make any changes that are needed. `package.json` is not my strongest areas.,neutral
riot/riot,karma,2015-02-25T05:26:46Z,gianlucaguarini – big thanks for delivering the test suite and travis integration! this really helps this project move forward in a more controlled fashion.,positive
riot/riot,karma,2015-02-25T08:25:29Z,we are not quite done but i will keep pushing patches. you are welcome :dancers:,positive
riot/riot,coveralls,2015-04-27T07:22:46Z,if i can have the admin rights i could set up everything. saucelabs and coveralls,neutral
riot/riot,coveralls,2015-05-01T13:19:34Z,just curious. why does coveralls not get triggered here?,neutral
lykmapipo/kue-scheduler,mocha,2016-10-13T22:30:36Z,yes. it would be nice to have some confirmation of this behaviour.,positive
lykmapipo/kue-scheduler,mocha,2016-10-14T04:10:29Z,ו'll try to update once i tested it. (it's crucial for my implementation),neutral
lykmapipo/kue-scheduler,mocha,2016-10-14T04:20:52Z,gmcnaught and ? kue-unique is working as expected ? can you share some code snippet how you did you tested ?,neutral
lykmapipo/kue-scheduler,mocha,2016-10-14T14:10:57Z,unique did that trick. thanks.(for some reason when i first tried it. it seems like it's not working. and triggering the job only once),positive
angular/angular.js,karma,2013-04-06T13:11:46Z,testacular renamed in karma. do 'npm install -g karma' instead of 'npm install -g testacular' as testacular is karma now.,neutral
angular/angular.js,karma,2013-04-10T11:01:13Z,updated the testacular links to karma links.. i have changed the testacular links to karma links.,neutral
angular/angular.js,karma,2013-04-10T19:21:30Z,update index.ngdoc. testacular renamed to karma. testacular is deprecated. just updating the doc here for you all,neutral
angular/angular.js,karma,2013-04-11T20:15:28Z,dupe of #2357,neutral
dc-js/dc.js,jasmine,2013-11-02T15:53:53Z,first of all i would really like to thank pivotal for lending their great pool of talent to the opensource community. i am a big fan of jasmine - my choice of bdd tool for any js project. me and some of my colleagues are trying to get the company i work for thoughtworks to do a better job supporting opensource community. so kudos to guys from pivotal :+1:  i have not been able to contribute as much recently. jrideout & gordonwoodhull have been the real engine behind the last 2 releases. i agree with sclevine and tjarratt; +1 for jasmine. personally i really miss the nice bdd language whenever i am working on dc. and i agree i have run into problem multiple times in the past with jsdom and had to resort to some pretty ugly workaround. however we probably need a way to run vow and jasmine in parallel for awhile since switching all test cases to jasmine spec might be too big of a undertaking for now. so it will be ideal if there is a way to convert whatever test cases i am touching upon and implement new one in jasmine progressively.,positive
dc-js/dc.js,jasmine,2013-11-04T14:36:13Z,+1 for bdd and jasmine. i also agree with nickqizhu we need to figure out a migration strategy.i've wanted to migrate from jsdom to phantomjs for while too.,neutral
dc-js/dc.js,jasmine,2013-11-06T00:05:42Z,jasmine. this adds support for running jasmine specs along side existing vows tests. we converted legend-test.js to a jasmine spec. and tested support for horizontal legends.we think this provides an acceptable migration strategy from vows to jasmine. both sets of specs may be run with `grunt test` and two coverage reports may be generated using `grunt coverage`. we haven't found a way to combine both coverage reports into a unified report. but we're looking into it. (and it might not be that big of an issue once all the specs are converted to jasmine).after running the jasmine specs (with `grunt test`. or by themselves with `grunt jasmine:specs`) a file called `jasmine-runner.html` is created in the web folder. this may be used to run (and debug!) specs in a browser.,neutral
dc-js/dc.js,jasmine,2013-11-06T19:52:53Z,we took a look into it and it seems like we are testing too pixel perfect. we can even see differences in rendering between chrome and ff. we're working to make the specs more forgiving and will update this pull request.,positive
dc-js/dc.js,jasmine,2013-11-06T22:49:41Z,we added a custom matcher to be able to react to the changes in calculated positions. it turns out that we are using driver specific functions/attributes like clientheight or getbbox which seem to differ in specific drivers. we talked to stephen who said that it is not easy to mock those out. so we might revisit using clientheight or bbox for layout. turns out it is a good thing we are now able to test the render specific expectations.,positive
dc-js/dc.js,jasmine,2013-11-07T00:24:00Z,converted boxplot tests to jasmine,neutral
dc-js/dc.js,jasmine,2013-11-07T15:51:08Z,it looks like i somehow dropped the tests for coloring when merging that patch. would you mind adding a case for "should assign a fill color to the boxes" to these?,neutral
dc-js/dc.js,jasmine,2013-11-07T20:42:53Z,horizontal legend enhancement. hello all.this code allows you to set legendwidth and itemwidth in a horizontal legend to create legend columns. i am using it to show sixty lines on a composite chart. i added the jasmine test but no vows. i also modified the series example to demonstrate.nd,neutral
dc-js/dc.js,jasmine,2013-11-08T17:39:36Z,converted base chart vows tests to jasmine specs. we took the liberty to add some more tests in areas that were missing coverage.,neutral
dc-js/dc.js,jasmine,2013-11-13T15:35:12Z,ndenkowycz would you mind switching your tests to jasmine. to take into account #406? also. it would be nice to have `.duration` documented.,positive
dc-js/dc.js,jasmine,2013-11-13T18:06:49Z,converted series chart from vows to jasmine,neutral
dc-js/dc.js,jasmine,2013-11-14T15:36:18Z,boxplot transitions with tickformat. jrideout here is the rework with the jasmine test for tickformat. the tests for the boxplot calculations pass. but the tests that deal with the rendering are failing. i think it is because the boxplot isn't fully rendered before the test is run. i added a pie chart to the box-plot.html to demonstrate transitions. it seems to work in the example and in my project. if anyone can shed any light on the testing issue that would be great.thanksnd,negative
dc-js/dc.js,jasmine,2013-11-14T17:47:42Z,sclevine any advice for ndenkowycz ? i'm still coming up to speed on how to best make use of jasmine myself.,neutral
dc-js/dc.js,jasmine,2013-11-15T15:52:47Z,ndenkowycz you modified the chart to set the color at the group level rather than on the rect iteself,neutral
getsentry/sentry,selenium,2016-06-20T21:38:40Z,dcramer you can close this pr. i've cherry-picked the commit into #3497 and will finish it out there. i think i'm going to have to end up just putting a conditional.,neutral
getsentry/sentry,selenium,2016-06-20T23:50:52Z,improve selenium tests. - explicitly define phantomjs dependency- move selenium to fixtures (shared instance suite-wide)- simplify login hookgetsentry/infrastructure getsentry/ui,neutral
getsentry/sentry,selenium,2016-06-20T23:57:12Z,/cc fotinakis,neutral
getsentry/sentry,selenium,2016-06-21T00:58:47Z,niice! i tried to grok pytest fixtures but they were very weird. :) this makes them make much more sense. if you hit approve on the percy build. it should mark this pr green as well.,positive
getsentry/sentry,selenium,2016-07-01T01:14:25Z,(fwiw i also tried using pytest-selenium. but it doesn't share a selenium instance. so its much more complex to make work for us),neutral
getsentry/sentry,codecov,2015-10-07T16:52:02Z,not a fan of codecov change since it's pretty magical to assume it exists and it should get cached,neutral
getsentry/sentry,codecov,2015-10-07T17:26:00Z,> not a fan of codecov change since it's pretty magical to assume it exists and it should get cachedtrivial to add back. my point was that it's already pre-installed. so it doesn't need to be cached. and the `pip install` was just a noop.,neutral
ysugimoto/aws-lambda-image,eslint,2017-02-28T15:59:37Z,as we use the codeclimate do we still need to install eslint?,neutral
ysugimoto/aws-lambda-image,eslint,2017-03-01T10:27:54Z,will merge that now and investigate the `.eslintrc` later.,neutral
ysugimoto/aws-lambda-image,eslint,2017-03-01T22:11:23Z,add code climate configuration. this commit configures code quality analysis by code climate.results are provided by open source code climate engines. based onthe languages present in this repository. i've enabled the followingengines: - eslint,negative
ysugimoto/aws-lambda-image,eslint,2017-03-06T23:13:26Z,ysugimoto can we consider this as done?,neutral
ysugimoto/aws-lambda-image,eslint,2017-03-08T09:39:29Z,no. i think this would be closed.,neutral
dadi/web,standard,2016-09-10T09:45:38Z,feature: add rss data provider. #### rss data provideradds rss data provider. works with remote feeds. correctly parses xml.auth not implement until we know what kind of auth may be required as there is no standard rss auth.close #89 cc jimlambie ```200 passing (15s) 11 pending```note: one test skipped due to issue inside third-party module throwing false positive.,positive
josdejong/mathjs,mocha,2013-08-02T12:02:45Z,write test cases. the tests are all organized in files which is great. but as the library grows it would probably be better to use a proper testing framework. and writing separate test cases.i suggest mocha. i think it is pretty simple and gets the job done really well.,positive
josdejong/mathjs,mocha,2013-08-03T09:31:03Z,you are right. hence the `// todo: use a testing suite for testing` in jakefile.js ;)mocha is fine with me. i'm used to nodeunit but this doesn't support testing a complete directory recursively - which is what we have with math.js.there is one thing that bothers me: with math.js we compare a lot floating point numbers. which can have round-off errors. therefore i created a small utilty approx.js having functions `approx.equal` and `approx.deepequal` to test whether numbers are approximately equal. it would be great to have a test framework which supports this by default...,negative
josdejong/mathjs,mocha,2013-08-03T11:33:51Z,i agree with not adding dependencies. this would only be devdependency. so not problem...,neutral
josdejong/mathjs,mocha,2013-08-04T14:39:03Z,random more flexible args. now `random([size]. [max]. [min])` supports``` javascriptrandom()random(max)random(size)random(min. max)random(size. max)random(size. min. max)```and `randomint([size]. [min]. max)``` javascriptrandomint(max)randomint(min. max)randomint(size. max)randomint(size. min. max)```does that make sense?some tests are missing. but i am waiting for the mocha refactor cause now it's hard to read my test file,neutral
josdejong/mathjs,mocha,2013-08-04T16:13:20Z,ok super! i will do the merge after having everything refactored (currently halfway changing the source files into node modules). and after the refactoring i will change the test files to mocha. i'm not sure if there will be time left for that tonight.,positive
josdejong/mathjs,mocha,2013-08-04T16:21:16Z,cool! good job!!!,positive
josdejong/mathjs,mocha,2013-08-06T09:49:10Z,oh. by the way. don't be surprised if the build fails... the tests for random functions obviously have a certain probability to fail :(,negative
josdejong/mathjs,mocha,2013-08-06T21:23:42Z,great! well done!!!yeah ... so if the execution speed is the same. the rest is not that important! maybe in the future. a nice to have feature could be to get a custom build of mathjs. so that you can keep it small in your webpage.i can take care of the mocha tests. or tell me if you really want to do it.,positive
jribble/grunt-jasmine-node-coverage,jasmine,2014-11-03T16:36:43Z,merge in features from grunt-jasmine-node-coverage-validation project.. grunt-jasmine-node-coverage-validation is a project that was forked from this that includes the ability to set thresholds of coverage to pass/fail the build.  it's good functionality that would fit well in this project.,positive
jribble/grunt-jasmine-node-coverage,jasmine,2014-11-03T16:37:35Z,can you remove a 'forked from'?,neutral
jribble/grunt-jasmine-node-coverage,jasmine,2014-11-03T17:27:10Z,not sure. but at least by creating a new repository in which rewriting the history.. i could try,neutral
jribble/grunt-jasmine-node-coverage,jasmine,2014-11-08T18:28:12Z,well that was quick. just ~5 minutes and we are standalone!,positive
summernote/summernote,karma,2015-12-08T05:03:02Z,:+1:,neutral
summernote/summernote,karma,2015-12-09T11:51:30Z,cleaning dist files. - fix wrong karma config for `dist` task- ignore config file in release- add files for language in release,negative
istanbuljs/istanbuljs,istanbul,2017-03-14T06:34:13Z,feat: migrating utility modules to monorepo. this moves us closer to wrapping up the work on migrating our utility modules into a monorepo:* adding a top-level test-runner.* taking a rough stab at a readme better explaining the motivation around this monorepo (i would love some help editing this).i'm convinced that moving to a monorepo will help better centralize bug tracking. and will keep conversations centered around the more interesting modules in the istanbul ecosystem.## not a blocker ... but ...i would love some help debugging why the `istanbul-api` tests have trouble running when instrumented with `nyc`.,negative
istanbuljs/istanbuljs,istanbul,2017-03-14T18:00:40Z,graingert nope :) i see this as the first pull request on top of the unification pull-request  also. cool thing worth noting as we pull in a few more libraries.. there's a `lerna import` now -- which i was playing with for `conventional-commits`.,positive
DefinitelyTyped/DefinitelyTyped,standard,2016-03-15T21:11:09Z,markusmauch i completely appreciate the approach you've taken. and with the pr merged now. we'll all be able to benefit.  i generally _extend_ window with an alternate interface that provides the "xrm" object.... but i haven't needed to do that in long time. because i prefer using window.postmessage() to communicate between web resources and their containing form.  this is an html5 spec that helps abstraction. and provides for better automated test scenarios.  i let form scripts worry about the form. and web resource scripts worry about the html web resource--with postmessage facilitating the interchange of information between them in a standard. secure way.  allowing cross-frame scripting is no longer a requirement of my work.,neutral
angular-ui/ui-mask,sauce,2015-09-04T09:00:59Z,like you said i'd be in favor to entirely automate tests. meaning exposing sauce labs in `.travis.yml`. could you take care of that ?,positive
nikgraf/belle,eslint,2015-11-12T18:56:56Z,bootstrap style. refactored the documentation and added bootstrap styles for datepicker & spinner. the spinner styles are exactly the same. but i added them for completeness.in addition i enabled eslint linting for docs. jscs has troubles linting the docs (some memory issues) so i left it out for now.,neutral
nikgraf/belle,eslint,2015-11-12T22:39:22Z,jpuri i merged it as i needed it for another fix.,neutral
