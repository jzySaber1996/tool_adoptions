['bennybauer sorry for the delay:regarding istanbul: you have to add the tests to all.js. they are currently not picked up automatically.> (a) resources should be written to outputs. maybe with a predefined prefix.imho thats the best solution. this way we can selectively export resources and they can be shown> events - should we display them too? if so then what info should be displayedimho thats not as important. as those are visible in the serverless.yml file anyway. the info plugin should imho really focus on information from the deployed system that is kind of hard to get at the moment.> cost estimation - the "bonus" according to austen :)if we get around to it that could be interesting. can we do this automatically? the biggest question there for me is how to capture all the unknown facts like how many servers will be there. looks like aws itself basically redirects to their online calculator and you can then play around with it.imho too many open questions for now to really put something in there. but we can put it in later on.', 'i have prepared an additional commit for you to review and which still requires some more work. this will include all coverage data collected from the child processes that we spawn during the testing process.we need to add a few // istanbul ignore else comments to the code. but otherwise this is looking good and test coverage is also rather good.for now. i set .istanbul.yml checks/global to 100% and did not let the build fail in case that it these goals have not been reached.additionally. there are still some tests missing. if you look into the generated html report.', 'the coverage will now be gathered from child processes. too. this also works on windows. changes had to be made to test/child-process.js that now detects whether it is run under istanbul.the npm test script still needs some work. though.', "improve code coverage. now that mapreduce is folded into pouchdb core. one of the things i really miss is the confidence that code coverage is at 100%.i think we can get there. but it will take some discipline to go through the codebase. add `istanbul ignore` where it makes sense. extract out browser-only code (since we can't test coverage in the browser using istanbul). and of course add tests as well.i'm willing to do the work to try to get us up to 100%. or at least as close as possible.", "btw daleharvey where is code coverage reported to? can't seem to find it.", "hm. it doesn't seem to be storing the actual coverage number anywhere. i wish there was some way we could make travis surface that information for every pull request.", 'yeah. it is a bug in coveralls as far as i can tell (not istanbul). maybe best to just ignore it and wait for a fix from coveralls', 'coverage badge is pointing to istanbul branch', 'add istanbul coverall support. hi.attached contained few changes that should add coveral support for our project for your perusal. should there be any issue with this pr . do not hesitate to let me know. i would be glad to address it.', 'invert coverage by running ytestrunner under istanbul. unfortunately you need to use the undocumented `--yui` flag for this (so it hooks the yui loader as well). and i plan to take it out and replace it with something else later.as long as you are willing to make minor changes to the command line when i fix this. you can accept my pull request.otherwise what you are doing seems to be the best option for now.', 'thanks!', 'chore(project): add support for code coverage reports. add istanbul to support looking at code coverage for the project.', "coverage. adds coverage reporting through istanbul and coveralls.  we'll need to set up marko on [coveralls]( but it's a pretty painless process.", 'nice pr mlrawlings! did you consider using `--include-all-sources` in the istanbul command for  coverage against the whole codebase?', 'awesome! thank you for taking the time to do that. i have finished setting up coveralls and now we have a working badge. thanks again!> did you consider using `--include-all-sources` in the istanbul command for coverage against the whole codebase?yomed: would you be interested in trying that out to see if it makes the coverage more accurate?', 'improve npm test script. added `--include-all-sources` option to istanbul command. this reduces coverage from around 87% to 83%. but it should be more accurate because it includes untested files - for example `bin/markoc.js`. also  changed the script to reuse `npm run jshint` from below for linting.', '+10', "if there's any other way to get `--harmony_async_await` working. i'm for it. i'm using `_mocha` with `istanbul`.", 'so coverage runs fine if i check out my master separately but as soon as i link in node_modules to the new mosca then it fails.i think istanbul is getting confused by the links or something like that.', 'adding istanbul and coveralls', 'caitp it looks like the only signifcant difference between the two approaches is the coverage module in use--yours uses "jscoverage" and this uses "istanbul". is there something else i\'m missing. or are you saying that you\'d rather use jscoverage?', "feat: migrating utility modules to monorepo. this moves us closer to wrapping up the work on migrating our utility modules into a monorepo:* adding a top-level test-runner.* taking a rough stab at a readme better explaining the motivation around this monorepo (i would love some help editing this).i'm convinced that moving to a monorepo will help better centralize bug tracking. and will keep conversations centered around the more interesting modules in the istanbul ecosystem.## not a blocker ... but ...i would love some help debugging why the `istanbul-api` tests have trouble running when instrumented with `nyc`.", "graingert nope :) i see this as the first pull request on top of the unification pull-request  also. cool thing worth noting as we pull in a few more libraries.. there's a `lerna import` now -- which i was playing with for `conventional-commits`."]