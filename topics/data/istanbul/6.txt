["interesting - so they are being excluded when i use `initall: false`. but the coverage summary is not being updated with the `istanbul report text-summary lcov` command. that's kinda strange.", 'so the scale of what we should move is much larger than i realized. which is fine. makes it easy. at least. gonna handle that now.', "posting this here. since the community keeps growing and we're not all in the slack :)so. we need to make a decision on cleanup. and installs. i'm starting to shy away from the idea of using npm install from inside the directory to buildi'm thinking that we need to just use npm run build or something like that. so that when someone does `npm install nodegit` or `npm install` and nodegit is in their package.json. we can clean up a bit because over half of the size of nodegit once it's installed is dead weight. source files. etcwe have no way of telling did they do it local to the directory vs is it being pulled from npms registry vs is npm pulling it from a git repo via a tag like `nodegit: nodegit/nodegit#somesha` in order to decide when to clean otherwise. using npm install for only people installing the dependency fixes this for us. i'm gonna move forward with this idea. but i'd love some input from at least two of you. to get a consensus on that before landing it. mcollina johnhaley81 tbranyen", 'that doesnt work. because then somebody trying to install the dependencies will probably run npm install and mess up their directory. i\'ve added a clean script. and i\'m going to add the debug stuff now. but i think we\'re kinda sol on the cleaning up after ourselves thing. unless we wanna check against node_env=="production" or such', "i think the best way is to assume that a user that want a custom-build thing will read the readme. so. i'm :+1: for cleaning up always. but after a custom build is made. never clean it up (we can just stick a file somewhere). our install script can be called with `--cleanup` from npm. and it will be immediate for users how to install without cleaning up.what do you think?", "thats certainly an option. but only helps if somebody is consciously installing nodegit. for now. i think i might just leave the clean script in place but not called. npm is overhauling their installer at the moment. and i'm sifting through their issues. gonna see if it resolves all of our issues. and if not. i'll either comment or file something new. gonna open a pr for these changes. because they _seem_ to be working.", 'this is resolved now right?', "hey probot-stale. i appreciate you care about this. i don't know if this has changed in master but i really think it's an improvement. could you advice how can i get more attention?", 'different approach suggestion. did you test how long it takes to install the deps with `yarn` instead of `npm`?', 'travis notes that their cache is downloaded from an external storage solution. so it might not help too much if most of the time is spent downloading binaries.', "npm install error in root directory. lerna err! execute error: spawn yarn enoentlerna err! execute     at notfounderror (c:\\users\\rpang27\\desktop\\github\\istanbuljs\\node_modules\\cross-spawn\\lib\\enoent.js:11:11)lerna err! execute     at verifyenoent (c:\\users\\rpang27\\desktop\\github\\istanbuljs\\node_modules\\cross-spawn\\lib\\enoent.js:46:16)lerna err! execute     at childprocess.cp.emit (c:\\users\\rpang27\\desktop\\github\\istanbuljs\\node_modules\\cross-spawn\\lib\\enoent.js:33:19)lerna err! execute     at process.childprocess._handle.onexit (internal/child_process.js:215:12)lerna err! execute  callback with errorlerna err! execute  { error: spawn yarn enoentlerna err! execute     at notfounderror (c:\\users\\rpang27\\desktop\\github\\istanbuljs\\node_modules\\cross-spawn\\lib\\enoent.js:11:11)lerna err! execute     at verifyenoent (c:\\users\\rpang27\\desktop\\github\\istanbuljs\\node_modules\\cross-spawn\\lib\\enoent.js:46:16)lerna err! execute     at childprocess.cp.emit (c:\\users\\rpang27\\desktop\\github\\istanbuljs\\node_modules\\cross-spawn\\lib\\enoent.js:33:19)lerna err! execute     at process.childprocess._handle.onexit (internal/child_process.js:215:12)lerna err! execute   stack: 'error: spawn yarn enoent\\n    at notfounderror (c:\\\\users\\\\rpang27\\\\desktop\\\\github\\\\istanbuljs\\\\node_modules\\\\cross-spawn\\\\lib\\\\enoent.js:11:11)\\n    at verifyenoent (c:\\\\users\\\\rpang27\\\\desktop\\\\github\\\\istanbuljs\\\\node_modules\\\\cross-spawn\\\\lib\\\\enoent.js:46:16)\\n    at childprocess.cp.emit (c:\\\\users\\\\rpang27\\\\desktop\\\\github\\\\istanbuljs\\\\node_modules\\\\cross-spawn\\\\lib\\\\enoent.js:33:19)\\n    at process.childprocess._handle.onexit (internal/child_process.js:215:12)'.lerna err! execute   errno: 'enoent'.lerna err! execute   code: 'enoent'.lerna err! execute   syscall: 'spawn yarn'.lerna err! execute   killed: false.lerna err! execute   stdout: ''.lerna err! execute   stderr: '\\'yarn\\' is not recognized as an internal or external command.\\r\\noperable program or batch file.\\r\\n'.lerna err! execute   failed: true.lerna err! execute   signal: null.lerna err! execute   cmd: 'yarn install --mutex network:42424 --non-interactive'.lerna err! execute   timedout: false }", 'bcoe thank you for the feedback. yeah. i also wonder why ```$$cov_*``` is inherited from the old istanbul where new istanbul is using ```__coverage___```. it seems that ```$$cov_*``` is only used under istanbul-api which is not used by nyc.as to the coverage drop. i plan to work on it this monday. will update any findings here.']