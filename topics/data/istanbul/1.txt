['nolanlawson what do you do to figure out what exact lines are not being covered? i would like to get this to 100% so its easier to not regress it. even if we add some ignores for where there is browser specific stuff we can remove it when we start testing the browser implementation (and i would prefer to add ignores than tests that only exist for coverage purposes)', "awesome work. really happy to see the coverage go up. whether it's through dead code removal or reasonable `istanbul ignore`s.", '100% coverage. some of this really should have coverage. the bulkget stuff for example. however bulk_get is going to be actively worked on. i think if we land this. we have 100% coverage and we can maintain it easier at 100% and remove istanbul clauses as we work on those areas of code (its hard to maintain < 100% because patches that remove tested code will make coverage worse despite making it better tested)', "nice. let's do it. i agree that just requiring 100% code coverage is way easier to manage.", "this isn't really that transparent but i think the point about regressions and 100% is sound. :+1:", "rad+.  thanks guys.  istanbul ignore added.  additionally. jshint was barking about `atob` being redefined. which i suppressed.  rebase was being a little bully as  f70fc9b was a merge commit with a conflict resolution embedded.  i wasn't comfortable rebasing that one :/", 'you havent instrumented your code. unfortunatly instrumenting methods can very wildly so youll just have to do some googling.', "stupidism i've tested jakxz's branch of your repo; if you switch the order of rewire and istanbul things should start working for you.", 'istanbuljs/istanbuljs#42 - add failing test for cobertura reporter branchmap structure. #42 this branchmap structure is used by both the cobertura and  the clover reporters. a fix would add accurate conditional coverage to both.', 'chore: switch website url to the new istanbul.js.org url', "jakxz i'm pretty sure that in normal circumstances. getting a `null` statement should be impossible;samnelson are you able to share the codebase that you were bumping into issues on? i think if we switch the order of `istanbul` and `rewire` things might start working for you -- and we won't need this fix.", "jakxz the problem is it would result in misreporting test coverage information -- except in bizarre situations. like the interaction we're seeing between `babel-plugin-rewire` and `babel-plugin-istanbul`. it should be impossible to have a `null` in a coverage map. if we'd been hiding this edge-case. we never would have found the bad interaction between these two libraries that was dropping coverage information on the ground.", 'bcoe reversing the order resolves the problem. as far as documentation goes. maybe something in the readme for babel-plugin-istanbul would be a good place to document this this fix.', "q: how to manually add coverage during a nyc instrumented test-run. hi.i've got a fun little setup.i'm running `mocha` instrumented with `nyc`. like `nyc -n src -i babel-core/register mocha`. in itself. this part works.most of the tests are unit-tests running directly in the nodejs instance. other tests are end-to-end tests which start a webdriver-controlled browser. bundle sourcefiles with webpack using babel and `istanbul-instrumenter-loader`. then do some browser tests and send `window.__coverage__` back to the test-runner via the webdriver connection. the test runner then writes out the source-mapped coverage data to `.nyc_output` (with a little help from `istanbul-api`) where it gets picked up by nyc and reported. this works too.however. if i run both the normal testsuite and the end-to-end tests in the same mocha run. the manually written coverage overrides coverage data from nyc. that is. if i have 100% coverage on `src/thing.js` in the regular tests. but only 70% in the end-to-end tests. nyc reports only 70%.is there something i can do to somehow funnel the browser's coverage data into the running nyc instance?", 'after a while i figured i could just mutate the global `__coverage__` object. at that point. merging the source-mapped data into it was straightforward. sometimes you just have to write things down (into an issue) to figure out how to solve the problem :)thanks anyway!', "jpommerening i'm glad you figured out an approach  please let me know if there's anywhere we could document this better.", "samnelson please feel free to reopen this discussion if you're still bumping into issues  we've rolled out a few changes to nyc/istanbul-lib-instrument that i think should solve your problem.", "popomore there might definitely be some wins on both the istanbuljs and babel side -- it's always fun to crack out a profiler"]