['so. this is still an issue. unfortunately. you have to be very careful to generate the code and then to not have the project built (even from earlier). or it gets skipped. i think we gotta move this out of prepublish (maybe in to publish?). tbranyen suggested moving the binary stuff out of publish anyways.', 'ack tested both (the gulp-istanbul fix also works #582)', "possibly speed up dev-dependency installs?. i've probably been watching too many travis builds lately. but it seems like at least half (and sometimes most) of the two to five minutes taken by non-browser jobs is just installing through npm. with several times as many jobs in our build matrix as travis allows us to run at once. this can really slow each build down a lot. mocha installs quickly enough as a dependency of other projects. it's all those dev dependencies that make its own ci installs (and local development installs) sloooow.caching may or may not be a viable strategy to speed any of that up -- obviously we want to reinstall cleanly if anything that could affect it changes. and obviously running on so many different environments there isn't going to be a whole lot of opportunity to share an install between multiple jobs even in the same build. i suppose all the node 8 environments could be sped up by sharing an npm cache (not the install itself but the cache npm uses to install from). but that still leaves the variety of non-browser node test jobs...however. not all of our dev dependencies are actually needed by all jobs. could we perhaps make them optional dev dependencies and install them where they're needed? is optional dev dependencies a thing?here's what i believe are prematurely pessimizing our installs by being downloaded in all of them:- watchify appears to be referenced nowhere in our codebase except package.json; unless i've missed something. we can just remove it- eslint and eslint-* are only used in the lint job to my knowledge- the following are only used in browser jobs. to my knowledge:  - browserify  - browserify-istanbul (in my browser coverage branch/pr)  - karma  - karma-*  - os-name? the one place i know it's being used is to determine whether to use phantom or chrome in a non-sauce browser test  - ~rimraf?~ (nope. that's actually being used in a node-only test. and if we want to get off the makefile we'll probably need rimraf to clean the build before publishing as well as before at least some testing)  - through2- the following are only used in the phantomjs browser job. to my knowledge:  - phantomjs  - karma-phantomjs-launcher- karma-sauce-launcher is only used in sauce browser jobs. to my knowledge- karma-chrome-launcher is used if somebody runs the browser tests locally on mac. but not in ci as far as i can tell- the following are used in ci. extensively with my coverage enhancements. but might not be needed locally unless you want to generate coverage reports:  - coveralls  - istanbul-combine  - nycobviously. whatever makes these get pulled in for the relevant ci would also need to happen for local uses of them in order for us to be able to not download them by default...and if there's no optional dev dependencies. then removing them from package.json may be dubious anyway (they'd be depended upon but untracked...).anywho. i figured i'd throw the idea out there and see if anybody wants to look into it further. it would be awesome to bring the install time down. both locally and to speed up ci builds; but it would depend on really being able to get this all correct...", 'you could make `package-<task>.json` files and have a script rename the appropriate one to `package.json`.', 'scottfreecode as far as caching is concerned. both travis and appveyor are smart enough to disregard the cache when dependencies have changed. travis does it by default. appveyor settings can be tweaked as follows:```ymlcache:  - node_modules -> package.json```', "heya. i totally forgot about this pr. i guess this one is good to merge and all previous comments are taken care of? i see code coverage has slightly decreased. can you look into that? one issue is that a comment says `istanbul ignore else` instead of `istanbul ignore if`. and i'm not sure about the utcoffset lines. you don't have to fix lines that were not covered before of course", 'i have more now like maps merging and advanced reports. i would like to contribute with this project regarding documentation. these are my comments:  * i see that the intention is to provide a high level api with istanbul-api  * i see jsdoc comments in some part of the source - and some snippets in some readme.md files. but surprisingly i didn\'t found any command to generate the api-docs - i dont think there are. also i think the apidocs comments are not 100% complete.  * imo the most important missing part are examples. will try to make some. similar to the ones in istanbul v1 and pull request them in the main instanbuljs/readme.md file.  * before contributing with more docs. i would like some advice / opinions from the authors about the correct place / and technology to use. this library is awesome but the missing "getting started" documentation makes it hard to adopt for beginners - and is very easy to put some simple examples in a readme or in the main webpage. :(']