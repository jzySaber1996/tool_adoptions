['do you mean just adding it as a build step. like:``` yamlscript:  - npm run-script jshint  - npm test  - npm run-script coveralls```', 'jshint-fix: fix for jshint error. brianc. fix for the jshint error.', "alternatively i still kind of like `pouchdb.create()`; jshint won't warn about that. unlike `pouchdb()`.", 'yeah. even before promises. the error with undefined db names was pretty opaque: `typeerror: cannot call method \'match\' of undefined`.also. i realize functions in javascript can return new objects. but the only reason i propose `pouchdb.something()` is because crockford has dissuaded people from using bare functions that start with a capital letter (without using `new`). so differentiating between `pouchdb()` and `new pouchdb()` would be weird per jslint/jshint.also notice that the "promise-y pouch" you mention is only returned when there are no errors; otherwise. the user just gets a basic promise.either of your solutions seems fine to me. but i\'ll leave it up to you and daleharvey to decide. since this is a pretty big question that impacts a core part of the api.', 'hey. so this failed due to a jshint warning. you use 4 space tabs in side the if statement. so its a simple fix. just remove 2 spaces then```$ git add lib/adapter.js$ git commit --amend $ git push --force```you can test with ```$ npm run jshint```cheers', 'awesomeone small thing was the commit message. it was right on the first commit. but on this on it wasnt clear. calvin ammended it before push to " (#435) - new test and fix for db.bulkdocs with new_edits:true" the main reason i do the \'get a first simple patch in\' is to get past the jshint / commit message / github workflows up. now thats done. cheers :)', 'add maxlen: 80 to jshintrc. long lines hurt my head', 'ok cool sorry misunderstood that. looks like it was moved but forgotten in websql. +1 but needs a jshint fix', 'heh i mostly did that because jshint moaned about it. i knew it was a keyword but didnt think it would cause a parse error', 'the mapreduce project is using `maxlen: 100`.  might be a bit easier to achieve?', 'i could start going through and fixing files to be <= 80 chars.', "heh yeh thats an annoying one```abstractpouchdb.prototype.post =   utils.adapterfun('post'. function (doc. opts. callback) {  //other code}```has been my preference. definitely not 2. i wouldnt be particularly fussed between the other 3 though", 'this breaks jshinting (specifically we want a space after function and before the `(`) they way to fix the  80 character issue is to add the line `"maxlen": 100` to the `.jshintrc` file and then fix the errors that it finds.  you can run jshint by going `npm run jshint`', '1533 maxlen. same as before. but passes jshint now.', "i've made my best effort to follow the guidelines in contributing.md and readme.md's (jshint. tests. less. etc). but i have my doubts about the tests i created and about the documentation (should i put more details on it? should i update the screenshots to include one of the horizontal layout?).i'll try to put some notes in some of the lines of code to explain what i've done.", 'needs jshint fixing.', "that's really weird. the jshint failure was in a file i never touched?", 'please update to pass jshint :)', 'added factorial and updated to pass jshint :)', "thanks for this - note that i'm going to have to fix your file so it passes jshint. so if you do create an example or something please pull freshly first.", 'oh and make sure jshint passes too if you can :)', 'excess errors with asi and `delete`.. the following javascript:``` javascriptvar a = { b: 1 }delete a.b```with the following `.jshintrc`:``` javascript{  "globals": {  }.  "node": true.  "es5": true.  "asi": true}```throws:```jshint-bug.js: line 3. col 1. expected an operator and instead saw \'delete\'.jshint-bug.js: line 3. col 10. expected an assignment or function call and instead saw an expression.2 errors```while it should not give any errors.', "typeerror occurred when jshint executes with one file. when i executed jshint with one file path. typeerror is occurred because 'process.env.home' is undefined in findconfig().---d:>jshint plugin.jspath.js:204        throw new typeerror('arguments to path.join must be strings');typeerror: arguments to path.join must be strings    at f (path.js:204:15)    at object.filter (native)    at object.exports.join (path.js:209:40)    at findconfig (c:\\documents and settings...\\application data\\npm\\node_modules\\jshint\\src\\cli\\cli.js:105:33)    at object.exports.interpret (c:\\documents and settings...\\application data\\npm\\node_modules\\jshint\\src\\cli\\cli.js:337:45)    at object.<anonymous> (c:\\documents and settings...\\application data\\npm\\node_modules\\jshint\\bin\\jshint:3:32)    at module._compile (module.js:456:26)    at object.module._extensions..js (module.js:474:10)    at module.load (module.js:356:32)    at function.module._load (module.js:312:12)---", 'cannot click "blog" link on the jshint.com website. github\'s fork button prevents clicking blog link on jshint.com.the fork badge has higher z-index and oveylaps blog. on firefox 20. osx. this makes the link unclickable.', "add support for exclusion of function declarations from `latedef`. i'm proposing a new jshint option that allows me to exclude function declarations from what `latedef: true` does not allow. i don't want variable declarations to be handled the same as function declarations. i often write function declarations at the bottom of my iife with the intention that they are utilities that are hoisted throughout the current function scope.  in the irc channel. guyzmo suggested the name `latedef_func_ignore` for this.", '+1. but i think the `latedef` flag should ignore function declarations outright.', 'maybe i\'m too much being "oldschool c coder" about that. but i think it is a good habit to use symbols _after_ they are being defined. even though the language is flexible to do it anyways. but that\'s more a stylistic issue. so maybe `latedef` should ignore function declarations per default. and have a style option `latedef_func` that whines about that.', 'what resolution do you have?', 'also. this is an issue for jshint/site repo and not for this one.', "i agree with both of you. it'd like to give the user the option to enforce what they need. it is a stylistic point. even though i don't really understand the worry behind prohibiting using function declarations before they are defined.", "how does contributing a new feature usually work in this project? i'd like to get some consensus that a patch is worthwhile before i work on it. the contributing markdown file doesn't really talk about new features.", "basically. you fork this project to you github. create a branch with the new feature's patchset. upload that branch to a branch on your github account. and finally you make a pull request with a reference to that ticket (you can also refer to that ticket from your commit log messages).", "buritica yeah. i read that. i referenced it in my previous comment. that doesn't really address how to get consensus that a feature is worthwhile and will be mergable.", 'johnkpaul oh. my bad. now i get what you meant. i do think it would be a useful feature. so +1', 'done ;-)', "any chance of getting this pull request merged in?i'm currently working on a node application that hosts some public javascript files using jquery. it doesn't make sense to just consider jquery a global for the node files. and there are quite a few public files so configuring via comments just seems tedious.", 'is this rule no longer planned for jshint?', 'just landed this. to ignore function declarations you\'ll be able to use `latedef:"nofunc"` in the next release.', "i couldn't come up with a use case appropriate for the test case. gonna merge the code anyway since it doesn't do anything dangerous.", 'merged in. thanks.', 'thank you ^^', "what's the release cycle like for jshint? if there's no formal process i'd really appreciate a bump so that we can start shipping code that uses this patch upstream :)", "withcs. included the checkstyle reporter in the bundle so that it can be used in rhino environment. also updating the gradle-js-plugin so that jshint can be used to generate checkstyle reports to be parsed by jenkins after builds.made minor change to the checkstyle reporter to be able to print instead of using process.stdout. had to create a fake console to handle error prints from the event package about event listener memory leaks. because listeners doesn't seem to be removed when too many files are given as input to jshint. that issue needs to be addressed by someone who knows how.", "> had to create a fake console to handle error prints from the event package about event listener memory leaks. because listeners doesn't seem to be removed when too many files are given as input to jshint. that issue needs to be addressed by someone who knows how.you should create an issue about that", 'jshint incorrectly asserts functions declared in loop initializer as being inside of loop. take the following code for example:``` javascript~function(){    for(var noop=function noop(){}. len=10; len--;)        noop(len);}();```of course the above code is useless (and not as "anonymous" as it otherwise should be. wink wink). but it demonstrates the issue. jshint will incorrectly throw the "don\'t make functions within a loop" error. although the function is not. technically. created _inside_ of the loop in the manner that jshint is attempting to ward against.', "can't pipe output to less. i'd like to `jshint app.js | less`. but it looks like jshint isn't using stdout for output.", 'why would you pipe report results to css pre-processor?', 'fwiw. this is also a duplicate of #687', "i will provide more context.when i run `jshint .`. jshint examines not only my node.js code. but my dependencies' code in `node_modules/` as well. this takes a lot of time. and obscures the jshint messages relevant to my code among messages relevant to the dependencies.in the future. could we filter out `node_modules/` from the locations jshint looks for code? thank you.", 'mcandre sorry... #990 was really a dup of #687 (both were about reading from stdin) and then since #990 was closed as a dup of this one i drew the wrong conclusion... yours is really about the other end of the pipe - stdout', 'in general. using -- will mark the end of options. so "jshint -- -some-file.js" should work. and if -a is an option. "jshint -a -- -some-file.js" should work and "jshint -- -a -some-file.js" shouldn\'t (with the option after --).', 'it is easy (easier) to add support for all available reporters given this patch.', "i've ran `node make.js` and the file that ends up in dist seems unchanged. does something else need to be updated?", 'yeah. you need to run `node make.js build` now. `node make.js` lints and runs tests only.', "thanks! perhaps an update to package.json's scripts.build. so `npm build` would make the build? i'll make a pr.", "and why can't you use `.jshintignore` file for this?", 'add cli option for .jshintignore. for example:```$ jshint --ignore=path/to/jshintignore```', "i think it's bad idea because of relative paths in .jshintignore. sorry.", 'when jshint "chokes" it usually means that it crashed. which is worth a bug report :-)', "i totally agree with anton. because kiss! and because. that's your text editor and context tag tool job's to handle that. not the linter.but the beauty of software engineering is that you can use jshint parser as a library that you can monkey patch to make a tool that offers such a feature. but my editor rocks so much that i don't need it. and won't code that ;-)", "warnings on missing timer function delay parameter. i do not get any warnings about missing delay parameters when i test the following code at jshint.org``` javascript/*jshint browser:true. devel:true */settimeout(function(){    console.log('test');});setinterval(function(){    console.log('test');});```i could not found any reference stating that this is a valid syntax. but even if it is. it would be nice to at least get a warning that the parameter is missing.", "jshint checks a program for syntax problems and has no idea about any apis. though there are some predefined globals such as `settimeout`. jshint has no idea of how it's used.e.g. what if i have redefined `settimeout`? furthermore. the functionality of built-in apis vary between browsers.", 'what exactly does the jshint `browser` option do? does it just add `settimeout`. `setinterval`. etc as acceptable global variables only? or. does it (or should it) also include the syntax that goes along with these variables?', "yes. it only adds them as global variables that you shouldn't write to. (so `var settimeout = 'hello';` gives an error in the global scope)i do believe that maintaining how apis should be used is outside the scope of jshint. but perhaps the maintainers can tell you whether there any plans to include such functionality in the future.", 'ok. thanks! :)', "i'm kind of looking for something like this too. i'd like to be able to specify some extra `predef`'s for my test spec directory. without running the risk of allowing globals of `describe`. `it`. etc.. to escape unnoticed in my app's js files. i was hoping that adding a `.jshintrc` with just the extra predef entries would result in them being added to the default config inherited from the root.what do you suggest if multiple option files are off the table?", 'again. your argument makes no sense. if someone obeys the jshint advice ("[\'public\'] is better written in dot notation.") they will have broken code in all major browsers. jshint should not warn or advise someone to write invalid code.also. i think you have misread the spec. please check the selected answers on stackoverflow about this. thanks', "jshint reports global variable that is not global.. look at this example:```(function(){    'use strict';    var mylist = [];    function something(){        var key;        function sub(){            for(key in mylist){            }        }    }})();```regarding the variable 'key'. jshint tells me that:a) key is defined but never usedb) creating global 'for' variable. should be 'for (var key ...'.", 'just tested this against head. and i confirm the bug. thank you for reporting this']