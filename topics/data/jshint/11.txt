['update globbing pattern to include subdirectories into linting process. with the current globbing pattern for _linting_ tasks in `gruntfile.js` all subdirectories are ignored.sadly including them will instantly fail the grunt task.```$ grunt  ... >> 161 errors in 64 fileswarning: task "jshint:tests" failed. use --force to continue.```beatfactor if you ok with it i\'d open a _pr_ and take care of the new issues.. regards~david', 'sure.', 'ack. jshint error', 'this seems to be failing due to jshint. but i really like the approach. i\'m +1 after jshint fixes and a green run. also squashing the commits would be super. :)calvinmetcalf could you comment on this "optional dependency" stuff? looks fine to me; users are at least warned about the lack of a `leveldown` dependency. although maybe we should `emit(\'error\')` or something?', '`mocha/lib_spec.js` fixes the jshint issue?', 'yeah. that was my bad. though. we should probably tell jshint es6 stuff is ok once node 6 is the lts.', 'switch from jshint to eslint. some of the options currently used by nunjucks in `.jshintrc`. e.g. `quotmark`. have been deprecated by jshint because they don\'t concern code correctness. we should maybe have a look at [jscs]() which is specifically targeted towards code style issues. at first glance. "yandex" seems to be the builtin preset with the fewest errors but a custom one can be easily crafted.', "yeah. i'd probably also prefer switching to eslint. which does both in a single tool.", 'fix config.js blueprint jshint. jshint complained about this.', 'good catch', 'run cli tests and jshint with the dotnet travis jobs. ref: #768the dotnet jobs should now. like the python jobs. fail when there are jslint errors or the clitests fail.', 'thanks!', "easy fix: add a `/*jshint maxstatements:99*/` directive in your function. longer one: refactor so the function nb of statements decrease :) up to you. i'm fine with both ways.", "i see. i removed the ones jshint complained basically. but that'd be a good sanity check. i'll try.thanks", "there's already a bug for that.", "allows passing an exclude-path. this would allow you to do `jshint --exclude-path .gitignore` and jshint will ignore everything i'm ignoring in git!", "no warnings for trailing commas. it seems like jshint doesn't warn you about trailling commas inside hashes.like the following:```position: {  my: 'bottom center'.  at: 'top center'.  viewport: true.  adjust: { method: 'flip' }. //<----- like this one here} ```this breaks in ie10 and ie11. so it would be a good thing to check these things.", 'nonetheless. i agree with mafigit. its a good idea to throw a warning for an extra -- invalid -- comma in json syntax.', 'fix jshint. fix jshint on itself. also: added .jshintrc for easier acces.', 'ok. i will update jshint. when accessing travis-ci before sending the pull request. which i did before your message. i saw the results of the latest pull request which were failed.', 'i just sent another pull request just with the .jshintrc configuration file. would you accept it? i think it reflects poorly on jshint that running on its own code results in errors. when it can be solved so easily.', 'added jshint configuration to run jshint standalone.. it is strange that running    jshint src/jshint.jsyields a lot of errors. this patch fixes it adding jshint configuration.', 'thanks. i tried the indent: false initially (no luck). also tried the "w032" but keep getting an error indicating that it\'s a bad option `line 0. col 0. bad option: \'w032\'.`here\'s my command line:`jshint --config options.json test.js`and my options file:```{  "w032" : true}```so have no idea where i\'m going wrong...', 'antonkovalyov i think we can re-open this issue as this format inside .jshintrc no longer has any effect:  "-w014": true.  "-w069": true', "extended `asi` option to be safer. when using automatic semicolon insertion there arecertain edge-cases that you need to keep in mind.namely new lines starting with either `(`. `[` or`/` because those may mistakenly be interpreted ascontinuations of the previous line.if you enable the 'safeasi' option jshint willwatch out for all the potentially unsafeedge-cases. so you don't have to.---closes #1395", "hi! thanks for your patch. i haven't looked at the code yet (merging another patch atm) but this should be part of `asi`.", "makes sense. it's getting late here. so  -- unless someone says otherwise -- i'll merge `safeasi` into `asi` tomorrow.", 'nothing was changed since then--are you sure this is not a local problem? can you give me example of your code _and_ your .jshintrc?', 'one use-case came to my mind: if someone really knows what they are doing. then they might want to disable this bit of security feature while still having asi:true. if they were controlled by the same option that would not be possible.how about. as a middle ground. have this implicitly enabled when someone sets asi:true. but they could still explicitly disable it if they wanted to.could we do that?', "i don't know why would anyone want to write `return\\n[1.2.3]` for example. there are instances when it is okay to omit semicolons before `[` for example but i think we should just check for those.", 'js that breaks jshint. with this js:rect(80.70.60.240);rect(------. 70.60.240);that results in an error "this.right is undefined". in jshint and our own site.(yes. i know. that\'s not good js. but it\'s from a student.)', 'fixed.', 'why can\'t you put `"-w058": true` into your .jshintrc?', 'ah. i use /\\* jshint ... */ within a scope quite a lot and it behaves as expected. what you want sounds ok.', "extend option overwrites options in the wrong direction. given the following configuration:b.jshintrc```{    maxlen: 10}```a.jshintrc```{    extend: 'b.jshintrc'.    maxlen: 20}```produces `maxlen:10` in `a.jshintrc`. this is because the arguments to _.extend are backwards here:`_.extend(config. exports.loadconfig(path.resolve(config.dirname. config['extends'])));`as the underscore docs say in  extend_.extend(destination. *sources) > copy all of the properties in the source objects over to the destination object. and return the destination object. it's in-order. so the last source will override properties of the same name in previous arguments.", 'jshintrc "extends" fix - for master. switched the _.extend call to _.defaults. as to properly provide the intended benefit. adjusted the tests to ensure that the files are merged properly', "didn't notice #1441", 'jshint is moving away from styling options.', 'i think this will be different than what most people expect for [.jshint|.git]ignore files.', 'this is no longer an issue i believe.', "we don't add any more style options sorry.", 'ie10 and ie11 both implement es5 where trailing comma is legal. you need to use `es3` as nschonni said.', '+1. getting this a lot in [koa]()', 'we have finally refactored the code and hooked up the setting via a global `.jshintrc` file.', "i have the same needs. i want to extend my jshint options for my `test` directory so that i can define my test framework's globals.jamesarosen you might also want to define linting rules for a file glob pattern such as `test/**/*.spec.js`. in case you have files in that directory which won't be run under by a testing framework."]