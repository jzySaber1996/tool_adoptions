['there are jshint errors.', 'first check code with jshint upon running npm/grunt test', "matmuchrapna if the stack was garbage and jshint didn't provide a better stack (or showstack: false) then it is normal", 'first check code with jshint upon running npm/grunt test', '(#79) - add jshint', '+1', 'just use a `.jshintrc` file to define these globals...', 'you also changed the [] to {}. i like.', 'again. i think that is the point of a `.jshintrc` file. you can just copy it from one project to another. not a big deal.', 'you keep referring to some "other parser" but such a thing does not exist. all sane parsers accept trailing commas. so while it is true that jshint cannot be used for the task outlined in the initial description in this ticket. your implied assertion that there is another tool that can be used for that task is not true.', 'so in other words. for people who want to support old ie.are you guys pulling this in or what? this is one of the most useful checks in jshint.', 'in file options overwrite everything else. do you have build failing because of that or what? closing for now but will re-open if the issue is real.', 'for now jshint works on a per-file basis only. in future we might change that but no eta.', "what: it's for yeoman (through grunt-contrib-jshint) where we're trying to reduce the size (in bytes) of our dependency tree. but i don't see why you shouldn't do it regardless. no point in shipping useless files.why: people commit dependencies for deployable projects (best practice in node). also bandwidth. though negligible in this case.", 'whoops. closing this and reopening on jshint/site', "there's a file `jshint.json` with all the options we use. you can either use with `jshint --config=jshint.json` or by running `node make.js lint`.", 'add optional parameters to cli.gather. if gather was invoked without an object that had an extensions and ignoresproperty then there would be an exception thrown.  it is reasonable that aclient would invoke jshint with an object without these properties.  especiallysince grunt-contrib-jshint relied on the fact that ignores was optional (seecommit 5de09c4) and then that functionality was changed without discussion orwarning. breaking grunt-contrib-jshint.gruntjs/grunt-contrib-jshint#86', "thanks for pulling.  i'm new to pull requests.  i see 'closed with unmerged commits' and an option to delete branch.  is this the norm and do i delete the branch?", "well. i don't _merge_ commits i squash them and apply them as a single patch with my own commit message and your name as an author. this results in a different hash from your original commit hence the unmerged commits messages. this doesn't happen when you use the merge ui button here but i like my history clean and tidy. anyway. your change is in so its safe to delete the branch. thanks again!", 'awesome!  yes. that makes sense.  thanks for the explanation.', "i'm a fan of the solution proposed by dilvie. how might we express these different modules?perhaps by introducing a syntax (encoded as a string. of course) to `.jshintrc` to require or include external partials?or maybe adding support for dynamically loading a collection of `*.json` files from the file system from a specific directory (such as `<project root>/jshint-globals/`)?", "are you sure you don't have `.jshintrc` with `es5:true` somewhere in your home directory?", "apologies. i haven't used `typeof` myself. i just noticed that it always returns a string and so it is advised at work to use loose equality for that and strict for everything else. i thought that since this may be a common thing that organisations advise. it should probably be an option in jshint to allow `typeof` comparison be loose whilst everything else be strict.", "yeah. i know a static code analyzer has some limitation. i think it's not a problem to ignore false positives about the usage of 'with' as well as local variables named 'eval'. local variables you can rename them. so you can avoid the false positive. if you take care of what you do you can do the same with the 'with' statement. using 'with' is a bad practice anyway and is forbidden by the strict mode._but_ false positives about 'eval' are becoming very boring with method calls. in my case i depend on an existing library. a template engine. of course it defines a namespace with some functions. it also has a function named 'eval' to evaluate the template contained in that namespace. there's not supposed to be anything wrong with that. but due to that false positive in jshint i'm not supposed to use that method. i can't rename it either like a local variable. i'm not the maintainer of that library.so i think that not warning about functions named `eval` and called like a method will solve the problem about libraries that define some functions named `eval` in a given namespace or a class. it shouldn't hurt the original purpose purpose of that warning (tracking usage of the global `eval` function and kick anyone using it) while still allowing most valid use cases.", "and why do we need an option for it?shouldn't tabs always be counted as 1 character (for error reports)?i may miss the point. but i think this is a greater issue. jshint just can't count tabs easily because they are replaced with n space characters while lexing a source line (inherited from jslint).please provide test cases with your pull requests.", "jshint -c jshit.json a.js. can't parse config filehelp!", 'do you have a file `jshit.json`? (note the typo)', "hmm. shouldn't this be renamed/symlinked so it's picked up by default when running `jshint` in this project's directory?", 'thanks for the patch but i decided not to merge it at this time. i think introducing this option will cause us not to spend time on improving the check. i suggest using `/*jshint -w100 */` to hide the warning.', 'few issues here:- arrow functions break on `undef: true` because the argument is parsed as an identifier before the rest of the expression is parsed. not sure what the most elegant way to handle this is - some kind of lookahead for `=>`?- jshint is also expecting `"use strict"` in the body of arrow functions in `strict: true`. which seems bad. technically it makes sense. but i can\'t see anyone bothering with function-level use strict on arrow expressions in practice.i don\'t really think `globalstrict` has any impact on the undef issue. though of course it fixes the function-level use strict issue.', '> some kind of lookahead for =>?the static semantics in the spec use a mechanism called _coveredformalslist_ (reparse a covered _expression_ using _formalslist_ as the goal symbol.) hope that\'s helpful> jshint is also expecting "use strict" in the body of arrow functions in strict: true. which seems bad. technically it makes sense. but i can\'t see anyone bothering with function-level use strict on arrow expressions in practice.is this the same expectation that jshint has for function expressions?', 'make all options enforcers. all options should be making jshint more strict while. when executed without any options. jshint should be as relaxed as possible. some options should be enabled by default to make it useful in a `npm install jshint -g && jshint myfile.js` use case.', 'i was wrong: by default. `quotmark` is set to `true`. in which case either type of quote mark is accepted as long as it is consistent throughout the file. `quotmark` was set to `"single"` in my project\'s .jshintrc. but i didn\'t find it there because i was searching for a line with "quote".', '+1 here too.', 'while the per-directory `.jshintrc` file is a really powerful tool. this proposal actually soothes a massive painpoint that is _created_ by per-directory `.jshintrc` files. it can be jarring to maintain the _similar_ parts of many `.jshintrc` files. while the _differing_ parts are all we should really care about.antonkovalyov i hope you give this serious consideration :)_edit_ i suspect this will be extremely useful for jquery and all of its projects. as there are often several `.jshintrc` files in each of the jquery repos', 'the `--show-non-errors` option switches to a reporter that does show the warning:```$ jshint --show-non-errors test.jstest.js :    unused variables:        previousvalue(2).```', 'please change jshint.js license. remove bad or evil. hi.could you please modify the jshint.js license to be a real mit license?the "the software shall be used for good. not evil." prevents library to be packaged in debian and maybe other repo where code should really be free of use (yes. even evil). and honestly. if someone wants to use it for evil... well i don\'t think he will care about the license  :-)thanksolivier']