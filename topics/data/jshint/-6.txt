['i commited the cleanup. now if you `npm install jshint` and then run `jshint src`. you can lint changes (patch. addition. etc.) against our ruleset before submitting. should make contribution and code reviews easier.', 'will go and fix the jshint errors', "coding conventions and jshint. currently phaser's source code is a bit messy (imho) since there is no strict coding conventions. i will not dig into the source code to expose examples but here is some common issues:- line endings (some files contain crlf)- indentation (some files mix in tabs and spaces. variable tab lengths)- brackets position (same or next line)- etc...what about adding a linter such as codepainter or jshint to phaser's build in order to make the source code uniform between each files?", ':+1: +1 always worth doing', 'eventually yes. but there are far more important things to be doing at the moment.', 'the-simian - is it possible for you to cherry pick and commit your .jshintrc file.', '> running "jshint:all" (jshint) task> linting app/android.js...error> [l701:c66] \'localfile\' is not defined.>       cmd = this.adb.adbcmd + \' pull /sdcard/screenshot.png "\' + localfile + \'"\';', "not sure. don't know too much about grunt. i figure grunt has a simple way to extend it or hook into it. if they have an irc channel or some forum ask there?", 'i think it become to complicated and not solution will be found since grunt will say that is jshint and you say that is grunt - whatever it result that jshint is less usable both with grunt :)i think it is wrong that is not possible to switch messy warnings.', 'really not understand what you talk about - i was open this ticket and know why is open :)it is open because it generates messy information not because i could run next :)if you give up with this bug - please keep it close and not improve jshint at all.', "gfranko this is a different issue.as for the original issue: the re-use of `prop`. while valid in this case. really looks like a typo. in next you will be able explicitly ignore any warning but this behavior won't be changed in the current tree.sorry for taking so long to respond.", "+1i like the output of otakustay reporter better than --show-non-errors. only issue. the reporter doesn't pass jshint ;-)", "eqeqeq can't be turned off. `/*jshint eqeqeq:false */` has no effect. this was reported already in issue #236 which was closed with an incorrect explanation. problem is seen in jetbrains ides like webstorm. phpstorm. pycharm. intellij idea etc.", 'same question here:```/*jshint jshint:false*/.. third party code that i do not want to jshint```has that kind of jshint skip been implemented?', 'not yet. the fastest way to see this implemented is to send me a patch.', "just curious. what about rhino and windows do they also have a .jshintignore or something similar?i think it's worth a shot at having both a directive and an external configuration option just like we do with the options.", "i'd love to have all wrappers mirror features though. but at least with jsc some things are just not possible (poor system apis).", "danmilon as far as i know it's not. right now i make my code ugly to satisfy jshint as i rarely use the `delete` keyword. i'd rather have false positives rather then lose real errors in my jshint", 'added value "paramsignore" to options.unused.. this will make jshint ignore function parameters in warnings about unused variables.it happens quite often that you do not need all parameters a function/callback offers. think about $.ajax\'s success callback for example. which has the parameters data. statustext. xhr (in this order). it may happen that you need only the xhr parameter in your function body. in that case jshint would correctly (but for my taste unnecessarily) point out that the other two parameters are unused.usage is now:options.unused = true: same as beforeoptions.unused = "paramsigonre": same as true. just ignore function paramsoptions.unused = false: same as before', '``` javascript/*jshint unused:true*/(function (){  "use strict";  function used()  {    return \'used\';  }  function unused()  {    return \'unused\';  }  used();}());```now i see that the error uses the line number. but jshint.data.unused uses the line number of the parent:jshint.data.unused[0].line = 2jshint.data.unused[0].name = "unused";jshint.data.unused[0].function = "anonymous"', 'i like this feature. and was just about to suggest it...', "sorry. i thought about this and i don't think ignoring all arguments is a good solution. the only valid case i see right now is when unused arguments are followed by arguments that are used:``` javascriptmyfn(function (error. data) {  console.log(data);});```but we can be smarter about this--we don't need to warn about such cases at all.", "hi anton - could you explain your reasoning here? why don't we need to warn about such cases at all? do you mean that you will implement the feature of not warning about unused arguments that are followed by arguments that are used? if so. i imagine you mean that this pull request was closed in favour of issue #607", "we don't need to warn about such cases because it is clear--as clear as it can be from static analysis--that the unused variable is not an oversight but something you have to declare because you need to use other arguments. unused arguments from the end of the list. on the other hand. don't need to be there and can be easily removed without breaking your code.so yeah this pr was closed in favor of #607 which will be ready for the next r10 release (scheduled for next weekend).", 'thanks for the explanation. anton - i look forward to this great new feature :)', 'like the smarter idea!', "thanks. but now i have next error:``` javascript/*jshint unused:true */function test(a. b) {    return b + 1;}`````` basht.js: line 3. col 16. 'a' is defined but never used.1 error```how i can check only last function parameters?", 'no. i dont want the smarter idea. i want to write the arguments that are passed for completion and documentation even if  not currently used in the implentation.', "then you shouldn't probably use the `unused` option. this option checks for variables that are not used in your implementation without any regard to documentation and such. you can always just check jshint.unused array manually and pick and choose variables you care about.", 'i want to check for unused _variables_. not function arguments. on other places they never make sense. but in arguments list they do!if the functions gets passed a value. its a good idea to keep the argument there for consistency.', "all your arguments are about your particular style of programming while this check is not stylistic at all. i don't want to add more options because adding them means having more stuff to port to jshint-next and make sure it's backwards compatible and all that.jshint has tons of stylistic checks but `unused` is not one of them. as an aside. if i had to keep unused arguments in function's signature i'd do something like `function main(a. b /*. c. d */) { ... }`", "in my opinion. even with newcap:true. it would be nice to specify exceptions. such as 'raphael' in the .jshintrc file.", 'antonkovalyov i think it would be useful to specify one or more names to be ignored by the newcap: true (e.g.: specifying them in the .jshintrc file). raphael and many others would fit in there.', '`.jshintrc` is handled by node-jshint and this is just a library.', "yeah. it would be really nice to have this - i hate unnecessary nesting. oh. and thanks ten trillion tonnes for jshint. it's solid gold.", '+1i prefer this style than the alternative that requires one more level of nesting.']