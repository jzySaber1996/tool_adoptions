['same in travis ;)```> jshint --verbose .i18n.js: line 151. col 105. line is too long. (w101)1 error```too bad on nice expressive naming', 'please fix the jshint failure -- we use tabs (set to 4-characters) for indentation in our source and jshint is seeing a mix of tabs and spaces used in the comment.  the easiest fix is to just use the //\\* notation and put it on one line.', "yay jshint. okay. now it's really ready for real this time pinky promise.", "it's failing jshint", 'jshint', 'chore(tests): remove jshint checks for dependency tests', 'done. was also failing jshint. but should be good now.', "i'll just make a few observations and let techfort handle this pr : - it would be helpful to not have your automatic style changes in the p.r. - makes it difficult to see your changes.- i noticed your ttl function operates on meta.updated which would not exist on a new object and may yield a nan in your age calculation. is this considered?- you have some jshint errors in your p.r.. can you run npm run test before submitting p.r. to verify all checks and tests are passed.", "its been a long time since i touched the stuff. but i don't recall suppressing warnings on purpose ;-)i did submit pr  to fix (not suppress ;-))  jshint warnings and a fix to make jshint a mandatory precondition to npm test.( #138)", 'mirekh  whats in your .jshintrc file? seems like you have html in there', "the current test is pretty deceitful:``` jsvar stuff = [{'chair': 'horse'}. {'chair': 'donkey'}];for(var index in stuff) {  if(!stuff.hasownproperty(index)) {    continue;  }  alert(stuff[index].chair);}for(var index in stuff) {  if(1) {    alert(stuff[index].chair);  }}```output: one warning. for the first loop's if case. the second case is fine.", 'added an option to the .jshintrc files allowing them to extend others. adds a simple option to the .jshintrc files. which allows them to extend another file. this can be done once per file. but the chain is followed recursively. merging of the config files is "shallow". in the interest of simplicity.this is useful for the same reason it is useful when writing classes: it really helps keep things dry when you need an entire directory or subset of a project to follow only slightly different rules than the rest of the project.the example i think most people would relate to. is the ability to define different globals in your test directory from the rest of your project. in my case. i have a directory where every file should follow the project\'s rules. except the limit on line length:```{  "extends": "../.jshintrc".  "maxlen": 0"}```', "spurious 'unclosed string' when strings are properly closed after a newline.. 'two' in the code example below will trigger 'unclosed string' when the string is correctly terminated.```/*jshint multistr:true */var one = 'one';var two = 'two \\';console.log(one. two)```no particular reason for the style of 'two' but it did pop up in some code and jshint doesn't handle it well at the moment.", 'would also be interested if there is support for e4x in jshint now or if there is at least an easy way to exclude js files using e4x from jshint.', 'anyone have feedback on this?', 'i triage bugs and pull requests sporadically. will get to that this week. promise.', "i think it thinks that you're escaping a quote. definitely a bug.", 'move all state and warnings from lex.js. ideally. we should be able to merge state.js back into jshint.js', 'adding an option to allow for..if. i often use the following idiom. to filter unwanted properties in a for-in loop. or even in a normal for loop. if i feel the iteration needs some kind of filter.```    for (var k in obj) if (obj.hasownproperty(k)) {    }```however. without disabling the `curly` option in jshint. this is not allowed. can a new option be added? i feel this is a legit. clean pattern even though it abuses the rules somewhat (just like the `else if` pattern).thanks --', 'inconsistent build order of bin/build. we regularly do bin/build and copy the dist/jshint.js after we make changes to our copy. and we notice that the modules are often in different orders each time (like messages at top versus bottom). it would be better if they were in consistent order.this may be a browserify issue. so i could file it there.', "you miss the point. it's not about taking time to copy past files. it's about making sure that i always have the most possible warnings about all that could be wrong with my program (excepted the few cases that i specifically selected). instead of making a hudge list of all that i want to be checked. possibly forgeting some. and not updating it if an option is added in jshint.", 'i really would like to see this as well.', "extract js from html files. this is a feature proposal. i'm well aware that inlining javascript into html files is a bad practice in so many cases. but there is a few defendable usages.at my work. we develop widgets mainly self-contained into a single html file (that's what we did since day one and it works great). in order to lint the js contained into those files. i had to fork node-jslint in order to extract the source code from the html. as we now want to migrate to jshint. i did the same. and now proposing my changes to the community. as i am sure that it can be useful to someone else.as this is my first work on jshint. feel free to comment my code and ask me to reshape it if needed.edit: i didn't see the ticket #510 before pull requesting. i'm sorry. but i stay on my position that this feature would be better integrated to jshint cli. in order to be compatible with all ide / text editor jshint plugins. this is also why i don't want to have to pipe the output of a command to jshint in order to validate html files.", 'create hook for file info as lint method is being run. when running a batch process on many files (grunt. for example). it can be helpful to have feedback as the lint process is run on each individual file. rather than:``` bashrunning "jshint" (jshint) task# long pause of no feedback given to user>> 159 files lint free```it would be nice to be able to have a debug or verbose option that would output something more like the following:``` bashrunning "jshint" (jshint) tasklinting framework.js...oklinting main.js...oklinting utilities.js...ok# etc.>> 159 files lint free```', 'totally agree. i would love to see this come to fruition. either as a jshint-distributed ".jshintrc" file. or some sort of crazy option like `hardcore: true`.', "i recently installed jshint and i'll echo that i found this behaviour to be confusing when i instinctively tried using `jshint`. and it wasn't helpful that `jshint --help` doesn't declare how paths are specified and the presence of `--extra-ext` makes me think `jshint` should work.i didn't even think of using `jshint .` till i read this bug. i ended up using `jshint *.js`.", 'add jshint option to disable "missing \'()\' invoking a constructor. (w058)". i\'d like so see a jslint option to turn off:`missing \'()\' invoking a constructor. (w058)`i\'m not interested in hearing warnings when `new foo` is used in my code.- it\'s perfectly valid ecmascript.- the `()` is redundant when `new` is already present.- no one is going to try turning that into `new foo bar` like the issue with `if ( foo ) bar();` being incorrectly turned into `if ( foo ) bar(); baz();`.- worrying about someone forgetting `new` and writing `foo` is pointless since `foo()` is also a bug in the code so requiring `()` won\'t help anyways.- `new foo` is not bad coding style in this local project. in fact the code in this project quite consistently omits `()` on constructors with no args so jshint only omits warnings for code that doesn\'t follow the local coding style.i shouldn\'t have to write `/* jshint -w058 */` at the start of every file when i have a perfectly good .jshintrc file that i could put a named jshint option into.']