['apply jshint fix. cc sh1mmer jcorbin', 'dont ignore jshintrc. oops. cc sh1mmer jcorbin', 'just crawling through utils got me to the function comparerevs which is never used', '(#467) - make all adapters pass jshint and start testing in ci', 'maybe that would be useful to have sth like: `grunt test` which does `grunt jshint` and then `grunt node-qunit`. i always forget to run jshint.', 'you need to add initdbpair to the globals. linting is causing this to fail. you can test with ```$ grunt jshint```and instead of closing / opening the pr. while you are on the branch you can```.... make changes$ git add files$ git commit --amend$ git push --force origin mybranch```', 'switch global jshint definitions with .jshintrc. so i can share them with my editor', "feature: configure testem in package.json. it's (sorta?) becoming a pattern that package.json can be used to configure a tool rather than having a plethora of tool-specific config files.examples: browserify. testling. and jshint all allow configuration via a tool-specific key in package.json. (`browser`. `testling` and `jshint` respectively).it would be cool if testem's configuration could be supplied via a `testem` property in package.json. instead of `testem.json/js`", "locale-data/jsonp files won't jshint. when i run jshint on the `locale-data/jsonp/*.js` files i get the following warning for all files: `l1:c13105] w033: missing semicolon.`", "i ran into the same issue when compiling all the data.  the error implies that some browsers might not be able to show the character. but it doesn't say which and i'm not sure if we would be able to fix it either way anyway. we could always create a .jshintrc file to ignore the problem.in any case. it's good that we have the issue documented here and we can reopen it in the future if necessary.", "i'm fine with ignoring the warning.  (just thought i'd report it in case someone did care.)", ":ok_hand: i'll mark as wontfix for now. then.  if enough people care then we'll revisit in the future.", "add option which allows case without break. we do not use always a `break` statement before `case`. sometimes we use `return` statement instead or group several `case`s together like:``` javascriptswitch (n) {case 1:  r = 'one';  break;case 2:case 3:case 4:  r = 'few';  break;default:  r = 'many';}```i would be nice. if jshint allowed this code via some option (at least inside of a function scope).", "i had to use this as a work around jshint:```var fn = function. g = new fn('return this')();```", "it seems like we need an exception for just `new function('return this')();`in jshint-next...just curious - why do you need access to the global object?", "thanks for notice i didn't know that. because i simplified my example too much (the case-blocks weren't empty at first).", "this is not going to change in the current iteration of jshint but i am open to a discussion in jshint-next. i gather that with this code you want to get a reference to a global object from within any function? can you provide a real-world use case for that? i am looking for something where global object is absolutely necessary within a function and there is no other way to pass it in.(closing this ticket but let's continue the discussion)", "doesn't accept valid javascript. ### bug.js``` jsfoo();function foo() {    console.log('bar');}```### jshint result:```bug.js: line 1. col 1. 'foo' is not defined.bug.js: line 2. col 13. 'foo' was used before it was defined.```both statements are wrong. `foo` is always guaranteed to be defined before line 1 gets evaluated.", 'if `function foo` was replaced with `var foo = function`. then they would make sense. though. but just not in this case.', "thanks. i didn't know that option!nonetheless. the reported messages are still wrong. the function _is_ defined at the point it gets called. not yet _declared_. but defined.", 'i agree. i like to set `latedef: true` because of variable hoisting. i never really saw a need for relying on hoisting for anything. so i\'d rather have jshint warn me about it.for functions. however. many people like to read the code top-down. which leads to:```function dostuff() {   someinternallogic();}function someinternallogic() {}```this is so common i usually end up re-arranging functions to make jshint happy. or increasing my "mercy" threshold. it would be nice if late def of functions was allowed. maybe with another switch.', "rprieto same here. i like to put my module's exports at the top of the source and find it more readable that way. e.g.``` jsexports.publicfuncapi = somefunc;...function somefunc() { ... }```", "it's definitely the wrong error message from jshint...you should escape `{` in regex because it can be misinterpreted as the repetition operator `{min.max}`.so it's `var exp = /function(.*)\\{/gi` - and that works in jshint. too ;)..greetings."]