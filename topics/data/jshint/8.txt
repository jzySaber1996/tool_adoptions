['gilligan. can we remove **.jscsrc**. **.jshintignore**. and **.jshintrc**?', 'remove jshint/jscsrc leftovers. remove config files and jshint switches inthe sources.', 'davidchambers #1559 i just now realised that there were also still plenty of jshint switches across various test files ;(the pr removes all of them.', 'looks good.could you remove `dojo: true` to `.jshintrc` and move `define` to `predef`?', 'whoops. jshint mistake', 'fixed jshint errors and now the 190. 191. and 192 builds are now passing.', "```jshint .modules/casper.js: line 1496. col 44. this function has too many statements. (21)modules/casper.js: line 1496. col 44. this function's cyclomatic complexity is too high. (9)modules/casper.js: line 1705. col 38. this function has too many statements. (17)3 errorsmake: *** [jshint] error 2```", 'aha - many thanks.  just installing rhino. jshint and xcode command line tools (for make) to run this myself.', 'looks good until minor bits are addressed and jshint not complains anymore so the build turns green :)', 'fixed jshint errors.', 'unavoidable eval breaks q when content security policy doesn\'t allow it. attempting to use q in a chrome app gives the following error> refused to evaluate a string as javascript because \'unsafe-eval\' is not an allowed source of script in the following content security policy directive: "default-src \'self\' chrome-extension-resource:". note that \'script-src\' was not explicitly set. so \'default-src\' is used as a fallback.this is the code that triggers it:```var hases6generators;try {    /* jshint evil: true. nonew: false */    new function("(function* (){ yield 1; })");    hases6generators = true;} catch (e) {    hases6generators = false;}```maybe there could be an option for avoiding this check?', "i gather that this wasn't even thrown as an exception. i was counting on that.", 'nope. it just kills execution there and then...', "not very nice of them. i can't withdraw support for spidermonkey in the `v1` timeline. but there are perhaps better ways to check. e.g.. existence of a `stopiteration` global that is _hopefully_ not a shim.", 'the use of . between strings. when translating code from php to javascript it is easy to miss that js use + and php use . as glue between strings.this will pass the jshint test and will break during runtime:```$row = $in.start + _repeat($tmp. $in.debug_level) . $in.name + " (" + $in.name_class + ") " + $in.extra + " " + $in.error + "\\n" + $in.end;```the correct row should be:```$row = $in.start + _repeat($tmp. $in.debug_level) + $in.name + " (" + $in.name_class + ") " + $in.extra + " " + $in.error + "\\n" + $in.end;```', "ok. turns out i didn't have a recent enough jshint", "+1 for this. several of my developers would benefit from this and utilize jshint more often if they could more easily understand which rule is being violated so they can look it up and improve their javascript skills. myself included.i tend to fix violations i understand and ignore violations that i don't understand because i can't figure out which rule is being violated so in turn i can't easily find out why. i would be a better javascript programmer if i knew why.", 'license file missing from node module thereby breaking license terms. the license file is not being published with the npm module. so when you `npm install jshint` the license file is not included with the package itself. thereby inherently breaking your own license statement:`the above copyright notice and this permission notice shall beincluded in all copies or substantial portions of the software.`', 'ok. that makes sense. i should have thought of that. yeah. so this comes from me trying to work with my legal department to open source something that includes a heap of npm installed dependencies and trying to make sense of the licenses of the depended upon projects to ensure they are compatible with the license we\'re using (apache 2 incidentally). my first attempt was a script that parsed all of the node_modules dependencies recursively trying to find license information (e.g. from package.json license properly. looking for a license file). etc. it\'s a really challenge because of edge cases like this one when the license files isn\'t included or the license is inline in the readme or source.i would at least recommend properly pointing to the license file in the package.json. feel free to close this unless you want to use it to track the "crock of ****" issue :)thanks!mike', "perhaps it's a bit verbose. but i don't it's too much so.sure. there's some pain in having to write all of this: `// jshint ignore:line` to ignore a line - and i think this is a good thing. because you're essentially telling the linter to not do its job when using this option. i hope that this discourages over-use.if we make it too easy to disable linting or it's used too often. things could get to a point where you have to start asking yourself why you're using a linter to begin with.that being said. if you're in a situation where you _have_ to write code that otherwise doesn't lint. or probably won't ever lint. then i think the pain of using this as a trap door is still less than all the false positive errors / warnings you'd be getting otherwise.", "yeah these are good points. i just personally would prefer something a bit tinier -- but the jshint prefix is a good idea for sure. anyway. i won't write a patch then. i'll just let folks review yours. looks okay", "i altered the tests to reflect the behavior i want. but couldn't figure out how to fit this into the architecture. i still think this would be a great addition to jshint. just not sure how to make it happen.", 'the "immed" option prohibits the use of parens around non-iife functions. the documentation says that "immed" makes mandatory to use parens around iife functions. but nothing is said about prohibiting the use of parens around non-iife functions.it could be nice to have 2 options controlling these 2 features. as we could want to enforce the use of parens around iife functions and in the same time not enforce to remove them around iife functions.i think it\'s important to have them around iife functions but i don\'t mind for non-iife functions.moreover. a bug in gjslint makes it necessary to wrap non-iife functions with parens when calling `bind` and therefore i\'d like to enforce immed but still keep it possible to use gjslint in our project (which is firefox os) until we switch completely to jshint.', 'after a bit of reading. i discovered the `onevar` option. the following statement gives me the flexibility i was searching for:```/* jshint onevar: false */```', 'removed the specific globals and unused reporting from checkstyle report.... ...er.global and unused errors appear in the normal reporting and are reported twice. this also prohibits suppressing the error with a jshint comment such as // jshint unused: falseone error appears even if the above hint is added.', ":+1: if you merge this. i'll be able to remove a few hundred lines worth of `/* jshint indent: false */`!", 'requiring js files from data dir fails if jshint is used as dep. commit 7f694e45d makes use of js files inside the data dir.however. if you npm install jshint as a dependency on one ofyour projects. you will notice the data dir is not present.this is because the data dir is deleted as part of the installationprocedure. i am not sure whether such files should be moved to thesrc dir (which is kept) or if data should not be removedin the first place. i have no opinion on that but i decided tomake a pull-request that fixes the latter.', 'is there a way to handle the suppression statements such as `/* jshint -w086 */`in the .jshintrc file so they are applied globally?', 'on the old website (we have a [new website now](). check it out) this was a display bug.', 'this is still valid javascript. how do we know that `_repeat` returns a string and not a function without actually running the code?', '`package.json` and `license` files cover all files under the jshint repository unless specified otherwise. in case of `jshint.js` (the only file that is a derivative work of jslint) the modified license is inside that file. at the top.', 'you should use locally scoped `/*jshint ... */` rules to relax the rule on a case-by-case basis. i think `maxlen` should be as strict as it is today.', "see 9c2b8dd55bcc131420b6326cc56cc2863d0b268f. i've changed [the docs]( to reflect this.", 'please fix the travis ci failures.', 'we will not be adding any new style-related options to jshint. sorry.', "thanks for your reply.i'm currently using the solution you proposed in #807 (prepending a /*jshint ... */)", 'fixed the travis ci build and opened a new pull request #1305', 'add option `warnlen` or have `maxlen` take bounds array. as a supplement to `maxlen`. which causes an error. `warnlen` would throw a warning instead.``` js/* jshint warnlen: 80. maxlen: 120 */```alternately. have `maxlen` take an array or range `maxlen: [80. 120]`.', 'what i meant with "method comments" as more jsdoc. i mean a comment that is before the function.if you can make that function-scope options applies to that function\'s previous comment aka jsdoc. then this would be good enough for me.that said. i don\'t get why the proposed behaviour is undesirable. if time resource is the problem. i\'m perfectly willing to make a patch. as this will make it easier to use jshint in firefox os\'s gaia.', 'the --verbose flag will cause the warning/error "number" to be listed. which is a step.  if the docs correlated the numbers to the fancy names of the options. that would help.the .jshintrc file should also accept things like "w069": false to enable/disable warnings/errors.', 'predef/globals do not work.. when i try to use jshint on multiple files only the first file checked properly. on all next files i get error about undefined var. i make dump of config loaded from hintrc for each run and notice that \'predef\' becomes undefined after first run. { browser: true.  node: true.  predef: [\'g\'].  ...}{ browser: true.  node: true.  ...}src/line.js line 1  col 1    \'g\' is not defined.src/line.js line 78 col 17   \'g\' is not defined.   setting globals instead of predef {    "browser": true.    "node": true.    "globals": {"g": true}.\'\'\' gives me      line 0 col 0    bad option: \'globals\'.']