['fix jshint issues. step 1 of getting the build to pass', 'can one of the admins verify this patch? to accept patch and trigger a build add comment "._ok\\w+to\\w+test._"', 'update globbing pattern and fix linting issues. update the globbing pattern in _gruntfile.js_ to include missing subdirectories and fix follow-up _jshint_ issues.closes #382', 'how about squashing all these commits into one?', "fix(linter): enfore and adhere to jscs and jshint. #123leore pon mgartner it's all just making the repo follow the linter. no functionality change. local tests passed", '(#3160) - remove redundant jshint dir', 'was just looking into #3160 and seen this. tested it still checks all code under /tests/ and it does', '1a8eb00e3e148b446ed287ef535fe5249d257ca3', "daleharvey thank you for being so patient on this! i did try to eyeball where i had use the 'comma' var declarations and missed that one. i also reset intellij to use 2 space tabs but not before i had made some changes.what's odd is that when i look at .jshintignore it does seem to evaluate the performance directory so i don't understand why it missed the tabing issue.", 'and these all break because of jshint. switching over to inherits', "i'm the original reporter of the bug and have added more detail to the issue.in any case. shouldn't all `for...in` loops be checking with `.hasownproperty` unless traversing the prototype chain is what is desired? jshint's test for this check isn't robust. which sucks.", '(#222) - update jshint', 'timebombed', '1cbc7533d1f156a28f8d755885315bb23e4943fe', "pushed a commit that might solve this. jshint didn't like the short circuiting though ;)", 'squirrelfm could you fix the jshint errors ? (you can run locally by simply doing "npm test") everything should pass there. let us know if you have trouble rerecording the tests.', 'also -note for anyone else watching ... if you just want to work around this you can do the import in start-app like i show above/then add "t" to your globals (test .jshintrc file).the real question here is how to use it w/out hacking on a global in test code', 'const is assumed to have function scope. ``` js/* jshint esnext: true */if (confirm("whatever")) {  const foo = 1; alert(foo);} else {  const foo = 2; alert(foo);}```the following warns `const \'foo\' has already been declared`. however. in es6 `const` has block scope (like `let`). so this code is correct.', 'confirm--those are two entirely different `foo` bindings.', 'titannano okay. keep the discussion opened to see the point of view of the jshint contributors about the warning.', "option for allowing leading semi-colons. for this common pattern of idiot-code-concatenation-proofing. it would be nice if jshint would forgive the leading semicolon.``` javascript;(function () {  'use strict';  // code goes here})();```", 'var declaration not recognized with for..in within try..catch. to reproduce. paste the following code to jshint.com:```function main() {  var key;  try {  } catch (e) {    for (key in {}) {    }  }}main();```it shows the warning: "creating global \'for\' variable. should be \'for (var key ...\'."and reports \'key\' as unused variable.', "it does already? i don't see any warnings produced for your snippets on jshint.com.", "oh. that's not a semicolon issue--that's an indentation checking issue. we're dropping styling rules soon so this will go away by itself.", "but jshint supports comments like this: /_jshint unused: false_/ and it's not part of js. too.", 'make jshintignore treat leading slashes as relative to the current directory. currently. a leading slash in a `.jshintignore` file means that the specific file is an absolute path. this is inconsistent with the behaviour of `.gitignore` files. which treat paths with leading slashes as being relative to the current directory.', "to me this is a style thing. i've worked in codebases where the double bang is required. to make it explicit that you're evaluating the truthiness of a non-boolean. if jshint adds a warning. please make it configurable.", 'built-in ignore option. instead of `.jshintignore`. why not add `ignore` option to `.jshintrc`?', 'this kind of questions should go into our mailing list. this was done to make sure we could match everything inside the `.jshintrc` with `/*jshint ... */` pragmas. and `.jshintignore` is directory-aware which pragmas should not be.', 'landed in f349857 (forgot to add issue number)', "i don't understand the use case. if you want to use jshint as a library. you can simply do require('jshint'). or you can browserify jshint and use it as a drop-in. cli file uses jshint. not the other way around.", 'but why not add `ignore` option? it will require one file less.', "use `.gitignore` file if there is `.jshintignore` file. i'm not sure if you will agree with this change but it makes sense to me...currently. `jshint` will read a gitignore file if explicitly specified (`jshint --exclude .gitignore`). but otherwise will not. i propose that. in the absence of a `.jshintignore` file. a `.gitignore` file should be used by default.", "what to do when you don't want jshint to ignore anything but there's a `.gitignore` file and no `.jshintignore`? i don't think this is a good solution for most people.", 'in that case. an empty `.jshintignore` would be used. seeing as this is the behaviour of `npm` (" if there\'s no .npmignore file. but there is a .gitignore file. then npm will ignore the stuff matched by the .gitignore file"). personally i feel that this behaviour is reasonable.', 'thanks for that. fixed to match jshint', 'yield statements within a catch statement should not cause a error. ```function * () {  try {      yield dosomething();    } catch (err) {      yield dosomethingelse();  }}```results in jshint telling me : a yield statement shall be within a generator function (with syntax: `function*`)since both try and catch are inside a generator function this error should not be given.', "i'm guessing that's not the entire piece of code? if it is. then it's a syntax error anyway. because it's missing an identifier between \\* and (", 'anyway. confirmed with: ``` jsfunction * gen() {  try {    yield 1;  } catch (err) {    yield 2;  }}```', 'sorry obviously i was using sudo code. to demonstrate an actual thing that i do in my code. which works. just gives me jshint errors', "command line jshint without node.js. is there any other option. how to get jshint into windows command line without using node.js? is it possible to get jshint.bat and jshint command line environment with all dependencies in simple zip archive or by using git clone? i know. node.js is needed to compile the javascript. but is it needed to run jshint in command line? or could i install and compile it somehow with node.js and then use it without node.js? i actually work on a plugin for one text editor and the plugins for that are based on command line (like compilers). but i don't want users to install node.js to use my plugin. i'm beginner in node.js.", "i like node. but i can't make users of my plugin install node for running the plugin!what's rhino and how to use it? could you share some link?", "you don't want to use rhino. it requires that your users install java. (no disrespect to nschonni. it was a good suggestion until your last reply)there is really nothing you can do to remove the nodejs requirement. short of recoding everything in another language.you're basically asking to run a php file without php installed on your machine. to put it into perspective for you.", "this isn't really the place for asking things like that. though. this is for issues. not for advice on things that don't even relate to the project...try www.stackoverflow.com", "sorry. i thought. that jshint has a single binary somewhere just to download. but it hasn't so this is not right place to ask more.", "feature request: ignore syntax for compiled output files. _see madskristensen/webessentials2013#638_can you add a way to ignore files based on the existence of a different file with a similar name?we'd like to have a default `.jshintignore` file that will exclude compiled coffeescript or typescript files. for ide scenarios where jshint is run on all files.example syntax (in `.jshintignore`):  (i'm open to better or more flexible ideas)```\\exist: $basename.coffee```we need some way to distinguish this kind of rule from a normal matching line (which would continue to be parsed by minimatch); i think a `\\` would work well for that.", "this is so specific i think it's better if you write your own wrapper around jshint as a library.", "that's what we're doing now. but we'd prefer to maintain compatibility with other jshint users.i don't think mixed coffeescript/javascript projects are so rare; i think this is a useful general feature to have.", 'enforce trailing commas on objects and arrays. hey there.our team decided to use always use trailing commas in our code to have smaller diffs.i found material on how to forbid trailing commas. but not on how to enforce them.is this possible with jshint?']