['hmmm```running "jshint:files" (jshint) taskwarning: path must be a string. received null\x07 use --force to continue.```', "the really odd thing is that as far as i can tell. this should be making us run `jshint`. `jscs`. and `browserify` each twice. but that doesn't seem to be happening...  i wish i understood magic.", "landed.> i planned that this will be my last commit before updating information on the 'console implementation' pr. but i think that jshint is important. on next week you can wait first update for 'console implementation' and also for 'jshint'.i'll add the jshint today. don't worry about that.", '> i am novice in test frameworks. for me doesn\'t matter what will be used.fair enough. let\'s stick to chai for now.> how about `quotemark: true` ?that would allow people to use double quotes. which i\'d like to avoid. the algorithm used by jshint to detect "consistency" is unfortunately not good enough yet.', 'converts to npm scripts. removes gulp. ## overviewthis change refactors the build process to remove gulp and gulp-related plugins. this simplifies the build process mostly through the **package.json** and a few helper scripts. it has the same feature parity as the gulp tasking (e.g.. custom builds by ignore modules). but with less devdependencies overhead and without requiring the global `gulp` install. ### changes- `gulp build` is now `npm run build`- `gulp watch` is now `npm start`- `gulp jshint` is now `npm run lint`- `gulp clean` is now `npm run clean`- excluding changed from `gulp build -e filters` to `npm run build -- -e filters`- `gulp docs` is removed. `npm run docs` still works### fixed- license header is re-added to both the debug and release builds.', 'englercj i welcome your feedback here.', ':+1: good luck!', 'oh my god! shall i remove gulp from pixi-spine and other plugins?', 'okay englercj have another crack at it. completely uses the browserify api this time without a hacky post process.', "i couldn't find something that _exactly_ did the license header insert in the way i wanted with browserify. so i created it as a plugin.", 'this is counter-revolution! npm strikes back!', 'neat. looks good to me', 'hey goodboydigital. care to weight in?', 'also. would like to sanity check if someone could try to build this branch on windows.', 'ivanpopelyshev what if you change the `"build"` script in **package.json** to be `"node scripts/bundle.js"` instead of just `"scripts/bundle.js"`', 'ivanpopelyshev what about escaping double quotes: `"parallelshell \\"npm run watch:debug\\" \\"npm run watch:release\\""`', 'wow! it works! awesome!', 'it removes gulp client. right?', "is it ok ?``` jsvar uglify = require('gulp-uglify');```at the same time. you added uglify-js into dependenciesupd. ok. so gulp-uglify. gulp-sourcemaps and gulp-empty are still there", "ivanpopelyshev yup. i removed uglify-js. good catch.gulp-uglify. gulp-sourcemaps and gulp-empty should be in the **package.json**. these are plugins for piping streams and not just for gulp. for instance they work with browserify's piping.", 'looking good bigtimebuddy', 'nice work dude', "i'm guessing you think of this is a replacement for jshint as the project uses atm. correct? which benefits does it provide to the project?", "lgtm! if we're able to run jshint now. can we add that to `npm test`. so it can be used to help gate prs?", "more cleanups and fixes.. this is based on pull request #209 (promises).  that should be merged first.this pr factors out a bunch of new es.<foo> helpers to make us comply more closely to the es6 spec (see #208).it also adds `number.isinteger` from the spec and fixes bugs in `string.raw`. `array#find` and `array#findindex`.the last patch in the series makes our code jshint-clean. and adds jshint to `npm test` to keep it that way (as suggested by ljharb in #207).let me know if you'd rather see this as a series of 1-commit-each pull requests.", 'this pr includes all of the promise stuff - can you rebase `cleanups` on top of `master`?', 'no. because the es.\\* helper refactor includes/affects the promises code.  let try to get promises merged first?', 'sounds good. i missed that in your initial description', "this patch series is getting unwieldy!  and #211 seems to have broken it slightly.  oh. well.  i'll rebase after #209 is merged (and hopefully before ljharb sharpens his style stick).  it might also be worth splitting the pr into 2 or 3 parts to make them more manageable to review.", "i'll definitely wait on a style pr until after all related functionality is merged in. no need to increase churn for that. +1 for splitting it into multiple parts tho :-)", "ok. rebased.  i'm going to keep this one open for now to track the big picture. but i've opened #212 with the first set of patches from this series.  once that's reviewed i'll peel off another chunk.", 'ok. merged #212. opened #213 and #214 with a pair of easy patches.', "i'm not maintainer. but i love your fixes.if you provided jshint error corrections. can i ask you to add `.jshintrc` file and configured grunt task to prevent these errors in future?", 'no need for a grunt task. just have an npm command to run jshint :)', "that's some lazy evaluation by jshint since all those cases are inside function calls :p", 'fix jshint errors', 'i reran travis - there is jshint error', 'gintsgints is there a better way to discuss with you? your fork of sequelize needs some commits from the main repo for `jshint` issues.', 'no need for this anymore. #89 is another approach.', "_*poke_any change this is being merged ? i'd really like to contribute here and there but all the _jshint-noise_ makes it pretty difficult to spot _real_ errors during development.regards~david", "yes. just need some more time to fix all the jshint errors/warnings. i've already started the process.", 'integrate jshint linting into travis build. this commit attempts to integrate linting via "jshint" into the "travis-ci" build process and introduces the following changes:- add a "jshint" entry to the "scripts" section of the "package.json"- update the ".travis.yml" to call "npm run-script jshint" before testsmaybe you want to give it a try.. regards~david', "ok cool. but first i'll have to fix the errors :).", "> ok cool. but first i'll have to fix the errors :).i could also send a pr from davidlinse/nightwatch08d49ecde7feba367500312eda9f86f2fd0230c2 branch if it would help you in progress.. ?let me know.. ~david", "yeah sure. btw i've already started to refactor the logger (made an external lib) and most of the commands.js. just so you know not to work on those.", "i've checked my branch and in fact updated `lib/logger.js` and `commands/waitforelementvisible.js` .. so does a pr still makes sense ?what about creating a separate branch one can contribute to ?~david", "sound good. i'll try to have a look this weekend.~david", "brianc. i noticed you use jshint for this project. this is a set of commits for issues which jshint is configured to respond to.i suppose this pr is optional and a bit nitpicky. if you don't want to merge i understand. =)", '(#1025) - add jshint to npm scripts', "js hint white option. we should enable the jshint white option which enforces more white space around functions and brackets. we are already like 3/4 if the way there and it's more enforcable then the current style.", 'yeh looks like its just the spaces after functions that are mostly missing. it is more enforeable so i am down', 'remove unneeded jshint directives. now that we are depending on less globals. should need very little jshint things', '(#1046) - remove unneeded jshint directives. some minor cleanups along the way', 'awesome. though next time try to make sure it passes jshint on your end. i had to fix a couple nits', "chore(travis): lint project files in ci. this lints test in ci. which will hopefully prevent issues like #2429 and #2155  from creeping into the codebase. at the moment i'm only aware of the need for jshint. but let me know if there are additional scripts that need to be run.**note**: this pr is going to fail in ci until the fixes in #2429 are merged in.", 'thanks for the contribution. merged at 8d936df7468f95475a2e4087edcb3cfe614b745c', 'thanks! merged at 94859efc0c89174d20ad9c06283146f1f7e1bd63', 'sindresorhus for gulp-jshint i support them passing in an object for settings. them require()ing their conf file and passing it in (handled same as the first way). or them passing a full path string and the plugin requires it in', 'alsorokin looks like there are jshint failures', "why are there so many jshint fixes all over the codebase still? it's making it really hard to see the actual change here. can we just do a single massive sweep and fix them all. and then if we turn up the jshint levels fix that as a separate pr so they don't keep mixing together?", "jshint specific files. jshint doesn't do its own globbing. so when you run it on windows you have to specify folders. or else specific files.", 'fixes #369', 'it looks like this failed jshint.', 'fixd the jshint', 'fix jshint errors and add jshint to travis.yml. make sure we run jshint on the ci process. will reduce amount of dumb errors (we only break rules when it makes sense) and should also help to keep commit history cleaner (so blames/diffs works better).closes #42', "awesomeness :) i've had to tidy your code a bit to get it to pass jshint. but otherwise this is great. thank you!", 'run jshint as part of build process and fix jshint errors', 'it took me ages to check over every single file you updated :) but thankfully i can merge this into dev now. thank you.', "sweet - i can see i'll have some work to do tidying this up for jshint. but thanks :)", "ah sorry rich. i will run the jshint task and fix problems in my next pr. i postponed to get comfort with jshint long enough :) i hope it's okay with this last one.", "i wonder if parsing `.jshintignore` files like jshint's cli does would be worthwhile? there is a sort-of precedent in shifter's `fetchjshintconfig` internal method. although. it would get rather bothersome to copy ignore files all over the place...", 'jshint and jscs. style consistency checks', 'fixed last jshint warnings and enabled jshint as mandatory precondition to npm test. was less hassle than i initially thought ;-)', "i'll run it with an empty tankard. i'd better see that beer filling it!", "just make sure you watch the console carefully when you run 'npm run publish' ;-)", "cscott: all right then. please fetch and rebase and while at it. run the new jshint `uglifyjs --compress --mangle`. i wonder. why is jshint even included. but i guess with grunt we won't have to worry anymore. we could also use it via node_modules locally in the meantime.", "xhmikosr could you look at #157. #180. and #186?  in particular. #180 is included as part of this stack; it would be nicer to merge that separately and then rebase; and #157 conflicts in a trivial way with this patch stack. so it would be better to merge that first and then rebase this on top to resolve the conflict.  #186 is just gravy.and i'm assuming the `uglifyjs --compress --mangle` request is regarding `lib/jshint.js` (aka 0b774bf54cb4e5c632a0f7f4b206eef9e488fe31)?", 'cscott: i merged what i could review; the rest will probably have to wait for someone else.and. yeah. i was talking about jshint.js.', "xhmikosr ok. i'm going to hang tight and see if we can get #157 and #180 merged. then. before i rebase.  if things seem to stall. i can factor out #180 from this patch (adding an explicit `/* jshint evil:true */`). but that would require making a new pr for #157 and rebasing #180. so i'd like to avoid that if i can.", "i still believe you should minify jshint.js. it's so many bloat for the repo.", "xhmikosr i've minified jshint.js and updated this pr.", 'merged in as 4d199b598697a661f597764fdaa72a9e43fb7738the following commit fixes all errors in lib/ and adds jshint to the build chain. thanks the-simian!', 'thanks!', 'fixed lint issues.```$ grunt lintrunning "jshint:files" (jshint) task>> 52 files lint free.running "jshint:test" (jshint) task>> 71 files lint free.running "jshint:uiauto" (jshint) task>> 11 files lint free.done. without errors.```', 'travis is having issues cloning the submodule. it\'s not related to this pull request.```$ grunt lintrunning "jshint:files" (jshint) task>> 52 files lint free.running "jshint:test" (jshint) task>> 74 files lint free.done. without errors.```', "technical details aside. i'm open to the idea in general.", 'dpashkevich i\'m pretty sure (when the issues got disabled in that repo) they were deleted. although i found an email thread about the issue in my email archives. and there is not much to it now that i found it. though. lol.. i must of included the original issue it spawned from in my recollection. as well (which was similarly about where to put "globals" in the .jshintrc). :-) here is the thread (below). regardless.---``` text[node-jshint] include ignores in `.jshintrc` (#122)nicolas gallagher:     keeping all the relative configuration in a single file would be useful. it should also make it easier for other tools. like grunt. to more easily hook into the pre-existing ignores in a `.jshintrc`.related: (issue #) 104sindre sorhus:i agree. i have like .gitignore. gitattributes. .editorconfig. jshintrc. npmignore. etc. there\'s just too many dotfiles.anton kovalyov:this project is being merged into our main repository (jshint/jshint) and we\'re moving all issues there. this issue has been moved as jshint/jshint#693```', 'is `predef` what you\'re looking for?in your `.jshintrc```` javascript{   "predef": [        "window".        "jquery"   ]}```', 'the issue at hand is jshint has no idea which are intentional global variables and which you just forgot to declare.  predef in your .jshintrc (per project) or /*global ... */ (per file) allow you to explain to jshint which global vars you intentionally used.  thus. by process of elimination. the rest are accidental and cause the warning.  there are some bigger constructs that give you many global variables such as "assume node" or "assume browser". which can cut your list of globals down significantly.', "add 'proxy' keyword support for 'esnext'. harmony-proxies are supported by v8. but jshint aborts with `'proxy' is not defined`", 'figure out the way to run bin/jshint.js on windows. npm uses auto-generated .cmd file. maybe we can use that?', "make.js: mkdir 'dist' if it doesn't exist. here's another dumb one: i went to build jshint. and it failed because `dist/` didn't exist. i figured the build process could just create it if needed.", "hah. thanks. i've just created #788 for that. :-)", 'failing test: an array of regexes does not pass lint.. this code passes on jshint.com on 12/31/12. and it looks ok to me.', 'also that travis build should have failed. i think the `make.js` script needs to return non-zero when tests fail.', "this is a good way. although i'd just create a ticket with a test in it--since i won't be able to merge this pull request without me fixing the issue first.thanks!", "by the way. all of kickstarter passes (as it does in jshint r12) except for mailcheck.js:  which has 23 errors.right now i'm assuming it's all fallout from that array of regexes...", 'i just ran your gist locally and it passes without any errors.', 'all good. npm does all the work for us.', "giving `*.js` to the cli only works when your shell expands globs into the files. `cmd.exd` does not do this for `*.js` which is why it doesn't work. `jshint` will scan a directory given as an argument. so you can probably just run `jshint .\\` and get the same results.", 'create distribution folder for each tagged release. it would really help if the released distribution of jshint would be available out of the box. sample use-case: webjar ( creation which includes the distribution directly from the source. thanks.alex', "why does jshint think a tab is 4 columns wide?. in a file. type a tab (a true tab not spaces) and then type a character 'a'. use jshint on this file:```k.js: line 1. col 5. expected an assignment or function call and instead saw an expression.k.js: line 1. col 6. missing semicolon.2 errors```this is rather weird. most editors think a tab is 8 columns wide.", "that's the default value. you can change it by using `indent` option.", 'short options for jshint executable. how about some short options other than -h and -v?in particular. -c for --config would be nice.(although if #807 is implemented. two short options would be needed and perhaps -c should refer to the inline configuration.)', 'p though jshint still needs to stat all files to determine if they are a directory in order to recurse directories.', "<pre>piereactor t % mkdir dirpiereactor t % ln -s dir symlink-to-dirpiereactor t % ln -s nonexistent symlink-to-nonexistentpiereactor t % test -d symlink-to-dir; echo $?0piereactor t % test -d symlink-to-nonexistent; echo $?1piereactor t % test -e symlink-to-dir; echo $?       0piereactor t % test -e symlink-to-nonexistent; echo $?1</pre>jshint is calling test -e on each directory entry and aborting if it does not exist. then it checks if the directory entry is itself a directory via test -d.instead it can first call test -d. if that returns true (which it will for directories and symlinks to directories) then recurse. otherwise call test -e and if that returns true (which it will now for files and symlinks to files) collect the file. broken symlinks will return false in both tests and will be silently skipped.the question then becomes whether it is jshint's job to report broken symlinks or to validate files that are accessible in the tree being given to it.<pre>piereactor t % test -f symlink-to-nonexistent; echo $?1</pre>a broken symlink is not a file either. giving rise to the following alternate solution for the submitter:<pre>find . -type f -name '*.js' -exec jshint {} \\;</pre>", "sorry. we're not going to do this.", 'could you at least provide the reason? thanks.']