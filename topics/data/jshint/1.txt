["thank you! in all my reading of the `contributing.md` i overlooked the lint/jscs stuff! :yum: will correct now.there _will_ be a problem with the `bookmarklet.tmpl.js` because of the handlebars token; i'll see if i can get around that with a jshint ignore comment.", "this means it is up to us to detect when unused params/vars occur. it's nice to have the tool catch that. especially since it is not just the three of us contributing. let's follow the principle of least privilege. clearly. we all agree jshint is a pita in `arity`. i argue it should be bypassed there. and left in force everywhere else.", 'failing jshint. did you run `npm test`?', 'for me is jshint.', 'add jshint to gulp..lint and dist. fixes #1221 not much too it. there is already a .jshintignore file. i thought of adding a .jshinrc but the weight of those pedantic details got to me.at least no more missing semi-colons breaking the travis build :dps: using same styler as swagger-js', "ah looks like jshint. i'll fix it up.", 'refactor utils logger. this _pr_ includes the follwing changes:- fix for some jshint issues. - fix for a typo in function-name- refactoring to reduce the number of function calls to get a _timestamp_', "ah. that's not your fault. new jshint better search errors. and found those in other files. will fix them myself.", 'some of these places we might want to iterate inherited keys. now that `object.defineproperty` exists there is really no excuse for libraries to shit all over the global name space by adding enumerable properties to object.prototype. so i am skeptical of the need for this. if we do want this. then we need to make sure to add it to the jshint check', 'like daleharvey said. just add it to .jshintrc and rm the extra one and we can merge it. we can clean up in a later one.', 'jshint bin/. and tests/. but maybe do that one seperately. probably a lot of work', 'so theres a few nits. as calvin mention the test format needs changed and minor jshint errorshowever the change looks great. i took a look at the other places `isvalidid` is used. its only 2 other places and they both are sending errors straight back (there is some duplicated logic in one of the calls) so i think you should replace those calls and get id of `isvalidid` completely', "so i built the latest v8 from the git repo.  it appears to support promises but you have to use the `--harmony` flag not the `--harmony_promises` flag.  strange.  i tried using just the `--harmony` flag with the supplied d8m but that didn't work. also. jshint gives a failure message on promise for me.", "the travis build fails on jshinting. but that's on another part of the code. my change lints perfectly :+1:", 'fix jshint ignore rules. add run script', "fix jshint npm script to work on windows. files in `node_modules\\.bin` don't work correctly in npm scripts on windows. also. jshint has trouble parsing paths containing `*.js`. but the good thing is that internally it checks the file extension.", '+1', 'yeah. you\'re spot on dave. i switched lint to preferred. performed a "shifter" build in the respective directories. and those errors that were described with a "shifter --walk" in the parent directory. appeared.i have a .jshintrc lint configuration on the parent directory. how do i get a "shifter" build to pick up the configuration file?', 'it should be `shifter --lint config` not `shifter --lint .jshintrc`. when you use `config` it will search up the dir tree looking for a .jshintrc file.', 'ok. done. and passes jshint', 'oh. oki thought jshint would still catch this case.', 'test with jshint.', "helio-frota like we discussed. let's run/fix jshint issues before we add such constraints to the project.", "this is indeed a pain. i'd love to see a jshint option to ignore empty files for all the reasons jedverity mention above.", "why doesn't jshint check curlybrace style in function definition. ```$ cat test.jsvar a = function (){  return true;};```in jshint. this is result in no errors.but i want to force the style below like jslint```var a = function () {  return true;};```why doesn't jshint support that? otherwise is there a option about that?", 'it would be a great addition to jshint primarily for pre-commit hooks and other similar scripts.  +1', "this sounds like a job for `white` but we don't update `white` anymore since its pretty much a legacy option from jslint at this point. we will do a more configurable styling checker at some point.", '`/*jshint es5:true */` should fix it.', 'fix for trivial. referencing undefined object error. i caught "typeerror: cannot read property \'foobar\' of undefined" on"immed" related sections of jshint code.when i applyed fixmyjs to minified js code by mistake.(got no error for other js files.)', "invalid warnings for a function invocation pattern. for the following javascript:``` javascript/*jshint asi:true */var a = []void function timed () {    settimeout(timed. 1000)}()```jshint gives the following output:```jshint-bug.js: line 4. col 1. expected an operator and instead saw 'void'.jshint-bug.js: line 6. col 2. function declarations are not invocable. wrap the whole function invocation in parens.jshint-bug.js: line 6. col 3. expected an assignment or function call and instead saw an expression.3 errors```while this should be perfectly fine. it's just a closure. interestingly enough. if you wrap the closure in parenthesis instead of the void pattern. jshint doesn't complain even though that would be an actual problem (asi hazard. causes the engine to try and run the array as a function with the value of the function timed as an argument).", 'one more example. which acts as expected and does not generate a warning about `err` being unused.``` javascript/*jshint unused:true */function hasunusedparam(err. cb) {    return cb;}```the problem with setting unused to true inline seems to only appear when set _inside_ a function. that is. setting unused to true at the top of a file works as expected. but setting it inside a function it does not.', 'agree with axkibe as well. antonkovlayov suggests commenting out the unused parameters but that does _not_ work if the unused parameter is in the middle of the list - you need the middle parameter to retain proper order.', 'thank you!', "what was use case for this? it'd be nice to have a test case to prevent possible future regressions.", 'absolutely agree with axkibe and jsoverson. this would be one of the single most useful enhancements for jshint.', 'you can use `/* jshint -w001 */`', "complete sample .jshintrc. this branch/pr replaces `example/.jshintrc` with a complete configuration file that can be dropped into place in any project without affecting the default jshint options. i've also included comments with each option that should clearly indicate what the possible values will mean practically.if this is accepted. the next step i would think is a feature in the cli that copies this sample file to cwd.", 'looks great. thanks!', 'i see. this is not scoped suppression. right? also is there a way to turn warning back after /\\* jshint -w001 */?thank you.', '(node) warning: possible eventemitter memory leak detected. 11 listeners added. use emitter.setmaxlisteners() to increase limit.. i get this error in chrome if i press the lint button 3x.', 'perhaps the config is determined by a sort of "inheritance" pattern? maybe the directory of the file is checked first. and then the script traverses up the directory tree and gathers all the available configs in the hierarchy together. then it can either go top-to-bottom (closer to root takes precedence) or bottom-to-top. (closer to target file takes precedence)with the "bottom-to-top" approach. you could easily set "global" config rules for a project. and allow specific directories to override only as-needed. certainly makes pinning down exactly what rules are applied where a bit trickier. but that complexity is only introduced by conscious effort on the part of a project.', 'yes i was imagining something like that. i think you\'d want the configs closer to the target file to take precidence really.the "pinning down errors" issue is also offset by the flexibility. and the fact that the rules for determining the config are relatively easy to understand/explain', "i'm actively working on a pull request that should handle this. the goal is to work exactly like the current implementation. expect instead of searching for .jshintrc relative to the current directory. it searches relative to the parent directory of the file being checked. hopefully i'll have something ready within the next week.", 'i also get this warning. when checking a bigger js file.can you provide a way (e.g. a directive) to increase the limit per file and/or global?', 'is there any progress on this?even if it only checks for the exact pattern `if (!obj.hasownproperty(key)) continue;`. it would still be very useful.  (breaking. returning. or throwing from such an `if` would be very strange)', 'uhm. i just need to fix that.', 'just out of curiosity. why would empty lines with just tabs throw an error?i personally like to tab out on empty lines to match the indent for that level. i understand that not all folks like to do this (see #182). but why would empty tab lines be considered an error to the parser? it\'s not bad code ... is it really such a bad coding style that jshint wouldn\'t allow for such a style (when `trailing` is set to `true`).would it be silly to allow for empty lines when `trailing` is turned on? iirc. some of the options allow for varying levels of enforcement ... couldn\'t this option allow for different "levels" of checking? this would make make both groups of people happy (i.e. those who don\'t indent on empty lines and those that do).sorry to beat a dead horse ... i know some of this treads on flame war territory. i just would not respect myself later if i did not try to convince you to add an option to allow for empty line indentations. :dancers:', 'search for .jshintrc relative to the file being linted.. this patch updates the logic that looks for a .jshintrc file touse to search relative to the file being linted rather than thecurrent working directory. if no file is found. config stillfalls back to ~/.jshintrc.this behavior should better reflect user intent when lintingfiles. regardless of where jshint (or the editor leveragingit for checks) is run from. since config lookup is now per-fileinstead of per-run. the internal findfile method has beenmemoized to avoid redundant searching.references:  fixes gh-833', 'option for unused local vars but not parameters. it would be great to have an option that would produce warnings only for unused local variables. and not for unused function parameters. take a look at the following case:``` javascriptfunction sum(){    var sum = 0    array.prototype.slice.apply(arguments).foreach(function(a){       sum += a    })    return sum}function addtwonumbers(a. b){    return sum.apply(this. arguments)}```in this case. for the function addtwonumbers. i really want to keep the declared arguments **a** and **b**. since this makes it clear to readers as to what parameters the function expects. yet. i would like jshint not to warn on these as unused variables. but only notify me of unused local vars. explicitly declared in the function body', "yes. i can disable it but i actually want this feature where it makes sense.i ended up grabbing the old jshint.js files from my sublimelinter package backup but i'd prefer to stay up to date if possible.", '+1would you be able to update `examples/.jshintrc` with this new option?', 'since this issue is closed. i think it makes sense to continue discussion about skipping a specific line on #870', 'rejects it(jorge)();', 'braces around case block causes spurious "expected a \'break\' statement before \'case\'.". to reproduce. enter the following code into jshint.com:window.foo = function() {    "use strict";    var x = 1;    switch (x) {    case 0: { break; }    case 1: break;    case 2: break;    default: break;    }};line 5: case 0: { return; }expected a \'break\' statement before \'case\'.i would expect the above code to jshint cleanly.', ':+1:', "that's a good point too. it would be generally useful to have all of the linting of use strict without having to type it for every environment since in general more people use jshint than use use strict."]