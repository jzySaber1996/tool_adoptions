['fixed jshint test failure', "so node is ok with escape i think your problem is that jshint doesn't like escape.", "minor nit: instead of putting escape/unescape in the .jshintrc. you could just call window.escape and window.unescape like websql.js was doing. other than that. i'm happy to merge this.", '`global.escape` and `global.unescape` will avoid having to change the jshintrc.', 'split out jshint task. instead of doing it at the same time as npm test. we have split out various tests. and its not useful for someone for every test to fail because of a jshint error', '(#2106) - seperate the jshint task from the test', 'please no. i know it takes a long time. but it catches sooo many bugs for me. webstorm sometimes puts really subtle red underlines under jshint errors. so i miss them until i do an npm test.', 'jshint errors will still break the build. but it means if you break jshint as well as something functional we will get feedback on both. it seems cleaner to have them seperate as well. but wont merge if yall still disagreewe shouldnt be merging anything without a green build. its looking red now. but everything i have merged has been on a green build. so either intermittent or an overlap or someone elses push. checking now', 'closing as not many seemed up for this. plus its kinda useful for the tests to bail early since people will fix and follow up and this at least reduces test runs', "- we settled on 4 space indentation as a code style i don't think we should change that for the turtle module. - why do you put the comma's on the start of a line and not after a declaration? when you're doing multiple declarations?- there are some other coding style issues. which you haven't noticed on travis because we're not scanning the lib dirs with `jshint` - why do you add functions to the prototype using a closure?", "yeah i know sorry. i was the instigator of the original discussion so i feel kinda obligated to make sure we adhere to the style. i had started commenting on them and then found out jshint wasn't being run on the libs.i thought as much with the proto closure stuff i was just wondering if you were doing something there i didn't get :smile: i don't do much oo-programming in javascript. i also can't seem to wrap my head around what you're doing here:``` js (function(frame) {      if (frame) {        browserframe = function(method) {          return (_framerequest = frame(method));        }      }    })(window.requestanimationframe || window.webkitrequestanimationframe || window.mozrequestanimationframe || window.orequestanimationframe || window.msrequestanimationframe);```what do you use to run tests on this? i don't mean automated. the file /doc/static/turtletest.html doesn't work anymore.", "you don't use jshint/jslint on your javascript at trinket.io?", 'adds matrix and shape methods. implements popmatrix. pushmatrix. applymatrix. resetmatrix. printmatrix. box. sphere. spheredetailadds mode options to size methoddefines renderer constantsgets jshint passingfixes #314', 'lgtm :+1: :shipit: maybe add this file to the files jshint scans on travis now it passes?', "it's a start: #134 adds 'npm test' which runs a 'npm run jshint' in turn.", '(#128) - add test-pouchdb & test-couchdb. also adds jshint to travis.', 'test-couchdb has always failed to start for me (i run couchdb-harness manually). but the error seems to have changed on travis (not online). not sure if significant.', '+1', 'thanks. merged: 526b9eacf784c38a5252c9f251570983909120ad', 'hi anuchandy.as agreed with claudio. can you revert the copyright header changes ? could you also fix the jshint errors ?thanks.andre', "thanks for the pull request!the position of the `var`s is a stylistic choice in this case and is checked by jshint so i'd rather not apply that part. i have moved the destination inside source check as you suggest though.", 'tests are green. travis ci fails only because of jshint that is not happy because i added two "if" statements. and because i added a line break on a line of code on an assignement. i can fix this last "issue". but should i really to refactorize the entire code of bootstrap.js just because of these two if???', 'ok. no refactoring is needed. i just increased jshint parameters :)', 'fb55 simplified `npm run lint` invocation and verified that both `jshint` and `jscs` catch (forced) errors on my rig.', "updated one more time. removed deprecated jshint options and enabled more stuff in jshintrc.can't we make jshint ignore options it doesn't know like `auto_indent` and `indentpref`? or work around this somehow?", "syntax error when combined between multiple scripts. there seems to an error caused by an unclosed function/exception. the error i get when i include this script:     `syntaxerror: expected expression. got '*'`would it be possible to check this script with jslint (jshint.com)?", "added grunt-newer. to only lint changed files. only works for jshint. there's some issue with jscs that wasn't worth spending time on fixing. >.<", "hmm. i don't only want to lint changed files in our ci. i want to lint all files.but in the pre-commit hook. i only want to lint changed files. so what we really want is two kinds of linting: lint-all and lint-changed. and we'll use lint-changed in the pre-commit hook.", 'so currently. the pre-commit hook calls "grunt lint" which calls jshint on the changed files.i was thinking that ci called the `travis` grunt task. which runs jshint on all files. not just the new one.where does ci call the `lint` task?', "yep. you're right! travis calls `jshint`. `jscs`. and `unit`. not `lint`", 'see also #56 and #1083', 'fixed in master.', '+1 i\'d like to see this added as well. naming helps with everything from debugging stack traces. to reports on cyclomatic complexity. lots of benefits with no cost. since any good minifier/compiler is smart enough to remove the name.```var hello = function hello(){  alert(\'world\');};```gets minified to:```var hello=function(){alert("world")};```', 'sounds like a good thing.', 'although. spidermonkey is now capable of figuring out the name of anonymous functions in some cases.', 'technically speaking. it _is_ an expression (that contains a function call). and not a function call. parenthesized and formatted for emphasis:``` js! (    function () { } ()  )```the question is whether to add an option to accept this kind of expression. or if using `/*jshint expr: true*/` is an acceptable level of granularity.', '`"use asm";` is a new conformity spec by mozilla. like `"use strict";`. it\'s a subset of the language with tighter restrictions on how you write your code. i think it would be helpful to developers to be able to quickly check a large codebase for conformance with `asm` by adding a single rule to `.jshintrc`.', "just a quick heads-up.i ended up having to fix this very issue in a patch i did to get jshint to parse `yield` expressions correctly. i'll add a unit test for this once i finish up the unit tests for the patch itself.i should have a pull request up by tomorrow.", 'usage would be what people are used to seeing from cli tools. right?', 'not sure if #1054 solves this issue. it can also happen with a variable in the same scope:```function x() {    var key;    var foo = function () {        alert(key);    };    for (key in {}) {        foo();    }}```however. jshint does not complain\\* abot this:```function x() {    var foo = function () {        alert(key);    };    var key;    for (key in {}) {        foo();    }}```*but jslint does', 'adding a `case "closure":` before `case "var":` in #1054 makes both examples work. but it\'s still a bandaid. which is why i ended up withdrawing that pull request. a proper fix for this bug is going to have to fix the scope-handling system as a whole.', 'hi. i have a wsf file that calls jshint. however. i get syntax errors inside jshint.js. this is because it uses getters and setters that are not supported by windows xp wsf files (i havent tried in w7).is there a way around this?e.g.```get lines() {    this._lines = state.lines;    return this._lines;}.```big thanks! great tool!', 'turning off w117 ("x is not defined") does not work inside functions. this is reproducible on the jshint website:``` js(function (definition) {  /* jshint strict: false. -w117 */  q = definition();})(function () {  "use strict";});```i\'m trying to assign to a global (in a cross-environment way) without getting any jshint warnings. can\'t seem to pull it off. am i doing something wrong perhaps?', "alexeykuzmin another possibility would be to add the ability to load custom style modules via command-line. i.e. same interface as `src/stable/style.js` via `jshint.addmodule()`.``` sh# usage examplejshint --style=mystyle --reporter=myreporter file.js```that would be a lot more flexible without having to add everybody's personal style (i expect they are legion) to the jshint core. you wouldn't be able to check your custom style via the web interface. though. and of course. there are limits to what you can customize with the current (and future) `addmodule` interface .---you could actually handle this particular case using a custom reporter (since what you want is a strict subset of `camelcase` warnings to be reported). but for more complex identifier checks. you'd still need a custom module.", "strict violation (w040) reports wrong character. ``` js( function () {'use strict';var x = {};x.once = function ( event. listener ) {    function wrapper() {        listener.apply( this. array.prototype.slice.call( arguments. 0 ) );    }    x.something( event. wrapper );};}() );``````[l6:c25] w040: possible strict violation.    listener.apply( this. array.prototype.slice.call( arguments. 0 ) );                          ^```fixed by using `/*jshint validthis:true */` since it is a valid use in my case. however reporting the character position as bug.", 'jshintrc exported option. it seems like there is currently no way to define exported in a jshintrc file.i know i can use an inline comment but i would prefer to have everything either in an rc file or directly in my gruntfile.```/*exported cats */`````` javascript    "predef": [    ]```i would expect to have an option like this.``` javascript    "exported": ["logger"]```', 'can we have a connection to the options flag as well?```$ jshint help w123shrug (true)w123: short description of this warning```that would mean that the option flag is `shrug` and its default value is `true`. so if you want to turn it off you\'d add `"shrug": false.` to your .jshintrc or whatever you\'re using.', "glad that worked. you never know with computers until it actually runs. hopefully you don't run into any other problems with jshint (but please report if you do &mdash; preferably with a stack trace. of course).---i keep forgetting how little you can take for granted with a prototype-based language. it would have taken me a long time to suspect the for-in loop. even though i did look at it and dismiss it.", 'maxerror should be opt-in rather than opt-out. it\'s really frustrating that jshint refuses to finish processing my file. imagine if grep would stop halfway saying "too many matches". this is how i feel right now.', 'a generator function shall contain a yield statement.. a generator that only contains a return statement is probably a valid generator``` js/*jshint forin:true. noarg:true. noempty:true. eqeqeq:true. bitwise:true. undef:true. unused:true. curly:true. browser:true. devel:true. esnext:true. indent:4. maxerr:50 */var of. run;run(function *() {    return of(5);});```the above currently errors complaining about lack of yields', 'shelljs option (#1078). adding a `/*jshint shelljs:true*/` option/directive per #1078', 'warns about unused variables for necessary function params. take this code:```    this.stub(fs. "exists". function (filename. callback) {        callback(true);    });```the callback is the second parameter given. so even if i\'m not using `filename`. i have to take it. it would be great if jshint didn\'t warn about `filename` being unused in this case.', 'correction filed here:  for pressing the issue!', 'dherman sweet !', 'feature request: coffeescript rule. so that a `.jshintrc` file could. for a directory of coffeescript-compiled files. not complain for how coffeescript does things.', '+1seems no progress on this', "just don't lint automatically-generated files (we have an option to ignore directories. i think). it doesn't make sense to not trust your compiler.", "wow. excellent. i had no idea my jshint was outdated so fast. it's an active project for sure. thanks for the heads up. and sorry for the noise.", 'wow that was fast thanks :+1:', 'the `shelljs` option has been implemented. so this issue can be closed.', "i'm sorry no response for long time. i does not know what actual code/syntax causing this error. because of minified. large js code to parse.", 'thanks antonkovalyov', "usrbincc can you file something here:  as i'm not sure how to answer this question", 'this was released a month ago.', "i ended up just adding an extra message to  .i don't know if i really added anything. but i went ahead and added something anyway.---i'm really thinking that there would be a lot less friction to handling bugs in the spec (both for bug reporters and the spec maintainers) if it were hosted on github. since the edit format of the official spec is `.docx` (i think?). i can understand the difficulties that might be involved.but switching to a more github-friendly format certainly isn't a complete pipe dream. i mean. you could always convert the source xml (hopefully with minimal formatting loss) and use that (maybe tex? or some lightweight markup language?) as the base format for converting to pdf and html.", 'just tested this old bug with current head. all three examples does not raise any warning:```if (~\'photo.gif\'.indexof(\'.\')) {}var i = window.location.search.indexof(\'xxx=\');if (~i) {   console.log("param xxx present");}if( ~myarray.indexof(item) )```please reopen if you still see that error happening. or if you have a specific configuration option that makes jshint yell.']