['well a `make jshint` woulda helped you on that one ;)', "please fix the jshint error and let's get this in today - before the next cordova-windows release.", "might be related to jshint checkin - changing default file mode from '0600' to '600' for writefilesyncmode utility.", 'rollups cause line too long jshint/lint error to be thrown. this may only be happening for rollups and potentially only for -debug.js but i get:shifter [err] ...build/tincan-w/tincan-w-debug.js contains 1 lint errors   #1: line too long.for the following line:yui.add(\'tincan-w\'. function (y. name) {"use strict"; }. \'version\'. {"use": ["tincan-w-base". .......since it is debug i\'d think tossing a newline after each rolled in module would do the trick.', 'add jshint', 'very nice.related to this. i noticed that the project does not have the same indentation everywhere (i am to blame for some of this). what is our policy here. do we go with 2/4?', "i'm for 2 spaces", 'should we fix that here or in another commit?', 'separate commit. may wanna include jscs for enforcement', "hi peter. sorry for my late reply i have been really busy this week. i noticed that this pull request does not include my changes merged for the $pushall from master. in addition before making pull requests can you please run the jshint files against your changes as they don't comply  you can simply run```grunt jshint ```i will pull this branch now and check out the changes locally. thanks for contributing.", 'chokes on comma operator. var a = ("hello". "there");a; // "there"jshint says:expected \')\' to match \'(\' from line 1 and instead saw \'.\'.', "yeah. this is a known limitation of our current parser. it works fine in next tree but for this one--i'm waiting for the patch from someone.", '`laxbreak` is not particularly granular. how do i discriminate against comma-first without submitting myself to harassment about what goes on within my parentheses?other than using jslint. that is.', "i just realized this as i was perusing the unit tests. however. my prior point still stands:> even if the situation were reversed and we used `event` without using `ui`. it is probably best to still have both declared in the method signature. so you can tell at a glance what sort of method it is.i think this is a fair claim; if you have a whole bunch of callbacks and some of them look like `function(event)` while others are `function(event. ui)` because they happen to use `ui`. the inconsistency is confusing: they're all definitions of the same callback. so they should really all have the same method signature.jshint supports the use case of `function(event. ui){ return ui.whatever; }` because of syntactic happenstance. but a better reason is that all method signatures should have the same method signature. which would support `function(event. ui){ return event.whatever; }` as well.", 'please create this ticket in `jshint/node-jshint` repo. thanks!', "i'm with axkibe on this. i would love to be able to warn about unused `var` declarations while ignoring function arguments.", '`latedef: true` rather than false.your code passes fine:```/*jshint strict: false. latedef: true*/(function(){  var foo = { bar: function() { baz(); } };  function baz() { }  foo.bar();  baz();}());```', 'undetected syntax failure when ending a line with a comma. the following code snipet passes jshint. but doesn\'t execute!``` javascriptfunction swap(a. b){  "use strict";  var c = b;  b = a.  if (b)    a = c;  return a;}swap(10.20);```', "for ... in. is it possible to make the follow code segment pass jshint with forin turned on. since it's just a matter of coding style?var o = {}. p. a = [];for (p in o){  if ( !o.hasownproperty(p) )  {    continue;  }  a.push(p);}", 'ah. sorry. it seems jetbrains ides ignores this particular option.', 'reopening since next repo was merged back into this one.', ".jshintignore slash differences on windows. the format for path separator in windows is unfortunately \\. as opposed to unix's /. so unfortunately you need to duplicate all .jshintignore definitions at the moment.", 'input via stdin. (op: hallettj)it would be super useful to me to have an option for jshint to accept input from stdin instead of from a file input. the use case that i have in mind is taking a text buffer from an editor. piping it to jshint. and parsing jshint output to highlight errors in the editor.my suggestion is to follow the unix convention where if a given file path is a dash (-) then the program reads from stdin.', 'should throw exception when given file extension that will not be checked. example:```jshint foo.js bar.txt```it will silently skip bar.txt unless the extension is explicitly specified. this is unexpected.', 'handle "extension-less" files.. use case:```jshint jakefile bin/node_script```there is currently no way to automatically check a file with no extension.', 'fail on bad config. (op: miohtama)jshint should abort as error if- config file does not exist- config file is not valid jsonnow it silently ignores config. causing confusion when config flags are not effective.', 'include ignores in `.jshintrc`. (op: necolas)keeping all the relative configuration in a single file would be useful. it should also make it easier for other tools. like grunt. to more easily hook into the pre-existing ignores in a .jshintrc.', 'path to jshint inside wsh.js seems wrong. when working with the wsh.js of jshint. the path pointing to jshint seems to be wrong. by removing src in the path. i am able to runc:>cscript src/platforms/wsh.js [paht to my js files]otherwise i get an error "could not find jshint.js"', "after some investigation i found the source of the warnings. it was in the reporter:```var globals = result.implieds;if (globals) {  globals.foreach(function (global) {    for (var line in global.line){      console.log(        global.line[line] + ': \\'' + global.name + '\\' is an implied global variable.'      );    }  });}```so jshint does not warn. but treats and reports them as implied gobal variables when they are not", '\'undefined\' guards on non-local variables should not trigger "implied globals" warning. i find myself using the following idiom a lot:```if(typeof exports !== undefined) {    exports.foo = "bar\';}```clearly. if exports isn\'t defined locally. then exports is being used in a global context.  jshint should treat exports as if it is defined within that block.i\'m aware of the workaround but this is a specific thing that should be handled by jshint without me having to give hints', "the problem is that you have to run `node make.js build` first and then run `jshint-wsh.js` from the dist/ directory. however. now that i'm thinking about it--if you're using wsh you probably don't want to use node so the first step becomes a problem.", "but it is an implied global. isn't it?", "it is a global but it's not clear to me if it makes sense to treat it in the same way as other implied globals.  the guard signifies that you are aware that it is defined. regardless of where it is defined (local or global scope). which is far different from blindly using a variable."]