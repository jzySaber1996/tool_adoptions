['i propose moving all these to a `.jshintrc` for editors that support gutter', "> i propose moving all these to a `.jshintrc` for editors that support gutterworks for me. though this can be done in a separate pull request. (i'm not familiar with grunt conventions. but i got the impression it's common to put everything into the gruntfile.)", "> then it could just become part of our travis build. too...it already is. assuming travis runs `npm test` (which is now an alias for `make && grunt test`).> there are already too many tools flying around.i agree. grunt involves so many moving parts. though. to integrate jshint in a makefile. for example. one would something along these lines:``` makejshint = node_modules/.bin/jshintlib = $(shell find lib -name '*.js').phony: lintlint:    $(jshint) -- $(lib)```with grunt. one can't interact with jshint's command-line interface. so it's necessary to install a package which wraps jshint and configure in it the gruntfile. to me. this is avoidable complexity.> i bet travis has `make` in its environment. but joe user may not. esp. if he is using windows (god help him).travis does have make installed. but your concern about windows users is valid.", 'set shadow to outer. i ran into this bug 10 minutes ago``` jsif (opts.latetimeoutlogger) {    opts.logger = {        fatal: function fatal(message. opts. cb) {            // simulate a really slow logger            settimeout(function delay() {                cb();            }. opts.loggertimeout * 2);        }    };}```here i set `opts.logger` to a function that has a parameter named `opts`. the function parameter of the fatal method shadows the outer `opts` and thus referencing `opts.loggertimeout` is `undefined` which means passing `nan` to `settimeout` which is much fun.jshint has a feature called `"shadow": "outer"` which is disabled by default. if you opt into this it will complain about all shadowing of variable names defined in outer scopes.this means the above code is now a static bug and has to be refactored to `fatal(message. options. cb)` or something.this is a great poorly documented feature. (only documented in the unit tests -.-)cc dfellis sh1mmer mlmorg matt-esch', 'shakdoesgithub i believe we have an exception in our .jshintrc file for that case - chai assertions have a pretty weird syntax some times :)', "garrensmith thanks for this. the pr looks great. thanks for the test in there. agree with the functionalitycurrently its just failing linting. could you fix the lint error and ammend them to the previous commit? cheers (you can see the errors with $ grunt jshint or clicking 'details' above", "sorry about that daleharvey. i've made the fix.maybe worth mentioned jshint in the contributors guide so you don't have to keep repeating yourself.", "lgtm. looks like mostly trailing whitespace - unfortunately. looks like jshint doesn't check for this. so if we can easily add another tool like hank suggested that would be great.", 'cb-8400 enable jshint for windows platform. - created a `npm run jshint` command & integrate into `npm run test`- created jshint rules files for spec and rest of the repo- added node_module jshint to repo- fixed all jshint issues', 'lgtm', "add jshint check on travis. would be good to automate some of the style check on travis. that way it's easier to spot things that aren't following out conventions (even tho our conventions are not that strict/defined).", 'html5 filesystem types "blob" and "blobbuilder" are not defined. both blob and blobbuilder (depricated) seem to not currently be recognized by jshint as valid built-in types.```line 424: blob = new blob([xhr.response]. {type: mime});\'blob\' is not defined.line 427: var builder = new blobbuilder();\'blobbuilder\' is not defined.```', "`typeof blobbuilder === 'undefined' // true`blobbuilder doesn't exist in my browser.", 'hi.currently `indent` implies `white:true`. so specifying `indent:4` after `white:false` reactivates `white`.hope we can eliminate this behavior in jshint-next..greetings.', 'i\'m afraid this makes jshint stricter than jslint. which kind of feels weird. i switched to jshint because it was more lenient. it allows "for (var i=0" which jslint doesn\'t. i\'ll look into jshint next code and try to backport the option from there.for the time being i\'ll use my fork.', 'did you try the `eqeqeq` option with jshint?', "i feel like this should warn but it doesn't.```/*jshint expr: true. eqeqeq: false. undef: false */a == 1;```", 'andrewdapkiewicz no. i don\'t want to remove any feature - i only don\'t like to see different libraries in the jquery core.there should be a single file for each library. thus we can add/change them easily. and everyone can create it\'s own. too.maybe we can even add more features (e.g. member detection with error messages like "$.jquery is not a valid member of $. did you mean $.jquery?") - maybe part of _next-...-next-jshint_ ;)even better would be an approach where we get the globals directly from the libraries - unfeasible. but gorgeous ;)']