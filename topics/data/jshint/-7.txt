['thanks for the pointer. i took a quick look at jshint-loader. i think that i know what the problem is.i will fix that later (currently at work) the fix should land on the develop branch.', 'remember to run jshint. you have an undefined variable', 'wow this is superb. thanks a lot. theres been a lot of questions about cors and credentials recently but i havent had time to dig into it.i will come back with more comments shortly. giving it a quick one over i have a few superficial comments. the linting steps fail (you can run $grunt jshint to test locally). also we will almost certainly want to expose the enablecors / disablecors as grunt helpers to help users set up their couch instance so we might want to put them in a new pouch.cors.js or something similiar. the indentation is also a little funkyi think we can likely do something to avoid having to duplicate the withcredentials in each request. but i need a little more time look into this and get it running. travelling right now but will work to get this merged asap. thanks a lot', 'thanks for the tip on the jshint command. fixed those errors. they were predominately function naming errors. as for the weird indentation. it could be my editor. or i just have a weird coding style. i was using 2 spaces for indentation (sublime text 2). because thats what it seemed like you were using. if you could give me an example of what you mean. i will look into more closely or it may just be my editor (i just switch to sublime text 2 a week ago to try it out).', 'muratsu merged in 8e7ad53191ebf34c7faec9ed1a3e4c0634372e2d and 232968c062cf73ae7482f13cc3b6584d72933498 . could you please close this pr manually.', 'from the sounds of above. how about:- expand on the "how to ask for features/send a patch" process:  - which features are undesirable from jinja (as part of its pythonic inheritance)   - which language features we inherit from javascript that doesn\'t lead us too far off from "the philosophy"- what\'s required in a patch (documentation. tests. performance. code style)- use tooling that makes it easier to measure above (jshint. test suite. benchmark suite. ...) and possibly even bake that into a script that people run on their feature branches and paste as part of the issue- elaborate on the review process so everyone can jump with feedback. end goal would be to bake it into an easier acceptance for merge (by the committer)- possibly also introduce issue janitors and not assume that core submitters should get that task for free.i guess a combination of docs/code committed to the repo as well as github wiki would be proficient? travis is a good tool for build testing but not really performance testing since its available resources are unreliable. it could probably verify the tooling step of above suggestion.', 'can you add a jshintrc for code style. it can be run in travis for checking every pr.', "fix string/replace spec on ie7 and rename 3rd argument to replacements. spec was failing on ie7 because strings chars can't be accessed with `[0]`notation. also renamed 3rd argument to `replacements` to make it different fromthe function name (jshint stops complaining and easier to understand).", "the underscore prefix indicates private properties. this is a common convention. so it won't be changed.if you need to lint the source code. consider changing your jslint options. otherwise. you'll run into may similar issues. btw.. i'm using jshint for this project. so i've already got some style limitations in place.", 'example: add jshint and fix style violations. include .jshint\\* files in the generated example app. add `npm pretest`script to run jshint.fix style violations in the `rest-api.test.js` template./cc ritch fyi', 'looks like travis doesn\'t like your stylerunning "jshint:all" (jshint) tasklinting app/appium.js...error[l63:c46] trailing whitespace.  this.forcestopapp = this.args.forcestopapp;  [l523:c2] mixed spaces and tabs.forcestopapp: this.args.forcestopappwarning: task "jshint:all" failed.\x07 use --force to continue.', 'jshint should support some line breaks without laxbreak. the following code is marked as an error without laxbreak:```foo = bar    ? \'yes\'    : \'no\';```as does this:```foo = (bar    ? \'yes\'    : \'no\');```i can understand why the first one might be considered dodgy. it\'s safe. but easy to misread by an idiot in a hurry. the second one. however. is perfectly fine. the open parenthesis makes it clear that the line break cannot possibly be the end of the statement.note that neither of these is marked as an error by jslint. as jshint pretends to be more lenient than jslint. i fail to see how this could require `laxbreak: true` to pass.even more inane: the error given is "illegal line break before \'?\'". which is plain wrong. this is doubly so if you consider that the permitted alternative is```foo = (bar ?    \'yes\' :    \'no\');```which is no less or more safe than operator-first ternaries.', 'the other issue is jshint still complains if you have already declared your for in variable higher up in the current function.... it needs the var statement to be inside of the for in loop declaration.  weird.', 'hm. i wonder if we can do something like `/*jshint browser:-event.-document */` for this and/or for next. blacklist is an unfortunate name because you usually blacklist something you disallow.', "i like the `+/-` syntax as it looks nice.the only issue i see. which i'm not even sure it's much of an issue. is that it will default to adding the option.example:```/*jshint browser: document. -location */```adds document and removes location. although it's not necessarily apparent.we could require `+` for all adds but that would be weird.", 'that is a java project. you cannot use jshint to lint java code it only works with javascript files.try using the website www.jshint.com and pasting in some javascript code.', "good that it is possible. but i doubt that this option solves the problem. since turning it on will definitely lead to problems and the declaration pattern itself is absolutely valid. convenient. useful and doesn't cause confusion. to me it's the point where a tool like jshint conflicts it's own purpose :|", 'when using `node-jshint` one can enter files in `.jshintignore` that will be used to skip files. such as these.other than that. per-function `/*jshint .. */` comments are supported. but turning off completely is not possible. and manually embedding third party code within a file sounds like a problem. seems like something a dependency manager or build process should do instead.', 'can you paste an example of the regexp code that fails jshint?', "if your code doesn't have to work in older browsers / engines. enabling es5 mode in jshint will no longer show these warnings.", 'exactly how is this related to jshint?', "the primary reasoning behind this convention is that the operator makes it clear that the line is a continuation of the preceding line. with the operator before the line break. this is much harder to spot.this convention is so widespread that it doesn't make sense to treat it as an error unless the operator can be interpreted as unary and the expression isn't enclosed in parentheses.", 'krinkle. you are absolutely right that a dependency manager or build process should probably used in cases like the one i described (and is exactly what i ended up doing. i was just in a hurry at the time and wanted to get all my other linted before committing). jshint maintainers: would a `jshint off:true` option be a welcomed patch or is this a "won\'t fix"?', 'line and character offset differs from documentation. the documentation included in `jshint.js` describes the error fields `line` and `character` as follows:```line      : the line (relative to 0) at which the lint was foundcharacter : the character (relative to 0) at which the lint was found```actually. both line and character are always 1-relative. for example. when checking a js file that only contains the single character `\'#\'`. the error object has these fields:```{  line: 1.  character: 1.  reason: "expected an identifier and instead saw \'#\'.".  ...}```this has been the case with jslint already. i\'d suggest to adjust the documentation.', 'also curious. has this feature been implemented?', "mutationobserver use fails. `mutationobserver` is present starting in firefox 14. but jshint doesn't know about it.", "fjpulidop if you can provide a use case that relates to jshint then i'll reopen the ticket.", "for jshint-next. i'd like to see a more complex solution where one can provide regex-pattern for each allowed type of definition (and jshint warns if it does not match)..something like. e.g.`[a-z]\\w+[a-za-z0-9]` for function names.`[a-z][_a-z0-9]+[a-z0-9]` for const variables.`[_a-z]\\w+[a-za-z0-9]|[a-z]+` for variable names. ...`[a-z]\\w+` for property names ... (_it's only an early idea - maybe there are many more things to consider_)so yes and no. i think we should stop support for all the jshint options marked as legacy (and some more) - but we have to provide a better solution (which can lead to the same results) ;)", 'any news to share about this?', 'smarttabs not works in grunt. i am parsing/lint some javascript code and has problem with switch off this warning "mixed spaces and tabs." reproduce:create some file with mixed space ans tabsadd smarttabs to grunt.jsgrunt lintresult:still jshint produce warnings.', "yes. sorry for the confusion. i am using `regexp: true` but since the `insecure '^'` is not documented on the jshint web site under that option. i didn't know that this option was causing the check to be enabled.although it would be nice to have separate options. perhaps the more immediate problem then is the documentation bug.", 'smarttabs !== mixed spaces and tabs.can you please post an example of the code that triggers this warning?', 'sure i will give you some samples in next post - i think that this warning is very low priority compare to others so it should be allowed to off this warning and others.', '`/*jshint scripturl:true*/`', 'eek. you can format code by adding 4 spaces in front of it. otherwise post a jsfiddle or a gist.', 'not want to reformat code because such restriction since white spaces not impact on execution - what is jsfiddle or gist is it related to jshint?', "somewhere to post your code so it doesn't get mangled and i can figure out what's going wrong.", 'i will do screenshot.', 'are the dots spaces and the >> a tab?', 'it should not warn since this warning is not important comparing to errors or other warnings it make mess not information.**why not to stop this warning if value of it is low and make mess?**it is my own code but not want fight with space since not care about it at all - it not give any value for user of my program :)i am afraid that writing middleware is too complicated - how much time is need to write such middleware?i try to use grep but it is multiline and  not works on windows - whatever it make grunt less usable.not want use fixmyjs at all and any automatic tool formating code since it generates errors and requires always additional testing or code review. do you have other suggestions how to easly solve such trivial problem?', "that's the spiritual heritage of jslint ;)in some cases it's also really helpful. e.g.`[0-9-a]` should be rewritten as either`[-0-9a]`. `[0-9a-]`. or `[0-9\\-a]`even it's not necessary at all - jshint is not a parser. it's a linter ;)for now. you can use `/*jshint regexp: true. regexdash: true */`to suppress some of the messages.hopefully we can make it more configurable in jshint-next..", 'thanks. it looks that middleware is easy but how to attach it to grunt when i am using jshint with lint - i have no idea where is hook/binding point?what should be add to command line like "grunt lint" or grunt.js?']