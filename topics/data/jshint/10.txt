['travis ci just passed this pr with jshint error. need to fix that soon :)', 'ok didnt get agreement with this', "(#2853) - parse uri for user/password. yeah. the parseuri function just wasn't decoding the username/password like it should. i also went ahead and put it in its own function.incidentally. there was a `jshint: maxlen:false` what was allowing us to become sloppy in `http.js`. fixed that too.", "good point; i'll put this in the unit tests next time. forgot that we now have both unit and integration tests.", 'sorry about that. should add a jshint rule so we can remember to be consistent.', 'great work! minor nits to be addressed. and a jshint issue to fix for the build to turn green:```modules/tester.js: line 455. col 12. possible strict violation.```thanks!', 'i hate jshint the idiot dictator :-p i will fix that. i reinstalled my laptop system last week and so i need to re-install jshint.', "i like the idea. why can't we just rely on the extension and extract js only from .html files? also. you'll need to convert your files to tabs since this is what we use within jshint codebase.", 'what is difference between "options and error code" in jshint?. i had confusion between options and error/warning code in jshint.curly : trueorw116how to identify "curly options" belongs to w116 code? while(true)            alert("ok");demo.js: line 3. col 5. expected \'{\' and instead saw \'alert\'.(w116)please let me know. if my question is not clear.', "aside from reading the code. you can't. we're working on making this easier.", 'jshint complains about arrow function arguments. following code gets warnings:one undefined variable2   x``` js/* jshint esnext: true */const inc = x => x + 1;```', "yeah. you can ignore individual warnings. run jshint in a verbose mode (--verbose). note warning's error code (w\\d\\d\\d format) and then do this: `/*jshint -w123 */` where w123 is the code of the warning you wish to ignore. see more in jshint.com/docs", 'you can put it into jshintrc if you want to.', '"-w053": true since jshintrc is a json file', 'funcscope:true does not suppress warnings about variables declared in a try block. ```/* jshint funcscope:true */try {    var x = true;} catch (e) {    ...}if (x) {    ...}```the above still gives a warning about x being used out of scope.', 'kflorence it is not always possible or clean to use a `.jshintrc`. for example. you may want to enable qunit globals in a single file. if we had this environment in jshint. it would only be a matter of setting the right file header.', 'same issue in the web-based jshint. removing the destructuring lines stops the error:- `let [ mimetype. icon ] = yield downloadicon(this.iconuri);`- `let [ mimetype. icon ] = yield downloadicon(iconuri);`- `let [ olduniquename. installpath ] = webapposutils.getlaunchtarget(this.app);`', "i don't think this is a duplicate because it doesn't deal with concise methods in general. rather it deals with concise methods that are explicitly named 'get' and 'set'. because if you currently try and use those as concise methods jshint will complain that their missing a property name. so i think it deals more with addressing this edge case than adding support for concise methods in general.re object.create example i just thought that in that case jshint may _want_ to warn users about things like having a setter without a getter. having parameters for the getter. etc. since in that case 'get' and 'set' are being used as accessor methods and not just plain methods written concisely.", '> i don\'t think this is a duplicate because it doesn\'t deal with concise methods in general. rather it deals with concise methods that are explicitly named \'get\' and \'set\'. because if you currently try and use those as concise methods jshint will complain that their missing a property name. so i think it deals more with addressing this edge case than adding support for concise methods in general.<img src=" not an edge case. it\'s a totally wrong case and you\'re right to address it.', 'changing `true` to `false` in the config does not have any effect. i have the following javascript file:``` javascriptvar a = {  a:\'a\'.};```both following .jshintrc files do not detect the extra comma.``` json{  "es3": true.  "-w070": true.}```and ``` json{  "es3": true.  "-w070": false.}```i would that the first one warm me about the extra comma.this one detects the extra comma.``` json{  "es3": true}```is it a bug or a feature?', "springuper i think the `.gitconfig` example is a bit different because (in the examples you've shared) it allows git configuration to vary between contributors. this feature would be for projects that contain multiple `.jshintrc` files. in those cases. it wouldn't necessarily be wise for a project to declare (for example) `inherit: ~/.jshintrc`. since that assumes contributors have additional (and varied) `.jshintrc` files elsewhere. linting rules make the most sense on a project-specific basis.", "`-w070: anything` tells jshint to ignore the extra comma warning. just don't put `-w070` and you'll have your warning.", 'ping', 'do you mind adding a test case for your patch? otherwise looks good.', 'rwaldron nice catch--it definitely can', "sweet. didn't notice the project already depended on underscore. updated the cli tests to check that this works as expected.", 'if i move `/* jshint -w084 */` declaration above `wat` function declaration. everything looks fine too', "hmm...i could be wrong here. but it seems like this would be a feature more targeted at the reporting utility (such as grunt).  for the example of grunt. couldn't the reporting utility for grunt just call jshint on each file while printing the file name along the way to produce the results you are looking for?", "this is so awesome. from the first day i used jshint. i thought this was a weird thing for it not to support.  thank you spenceralger. and my dripping wet `.jshintrc`'s thank you as well.", '// jshint ignore:line not working. just tried this in the demo on the home page as well and it seems to have no effect. ignore:start / ignore:end does work', 'i mean```    try {        return require(fp).jshintconfig;    } catch (e) {        return null;    }```', 'update jshint.js. little fix which made ie complain', "+1 i have a lib dir with third party libraries i don't want for jshint to go into", 'pgmemk this possible with a .jshintignore file (perhaps not ideal. but better than nothing)', 'false negative on scripturl. i\'ve got the following line at the top of my node.js code:``` javascriptvar debug = require(\'debug\')(\'mocha:multi\');```this is getting flagged by jshint under the "scripturl" rule.unless i\'m missing something. this is incorrect?i\'ll try and send a pr when i get a chance', 'jshint is not compatible with non-es5 compatible engines. sorry.', 'right :). did that and agreed with barneycarroll', 'spurious warning: "the body of a for in should be wrapped in an if should be wrapped ...". because i don\'t like code which indents too far. i often use this form:```for ( var k in dict ) {    if ( !dict.hasownproperty(k) ) {        continue;    }    // ...}```which is perfectly fine. jshint gives me the warning:```the body of a for in should be wrapped in an if statement to filter unwanted properties from the prototype```i don\'t think there should be a warning for that case.']