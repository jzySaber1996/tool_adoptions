['crosseye i have node already. used jshint but apparently it has different requirements. will do :+1: kedashoe i thought curryn would be more performant. wasnt sure if thats the case i guess i can switch to curry.ok cool so how would i setup the examples page. since the docs are normally generated ?', 'add npm run target for jshint. find it very handy just being able to run jshint and unit tests as npm commands. this addition just caters for developers with a similar workflow. granted. using grunt off the command line achieves the same thing but hoping there is no compelling reason not to include this mechanism too.', 'works for me.', 'yup', ':herb:', 'pair of jshint. canvastinter problem', 'cheers man! :+1:', 'update package.json. fix not found module jshint during gulp build . jshint needs to be installed with gulp-jshint.', 'thank you. i appreciate your advice on this matter.', 'ok just found the `make test-unit` command to bypass jshint', "jshint checks for syntax / style errors. but it should also output the actual error. unless it's not installed properly?", 'so i am less certain about this now. browserify doesnt look to love the idea of having optionally loaded modules for browser vs node. most of the things it is used for seems to write abstractions underneath node libraries (like backing leveldb with idb) but that isnt an option for uscurrently refactoring everything so we rely much less on globals and expose each file through an individual object. a nice way to check is that the jshint global definitions should match the optional require statements and the code inside the node check should only ever be requires. once that is true then it should be pretty trivial to test browserify', ":+1: i'm in favor of this as well. i've been doing a bit of manual clean up but i'm not sure if the changes i'm making are in the desired format.", "ok i've tweaked the configuration in the jshint file and re-pushed it. also have started going through the source applying my own rules :)", "totally fair reason to refuse. node-jshint's executable does comment removal via a hacktastic regexp. but that's not something i would advocate repeating. i think we can live with documenting these sorts of things in separate files.", "i'm closing this. it would be probably better to piecemeal this anyways. and if i submit the jshintrc. i think i'd do it on a separate pr.", 'jshintrc added. - js hintrc added- indent is 2', 'the-simian to better enforce styles we should integrate this with the test suite. so that it is impossible for someone to add invalid code to the repo since the tests will fail.thanks for the work the-simian :)', "that's a great idea.", ':dancer:', "thanks. this should have been done a long time ago!at cucumber-ltd. we also include hinting in the build (before running the tests) and also as a pre-commit hook on our machines. that way you can't even push code that fails hinting (a shame we can't enforce that on oss! :smile:)", '> warning: task "jshint:files" failed.\x07 use --force to continue.', "you're right concerning the case where somevariable is 0 and given that case. i'm going to admit it is pain to write the condition in other ways without seperate null and undefined checks. too bad jshint codebase is quite hard to follow. otherwise i'd have taken a stab at it.if you really want to get rid of that error while holding on to the comparison. !(true && somevariable > 0) should do the trick. it'll also cry for an explaining comment which isn't a bad thing.what comes to smart way of using it. my stance on the issue is this: if you're in a situation where valid values for your variables include numbers. null and undefined you're already close to losing it and you should either solve that issue or be very clear of where you're at with your variables. in which case such use of unary negation is indeed confusing.", "yeah. 'use strict' thinks you want `newcap`. that code passes with `/*jshint newcap: false */`", "`eqeqeq` when its on requires strict comparisons everywhere. when its off it doesn't require strict comparisons _everywhere_ but it still requires it in cases where type coercion can lead to problems. jshint is not simply a parser it is a linter.", 'thanks for the clarification.maybe you can update the documentation to make this point more clear. the note reads like the only always checked unsafe comparisons are comparisons to`null`. which can be deactived with `eqnull`', "the code i wrote for you is an isolated example of a problem we found in a much larger project. i'd rather not disable the warning because it's good practice to avoid creating functions in loops.my real question is about the conditions under which jshint raises the warning. perhaps it's too generic. i don't _think_ there's anything wrong with the above code. so why should jshint warn me about it?", 'you should use `laxbreak`. default behavior is (historically) what crockford recommended.', 'stupenrose no offence. but how can you claim that jshint-mojo is much faster than wro4j as long as both uses rhino?', "i say it is faster because we have run both plugins on our code.  when running them side by side. our new plugin was faster.  not being familiar with the wro4j code. i can't say exactly why. but i'm assuming it is a consequence of our plugin being built from the ground-up to do just one thing: run files through jshint.  put another way. it looks like wro4j is built to solve a much broader range of problems.", '`/*jshint newcap: false*/` ?', "if you submit a patch i'll merge it in. this isn't something we're actively working on though and something i believe should be available in jshint.next", 'fyi/*jshint: validthis: true */ in that function will suppress this warning.', 'yes (i tested it) - it fucks up... fuck!but `window["undefined"] = ...` fucks up. too. and does not give a warning/error in jshint.', "only properties' names in dot notation are checked by jshint. jslint does the same.and i still do not understand why 'undefined' is bad name for property =(", "jshint's killer feature is the opt-out. as opposed to crockford-ed-in.", "maxparams fails on parameterless functions. the new maxparams option fails when a function has zero parameter.example:```% cat test.js/*jshint maxparams:3 */function a(){}% jshint test.jstest.js: line 1. col 13. cannot read property 'length' of undefined1 error```if you add some parameters to the function definition. it works as expected.", 'jshint does not read the unused option in the middle of code/inside a function.thats why i opened this issue.', 'in next jshint. yes -- we already have it. not here though', 'pull request was reverted.', "sorry. i don't think this is worth adding a new option to the current tree. reason is that in jshint-next this option will become irrelevant but we will still have to support it forever for backwards compatibility.", "ah.. sorry i didn't realize that jshint has unit tests (jslint doesn't). should have double check that.it'll be good idea to cover pull requests with travis ci. such erroneous pulls we'll be picked instantly then.anyway thanks for fixing that!"]