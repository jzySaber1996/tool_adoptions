["no. my comment was before your last change.  i've merged your change into the codebase.this should be all you have to do. assuming you've already installed node:```npm install -g grunt```then. if you haven't done this. from the ramda project:```npm install```(this might take a minute or two.)after that you can run any of these commands whenever you like:```grunt uglify  (builds ramda.min.js)grunt jshint  (checks the code against jshint)grunt mocha   (runs the unit tests)grunt docco   (rebuilds the docs)```there are also some tasks that are combined:```grunt test    (runs jshint and mocha)grunt min     (runs jshint. mocha. and uglify)```all of this is configured in `gruntfile.js`.  we may eventually switch over to using a similar. but faster tool called gulp. but it's not a high priority.opening `index.html` is a fine alternative to running the tests from grunt.  i usually do both.  but somehow we would like to know that the code is passing jshint.", "no problem itsravenous  :)assigning names to closure functions would also sometimes make debugging easier (you get the function name instead of undefined). if you can find a jshint optioon that enforces names to closure functions i think we'd be open to support and enforce iut", 'modularise utils so it can be included as a whole. so we dont have to write ```for (var k in utils) {  global[k] = global[k] || utils[k];}```or masses of global statements for jshint everywhere', "daleharvey any ideas for this?i realised the the files werent being linted while mucking around for #549 changing `gruntfile.js` to lint the files breaks the build (due to numbers lint errors)i'm thinking we can abstract out the jshint options into a `.jshintrc` and specify individual rules at the top of the individual files", 'awesome. thanks for this. just a nitpick but we are trying to use (#495) - fix jshint-grunt setupfor commit messages. but just for next time. glad to get linting back', "i linted the actual gql plugin a while back.  i don't think i linted the tests; i can do that if you want.i see that you are using jshint instead of jslint.  i will rerun (i don't expect too many issues).", "strange. i can't replicate the error from the travis build._[edit]_ oh wait. those are jshint errors. i'll fix it.", 'jshint and editorconfig', 'felizbear thank you for a review!johnnyws thank you for stepping up and bringing this back to life. ci is failing on web application build. so may be you should check what `./grunt jshint` returns.', 'mwkang great job! but as you can see - ci is failing now. you probably need to check in `zeppelin-webapp` what does `./grunt jshint` complain about.', "may i request that this be reconsidered?for my own code i do indeed use a jshintrc file. however. i've just spent ages trying to work out why having 'nomen: false' in my config still resulted in 'dangling _' errors for some libraries i was using.turns out that some of these libraries already have their own jslint comments. one of which was 'nomen: true'.i agree that the jslint setting is unhelpfully backwards. but since the comment starts with 'jslint' rather than 'jshint' i see no alternative but to keep compatibility.as an aside. why is this option called 'nomen'? what does that mean?thanks.", "antonkovalyov that's a very good question. i'm not aware of a specific case for `var`. i'm using the plates.js 3rd party file which includes it.the problem is my company's build process needs to successfully lint all code before it can go to production. including 3rd party code. yes. i could just remove the semicolon from plates.js and it would pass. but i was wondering if there was a jshint option that would simply allow it.by the way. the solution in #218 doesn't solve this:var x = 0[x. x+1. x+2].foreach(console.log)it seems like an option to allow defensive semicolons at the beginning of any line should be added. and that it shouldn't be specific to what the next symbol on the line is like the solution in #218 is (must have an open parenthesis as next symbol).", 'in addition: i think we should add a style warning (in jshint.next) if `default`is not the last block ;)', 'provide more information on how to fix issues. when an error is found. it would be nice if in addition to a message a link was provided to further information on how to fix the issue. for example the following two errors lead to an inevitable google search to find a stack overflow post that explains the problem. it would be nice to cut out the middle man and explain the solution on jshint itself.```line 7: var m = $(spec.id);missing "use strict" statement.line 2: "use strict";use the function form of "use strict".```', 'otakustay how does using that reporter differ from running `jshint --show-non-errors`? trying to decide whether we need it or not :)', 'parser not loading options comment correctly. having a hard time tracking down why the code supports parsing options from comments with "/\\* jshint" and not "/_jshint". notice the white space. it\'s strange because i see the /_jshint into a "special" switch-case. but it doesn\'t seem to be working correctly.', 'can you please provide more details?', "crazy. i just tried to repo and it's working as expected now. sorry for the mixup.", "can we add 'collectgarbage()' to this list? it's a stupid ie idiosyncrasy. but when you need it. jshint can really ruin your day....", 'jshint-rhino.js default of rhino=true undocumented. counter-intuitive. when running jshint in rhino (using build/jshint-rhino.js produced by `make rhino` it defaults to having the rhino jshint option set to true.  i found this to be quite counter-intuitive because although i am using rhino on my development machines to run jshint on my javascript files. it does not imply that the javascript i am writing is intended to be run using rhino.  is this really a fair assumption?  note also that this assumption is not made in jshint-wsh.js as it does not set the wsh option to true.', 'make jshint-rhino.js runnable. as a convenience to users. it would be nice if `jshint-rhino.js` were directly runnable rather than requiring the user to invoke rhino and pass the script as an argument for every use of jshint.  to that end. these commits add a shebang line and mark `jshint-rhino.js` executable during build.', "tried to apply the patch but there's a test failure. will check it later (gotta run now).", 'the test failure was caused by a different issue.', 'great.  thanks for merging it!', "it turns out it isn't necessary at all. the problem was occurring because i was using a jsc wrapper to pipe stdin into jshint. and jsc `readline()` internally uses `getchar()`. which ends up separating the bytes in utf-8 and creating a string of nonsense that has a good chance of failing the unsafe character test.", "can't turn off scripturl. smarttabs options from command line. using jshint-jshint-09e24d8. jshint ignores some options (including scripturl=false.smarttabs=false) when running from the command line (using env/rhino.js)."]