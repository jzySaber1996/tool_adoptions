["friksel thanks for the issue. i ran the built code generated with all those excludes and it ran fine in chrome/firefox. also. browserified and/or minified code is not intended to be run through jshint. color-coding in the editor like sublime will typically have issues with minified js files because of the underlying regular expressions used to create the colorization. i'm using sublime text 3 and only half the code is colorized correctly. from my experience. this is not unusual.", "this needs to be squashed into a single commit. and i'm not sure why the gitignore and jshintrc changes. but other than that. it should be good.", "it's the jshintignore that was added", 'this pr is a :+1: from me; i know we do a similar test in websql.js and idb.js. and i could have sworn we were doing it in leveldb.js.however. davedoesdev. you seem to have a whitespace error. so jshint is failing.', '(#2326) - ignore cordova/www in jshint. otherwise the files in deps/ are throwingerrors and annoying me.', '1586a42f845eb48bb6eb29e6d477e745e5e7afd0', "very cool thanks! i added a few comments. there are some more coding style issues. that i think should have been caught with jshint. i'm going to check why that didn't happen :smile:", "sigh. looks like it failed the jshint linting test. i'll fix and reopen", 'messed it up fixing a jshint problem. my editor managed to beautify the file. commited it before realising then got into git hell trying to undo it. easier to delete repo and start again', 'remove yui-hint in favor of plain jshint config', 'yes. in your `.jshintrc` file just add `{ asi: false }` also use `--legacy` option switch.', "devdependencies fixes. lets npm know about external developer tools (jshint+ndoc) rather than relying on the makefile to document it.(-also i'd rather not have anything installed --global unless i specifically ask npm for it)", 'thanks. i understand your concern. while a different patch just recently covered the "cut" issue. this pr fixes the remaining things that prohibit `make` (-and by design `npm test`) from executing correctly out-of-the-box in my os x environment.', "ps. if you have plans to seriously work on js-yaml - let me know details. i'll connect you with dervus for consultations. because js-yaml needs some refactoring prior to move forward.", "have you even read what i've said? yes i've read the documentation. and yes i see that the behaviour is as documented. yet. i do not believe that this behaviour is desirable.please pay me the courtesy of actually addressing my request and answering the follow-up question. rather than fobbing me off with an rtfm. you did exactly the same thing for #1073 and it very frustrating not being able to engage with jshint developers.", '`/*jshint -w086 */`', 'yes. how is this not a thing. yes please!', 'nschonni i think that\'s a great idea. and i\'m wondering why i haven\'t thought about that when i refactored the esx code.jchorn i think a way to remove "information" messages would be better. the same way we do `/* jshint -wxxx */` (`-ixxx` is not supported). and maybe limit more the number of `i003`.', 'closing then.', "now that jshint supports stdin you can transform your dynamically generated config into `/*jshint ... */` prepend it to the file you're linting and pipe everything into stdin. (or you can just create a temporary file)otherwise. implementing this request will complicate our options system for a very small number of use cases. sorry.", 'incorrect interaction with globalstrict and esnext arrow functions. when globalstrict is enabled. arrow functions fail because the argument is being detected as an undefined variable access:badcode.js:```/* jshint devel: true. globalstrict: true. esnext:true */"use strict";var ident = (foo) => { return foo; };console.log(ident("hi world"));```works as expected with an es6 translator:```$ traceur badcode.jshi world```causes jshint to complain about an undefined name:```$ jshint badcode.js badcode.js: line 3. col 14. \'foo\' is not defined.1 error```', 'zenhob i would include your original `var ident = (foo) => { return foo; };` as well :)', 'enforce consistent naming of "this" alias. it is often necessary to have a variable capture the current scope to make it available in closures and callbacks:``` javascriptvar me = this;$(\'div.foo\').click(function (event) {    var el = $(this).toggleclass(\'bar\');    me.bar();});```it would be nice if jshint had an option to enforce consistent naming of that variable. some people prefer `me`. others `that` or `self`. and mixing them in a project makes code more difficult to understand.', "it maybe very difficult because 'this' is resolved at runtime.", "couldn't jshint easily find assignments of the form `<variable> = this`? i don't think there are many reasons to ever assign `this` to a local variable other than for keeping scope.or did i misunderstand your comment?", 'make a pull request for the `jshint/site` repo. thanks.', "this shouldn't be closed as it is still not implemented (unless it has been deemed `wont-fix`).as far as i can tell. there is no way to instruct jshint to only warn about syntax errors.", 'antonkovalyov -- true. but extra commas aren\'t syntax errors. so they\'re hard to detect without jshint..  for now i\'m using `jshint blah.js | grep "extra comma"` unfortunately it\'s quite slow.', "do not show undefined identifier warnings for identifiers defined in external files. my project is composed of multiple js files and in phpstorm i can see jshint warnings referring to undefined identifiers that are actually defined in other files.  jshint should be aware of the externally defined identifiers and not show such warnings.this could be achieved by being able to specify the dependent js files and directories in `.jshintrc`.  then jshint could do two passes on these files.  in the first pass it could extract the externally accessible identifiers from all the files.  in the second pass it could lint the files individually but insert all the external identifiers just like with the global directive.one could use the global directive right away but it's redundant and error-prone to update this directive in every related files whenever a new external dependency is added to a project.thoughts?", 'build process: rhino-wrapper is (h|l)inted wrongly. this describes an issue in the build process:the build file seems to lint all files with the same options. as given in jshint.json. however. the rhino wrapper uses the in-file declaration of jshint options. these are not respected during build. but instead the jshint will - for example - assume a node environment for the rhino wrapper.', "changed 'predef' to 'globals' in example .jshintrc"]