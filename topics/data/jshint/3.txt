['jshint the spec files. issue #55', 'oops. did not notice jshint in npm test.', 'my tests failed with docker before i did not include mocha and jshint installations globaly.. ### description of changemy tests failed with docker before i did not include mocha and jshint installations globaly.', 'hmm. weird - all commands in the package.json file use `node_modules/.bin/` to reference the files - which specific command was failing?', 'try `npm run jshint` :)', "hmm but that's what docker does", 'ok... i see now where problem lies. you have to npm install localy. before doing docker tests.but then i do not see any reason for rows in dockerfile:```copy package.json /run npm install```', "imho before any tests docker inside should do npm install it'self. that way you have clean test inside docker.", "update linted files and fix some jshint issues. add `tests/*.js` to list of _linted_ files and fix it's issues.", "btw the lint script doesn't really make a lot of sense to have; it's just one line which executes jshint. if you plan to add more stuff later. then i guess it makes sense.", 'ok. installed linux. fixed a jshint issue. now all tests seem to pass.', "just in case you didn't know. you can also put it in your global .gitignore.  i've done that myself; i found it's also a good habit since it forces me to put project config elsewhere (e.g. jshintrc).", 'yo. minor jshint fix needed here. but yay less code', 'so jshint checks indentation based on the line before it. the real error is that the previous line should be at 3 not 5', "yup. daleharvey . you are right. i'm not testing it right. it took two different issues to screw me up here.#1 - the jshint website doesn't check for indenting errors#2 - when i switched branches locally in git it turned out that it was still applying changes that weren't in master. once i ran reset it was all good and i got the same error.thank you! by running the test yourself you proved i had screwed up which made finding the problem much easier.", 'results are in the browser. cleaned up a bit about the location of the files. added jshinting', 'you should be able to put in jshint exceptions. like `/* jshint maxlen: false /*` in a comment above them', 'ok. added the comment to just those lines. and added in the maxlen: 80 option into the .jshintrc file.', "d'oh. forgot to jshint. should be green now.", 'leszekswirski awesome to get the exec limit from the compiled code! the first part however i don\'t completely understand. :smile: do you use that to yield a process to the ui "thread"?you  left a vim swapfile in there you. and jshint nags about creating a function in a loop. i tried calling the settimeout with a var_args array like `settimeout(handleresponse. 0. [r.resume]);` but the closure compiler doesn\'t like that. and it also changes `this` and i don\'t know if that bad. the tests pass.', 'albertjan oops. thought i\'d got rid of all the swap files (stupidly did a `git add .` at one point).scheduling resuming with `settimeout(.... 0)` essentially pushes the resuming onto the back of the ui event queue. and so allows other things in the queue (like ui events or other scheduled functions) to run first. it\'s basically a cooperative multithreading "do something else if you want to" operation.the jshint warning is stupid (since i return directly after creating the function). but i\'ll add a workaround.one issue with conditional codegen of the exec limit is that there is currently an interface for setting an exec limit in `sys`. which won\'t actually function if the exec limit wasn\'t previously defined. since setting the exec limit in python seems odd to me anyway. i don\'t think this is a big deal. and actually i\'d be in favour of removing that functionality entirely. but i didn\'t want to make a backwards incompatible change like that here.', "thanks for your pr - you did it correctly too! right branch. jshint passed. etc. so many people do it wrong :)but i'm afraid i'm quite worried about implementing the change. the thought of generating a brand new point object _every single time_ you call `camera.position` seems incredibly inefficient to me. sorry. i like the idea. but we're going to need to find a different way to implement it.", 'added: .editorconfig file to help with jshint issues. added: grunt-notify to send growl/notification center notifications on jshint issues', 'update: force-pushed a change fixing a jshint error', 'bantic it might be good if i clarify that i am breaking jshint rules on purpuse to produce a failed test.', 'jshint crashes on `return throw new error()`. obviously `return throw new error()` is an illegal js statement. however. jshint fails to pick up on it. and fails to check the file as a result.to reproduce. simply run jshint against this file:```var func = function(){    return throw new error();}```', "thanks niggler. and sorry. i still don't like tabs and tend to forget to set them up when editing jshint :-)", "there's already `jshint --verbose` that shows warning codes. could you re-do this pr for jslint_xml reporter only. please?", 'any chance of a release including this?', 'here\'s a smaller test case:``` js/* jshint devel:false */console.log("foo");```when putting that in `a.js`. executing `./jshint a.js` unexpectedly does not result in an error.', '...and the reason was that i had a `.jshintrc` higher up in the hierarchy which included `"node": true`.', "have you tried linting individual files? it's quite possible there's a particular file which jshint has trouble dealing with.", "not really for your issue. we're always open to documentation patches (see jshint/site repo)!", 'can you give a bit more context about this bug?- try to pinpoint what line(s) of code makes it blow- give your `.jshintrc` configuration as well as `/* jshint: */` directives you may not include with your codeto fix a bug. we need enough context to be able to reproduce it and confirm it', 'indent:false triggers indent. .jshintrc:``` json{  "indent": false}```demo.js:``` javascriptfunction test() { sup();```running jshint against these fails will trigger an indentation warning which doesn\'t make sense since indent is set to false.', "indent: true option for uniform input. it'd be nice to be able to specify `/* jshint indent: true */`and have jshint check that the file is indentented consistently.but without having to specify how many tabs/spaces you're using.", 'not a bad idea but this should be a thread on jshint mailing list. not a ticket. i prefer tickets to be immediately actionable.', "ignore ...min.js files by default. i'd prefer that my results aren't polluted by files like `jquery-x.y.z.min.js` and `backbone-min.js`. so i've put this in my `.jshintignore`:```*.min.js*-min.js*/*.min.js*/*-min.js```could we ignore such files be default?", 'jshint searches for `.jshintignore` all the way up the tree until it hits the root. so if your files are under your home directory it should work fine.', "i'd rather not enforce these restrictions. if someone happen to have a legitimate file that ends with `[-.]min.js` then we will have to implement unignore which complicates things even further.", 'ah. my syntax was slightly off. i needed to set my `~/.jshintignore` to:```node_modules*.min.js*-min.js*/*.min.js*/*-min.js```', "how to ignore .min.js and -min.js files in all subdirectories?. i can eliminate a specific folder's minified js from jshint results by putting `<folder>/*[.-]min.js` in my project's `.jshintignore`. how can i eliminate all minified js from jshint results. no matter which subfolder or how deeply nested? i tried `*[.-]min.js`. `*/*[.-]min.js`. and `**[.-]min.js`. all without success.", 'since the matching is based on minimatch. i think it would be `**/*-min.js`', 'nschonni works for me!', "feature: merge. don't overwrite. jshintignore rules up to top directory. i keep some general rules like `node_modules` in my `~/.jshintignore`. but these are overwritten by any project-local `.jshintignores`. could we change the behavior to merge rather than overwrite these rules?", "i don't know if this is older than this functionality. but i was just looking at the source. and the docs for jslint. and this could do the trick as well```/*jshint -w027*/```", "the documentation says that sytax turns off those warnings everywhere. so i'm not sure if function scope works with those. also i would like to note another use case for this is the use of a preprocessor. it would be nice to be able to lint before and after preprocessing if you take the time to set jshint options. so far i'm going to try the approach i just mentioned.**update:** it is function scoped.", 'okay. thanks jeff. :+1:', 'i think this is not the case on the newest jshint. but actually letting the reporter exit would allow them to be async.', "i basically added a bandaid patch to my patch. it works for more cases. but not all cases. the bigger issue is that scope-handling in jshint is split among at least two different systems. once that is unified. a lot of scope-related bugs will be a lot simpler to fix. and more robustly.---main point; this patch is better done after scope is unified. does closing and re-opening github pulls work currently? i'm seeing conflicting information on the net. so keeping it open for now.in the meantime. please ignore this pull until its next update.", 'make `jshint` behave like `jshint .`. `jshint` by itself is often misleading. printing no errors. can we make it behave by default like `jshint .` ?', 'no. jshint is not jslint. it used to be two years ago but not anymore.', 'could you please be more specific as to why this should not be the default behavior?', "just about to send a pull request. but as a workaround in the meantime. you can just use `/*jshint opt: val*/` in your `~/.jshintrc`. as you can see. it's not a real `.jshintrc` file. i fell into the same trap when i first tried out `jshint.vim` today.", 'i believe that it\'s not clear which of strategies 2 and 3 will end up being the smaller change. since there is a lot of code in jshint that depends on the original system with `"(context)"` and so on. the only way to be sure is to do a rough implementation of each.---> and btw. a close request being nothing more than a special case of issue in github. i see no reason why you can\'t close and reopen it.in that case. i\'ll go ahead and close this pull temporarily until the scope issue is resolved.i\'ll open up another issue to handle the scope discussion.', "i understand that jshint has diverged significantly from jslint. what i'm asking is. apart from jslint history. _why_ is making `jshint` with no options behave like `jshint .` less than an enhancement that makes jshint more intutive?", "jshinting client-side code: 'window' is not defined. in web browsers. `window` is an automatically defined. global scope variable. how can we inform jshint that specific code files are designed for client side code? i think some syntax for `.jshintrc` would be good for this.", 'antonkovalyov there was no mention of jslint in this issue until you mentioned it - maybe you misread something?', '> no. jshint is not jslint. it used to be two years ago but not anymore.--antonkovalyovcan someone please explain in terms _other than jslint_ why this enhancement would be anything other than a good idea?', 'nschonni thanks!', 'ah yeah my mistake. for some reason i read it as `jshint` acting as `jslint .` oooops. as for the original suggestions. its not a very unix-ey way i think but i can be convinced otherwise.', 'antonkovalyov no worries :)when jshint is invoked by itself (`jshint`). it returns with no output. this behavior for `jshint .` indicates that no warnings were found in the code scanned. i think that a lot of people would instictively call `jshint` by itself. forgetting to give it arguments. and mistakenly believe their code to be passing.so i think we should either consider making `jshint` behave like `jshint .` by default. or make `jshint` print its usage statement as if it were called with `-h`.', "comma operator not understood as single expression. using the comma operator (not particularly clean. but valid js syntax) causes jshint to incorrectly report a syntax error.```var do_x. do_y. do_z;do_x = do_y = do_z = function(){ console.log('hello'); };if (true)    do_x(). do_y();else    do_z();```yield the following jshint errors:```test.js: line 7. col 1. expected an identifier and instead saw 'else'.test.js: line 7. col 1. expected an assignment or function call and instead saw an expression.test.js: line 7. col 5. missing semicolon.```", 'jshint + `"use strict";` results in spurious "\'exports\' is not defined." warnings. i\'d like to apply both jshint and `"use strict";` to my node.js code. but when i do. jshint complains:```$ jshint .binfix.js: line 14. col 1. \'exports\' is not defined.binfix.js: line 24. col 1. \'exports\' is not defined.binfix.js: line 48. col 1. \'exports\' is not defined.```', 'use `/*jshint node:true */` option.', 'antonkovalyov thanks again! all the warnings went away when i added `"node": true` to my `.jshintrc`!', 'unicode support is lacking. the following snippet is perfectly valid. but jshint chokes on the `x` and wrongly finds scope and syntax errors for the rest of the file.``` javascript var data = {    min: results[0].min.    max: results[0].max.    x: results[0].sum / results[0].count.    s: math.sqrt(variance).    n: results[0].count};```', 'we discussed this on the irc. thanks pal!', "antonkovalyov sorry for bringing this up one again. but i can reproduce the incorrect warning w/ current master using spadgos' sample test code (see tmuellerleile/jshintaad230274ab52e95eed8a804c07f1ae903e99ade). would you mind taking another look at this?", "support /*jshint shelljs:true*/. imo. it'd be rather useful to support shelljs through a single directive rather than allowing a bunch of globals.thoughts?", 'preface each warning with the name of the .jshintrc rule that turns it off. i like the laxcomma note. i think we can go further with this.in cases where warnings don\'t have real names. we can still advise `"-w07"`. etc.', 'optionally warn about anonymous functions. when using anonymous functions instead of named function expressions or function declarations it will make stacktraces and code less readableit would be nice if jshint could warn about them.', "real name for all warnings in jshintrc (no more -w070 in every file. etc). hello.surprised i didn't find this issue floating around already. i think all warnings should be controllable via jshintrc; couldn't get this to work or find docs on it. have i missed something?- kenn", 'naming is hard. plus. named options sometimes combine multiple warnings. basically. if you find yourself adding lots of `-wxxx` comments ask yourself why do you need a linting tool at all if you ignore its warnings anyway.', 'ok no names. but project-wide support for e.g. -w070 would be nice since it is a legacy ie warning. how about just the warning number in jshintrc?', "(my answer to your rhetorical question is the usual: i am a highly multilingual programmer and need a community repository of js's issues so that i can program using my full capability while avoiding pitfalls specific to the language. and i need fine control over those warnings that do not apply to my project.)", "kennknowles have you tried something like `{ '-w070': true }`? is that too annoying?antonkovalyov it might be a good idea to clarify that this is how to enable number-options. i was trying to do the same thing a couple of months ago. and was stumped when `{ 'w070': false }` didn't work.", 'skalman thanks! that is exactly what i wanted. i mistakenly asked for "real names" when what i meant was "a name i can put in jshintrc". thinking that the -wxxx were only implemented in file-level comments. i was reading the code to discover just that functionality. or where to add it in my fork. when i found "es5".']