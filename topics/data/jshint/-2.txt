["build error. so i cloned the repo. installed dependencies with `npm install`. and built with gulp.> error: cannot find module 'jshint/src/cli'i solved it with:> npm install --save-dev jshint gulp-jshinti thought i should be opening an issue nevertheless.", 'looks like we are missing a `jshint` dep. but gulp-jshint is there. feel free to put in a pr.', 'ha. ok :)', 'chore: fix jshint errors blocking npm test. to get `npm test` to run again. some cleanup was necessary. note this includes a change to the jshint config allowing `eval`. rather than rewriting the `wrapwithhelpers` function in `lib/clientsidescripts.js`.refs #2398', "i'd love to redirect it to a file. and get my ci server to pick up said file as a build log asset.  i grant the easiest thing is to tell my build server to treat stdout and stderr as that log. but i've gotten some push-back when i suggest it.i also foresee the day when i'm asked to format it as xml. and passing in a reporter (similar to jshint) could be helpful.", "+1i am using currently atom with jshint package and i get numerous errors especially how you access attributes like sk.builtin.['tuple'] and not sk.builtin.tuple. i also think the braces could help a lot. though i am currently using 2 space indent like node.js.", "here is my thinking after the weekend.phase 1:  do the automated reformatting which will conform all the code to the style above.phase 2:  make the newly reformatted code pass jshint/jslint tests.  i think i'm hearing strong support for linting.i've got a basic jshint.json file ready that i will push right after i post this.  i just took the one from jslintmate which i think is pretty good.  i can push this up and we can run it if everyone agrees we can make a plan/hackathon to get all files into conformance.it would be pretty easy to add a skulpt.py task to run jshint standalone. and it ought to be part of our travis tests/pre-pr acceptance workflow.   but. i think we ought to just make jshint a dependency and make people install it on their own.  the reason being is that everyone has their own dev environment anyway. and many of the tools (pycharm. textmate. emacs. atom??) have bundles that allow you to incorporate linting into your everyday editing tasks.   i think all of those tools are configurable to allow you to use a particular .json config file for your project.", "jshint options discussion. i don't know why your commits are showing up here bnmnetp. i can't rebase because somehow it starts replaying stuff from 3 weeks back.i did this pr to so we can have a conversation piece.i removed all the defaults and changed a few options to be a bit more strict all seem very sound choices to me but this being a discussion and all :smile:  this also adds a package.json so you can type `npm install` in the directory to install. seem logical to me also useful for travis.", 'i just did the jshint.json thing as a commit rather than a pr because making a pr for a one file push seemed silly.', "i understand. but i really wanted to add some comments. and you can't add line notes in a repo only in a pr. so thats why i did this.", "my changes aren't showing up...", 'what changes?  where are you expecting them to show up?  i see a whole bunch of commits to this pr.', 'there we go. the commits describe why i changed what i changed.', 'i thought we were going to have virtual :beers:! eah13 help me out here :smile:. bnmnetp did you see any regressions when you do the auto formatting? and did you do the lint with the changes i sugested? i updated the .jshintrc file in my pr to include `newcaps: false`. i think i have sometime on my hands this weekend. are we are able to install node on our machines? because then we could add a jshint buildtask to skulpt.py. which we should do for travis anyway i think. we should agree on which settings we want to enforce in jshint before we start linting.', 'ah. the es5 option should just be removed from the .jshintrc file as it is on by default.  this gets rid of the error.', 'you shouldnt have to specify the location of the .jshintrc', 'what you think whether add jshint first or not? if i add jshint first. the minor change will break it.otherwise. i take pr first. then add jshint after all of prs are merged.', 'the cache buster is now optional.added jshint configuration.', "arschmitz updated.what's included:-- fix styling issues eg:- correct quotes. spacing etc.- updates gruntfile.- jshint src. test files & gruntfile.- jscs test files & gruntfile.- updated node to latest.- updated editorconf.", "i've jshinted enforcing white=true on test. will enforce that and fix the rest of the code in separate pr.", 'stricter jshint rules enforcable from editor. that should sort those linting issues once and for all.if there are merging conflict. just ignore this pr changes and re-jshint.', "if i remember correctly. we didn't update jshint last time due to `function(grunt)` vs `function (grunt)` /cc jlipps", 'yeah. that was the reason. still not sure about this. one of the advantages is that it makes `function` consistent with `if` and `for`', 'i like that finally the whitespace rules are detected automatically.', 'done.', 'nodejs project alignment cleanup. first commit moves the "lib" files to an actual lib directory which sort of better aligns with how other nodejs projects do it.the second commit fixes a jshint error during `grunt` .   abstractj mind :eyes:', 'lholmquist landed. thank you', 'list globals in .jshintrc. i wonder: why globals cannot be listed in `.jshintrc`?it would be great to specify them in config file like so:``` json{    "asi": false.    "curly": true.    "globals": [ "require". "exports" ]}```', "+1for some reason `/dev/stdin` doesn't even work.", 'great! thanks for the hint!', "has this been implemented?i'm using jshint from the node npm package and i'd like to have the ability to disable jshint checking for an entire file which has been written by a third party.", 'for this you can use .jshintignore file. it behaves just like .gitignore. see our readme for more info.', "antonkovalyov  you misunderstand.jshint does not give me an error or warning for this code but when i run my code in v8 it fails.jshint's parser is fine. the problem is i expected jshint to warn me about any code that throws a syntaxerror", "jshint-maven-plugin. let's just get this done - and please don't mention wro4j again: getting a whole crapload of optimizers is not necessarily what you want ...", 'sorry. but this ticket is not suitable for this repository. **all** jshint plugins for various editors and build systems are external projects maintained by independent developers. at this point. i have no plans to ship anything official. as i said in previous tickets the best way to get this done is to do it yourself.', '+1 for this feature. specifically. i\'d like to see jshint couragously lint any file extension. whether it\'s php. ejs. mustache. or html. jshint should look for script tags with `type="text/javascript"` or with no type attribute.lint these:```<script><script type="text/javascript">```and not:```<script type="text/handlebars-template">```', "torbenvesterager dude. do it and stop whining. if you don't like a tool. make a suggestion. provide an alternative or create one from scratch. but do not bash an open source project just because you don't understand it or had no patience to try it..", "jshint shouldn't complain about good extra whitespace. of course. it's not easy to define 'good extra whitespace'. but this is what i mean:```receiver.onmessage.apply(newarr);      oldonmessage.apply(newarr);```this code is easier to ready because i align the .apply calls. you recognize a pattern and think less. this is good whitespace jshint shouldn't complain about. perhaps you could develop some option for this at first.", "jshint shouldn't care about whitespace at all. the option `white` was inherited from jslint so we can't remove it but we will extract it to a separate module at some point.", "yeah that's a real tough one.. i was just going to re-file this issue but found it's already herei agree with anton. jshint shouldn't be a javascript interpreter.we could simply say that only `window.namespace` declarations are recognized and any other form isn't... but i got a better idea:if jshint reads: `window.namespace` anywhere. it could pass the warning:```global window.namespace declarations can create confusing semantics. please `var namespace` atthe top scope of your program. this makes it easier for reading too. since global declarationsare expected to be in the top scope. and not anywhere else in the code.```long winded. but something like this could be good.", 'missing dataview from node. node js has the dataview global object. but it is not recognized by jshint.', "how would you want the configuration of this new .jshintrc laid out? i'm assuming in json somehow?", 'unused var check in argument list only catches last param. example that does throw an error:```function foo(a. b) {  window.alert(a);}foo();```example that should. but does not throw an error:```function foo(a. b) {  window.alert(b);}foo();```verified against jshint.com as of this writing.', "that's a feature. not a bug. :-) when i first implemented `unused` a lot of people complained because there is a common pattern in js/node community that goes like this:``` javascriptrun(function (err. result) {  display(result);});```so sometimes people don't care about `err` so i changed jshint to assume that whenever an unused variable is followed by a used one it's intentional.", 'seems like something better suited for an option. than changing global behavior for a single use case :)eg. unused-args', 'can this behavior be optional? sometimes people _do_ care about unused variables like `err`.', "if i submit a pull request making it multiple choice. think you'll accept it?for the node use case you mentioned. did those people seem okay with function params not getting checked at all?  or did they still want the last one checked?  the latter seems overly specific to me.", 'fwiw. +1000 on multiple choice for unused']